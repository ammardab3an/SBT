
selfBalancingBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000156b8  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000017d0  08015778  08015778  00025778  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016f48  08016f48  00030228  2**0
                  CONTENTS
  4 .ARM          00000008  08016f48  08016f48  00026f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016f50  08016f50  00030228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016f50  08016f50  00026f50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016f54  08016f54  00026f54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000228  20000000  08016f58  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f18  20000228  08017180  00030228  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001140  08017180  00031140  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00030228  2**0
                  CONTENTS, READONLY
 12 .comment      000000b3  00000000  00000000  00030250  2**0
                  CONTENTS, READONLY
 13 .debug_info   000192bc  00000000  00000000  00030303  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004e2f  00000000  00000000  000495bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001508  00000000  00000000  0004e3f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f83  00000000  00000000  0004f8f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020e52  00000000  00000000  0005087b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e894  00000000  00000000  000716cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000af10a  00000000  00000000  0008ff61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006d80  00000000  00000000  0013f06c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  00145dec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000035f5  00000000  00000000  00145e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000370  00000000  00000000  00149455  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000228 	.word	0x20000228
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0801575c 	.word	0x0801575c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000022c 	.word	0x2000022c
 8000100:	0801575c 	.word	0x0801575c

08000104 <inv_fast_nomot_parameter.part.3>:
 8000104:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000106:	2318      	movs	r3, #24
 8000108:	4644      	mov	r4, r8
 800010a:	4680      	mov	r8, r0
 800010c:	4443      	add	r3, r8
 800010e:	465f      	mov	r7, fp
 8000110:	469b      	mov	fp, r3
 8000112:	2300      	movs	r3, #0
 8000114:	4656      	mov	r6, sl
 8000116:	464d      	mov	r5, r9
 8000118:	469a      	mov	sl, r3
 800011a:	4699      	mov	r9, r3
 800011c:	b4f0      	push	{r4, r5, r6, r7}
 800011e:	b08b      	sub	sp, #44	; 0x2c
 8000120:	4643      	mov	r3, r8
 8000122:	681e      	ldr	r6, [r3, #0]
 8000124:	685f      	ldr	r7, [r3, #4]
 8000126:	69dc      	ldr	r4, [r3, #28]
 8000128:	699b      	ldr	r3, [r3, #24]
 800012a:	1c32      	adds	r2, r6, #0
 800012c:	1c25      	adds	r5, r4, #0
 800012e:	1c30      	adds	r0, r6, #0
 8000130:	1c1c      	adds	r4, r3, #0
 8000132:	1c39      	adds	r1, r7, #0
 8000134:	1c3b      	adds	r3, r7, #0
 8000136:	f003 f9bb 	bl	80034b0 <__aeabi_lmul>
 800013a:	1c22      	adds	r2, r4, #0
 800013c:	9002      	str	r0, [sp, #8]
 800013e:	9103      	str	r1, [sp, #12]
 8000140:	1c2b      	adds	r3, r5, #0
 8000142:	1c20      	adds	r0, r4, #0
 8000144:	1c29      	adds	r1, r5, #0
 8000146:	9408      	str	r4, [sp, #32]
 8000148:	9509      	str	r5, [sp, #36]	; 0x24
 800014a:	f003 f9b1 	bl	80034b0 <__aeabi_lmul>
 800014e:	1c04      	adds	r4, r0, #0
 8000150:	1c0d      	adds	r5, r1, #0
 8000152:	0f83      	lsrs	r3, r0, #30
 8000154:	0089      	lsls	r1, r1, #2
 8000156:	4319      	orrs	r1, r3
 8000158:	9105      	str	r1, [sp, #20]
 800015a:	0081      	lsls	r1, r0, #2
 800015c:	9104      	str	r1, [sp, #16]
 800015e:	9904      	ldr	r1, [sp, #16]
 8000160:	9a05      	ldr	r2, [sp, #20]
 8000162:	1a64      	subs	r4, r4, r1
 8000164:	4195      	sbcs	r5, r2
 8000166:	4641      	mov	r1, r8
 8000168:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800016a:	6c89      	ldr	r1, [r1, #72]	; 0x48
 800016c:	1864      	adds	r4, r4, r1
 800016e:	4155      	adcs	r5, r2
 8000170:	9802      	ldr	r0, [sp, #8]
 8000172:	9903      	ldr	r1, [sp, #12]
 8000174:	1c02      	adds	r2, r0, #0
 8000176:	1c0b      	adds	r3, r1, #0
 8000178:	1812      	adds	r2, r2, r0
 800017a:	414b      	adcs	r3, r1
 800017c:	1c30      	adds	r0, r6, #0
 800017e:	1c39      	adds	r1, r7, #0
 8000180:	f003 f996 	bl	80034b0 <__aeabi_lmul>
 8000184:	1c02      	adds	r2, r0, #0
 8000186:	1c0b      	adds	r3, r1, #0
 8000188:	1c30      	adds	r0, r6, #0
 800018a:	1c39      	adds	r1, r7, #0
 800018c:	f003 f990 	bl	80034b0 <__aeabi_lmul>
 8000190:	9a08      	ldr	r2, [sp, #32]
 8000192:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000194:	1824      	adds	r4, r4, r0
 8000196:	414d      	adcs	r5, r1
 8000198:	9802      	ldr	r0, [sp, #8]
 800019a:	9903      	ldr	r1, [sp, #12]
 800019c:	1a12      	subs	r2, r2, r0
 800019e:	418b      	sbcs	r3, r1
 80001a0:	1c10      	adds	r0, r2, #0
 80001a2:	1c19      	adds	r1, r3, #0
 80001a4:	1880      	adds	r0, r0, r2
 80001a6:	4159      	adcs	r1, r3
 80001a8:	1812      	adds	r2, r2, r0
 80001aa:	414b      	adcs	r3, r1
 80001ac:	9802      	ldr	r0, [sp, #8]
 80001ae:	9903      	ldr	r1, [sp, #12]
 80001b0:	1812      	adds	r2, r2, r0
 80001b2:	414b      	adcs	r3, r1
 80001b4:	1c30      	adds	r0, r6, #0
 80001b6:	1c39      	adds	r1, r7, #0
 80001b8:	f003 f97a 	bl	80034b0 <__aeabi_lmul>
 80001bc:	4643      	mov	r3, r8
 80001be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80001c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80001c2:	1a80      	subs	r0, r0, r2
 80001c4:	4199      	sbcs	r1, r3
 80001c6:	2204      	movs	r2, #4
 80001c8:	4252      	negs	r2, r2
 80001ca:	17d3      	asrs	r3, r2, #31
 80001cc:	f003 f970 	bl	80034b0 <__aeabi_lmul>
 80001d0:	1c02      	adds	r2, r0, #0
 80001d2:	1c0b      	adds	r3, r1, #0
 80001d4:	1c30      	adds	r0, r6, #0
 80001d6:	1c39      	adds	r1, r7, #0
 80001d8:	f003 f96a 	bl	80034b0 <__aeabi_lmul>
 80001dc:	1824      	adds	r4, r4, r0
 80001de:	414d      	adcs	r5, r1
 80001e0:	17eb      	asrs	r3, r5, #31
 80001e2:	9306      	str	r3, [sp, #24]
 80001e4:	9307      	str	r3, [sp, #28]
 80001e6:	9906      	ldr	r1, [sp, #24]
 80001e8:	9a07      	ldr	r2, [sp, #28]
 80001ea:	1c0b      	adds	r3, r1, #0
 80001ec:	4063      	eors	r3, r4
 80001ee:	9300      	str	r3, [sp, #0]
 80001f0:	1c13      	adds	r3, r2, #0
 80001f2:	406b      	eors	r3, r5
 80001f4:	9301      	str	r3, [sp, #4]
 80001f6:	9b00      	ldr	r3, [sp, #0]
 80001f8:	9c01      	ldr	r4, [sp, #4]
 80001fa:	1a5b      	subs	r3, r3, r1
 80001fc:	4194      	sbcs	r4, r2
 80001fe:	9300      	str	r3, [sp, #0]
 8000200:	9401      	str	r4, [sp, #4]
 8000202:	454c      	cmp	r4, r9
 8000204:	dc28      	bgt.n	8000258 <inv_fast_nomot_parameter.part.3+0x154>
 8000206:	9b01      	ldr	r3, [sp, #4]
 8000208:	454b      	cmp	r3, r9
 800020a:	d022      	beq.n	8000252 <inv_fast_nomot_parameter.part.3+0x14e>
 800020c:	2308      	movs	r3, #8
 800020e:	469c      	mov	ip, r3
 8000210:	44e0      	add	r8, ip
 8000212:	45d8      	cmp	r8, fp
 8000214:	d000      	beq.n	8000218 <inv_fast_nomot_parameter.part.3+0x114>
 8000216:	e783      	b.n	8000120 <inv_fast_nomot_parameter.part.3+0x1c>
 8000218:	4649      	mov	r1, r9
 800021a:	4650      	mov	r0, sl
 800021c:	f003 fa20 	bl	8003660 <__aeabi_l2f>
 8000220:	4b13      	ldr	r3, [pc, #76]	; (8000270 <inv_fast_nomot_parameter.part.3+0x16c>)
 8000222:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000224:	f003 fc24 	bl	8003a70 <__aeabi_fdiv>
 8000228:	f003 f9a6 	bl	8003578 <__aeabi_f2lz>
 800022c:	2383      	movs	r3, #131	; 0x83
 800022e:	4a11      	ldr	r2, [pc, #68]	; (8000274 <inv_fast_nomot_parameter.part.3+0x170>)
 8000230:	009b      	lsls	r3, r3, #2
 8000232:	58d3      	ldr	r3, [r2, r3]
 8000234:	2220      	movs	r2, #32
 8000236:	009b      	lsls	r3, r3, #2
 8000238:	4252      	negs	r2, r2
 800023a:	189a      	adds	r2, r3, r2
 800023c:	d411      	bmi.n	8000262 <inv_fast_nomot_parameter.part.3+0x15e>
 800023e:	1c08      	adds	r0, r1, #0
 8000240:	4110      	asrs	r0, r2
 8000242:	4119      	asrs	r1, r3
 8000244:	b00b      	add	sp, #44	; 0x2c
 8000246:	bc3c      	pop	{r2, r3, r4, r5}
 8000248:	4690      	mov	r8, r2
 800024a:	4699      	mov	r9, r3
 800024c:	46a2      	mov	sl, r4
 800024e:	46ab      	mov	fp, r5
 8000250:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000252:	9b00      	ldr	r3, [sp, #0]
 8000254:	4553      	cmp	r3, sl
 8000256:	d9d9      	bls.n	800020c <inv_fast_nomot_parameter.part.3+0x108>
 8000258:	9b00      	ldr	r3, [sp, #0]
 800025a:	9c01      	ldr	r4, [sp, #4]
 800025c:	469a      	mov	sl, r3
 800025e:	46a1      	mov	r9, r4
 8000260:	e7d4      	b.n	800020c <inv_fast_nomot_parameter.part.3+0x108>
 8000262:	2220      	movs	r2, #32
 8000264:	1c0c      	adds	r4, r1, #0
 8000266:	1ad2      	subs	r2, r2, r3
 8000268:	4094      	lsls	r4, r2
 800026a:	40d8      	lsrs	r0, r3
 800026c:	4320      	orrs	r0, r4
 800026e:	e7e8      	b.n	8000242 <inv_fast_nomot_parameter.part.3+0x13e>
 8000270:	20000248 	.word	0x20000248
 8000274:	20000da8 	.word	0x20000da8

08000278 <inv_init_maxmin>:
 8000278:	07c3      	lsls	r3, r0, #31
 800027a:	d50a      	bpl.n	8000292 <inv_init_maxmin+0x1a>
 800027c:	22c0      	movs	r2, #192	; 0xc0
 800027e:	4b19      	ldr	r3, [pc, #100]	; (80002e4 <inv_init_maxmin+0x6c>)
 8000280:	0612      	lsls	r2, r2, #24
 8000282:	669a      	str	r2, [r3, #104]	; 0x68
 8000284:	66da      	str	r2, [r3, #108]	; 0x6c
 8000286:	671a      	str	r2, [r3, #112]	; 0x70
 8000288:	2280      	movs	r2, #128	; 0x80
 800028a:	05d2      	lsls	r2, r2, #23
 800028c:	675a      	str	r2, [r3, #116]	; 0x74
 800028e:	679a      	str	r2, [r3, #120]	; 0x78
 8000290:	67da      	str	r2, [r3, #124]	; 0x7c
 8000292:	0783      	lsls	r3, r0, #30
 8000294:	d511      	bpl.n	80002ba <inv_init_maxmin+0x42>
 8000296:	22c0      	movs	r2, #192	; 0xc0
 8000298:	2180      	movs	r1, #128	; 0x80
 800029a:	4b12      	ldr	r3, [pc, #72]	; (80002e4 <inv_init_maxmin+0x6c>)
 800029c:	0612      	lsls	r2, r2, #24
 800029e:	0049      	lsls	r1, r1, #1
 80002a0:	505a      	str	r2, [r3, r1]
 80002a2:	3104      	adds	r1, #4
 80002a4:	505a      	str	r2, [r3, r1]
 80002a6:	3104      	adds	r1, #4
 80002a8:	505a      	str	r2, [r3, r1]
 80002aa:	2280      	movs	r2, #128	; 0x80
 80002ac:	3104      	adds	r1, #4
 80002ae:	05d2      	lsls	r2, r2, #23
 80002b0:	505a      	str	r2, [r3, r1]
 80002b2:	3104      	adds	r1, #4
 80002b4:	505a      	str	r2, [r3, r1]
 80002b6:	3104      	adds	r1, #4
 80002b8:	505a      	str	r2, [r3, r1]
 80002ba:	0743      	lsls	r3, r0, #29
 80002bc:	d511      	bpl.n	80002e2 <inv_init_maxmin+0x6a>
 80002be:	22c0      	movs	r2, #192	; 0xc0
 80002c0:	21cc      	movs	r1, #204	; 0xcc
 80002c2:	4b08      	ldr	r3, [pc, #32]	; (80002e4 <inv_init_maxmin+0x6c>)
 80002c4:	0612      	lsls	r2, r2, #24
 80002c6:	0049      	lsls	r1, r1, #1
 80002c8:	505a      	str	r2, [r3, r1]
 80002ca:	3104      	adds	r1, #4
 80002cc:	505a      	str	r2, [r3, r1]
 80002ce:	3104      	adds	r1, #4
 80002d0:	505a      	str	r2, [r3, r1]
 80002d2:	2280      	movs	r2, #128	; 0x80
 80002d4:	3104      	adds	r1, #4
 80002d6:	05d2      	lsls	r2, r2, #23
 80002d8:	505a      	str	r2, [r3, r1]
 80002da:	3104      	adds	r1, #4
 80002dc:	505a      	str	r2, [r3, r1]
 80002de:	3104      	adds	r1, #4
 80002e0:	505a      	str	r2, [r3, r1]
 80002e2:	4770      	bx	lr
 80002e4:	20000da8 	.word	0x20000da8

080002e8 <inv_reset_packet>:
 80002e8:	b510      	push	{r4, lr}
 80002ea:	4c08      	ldr	r4, [pc, #32]	; (800030c <inv_reset_packet+0x24>)
 80002ec:	2100      	movs	r1, #0
 80002ee:	1c20      	adds	r0, r4, #0
 80002f0:	2298      	movs	r2, #152	; 0x98
 80002f2:	f011 fe18 	bl	8011f26 <memset>
 80002f6:	1c20      	adds	r0, r4, #0
 80002f8:	3031      	adds	r0, #49	; 0x31
 80002fa:	2100      	movs	r1, #0
 80002fc:	2298      	movs	r2, #152	; 0x98
 80002fe:	30ff      	adds	r0, #255	; 0xff
 8000300:	f011 fe11 	bl	8011f26 <memset>
 8000304:	2005      	movs	r0, #5
 8000306:	f7ff ffb7 	bl	8000278 <inv_init_maxmin>
 800030a:	bd10      	pop	{r4, pc}
 800030c:	20000db0 	.word	0x20000db0

08000310 <inv_start_fast_nomot>:
 8000310:	2298      	movs	r2, #152	; 0x98
 8000312:	b510      	push	{r4, lr}
 8000314:	4c0c      	ldr	r4, [pc, #48]	; (8000348 <inv_start_fast_nomot+0x38>)
 8000316:	2100      	movs	r1, #0
 8000318:	0092      	lsls	r2, r2, #2
 800031a:	1c20      	adds	r0, r4, #0
 800031c:	f011 fe03 	bl	8011f26 <memset>
 8000320:	2007      	movs	r0, #7
 8000322:	f7ff ffa9 	bl	8000278 <inv_init_maxmin>
 8000326:	22f2      	movs	r2, #242	; 0xf2
 8000328:	2301      	movs	r3, #1
 800032a:	0052      	lsls	r2, r2, #1
 800032c:	50a3      	str	r3, [r4, r2]
 800032e:	3204      	adds	r2, #4
 8000330:	54a3      	strb	r3, [r4, r2]
 8000332:	2001      	movs	r0, #1
 8000334:	2103      	movs	r1, #3
 8000336:	2200      	movs	r2, #0
 8000338:	f00e f830 	bl	800e39c <inv_set_message>
 800033c:	2164      	movs	r1, #100	; 0x64
 800033e:	2207      	movs	r2, #7
 8000340:	4802      	ldr	r0, [pc, #8]	; (800034c <inv_start_fast_nomot+0x3c>)
 8000342:	f00a fb1d 	bl	800a980 <inv_register_data_cb>
 8000346:	bd10      	pop	{r4, pc}
 8000348:	20000da8 	.word	0x20000da8
 800034c:	08000a69 	.word	0x08000a69

08000350 <inv_fast_nomot_parameter>:
 8000350:	6f81      	ldr	r1, [r0, #120]	; 0x78
 8000352:	b508      	push	{r3, lr}
 8000354:	2200      	movs	r2, #0
 8000356:	2300      	movs	r3, #0
 8000358:	2900      	cmp	r1, #0
 800035a:	d003      	beq.n	8000364 <inv_fast_nomot_parameter+0x14>
 800035c:	f7ff fed2 	bl	8000104 <inv_fast_nomot_parameter.part.3>
 8000360:	1c02      	adds	r2, r0, #0
 8000362:	1c0b      	adds	r3, r1, #0
 8000364:	1c10      	adds	r0, r2, #0
 8000366:	1c19      	adds	r1, r3, #0
 8000368:	bd08      	pop	{r3, pc}
 800036a:	46c0      	nop			; (mov r8, r8)

0800036c <inv_fast_nomot_parameter_3rd>:
 800036c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800036e:	465f      	mov	r7, fp
 8000370:	4656      	mov	r6, sl
 8000372:	464d      	mov	r5, r9
 8000374:	4644      	mov	r4, r8
 8000376:	b4f0      	push	{r4, r5, r6, r7}
 8000378:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800037a:	b085      	sub	sp, #20
 800037c:	2b00      	cmp	r3, #0
 800037e:	d063      	beq.n	8000448 <inv_fast_nomot_parameter_3rd+0xdc>
 8000380:	4680      	mov	r8, r0
 8000382:	2318      	movs	r3, #24
 8000384:	4443      	add	r3, r8
 8000386:	469b      	mov	fp, r3
 8000388:	2300      	movs	r3, #0
 800038a:	469a      	mov	sl, r3
 800038c:	4699      	mov	r9, r3
 800038e:	4643      	mov	r3, r8
 8000390:	681c      	ldr	r4, [r3, #0]
 8000392:	685d      	ldr	r5, [r3, #4]
 8000394:	1c22      	adds	r2, r4, #0
 8000396:	1c20      	adds	r0, r4, #0
 8000398:	1c2b      	adds	r3, r5, #0
 800039a:	1c29      	adds	r1, r5, #0
 800039c:	f003 f888 	bl	80034b0 <__aeabi_lmul>
 80003a0:	4643      	mov	r3, r8
 80003a2:	9002      	str	r0, [sp, #8]
 80003a4:	9103      	str	r1, [sp, #12]
 80003a6:	6998      	ldr	r0, [r3, #24]
 80003a8:	69d9      	ldr	r1, [r3, #28]
 80003aa:	9a02      	ldr	r2, [sp, #8]
 80003ac:	9b03      	ldr	r3, [sp, #12]
 80003ae:	1a80      	subs	r0, r0, r2
 80003b0:	4199      	sbcs	r1, r3
 80003b2:	1c02      	adds	r2, r0, #0
 80003b4:	1c0b      	adds	r3, r1, #0
 80003b6:	1812      	adds	r2, r2, r0
 80003b8:	414b      	adcs	r3, r1
 80003ba:	1880      	adds	r0, r0, r2
 80003bc:	4159      	adcs	r1, r3
 80003be:	9a02      	ldr	r2, [sp, #8]
 80003c0:	9b03      	ldr	r3, [sp, #12]
 80003c2:	1880      	adds	r0, r0, r2
 80003c4:	4159      	adcs	r1, r3
 80003c6:	1c22      	adds	r2, r4, #0
 80003c8:	1c2b      	adds	r3, r5, #0
 80003ca:	f003 f871 	bl	80034b0 <__aeabi_lmul>
 80003ce:	4643      	mov	r3, r8
 80003d0:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 80003d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003d4:	1ac0      	subs	r0, r0, r3
 80003d6:	41a1      	sbcs	r1, r4
 80003d8:	17cb      	asrs	r3, r1, #31
 80003da:	9300      	str	r3, [sp, #0]
 80003dc:	9301      	str	r3, [sp, #4]
 80003de:	9b00      	ldr	r3, [sp, #0]
 80003e0:	9c01      	ldr	r4, [sp, #4]
 80003e2:	1c1a      	adds	r2, r3, #0
 80003e4:	4042      	eors	r2, r0
 80003e6:	1c16      	adds	r6, r2, #0
 80003e8:	1c22      	adds	r2, r4, #0
 80003ea:	404a      	eors	r2, r1
 80003ec:	1c17      	adds	r7, r2, #0
 80003ee:	1af6      	subs	r6, r6, r3
 80003f0:	41a7      	sbcs	r7, r4
 80003f2:	454f      	cmp	r7, r9
 80003f4:	dc25      	bgt.n	8000442 <inv_fast_nomot_parameter_3rd+0xd6>
 80003f6:	d022      	beq.n	800043e <inv_fast_nomot_parameter_3rd+0xd2>
 80003f8:	2308      	movs	r3, #8
 80003fa:	469c      	mov	ip, r3
 80003fc:	44e0      	add	r8, ip
 80003fe:	45d8      	cmp	r8, fp
 8000400:	d1c5      	bne.n	800038e <inv_fast_nomot_parameter_3rd+0x22>
 8000402:	4649      	mov	r1, r9
 8000404:	4650      	mov	r0, sl
 8000406:	f003 f92b 	bl	8003660 <__aeabi_l2f>
 800040a:	4b14      	ldr	r3, [pc, #80]	; (800045c <inv_fast_nomot_parameter_3rd+0xf0>)
 800040c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800040e:	f003 fb2f 	bl	8003a70 <__aeabi_fdiv>
 8000412:	f003 f8b1 	bl	8003578 <__aeabi_f2lz>
 8000416:	2383      	movs	r3, #131	; 0x83
 8000418:	4a11      	ldr	r2, [pc, #68]	; (8000460 <inv_fast_nomot_parameter_3rd+0xf4>)
 800041a:	009b      	lsls	r3, r3, #2
 800041c:	58d3      	ldr	r3, [r2, r3]
 800041e:	005a      	lsls	r2, r3, #1
 8000420:	18d2      	adds	r2, r2, r3
 8000422:	2320      	movs	r3, #32
 8000424:	425b      	negs	r3, r3
 8000426:	18d3      	adds	r3, r2, r3
 8000428:	d411      	bmi.n	800044e <inv_fast_nomot_parameter_3rd+0xe2>
 800042a:	1c08      	adds	r0, r1, #0
 800042c:	4118      	asrs	r0, r3
 800042e:	4111      	asrs	r1, r2
 8000430:	b005      	add	sp, #20
 8000432:	bc3c      	pop	{r2, r3, r4, r5}
 8000434:	4690      	mov	r8, r2
 8000436:	4699      	mov	r9, r3
 8000438:	46a2      	mov	sl, r4
 800043a:	46ab      	mov	fp, r5
 800043c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800043e:	4556      	cmp	r6, sl
 8000440:	d9da      	bls.n	80003f8 <inv_fast_nomot_parameter_3rd+0x8c>
 8000442:	46b2      	mov	sl, r6
 8000444:	46b9      	mov	r9, r7
 8000446:	e7d7      	b.n	80003f8 <inv_fast_nomot_parameter_3rd+0x8c>
 8000448:	2000      	movs	r0, #0
 800044a:	2100      	movs	r1, #0
 800044c:	e7f0      	b.n	8000430 <inv_fast_nomot_parameter_3rd+0xc4>
 800044e:	2320      	movs	r3, #32
 8000450:	1c0c      	adds	r4, r1, #0
 8000452:	1a9b      	subs	r3, r3, r2
 8000454:	409c      	lsls	r4, r3
 8000456:	40d0      	lsrs	r0, r2
 8000458:	4320      	orrs	r0, r4
 800045a:	e7e8      	b.n	800042e <inv_fast_nomot_parameter_3rd+0xc2>
 800045c:	20000248 	.word	0x20000248
 8000460:	20000da8 	.word	0x20000da8

08000464 <inv_fast_nomot_set_gyro_bias>:
 8000464:	2384      	movs	r3, #132	; 0x84
 8000466:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000468:	4d2e      	ldr	r5, [pc, #184]	; (8000524 <inv_fast_nomot_set_gyro_bias+0xc0>)
 800046a:	1c06      	adds	r6, r0, #0
 800046c:	2100      	movs	r1, #0
 800046e:	1c28      	adds	r0, r5, #0
 8000470:	009b      	lsls	r3, r3, #2
 8000472:	b085      	sub	sp, #20
 8000474:	58ef      	ldr	r7, [r5, r3]
 8000476:	ac01      	add	r4, sp, #4
 8000478:	1c0b      	adds	r3, r1, #0
 800047a:	6882      	ldr	r2, [r0, #8]
 800047c:	3384      	adds	r3, #132	; 0x84
 800047e:	40ba      	lsls	r2, r7
 8000480:	58eb      	ldr	r3, [r5, r3]
 8000482:	3008      	adds	r0, #8
 8000484:	041b      	lsls	r3, r3, #16
 8000486:	189b      	adds	r3, r3, r2
 8000488:	5063      	str	r3, [r4, r1]
 800048a:	3104      	adds	r1, #4
 800048c:	290c      	cmp	r1, #12
 800048e:	d1f3      	bne.n	8000478 <inv_fast_nomot_set_gyro_bias+0x14>
 8000490:	4f25      	ldr	r7, [pc, #148]	; (8000528 <inv_fast_nomot_set_gyro_bias+0xc4>)
 8000492:	2298      	movs	r2, #152	; 0x98
 8000494:	1c38      	adds	r0, r7, #0
 8000496:	2100      	movs	r1, #0
 8000498:	f011 fd45 	bl	8011f26 <memset>
 800049c:	2001      	movs	r0, #1
 800049e:	f7ff feeb 	bl	8000278 <inv_init_maxmin>
 80004a2:	23f4      	movs	r3, #244	; 0xf4
 80004a4:	3f08      	subs	r7, #8
 80004a6:	005b      	lsls	r3, r3, #1
 80004a8:	5cfa      	ldrb	r2, [r7, r3]
 80004aa:	2a04      	cmp	r2, #4
 80004ac:	d02f      	beq.n	800050e <inv_fast_nomot_set_gyro_bias+0xaa>
 80004ae:	4f1f      	ldr	r7, [pc, #124]	; (800052c <inv_fast_nomot_set_gyro_bias+0xc8>)
 80004b0:	9b01      	ldr	r3, [sp, #4]
 80004b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80004b4:	1a98      	subs	r0, r3, r2
 80004b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80004b8:	6863      	ldr	r3, [r4, #4]
 80004ba:	1a9b      	subs	r3, r3, r2
 80004bc:	17da      	asrs	r2, r3, #31
 80004be:	189b      	adds	r3, r3, r2
 80004c0:	4053      	eors	r3, r2
 80004c2:	17c2      	asrs	r2, r0, #31
 80004c4:	1880      	adds	r0, r0, r2
 80004c6:	4050      	eors	r0, r2
 80004c8:	4298      	cmp	r0, r3
 80004ca:	da00      	bge.n	80004ce <inv_fast_nomot_set_gyro_bias+0x6a>
 80004cc:	1c18      	adds	r0, r3, #0
 80004ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80004d0:	68a3      	ldr	r3, [r4, #8]
 80004d2:	1a9b      	subs	r3, r3, r2
 80004d4:	17da      	asrs	r2, r3, #31
 80004d6:	189b      	adds	r3, r3, r2
 80004d8:	4053      	eors	r3, r2
 80004da:	4298      	cmp	r0, r3
 80004dc:	da00      	bge.n	80004e0 <inv_fast_nomot_set_gyro_bias+0x7c>
 80004de:	1c18      	adds	r0, r3, #0
 80004e0:	6a71      	ldr	r1, [r6, #36]	; 0x24
 80004e2:	f00e f858 	bl	800e596 <inv_q30_mult>
 80004e6:	2386      	movs	r3, #134	; 0x86
 80004e8:	009b      	lsls	r3, r3, #2
 80004ea:	58eb      	ldr	r3, [r5, r3]
 80004ec:	4298      	cmp	r0, r3
 80004ee:	da06      	bge.n	80004fe <inv_fast_nomot_set_gyro_bias+0x9a>
 80004f0:	1c20      	adds	r0, r4, #0
 80004f2:	2103      	movs	r1, #3
 80004f4:	f00a f8c0 	bl	800a678 <inv_set_gyro_bias>
 80004f8:	2002      	movs	r0, #2
 80004fa:	f00e ff97 	bl	800f42c <inv_set_motion_state>
 80004fe:	9b01      	ldr	r3, [sp, #4]
 8000500:	627b      	str	r3, [r7, #36]	; 0x24
 8000502:	6863      	ldr	r3, [r4, #4]
 8000504:	62bb      	str	r3, [r7, #40]	; 0x28
 8000506:	68a3      	ldr	r3, [r4, #8]
 8000508:	62fb      	str	r3, [r7, #44]	; 0x2c
 800050a:	b005      	add	sp, #20
 800050c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800050e:	2286      	movs	r2, #134	; 0x86
 8000510:	0092      	lsls	r2, r2, #2
 8000512:	58b9      	ldr	r1, [r7, r2]
 8000514:	22a0      	movs	r2, #160	; 0xa0
 8000516:	0392      	lsls	r2, r2, #14
 8000518:	4291      	cmp	r1, r2
 800051a:	ddc8      	ble.n	80004ae <inv_fast_nomot_set_gyro_bias+0x4a>
 800051c:	2205      	movs	r2, #5
 800051e:	54fa      	strb	r2, [r7, r3]
 8000520:	e7c5      	b.n	80004ae <inv_fast_nomot_set_gyro_bias+0x4a>
 8000522:	46c0      	nop			; (mov r8, r8)
 8000524:	20000da8 	.word	0x20000da8
 8000528:	20000db0 	.word	0x20000db0
 800052c:	20000248 	.word	0x20000248

08000530 <inv_set_fast_nomot_compass_threshold>:
 8000530:	4b01      	ldr	r3, [pc, #4]	; (8000538 <inv_set_fast_nomot_compass_threshold+0x8>)
 8000532:	6098      	str	r0, [r3, #8]
 8000534:	60d9      	str	r1, [r3, #12]
 8000536:	4770      	bx	lr
 8000538:	20000248 	.word	0x20000248

0800053c <int_set_fast_nomot_gyro_threshold>:
 800053c:	4b01      	ldr	r3, [pc, #4]	; (8000544 <int_set_fast_nomot_gyro_threshold+0x8>)
 800053e:	6198      	str	r0, [r3, #24]
 8000540:	61d9      	str	r1, [r3, #28]
 8000542:	4770      	bx	lr
 8000544:	20000248 	.word	0x20000248

08000548 <inv_set_fast_nomot_accel_threshold>:
 8000548:	4b01      	ldr	r3, [pc, #4]	; (8000550 <inv_set_fast_nomot_accel_threshold+0x8>)
 800054a:	6118      	str	r0, [r3, #16]
 800054c:	6159      	str	r1, [r3, #20]
 800054e:	4770      	bx	lr
 8000550:	20000248 	.word	0x20000248

08000554 <inv_get_fast_nomot_compass_param>:
 8000554:	22f0      	movs	r2, #240	; 0xf0
 8000556:	4b05      	ldr	r3, [pc, #20]	; (800056c <inv_get_fast_nomot_compass_param+0x18>)
 8000558:	0052      	lsls	r2, r2, #1
 800055a:	589a      	ldr	r2, [r3, r2]
 800055c:	33d1      	adds	r3, #209	; 0xd1
 800055e:	33ff      	adds	r3, #255	; 0xff
 8000560:	6002      	str	r2, [r0, #0]
 8000562:	681a      	ldr	r2, [r3, #0]
 8000564:	685b      	ldr	r3, [r3, #4]
 8000566:	600a      	str	r2, [r1, #0]
 8000568:	604b      	str	r3, [r1, #4]
 800056a:	4770      	bx	lr
 800056c:	20000da8 	.word	0x20000da8

08000570 <inv_get_fast_nomot_accel_param>:
 8000570:	22f0      	movs	r2, #240	; 0xf0
 8000572:	4b05      	ldr	r3, [pc, #20]	; (8000588 <inv_get_fast_nomot_accel_param+0x18>)
 8000574:	0052      	lsls	r2, r2, #1
 8000576:	589a      	ldr	r2, [r3, r2]
 8000578:	33d9      	adds	r3, #217	; 0xd9
 800057a:	33ff      	adds	r3, #255	; 0xff
 800057c:	6002      	str	r2, [r0, #0]
 800057e:	681a      	ldr	r2, [r3, #0]
 8000580:	685b      	ldr	r3, [r3, #4]
 8000582:	600a      	str	r2, [r1, #0]
 8000584:	604b      	str	r3, [r1, #4]
 8000586:	4770      	bx	lr
 8000588:	20000da8 	.word	0x20000da8

0800058c <inv_fast_nomot_store_data>:
 800058c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800058e:	4656      	mov	r6, sl
 8000590:	465f      	mov	r7, fp
 8000592:	464d      	mov	r5, r9
 8000594:	4644      	mov	r4, r8
 8000596:	b4f0      	push	{r4, r5, r6, r7}
 8000598:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 800059a:	b083      	sub	sp, #12
 800059c:	468b      	mov	fp, r1
 800059e:	9300      	str	r3, [sp, #0]
 80005a0:	2360      	movs	r3, #96	; 0x60
 80005a2:	445b      	add	r3, fp
 80005a4:	4698      	mov	r8, r3
 80005a6:	2318      	movs	r3, #24
 80005a8:	4682      	mov	sl, r0
 80005aa:	4645      	mov	r5, r8
 80005ac:	465e      	mov	r6, fp
 80005ae:	445b      	add	r3, fp
 80005b0:	9301      	str	r3, [sp, #4]
 80005b2:	9b00      	ldr	r3, [sp, #0]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d038      	beq.n	800062a <inv_fast_nomot_store_data+0x9e>
 80005b8:	4653      	mov	r3, sl
 80005ba:	2200      	movs	r2, #0
 80005bc:	5e9b      	ldrsh	r3, [r3, r2]
 80005be:	69ea      	ldr	r2, [r5, #28]
 80005c0:	1a9b      	subs	r3, r3, r2
 80005c2:	17da      	asrs	r2, r3, #31
 80005c4:	4699      	mov	r9, r3
 80005c6:	4690      	mov	r8, r2
 80005c8:	682a      	ldr	r2, [r5, #0]
 80005ca:	429a      	cmp	r2, r3
 80005cc:	da00      	bge.n	80005d0 <inv_fast_nomot_store_data+0x44>
 80005ce:	602b      	str	r3, [r5, #0]
 80005d0:	68ea      	ldr	r2, [r5, #12]
 80005d2:	429a      	cmp	r2, r3
 80005d4:	dd00      	ble.n	80005d8 <inv_fast_nomot_store_data+0x4c>
 80005d6:	60eb      	str	r3, [r5, #12]
 80005d8:	1c37      	adds	r7, r6, #0
 80005da:	1c34      	adds	r4, r6, #0
 80005dc:	2001      	movs	r0, #1
 80005de:	2100      	movs	r1, #0
 80005e0:	3760      	adds	r7, #96	; 0x60
 80005e2:	464a      	mov	r2, r9
 80005e4:	4643      	mov	r3, r8
 80005e6:	f002 ff63 	bl	80034b0 <__aeabi_lmul>
 80005ea:	6822      	ldr	r2, [r4, #0]
 80005ec:	6863      	ldr	r3, [r4, #4]
 80005ee:	1812      	adds	r2, r2, r0
 80005f0:	414b      	adcs	r3, r1
 80005f2:	6022      	str	r2, [r4, #0]
 80005f4:	6063      	str	r3, [r4, #4]
 80005f6:	3418      	adds	r4, #24
 80005f8:	42a7      	cmp	r7, r4
 80005fa:	d1f2      	bne.n	80005e2 <inv_fast_nomot_store_data+0x56>
 80005fc:	2302      	movs	r3, #2
 80005fe:	469c      	mov	ip, r3
 8000600:	9b01      	ldr	r3, [sp, #4]
 8000602:	3608      	adds	r6, #8
 8000604:	3504      	adds	r5, #4
 8000606:	44e2      	add	sl, ip
 8000608:	429e      	cmp	r6, r3
 800060a:	d1d2      	bne.n	80005b2 <inv_fast_nomot_store_data+0x26>
 800060c:	465a      	mov	r2, fp
 800060e:	9b00      	ldr	r3, [sp, #0]
 8000610:	4659      	mov	r1, fp
 8000612:	3301      	adds	r3, #1
 8000614:	6793      	str	r3, [r2, #120]	; 0x78
 8000616:	2201      	movs	r2, #1
 8000618:	2390      	movs	r3, #144	; 0x90
 800061a:	50ca      	str	r2, [r1, r3]
 800061c:	b003      	add	sp, #12
 800061e:	bc3c      	pop	{r2, r3, r4, r5}
 8000620:	4690      	mov	r8, r2
 8000622:	4699      	mov	r9, r3
 8000624:	46a2      	mov	sl, r4
 8000626:	46ab      	mov	fp, r5
 8000628:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800062a:	4653      	mov	r3, sl
 800062c:	2200      	movs	r2, #0
 800062e:	5e9b      	ldrsh	r3, [r3, r2]
 8000630:	61eb      	str	r3, [r5, #28]
 8000632:	2300      	movs	r3, #0
 8000634:	4699      	mov	r9, r3
 8000636:	4698      	mov	r8, r3
 8000638:	e7c6      	b.n	80005c8 <inv_fast_nomot_store_data+0x3c>
 800063a:	46c0      	nop			; (mov r8, r8)

0800063c <inv_fast_nomot_store_data_compass>:
 800063c:	6803      	ldr	r3, [r0, #0]
 800063e:	b570      	push	{r4, r5, r6, lr}
 8000640:	66d3      	str	r3, [r2, #108]	; 0x6c
 8000642:	6843      	ldr	r3, [r0, #4]
 8000644:	6f94      	ldr	r4, [r2, #120]	; 0x78
 8000646:	6713      	str	r3, [r2, #112]	; 0x70
 8000648:	6883      	ldr	r3, [r0, #8]
 800064a:	6753      	str	r3, [r2, #116]	; 0x74
 800064c:	2388      	movs	r3, #136	; 0x88
 800064e:	50d1      	str	r1, [r2, r3]
 8000650:	2c00      	cmp	r4, #0
 8000652:	d011      	beq.n	8000678 <inv_fast_nomot_store_data_compass+0x3c>
 8000654:	1c11      	adds	r1, r2, #0
 8000656:	1c15      	adds	r5, r2, #0
 8000658:	3160      	adds	r1, #96	; 0x60
 800065a:	356c      	adds	r5, #108	; 0x6c
 800065c:	69ce      	ldr	r6, [r1, #28]
 800065e:	6803      	ldr	r3, [r0, #0]
 8000660:	1b9b      	subs	r3, r3, r6
 8000662:	17de      	asrs	r6, r3, #31
 8000664:	199b      	adds	r3, r3, r6
 8000666:	4073      	eors	r3, r6
 8000668:	680e      	ldr	r6, [r1, #0]
 800066a:	42b3      	cmp	r3, r6
 800066c:	dd00      	ble.n	8000670 <inv_fast_nomot_store_data_compass+0x34>
 800066e:	600b      	str	r3, [r1, #0]
 8000670:	3104      	adds	r1, #4
 8000672:	3004      	adds	r0, #4
 8000674:	42a9      	cmp	r1, r5
 8000676:	d1f1      	bne.n	800065c <inv_fast_nomot_store_data_compass+0x20>
 8000678:	2101      	movs	r1, #1
 800067a:	2390      	movs	r3, #144	; 0x90
 800067c:	3401      	adds	r4, #1
 800067e:	6794      	str	r4, [r2, #120]	; 0x78
 8000680:	50d1      	str	r1, [r2, r3]
 8000682:	bd70      	pop	{r4, r5, r6, pc}

08000684 <inv_fast_nomot_reset_data_compass>:
 8000684:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8000686:	2280      	movs	r2, #128	; 0x80
 8000688:	67c3      	str	r3, [r0, #124]	; 0x7c
 800068a:	2300      	movs	r3, #0
 800068c:	6f01      	ldr	r1, [r0, #112]	; 0x70
 800068e:	6603      	str	r3, [r0, #96]	; 0x60
 8000690:	5081      	str	r1, [r0, r2]
 8000692:	6f41      	ldr	r1, [r0, #116]	; 0x74
 8000694:	3204      	adds	r2, #4
 8000696:	6643      	str	r3, [r0, #100]	; 0x64
 8000698:	5081      	str	r1, [r0, r2]
 800069a:	6683      	str	r3, [r0, #104]	; 0x68
 800069c:	3204      	adds	r2, #4
 800069e:	5881      	ldr	r1, [r0, r2]
 80006a0:	3204      	adds	r2, #4
 80006a2:	5081      	str	r1, [r0, r2]
 80006a4:	3204      	adds	r2, #4
 80006a6:	6783      	str	r3, [r0, #120]	; 0x78
 80006a8:	5083      	str	r3, [r0, r2]
 80006aa:	4770      	bx	lr

080006ac <inv_fast_nomot_get_time_elaps>:
 80006ac:	228c      	movs	r2, #140	; 0x8c
 80006ae:	2388      	movs	r3, #136	; 0x88
 80006b0:	58c3      	ldr	r3, [r0, r3]
 80006b2:	5880      	ldr	r0, [r0, r2]
 80006b4:	1a18      	subs	r0, r3, r0
 80006b6:	4770      	bx	lr

080006b8 <inv_fast_nomot_parameter_compass>:
 80006b8:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80006ba:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80006bc:	4293      	cmp	r3, r2
 80006be:	da00      	bge.n	80006c2 <inv_fast_nomot_parameter_compass+0xa>
 80006c0:	1c13      	adds	r3, r2, #0
 80006c2:	6e82      	ldr	r2, [r0, #104]	; 0x68
 80006c4:	1e18      	subs	r0, r3, #0
 80006c6:	4290      	cmp	r0, r2
 80006c8:	da00      	bge.n	80006cc <inv_fast_nomot_parameter_compass+0x14>
 80006ca:	1c10      	adds	r0, r2, #0
 80006cc:	4770      	bx	lr
 80006ce:	46c0      	nop			; (mov r8, r8)

080006d0 <inv_get_right_shift_by_rounding>:
 80006d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006d2:	4647      	mov	r7, r8
 80006d4:	b480      	push	{r7}
 80006d6:	2701      	movs	r7, #1
 80006d8:	1e53      	subs	r3, r2, #1
 80006da:	409f      	lsls	r7, r3
 80006dc:	2320      	movs	r3, #32
 80006de:	2620      	movs	r6, #32
 80006e0:	425b      	negs	r3, r3
 80006e2:	1ab6      	subs	r6, r6, r2
 80006e4:	46b8      	mov	r8, r7
 80006e6:	18d3      	adds	r3, r2, r3
 80006e8:	d434      	bmi.n	8000754 <inv_get_right_shift_by_rounding+0x84>
 80006ea:	1c0f      	adds	r7, r1, #0
 80006ec:	411f      	asrs	r7, r3
 80006ee:	1c3c      	adds	r4, r7, #0
 80006f0:	1c0b      	adds	r3, r1, #0
 80006f2:	4113      	asrs	r3, r2
 80006f4:	1c1d      	adds	r5, r3, #0
 80006f6:	2320      	movs	r3, #32
 80006f8:	425b      	negs	r3, r3
 80006fa:	18f2      	adds	r2, r6, r3
 80006fc:	d422      	bmi.n	8000744 <inv_get_right_shift_by_rounding+0x74>
 80006fe:	1c03      	adds	r3, r0, #0
 8000700:	4093      	lsls	r3, r2
 8000702:	40b0      	lsls	r0, r6
 8000704:	2a00      	cmp	r2, #0
 8000706:	db16      	blt.n	8000736 <inv_get_right_shift_by_rounding+0x66>
 8000708:	4113      	asrs	r3, r2
 800070a:	1c19      	adds	r1, r3, #0
 800070c:	4588      	cmp	r8, r1
 800070e:	db0d      	blt.n	800072c <inv_get_right_shift_by_rounding+0x5c>
 8000710:	4643      	mov	r3, r8
 8000712:	425f      	negs	r7, r3
 8000714:	42b9      	cmp	r1, r7
 8000716:	da04      	bge.n	8000722 <inv_get_right_shift_by_rounding+0x52>
 8000718:	2201      	movs	r2, #1
 800071a:	4252      	negs	r2, r2
 800071c:	17d3      	asrs	r3, r2, #31
 800071e:	18a4      	adds	r4, r4, r2
 8000720:	415d      	adcs	r5, r3
 8000722:	1c29      	adds	r1, r5, #0
 8000724:	1c20      	adds	r0, r4, #0
 8000726:	bc04      	pop	{r2}
 8000728:	4690      	mov	r8, r2
 800072a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800072c:	2201      	movs	r2, #1
 800072e:	2300      	movs	r3, #0
 8000730:	18a4      	adds	r4, r4, r2
 8000732:	415d      	adcs	r5, r3
 8000734:	e7f5      	b.n	8000722 <inv_get_right_shift_by_rounding+0x52>
 8000736:	2120      	movs	r1, #32
 8000738:	1b89      	subs	r1, r1, r6
 800073a:	408b      	lsls	r3, r1
 800073c:	1c01      	adds	r1, r0, #0
 800073e:	40f1      	lsrs	r1, r6
 8000740:	4319      	orrs	r1, r3
 8000742:	e7e3      	b.n	800070c <inv_get_right_shift_by_rounding+0x3c>
 8000744:	2320      	movs	r3, #32
 8000746:	1c07      	adds	r7, r0, #0
 8000748:	1b9b      	subs	r3, r3, r6
 800074a:	40df      	lsrs	r7, r3
 800074c:	1c0b      	adds	r3, r1, #0
 800074e:	40b3      	lsls	r3, r6
 8000750:	433b      	orrs	r3, r7
 8000752:	e7d6      	b.n	8000702 <inv_get_right_shift_by_rounding+0x32>
 8000754:	1c03      	adds	r3, r0, #0
 8000756:	40d3      	lsrs	r3, r2
 8000758:	1c1c      	adds	r4, r3, #0
 800075a:	1c0b      	adds	r3, r1, #0
 800075c:	40b3      	lsls	r3, r6
 800075e:	431c      	orrs	r4, r3
 8000760:	e7c6      	b.n	80006f0 <inv_get_right_shift_by_rounding+0x20>
 8000762:	46c0      	nop			; (mov r8, r8)

08000764 <inv_reset_min_max_gyro_accel_statistics>:
 8000764:	2300      	movs	r3, #0
 8000766:	4a09      	ldr	r2, [pc, #36]	; (800078c <inv_reset_min_max_gyro_accel_statistics+0x28>)
 8000768:	6013      	str	r3, [r2, #0]
 800076a:	6053      	str	r3, [r2, #4]
 800076c:	6093      	str	r3, [r2, #8]
 800076e:	60d3      	str	r3, [r2, #12]
 8000770:	6213      	str	r3, [r2, #32]
 8000772:	6253      	str	r3, [r2, #36]	; 0x24
 8000774:	6293      	str	r3, [r2, #40]	; 0x28
 8000776:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000778:	6113      	str	r3, [r2, #16]
 800077a:	6153      	str	r3, [r2, #20]
 800077c:	6193      	str	r3, [r2, #24]
 800077e:	61d3      	str	r3, [r2, #28]
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	6353      	str	r3, [r2, #52]	; 0x34
 8000784:	6393      	str	r3, [r2, #56]	; 0x38
 8000786:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000788:	4770      	bx	lr
 800078a:	46c0      	nop			; (mov r8, r8)
 800078c:	20000fc8 	.word	0x20000fc8

08000790 <inv_record_max_moment_in_no_motion_gyro>:
 8000790:	2392      	movs	r3, #146	; 0x92
 8000792:	4a0d      	ldr	r2, [pc, #52]	; (80007c8 <inv_record_max_moment_in_no_motion_gyro+0x38>)
 8000794:	009b      	lsls	r3, r3, #2
 8000796:	58d3      	ldr	r3, [r2, r3]
 8000798:	b530      	push	{r4, r5, lr}
 800079a:	2b00      	cmp	r3, #0
 800079c:	d005      	beq.n	80007aa <inv_record_max_moment_in_no_motion_gyro+0x1a>
 800079e:	2490      	movs	r4, #144	; 0x90
 80007a0:	00a4      	lsls	r4, r4, #2
 80007a2:	1915      	adds	r5, r2, r4
 80007a4:	686c      	ldr	r4, [r5, #4]
 80007a6:	428c      	cmp	r4, r1
 80007a8:	da08      	bge.n	80007bc <inv_record_max_moment_in_no_motion_gyro+0x2c>
 80007aa:	2490      	movs	r4, #144	; 0x90
 80007ac:	00a4      	lsls	r4, r4, #2
 80007ae:	1914      	adds	r4, r2, r4
 80007b0:	c403      	stmia	r4!, {r0, r1}
 80007b2:	2192      	movs	r1, #146	; 0x92
 80007b4:	3301      	adds	r3, #1
 80007b6:	0089      	lsls	r1, r1, #2
 80007b8:	5053      	str	r3, [r2, r1]
 80007ba:	bd30      	pop	{r4, r5, pc}
 80007bc:	428c      	cmp	r4, r1
 80007be:	d1f8      	bne.n	80007b2 <inv_record_max_moment_in_no_motion_gyro+0x22>
 80007c0:	682c      	ldr	r4, [r5, #0]
 80007c2:	4284      	cmp	r4, r0
 80007c4:	d3f1      	bcc.n	80007aa <inv_record_max_moment_in_no_motion_gyro+0x1a>
 80007c6:	e7f4      	b.n	80007b2 <inv_record_max_moment_in_no_motion_gyro+0x22>
 80007c8:	20000da8 	.word	0x20000da8

080007cc <inv_record_max_moment_in_no_motion_accel>:
 80007cc:	2396      	movs	r3, #150	; 0x96
 80007ce:	4a0d      	ldr	r2, [pc, #52]	; (8000804 <inv_record_max_moment_in_no_motion_accel+0x38>)
 80007d0:	009b      	lsls	r3, r3, #2
 80007d2:	58d3      	ldr	r3, [r2, r3]
 80007d4:	b530      	push	{r4, r5, lr}
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d005      	beq.n	80007e6 <inv_record_max_moment_in_no_motion_accel+0x1a>
 80007da:	2494      	movs	r4, #148	; 0x94
 80007dc:	00a4      	lsls	r4, r4, #2
 80007de:	1915      	adds	r5, r2, r4
 80007e0:	686c      	ldr	r4, [r5, #4]
 80007e2:	428c      	cmp	r4, r1
 80007e4:	da08      	bge.n	80007f8 <inv_record_max_moment_in_no_motion_accel+0x2c>
 80007e6:	2494      	movs	r4, #148	; 0x94
 80007e8:	00a4      	lsls	r4, r4, #2
 80007ea:	1914      	adds	r4, r2, r4
 80007ec:	c403      	stmia	r4!, {r0, r1}
 80007ee:	2196      	movs	r1, #150	; 0x96
 80007f0:	3301      	adds	r3, #1
 80007f2:	0089      	lsls	r1, r1, #2
 80007f4:	5053      	str	r3, [r2, r1]
 80007f6:	bd30      	pop	{r4, r5, pc}
 80007f8:	428c      	cmp	r4, r1
 80007fa:	d1f8      	bne.n	80007ee <inv_record_max_moment_in_no_motion_accel+0x22>
 80007fc:	682c      	ldr	r4, [r5, #0]
 80007fe:	4284      	cmp	r4, r0
 8000800:	d3f1      	bcc.n	80007e6 <inv_record_max_moment_in_no_motion_accel+0x1a>
 8000802:	e7f4      	b.n	80007ee <inv_record_max_moment_in_no_motion_accel+0x22>
 8000804:	20000da8 	.word	0x20000da8

08000808 <inv_record_min_moment_in_motion_gyro>:
 8000808:	238a      	movs	r3, #138	; 0x8a
 800080a:	4a0d      	ldr	r2, [pc, #52]	; (8000840 <inv_record_min_moment_in_motion_gyro+0x38>)
 800080c:	009b      	lsls	r3, r3, #2
 800080e:	58d3      	ldr	r3, [r2, r3]
 8000810:	b530      	push	{r4, r5, lr}
 8000812:	2b00      	cmp	r3, #0
 8000814:	d005      	beq.n	8000822 <inv_record_min_moment_in_motion_gyro+0x1a>
 8000816:	2488      	movs	r4, #136	; 0x88
 8000818:	00a4      	lsls	r4, r4, #2
 800081a:	1915      	adds	r5, r2, r4
 800081c:	686c      	ldr	r4, [r5, #4]
 800081e:	428c      	cmp	r4, r1
 8000820:	dd08      	ble.n	8000834 <inv_record_min_moment_in_motion_gyro+0x2c>
 8000822:	2488      	movs	r4, #136	; 0x88
 8000824:	00a4      	lsls	r4, r4, #2
 8000826:	1914      	adds	r4, r2, r4
 8000828:	c403      	stmia	r4!, {r0, r1}
 800082a:	218a      	movs	r1, #138	; 0x8a
 800082c:	3301      	adds	r3, #1
 800082e:	0089      	lsls	r1, r1, #2
 8000830:	5053      	str	r3, [r2, r1]
 8000832:	bd30      	pop	{r4, r5, pc}
 8000834:	428c      	cmp	r4, r1
 8000836:	d1f8      	bne.n	800082a <inv_record_min_moment_in_motion_gyro+0x22>
 8000838:	682c      	ldr	r4, [r5, #0]
 800083a:	4284      	cmp	r4, r0
 800083c:	d8f1      	bhi.n	8000822 <inv_record_min_moment_in_motion_gyro+0x1a>
 800083e:	e7f4      	b.n	800082a <inv_record_min_moment_in_motion_gyro+0x22>
 8000840:	20000da8 	.word	0x20000da8

08000844 <inv_record_min_moment_in_motion_accel>:
 8000844:	238e      	movs	r3, #142	; 0x8e
 8000846:	4a0d      	ldr	r2, [pc, #52]	; (800087c <inv_record_min_moment_in_motion_accel+0x38>)
 8000848:	009b      	lsls	r3, r3, #2
 800084a:	58d3      	ldr	r3, [r2, r3]
 800084c:	b530      	push	{r4, r5, lr}
 800084e:	2b00      	cmp	r3, #0
 8000850:	d005      	beq.n	800085e <inv_record_min_moment_in_motion_accel+0x1a>
 8000852:	248c      	movs	r4, #140	; 0x8c
 8000854:	00a4      	lsls	r4, r4, #2
 8000856:	1915      	adds	r5, r2, r4
 8000858:	686c      	ldr	r4, [r5, #4]
 800085a:	428c      	cmp	r4, r1
 800085c:	dd08      	ble.n	8000870 <inv_record_min_moment_in_motion_accel+0x2c>
 800085e:	248c      	movs	r4, #140	; 0x8c
 8000860:	00a4      	lsls	r4, r4, #2
 8000862:	1914      	adds	r4, r2, r4
 8000864:	c403      	stmia	r4!, {r0, r1}
 8000866:	218e      	movs	r1, #142	; 0x8e
 8000868:	3301      	adds	r3, #1
 800086a:	0089      	lsls	r1, r1, #2
 800086c:	5053      	str	r3, [r2, r1]
 800086e:	bd30      	pop	{r4, r5, pc}
 8000870:	428c      	cmp	r4, r1
 8000872:	d1f8      	bne.n	8000866 <inv_record_min_moment_in_motion_accel+0x22>
 8000874:	682c      	ldr	r4, [r5, #0]
 8000876:	4284      	cmp	r4, r0
 8000878:	d8f1      	bhi.n	800085e <inv_record_min_moment_in_motion_accel+0x1a>
 800087a:	e7f4      	b.n	8000866 <inv_record_min_moment_in_motion_accel+0x22>
 800087c:	20000da8 	.word	0x20000da8

08000880 <inv_detect_motion_by_gyro_accel>:
 8000880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000882:	4c4f      	ldr	r4, [pc, #316]	; (80009c0 <inv_detect_motion_by_gyro_accel+0x140>)
 8000884:	1c05      	adds	r5, r0, #0
 8000886:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8000888:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800088a:	4e4e      	ldr	r6, [pc, #312]	; (80009c4 <inv_detect_motion_by_gyro_accel+0x144>)
 800088c:	1a9a      	subs	r2, r3, r2
 800088e:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8000890:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8000892:	1c31      	adds	r1, r6, #0
 8000894:	1a1b      	subs	r3, r3, r0
 8000896:	4293      	cmp	r3, r2
 8000898:	da00      	bge.n	800089c <inv_detect_motion_by_gyro_accel+0x1c>
 800089a:	1c13      	adds	r3, r2, #0
 800089c:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800089e:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80008a0:	1a12      	subs	r2, r2, r0
 80008a2:	4293      	cmp	r3, r2
 80008a4:	da00      	bge.n	80008a8 <inv_detect_motion_by_gyro_accel+0x28>
 80008a6:	1c13      	adds	r3, r2, #0
 80008a8:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 80008aa:	429a      	cmp	r2, r3
 80008ac:	db4b      	blt.n	8000946 <inv_detect_motion_by_gyro_accel+0xc6>
 80008ae:	2380      	movs	r3, #128	; 0x80
 80008b0:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80008b2:	005b      	lsls	r3, r3, #1
 80008b4:	2002      	movs	r0, #2
 80008b6:	421a      	tst	r2, r3
 80008b8:	d100      	bne.n	80008bc <inv_detect_motion_by_gyro_accel+0x3c>
 80008ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008bc:	2280      	movs	r2, #128	; 0x80
 80008be:	6821      	ldr	r1, [r4, #0]
 80008c0:	58a2      	ldr	r2, [r4, r2]
 80008c2:	428a      	cmp	r2, r1
 80008c4:	dbf9      	blt.n	80008ba <inv_detect_motion_by_gyro_accel+0x3a>
 80008c6:	6f6d      	ldr	r5, [r5, #116]	; 0x74
 80008c8:	421d      	tst	r5, r3
 80008ca:	d040      	beq.n	800094e <inv_detect_motion_by_gyro_accel+0xce>
 80008cc:	33b0      	adds	r3, #176	; 0xb0
 80008ce:	58e3      	ldr	r3, [r4, r3]
 80008d0:	4299      	cmp	r1, r3
 80008d2:	dcf2      	bgt.n	80008ba <inv_detect_motion_by_gyro_accel+0x3a>
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d166      	bne.n	80009a6 <inv_detect_motion_by_gyro_accel+0x126>
 80008d8:	2000      	movs	r0, #0
 80008da:	2100      	movs	r1, #0
 80008dc:	1c23      	adds	r3, r4, #0
 80008de:	33d9      	adds	r3, #217	; 0xd9
 80008e0:	33ff      	adds	r3, #255	; 0xff
 80008e2:	c303      	stmia	r3!, {r0, r1}
 80008e4:	6973      	ldr	r3, [r6, #20]
 80008e6:	428b      	cmp	r3, r1
 80008e8:	db03      	blt.n	80008f2 <inv_detect_motion_by_gyro_accel+0x72>
 80008ea:	d166      	bne.n	80009ba <inv_detect_motion_by_gyro_accel+0x13a>
 80008ec:	6933      	ldr	r3, [r6, #16]
 80008ee:	4283      	cmp	r3, r0
 80008f0:	d263      	bcs.n	80009ba <inv_detect_motion_by_gyro_accel+0x13a>
 80008f2:	238e      	movs	r3, #142	; 0x8e
 80008f4:	228c      	movs	r2, #140	; 0x8c
 80008f6:	009b      	lsls	r3, r3, #2
 80008f8:	58e3      	ldr	r3, [r4, r3]
 80008fa:	0092      	lsls	r2, r2, #2
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d009      	beq.n	8000914 <inv_detect_motion_by_gyro_accel+0x94>
 8000900:	18a5      	adds	r5, r4, r2
 8000902:	686a      	ldr	r2, [r5, #4]
 8000904:	428a      	cmp	r2, r1
 8000906:	dc03      	bgt.n	8000910 <inv_detect_motion_by_gyro_accel+0x90>
 8000908:	d106      	bne.n	8000918 <inv_detect_motion_by_gyro_accel+0x98>
 800090a:	682a      	ldr	r2, [r5, #0]
 800090c:	4282      	cmp	r2, r0
 800090e:	d903      	bls.n	8000918 <inv_detect_motion_by_gyro_accel+0x98>
 8000910:	228c      	movs	r2, #140	; 0x8c
 8000912:	0092      	lsls	r2, r2, #2
 8000914:	18a2      	adds	r2, r4, r2
 8000916:	c203      	stmia	r2!, {r0, r1}
 8000918:	228e      	movs	r2, #142	; 0x8e
 800091a:	2500      	movs	r5, #0
 800091c:	3301      	adds	r3, #1
 800091e:	0092      	lsls	r2, r2, #2
 8000920:	50a3      	str	r3, [r4, r2]
 8000922:	4f29      	ldr	r7, [pc, #164]	; (80009c8 <inv_detect_motion_by_gyro_accel+0x148>)
 8000924:	2298      	movs	r2, #152	; 0x98
 8000926:	1c38      	adds	r0, r7, #0
 8000928:	2100      	movs	r1, #0
 800092a:	f011 fafc 	bl	8011f26 <memset>
 800092e:	2004      	movs	r0, #4
 8000930:	f7ff fca2 	bl	8000278 <inv_init_maxmin>
 8000934:	2380      	movs	r3, #128	; 0x80
 8000936:	3f39      	subs	r7, #57	; 0x39
 8000938:	3fff      	subs	r7, #255	; 0xff
 800093a:	58fa      	ldr	r2, [r7, r3]
 800093c:	2a00      	cmp	r2, #0
 800093e:	d109      	bne.n	8000954 <inv_detect_motion_by_gyro_accel+0xd4>
 8000940:	2000      	movs	r0, #0
 8000942:	2100      	movs	r1, #0
 8000944:	e009      	b.n	800095a <inv_detect_motion_by_gyro_accel+0xda>
 8000946:	f7ff fccf 	bl	80002e8 <inv_reset_packet>
 800094a:	2000      	movs	r0, #0
 800094c:	e7b5      	b.n	80008ba <inv_detect_motion_by_gyro_accel+0x3a>
 800094e:	2501      	movs	r5, #1
 8000950:	2a00      	cmp	r2, #0
 8000952:	d0f5      	beq.n	8000940 <inv_detect_motion_by_gyro_accel+0xc0>
 8000954:	481d      	ldr	r0, [pc, #116]	; (80009cc <inv_detect_motion_by_gyro_accel+0x14c>)
 8000956:	f7ff fbd5 	bl	8000104 <inv_fast_nomot_parameter.part.3>
 800095a:	1c23      	adds	r3, r4, #0
 800095c:	33f1      	adds	r3, #241	; 0xf1
 800095e:	33ff      	adds	r3, #255	; 0xff
 8000960:	c303      	stmia	r3!, {r0, r1}
 8000962:	69f3      	ldr	r3, [r6, #28]
 8000964:	428b      	cmp	r3, r1
 8000966:	db05      	blt.n	8000974 <inv_detect_motion_by_gyro_accel+0xf4>
 8000968:	d001      	beq.n	800096e <inv_detect_motion_by_gyro_accel+0xee>
 800096a:	1c28      	adds	r0, r5, #0
 800096c:	e7a5      	b.n	80008ba <inv_detect_motion_by_gyro_accel+0x3a>
 800096e:	69b3      	ldr	r3, [r6, #24]
 8000970:	4283      	cmp	r3, r0
 8000972:	d2fa      	bcs.n	800096a <inv_detect_motion_by_gyro_accel+0xea>
 8000974:	238a      	movs	r3, #138	; 0x8a
 8000976:	2288      	movs	r2, #136	; 0x88
 8000978:	009b      	lsls	r3, r3, #2
 800097a:	58e3      	ldr	r3, [r4, r3]
 800097c:	0092      	lsls	r2, r2, #2
 800097e:	2b00      	cmp	r3, #0
 8000980:	d009      	beq.n	8000996 <inv_detect_motion_by_gyro_accel+0x116>
 8000982:	18a5      	adds	r5, r4, r2
 8000984:	686a      	ldr	r2, [r5, #4]
 8000986:	428a      	cmp	r2, r1
 8000988:	dc03      	bgt.n	8000992 <inv_detect_motion_by_gyro_accel+0x112>
 800098a:	d106      	bne.n	800099a <inv_detect_motion_by_gyro_accel+0x11a>
 800098c:	682a      	ldr	r2, [r5, #0]
 800098e:	4282      	cmp	r2, r0
 8000990:	d903      	bls.n	800099a <inv_detect_motion_by_gyro_accel+0x11a>
 8000992:	2288      	movs	r2, #136	; 0x88
 8000994:	0092      	lsls	r2, r2, #2
 8000996:	18a2      	adds	r2, r4, r2
 8000998:	c203      	stmia	r2!, {r0, r1}
 800099a:	228a      	movs	r2, #138	; 0x8a
 800099c:	3301      	adds	r3, #1
 800099e:	0092      	lsls	r2, r2, #2
 80009a0:	50a3      	str	r3, [r4, r2]
 80009a2:	2000      	movs	r0, #0
 80009a4:	e789      	b.n	80008ba <inv_detect_motion_by_gyro_accel+0x3a>
 80009a6:	1c20      	adds	r0, r4, #0
 80009a8:	3039      	adds	r0, #57	; 0x39
 80009aa:	30ff      	adds	r0, #255	; 0xff
 80009ac:	f7ff fbaa 	bl	8000104 <inv_fast_nomot_parameter.part.3>
 80009b0:	030b      	lsls	r3, r1, #12
 80009b2:	0d00      	lsrs	r0, r0, #20
 80009b4:	4318      	orrs	r0, r3
 80009b6:	1509      	asrs	r1, r1, #20
 80009b8:	e790      	b.n	80008dc <inv_detect_motion_by_gyro_accel+0x5c>
 80009ba:	2501      	movs	r5, #1
 80009bc:	e7b1      	b.n	8000922 <inv_detect_motion_by_gyro_accel+0xa2>
 80009be:	46c0      	nop			; (mov r8, r8)
 80009c0:	20000da8 	.word	0x20000da8
 80009c4:	20000248 	.word	0x20000248
 80009c8:	20000ee0 	.word	0x20000ee0
 80009cc:	20000db0 	.word	0x20000db0

080009d0 <inv_sensor_data_preprocess>:
 80009d0:	23c0      	movs	r3, #192	; 0xc0
 80009d2:	b510      	push	{r4, lr}
 80009d4:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80009d6:	b084      	sub	sp, #16
 80009d8:	1c04      	adds	r4, r0, #0
 80009da:	4013      	ands	r3, r2
 80009dc:	2bc0      	cmp	r3, #192	; 0xc0
 80009de:	d038      	beq.n	8000a52 <inv_sensor_data_preprocess+0x82>
 80009e0:	23c0      	movs	r3, #192	; 0xc0
 80009e2:	6f62      	ldr	r2, [r4, #116]	; 0x74
 80009e4:	4013      	ands	r3, r2
 80009e6:	2bc0      	cmp	r3, #192	; 0xc0
 80009e8:	d02d      	beq.n	8000a46 <inv_sensor_data_preprocess+0x76>
 80009ea:	21c0      	movs	r1, #192	; 0xc0
 80009ec:	23b8      	movs	r3, #184	; 0xb8
 80009ee:	1c0a      	adds	r2, r1, #0
 80009f0:	58e3      	ldr	r3, [r4, r3]
 80009f2:	401a      	ands	r2, r3
 80009f4:	2ac0      	cmp	r2, #192	; 0xc0
 80009f6:	d017      	beq.n	8000a28 <inv_sensor_data_preprocess+0x58>
 80009f8:	2260      	movs	r2, #96	; 0x60
 80009fa:	4013      	ands	r3, r2
 80009fc:	2b60      	cmp	r3, #96	; 0x60
 80009fe:	d001      	beq.n	8000a04 <inv_sensor_data_preprocess+0x34>
 8000a00:	b004      	add	sp, #16
 8000a02:	bd10      	pop	{r4, pc}
 8000a04:	3340      	adds	r3, #64	; 0x40
 8000a06:	58e3      	ldr	r3, [r4, r3]
 8000a08:	5861      	ldr	r1, [r4, r1]
 8000a0a:	139b      	asrs	r3, r3, #14
 8000a0c:	9301      	str	r3, [sp, #4]
 8000a0e:	23a4      	movs	r3, #164	; 0xa4
 8000a10:	58e3      	ldr	r3, [r4, r3]
 8000a12:	a801      	add	r0, sp, #4
 8000a14:	139b      	asrs	r3, r3, #14
 8000a16:	9302      	str	r3, [sp, #8]
 8000a18:	23a8      	movs	r3, #168	; 0xa8
 8000a1a:	58e3      	ldr	r3, [r4, r3]
 8000a1c:	4a0f      	ldr	r2, [pc, #60]	; (8000a5c <inv_sensor_data_preprocess+0x8c>)
 8000a1e:	139b      	asrs	r3, r3, #14
 8000a20:	9303      	str	r3, [sp, #12]
 8000a22:	f7ff fe0b 	bl	800063c <inv_fast_nomot_store_data_compass>
 8000a26:	e7eb      	b.n	8000a00 <inv_sensor_data_preprocess+0x30>
 8000a28:	238c      	movs	r3, #140	; 0x8c
 8000a2a:	5ee3      	ldrsh	r3, [r4, r3]
 8000a2c:	a801      	add	r0, sp, #4
 8000a2e:	9301      	str	r3, [sp, #4]
 8000a30:	238e      	movs	r3, #142	; 0x8e
 8000a32:	5ee3      	ldrsh	r3, [r4, r3]
 8000a34:	9302      	str	r3, [sp, #8]
 8000a36:	2390      	movs	r3, #144	; 0x90
 8000a38:	5ee3      	ldrsh	r3, [r4, r3]
 8000a3a:	58a1      	ldr	r1, [r4, r2]
 8000a3c:	4a07      	ldr	r2, [pc, #28]	; (8000a5c <inv_sensor_data_preprocess+0x8c>)
 8000a3e:	9303      	str	r3, [sp, #12]
 8000a40:	f7ff fdfc 	bl	800063c <inv_fast_nomot_store_data_compass>
 8000a44:	e7dc      	b.n	8000a00 <inv_sensor_data_preprocess+0x30>
 8000a46:	1c20      	adds	r0, r4, #0
 8000a48:	4905      	ldr	r1, [pc, #20]	; (8000a60 <inv_sensor_data_preprocess+0x90>)
 8000a4a:	3048      	adds	r0, #72	; 0x48
 8000a4c:	f7ff fd9e 	bl	800058c <inv_fast_nomot_store_data>
 8000a50:	e7cb      	b.n	80009ea <inv_sensor_data_preprocess+0x1a>
 8000a52:	3004      	adds	r0, #4
 8000a54:	4903      	ldr	r1, [pc, #12]	; (8000a64 <inv_sensor_data_preprocess+0x94>)
 8000a56:	f7ff fd99 	bl	800058c <inv_fast_nomot_store_data>
 8000a5a:	e7c1      	b.n	80009e0 <inv_sensor_data_preprocess+0x10>
 8000a5c:	20000e48 	.word	0x20000e48
 8000a60:	20000ee0 	.word	0x20000ee0
 8000a64:	20000db0 	.word	0x20000db0

08000a68 <inv_generate_fast_nomot>:
 8000a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a6a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000a6c:	05da      	lsls	r2, r3, #23
 8000a6e:	d400      	bmi.n	8000a72 <inv_generate_fast_nomot+0xa>
 8000a70:	e0a0      	b.n	8000bb4 <inv_generate_fast_nomot+0x14c>
 8000a72:	2150      	movs	r1, #80	; 0x50
 8000a74:	6f42      	ldr	r2, [r0, #116]	; 0x74
 8000a76:	1c05      	adds	r5, r0, #0
 8000a78:	400a      	ands	r2, r1
 8000a7a:	2a40      	cmp	r2, #64	; 0x40
 8000a7c:	d100      	bne.n	8000a80 <inv_generate_fast_nomot+0x18>
 8000a7e:	e09b      	b.n	8000bb8 <inv_generate_fast_nomot+0x150>
 8000a80:	22b8      	movs	r2, #184	; 0xb8
 8000a82:	5882      	ldr	r2, [r0, r2]
 8000a84:	400a      	ands	r2, r1
 8000a86:	2a40      	cmp	r2, #64	; 0x40
 8000a88:	d100      	bne.n	8000a8c <inv_generate_fast_nomot+0x24>
 8000a8a:	e095      	b.n	8000bb8 <inv_generate_fast_nomot+0x150>
 8000a8c:	400b      	ands	r3, r1
 8000a8e:	2b40      	cmp	r3, #64	; 0x40
 8000a90:	d100      	bne.n	8000a94 <inv_generate_fast_nomot+0x2c>
 8000a92:	e091      	b.n	8000bb8 <inv_generate_fast_nomot+0x150>
 8000a94:	4cc9      	ldr	r4, [pc, #804]	; (8000dbc <inv_generate_fast_nomot+0x354>)
 8000a96:	2282      	movs	r2, #130	; 0x82
 8000a98:	0092      	lsls	r2, r2, #2
 8000a9a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000a9c:	58a1      	ldr	r1, [r4, r2]
 8000a9e:	4299      	cmp	r1, r3
 8000aa0:	d01b      	beq.n	8000ada <inv_generate_fast_nomot+0x72>
 8000aa2:	50a3      	str	r3, [r4, r2]
 8000aa4:	4ec6      	ldr	r6, [pc, #792]	; (8000dc0 <inv_generate_fast_nomot+0x358>)
 8000aa6:	2b09      	cmp	r3, #9
 8000aa8:	dc00      	bgt.n	8000aac <inv_generate_fast_nomot+0x44>
 8000aaa:	e18d      	b.n	8000dc8 <inv_generate_fast_nomot+0x360>
 8000aac:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8000aae:	6b71      	ldr	r1, [r6, #52]	; 0x34
 8000ab0:	6023      	str	r3, [r4, #0]
 8000ab2:	2383      	movs	r3, #131	; 0x83
 8000ab4:	1c08      	adds	r0, r1, #0
 8000ab6:	009b      	lsls	r3, r3, #2
 8000ab8:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 8000aba:	50e1      	str	r1, [r4, r3]
 8000abc:	3308      	adds	r3, #8
 8000abe:	50e2      	str	r2, [r4, r3]
 8000ac0:	2210      	movs	r2, #16
 8000ac2:	1a52      	subs	r2, r2, r1
 8000ac4:	2184      	movs	r1, #132	; 0x84
 8000ac6:	2319      	movs	r3, #25
 8000ac8:	0089      	lsls	r1, r1, #2
 8000aca:	5062      	str	r2, [r4, r1]
 8000acc:	2180      	movs	r1, #128	; 0x80
 8000ace:	2286      	movs	r2, #134	; 0x86
 8000ad0:	4083      	lsls	r3, r0
 8000ad2:	01c9      	lsls	r1, r1, #7
 8000ad4:	0092      	lsls	r2, r2, #2
 8000ad6:	50a1      	str	r1, [r4, r2]
 8000ad8:	63f3      	str	r3, [r6, #60]	; 0x3c
 8000ada:	1c28      	adds	r0, r5, #0
 8000adc:	f7ff ff78 	bl	80009d0 <inv_sensor_data_preprocess>
 8000ae0:	23f4      	movs	r3, #244	; 0xf4
 8000ae2:	005b      	lsls	r3, r3, #1
 8000ae4:	5ce3      	ldrb	r3, [r4, r3]
 8000ae6:	2b06      	cmp	r3, #6
 8000ae8:	d864      	bhi.n	8000bb4 <inv_generate_fast_nomot+0x14c>
 8000aea:	4ab6      	ldr	r2, [pc, #728]	; (8000dc4 <inv_generate_fast_nomot+0x35c>)
 8000aec:	009b      	lsls	r3, r3, #2
 8000aee:	58d3      	ldr	r3, [r2, r3]
 8000af0:	469f      	mov	pc, r3
 8000af2:	23b8      	movs	r3, #184	; 0xb8
 8000af4:	58ea      	ldr	r2, [r5, r3]
 8000af6:	3348      	adds	r3, #72	; 0x48
 8000af8:	421a      	tst	r2, r3
 8000afa:	d01b      	beq.n	8000b34 <inv_generate_fast_nomot+0xcc>
 8000afc:	58e2      	ldr	r2, [r4, r3]
 8000afe:	3304      	adds	r3, #4
 8000b00:	58e3      	ldr	r3, [r4, r3]
 8000b02:	4293      	cmp	r3, r2
 8000b04:	da00      	bge.n	8000b08 <inv_generate_fast_nomot+0xa0>
 8000b06:	1c13      	adds	r3, r2, #0
 8000b08:	2284      	movs	r2, #132	; 0x84
 8000b0a:	0052      	lsls	r2, r2, #1
 8000b0c:	58a2      	ldr	r2, [r4, r2]
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	da00      	bge.n	8000b14 <inv_generate_fast_nomot+0xac>
 8000b12:	1c13      	adds	r3, r2, #0
 8000b14:	1c21      	adds	r1, r4, #0
 8000b16:	48aa      	ldr	r0, [pc, #680]	; (8000dc0 <inv_generate_fast_nomot+0x358>)
 8000b18:	31d1      	adds	r1, #209	; 0xd1
 8000b1a:	31ff      	adds	r1, #255	; 0xff
 8000b1c:	17da      	asrs	r2, r3, #31
 8000b1e:	600b      	str	r3, [r1, #0]
 8000b20:	604a      	str	r2, [r1, #4]
 8000b22:	68c1      	ldr	r1, [r0, #12]
 8000b24:	4291      	cmp	r1, r2
 8000b26:	da00      	bge.n	8000b2a <inv_generate_fast_nomot+0xc2>
 8000b28:	e143      	b.n	8000db2 <inv_generate_fast_nomot+0x34a>
 8000b2a:	d103      	bne.n	8000b34 <inv_generate_fast_nomot+0xcc>
 8000b2c:	6882      	ldr	r2, [r0, #8]
 8000b2e:	429a      	cmp	r2, r3
 8000b30:	d200      	bcs.n	8000b34 <inv_generate_fast_nomot+0xcc>
 8000b32:	e13e      	b.n	8000db2 <inv_generate_fast_nomot+0x34a>
 8000b34:	1c28      	adds	r0, r5, #0
 8000b36:	f7ff fea3 	bl	8000880 <inv_detect_motion_by_gyro_accel>
 8000b3a:	2800      	cmp	r0, #0
 8000b3c:	d100      	bne.n	8000b40 <inv_generate_fast_nomot+0xd8>
 8000b3e:	e138      	b.n	8000db2 <inv_generate_fast_nomot+0x34a>
 8000b40:	2801      	cmp	r0, #1
 8000b42:	d137      	bne.n	8000bb4 <inv_generate_fast_nomot+0x14c>
 8000b44:	1c28      	adds	r0, r5, #0
 8000b46:	f7ff fc8d 	bl	8000464 <inv_fast_nomot_set_gyro_bias>
 8000b4a:	1c23      	adds	r3, r4, #0
 8000b4c:	33d9      	adds	r3, #217	; 0xd9
 8000b4e:	33ff      	adds	r3, #255	; 0xff
 8000b50:	cb06      	ldmia	r3!, {r1, r2}
 8000b52:	2396      	movs	r3, #150	; 0x96
 8000b54:	2094      	movs	r0, #148	; 0x94
 8000b56:	009b      	lsls	r3, r3, #2
 8000b58:	58e3      	ldr	r3, [r4, r3]
 8000b5a:	0080      	lsls	r0, r0, #2
 8000b5c:	1820      	adds	r0, r4, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d009      	beq.n	8000b76 <inv_generate_fast_nomot+0x10e>
 8000b62:	6845      	ldr	r5, [r0, #4]
 8000b64:	4295      	cmp	r5, r2
 8000b66:	db03      	blt.n	8000b70 <inv_generate_fast_nomot+0x108>
 8000b68:	d106      	bne.n	8000b78 <inv_generate_fast_nomot+0x110>
 8000b6a:	6800      	ldr	r0, [r0, #0]
 8000b6c:	4288      	cmp	r0, r1
 8000b6e:	d203      	bcs.n	8000b78 <inv_generate_fast_nomot+0x110>
 8000b70:	2094      	movs	r0, #148	; 0x94
 8000b72:	0080      	lsls	r0, r0, #2
 8000b74:	1820      	adds	r0, r4, r0
 8000b76:	c006      	stmia	r0!, {r1, r2}
 8000b78:	2296      	movs	r2, #150	; 0x96
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	0092      	lsls	r2, r2, #2
 8000b7e:	50a3      	str	r3, [r4, r2]
 8000b80:	1c23      	adds	r3, r4, #0
 8000b82:	33f1      	adds	r3, #241	; 0xf1
 8000b84:	33ff      	adds	r3, #255	; 0xff
 8000b86:	cb06      	ldmia	r3!, {r1, r2}
 8000b88:	2392      	movs	r3, #146	; 0x92
 8000b8a:	2090      	movs	r0, #144	; 0x90
 8000b8c:	009b      	lsls	r3, r3, #2
 8000b8e:	58e3      	ldr	r3, [r4, r3]
 8000b90:	0080      	lsls	r0, r0, #2
 8000b92:	1820      	adds	r0, r4, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d100      	bne.n	8000b9a <inv_generate_fast_nomot+0x132>
 8000b98:	e09b      	b.n	8000cd2 <inv_generate_fast_nomot+0x26a>
 8000b9a:	6845      	ldr	r5, [r0, #4]
 8000b9c:	4295      	cmp	r5, r2
 8000b9e:	da00      	bge.n	8000ba2 <inv_generate_fast_nomot+0x13a>
 8000ba0:	e094      	b.n	8000ccc <inv_generate_fast_nomot+0x264>
 8000ba2:	d103      	bne.n	8000bac <inv_generate_fast_nomot+0x144>
 8000ba4:	6800      	ldr	r0, [r0, #0]
 8000ba6:	4288      	cmp	r0, r1
 8000ba8:	d200      	bcs.n	8000bac <inv_generate_fast_nomot+0x144>
 8000baa:	e08f      	b.n	8000ccc <inv_generate_fast_nomot+0x264>
 8000bac:	2292      	movs	r2, #146	; 0x92
 8000bae:	3301      	adds	r3, #1
 8000bb0:	0092      	lsls	r2, r2, #2
 8000bb2:	50a3      	str	r3, [r4, r2]
 8000bb4:	2000      	movs	r0, #0
 8000bb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000bb8:	f7ff fb96 	bl	80002e8 <inv_reset_packet>
 8000bbc:	22f0      	movs	r2, #240	; 0xf0
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	4c7e      	ldr	r4, [pc, #504]	; (8000dbc <inv_generate_fast_nomot+0x354>)
 8000bc2:	0052      	lsls	r2, r2, #1
 8000bc4:	50a3      	str	r3, [r4, r2]
 8000bc6:	3208      	adds	r2, #8
 8000bc8:	54a3      	strb	r3, [r4, r2]
 8000bca:	e764      	b.n	8000a96 <inv_generate_fast_nomot+0x2e>
 8000bcc:	23f4      	movs	r3, #244	; 0xf4
 8000bce:	2206      	movs	r2, #6
 8000bd0:	005b      	lsls	r3, r3, #1
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	54e2      	strb	r2, [r4, r3]
 8000bd6:	f00e fc29 	bl	800f42c <inv_set_motion_state>
 8000bda:	f7ff fb85 	bl	80002e8 <inv_reset_packet>
 8000bde:	2386      	movs	r3, #134	; 0x86
 8000be0:	005b      	lsls	r3, r3, #1
 8000be2:	58e2      	ldr	r2, [r4, r3]
 8000be4:	3310      	adds	r3, #16
 8000be6:	50e2      	str	r2, [r4, r3]
 8000be8:	2280      	movs	r2, #128	; 0x80
 8000bea:	2300      	movs	r3, #0
 8000bec:	0052      	lsls	r2, r2, #1
 8000bee:	50a3      	str	r3, [r4, r2]
 8000bf0:	3210      	adds	r2, #16
 8000bf2:	58a1      	ldr	r1, [r4, r2]
 8000bf4:	3210      	adds	r2, #16
 8000bf6:	50a1      	str	r1, [r4, r2]
 8000bf8:	3a1c      	subs	r2, #28
 8000bfa:	50a3      	str	r3, [r4, r2]
 8000bfc:	3210      	adds	r2, #16
 8000bfe:	58a1      	ldr	r1, [r4, r2]
 8000c00:	3210      	adds	r2, #16
 8000c02:	50a1      	str	r1, [r4, r2]
 8000c04:	3a1c      	subs	r2, #28
 8000c06:	50a3      	str	r3, [r4, r2]
 8000c08:	3220      	adds	r2, #32
 8000c0a:	58a1      	ldr	r1, [r4, r2]
 8000c0c:	3204      	adds	r2, #4
 8000c0e:	50a1      	str	r1, [r4, r2]
 8000c10:	3a14      	subs	r2, #20
 8000c12:	50a3      	str	r3, [r4, r2]
 8000c14:	3218      	adds	r2, #24
 8000c16:	50a3      	str	r3, [r4, r2]
 8000c18:	e7cc      	b.n	8000bb4 <inv_generate_fast_nomot+0x14c>
 8000c1a:	1c28      	adds	r0, r5, #0
 8000c1c:	f7ff fe30 	bl	8000880 <inv_detect_motion_by_gyro_accel>
 8000c20:	2800      	cmp	r0, #0
 8000c22:	d100      	bne.n	8000c26 <inv_generate_fast_nomot+0x1be>
 8000c24:	e0c5      	b.n	8000db2 <inv_generate_fast_nomot+0x34a>
 8000c26:	2801      	cmp	r0, #1
 8000c28:	d1c4      	bne.n	8000bb4 <inv_generate_fast_nomot+0x14c>
 8000c2a:	23b8      	movs	r3, #184	; 0xb8
 8000c2c:	58ea      	ldr	r2, [r5, r3]
 8000c2e:	3348      	adds	r3, #72	; 0x48
 8000c30:	421a      	tst	r2, r3
 8000c32:	d100      	bne.n	8000c36 <inv_generate_fast_nomot+0x1ce>
 8000c34:	e0f1      	b.n	8000e1a <inv_generate_fast_nomot+0x3b2>
 8000c36:	58e2      	ldr	r2, [r4, r3]
 8000c38:	3304      	adds	r3, #4
 8000c3a:	58e3      	ldr	r3, [r4, r3]
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	da00      	bge.n	8000c42 <inv_generate_fast_nomot+0x1da>
 8000c40:	1c13      	adds	r3, r2, #0
 8000c42:	2284      	movs	r2, #132	; 0x84
 8000c44:	0052      	lsls	r2, r2, #1
 8000c46:	58a2      	ldr	r2, [r4, r2]
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	da00      	bge.n	8000c4e <inv_generate_fast_nomot+0x1e6>
 8000c4c:	1c13      	adds	r3, r2, #0
 8000c4e:	1c21      	adds	r1, r4, #0
 8000c50:	4e5b      	ldr	r6, [pc, #364]	; (8000dc0 <inv_generate_fast_nomot+0x358>)
 8000c52:	31d1      	adds	r1, #209	; 0xd1
 8000c54:	31ff      	adds	r1, #255	; 0xff
 8000c56:	17da      	asrs	r2, r3, #31
 8000c58:	600b      	str	r3, [r1, #0]
 8000c5a:	604a      	str	r2, [r1, #4]
 8000c5c:	68f1      	ldr	r1, [r6, #12]
 8000c5e:	4291      	cmp	r1, r2
 8000c60:	db05      	blt.n	8000c6e <inv_generate_fast_nomot+0x206>
 8000c62:	d000      	beq.n	8000c66 <inv_generate_fast_nomot+0x1fe>
 8000c64:	e0ce      	b.n	8000e04 <inv_generate_fast_nomot+0x39c>
 8000c66:	68b2      	ldr	r2, [r6, #8]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	d300      	bcc.n	8000c6e <inv_generate_fast_nomot+0x206>
 8000c6c:	e0ca      	b.n	8000e04 <inv_generate_fast_nomot+0x39c>
 8000c6e:	23f4      	movs	r3, #244	; 0xf4
 8000c70:	2205      	movs	r2, #5
 8000c72:	005b      	lsls	r3, r3, #1
 8000c74:	54e2      	strb	r2, [r4, r3]
 8000c76:	1c23      	adds	r3, r4, #0
 8000c78:	33d9      	adds	r3, #217	; 0xd9
 8000c7a:	33ff      	adds	r3, #255	; 0xff
 8000c7c:	cb06      	ldmia	r3!, {r1, r2}
 8000c7e:	2396      	movs	r3, #150	; 0x96
 8000c80:	2094      	movs	r0, #148	; 0x94
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	58e3      	ldr	r3, [r4, r3]
 8000c86:	0080      	lsls	r0, r0, #2
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d009      	beq.n	8000ca0 <inv_generate_fast_nomot+0x238>
 8000c8c:	1825      	adds	r5, r4, r0
 8000c8e:	6868      	ldr	r0, [r5, #4]
 8000c90:	4290      	cmp	r0, r2
 8000c92:	db03      	blt.n	8000c9c <inv_generate_fast_nomot+0x234>
 8000c94:	d106      	bne.n	8000ca4 <inv_generate_fast_nomot+0x23c>
 8000c96:	6828      	ldr	r0, [r5, #0]
 8000c98:	4288      	cmp	r0, r1
 8000c9a:	d203      	bcs.n	8000ca4 <inv_generate_fast_nomot+0x23c>
 8000c9c:	2094      	movs	r0, #148	; 0x94
 8000c9e:	0080      	lsls	r0, r0, #2
 8000ca0:	1820      	adds	r0, r4, r0
 8000ca2:	c006      	stmia	r0!, {r1, r2}
 8000ca4:	2296      	movs	r2, #150	; 0x96
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	0092      	lsls	r2, r2, #2
 8000caa:	50a3      	str	r3, [r4, r2]
 8000cac:	1c23      	adds	r3, r4, #0
 8000cae:	33f1      	adds	r3, #241	; 0xf1
 8000cb0:	33ff      	adds	r3, #255	; 0xff
 8000cb2:	cb06      	ldmia	r3!, {r1, r2}
 8000cb4:	2392      	movs	r3, #146	; 0x92
 8000cb6:	2090      	movs	r0, #144	; 0x90
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	58e3      	ldr	r3, [r4, r3]
 8000cbc:	0080      	lsls	r0, r0, #2
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d006      	beq.n	8000cd0 <inv_generate_fast_nomot+0x268>
 8000cc2:	1825      	adds	r5, r4, r0
 8000cc4:	6868      	ldr	r0, [r5, #4]
 8000cc6:	4290      	cmp	r0, r2
 8000cc8:	db00      	blt.n	8000ccc <inv_generate_fast_nomot+0x264>
 8000cca:	e0ae      	b.n	8000e2a <inv_generate_fast_nomot+0x3c2>
 8000ccc:	2090      	movs	r0, #144	; 0x90
 8000cce:	0080      	lsls	r0, r0, #2
 8000cd0:	1820      	adds	r0, r4, r0
 8000cd2:	c006      	stmia	r0!, {r1, r2}
 8000cd4:	e76a      	b.n	8000bac <inv_generate_fast_nomot+0x144>
 8000cd6:	23f4      	movs	r3, #244	; 0xf4
 8000cd8:	2203      	movs	r2, #3
 8000cda:	005b      	lsls	r3, r3, #1
 8000cdc:	1c28      	adds	r0, r5, #0
 8000cde:	54e2      	strb	r2, [r4, r3]
 8000ce0:	f7ff fbc0 	bl	8000464 <inv_fast_nomot_set_gyro_bias>
 8000ce4:	f7ff fb00 	bl	80002e8 <inv_reset_packet>
 8000ce8:	e764      	b.n	8000bb4 <inv_generate_fast_nomot+0x14c>
 8000cea:	2398      	movs	r3, #152	; 0x98
 8000cec:	58e3      	ldr	r3, [r4, r3]
 8000cee:	2b01      	cmp	r3, #1
 8000cf0:	d000      	beq.n	8000cf4 <inv_generate_fast_nomot+0x28c>
 8000cf2:	e75f      	b.n	8000bb4 <inv_generate_fast_nomot+0x14c>
 8000cf4:	1c28      	adds	r0, r5, #0
 8000cf6:	f7ff fdc3 	bl	8000880 <inv_detect_motion_by_gyro_accel>
 8000cfa:	2800      	cmp	r0, #0
 8000cfc:	d17b      	bne.n	8000df6 <inv_generate_fast_nomot+0x38e>
 8000cfe:	23f4      	movs	r3, #244	; 0xf4
 8000d00:	2205      	movs	r2, #5
 8000d02:	005b      	lsls	r3, r3, #1
 8000d04:	54e2      	strb	r2, [r4, r3]
 8000d06:	2386      	movs	r3, #134	; 0x86
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	58e2      	ldr	r2, [r4, r3]
 8000d0c:	3310      	adds	r3, #16
 8000d0e:	50e2      	str	r2, [r4, r3]
 8000d10:	2280      	movs	r2, #128	; 0x80
 8000d12:	2300      	movs	r3, #0
 8000d14:	0052      	lsls	r2, r2, #1
 8000d16:	50a3      	str	r3, [r4, r2]
 8000d18:	3210      	adds	r2, #16
 8000d1a:	58a1      	ldr	r1, [r4, r2]
 8000d1c:	3210      	adds	r2, #16
 8000d1e:	50a1      	str	r1, [r4, r2]
 8000d20:	3a1c      	subs	r2, #28
 8000d22:	50a3      	str	r3, [r4, r2]
 8000d24:	3210      	adds	r2, #16
 8000d26:	58a1      	ldr	r1, [r4, r2]
 8000d28:	3210      	adds	r2, #16
 8000d2a:	50a1      	str	r1, [r4, r2]
 8000d2c:	3a1c      	subs	r2, #28
 8000d2e:	50a3      	str	r3, [r4, r2]
 8000d30:	3220      	adds	r2, #32
 8000d32:	58a1      	ldr	r1, [r4, r2]
 8000d34:	3204      	adds	r2, #4
 8000d36:	50a1      	str	r1, [r4, r2]
 8000d38:	3a14      	subs	r2, #20
 8000d3a:	50a3      	str	r3, [r4, r2]
 8000d3c:	3218      	adds	r2, #24
 8000d3e:	50a3      	str	r3, [r4, r2]
 8000d40:	f7ff fd10 	bl	8000764 <inv_reset_min_max_gyro_accel_statistics>
 8000d44:	e736      	b.n	8000bb4 <inv_generate_fast_nomot+0x14c>
 8000d46:	22f0      	movs	r2, #240	; 0xf0
 8000d48:	0052      	lsls	r2, r2, #1
 8000d4a:	58a3      	ldr	r3, [r4, r2]
 8000d4c:	1c59      	adds	r1, r3, #1
 8000d4e:	50a1      	str	r1, [r4, r2]
 8000d50:	2b09      	cmp	r3, #9
 8000d52:	dc00      	bgt.n	8000d56 <inv_generate_fast_nomot+0x2ee>
 8000d54:	e72e      	b.n	8000bb4 <inv_generate_fast_nomot+0x14c>
 8000d56:	f7ff fac7 	bl	80002e8 <inv_reset_packet>
 8000d5a:	23f4      	movs	r3, #244	; 0xf4
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	54e2      	strb	r2, [r4, r3]
 8000d62:	e727      	b.n	8000bb4 <inv_generate_fast_nomot+0x14c>
 8000d64:	1c28      	adds	r0, r5, #0
 8000d66:	f7ff fd8b 	bl	8000880 <inv_detect_motion_by_gyro_accel>
 8000d6a:	1e05      	subs	r5, r0, #0
 8000d6c:	2d01      	cmp	r5, #1
 8000d6e:	d03d      	beq.n	8000dec <inv_generate_fast_nomot+0x384>
 8000d70:	2800      	cmp	r0, #0
 8000d72:	d000      	beq.n	8000d76 <inv_generate_fast_nomot+0x30e>
 8000d74:	e71e      	b.n	8000bb4 <inv_generate_fast_nomot+0x14c>
 8000d76:	f7ff fab7 	bl	80002e8 <inv_reset_packet>
 8000d7a:	2386      	movs	r3, #134	; 0x86
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	58e2      	ldr	r2, [r4, r3]
 8000d80:	3310      	adds	r3, #16
 8000d82:	50e2      	str	r2, [r4, r3]
 8000d84:	3b1c      	subs	r3, #28
 8000d86:	50e5      	str	r5, [r4, r3]
 8000d88:	3310      	adds	r3, #16
 8000d8a:	58e2      	ldr	r2, [r4, r3]
 8000d8c:	3310      	adds	r3, #16
 8000d8e:	50e2      	str	r2, [r4, r3]
 8000d90:	3b1c      	subs	r3, #28
 8000d92:	50e5      	str	r5, [r4, r3]
 8000d94:	3310      	adds	r3, #16
 8000d96:	58e2      	ldr	r2, [r4, r3]
 8000d98:	3310      	adds	r3, #16
 8000d9a:	50e2      	str	r2, [r4, r3]
 8000d9c:	3b1c      	subs	r3, #28
 8000d9e:	50e5      	str	r5, [r4, r3]
 8000da0:	3320      	adds	r3, #32
 8000da2:	58e2      	ldr	r2, [r4, r3]
 8000da4:	3304      	adds	r3, #4
 8000da6:	50e2      	str	r2, [r4, r3]
 8000da8:	3b14      	subs	r3, #20
 8000daa:	50e5      	str	r5, [r4, r3]
 8000dac:	3318      	adds	r3, #24
 8000dae:	50e5      	str	r5, [r4, r3]
 8000db0:	e700      	b.n	8000bb4 <inv_generate_fast_nomot+0x14c>
 8000db2:	23f4      	movs	r3, #244	; 0xf4
 8000db4:	2205      	movs	r2, #5
 8000db6:	005b      	lsls	r3, r3, #1
 8000db8:	54e2      	strb	r2, [r4, r3]
 8000dba:	e6fb      	b.n	8000bb4 <inv_generate_fast_nomot+0x14c>
 8000dbc:	20000da8 	.word	0x20000da8
 8000dc0:	20000248 	.word	0x20000248
 8000dc4:	0801596c 	.word	0x0801596c
 8000dc8:	2783      	movs	r7, #131	; 0x83
 8000dca:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8000dcc:	00bf      	lsls	r7, r7, #2
 8000dce:	0058      	lsls	r0, r3, #1
 8000dd0:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8000dd2:	6020      	str	r0, [r4, #0]
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	51e3      	str	r3, [r4, r7]
 8000dd8:	f003 fb38 	bl	800444c <__aeabi_i2f>
 8000ddc:	f00e fe0c 	bl	800f9f8 <sqrtf>
 8000de0:	2385      	movs	r3, #133	; 0x85
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	50e0      	str	r0, [r4, r3]
 8000de6:	59e1      	ldr	r1, [r4, r7]
 8000de8:	6b70      	ldr	r0, [r6, #52]	; 0x34
 8000dea:	e669      	b.n	8000ac0 <inv_generate_fast_nomot+0x58>
 8000dec:	23f4      	movs	r3, #244	; 0xf4
 8000dee:	2202      	movs	r2, #2
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	54e2      	strb	r2, [r4, r3]
 8000df4:	e6de      	b.n	8000bb4 <inv_generate_fast_nomot+0x14c>
 8000df6:	2801      	cmp	r0, #1
 8000df8:	d185      	bne.n	8000d06 <inv_generate_fast_nomot+0x29e>
 8000dfa:	23f4      	movs	r3, #244	; 0xf4
 8000dfc:	2202      	movs	r2, #2
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	54e2      	strb	r2, [r4, r3]
 8000e02:	e780      	b.n	8000d06 <inv_generate_fast_nomot+0x29e>
 8000e04:	2394      	movs	r3, #148	; 0x94
 8000e06:	2296      	movs	r2, #150	; 0x96
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	0052      	lsls	r2, r2, #1
 8000e0c:	58a2      	ldr	r2, [r4, r2]
 8000e0e:	58e3      	ldr	r3, [r4, r3]
 8000e10:	1a9b      	subs	r3, r3, r2
 8000e12:	6a32      	ldr	r2, [r6, #32]
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d200      	bcs.n	8000e1a <inv_generate_fast_nomot+0x3b2>
 8000e18:	e72d      	b.n	8000c76 <inv_generate_fast_nomot+0x20e>
 8000e1a:	23f4      	movs	r3, #244	; 0xf4
 8000e1c:	2204      	movs	r2, #4
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	1c28      	adds	r0, r5, #0
 8000e22:	54e2      	strb	r2, [r4, r3]
 8000e24:	f7ff fb1e 	bl	8000464 <inv_fast_nomot_set_gyro_bias>
 8000e28:	e725      	b.n	8000c76 <inv_generate_fast_nomot+0x20e>
 8000e2a:	4290      	cmp	r0, r2
 8000e2c:	d000      	beq.n	8000e30 <inv_generate_fast_nomot+0x3c8>
 8000e2e:	e6bd      	b.n	8000bac <inv_generate_fast_nomot+0x144>
 8000e30:	6828      	ldr	r0, [r5, #0]
 8000e32:	4288      	cmp	r0, r1
 8000e34:	d200      	bcs.n	8000e38 <inv_generate_fast_nomot+0x3d0>
 8000e36:	e749      	b.n	8000ccc <inv_generate_fast_nomot+0x264>
 8000e38:	e6b8      	b.n	8000bac <inv_generate_fast_nomot+0x144>
 8000e3a:	46c0      	nop			; (mov r8, r8)

08000e3c <inv_set_default_number_of_samples>:
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	b510      	push	{r4, lr}
 8000e40:	1040      	asrs	r0, r0, #1
 8000e42:	d10f      	bne.n	8000e64 <inv_set_default_number_of_samples+0x28>
 8000e44:	2001      	movs	r0, #1
 8000e46:	3301      	adds	r3, #1
 8000e48:	4098      	lsls	r0, r3
 8000e4a:	4c08      	ldr	r4, [pc, #32]	; (8000e6c <inv_set_default_number_of_samples+0x30>)
 8000e4c:	6363      	str	r3, [r4, #52]	; 0x34
 8000e4e:	6320      	str	r0, [r4, #48]	; 0x30
 8000e50:	f003 fafc 	bl	800444c <__aeabi_i2f>
 8000e54:	f00e fdd0 	bl	800f9f8 <sqrtf>
 8000e58:	2319      	movs	r3, #25
 8000e5a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000e5c:	63a0      	str	r0, [r4, #56]	; 0x38
 8000e5e:	4093      	lsls	r3, r2
 8000e60:	63e3      	str	r3, [r4, #60]	; 0x3c
 8000e62:	bd10      	pop	{r4, pc}
 8000e64:	3301      	adds	r3, #1
 8000e66:	2800      	cmp	r0, #0
 8000e68:	dcea      	bgt.n	8000e40 <inv_set_default_number_of_samples+0x4>
 8000e6a:	e7eb      	b.n	8000e44 <inv_set_default_number_of_samples+0x8>
 8000e6c:	20000248 	.word	0x20000248

08000e70 <inv_init_fast_nomot>:
 8000e70:	2298      	movs	r2, #152	; 0x98
 8000e72:	b538      	push	{r3, r4, r5, lr}
 8000e74:	4d15      	ldr	r5, [pc, #84]	; (8000ecc <inv_init_fast_nomot+0x5c>)
 8000e76:	2100      	movs	r1, #0
 8000e78:	1c28      	adds	r0, r5, #0
 8000e7a:	0092      	lsls	r2, r2, #2
 8000e7c:	f011 f853 	bl	8011f26 <memset>
 8000e80:	4c13      	ldr	r4, [pc, #76]	; (8000ed0 <inv_init_fast_nomot+0x60>)
 8000e82:	2100      	movs	r1, #0
 8000e84:	2240      	movs	r2, #64	; 0x40
 8000e86:	1c20      	adds	r0, r4, #0
 8000e88:	f011 f84d 	bl	8011f26 <memset>
 8000e8c:	2007      	movs	r0, #7
 8000e8e:	f7ff f9f3 	bl	8000278 <inv_init_maxmin>
 8000e92:	2300      	movs	r3, #0
 8000e94:	4a0f      	ldr	r2, [pc, #60]	; (8000ed4 <inv_init_fast_nomot+0x64>)
 8000e96:	2019      	movs	r0, #25
 8000e98:	61a2      	str	r2, [r4, #24]
 8000e9a:	61e3      	str	r3, [r4, #28]
 8000e9c:	2214      	movs	r2, #20
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	60a2      	str	r2, [r4, #8]
 8000ea2:	60e3      	str	r3, [r4, #12]
 8000ea4:	2296      	movs	r2, #150	; 0x96
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	0092      	lsls	r2, r2, #2
 8000eaa:	6122      	str	r2, [r4, #16]
 8000eac:	6163      	str	r3, [r4, #20]
 8000eae:	4b0a      	ldr	r3, [pc, #40]	; (8000ed8 <inv_init_fast_nomot+0x68>)
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	6223      	str	r3, [r4, #32]
 8000eb4:	23f2      	movs	r3, #242	; 0xf2
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	50ea      	str	r2, [r5, r3]
 8000eba:	f7ff ffbf 	bl	8000e3c <inv_set_default_number_of_samples>
 8000ebe:	2382      	movs	r3, #130	; 0x82
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	009b      	lsls	r3, r3, #2
 8000ec4:	50ea      	str	r2, [r5, r3]
 8000ec6:	2000      	movs	r0, #0
 8000ec8:	bd38      	pop	{r3, r4, r5, pc}
 8000eca:	46c0      	nop			; (mov r8, r8)
 8000ecc:	20000da8 	.word	0x20000da8
 8000ed0:	20000248 	.word	0x20000248
 8000ed4:	000005dc 	.word	0x000005dc
 8000ed8:	2faf0800 	.word	0x2faf0800

08000edc <inv_stop_fast_nomot>:
 8000edc:	b508      	push	{r3, lr}
 8000ede:	2001      	movs	r0, #1
 8000ee0:	f00e faa4 	bl	800f42c <inv_set_motion_state>
 8000ee4:	4801      	ldr	r0, [pc, #4]	; (8000eec <inv_stop_fast_nomot+0x10>)
 8000ee6:	f009 fdf5 	bl	800aad4 <inv_unregister_data_cb>
 8000eea:	bd08      	pop	{r3, pc}
 8000eec:	08000a69 	.word	0x08000a69

08000ef0 <inv_enable_fast_nomot>:
 8000ef0:	b508      	push	{r3, lr}
 8000ef2:	f7ff ffbd 	bl	8000e70 <inv_init_fast_nomot>
 8000ef6:	2800      	cmp	r0, #0
 8000ef8:	d102      	bne.n	8000f00 <inv_enable_fast_nomot+0x10>
 8000efa:	4802      	ldr	r0, [pc, #8]	; (8000f04 <inv_enable_fast_nomot+0x14>)
 8000efc:	f00e fc9e 	bl	800f83c <inv_register_mpl_start_notification>
 8000f00:	bd08      	pop	{r3, pc}
 8000f02:	46c0      	nop			; (mov r8, r8)
 8000f04:	08000311 	.word	0x08000311

08000f08 <inv_disable_fast_nomot>:
 8000f08:	b508      	push	{r3, lr}
 8000f0a:	f7ff ffe7 	bl	8000edc <inv_stop_fast_nomot>
 8000f0e:	4802      	ldr	r0, [pc, #8]	; (8000f18 <inv_disable_fast_nomot+0x10>)
 8000f10:	f00e fc54 	bl	800f7bc <inv_unregister_mpl_start_notification>
 8000f14:	bd08      	pop	{r3, pc}
 8000f16:	46c0      	nop			; (mov r8, r8)
 8000f18:	08000311 	.word	0x08000311

08000f1c <inv_get_fnm_gyro_no_motion_param>:
 8000f1c:	4b02      	ldr	r3, [pc, #8]	; (8000f28 <inv_get_fnm_gyro_no_motion_param+0xc>)
 8000f1e:	33f1      	adds	r3, #241	; 0xf1
 8000f20:	33ff      	adds	r3, #255	; 0xff
 8000f22:	6818      	ldr	r0, [r3, #0]
 8000f24:	6859      	ldr	r1, [r3, #4]
 8000f26:	4770      	bx	lr
 8000f28:	20000da8 	.word	0x20000da8

08000f2c <inv_fnm_debug_print>:
 8000f2c:	4770      	bx	lr
 8000f2e:	46c0      	nop			; (mov r8, r8)

08000f30 <inv_start_9x_sensor_fusion>:
 8000f30:	2196      	movs	r1, #150	; 0x96
 8000f32:	b508      	push	{r3, lr}
 8000f34:	4802      	ldr	r0, [pc, #8]	; (8000f40 <inv_start_9x_sensor_fusion+0x10>)
 8000f36:	0089      	lsls	r1, r1, #2
 8000f38:	2204      	movs	r2, #4
 8000f3a:	f009 fd21 	bl	800a980 <inv_register_data_cb>
 8000f3e:	bd08      	pop	{r3, pc}
 8000f40:	08001519 	.word	0x08001519

08000f44 <inv_filter_correction_angle>:
 8000f44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f46:	4657      	mov	r7, sl
 8000f48:	464e      	mov	r6, r9
 8000f4a:	4645      	mov	r5, r8
 8000f4c:	b4e0      	push	{r5, r6, r7}
 8000f4e:	1c1f      	adds	r7, r3, #0
 8000f50:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8000f52:	1c0e      	adds	r6, r1, #0
 8000f54:	4690      	mov	r8, r2
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	da00      	bge.n	8000f5c <inv_filter_correction_angle+0x18>
 8000f5a:	e0b7      	b.n	80010cc <inv_filter_correction_angle+0x188>
 8000f5c:	23bc      	movs	r3, #188	; 0xbc
 8000f5e:	58c3      	ldr	r3, [r0, r3]
 8000f60:	3b03      	subs	r3, #3
 8000f62:	425a      	negs	r2, r3
 8000f64:	415a      	adcs	r2, r3
 8000f66:	4691      	mov	r9, r2
 8000f68:	4c67      	ldr	r4, [pc, #412]	; (8001108 <inv_filter_correction_angle+0x1c4>)
 8000f6a:	2224      	movs	r2, #36	; 0x24
 8000f6c:	1d21      	adds	r1, r4, #4
 8000f6e:	1c20      	adds	r0, r4, #0
 8000f70:	1c25      	adds	r5, r4, #0
 8000f72:	f010 ffc5 	bl	8011f00 <memmove>
 8000f76:	2000      	movs	r0, #0
 8000f78:	6266      	str	r6, [r4, #36]	; 0x24
 8000f7a:	3528      	adds	r5, #40	; 0x28
 8000f7c:	cc02      	ldmia	r4!, {r1}
 8000f7e:	f002 fbd7 	bl	8003730 <__aeabi_fadd>
 8000f82:	42ac      	cmp	r4, r5
 8000f84:	d1fa      	bne.n	8000f7c <inv_filter_correction_angle+0x38>
 8000f86:	4961      	ldr	r1, [pc, #388]	; (800110c <inv_filter_correction_angle+0x1c8>)
 8000f88:	f002 fd72 	bl	8003a70 <__aeabi_fdiv>
 8000f8c:	23e4      	movs	r3, #228	; 0xe4
 8000f8e:	4c60      	ldr	r4, [pc, #384]	; (8001110 <inv_filter_correction_angle+0x1cc>)
 8000f90:	4682      	mov	sl, r0
 8000f92:	50e0      	str	r0, [r4, r3]
 8000f94:	4643      	mov	r3, r8
 8000f96:	2b31      	cmp	r3, #49	; 0x31
 8000f98:	dd18      	ble.n	8000fcc <inv_filter_correction_angle+0x88>
 8000f9a:	238e      	movs	r3, #142	; 0x8e
 8000f9c:	22c8      	movs	r2, #200	; 0xc8
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	50e2      	str	r2, [r4, r3]
 8000fa2:	1c38      	adds	r0, r7, #0
 8000fa4:	f003 fa52 	bl	800444c <__aeabi_i2f>
 8000fa8:	4b5a      	ldr	r3, [pc, #360]	; (8001114 <inv_filter_correction_angle+0x1d0>)
 8000faa:	1c05      	adds	r5, r0, #0
 8000fac:	1c30      	adds	r0, r6, #0
 8000fae:	4598      	cmp	r8, r3
 8000fb0:	dc00      	bgt.n	8000fb4 <inv_filter_correction_angle+0x70>
 8000fb2:	e07a      	b.n	80010aa <inv_filter_correction_angle+0x166>
 8000fb4:	4958      	ldr	r1, [pc, #352]	; (8001118 <inv_filter_correction_angle+0x1d4>)
 8000fb6:	f002 fd5b 	bl	8003a70 <__aeabi_fdiv>
 8000fba:	1c01      	adds	r1, r0, #0
 8000fbc:	1c28      	adds	r0, r5, #0
 8000fbe:	f002 ff21 	bl	8003e04 <__aeabi_fmul>
 8000fc2:	4956      	ldr	r1, [pc, #344]	; (800111c <inv_filter_correction_angle+0x1d8>)
 8000fc4:	f002 fd54 	bl	8003a70 <__aeabi_fdiv>
 8000fc8:	1c05      	adds	r5, r0, #0
 8000fca:	e023      	b.n	8001014 <inv_filter_correction_angle+0xd0>
 8000fcc:	1c38      	adds	r0, r7, #0
 8000fce:	4954      	ldr	r1, [pc, #336]	; (8001120 <inv_filter_correction_angle+0x1dc>)
 8000fd0:	f002 f8e6 	bl	80031a0 <__divsi3>
 8000fd4:	258e      	movs	r5, #142	; 0x8e
 8000fd6:	0083      	lsls	r3, r0, #2
 8000fd8:	006d      	lsls	r5, r5, #1
 8000fda:	1818      	adds	r0, r3, r0
 8000fdc:	5963      	ldr	r3, [r4, r5]
 8000fde:	4698      	mov	r8, r3
 8000fe0:	4480      	add	r8, r0
 8000fe2:	4643      	mov	r3, r8
 8000fe4:	5163      	str	r3, [r4, r5]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	da00      	bge.n	8000fec <inv_filter_correction_angle+0xa8>
 8000fea:	e072      	b.n	80010d2 <inv_filter_correction_angle+0x18e>
 8000fec:	494d      	ldr	r1, [pc, #308]	; (8001124 <inv_filter_correction_angle+0x1e0>)
 8000fee:	1c30      	adds	r0, r6, #0
 8000ff0:	f002 fd3e 	bl	8003a70 <__aeabi_fdiv>
 8000ff4:	1c05      	adds	r5, r0, #0
 8000ff6:	1c38      	adds	r0, r7, #0
 8000ff8:	f003 fa28 	bl	800444c <__aeabi_i2f>
 8000ffc:	1c01      	adds	r1, r0, #0
 8000ffe:	1c28      	adds	r0, r5, #0
 8001000:	f002 ff00 	bl	8003e04 <__aeabi_fmul>
 8001004:	4945      	ldr	r1, [pc, #276]	; (800111c <inv_filter_correction_angle+0x1d8>)
 8001006:	f002 fd33 	bl	8003a70 <__aeabi_fdiv>
 800100a:	4643      	mov	r3, r8
 800100c:	1c05      	adds	r5, r0, #0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d100      	bne.n	8001014 <inv_filter_correction_angle+0xd0>
 8001012:	e070      	b.n	80010f6 <inv_filter_correction_angle+0x1b2>
 8001014:	2390      	movs	r3, #144	; 0x90
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	58e3      	ldr	r3, [r4, r3]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d000      	beq.n	8001020 <inv_filter_correction_angle+0xdc>
 800101e:	1c35      	adds	r5, r6, #0
 8001020:	4b41      	ldr	r3, [pc, #260]	; (8001128 <inv_filter_correction_angle+0x1e4>)
 8001022:	429f      	cmp	r7, r3
 8001024:	d050      	beq.n	80010c8 <inv_filter_correction_angle+0x184>
 8001026:	1c28      	adds	r0, r5, #0
 8001028:	2100      	movs	r1, #0
 800102a:	f002 f9ef 	bl	800340c <__aeabi_fcmpeq>
 800102e:	23e8      	movs	r3, #232	; 0xe8
 8001030:	2800      	cmp	r0, #0
 8001032:	d045      	beq.n	80010c0 <inv_filter_correction_angle+0x17c>
 8001034:	58e0      	ldr	r0, [r4, r3]
 8001036:	4651      	mov	r1, sl
 8001038:	f003 f832 	bl	80040a0 <__aeabi_fsub>
 800103c:	0040      	lsls	r0, r0, #1
 800103e:	0840      	lsrs	r0, r0, #1
 8001040:	f005 f8e6 	bl	8006210 <__aeabi_f2d>
 8001044:	4a39      	ldr	r2, [pc, #228]	; (800112c <inv_filter_correction_angle+0x1e8>)
 8001046:	4b3a      	ldr	r3, [pc, #232]	; (8001130 <inv_filter_correction_angle+0x1ec>)
 8001048:	f002 f9c0 	bl	80033cc <__aeabi_dcmpgt>
 800104c:	2800      	cmp	r0, #0
 800104e:	d026      	beq.n	800109e <inv_filter_correction_angle+0x15a>
 8001050:	23b8      	movs	r3, #184	; 0xb8
 8001052:	2100      	movs	r1, #0
 8001054:	58e0      	ldr	r0, [r4, r3]
 8001056:	f002 f9d9 	bl	800340c <__aeabi_fcmpeq>
 800105a:	2800      	cmp	r0, #0
 800105c:	d01f      	beq.n	800109e <inv_filter_correction_angle+0x15a>
 800105e:	464b      	mov	r3, r9
 8001060:	2b01      	cmp	r3, #1
 8001062:	d11c      	bne.n	800109e <inv_filter_correction_angle+0x15a>
 8001064:	22c8      	movs	r2, #200	; 0xc8
 8001066:	331c      	adds	r3, #28
 8001068:	33ff      	adds	r3, #255	; 0xff
 800106a:	50e2      	str	r2, [r4, r3]
 800106c:	1c30      	adds	r0, r6, #0
 800106e:	f005 f8cf 	bl	8006210 <__aeabi_f2d>
 8001072:	2200      	movs	r2, #0
 8001074:	4b2f      	ldr	r3, [pc, #188]	; (8001134 <inv_filter_correction_angle+0x1f0>)
 8001076:	f003 fde3 	bl	8004c40 <__aeabi_ddiv>
 800107a:	1c04      	adds	r4, r0, #0
 800107c:	1c38      	adds	r0, r7, #0
 800107e:	1c0d      	adds	r5, r1, #0
 8001080:	f005 f870 	bl	8006164 <__aeabi_i2d>
 8001084:	1c02      	adds	r2, r0, #0
 8001086:	1c0b      	adds	r3, r1, #0
 8001088:	1c20      	adds	r0, r4, #0
 800108a:	1c29      	adds	r1, r5, #0
 800108c:	f004 f9d2 	bl	8005434 <__aeabi_dmul>
 8001090:	2200      	movs	r2, #0
 8001092:	4b29      	ldr	r3, [pc, #164]	; (8001138 <inv_filter_correction_angle+0x1f4>)
 8001094:	f003 fdd4 	bl	8004c40 <__aeabi_ddiv>
 8001098:	f005 f902 	bl	80062a0 <__aeabi_d2f>
 800109c:	1c05      	adds	r5, r0, #0
 800109e:	1c28      	adds	r0, r5, #0
 80010a0:	bc1c      	pop	{r2, r3, r4}
 80010a2:	4690      	mov	r8, r2
 80010a4:	4699      	mov	r9, r3
 80010a6:	46a2      	mov	sl, r4
 80010a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010aa:	4924      	ldr	r1, [pc, #144]	; (800113c <inv_filter_correction_angle+0x1f8>)
 80010ac:	f002 fce0 	bl	8003a70 <__aeabi_fdiv>
 80010b0:	1c29      	adds	r1, r5, #0
 80010b2:	f002 fea7 	bl	8003e04 <__aeabi_fmul>
 80010b6:	4919      	ldr	r1, [pc, #100]	; (800111c <inv_filter_correction_angle+0x1d8>)
 80010b8:	f002 fcda 	bl	8003a70 <__aeabi_fdiv>
 80010bc:	1c05      	adds	r5, r0, #0
 80010be:	e7a9      	b.n	8001014 <inv_filter_correction_angle+0xd0>
 80010c0:	4652      	mov	r2, sl
 80010c2:	4650      	mov	r0, sl
 80010c4:	50e2      	str	r2, [r4, r3]
 80010c6:	e7b6      	b.n	8001036 <inv_filter_correction_angle+0xf2>
 80010c8:	1c35      	adds	r5, r6, #0
 80010ca:	e7ac      	b.n	8001026 <inv_filter_correction_angle+0xe2>
 80010cc:	2300      	movs	r3, #0
 80010ce:	4699      	mov	r9, r3
 80010d0:	e74a      	b.n	8000f68 <inv_filter_correction_angle+0x24>
 80010d2:	2300      	movs	r3, #0
 80010d4:	4913      	ldr	r1, [pc, #76]	; (8001124 <inv_filter_correction_angle+0x1e0>)
 80010d6:	5163      	str	r3, [r4, r5]
 80010d8:	1c30      	adds	r0, r6, #0
 80010da:	f002 fcc9 	bl	8003a70 <__aeabi_fdiv>
 80010de:	1c05      	adds	r5, r0, #0
 80010e0:	1c38      	adds	r0, r7, #0
 80010e2:	f003 f9b3 	bl	800444c <__aeabi_i2f>
 80010e6:	1c01      	adds	r1, r0, #0
 80010e8:	1c28      	adds	r0, r5, #0
 80010ea:	f002 fe8b 	bl	8003e04 <__aeabi_fmul>
 80010ee:	490b      	ldr	r1, [pc, #44]	; (800111c <inv_filter_correction_angle+0x1d8>)
 80010f0:	f002 fcbe 	bl	8003a70 <__aeabi_fdiv>
 80010f4:	1c05      	adds	r5, r0, #0
 80010f6:	2394      	movs	r3, #148	; 0x94
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	58e3      	ldr	r3, [r4, r3]
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d000      	beq.n	8001102 <inv_filter_correction_angle+0x1be>
 8001100:	e788      	b.n	8001014 <inv_filter_correction_angle+0xd0>
 8001102:	2500      	movs	r5, #0
 8001104:	e786      	b.n	8001014 <inv_filter_correction_angle+0xd0>
 8001106:	46c0      	nop			; (mov r8, r8)
 8001108:	200010c4 	.word	0x200010c4
 800110c:	41200000 	.word	0x41200000
 8001110:	20001008 	.word	0x20001008
 8001114:	000003e7 	.word	0x000003e7
 8001118:	42480000 	.word	0x42480000
 800111c:	459c4000 	.word	0x459c4000
 8001120:	ffffec78 	.word	0xffffec78
 8001124:	43c80000 	.word	0x43c80000
 8001128:	000f4240 	.word	0x000f4240
 800112c:	cac08312 	.word	0xcac08312
 8001130:	3fb645a1 	.word	0x3fb645a1
 8001134:	40790000 	.word	0x40790000
 8001138:	40b38800 	.word	0x40b38800
 800113c:	43480000 	.word	0x43480000

08001140 <inv_perform_9x_fusion>:
 8001140:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001142:	465f      	mov	r7, fp
 8001144:	4656      	mov	r6, sl
 8001146:	464d      	mov	r5, r9
 8001148:	4644      	mov	r4, r8
 800114a:	2300      	movs	r3, #0
 800114c:	b4f0      	push	{r4, r5, r6, r7}
 800114e:	b0ab      	sub	sp, #172	; 0xac
 8001150:	9303      	str	r3, [sp, #12]
 8001152:	9304      	str	r3, [sp, #16]
 8001154:	9305      	str	r3, [sp, #20]
 8001156:	4fd3      	ldr	r7, [pc, #844]	; (80014a4 <inv_perform_9x_fusion+0x364>)
 8001158:	3321      	adds	r3, #33	; 0x21
 800115a:	33ff      	adds	r3, #255	; 0xff
 800115c:	58fa      	ldr	r2, [r7, r3]
 800115e:	2a03      	cmp	r2, #3
 8001160:	d100      	bne.n	8001164 <inv_perform_9x_fusion+0x24>
 8001162:	e19b      	b.n	800149c <inv_perform_9x_fusion+0x35c>
 8001164:	2400      	movs	r4, #0
 8001166:	9001      	str	r0, [sp, #4]
 8001168:	1c23      	adds	r3, r4, #0
 800116a:	33a8      	adds	r3, #168	; 0xa8
 800116c:	58f8      	ldr	r0, [r7, r3]
 800116e:	f003 f96d 	bl	800444c <__aeabi_i2f>
 8001172:	21c2      	movs	r1, #194	; 0xc2
 8001174:	0589      	lsls	r1, r1, #22
 8001176:	f002 fe45 	bl	8003e04 <__aeabi_fmul>
 800117a:	221c      	movs	r2, #28
 800117c:	ab02      	add	r3, sp, #8
 800117e:	189b      	adds	r3, r3, r2
 8001180:	5118      	str	r0, [r3, r4]
 8001182:	3404      	adds	r4, #4
 8001184:	2c10      	cmp	r4, #16
 8001186:	d1ef      	bne.n	8001168 <inv_perform_9x_fusion+0x28>
 8001188:	ab1d      	add	r3, sp, #116	; 0x74
 800118a:	1c18      	adds	r0, r3, #0
 800118c:	ac06      	add	r4, sp, #24
 800118e:	469b      	mov	fp, r3
 8001190:	f00e f9e4 	bl	800f55c <inv_get_6axis_quaternion>
 8001194:	1c20      	adds	r0, r4, #0
 8001196:	f00e f991 	bl	800f4bc <inv_get_gravity>
 800119a:	1c39      	adds	r1, r7, #0
 800119c:	223c      	movs	r2, #60	; 0x3c
 800119e:	310c      	adds	r1, #12
 80011a0:	1c38      	adds	r0, r7, #0
 80011a2:	f010 fead 	bl	8011f00 <memmove>
 80011a6:	1c38      	adds	r0, r7, #0
 80011a8:	1c39      	adds	r1, r7, #0
 80011aa:	2250      	movs	r2, #80	; 0x50
 80011ac:	3158      	adds	r1, #88	; 0x58
 80011ae:	3048      	adds	r0, #72	; 0x48
 80011b0:	f010 fea6 	bl	8011f00 <memmove>
 80011b4:	1c3b      	adds	r3, r7, #0
 80011b6:	333c      	adds	r3, #60	; 0x3c
 80011b8:	cc07      	ldmia	r4!, {r0, r1, r2}
 80011ba:	c307      	stmia	r3!, {r0, r1, r2}
 80011bc:	1c3b      	adds	r3, r7, #0
 80011be:	465a      	mov	r2, fp
 80011c0:	3398      	adds	r3, #152	; 0x98
 80011c2:	ca13      	ldmia	r2!, {r0, r1, r4}
 80011c4:	c313      	stmia	r3!, {r0, r1, r4}
 80011c6:	6812      	ldr	r2, [r2, #0]
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	2392      	movs	r3, #146	; 0x92
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	58f9      	ldr	r1, [r7, r3]
 80011d0:	1c4a      	adds	r2, r1, #1
 80011d2:	50fa      	str	r2, [r7, r3]
 80011d4:	2a06      	cmp	r2, #6
 80011d6:	dc00      	bgt.n	80011da <inv_perform_9x_fusion+0x9a>
 80011d8:	e123      	b.n	8001422 <inv_perform_9x_fusion+0x2e2>
 80011da:	2206      	movs	r2, #6
 80011dc:	2500      	movs	r5, #0
 80011de:	50fa      	str	r2, [r7, r3]
 80011e0:	9b01      	ldr	r3, [sp, #4]
 80011e2:	006c      	lsls	r4, r5, #1
 80011e4:	33a0      	adds	r3, #160	; 0xa0
 80011e6:	9300      	str	r3, [sp, #0]
 80011e8:	4baf      	ldr	r3, [pc, #700]	; (80014a8 <inv_perform_9x_fusion+0x368>)
 80011ea:	012e      	lsls	r6, r5, #4
 80011ec:	469a      	mov	sl, r3
 80011ee:	ab21      	add	r3, sp, #132	; 0x84
 80011f0:	4699      	mov	r9, r3
 80011f2:	1964      	adds	r4, r4, r5
 80011f4:	3648      	adds	r6, #72	; 0x48
 80011f6:	00a4      	lsls	r4, r4, #2
 80011f8:	19be      	adds	r6, r7, r6
 80011fa:	193c      	adds	r4, r7, r4
 80011fc:	48ab      	ldr	r0, [pc, #684]	; (80014ac <inv_perform_9x_fusion+0x36c>)
 80011fe:	1c31      	adds	r1, r6, #0
 8001200:	464a      	mov	r2, r9
 8001202:	f00d f9eb 	bl	800e5dc <inv_q_mult>
 8001206:	1c21      	adds	r1, r4, #0
 8001208:	9800      	ldr	r0, [sp, #0]
 800120a:	464a      	mov	r2, r9
 800120c:	f00d f8f4 	bl	800e3f8 <inv_compass_angle>
 8001210:	4653      	mov	r3, sl
 8001212:	4680      	mov	r8, r0
 8001214:	0059      	lsls	r1, r3, #1
 8001216:	0040      	lsls	r0, r0, #1
 8001218:	0840      	lsrs	r0, r0, #1
 800121a:	0849      	lsrs	r1, r1, #1
 800121c:	f002 f8fc 	bl	8003418 <__aeabi_fcmplt>
 8001220:	2800      	cmp	r0, #0
 8001222:	d000      	beq.n	8001226 <inv_perform_9x_fusion+0xe6>
 8001224:	46c2      	mov	sl, r8
 8001226:	3501      	adds	r5, #1
 8001228:	3610      	adds	r6, #16
 800122a:	340c      	adds	r4, #12
 800122c:	2d06      	cmp	r5, #6
 800122e:	d1e5      	bne.n	80011fc <inv_perform_9x_fusion+0xbc>
 8001230:	9801      	ldr	r0, [sp, #4]
 8001232:	3018      	adds	r0, #24
 8001234:	f00d f96b 	bl	800e50e <inv_get_gyro_sum_of_sqr>
 8001238:	2398      	movs	r3, #152	; 0x98
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	58fb      	ldr	r3, [r7, r3]
 800123e:	499c      	ldr	r1, [pc, #624]	; (80014b0 <inv_perform_9x_fusion+0x370>)
 8001240:	0982      	lsrs	r2, r0, #6
 8001242:	428b      	cmp	r3, r1
 8001244:	dd00      	ble.n	8001248 <inv_perform_9x_fusion+0x108>
 8001246:	1c0b      	adds	r3, r1, #0
 8001248:	4651      	mov	r1, sl
 800124a:	9801      	ldr	r0, [sp, #4]
 800124c:	f7ff fe7a 	bl	8000f44 <inv_filter_correction_angle>
 8001250:	23ec      	movs	r3, #236	; 0xec
 8001252:	58f9      	ldr	r1, [r7, r3]
 8001254:	f002 fdd6 	bl	8003e04 <__aeabi_fmul>
 8001258:	23b8      	movs	r3, #184	; 0xb8
 800125a:	1c3c      	adds	r4, r7, #0
 800125c:	50f8      	str	r0, [r7, r3]
 800125e:	a819      	add	r0, sp, #100	; 0x64
 8001260:	f00e f97c 	bl	800f55c <inv_get_6axis_quaternion>
 8001264:	34fc      	adds	r4, #252	; 0xfc
 8001266:	a819      	add	r0, sp, #100	; 0x64
 8001268:	4649      	mov	r1, r9
 800126a:	f00d fe2c 	bl	800eec6 <inv_quaternion_to_rotation>
 800126e:	1c20      	adds	r0, r4, #0
 8001270:	a919      	add	r1, sp, #100	; 0x64
 8001272:	465a      	mov	r2, fp
 8001274:	f00d f9b2 	bl	800e5dc <inv_q_mult>
 8001278:	a819      	add	r0, sp, #100	; 0x64
 800127a:	1c21      	adds	r1, r4, #0
 800127c:	f00d faa6 	bl	800e7cc <inv_q_invert>
 8001280:	2300      	movs	r3, #0
 8001282:	469a      	mov	sl, r3
 8001284:	4653      	mov	r3, sl
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	4453      	add	r3, sl
 800128a:	444b      	add	r3, r9
 800128c:	4698      	mov	r8, r3
 800128e:	2600      	movs	r6, #0
 8001290:	2400      	movs	r4, #0
 8001292:	2500      	movs	r5, #0
 8001294:	4643      	mov	r3, r8
 8001296:	599b      	ldr	r3, [r3, r6]
 8001298:	4640      	mov	r0, r8
 800129a:	17d9      	asrs	r1, r3, #31
 800129c:	465b      	mov	r3, fp
 800129e:	199b      	adds	r3, r3, r6
 80012a0:	685a      	ldr	r2, [r3, #4]
 80012a2:	5980      	ldr	r0, [r0, r6]
 80012a4:	17d3      	asrs	r3, r2, #31
 80012a6:	f002 f903 	bl	80034b0 <__aeabi_lmul>
 80012aa:	3604      	adds	r6, #4
 80012ac:	1824      	adds	r4, r4, r0
 80012ae:	414d      	adcs	r5, r1
 80012b0:	2e0c      	cmp	r6, #12
 80012b2:	d1ef      	bne.n	8001294 <inv_perform_9x_fusion+0x154>
 80012b4:	4652      	mov	r2, sl
 80012b6:	00ab      	lsls	r3, r5, #2
 80012b8:	0fa4      	lsrs	r4, r4, #30
 80012ba:	431c      	orrs	r4, r3
 80012bc:	ab03      	add	r3, sp, #12
 80012be:	509c      	str	r4, [r3, r2]
 80012c0:	2304      	movs	r3, #4
 80012c2:	469c      	mov	ip, r3
 80012c4:	44e2      	add	sl, ip
 80012c6:	4653      	mov	r3, sl
 80012c8:	2b0c      	cmp	r3, #12
 80012ca:	d1db      	bne.n	8001284 <inv_perform_9x_fusion+0x144>
 80012cc:	2390      	movs	r3, #144	; 0x90
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	58fb      	ldr	r3, [r7, r3]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d000      	beq.n	80012d8 <inv_perform_9x_fusion+0x198>
 80012d6:	e0ae      	b.n	8001436 <inv_perform_9x_fusion+0x2f6>
 80012d8:	9c05      	ldr	r4, [sp, #20]
 80012da:	4260      	negs	r0, r4
 80012dc:	f003 f8b6 	bl	800444c <__aeabi_i2f>
 80012e0:	21c2      	movs	r1, #194	; 0xc2
 80012e2:	0589      	lsls	r1, r1, #22
 80012e4:	f002 fd8e 	bl	8003e04 <__aeabi_fmul>
 80012e8:	1c06      	adds	r6, r0, #0
 80012ea:	f00e fba1 	bl	800fa30 <cosf>
 80012ee:	1c05      	adds	r5, r0, #0
 80012f0:	1c30      	adds	r0, r6, #0
 80012f2:	f00e fbd5 	bl	800faa0 <sinf>
 80012f6:	1c06      	adds	r6, r0, #0
 80012f8:	1c20      	adds	r0, r4, #0
 80012fa:	f003 f8a7 	bl	800444c <__aeabi_i2f>
 80012fe:	496d      	ldr	r1, [pc, #436]	; (80014b4 <inv_perform_9x_fusion+0x374>)
 8001300:	f002 fbb6 	bl	8003a70 <__aeabi_fdiv>
 8001304:	4680      	mov	r8, r0
 8001306:	2398      	movs	r3, #152	; 0x98
 8001308:	9511      	str	r5, [sp, #68]	; 0x44
 800130a:	2500      	movs	r5, #0
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	ac11      	add	r4, sp, #68	; 0x44
 8001310:	58f8      	ldr	r0, [r7, r3]
 8001312:	4969      	ldr	r1, [pc, #420]	; (80014b8 <inv_perform_9x_fusion+0x378>)
 8001314:	6065      	str	r5, [r4, #4]
 8001316:	60a5      	str	r5, [r4, #8]
 8001318:	60e6      	str	r6, [r4, #12]
 800131a:	f001 ff41 	bl	80031a0 <__divsi3>
 800131e:	f003 f895 	bl	800444c <__aeabi_i2f>
 8001322:	1c06      	adds	r6, r0, #0
 8001324:	1c31      	adds	r1, r6, #0
 8001326:	4640      	mov	r0, r8
 8001328:	f002 fba2 	bl	8003a70 <__aeabi_fdiv>
 800132c:	21fc      	movs	r1, #252	; 0xfc
 800132e:	0589      	lsls	r1, r1, #22
 8001330:	f002 fd68 	bl	8003e04 <__aeabi_fmul>
 8001334:	f003 f86a 	bl	800440c <__aeabi_f2iz>
 8001338:	0040      	lsls	r0, r0, #1
 800133a:	f003 f887 	bl	800444c <__aeabi_i2f>
 800133e:	495d      	ldr	r1, [pc, #372]	; (80014b4 <inv_perform_9x_fusion+0x374>)
 8001340:	f002 fd60 	bl	8003e04 <__aeabi_fmul>
 8001344:	1c01      	adds	r1, r0, #0
 8001346:	1c30      	adds	r0, r6, #0
 8001348:	f002 fd5c 	bl	8003e04 <__aeabi_fmul>
 800134c:	f003 f85e 	bl	800440c <__aeabi_f2iz>
 8001350:	f003 f87c 	bl	800444c <__aeabi_i2f>
 8001354:	21c2      	movs	r1, #194	; 0xc2
 8001356:	0589      	lsls	r1, r1, #22
 8001358:	f002 fd54 	bl	8003e04 <__aeabi_fmul>
 800135c:	1c06      	adds	r6, r0, #0
 800135e:	f00e fb67 	bl	800fa30 <cosf>
 8001362:	9015      	str	r0, [sp, #84]	; 0x54
 8001364:	1c30      	adds	r0, r6, #0
 8001366:	9516      	str	r5, [sp, #88]	; 0x58
 8001368:	9517      	str	r5, [sp, #92]	; 0x5c
 800136a:	f00e fb99 	bl	800faa0 <sinf>
 800136e:	1c21      	adds	r1, r4, #0
 8001370:	9018      	str	r0, [sp, #96]	; 0x60
 8001372:	aa0d      	add	r2, sp, #52	; 0x34
 8001374:	a809      	add	r0, sp, #36	; 0x24
 8001376:	f00d fa7c 	bl	800e872 <inv_q_multf>
 800137a:	1c22      	adds	r2, r4, #0
 800137c:	a80d      	add	r0, sp, #52	; 0x34
 800137e:	a915      	add	r1, sp, #84	; 0x54
 8001380:	f00d fa77 	bl	800e872 <inv_q_multf>
 8001384:	23bc      	movs	r3, #188	; 0xbc
 8001386:	9a01      	ldr	r2, [sp, #4]
 8001388:	2500      	movs	r5, #0
 800138a:	58d3      	ldr	r3, [r2, r3]
 800138c:	4698      	mov	r8, r3
 800138e:	2b00      	cmp	r3, #0
 8001390:	dd16      	ble.n	80013c0 <inv_perform_9x_fusion+0x280>
 8001392:	221c      	movs	r2, #28
 8001394:	219d      	movs	r1, #157	; 0x9d
 8001396:	ab02      	add	r3, sp, #8
 8001398:	189b      	adds	r3, r3, r2
 800139a:	5962      	ldr	r2, [r4, r5]
 800139c:	1c2e      	adds	r6, r5, #0
 800139e:	515a      	str	r2, [r3, r5]
 80013a0:	1c10      	adds	r0, r2, #0
 80013a2:	05c9      	lsls	r1, r1, #23
 80013a4:	f002 fd2e 	bl	8003e04 <__aeabi_fmul>
 80013a8:	f003 f830 	bl	800440c <__aeabi_f2iz>
 80013ac:	36a8      	adds	r6, #168	; 0xa8
 80013ae:	19be      	adds	r6, r7, r6
 80013b0:	3504      	adds	r5, #4
 80013b2:	6030      	str	r0, [r6, #0]
 80013b4:	2d10      	cmp	r5, #16
 80013b6:	d1ec      	bne.n	8001392 <inv_perform_9x_fusion+0x252>
 80013b8:	4643      	mov	r3, r8
 80013ba:	2b03      	cmp	r3, #3
 80013bc:	d100      	bne.n	80013c0 <inv_perform_9x_fusion+0x280>
 80013be:	e07d      	b.n	80014bc <inv_perform_9x_fusion+0x37c>
 80013c0:	23a8      	movs	r3, #168	; 0xa8
 80013c2:	58f8      	ldr	r0, [r7, r3]
 80013c4:	4698      	mov	r8, r3
 80013c6:	f003 f841 	bl	800444c <__aeabi_i2f>
 80013ca:	21c2      	movs	r1, #194	; 0xc2
 80013cc:	0589      	lsls	r1, r1, #22
 80013ce:	f002 fd19 	bl	8003e04 <__aeabi_fmul>
 80013d2:	26ac      	movs	r6, #172	; 0xac
 80013d4:	900d      	str	r0, [sp, #52]	; 0x34
 80013d6:	59b8      	ldr	r0, [r7, r6]
 80013d8:	f003 f838 	bl	800444c <__aeabi_i2f>
 80013dc:	21c2      	movs	r1, #194	; 0xc2
 80013de:	0589      	lsls	r1, r1, #22
 80013e0:	f002 fd10 	bl	8003e04 <__aeabi_fmul>
 80013e4:	25b0      	movs	r5, #176	; 0xb0
 80013e6:	900e      	str	r0, [sp, #56]	; 0x38
 80013e8:	5978      	ldr	r0, [r7, r5]
 80013ea:	f003 f82f 	bl	800444c <__aeabi_i2f>
 80013ee:	21c2      	movs	r1, #194	; 0xc2
 80013f0:	0589      	lsls	r1, r1, #22
 80013f2:	f002 fd07 	bl	8003e04 <__aeabi_fmul>
 80013f6:	24b4      	movs	r4, #180	; 0xb4
 80013f8:	900f      	str	r0, [sp, #60]	; 0x3c
 80013fa:	5938      	ldr	r0, [r7, r4]
 80013fc:	f003 f826 	bl	800444c <__aeabi_i2f>
 8001400:	21c2      	movs	r1, #194	; 0xc2
 8001402:	0589      	lsls	r1, r1, #22
 8001404:	f002 fcfe 	bl	8003e04 <__aeabi_fmul>
 8001408:	2390      	movs	r3, #144	; 0x90
 800140a:	005b      	lsls	r3, r3, #1
 800140c:	58fb      	ldr	r3, [r7, r3]
 800140e:	9010      	str	r0, [sp, #64]	; 0x40
 8001410:	2b00      	cmp	r3, #0
 8001412:	d116      	bne.n	8001442 <inv_perform_9x_fusion+0x302>
 8001414:	b02b      	add	sp, #172	; 0xac
 8001416:	bc3c      	pop	{r2, r3, r4, r5}
 8001418:	4690      	mov	r8, r2
 800141a:	4699      	mov	r9, r3
 800141c:	46a2      	mov	sl, r4
 800141e:	46ab      	mov	fp, r5
 8001420:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001422:	2505      	movs	r5, #5
 8001424:	1a6d      	subs	r5, r5, r1
 8001426:	2d05      	cmp	r5, #5
 8001428:	dc00      	bgt.n	800142c <inv_perform_9x_fusion+0x2ec>
 800142a:	e6d9      	b.n	80011e0 <inv_perform_9x_fusion+0xa0>
 800142c:	4b1e      	ldr	r3, [pc, #120]	; (80014a8 <inv_perform_9x_fusion+0x368>)
 800142e:	469a      	mov	sl, r3
 8001430:	ab21      	add	r3, sp, #132	; 0x84
 8001432:	4699      	mov	r9, r3
 8001434:	e6fc      	b.n	8001230 <inv_perform_9x_fusion+0xf0>
 8001436:	2300      	movs	r3, #0
 8001438:	25fe      	movs	r5, #254	; 0xfe
 800143a:	4698      	mov	r8, r3
 800143c:	1c1e      	adds	r6, r3, #0
 800143e:	05ad      	lsls	r5, r5, #22
 8001440:	e761      	b.n	8001306 <inv_perform_9x_fusion+0x1c6>
 8001442:	23b8      	movs	r3, #184	; 0xb8
 8001444:	21fc      	movs	r1, #252	; 0xfc
 8001446:	58f8      	ldr	r0, [r7, r3]
 8001448:	0589      	lsls	r1, r1, #22
 800144a:	f002 fcdb 	bl	8003e04 <__aeabi_fmul>
 800144e:	4681      	mov	r9, r0
 8001450:	f00e faee 	bl	800fa30 <cosf>
 8001454:	219d      	movs	r1, #157	; 0x9d
 8001456:	05c9      	lsls	r1, r1, #23
 8001458:	f002 fcd4 	bl	8003e04 <__aeabi_fmul>
 800145c:	f002 ffd6 	bl	800440c <__aeabi_f2iz>
 8001460:	4643      	mov	r3, r8
 8001462:	50f8      	str	r0, [r7, r3]
 8001464:	2300      	movs	r3, #0
 8001466:	4648      	mov	r0, r9
 8001468:	51bb      	str	r3, [r7, r6]
 800146a:	517b      	str	r3, [r7, r5]
 800146c:	f00e fb18 	bl	800faa0 <sinf>
 8001470:	219d      	movs	r1, #157	; 0x9d
 8001472:	05c9      	lsls	r1, r1, #23
 8001474:	f002 fcc6 	bl	8003e04 <__aeabi_fmul>
 8001478:	f002 ffc8 	bl	800440c <__aeabi_f2iz>
 800147c:	5138      	str	r0, [r7, r4]
 800147e:	23c0      	movs	r3, #192	; 0xc0
 8001480:	1c38      	adds	r0, r7, #0
 8001482:	9a01      	ldr	r2, [sp, #4]
 8001484:	30a8      	adds	r0, #168	; 0xa8
 8001486:	58d1      	ldr	r1, [r2, r3]
 8001488:	f00d ff80 	bl	800f38c <inv_set_compass_correction>
 800148c:	2290      	movs	r2, #144	; 0x90
 800148e:	0052      	lsls	r2, r2, #1
 8001490:	58bb      	ldr	r3, [r7, r2]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d0be      	beq.n	8001414 <inv_perform_9x_fusion+0x2d4>
 8001496:	3b01      	subs	r3, #1
 8001498:	50bb      	str	r3, [r7, r2]
 800149a:	e7bb      	b.n	8001414 <inv_perform_9x_fusion+0x2d4>
 800149c:	3a01      	subs	r2, #1
 800149e:	50fa      	str	r2, [r7, r3]
 80014a0:	e7b8      	b.n	8001414 <inv_perform_9x_fusion+0x2d4>
 80014a2:	46c0      	nop			; (mov r8, r8)
 80014a4:	20001008 	.word	0x20001008
 80014a8:	49742400 	.word	0x49742400
 80014ac:	200010b0 	.word	0x200010b0
 80014b0:	000f4240 	.word	0x000f4240
 80014b4:	473702e1 	.word	0x473702e1
 80014b8:	00001388 	.word	0x00001388
 80014bc:	f000 ff28 	bl	8002310 <inv_get_magnetic_disturbance_state>
 80014c0:	2800      	cmp	r0, #0
 80014c2:	d000      	beq.n	80014c6 <inv_perform_9x_fusion+0x386>
 80014c4:	e77c      	b.n	80013c0 <inv_perform_9x_fusion+0x280>
 80014c6:	23b8      	movs	r3, #184	; 0xb8
 80014c8:	21fc      	movs	r1, #252	; 0xfc
 80014ca:	58f8      	ldr	r0, [r7, r3]
 80014cc:	0589      	lsls	r1, r1, #22
 80014ce:	f002 fc99 	bl	8003e04 <__aeabi_fmul>
 80014d2:	1c05      	adds	r5, r0, #0
 80014d4:	f00e faac 	bl	800fa30 <cosf>
 80014d8:	2300      	movs	r3, #0
 80014da:	9015      	str	r0, [sp, #84]	; 0x54
 80014dc:	1c28      	adds	r0, r5, #0
 80014de:	9316      	str	r3, [sp, #88]	; 0x58
 80014e0:	9317      	str	r3, [sp, #92]	; 0x5c
 80014e2:	f00e fadd 	bl	800faa0 <sinf>
 80014e6:	a915      	add	r1, sp, #84	; 0x54
 80014e8:	9018      	str	r0, [sp, #96]	; 0x60
 80014ea:	1c22      	adds	r2, r4, #0
 80014ec:	a809      	add	r0, sp, #36	; 0x24
 80014ee:	f00d f9c0 	bl	800e872 <inv_q_multf>
 80014f2:	1c20      	adds	r0, r4, #0
 80014f4:	f00d fb07 	bl	800eb06 <inv_q_normalizef>
 80014f8:	2500      	movs	r5, #0
 80014fa:	219d      	movs	r1, #157	; 0x9d
 80014fc:	1c2e      	adds	r6, r5, #0
 80014fe:	5960      	ldr	r0, [r4, r5]
 8001500:	05c9      	lsls	r1, r1, #23
 8001502:	f002 fc7f 	bl	8003e04 <__aeabi_fmul>
 8001506:	f002 ff81 	bl	800440c <__aeabi_f2iz>
 800150a:	36a8      	adds	r6, #168	; 0xa8
 800150c:	19be      	adds	r6, r7, r6
 800150e:	3504      	adds	r5, #4
 8001510:	6030      	str	r0, [r6, #0]
 8001512:	2d10      	cmp	r5, #16
 8001514:	d1f1      	bne.n	80014fa <inv_perform_9x_fusion+0x3ba>
 8001516:	e7b2      	b.n	800147e <inv_perform_9x_fusion+0x33e>

08001518 <inv_process_9x_sensor_fusion_cb>:
 8001518:	23b8      	movs	r3, #184	; 0xb8
 800151a:	58c2      	ldr	r2, [r0, r3]
 800151c:	3ba8      	subs	r3, #168	; 0xa8
 800151e:	b570      	push	{r4, r5, r6, lr}
 8001520:	4013      	ands	r3, r2
 8001522:	4d24      	ldr	r5, [pc, #144]	; (80015b4 <inv_process_9x_sensor_fusion_cb+0x9c>)
 8001524:	d105      	bne.n	8001532 <inv_process_9x_sensor_fusion_cb+0x1a>
 8001526:	2290      	movs	r2, #144	; 0x90
 8001528:	2103      	movs	r1, #3
 800152a:	0052      	lsls	r2, r2, #1
 800152c:	50a9      	str	r1, [r5, r2]
 800152e:	3204      	adds	r2, #4
 8001530:	50ab      	str	r3, [r5, r2]
 8001532:	2390      	movs	r3, #144	; 0x90
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	58c2      	ldr	r2, [r0, r3]
 8001538:	3b20      	subs	r3, #32
 800153a:	421a      	tst	r2, r3
 800153c:	d105      	bne.n	800154a <inv_process_9x_sensor_fusion_cb+0x32>
 800153e:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8001540:	421a      	tst	r2, r3
 8001542:	d02b      	beq.n	800159c <inv_process_9x_sensor_fusion_cb+0x84>
 8001544:	6f42      	ldr	r2, [r0, #116]	; 0x74
 8001546:	421a      	tst	r2, r3
 8001548:	d028      	beq.n	800159c <inv_process_9x_sensor_fusion_cb+0x84>
 800154a:	239a      	movs	r3, #154	; 0x9a
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	58eb      	ldr	r3, [r5, r3]
 8001550:	1c04      	adds	r4, r0, #0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d010      	beq.n	8001578 <inv_process_9x_sensor_fusion_cb+0x60>
 8001556:	22c4      	movs	r2, #196	; 0xc4
 8001558:	23c0      	movs	r3, #192	; 0xc0
 800155a:	21fa      	movs	r1, #250	; 0xfa
 800155c:	58c3      	ldr	r3, [r0, r3]
 800155e:	5880      	ldr	r0, [r0, r2]
 8001560:	0089      	lsls	r1, r1, #2
 8001562:	1a18      	subs	r0, r3, r0
 8001564:	f001 fd92 	bl	800308c <__udivsi3>
 8001568:	2398      	movs	r3, #152	; 0x98
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	50e8      	str	r0, [r5, r3]
 800156e:	1c20      	adds	r0, r4, #0
 8001570:	f7ff fde6 	bl	8001140 <inv_perform_9x_fusion>
 8001574:	2000      	movs	r0, #0
 8001576:	bd70      	pop	{r4, r5, r6, pc}
 8001578:	22b0      	movs	r2, #176	; 0xb0
 800157a:	490f      	ldr	r1, [pc, #60]	; (80015b8 <inv_process_9x_sensor_fusion_cb+0xa0>)
 800157c:	5882      	ldr	r2, [r0, r2]
 800157e:	428a      	cmp	r2, r1
 8001580:	dc14      	bgt.n	80015ac <inv_process_9x_sensor_fusion_cb+0x94>
 8001582:	2096      	movs	r0, #150	; 0x96
 8001584:	0040      	lsls	r0, r0, #1
 8001586:	582e      	ldr	r6, [r5, r0]
 8001588:	46b4      	mov	ip, r6
 800158a:	4462      	add	r2, ip
 800158c:	502a      	str	r2, [r5, r0]
 800158e:	428a      	cmp	r2, r1
 8001590:	ddf0      	ble.n	8001574 <inv_process_9x_sensor_fusion_cb+0x5c>
 8001592:	2198      	movs	r1, #152	; 0x98
 8001594:	0049      	lsls	r1, r1, #1
 8001596:	506a      	str	r2, [r5, r1]
 8001598:	502b      	str	r3, [r5, r0]
 800159a:	e7e8      	b.n	800156e <inv_process_9x_sensor_fusion_cb+0x56>
 800159c:	2390      	movs	r3, #144	; 0x90
 800159e:	2203      	movs	r2, #3
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	50ea      	str	r2, [r5, r3]
 80015a4:	2200      	movs	r2, #0
 80015a6:	3304      	adds	r3, #4
 80015a8:	50ea      	str	r2, [r5, r3]
 80015aa:	e7e3      	b.n	8001574 <inv_process_9x_sensor_fusion_cb+0x5c>
 80015ac:	2398      	movs	r3, #152	; 0x98
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	50ea      	str	r2, [r5, r3]
 80015b2:	e7dc      	b.n	800156e <inv_process_9x_sensor_fusion_cb+0x56>
 80015b4:	20001008 	.word	0x20001008
 80015b8:	00004e1f 	.word	0x00004e1f

080015bc <inv_init_9x_fusion>:
 80015bc:	229c      	movs	r2, #156	; 0x9c
 80015be:	b510      	push	{r4, lr}
 80015c0:	4c0d      	ldr	r4, [pc, #52]	; (80015f8 <inv_init_9x_fusion+0x3c>)
 80015c2:	2100      	movs	r1, #0
 80015c4:	1c20      	adds	r0, r4, #0
 80015c6:	0052      	lsls	r2, r2, #1
 80015c8:	f010 fcad 	bl	8011f26 <memset>
 80015cc:	2380      	movs	r3, #128	; 0x80
 80015ce:	22fc      	movs	r2, #252	; 0xfc
 80015d0:	1c20      	adds	r0, r4, #0
 80015d2:	05db      	lsls	r3, r3, #23
 80015d4:	50a3      	str	r3, [r4, r2]
 80015d6:	30a8      	adds	r0, #168	; 0xa8
 80015d8:	3a54      	subs	r2, #84	; 0x54
 80015da:	2100      	movs	r1, #0
 80015dc:	50a3      	str	r3, [r4, r2]
 80015de:	f00d fed5 	bl	800f38c <inv_set_compass_correction>
 80015e2:	22fa      	movs	r2, #250	; 0xfa
 80015e4:	238e      	movs	r3, #142	; 0x8e
 80015e6:	0092      	lsls	r2, r2, #2
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	50e2      	str	r2, [r4, r3]
 80015ec:	22fe      	movs	r2, #254	; 0xfe
 80015ee:	3b30      	subs	r3, #48	; 0x30
 80015f0:	0592      	lsls	r2, r2, #22
 80015f2:	50e2      	str	r2, [r4, r3]
 80015f4:	bd10      	pop	{r4, pc}
 80015f6:	46c0      	nop			; (mov r8, r8)
 80015f8:	20001008 	.word	0x20001008

080015fc <inv_9x_fusion_set_mag_fb>:
 80015fc:	23ec      	movs	r3, #236	; 0xec
 80015fe:	4a02      	ldr	r2, [pc, #8]	; (8001608 <inv_9x_fusion_set_mag_fb+0xc>)
 8001600:	50d0      	str	r0, [r2, r3]
 8001602:	2000      	movs	r0, #0
 8001604:	4770      	bx	lr
 8001606:	46c0      	nop			; (mov r8, r8)
 8001608:	20001008 	.word	0x20001008

0800160c <inv_9x_fusion_enable_jitter_reduction>:
 800160c:	2394      	movs	r3, #148	; 0x94
 800160e:	4a02      	ldr	r2, [pc, #8]	; (8001618 <inv_9x_fusion_enable_jitter_reduction+0xc>)
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	50d0      	str	r0, [r2, r3]
 8001614:	2000      	movs	r0, #0
 8001616:	4770      	bx	lr
 8001618:	20001008 	.word	0x20001008

0800161c <inv_9x_fusion_use_timestamps>:
 800161c:	239a      	movs	r3, #154	; 0x9a
 800161e:	4a02      	ldr	r2, [pc, #8]	; (8001628 <inv_9x_fusion_use_timestamps+0xc>)
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	50d0      	str	r0, [r2, r3]
 8001624:	2000      	movs	r0, #0
 8001626:	4770      	bx	lr
 8001628:	20001008 	.word	0x20001008

0800162c <inv_stop_9x_sensor_fusion>:
 800162c:	b508      	push	{r3, lr}
 800162e:	4802      	ldr	r0, [pc, #8]	; (8001638 <inv_stop_9x_sensor_fusion+0xc>)
 8001630:	f009 fa50 	bl	800aad4 <inv_unregister_data_cb>
 8001634:	bd08      	pop	{r3, pc}
 8001636:	46c0      	nop			; (mov r8, r8)
 8001638:	08001519 	.word	0x08001519

0800163c <inv_enable_9x_sensor_fusion>:
 800163c:	b508      	push	{r3, lr}
 800163e:	f7ff ffbd 	bl	80015bc <inv_init_9x_fusion>
 8001642:	2194      	movs	r1, #148	; 0x94
 8001644:	2200      	movs	r2, #0
 8001646:	4b04      	ldr	r3, [pc, #16]	; (8001658 <inv_enable_9x_sensor_fusion+0x1c>)
 8001648:	0049      	lsls	r1, r1, #1
 800164a:	505a      	str	r2, [r3, r1]
 800164c:	4803      	ldr	r0, [pc, #12]	; (800165c <inv_enable_9x_sensor_fusion+0x20>)
 800164e:	310c      	adds	r1, #12
 8001650:	505a      	str	r2, [r3, r1]
 8001652:	f00e f8f3 	bl	800f83c <inv_register_mpl_start_notification>
 8001656:	bd08      	pop	{r3, pc}
 8001658:	20001008 	.word	0x20001008
 800165c:	08000f31 	.word	0x08000f31

08001660 <inv_disable_9x_sensor_fusion>:
 8001660:	b508      	push	{r3, lr}
 8001662:	4802      	ldr	r0, [pc, #8]	; (800166c <inv_disable_9x_sensor_fusion+0xc>)
 8001664:	f00e f8aa 	bl	800f7bc <inv_unregister_mpl_start_notification>
 8001668:	bd08      	pop	{r3, pc}
 800166a:	46c0      	nop			; (mov r8, r8)
 800166c:	08000f31 	.word	0x08000f31

08001670 <inv_start_gyro_tc>:
 8001670:	b508      	push	{r3, lr}
 8001672:	4803      	ldr	r0, [pc, #12]	; (8001680 <inv_start_gyro_tc+0x10>)
 8001674:	2196      	movs	r1, #150	; 0x96
 8001676:	2208      	movs	r2, #8
 8001678:	f009 f982 	bl	800a980 <inv_register_data_cb>
 800167c:	bd08      	pop	{r3, pc}
 800167e:	46c0      	nop			; (mov r8, r8)
 8001680:	08001685 	.word	0x08001685

08001684 <inv_gtc_data_cb>:
 8001684:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001686:	4644      	mov	r4, r8
 8001688:	465f      	mov	r7, fp
 800168a:	4656      	mov	r6, sl
 800168c:	464d      	mov	r5, r9
 800168e:	b4f0      	push	{r4, r5, r6, r7}
 8001690:	b0b9      	sub	sp, #228	; 0xe4
 8001692:	1c04      	adds	r4, r0, #0
 8001694:	a927      	add	r1, sp, #156	; 0x9c
 8001696:	a829      	add	r0, sp, #164	; 0xa4
 8001698:	f009 f852 	bl	800a740 <inv_get_gyro_bias>
 800169c:	a828      	add	r0, sp, #160	; 0xa0
 800169e:	f00d feb3 	bl	800f408 <inv_get_motion_state>
 80016a2:	2802      	cmp	r0, #2
 80016a4:	d012      	beq.n	80016cc <inv_gtc_data_cb+0x48>
 80016a6:	23e4      	movs	r3, #228	; 0xe4
 80016a8:	4db4      	ldr	r5, [pc, #720]	; (800197c <inv_gtc_data_cb+0x2f8>)
 80016aa:	58e4      	ldr	r4, [r4, r3]
 80016ac:	33cc      	adds	r3, #204	; 0xcc
 80016ae:	5ceb      	ldrb	r3, [r5, r3]
 80016b0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d002      	beq.n	80016bc <inv_gtc_data_cb+0x38>
 80016b6:	1aa4      	subs	r4, r4, r2
 80016b8:	d000      	beq.n	80016bc <inv_gtc_data_cb+0x38>
 80016ba:	e128      	b.n	800190e <inv_gtc_data_cb+0x28a>
 80016bc:	2000      	movs	r0, #0
 80016be:	b039      	add	sp, #228	; 0xe4
 80016c0:	bc3c      	pop	{r2, r3, r4, r5}
 80016c2:	4690      	mov	r8, r2
 80016c4:	4699      	mov	r9, r3
 80016c6:	46a2      	mov	sl, r4
 80016c8:	46ab      	mov	fp, r5
 80016ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80016ce:	2b03      	cmp	r3, #3
 80016d0:	d1f4      	bne.n	80016bc <inv_gtc_data_cb+0x38>
 80016d2:	f009 f81d 	bl	800a710 <inv_get_gyro_bias_tc_set>
 80016d6:	2800      	cmp	r0, #0
 80016d8:	d0f0      	beq.n	80016bc <inv_gtc_data_cb+0x38>
 80016da:	4ba8      	ldr	r3, [pc, #672]	; (800197c <inv_gtc_data_cb+0x2f8>)
 80016dc:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 80016de:	4698      	mov	r8, r3
 80016e0:	23da      	movs	r3, #218	; 0xda
 80016e2:	4642      	mov	r2, r8
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	58d0      	ldr	r0, [r2, r3]
 80016e8:	3304      	adds	r3, #4
 80016ea:	58d3      	ldr	r3, [r2, r3]
 80016ec:	1a34      	subs	r4, r6, r0
 80016ee:	2105      	movs	r1, #5
 80016f0:	1a18      	subs	r0, r3, r0
 80016f2:	f001 fd55 	bl	80031a0 <__divsi3>
 80016f6:	1c01      	adds	r1, r0, #0
 80016f8:	1c20      	adds	r0, r4, #0
 80016fa:	f001 fd51 	bl	80031a0 <__divsi3>
 80016fe:	b2c3      	uxtb	r3, r0
 8001700:	2b04      	cmp	r3, #4
 8001702:	d8db      	bhi.n	80016bc <inv_gtc_data_cb+0x38>
 8001704:	24ff      	movs	r4, #255	; 0xff
 8001706:	2554      	movs	r5, #84	; 0x54
 8001708:	4643      	mov	r3, r8
 800170a:	4004      	ands	r4, r0
 800170c:	4365      	muls	r5, r4
 800170e:	195f      	adds	r7, r3, r5
 8001710:	1c3a      	adds	r2, r7, #0
 8001712:	3250      	adds	r2, #80	; 0x50
 8001714:	7813      	ldrb	r3, [r2, #0]
 8001716:	2b05      	cmp	r3, #5
 8001718:	d100      	bne.n	800171c <inv_gtc_data_cb+0x98>
 800171a:	e1d3      	b.n	8001ac4 <inv_gtc_data_cb+0x440>
 800171c:	1c59      	adds	r1, r3, #1
 800171e:	7011      	strb	r1, [r2, #0]
 8001720:	0062      	lsls	r2, r4, #1
 8001722:	1914      	adds	r4, r2, r4
 8001724:	00e2      	lsls	r2, r4, #3
 8001726:	1b14      	subs	r4, r2, r4
 8001728:	18e3      	adds	r3, r4, r3
 800172a:	1c1a      	adds	r2, r3, #0
 800172c:	4641      	mov	r1, r8
 800172e:	320e      	adds	r2, #14
 8001730:	0092      	lsls	r2, r2, #2
 8001732:	4442      	add	r2, r8
 8001734:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8001736:	6056      	str	r6, [r2, #4]
 8001738:	009a      	lsls	r2, r3, #2
 800173a:	5088      	str	r0, [r1, r2]
 800173c:	1d1a      	adds	r2, r3, #4
 800173e:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8001740:	0092      	lsls	r2, r2, #2
 8001742:	4442      	add	r2, r8
 8001744:	6051      	str	r1, [r2, #4]
 8001746:	4642      	mov	r2, r8
 8001748:	330a      	adds	r3, #10
 800174a:	992b      	ldr	r1, [sp, #172]	; 0xac
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	50d1      	str	r1, [r2, r3]
 8001750:	2300      	movs	r3, #0
 8001752:	932c      	str	r3, [sp, #176]	; 0xb0
 8001754:	932d      	str	r3, [sp, #180]	; 0xb4
 8001756:	932e      	str	r3, [sp, #184]	; 0xb8
 8001758:	932f      	str	r3, [sp, #188]	; 0xbc
 800175a:	9330      	str	r3, [sp, #192]	; 0xc0
 800175c:	9331      	str	r3, [sp, #196]	; 0xc4
 800175e:	9332      	str	r3, [sp, #200]	; 0xc8
 8001760:	9333      	str	r3, [sp, #204]	; 0xcc
 8001762:	9334      	str	r3, [sp, #208]	; 0xd0
 8001764:	9335      	str	r3, [sp, #212]	; 0xd4
 8001766:	9336      	str	r3, [sp, #216]	; 0xd8
 8001768:	9337      	str	r3, [sp, #220]	; 0xdc
 800176a:	33c1      	adds	r3, #193	; 0xc1
 800176c:	33ff      	adds	r3, #255	; 0xff
 800176e:	5cd3      	ldrb	r3, [r2, r3]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d1a3      	bne.n	80016bc <inv_gtc_data_cb+0x38>
 8001774:	33b8      	adds	r3, #184	; 0xb8
 8001776:	33ff      	adds	r3, #255	; 0xff
 8001778:	58d3      	ldr	r3, [r2, r3]
 800177a:	921a      	str	r2, [sp, #104]	; 0x68
 800177c:	469a      	mov	sl, r3
 800177e:	23da      	movs	r3, #218	; 0xda
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	58d3      	ldr	r3, [r2, r3]
 8001784:	931c      	str	r3, [sp, #112]	; 0x70
 8001786:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8001788:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 800178a:	9312      	str	r3, [sp, #72]	; 0x48
 800178c:	9413      	str	r4, [sp, #76]	; 0x4c
 800178e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8001790:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 8001792:	9310      	str	r3, [sp, #64]	; 0x40
 8001794:	9411      	str	r4, [sp, #68]	; 0x44
 8001796:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8001798:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 800179a:	930e      	str	r3, [sp, #56]	; 0x38
 800179c:	940f      	str	r4, [sp, #60]	; 0x3c
 800179e:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80017a0:	9c33      	ldr	r4, [sp, #204]	; 0xcc
 80017a2:	9314      	str	r3, [sp, #80]	; 0x50
 80017a4:	9415      	str	r4, [sp, #84]	; 0x54
 80017a6:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80017a8:	9c35      	ldr	r4, [sp, #212]	; 0xd4
 80017aa:	930c      	str	r3, [sp, #48]	; 0x30
 80017ac:	940d      	str	r4, [sp, #52]	; 0x34
 80017ae:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80017b0:	9c37      	ldr	r4, [sp, #220]	; 0xdc
 80017b2:	930a      	str	r3, [sp, #40]	; 0x28
 80017b4:	940b      	str	r4, [sp, #44]	; 0x2c
 80017b6:	2300      	movs	r3, #0
 80017b8:	2400      	movs	r4, #0
 80017ba:	469b      	mov	fp, r3
 80017bc:	2300      	movs	r3, #0
 80017be:	9316      	str	r3, [sp, #88]	; 0x58
 80017c0:	9417      	str	r4, [sp, #92]	; 0x5c
 80017c2:	9324      	str	r3, [sp, #144]	; 0x90
 80017c4:	9318      	str	r3, [sp, #96]	; 0x60
 80017c6:	4653      	mov	r3, sl
 80017c8:	9319      	str	r3, [sp, #100]	; 0x64
 80017ca:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80017cc:	3350      	adds	r3, #80	; 0x50
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	931d      	str	r3, [sp, #116]	; 0x74
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d100      	bne.n	80017d8 <inv_gtc_data_cb+0x154>
 80017d6:	e0df      	b.n	8001998 <inv_gtc_data_cb+0x314>
 80017d8:	445b      	add	r3, fp
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	4443      	add	r3, r8
 80017de:	4699      	mov	r9, r3
 80017e0:	465b      	mov	r3, fp
 80017e2:	9325      	str	r3, [sp, #148]	; 0x94
 80017e4:	464b      	mov	r3, r9
 80017e6:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80017e8:	931b      	str	r3, [sp, #108]	; 0x6c
 80017ea:	46aa      	mov	sl, r5
 80017ec:	e00b      	b.n	8001806 <inv_gtc_data_cb+0x182>
 80017ee:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80017f0:	454b      	cmp	r3, r9
 80017f2:	da01      	bge.n	80017f8 <inv_gtc_data_cb+0x174>
 80017f4:	464b      	mov	r3, r9
 80017f6:	931c      	str	r3, [sp, #112]	; 0x70
 80017f8:	2304      	movs	r3, #4
 80017fa:	469c      	mov	ip, r3
 80017fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80017fe:	44e2      	add	sl, ip
 8001800:	459a      	cmp	sl, r3
 8001802:	d100      	bne.n	8001806 <inv_gtc_data_cb+0x182>
 8001804:	e0bc      	b.n	8001980 <inv_gtc_data_cb+0x2fc>
 8001806:	4653      	mov	r3, sl
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	9304      	str	r3, [sp, #16]
 800180c:	4653      	mov	r3, sl
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	17db      	asrs	r3, r3, #31
 8001812:	9305      	str	r3, [sp, #20]
 8001814:	9804      	ldr	r0, [sp, #16]
 8001816:	9905      	ldr	r1, [sp, #20]
 8001818:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800181a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800181c:	1812      	adds	r2, r2, r0
 800181e:	414b      	adcs	r3, r1
 8001820:	9212      	str	r2, [sp, #72]	; 0x48
 8001822:	9313      	str	r3, [sp, #76]	; 0x4c
 8001824:	4653      	mov	r3, sl
 8001826:	695b      	ldr	r3, [r3, #20]
 8001828:	9306      	str	r3, [sp, #24]
 800182a:	4653      	mov	r3, sl
 800182c:	695b      	ldr	r3, [r3, #20]
 800182e:	17db      	asrs	r3, r3, #31
 8001830:	9307      	str	r3, [sp, #28]
 8001832:	9806      	ldr	r0, [sp, #24]
 8001834:	9907      	ldr	r1, [sp, #28]
 8001836:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8001838:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800183a:	1812      	adds	r2, r2, r0
 800183c:	414b      	adcs	r3, r1
 800183e:	9210      	str	r2, [sp, #64]	; 0x40
 8001840:	9311      	str	r3, [sp, #68]	; 0x44
 8001842:	4653      	mov	r3, sl
 8001844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001846:	9308      	str	r3, [sp, #32]
 8001848:	4653      	mov	r3, sl
 800184a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800184c:	17db      	asrs	r3, r3, #31
 800184e:	9309      	str	r3, [sp, #36]	; 0x24
 8001850:	9808      	ldr	r0, [sp, #32]
 8001852:	9909      	ldr	r1, [sp, #36]	; 0x24
 8001854:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001856:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001858:	1812      	adds	r2, r2, r0
 800185a:	414b      	adcs	r3, r1
 800185c:	9804      	ldr	r0, [sp, #16]
 800185e:	9905      	ldr	r1, [sp, #20]
 8001860:	920e      	str	r2, [sp, #56]	; 0x38
 8001862:	930f      	str	r3, [sp, #60]	; 0x3c
 8001864:	4653      	mov	r3, sl
 8001866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001868:	4699      	mov	r9, r3
 800186a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800186c:	464a      	mov	r2, r9
 800186e:	444b      	add	r3, r9
 8001870:	9318      	str	r3, [sp, #96]	; 0x60
 8001872:	464b      	mov	r3, r9
 8001874:	17db      	asrs	r3, r3, #31
 8001876:	469b      	mov	fp, r3
 8001878:	f001 fe1a 	bl	80034b0 <__aeabi_lmul>
 800187c:	040b      	lsls	r3, r1, #16
 800187e:	0c02      	lsrs	r2, r0, #16
 8001880:	431a      	orrs	r2, r3
 8001882:	140b      	asrs	r3, r1, #16
 8001884:	9200      	str	r2, [sp, #0]
 8001886:	9301      	str	r3, [sp, #4]
 8001888:	9800      	ldr	r0, [sp, #0]
 800188a:	9901      	ldr	r1, [sp, #4]
 800188c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800188e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8001890:	1812      	adds	r2, r2, r0
 8001892:	414b      	adcs	r3, r1
 8001894:	9806      	ldr	r0, [sp, #24]
 8001896:	9907      	ldr	r1, [sp, #28]
 8001898:	9214      	str	r2, [sp, #80]	; 0x50
 800189a:	9315      	str	r3, [sp, #84]	; 0x54
 800189c:	464a      	mov	r2, r9
 800189e:	465b      	mov	r3, fp
 80018a0:	f001 fe06 	bl	80034b0 <__aeabi_lmul>
 80018a4:	040b      	lsls	r3, r1, #16
 80018a6:	0c02      	lsrs	r2, r0, #16
 80018a8:	431a      	orrs	r2, r3
 80018aa:	140b      	asrs	r3, r1, #16
 80018ac:	9202      	str	r2, [sp, #8]
 80018ae:	9303      	str	r3, [sp, #12]
 80018b0:	9802      	ldr	r0, [sp, #8]
 80018b2:	9903      	ldr	r1, [sp, #12]
 80018b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80018b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80018b8:	1812      	adds	r2, r2, r0
 80018ba:	414b      	adcs	r3, r1
 80018bc:	9808      	ldr	r0, [sp, #32]
 80018be:	9909      	ldr	r1, [sp, #36]	; 0x24
 80018c0:	920c      	str	r2, [sp, #48]	; 0x30
 80018c2:	930d      	str	r3, [sp, #52]	; 0x34
 80018c4:	464a      	mov	r2, r9
 80018c6:	465b      	mov	r3, fp
 80018c8:	f001 fdf2 	bl	80034b0 <__aeabi_lmul>
 80018cc:	040b      	lsls	r3, r1, #16
 80018ce:	0c06      	lsrs	r6, r0, #16
 80018d0:	431e      	orrs	r6, r3
 80018d2:	140f      	asrs	r7, r1, #16
 80018d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80018d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80018d8:	1992      	adds	r2, r2, r6
 80018da:	417b      	adcs	r3, r7
 80018dc:	4648      	mov	r0, r9
 80018de:	920a      	str	r2, [sp, #40]	; 0x28
 80018e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80018e2:	4659      	mov	r1, fp
 80018e4:	464a      	mov	r2, r9
 80018e6:	465b      	mov	r3, fp
 80018e8:	f001 fde2 	bl	80034b0 <__aeabi_lmul>
 80018ec:	040b      	lsls	r3, r1, #16
 80018ee:	0c04      	lsrs	r4, r0, #16
 80018f0:	431c      	orrs	r4, r3
 80018f2:	140d      	asrs	r5, r1, #16
 80018f4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80018f6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80018f8:	1912      	adds	r2, r2, r4
 80018fa:	416b      	adcs	r3, r5
 80018fc:	9216      	str	r2, [sp, #88]	; 0x58
 80018fe:	9317      	str	r3, [sp, #92]	; 0x5c
 8001900:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8001902:	4599      	cmp	r9, r3
 8001904:	db00      	blt.n	8001908 <inv_gtc_data_cb+0x284>
 8001906:	e772      	b.n	80017ee <inv_gtc_data_cb+0x16a>
 8001908:	464b      	mov	r3, r9
 800190a:	9319      	str	r3, [sp, #100]	; 0x64
 800190c:	e774      	b.n	80017f8 <inv_gtc_data_cb+0x174>
 800190e:	23d2      	movs	r3, #210	; 0xd2
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	58ea      	ldr	r2, [r5, r3]
 8001914:	17e6      	asrs	r6, r4, #31
 8001916:	17d3      	asrs	r3, r2, #31
 8001918:	1c20      	adds	r0, r4, #0
 800191a:	1c31      	adds	r1, r6, #0
 800191c:	f001 fdc8 	bl	80034b0 <__aeabi_lmul>
 8001920:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8001922:	0409      	lsls	r1, r1, #16
 8001924:	469c      	mov	ip, r3
 8001926:	9300      	str	r3, [sp, #0]
 8001928:	23d4      	movs	r3, #212	; 0xd4
 800192a:	0c00      	lsrs	r0, r0, #16
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	58ea      	ldr	r2, [r5, r3]
 8001930:	4308      	orrs	r0, r1
 8001932:	4460      	add	r0, ip
 8001934:	9029      	str	r0, [sp, #164]	; 0xa4
 8001936:	17d3      	asrs	r3, r2, #31
 8001938:	1c20      	adds	r0, r4, #0
 800193a:	1c31      	adds	r1, r6, #0
 800193c:	f001 fdb8 	bl	80034b0 <__aeabi_lmul>
 8001940:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8001942:	0409      	lsls	r1, r1, #16
 8001944:	469c      	mov	ip, r3
 8001946:	9300      	str	r3, [sp, #0]
 8001948:	23d6      	movs	r3, #214	; 0xd6
 800194a:	0c00      	lsrs	r0, r0, #16
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	58ea      	ldr	r2, [r5, r3]
 8001950:	4308      	orrs	r0, r1
 8001952:	4460      	add	r0, ip
 8001954:	902a      	str	r0, [sp, #168]	; 0xa8
 8001956:	17d3      	asrs	r3, r2, #31
 8001958:	1c20      	adds	r0, r4, #0
 800195a:	1c31      	adds	r1, r6, #0
 800195c:	f001 fda8 	bl	80034b0 <__aeabi_lmul>
 8001960:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8001962:	0409      	lsls	r1, r1, #16
 8001964:	469c      	mov	ip, r3
 8001966:	0c00      	lsrs	r0, r0, #16
 8001968:	4308      	orrs	r0, r1
 800196a:	4460      	add	r0, ip
 800196c:	902b      	str	r0, [sp, #172]	; 0xac
 800196e:	2103      	movs	r1, #3
 8001970:	a829      	add	r0, sp, #164	; 0xa4
 8001972:	9300      	str	r3, [sp, #0]
 8001974:	f008 fe80 	bl	800a678 <inv_set_gyro_bias>
 8001978:	e6a0      	b.n	80016bc <inv_gtc_data_cb+0x38>
 800197a:	46c0      	nop			; (mov r8, r8)
 800197c:	20000288 	.word	0x20000288
 8001980:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8001982:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8001984:	4694      	mov	ip, r2
 8001986:	469b      	mov	fp, r3
 8001988:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800198a:	9620      	str	r6, [sp, #128]	; 0x80
 800198c:	9721      	str	r7, [sp, #132]	; 0x84
 800198e:	4463      	add	r3, ip
 8001990:	9422      	str	r4, [sp, #136]	; 0x88
 8001992:	9523      	str	r5, [sp, #140]	; 0x8c
 8001994:	b2db      	uxtb	r3, r3
 8001996:	9324      	str	r3, [sp, #144]	; 0x90
 8001998:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800199a:	3354      	adds	r3, #84	; 0x54
 800199c:	931a      	str	r3, [sp, #104]	; 0x68
 800199e:	2315      	movs	r3, #21
 80019a0:	469c      	mov	ip, r3
 80019a2:	44e3      	add	fp, ip
 80019a4:	465b      	mov	r3, fp
 80019a6:	2b69      	cmp	r3, #105	; 0x69
 80019a8:	d000      	beq.n	80019ac <inv_gtc_data_cb+0x328>
 80019aa:	e70e      	b.n	80017ca <inv_gtc_data_cb+0x146>
 80019ac:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80019ae:	4641      	mov	r1, r8
 80019b0:	4699      	mov	r9, r3
 80019b2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80019b4:	469a      	mov	sl, r3
 80019b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80019b8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80019ba:	4652      	mov	r2, sl
 80019bc:	932c      	str	r3, [sp, #176]	; 0xb0
 80019be:	942d      	str	r4, [sp, #180]	; 0xb4
 80019c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80019c2:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80019c4:	932e      	str	r3, [sp, #184]	; 0xb8
 80019c6:	942f      	str	r4, [sp, #188]	; 0xbc
 80019c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80019ca:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80019cc:	9330      	str	r3, [sp, #192]	; 0xc0
 80019ce:	9431      	str	r4, [sp, #196]	; 0xc4
 80019d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80019d2:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80019d4:	9332      	str	r3, [sp, #200]	; 0xc8
 80019d6:	9433      	str	r4, [sp, #204]	; 0xcc
 80019d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80019da:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80019dc:	9334      	str	r3, [sp, #208]	; 0xd0
 80019de:	9435      	str	r4, [sp, #212]	; 0xd4
 80019e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80019e2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80019e4:	9336      	str	r3, [sp, #216]	; 0xd8
 80019e6:	9437      	str	r4, [sp, #220]	; 0xdc
 80019e8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80019ea:	1a9b      	subs	r3, r3, r2
 80019ec:	22de      	movs	r2, #222	; 0xde
 80019ee:	0052      	lsls	r2, r2, #1
 80019f0:	588a      	ldr	r2, [r1, r2]
 80019f2:	4293      	cmp	r3, r2
 80019f4:	da00      	bge.n	80019f8 <inv_gtc_data_cb+0x374>
 80019f6:	e661      	b.n	80016bc <inv_gtc_data_cb+0x38>
 80019f8:	9816      	ldr	r0, [sp, #88]	; 0x58
 80019fa:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80019fc:	464b      	mov	r3, r9
 80019fe:	17db      	asrs	r3, r3, #31
 8001a00:	1c1e      	adds	r6, r3, #0
 8001a02:	9304      	str	r3, [sp, #16]
 8001a04:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8001a06:	2300      	movs	r3, #0
 8001a08:	f001 fd52 	bl	80034b0 <__aeabi_lmul>
 8001a0c:	1c04      	adds	r4, r0, #0
 8001a0e:	1c0d      	adds	r5, r1, #0
 8001a10:	1c33      	adds	r3, r6, #0
 8001a12:	1c31      	adds	r1, r6, #0
 8001a14:	4648      	mov	r0, r9
 8001a16:	464a      	mov	r2, r9
 8001a18:	9400      	str	r4, [sp, #0]
 8001a1a:	9501      	str	r5, [sp, #4]
 8001a1c:	f001 fd48 	bl	80034b0 <__aeabi_lmul>
 8001a20:	040b      	lsls	r3, r1, #16
 8001a22:	0c06      	lsrs	r6, r0, #16
 8001a24:	431e      	orrs	r6, r3
 8001a26:	23d2      	movs	r3, #210	; 0xd2
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	4443      	add	r3, r8
 8001a2c:	469b      	mov	fp, r3
 8001a2e:	2300      	movs	r3, #0
 8001a30:	469a      	mov	sl, r3
 8001a32:	1c23      	adds	r3, r4, #0
 8001a34:	1c2c      	adds	r4, r5, #0
 8001a36:	140f      	asrs	r7, r1, #16
 8001a38:	1b9b      	subs	r3, r3, r6
 8001a3a:	41bc      	sbcs	r4, r7
 8001a3c:	9602      	str	r6, [sp, #8]
 8001a3e:	9703      	str	r7, [sp, #12]
 8001a40:	9306      	str	r3, [sp, #24]
 8001a42:	9407      	str	r4, [sp, #28]
 8001a44:	ab32      	add	r3, sp, #200	; 0xc8
 8001a46:	4453      	add	r3, sl
 8001a48:	6818      	ldr	r0, [r3, #0]
 8001a4a:	6859      	ldr	r1, [r3, #4]
 8001a4c:	ab2c      	add	r3, sp, #176	; 0xb0
 8001a4e:	4453      	add	r3, sl
 8001a50:	681e      	ldr	r6, [r3, #0]
 8001a52:	685f      	ldr	r7, [r3, #4]
 8001a54:	9a02      	ldr	r2, [sp, #8]
 8001a56:	9b00      	ldr	r3, [sp, #0]
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d02e      	beq.n	8001aba <inv_gtc_data_cb+0x436>
 8001a5c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8001a5e:	2300      	movs	r3, #0
 8001a60:	f001 fd26 	bl	80034b0 <__aeabi_lmul>
 8001a64:	464a      	mov	r2, r9
 8001a66:	1c04      	adds	r4, r0, #0
 8001a68:	1c0d      	adds	r5, r1, #0
 8001a6a:	9b04      	ldr	r3, [sp, #16]
 8001a6c:	1c30      	adds	r0, r6, #0
 8001a6e:	1c39      	adds	r1, r7, #0
 8001a70:	f001 fd1e 	bl	80034b0 <__aeabi_lmul>
 8001a74:	040b      	lsls	r3, r1, #16
 8001a76:	0c02      	lsrs	r2, r0, #16
 8001a78:	431a      	orrs	r2, r3
 8001a7a:	140b      	asrs	r3, r1, #16
 8001a7c:	921e      	str	r2, [sp, #120]	; 0x78
 8001a7e:	931f      	str	r3, [sp, #124]	; 0x7c
 8001a80:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8001a82:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8001a84:	1aa4      	subs	r4, r4, r2
 8001a86:	419d      	sbcs	r5, r3
 8001a88:	0c23      	lsrs	r3, r4, #16
 8001a8a:	0429      	lsls	r1, r5, #16
 8001a8c:	4319      	orrs	r1, r3
 8001a8e:	0420      	lsls	r0, r4, #16
 8001a90:	9a06      	ldr	r2, [sp, #24]
 8001a92:	9b07      	ldr	r3, [sp, #28]
 8001a94:	f001 fce8 	bl	8003468 <__aeabi_ldivmod>
 8001a98:	465b      	mov	r3, fp
 8001a9a:	6018      	str	r0, [r3, #0]
 8001a9c:	2308      	movs	r3, #8
 8001a9e:	469c      	mov	ip, r3
 8001aa0:	3b04      	subs	r3, #4
 8001aa2:	44e2      	add	sl, ip
 8001aa4:	469c      	mov	ip, r3
 8001aa6:	4653      	mov	r3, sl
 8001aa8:	44e3      	add	fp, ip
 8001aaa:	2b18      	cmp	r3, #24
 8001aac:	d1ca      	bne.n	8001a44 <inv_gtc_data_cb+0x3c0>
 8001aae:	2201      	movs	r2, #1
 8001ab0:	4641      	mov	r1, r8
 8001ab2:	3399      	adds	r3, #153	; 0x99
 8001ab4:	33ff      	adds	r3, #255	; 0xff
 8001ab6:	54ca      	strb	r2, [r1, r3]
 8001ab8:	e600      	b.n	80016bc <inv_gtc_data_cb+0x38>
 8001aba:	9b01      	ldr	r3, [sp, #4]
 8001abc:	9a03      	ldr	r2, [sp, #12]
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d1cc      	bne.n	8001a5c <inv_gtc_data_cb+0x3d8>
 8001ac2:	e7eb      	b.n	8001a9c <inv_gtc_data_cb+0x418>
 8001ac4:	4643      	mov	r3, r8
 8001ac6:	1958      	adds	r0, r3, r5
 8001ac8:	1959      	adds	r1, r3, r5
 8001aca:	3140      	adds	r1, #64	; 0x40
 8001acc:	2210      	movs	r2, #16
 8001ace:	303c      	adds	r0, #60	; 0x3c
 8001ad0:	f010 fa16 	bl	8011f00 <memmove>
 8001ad4:	1d29      	adds	r1, r5, #4
 8001ad6:	4441      	add	r1, r8
 8001ad8:	2210      	movs	r2, #16
 8001ada:	1c38      	adds	r0, r7, #0
 8001adc:	f010 fa10 	bl	8011f00 <memmove>
 8001ae0:	4643      	mov	r3, r8
 8001ae2:	1958      	adds	r0, r3, r5
 8001ae4:	1959      	adds	r1, r3, r5
 8001ae6:	3118      	adds	r1, #24
 8001ae8:	2210      	movs	r2, #16
 8001aea:	3014      	adds	r0, #20
 8001aec:	f010 fa08 	bl	8011f00 <memmove>
 8001af0:	1c28      	adds	r0, r5, #0
 8001af2:	1c29      	adds	r1, r5, #0
 8001af4:	3028      	adds	r0, #40	; 0x28
 8001af6:	312c      	adds	r1, #44	; 0x2c
 8001af8:	4440      	add	r0, r8
 8001afa:	4441      	add	r1, r8
 8001afc:	2210      	movs	r2, #16
 8001afe:	f010 f9ff 	bl	8011f00 <memmove>
 8001b02:	2304      	movs	r3, #4
 8001b04:	e60c      	b.n	8001720 <inv_gtc_data_cb+0x9c>
 8001b06:	46c0      	nop			; (mov r8, r8)

08001b08 <inv_gtc_store>:
 8001b08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b0a:	4a09      	ldr	r2, [pc, #36]	; (8001b30 <inv_gtc_store+0x28>)
 8001b0c:	b085      	sub	sp, #20
 8001b0e:	1c13      	adds	r3, r2, #0
 8001b10:	466c      	mov	r4, sp
 8001b12:	33a5      	adds	r3, #165	; 0xa5
 8001b14:	33ff      	adds	r3, #255	; 0xff
 8001b16:	cbe0      	ldmia	r3!, {r5, r6, r7}
 8001b18:	c4e0      	stmia	r4!, {r5, r6, r7}
 8001b1a:	23d8      	movs	r3, #216	; 0xd8
 8001b1c:	4669      	mov	r1, sp
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	5cd3      	ldrb	r3, [r2, r3]
 8001b22:	2210      	movs	r2, #16
 8001b24:	730b      	strb	r3, [r1, #12]
 8001b26:	f010 fa91 	bl	801204c <memcpy>
 8001b2a:	2000      	movs	r0, #0
 8001b2c:	b005      	add	sp, #20
 8001b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b30:	20000288 	.word	0x20000288

08001b34 <inv_gtc_load>:
 8001b34:	b570      	push	{r4, r5, r6, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	1c01      	adds	r1, r0, #0
 8001b3a:	2210      	movs	r2, #16
 8001b3c:	4668      	mov	r0, sp
 8001b3e:	f010 fa85 	bl	801204c <memcpy>
 8001b42:	4a07      	ldr	r2, [pc, #28]	; (8001b60 <inv_gtc_load+0x2c>)
 8001b44:	4669      	mov	r1, sp
 8001b46:	1c13      	adds	r3, r2, #0
 8001b48:	33a5      	adds	r3, #165	; 0xa5
 8001b4a:	466c      	mov	r4, sp
 8001b4c:	33ff      	adds	r3, #255	; 0xff
 8001b4e:	c961      	ldmia	r1!, {r0, r5, r6}
 8001b50:	c361      	stmia	r3!, {r0, r5, r6}
 8001b52:	23d8      	movs	r3, #216	; 0xd8
 8001b54:	2000      	movs	r0, #0
 8001b56:	7b21      	ldrb	r1, [r4, #12]
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	54d1      	strb	r1, [r2, r3]
 8001b5c:	b004      	add	sp, #16
 8001b5e:	bd70      	pop	{r4, r5, r6, pc}
 8001b60:	20000288 	.word	0x20000288

08001b64 <inv_init_gyro_ts>:
 8001b64:	22e2      	movs	r2, #226	; 0xe2
 8001b66:	b510      	push	{r4, lr}
 8001b68:	4c0b      	ldr	r4, [pc, #44]	; (8001b98 <inv_init_gyro_ts+0x34>)
 8001b6a:	2100      	movs	r1, #0
 8001b6c:	1c20      	adds	r0, r4, #0
 8001b6e:	0052      	lsls	r2, r2, #1
 8001b70:	f010 f9d9 	bl	8011f26 <memset>
 8001b74:	23da      	movs	r3, #218	; 0xda
 8001b76:	4a09      	ldr	r2, [pc, #36]	; (8001b9c <inv_init_gyro_ts+0x38>)
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	50e2      	str	r2, [r4, r3]
 8001b7c:	22aa      	movs	r2, #170	; 0xaa
 8001b7e:	3304      	adds	r3, #4
 8001b80:	03d2      	lsls	r2, r2, #15
 8001b82:	50e2      	str	r2, [r4, r3]
 8001b84:	22a0      	movs	r2, #160	; 0xa0
 8001b86:	3304      	adds	r3, #4
 8001b88:	02d2      	lsls	r2, r2, #11
 8001b8a:	50e2      	str	r2, [r4, r3]
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	3304      	adds	r3, #4
 8001b90:	2000      	movs	r0, #0
 8001b92:	54e2      	strb	r2, [r4, r3]
 8001b94:	bd10      	pop	{r4, pc}
 8001b96:	46c0      	nop			; (mov r8, r8)
 8001b98:	20000288 	.word	0x20000288
 8001b9c:	ffd80000 	.word	0xffd80000

08001ba0 <inv_set_gtc_max_temp>:
 8001ba0:	23dc      	movs	r3, #220	; 0xdc
 8001ba2:	4a02      	ldr	r2, [pc, #8]	; (8001bac <inv_set_gtc_max_temp+0xc>)
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	50d0      	str	r0, [r2, r3]
 8001ba8:	2000      	movs	r0, #0
 8001baa:	4770      	bx	lr
 8001bac:	20000288 	.word	0x20000288

08001bb0 <inv_set_gtc_min_temp>:
 8001bb0:	23da      	movs	r3, #218	; 0xda
 8001bb2:	4a02      	ldr	r2, [pc, #8]	; (8001bbc <inv_set_gtc_min_temp+0xc>)
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	50d0      	str	r0, [r2, r3]
 8001bb8:	2000      	movs	r0, #0
 8001bba:	4770      	bx	lr
 8001bbc:	20000288 	.word	0x20000288

08001bc0 <inv_set_gtc_min_diff>:
 8001bc0:	23de      	movs	r3, #222	; 0xde
 8001bc2:	4a02      	ldr	r2, [pc, #8]	; (8001bcc <inv_set_gtc_min_diff+0xc>)
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	50d0      	str	r0, [r2, r3]
 8001bc8:	2000      	movs	r0, #0
 8001bca:	4770      	bx	lr
 8001bcc:	20000288 	.word	0x20000288

08001bd0 <inv_get_gyro_ts>:
 8001bd0:	2800      	cmp	r0, #0
 8001bd2:	d00e      	beq.n	8001bf2 <inv_get_gyro_ts+0x22>
 8001bd4:	22d2      	movs	r2, #210	; 0xd2
 8001bd6:	4b08      	ldr	r3, [pc, #32]	; (8001bf8 <inv_get_gyro_ts+0x28>)
 8001bd8:	0052      	lsls	r2, r2, #1
 8001bda:	589a      	ldr	r2, [r3, r2]
 8001bdc:	6002      	str	r2, [r0, #0]
 8001bde:	22d4      	movs	r2, #212	; 0xd4
 8001be0:	0052      	lsls	r2, r2, #1
 8001be2:	589a      	ldr	r2, [r3, r2]
 8001be4:	6042      	str	r2, [r0, #4]
 8001be6:	22d6      	movs	r2, #214	; 0xd6
 8001be8:	0052      	lsls	r2, r2, #1
 8001bea:	589b      	ldr	r3, [r3, r2]
 8001bec:	6083      	str	r3, [r0, #8]
 8001bee:	2000      	movs	r0, #0
 8001bf0:	4770      	bx	lr
 8001bf2:	2016      	movs	r0, #22
 8001bf4:	e7fc      	b.n	8001bf0 <inv_get_gyro_ts+0x20>
 8001bf6:	46c0      	nop			; (mov r8, r8)
 8001bf8:	20000288 	.word	0x20000288

08001bfc <inv_set_gyro_ts>:
 8001bfc:	2024      	movs	r0, #36	; 0x24
 8001bfe:	4770      	bx	lr

08001c00 <inv_set_gtc_order>:
 8001c00:	2324      	movs	r3, #36	; 0x24
 8001c02:	2800      	cmp	r0, #0
 8001c04:	d101      	bne.n	8001c0a <inv_set_gtc_order+0xa>
 8001c06:	1c18      	adds	r0, r3, #0
 8001c08:	4770      	bx	lr
 8001c0a:	339d      	adds	r3, #157	; 0x9d
 8001c0c:	4a02      	ldr	r2, [pc, #8]	; (8001c18 <inv_set_gtc_order+0x18>)
 8001c0e:	33ff      	adds	r3, #255	; 0xff
 8001c10:	54d0      	strb	r0, [r2, r3]
 8001c12:	2300      	movs	r3, #0
 8001c14:	e7f7      	b.n	8001c06 <inv_set_gtc_order+0x6>
 8001c16:	46c0      	nop			; (mov r8, r8)
 8001c18:	20000288 	.word	0x20000288

08001c1c <inv_print_gtc_data>:
 8001c1c:	2000      	movs	r0, #0
 8001c1e:	4770      	bx	lr

08001c20 <inv_stop_gyro_tc>:
 8001c20:	b508      	push	{r3, lr}
 8001c22:	4802      	ldr	r0, [pc, #8]	; (8001c2c <inv_stop_gyro_tc+0xc>)
 8001c24:	f008 ff56 	bl	800aad4 <inv_unregister_data_cb>
 8001c28:	bd08      	pop	{r3, pc}
 8001c2a:	46c0      	nop			; (mov r8, r8)
 8001c2c:	08001685 	.word	0x08001685

08001c30 <inv_enable_gyro_tc>:
 8001c30:	b508      	push	{r3, lr}
 8001c32:	f7ff ff97 	bl	8001b64 <inv_init_gyro_ts>
 8001c36:	239a      	movs	r3, #154	; 0x9a
 8001c38:	480a      	ldr	r0, [pc, #40]	; (8001c64 <inv_enable_gyro_tc+0x34>)
 8001c3a:	490b      	ldr	r1, [pc, #44]	; (8001c68 <inv_enable_gyro_tc+0x38>)
 8001c3c:	2210      	movs	r2, #16
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	f00d fe54 	bl	800f8ec <inv_register_load_store>
 8001c44:	2800      	cmp	r0, #0
 8001c46:	d001      	beq.n	8001c4c <inv_enable_gyro_tc+0x1c>
 8001c48:	2001      	movs	r0, #1
 8001c4a:	bd08      	pop	{r3, pc}
 8001c4c:	4807      	ldr	r0, [pc, #28]	; (8001c6c <inv_enable_gyro_tc+0x3c>)
 8001c4e:	f00d fdf5 	bl	800f83c <inv_register_mpl_start_notification>
 8001c52:	2800      	cmp	r0, #0
 8001c54:	d1f8      	bne.n	8001c48 <inv_enable_gyro_tc+0x18>
 8001c56:	23b2      	movs	r3, #178	; 0xb2
 8001c58:	2101      	movs	r1, #1
 8001c5a:	4a05      	ldr	r2, [pc, #20]	; (8001c70 <inv_enable_gyro_tc+0x40>)
 8001c5c:	33ff      	adds	r3, #255	; 0xff
 8001c5e:	54d1      	strb	r1, [r2, r3]
 8001c60:	e7f3      	b.n	8001c4a <inv_enable_gyro_tc+0x1a>
 8001c62:	46c0      	nop			; (mov r8, r8)
 8001c64:	08001b35 	.word	0x08001b35
 8001c68:	08001b09 	.word	0x08001b09
 8001c6c:	08001671 	.word	0x08001671
 8001c70:	20000288 	.word	0x20000288

08001c74 <inv_disable_gyro_tc>:
 8001c74:	b538      	push	{r3, r4, r5, lr}
 8001c76:	24b2      	movs	r4, #178	; 0xb2
 8001c78:	4d09      	ldr	r5, [pc, #36]	; (8001ca0 <inv_disable_gyro_tc+0x2c>)
 8001c7a:	34ff      	adds	r4, #255	; 0xff
 8001c7c:	5d2b      	ldrb	r3, [r5, r4]
 8001c7e:	2000      	movs	r0, #0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d100      	bne.n	8001c86 <inv_disable_gyro_tc+0x12>
 8001c84:	bd38      	pop	{r3, r4, r5, pc}
 8001c86:	4807      	ldr	r0, [pc, #28]	; (8001ca4 <inv_disable_gyro_tc+0x30>)
 8001c88:	f008 ff24 	bl	800aad4 <inv_unregister_data_cb>
 8001c8c:	4806      	ldr	r0, [pc, #24]	; (8001ca8 <inv_disable_gyro_tc+0x34>)
 8001c8e:	f00d fd95 	bl	800f7bc <inv_unregister_mpl_start_notification>
 8001c92:	1c03      	adds	r3, r0, #0
 8001c94:	2001      	movs	r0, #1
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d1f4      	bne.n	8001c84 <inv_disable_gyro_tc+0x10>
 8001c9a:	552b      	strb	r3, [r5, r4]
 8001c9c:	2000      	movs	r0, #0
 8001c9e:	e7f1      	b.n	8001c84 <inv_disable_gyro_tc+0x10>
 8001ca0:	20000288 	.word	0x20000288
 8001ca4:	08001685 	.word	0x08001685
 8001ca8:	08001671 	.word	0x08001671

08001cac <inv_start_magnetic_disturbance>:
 8001cac:	2196      	movs	r1, #150	; 0x96
 8001cae:	b508      	push	{r3, lr}
 8001cb0:	4802      	ldr	r0, [pc, #8]	; (8001cbc <inv_start_magnetic_disturbance+0x10>)
 8001cb2:	0049      	lsls	r1, r1, #1
 8001cb4:	2204      	movs	r2, #4
 8001cb6:	f008 fe63 	bl	800a980 <inv_register_data_cb>
 8001cba:	bd08      	pop	{r3, pc}
 8001cbc:	080022d9 	.word	0x080022d9

08001cc0 <inv_set_magnetic_disturbance>:
 8001cc0:	2800      	cmp	r0, #0
 8001cc2:	dd05      	ble.n	8001cd0 <inv_set_magnetic_disturbance+0x10>
 8001cc4:	2284      	movs	r2, #132	; 0x84
 8001cc6:	2101      	movs	r1, #1
 8001cc8:	4b02      	ldr	r3, [pc, #8]	; (8001cd4 <inv_set_magnetic_disturbance+0x14>)
 8001cca:	5099      	str	r1, [r3, r2]
 8001ccc:	3a04      	subs	r2, #4
 8001cce:	5098      	str	r0, [r3, r2]
 8001cd0:	2000      	movs	r0, #0
 8001cd2:	4770      	bx	lr
 8001cd4:	2000044c 	.word	0x2000044c

08001cd8 <inv_init_magnetic_disturbance>:
 8001cd8:	b510      	push	{r4, lr}
 8001cda:	4c0c      	ldr	r4, [pc, #48]	; (8001d0c <inv_init_magnetic_disturbance+0x34>)
 8001cdc:	2100      	movs	r1, #0
 8001cde:	1c20      	adds	r0, r4, #0
 8001ce0:	22b8      	movs	r2, #184	; 0xb8
 8001ce2:	f010 f920 	bl	8011f26 <memset>
 8001ce6:	4b0a      	ldr	r3, [pc, #40]	; (8001d10 <inv_init_magnetic_disturbance+0x38>)
 8001ce8:	4a0a      	ldr	r2, [pc, #40]	; (8001d14 <inv_init_magnetic_disturbance+0x3c>)
 8001cea:	60e3      	str	r3, [r4, #12]
 8001cec:	4b0a      	ldr	r3, [pc, #40]	; (8001d18 <inv_init_magnetic_disturbance+0x40>)
 8001cee:	2000      	movs	r0, #0
 8001cf0:	60a3      	str	r3, [r4, #8]
 8001cf2:	4b0a      	ldr	r3, [pc, #40]	; (8001d1c <inv_init_magnetic_disturbance+0x44>)
 8001cf4:	6023      	str	r3, [r4, #0]
 8001cf6:	4b0a      	ldr	r3, [pc, #40]	; (8001d20 <inv_init_magnetic_disturbance+0x48>)
 8001cf8:	6063      	str	r3, [r4, #4]
 8001cfa:	2380      	movs	r3, #128	; 0x80
 8001cfc:	05db      	lsls	r3, r3, #23
 8001cfe:	6663      	str	r3, [r4, #100]	; 0x64
 8001d00:	23fa      	movs	r3, #250	; 0xfa
 8001d02:	00db      	lsls	r3, r3, #3
 8001d04:	67e3      	str	r3, [r4, #124]	; 0x7c
 8001d06:	239c      	movs	r3, #156	; 0x9c
 8001d08:	50e2      	str	r2, [r4, r3]
 8001d0a:	bd10      	pop	{r4, pc}
 8001d0c:	2000044c 	.word	0x2000044c
 8001d10:	42b40000 	.word	0x42b40000
 8001d14:	3e2e147b 	.word	0x3e2e147b
 8001d18:	c2b40000 	.word	0xc2b40000
 8001d1c:	42700000 	.word	0x42700000
 8001d20:	41f00000 	.word	0x41f00000

08001d24 <inv_stop_magnetic_disturbance>:
 8001d24:	b508      	push	{r3, lr}
 8001d26:	4802      	ldr	r0, [pc, #8]	; (8001d30 <inv_stop_magnetic_disturbance+0xc>)
 8001d28:	f008 fed4 	bl	800aad4 <inv_unregister_data_cb>
 8001d2c:	bd08      	pop	{r3, pc}
 8001d2e:	46c0      	nop			; (mov r8, r8)
 8001d30:	080022d9 	.word	0x080022d9

08001d34 <inv_enable_magnetic_disturbance>:
 8001d34:	b508      	push	{r3, lr}
 8001d36:	f7ff ffcf 	bl	8001cd8 <inv_init_magnetic_disturbance>
 8001d3a:	2800      	cmp	r0, #0
 8001d3c:	d108      	bne.n	8001d50 <inv_enable_magnetic_disturbance+0x1c>
 8001d3e:	228c      	movs	r2, #140	; 0x8c
 8001d40:	2101      	movs	r1, #1
 8001d42:	4b04      	ldr	r3, [pc, #16]	; (8001d54 <inv_enable_magnetic_disturbance+0x20>)
 8001d44:	5098      	str	r0, [r3, r2]
 8001d46:	3a04      	subs	r2, #4
 8001d48:	4803      	ldr	r0, [pc, #12]	; (8001d58 <inv_enable_magnetic_disturbance+0x24>)
 8001d4a:	5099      	str	r1, [r3, r2]
 8001d4c:	f00d fd76 	bl	800f83c <inv_register_mpl_start_notification>
 8001d50:	bd08      	pop	{r3, pc}
 8001d52:	46c0      	nop			; (mov r8, r8)
 8001d54:	2000044c 	.word	0x2000044c
 8001d58:	08001cad 	.word	0x08001cad

08001d5c <inv_disable_magnetic_disturbance>:
 8001d5c:	b510      	push	{r4, lr}
 8001d5e:	4c04      	ldr	r4, [pc, #16]	; (8001d70 <inv_disable_magnetic_disturbance+0x14>)
 8001d60:	1c20      	adds	r0, r4, #0
 8001d62:	f008 feb7 	bl	800aad4 <inv_unregister_data_cb>
 8001d66:	1c20      	adds	r0, r4, #0
 8001d68:	f008 feb4 	bl	800aad4 <inv_unregister_data_cb>
 8001d6c:	bd10      	pop	{r4, pc}
 8001d6e:	46c0      	nop			; (mov r8, r8)
 8001d70:	080022d9 	.word	0x080022d9

08001d74 <inv_disable_dip_tracking>:
 8001d74:	2100      	movs	r1, #0
 8001d76:	238c      	movs	r3, #140	; 0x8c
 8001d78:	4a01      	ldr	r2, [pc, #4]	; (8001d80 <inv_disable_dip_tracking+0xc>)
 8001d7a:	2000      	movs	r0, #0
 8001d7c:	50d1      	str	r1, [r2, r3]
 8001d7e:	4770      	bx	lr
 8001d80:	2000044c 	.word	0x2000044c

08001d84 <inv_enable_dip_tracking>:
 8001d84:	2101      	movs	r1, #1
 8001d86:	238c      	movs	r3, #140	; 0x8c
 8001d88:	4a01      	ldr	r2, [pc, #4]	; (8001d90 <inv_enable_dip_tracking+0xc>)
 8001d8a:	2000      	movs	r0, #0
 8001d8c:	50d1      	str	r1, [r2, r3]
 8001d8e:	4770      	bx	lr
 8001d90:	2000044c 	.word	0x2000044c

08001d94 <inv_track_dip_angle>:
 8001d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d96:	2800      	cmp	r0, #0
 8001d98:	d00b      	beq.n	8001db2 <inv_track_dip_angle+0x1e>
 8001d9a:	2801      	cmp	r0, #1
 8001d9c:	d019      	beq.n	8001dd2 <inv_track_dip_angle+0x3e>
 8001d9e:	2101      	movs	r1, #1
 8001da0:	2298      	movs	r2, #152	; 0x98
 8001da2:	4b20      	ldr	r3, [pc, #128]	; (8001e24 <inv_track_dip_angle+0x90>)
 8001da4:	5099      	str	r1, [r3, r2]
 8001da6:	2200      	movs	r2, #0
 8001da8:	318b      	adds	r1, #139	; 0x8b
 8001daa:	505a      	str	r2, [r3, r1]
 8001dac:	3104      	adds	r1, #4
 8001dae:	505a      	str	r2, [r3, r1]
 8001db0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001db2:	22a0      	movs	r2, #160	; 0xa0
 8001db4:	4b1b      	ldr	r3, [pc, #108]	; (8001e24 <inv_track_dip_angle+0x90>)
 8001db6:	5099      	str	r1, [r3, r2]
 8001db8:	3204      	adds	r2, #4
 8001dba:	5099      	str	r1, [r3, r2]
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	3204      	adds	r2, #4
 8001dc0:	5099      	str	r1, [r3, r2]
 8001dc2:	2101      	movs	r1, #1
 8001dc4:	3a14      	subs	r2, #20
 8001dc6:	5098      	str	r0, [r3, r2]
 8001dc8:	3a04      	subs	r2, #4
 8001dca:	5099      	str	r1, [r3, r2]
 8001dcc:	3208      	adds	r2, #8
 8001dce:	5098      	str	r0, [r3, r2]
 8001dd0:	e7ee      	b.n	8001db0 <inv_track_dip_angle+0x1c>
 8001dd2:	23a0      	movs	r3, #160	; 0xa0
 8001dd4:	4d13      	ldr	r5, [pc, #76]	; (8001e24 <inv_track_dip_angle+0x90>)
 8001dd6:	1c08      	adds	r0, r1, #0
 8001dd8:	1c0c      	adds	r4, r1, #0
 8001dda:	58e9      	ldr	r1, [r5, r3]
 8001ddc:	f002 f960 	bl	80040a0 <__aeabi_fsub>
 8001de0:	239c      	movs	r3, #156	; 0x9c
 8001de2:	0040      	lsls	r0, r0, #1
 8001de4:	0840      	lsrs	r0, r0, #1
 8001de6:	58e9      	ldr	r1, [r5, r3]
 8001de8:	f001 fb16 	bl	8003418 <__aeabi_fcmplt>
 8001dec:	2800      	cmp	r0, #0
 8001dee:	d014      	beq.n	8001e1a <inv_track_dip_angle+0x86>
 8001df0:	2394      	movs	r3, #148	; 0x94
 8001df2:	27a4      	movs	r7, #164	; 0xa4
 8001df4:	58ea      	ldr	r2, [r5, r3]
 8001df6:	59e9      	ldr	r1, [r5, r7]
 8001df8:	1c56      	adds	r6, r2, #1
 8001dfa:	50ee      	str	r6, [r5, r3]
 8001dfc:	1c20      	adds	r0, r4, #0
 8001dfe:	f001 fc97 	bl	8003730 <__aeabi_fadd>
 8001e02:	51e8      	str	r0, [r5, r7]
 8001e04:	2e31      	cmp	r6, #49	; 0x31
 8001e06:	ddd3      	ble.n	8001db0 <inv_track_dip_angle+0x1c>
 8001e08:	2390      	movs	r3, #144	; 0x90
 8001e0a:	2202      	movs	r2, #2
 8001e0c:	4906      	ldr	r1, [pc, #24]	; (8001e28 <inv_track_dip_angle+0x94>)
 8001e0e:	50ea      	str	r2, [r5, r3]
 8001e10:	f001 fe2e 	bl	8003a70 <__aeabi_fdiv>
 8001e14:	23a8      	movs	r3, #168	; 0xa8
 8001e16:	50e8      	str	r0, [r5, r3]
 8001e18:	e7ca      	b.n	8001db0 <inv_track_dip_angle+0x1c>
 8001e1a:	2390      	movs	r3, #144	; 0x90
 8001e1c:	50e8      	str	r0, [r5, r3]
 8001e1e:	3304      	adds	r3, #4
 8001e20:	50e8      	str	r0, [r5, r3]
 8001e22:	e7c5      	b.n	8001db0 <inv_track_dip_angle+0x1c>
 8001e24:	2000044c 	.word	0x2000044c
 8001e28:	42480000 	.word	0x42480000

08001e2c <ComputeAngleVelocity>:
 8001e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e2e:	464f      	mov	r7, r9
 8001e30:	4646      	mov	r6, r8
 8001e32:	1c04      	adds	r4, r0, #0
 8001e34:	1c0d      	adds	r5, r1, #0
 8001e36:	b4c0      	push	{r6, r7}
 8001e38:	b08f      	sub	sp, #60	; 0x3c
 8001e3a:	a905      	add	r1, sp, #20
 8001e3c:	4691      	mov	r9, r2
 8001e3e:	f00d f842 	bl	800eec6 <inv_quaternion_to_rotation>
 8001e42:	1c28      	adds	r0, r5, #0
 8001e44:	1c21      	adds	r1, r4, #0
 8001e46:	aa01      	add	r2, sp, #4
 8001e48:	f00c fbc8 	bl	800e5dc <inv_q_mult>
 8001e4c:	1c20      	adds	r0, r4, #0
 8001e4e:	1c29      	adds	r1, r5, #0
 8001e50:	f00c fcbc 	bl	800e7cc <inv_q_invert>
 8001e54:	2300      	movs	r3, #0
 8001e56:	4698      	mov	r8, r3
 8001e58:	4643      	mov	r3, r8
 8001e5a:	005d      	lsls	r5, r3, #1
 8001e5c:	ab05      	add	r3, sp, #20
 8001e5e:	469c      	mov	ip, r3
 8001e60:	2400      	movs	r4, #0
 8001e62:	2600      	movs	r6, #0
 8001e64:	2700      	movs	r7, #0
 8001e66:	4445      	add	r5, r8
 8001e68:	4465      	add	r5, ip
 8001e6a:	592b      	ldr	r3, [r5, r4]
 8001e6c:	5928      	ldr	r0, [r5, r4]
 8001e6e:	17d9      	asrs	r1, r3, #31
 8001e70:	ab01      	add	r3, sp, #4
 8001e72:	191b      	adds	r3, r3, r4
 8001e74:	685a      	ldr	r2, [r3, #4]
 8001e76:	3404      	adds	r4, #4
 8001e78:	17d3      	asrs	r3, r2, #31
 8001e7a:	f001 fb19 	bl	80034b0 <__aeabi_lmul>
 8001e7e:	1836      	adds	r6, r6, r0
 8001e80:	414f      	adcs	r7, r1
 8001e82:	2c0c      	cmp	r4, #12
 8001e84:	d1f1      	bne.n	8001e6a <ComputeAngleVelocity+0x3e>
 8001e86:	00bb      	lsls	r3, r7, #2
 8001e88:	0fb6      	lsrs	r6, r6, #30
 8001e8a:	431e      	orrs	r6, r3
 8001e8c:	4642      	mov	r2, r8
 8001e8e:	464b      	mov	r3, r9
 8001e90:	509e      	str	r6, [r3, r2]
 8001e92:	2304      	movs	r3, #4
 8001e94:	469c      	mov	ip, r3
 8001e96:	44e0      	add	r8, ip
 8001e98:	4643      	mov	r3, r8
 8001e9a:	2b0c      	cmp	r3, #12
 8001e9c:	d1dc      	bne.n	8001e58 <ComputeAngleVelocity+0x2c>
 8001e9e:	b00f      	add	sp, #60	; 0x3c
 8001ea0:	bc0c      	pop	{r2, r3}
 8001ea2:	4690      	mov	r8, r2
 8001ea4:	4699      	mov	r9, r3
 8001ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ea8 <Mag3ofNormalizedLong>:
 8001ea8:	b570      	push	{r4, r5, r6, lr}
 8001eaa:	1c04      	adds	r4, r0, #0
 8001eac:	6800      	ldr	r0, [r0, #0]
 8001eae:	f002 facd 	bl	800444c <__aeabi_i2f>
 8001eb2:	1c06      	adds	r6, r0, #0
 8001eb4:	6860      	ldr	r0, [r4, #4]
 8001eb6:	f002 fac9 	bl	800444c <__aeabi_i2f>
 8001eba:	1c05      	adds	r5, r0, #0
 8001ebc:	68a0      	ldr	r0, [r4, #8]
 8001ebe:	f002 fac5 	bl	800444c <__aeabi_i2f>
 8001ec2:	1c31      	adds	r1, r6, #0
 8001ec4:	1c04      	adds	r4, r0, #0
 8001ec6:	1c30      	adds	r0, r6, #0
 8001ec8:	f001 ff9c 	bl	8003e04 <__aeabi_fmul>
 8001ecc:	1c29      	adds	r1, r5, #0
 8001ece:	1c06      	adds	r6, r0, #0
 8001ed0:	1c28      	adds	r0, r5, #0
 8001ed2:	f001 ff97 	bl	8003e04 <__aeabi_fmul>
 8001ed6:	1c01      	adds	r1, r0, #0
 8001ed8:	1c30      	adds	r0, r6, #0
 8001eda:	f001 fc29 	bl	8003730 <__aeabi_fadd>
 8001ede:	1c21      	adds	r1, r4, #0
 8001ee0:	1c05      	adds	r5, r0, #0
 8001ee2:	1c20      	adds	r0, r4, #0
 8001ee4:	f001 ff8e 	bl	8003e04 <__aeabi_fmul>
 8001ee8:	1c01      	adds	r1, r0, #0
 8001eea:	1c28      	adds	r0, r5, #0
 8001eec:	f001 fc20 	bl	8003730 <__aeabi_fadd>
 8001ef0:	f00d fd82 	bl	800f9f8 <sqrtf>
 8001ef4:	21de      	movs	r1, #222	; 0xde
 8001ef6:	0589      	lsls	r1, r1, #22
 8001ef8:	f001 ff84 	bl	8003e04 <__aeabi_fmul>
 8001efc:	bd70      	pop	{r4, r5, r6, pc}
 8001efe:	46c0      	nop			; (mov r8, r8)

08001f00 <MagDisturbSetDisturbance>:
 8001f00:	b570      	push	{r4, r5, r6, lr}
 8001f02:	4c1d      	ldr	r4, [pc, #116]	; (8001f78 <MagDisturbSetDisturbance+0x78>)
 8001f04:	1c05      	adds	r5, r0, #0
 8001f06:	1c0e      	adds	r6, r1, #0
 8001f08:	6820      	ldr	r0, [r4, #0]
 8001f0a:	1c29      	adds	r1, r5, #0
 8001f0c:	f001 fa84 	bl	8003418 <__aeabi_fcmplt>
 8001f10:	2800      	cmp	r0, #0
 8001f12:	d105      	bne.n	8001f20 <MagDisturbSetDisturbance+0x20>
 8001f14:	1c28      	adds	r0, r5, #0
 8001f16:	6861      	ldr	r1, [r4, #4]
 8001f18:	f001 fa7e 	bl	8003418 <__aeabi_fcmplt>
 8001f1c:	2800      	cmp	r0, #0
 8001f1e:	d00f      	beq.n	8001f40 <MagDisturbSetDisturbance+0x40>
 8001f20:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d011      	beq.n	8001f4a <MagDisturbSetDisturbance+0x4a>
 8001f26:	2301      	movs	r3, #1
 8001f28:	6763      	str	r3, [r4, #116]	; 0x74
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	67a3      	str	r3, [r4, #120]	; 0x78
 8001f2e:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8001f30:	429a      	cmp	r2, r3
 8001f32:	dc04      	bgt.n	8001f3e <MagDisturbSetDisturbance+0x3e>
 8001f34:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d00d      	beq.n	8001f56 <MagDisturbSetDisturbance+0x56>
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	6763      	str	r3, [r4, #116]	; 0x74
 8001f3e:	bd70      	pop	{r4, r5, r6, pc}
 8001f40:	6923      	ldr	r3, [r4, #16]
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d00a      	beq.n	8001f5c <MagDisturbSetDisturbance+0x5c>
 8001f46:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8001f48:	e7f1      	b.n	8001f2e <MagDisturbSetDisturbance+0x2e>
 8001f4a:	1c20      	adds	r0, r4, #0
 8001f4c:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8001f4e:	3018      	adds	r0, #24
 8001f50:	f00d fa1c 	bl	800f38c <inv_set_compass_correction>
 8001f54:	e7e7      	b.n	8001f26 <MagDisturbSetDisturbance+0x26>
 8001f56:	2300      	movs	r3, #0
 8001f58:	65e3      	str	r3, [r4, #92]	; 0x5c
 8001f5a:	e7ee      	b.n	8001f3a <MagDisturbSetDisturbance+0x3a>
 8001f5c:	68e0      	ldr	r0, [r4, #12]
 8001f5e:	1c31      	adds	r1, r6, #0
 8001f60:	f001 fa5a 	bl	8003418 <__aeabi_fcmplt>
 8001f64:	2800      	cmp	r0, #0
 8001f66:	d1db      	bne.n	8001f20 <MagDisturbSetDisturbance+0x20>
 8001f68:	1c30      	adds	r0, r6, #0
 8001f6a:	68a1      	ldr	r1, [r4, #8]
 8001f6c:	f001 fa54 	bl	8003418 <__aeabi_fcmplt>
 8001f70:	2800      	cmp	r0, #0
 8001f72:	d1d5      	bne.n	8001f20 <MagDisturbSetDisturbance+0x20>
 8001f74:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8001f76:	e7da      	b.n	8001f2e <MagDisturbSetDisturbance+0x2e>
 8001f78:	2000044c 	.word	0x2000044c

08001f7c <MagDisturbCheckSettling>:
 8001f7c:	b538      	push	{r3, r4, r5, lr}
 8001f7e:	1c05      	adds	r5, r0, #0
 8001f80:	1c0c      	adds	r4, r1, #0
 8001f82:	f00d fa37 	bl	800f3f4 <inv_get_acc_state>
 8001f86:	2800      	cmp	r0, #0
 8001f88:	d105      	bne.n	8001f96 <MagDisturbCheckSettling+0x1a>
 8001f8a:	1c28      	adds	r0, r5, #0
 8001f8c:	490d      	ldr	r1, [pc, #52]	; (8001fc4 <MagDisturbCheckSettling+0x48>)
 8001f8e:	f001 fa57 	bl	8003440 <__aeabi_fcmpgt>
 8001f92:	2800      	cmp	r0, #0
 8001f94:	d010      	beq.n	8001fb8 <MagDisturbCheckSettling+0x3c>
 8001f96:	2200      	movs	r2, #0
 8001f98:	4b0b      	ldr	r3, [pc, #44]	; (8001fc8 <MagDisturbCheckSettling+0x4c>)
 8001f9a:	611a      	str	r2, [r3, #16]
 8001f9c:	615a      	str	r2, [r3, #20]
 8001f9e:	695a      	ldr	r2, [r3, #20]
 8001fa0:	18a1      	adds	r1, r4, r2
 8001fa2:	22fa      	movs	r2, #250	; 0xfa
 8001fa4:	6159      	str	r1, [r3, #20]
 8001fa6:	0052      	lsls	r2, r2, #1
 8001fa8:	4291      	cmp	r1, r2
 8001faa:	dd04      	ble.n	8001fb6 <MagDisturbCheckSettling+0x3a>
 8001fac:	3af4      	subs	r2, #244	; 0xf4
 8001fae:	3aff      	subs	r2, #255	; 0xff
 8001fb0:	611a      	str	r2, [r3, #16]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	615a      	str	r2, [r3, #20]
 8001fb6:	bd38      	pop	{r3, r4, r5, pc}
 8001fb8:	4b03      	ldr	r3, [pc, #12]	; (8001fc8 <MagDisturbCheckSettling+0x4c>)
 8001fba:	691a      	ldr	r2, [r3, #16]
 8001fbc:	2a00      	cmp	r2, #0
 8001fbe:	d1fa      	bne.n	8001fb6 <MagDisturbCheckSettling+0x3a>
 8001fc0:	e7ed      	b.n	8001f9e <MagDisturbCheckSettling+0x22>
 8001fc2:	46c0      	nop			; (mov r8, r8)
 8001fc4:	461c4000 	.word	0x461c4000
 8001fc8:	2000044c 	.word	0x2000044c

08001fcc <inv_check_magnetic_disturbance>:
 8001fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fce:	465f      	mov	r7, fp
 8001fd0:	4644      	mov	r4, r8
 8001fd2:	4656      	mov	r6, sl
 8001fd4:	464d      	mov	r5, r9
 8001fd6:	b4f0      	push	{r4, r5, r6, r7}
 8001fd8:	2400      	movs	r4, #0
 8001fda:	2788      	movs	r7, #136	; 0x88
 8001fdc:	b08d      	sub	sp, #52	; 0x34
 8001fde:	9406      	str	r4, [sp, #24]
 8001fe0:	9407      	str	r4, [sp, #28]
 8001fe2:	9408      	str	r4, [sp, #32]
 8001fe4:	4cb5      	ldr	r4, [pc, #724]	; (80022bc <inv_check_magnetic_disturbance+0x2f0>)
 8001fe6:	59e7      	ldr	r7, [r4, r7]
 8001fe8:	2f00      	cmp	r7, #0
 8001fea:	d107      	bne.n	8001ffc <inv_check_magnetic_disturbance+0x30>
 8001fec:	2000      	movs	r0, #0
 8001fee:	b00d      	add	sp, #52	; 0x34
 8001ff0:	bc3c      	pop	{r2, r3, r4, r5}
 8001ff2:	4690      	mov	r8, r2
 8001ff4:	4699      	mov	r9, r3
 8001ff6:	46a2      	mov	sl, r4
 8001ff8:	46ab      	mov	fp, r5
 8001ffa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ffc:	4699      	mov	r9, r3
 8001ffe:	4690      	mov	r8, r2
 8002000:	9101      	str	r1, [sp, #4]
 8002002:	1c05      	adds	r5, r0, #0
 8002004:	f008 fa26 	bl	800a454 <inv_get_gyro_on>
 8002008:	2800      	cmp	r0, #0
 800200a:	d000      	beq.n	800200e <inv_check_magnetic_disturbance+0x42>
 800200c:	e120      	b.n	8002250 <inv_check_magnetic_disturbance+0x284>
 800200e:	2780      	movs	r7, #128	; 0x80
 8002010:	59e3      	ldr	r3, [r4, r7]
 8002012:	2b00      	cmp	r3, #0
 8002014:	dd0f      	ble.n	8002036 <inv_check_magnetic_disturbance+0x6a>
 8002016:	2201      	movs	r2, #1
 8002018:	2384      	movs	r3, #132	; 0x84
 800201a:	50e2      	str	r2, [r4, r3]
 800201c:	f008 fa1a 	bl	800a454 <inv_get_gyro_on>
 8002020:	2800      	cmp	r0, #0
 8002022:	d000      	beq.n	8002026 <inv_check_magnetic_disturbance+0x5a>
 8002024:	e0a9      	b.n	800217a <inv_check_magnetic_disturbance+0x1ae>
 8002026:	59e3      	ldr	r3, [r4, r7]
 8002028:	1b5b      	subs	r3, r3, r5
 800202a:	51e3      	str	r3, [r4, r7]
 800202c:	2b00      	cmp	r3, #0
 800202e:	dc02      	bgt.n	8002036 <inv_check_magnetic_disturbance+0x6a>
 8002030:	2200      	movs	r2, #0
 8002032:	2384      	movs	r3, #132	; 0x84
 8002034:	50e2      	str	r2, [r4, r3]
 8002036:	f00d fb65 	bl	800f704 <inv_got_compass_bias>
 800203a:	2800      	cmp	r0, #0
 800203c:	d0d6      	beq.n	8001fec <inv_check_magnetic_disturbance+0x20>
 800203e:	2600      	movs	r6, #0
 8002040:	2700      	movs	r7, #0
 8002042:	4643      	mov	r3, r8
 8002044:	59d8      	ldr	r0, [r3, r7]
 8002046:	f002 fa01 	bl	800444c <__aeabi_i2f>
 800204a:	21de      	movs	r1, #222	; 0xde
 800204c:	0589      	lsls	r1, r1, #22
 800204e:	f001 fed9 	bl	8003e04 <__aeabi_fmul>
 8002052:	464b      	mov	r3, r9
 8002054:	4683      	mov	fp, r0
 8002056:	59d8      	ldr	r0, [r3, r7]
 8002058:	f002 f9f8 	bl	800444c <__aeabi_i2f>
 800205c:	1c01      	adds	r1, r0, #0
 800205e:	4658      	mov	r0, fp
 8002060:	f001 fed0 	bl	8003e04 <__aeabi_fmul>
 8002064:	21de      	movs	r1, #222	; 0xde
 8002066:	0589      	lsls	r1, r1, #22
 8002068:	f001 fecc 	bl	8003e04 <__aeabi_fmul>
 800206c:	1c01      	adds	r1, r0, #0
 800206e:	1c30      	adds	r0, r6, #0
 8002070:	f001 fb5e 	bl	8003730 <__aeabi_fadd>
 8002074:	3704      	adds	r7, #4
 8002076:	1c06      	adds	r6, r0, #0
 8002078:	2f0c      	cmp	r7, #12
 800207a:	d1e2      	bne.n	8002042 <inv_check_magnetic_disturbance+0x76>
 800207c:	4640      	mov	r0, r8
 800207e:	f7ff ff13 	bl	8001ea8 <Mag3ofNormalizedLong>
 8002082:	9000      	str	r0, [sp, #0]
 8002084:	9900      	ldr	r1, [sp, #0]
 8002086:	1c30      	adds	r0, r6, #0
 8002088:	f001 fcf2 	bl	8003a70 <__aeabi_fdiv>
 800208c:	21fe      	movs	r1, #254	; 0xfe
 800208e:	0589      	lsls	r1, r1, #22
 8002090:	1c06      	adds	r6, r0, #0
 8002092:	f001 f9d5 	bl	8003440 <__aeabi_fcmpgt>
 8002096:	2800      	cmp	r0, #0
 8002098:	d067      	beq.n	800216a <inv_check_magnetic_disturbance+0x19e>
 800209a:	26fe      	movs	r6, #254	; 0xfe
 800209c:	05b6      	lsls	r6, r6, #22
 800209e:	1c30      	adds	r0, r6, #0
 80020a0:	f00d fc86 	bl	800f9b0 <acosf>
 80020a4:	238c      	movs	r3, #140	; 0x8c
 80020a6:	58e3      	ldr	r3, [r4, r3]
 80020a8:	4680      	mov	r8, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d00c      	beq.n	80020c8 <inv_check_magnetic_disturbance+0xfc>
 80020ae:	9800      	ldr	r0, [sp, #0]
 80020b0:	6821      	ldr	r1, [r4, #0]
 80020b2:	f001 f9b1 	bl	8003418 <__aeabi_fcmplt>
 80020b6:	2800      	cmp	r0, #0
 80020b8:	d006      	beq.n	80020c8 <inv_check_magnetic_disturbance+0xfc>
 80020ba:	9800      	ldr	r0, [sp, #0]
 80020bc:	6861      	ldr	r1, [r4, #4]
 80020be:	f001 f9bf 	bl	8003440 <__aeabi_fcmpgt>
 80020c2:	2800      	cmp	r0, #0
 80020c4:	d000      	beq.n	80020c8 <inv_check_magnetic_disturbance+0xfc>
 80020c6:	e0c7      	b.n	8002258 <inv_check_magnetic_disturbance+0x28c>
 80020c8:	ae09      	add	r6, sp, #36	; 0x24
 80020ca:	1c30      	adds	r0, r6, #0
 80020cc:	f00d f9e6 	bl	800f49c <inv_get_local_field>
 80020d0:	1c21      	adds	r1, r4, #0
 80020d2:	1c30      	adds	r0, r6, #0
 80020d4:	31ac      	adds	r1, #172	; 0xac
 80020d6:	220c      	movs	r2, #12
 80020d8:	f00f ff04 	bl	8011ee4 <memcmp>
 80020dc:	2800      	cmp	r0, #0
 80020de:	d157      	bne.n	8002190 <inv_check_magnetic_disturbance+0x1c4>
 80020e0:	2398      	movs	r3, #152	; 0x98
 80020e2:	58e3      	ldr	r3, [r4, r3]
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d053      	beq.n	8002190 <inv_check_magnetic_disturbance+0x1c4>
 80020e8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d10e      	bne.n	800210c <inv_check_magnetic_disturbance+0x140>
 80020ee:	2301      	movs	r3, #1
 80020f0:	65e3      	str	r3, [r4, #92]	; 0x5c
 80020f2:	3357      	adds	r3, #87	; 0x57
 80020f4:	469a      	mov	sl, r3
 80020f6:	2600      	movs	r6, #0
 80020f8:	44a2      	add	sl, r4
 80020fa:	1c30      	adds	r0, r6, #0
 80020fc:	3018      	adds	r0, #24
 80020fe:	1820      	adds	r0, r4, r0
 8002100:	4651      	mov	r1, sl
 8002102:	3610      	adds	r6, #16
 8002104:	f00d f95e 	bl	800f3c4 <inv_get_compass_correction>
 8002108:	2e40      	cmp	r6, #64	; 0x40
 800210a:	d1f6      	bne.n	80020fa <inv_check_magnetic_disturbance+0x12e>
 800210c:	1c26      	adds	r6, r4, #0
 800210e:	9f01      	ldr	r7, [sp, #4]
 8002110:	3664      	adds	r6, #100	; 0x64
 8002112:	aa03      	add	r2, sp, #12
 8002114:	1c38      	adds	r0, r7, #0
 8002116:	1c31      	adds	r1, r6, #0
 8002118:	f7ff fe88 	bl	8001e2c <ComputeAngleVelocity>
 800211c:	1c31      	adds	r1, r6, #0
 800211e:	1c38      	adds	r0, r7, #0
 8002120:	f00c fb54 	bl	800e7cc <inv_q_invert>
 8002124:	a806      	add	r0, sp, #24
 8002126:	f00c f9f2 	bl	800e50e <inv_get_gyro_sum_of_sqr>
 800212a:	f002 f9e1 	bl	80044f0 <__aeabi_ui2f>
 800212e:	21f2      	movs	r1, #242	; 0xf2
 8002130:	0589      	lsls	r1, r1, #22
 8002132:	f001 fe67 	bl	8003e04 <__aeabi_fmul>
 8002136:	1c29      	adds	r1, r5, #0
 8002138:	f7ff ff20 	bl	8001f7c <MagDisturbCheckSettling>
 800213c:	9800      	ldr	r0, [sp, #0]
 800213e:	4641      	mov	r1, r8
 8002140:	f7ff fede 	bl	8001f00 <MagDisturbSetDisturbance>
 8002144:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8002146:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8002148:	4293      	cmp	r3, r2
 800214a:	da01      	bge.n	8002150 <inv_check_magnetic_disturbance+0x184>
 800214c:	18eb      	adds	r3, r5, r3
 800214e:	67a3      	str	r3, [r4, #120]	; 0x78
 8002150:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8002152:	2800      	cmp	r0, #0
 8002154:	d000      	beq.n	8002158 <inv_check_magnetic_disturbance+0x18c>
 8002156:	e74a      	b.n	8001fee <inv_check_magnetic_disturbance+0x22>
 8002158:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800215a:	469c      	mov	ip, r3
 800215c:	23fa      	movs	r3, #250	; 0xfa
 800215e:	4465      	add	r5, ip
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	429d      	cmp	r5, r3
 8002164:	dc7e      	bgt.n	8002264 <inv_check_magnetic_disturbance+0x298>
 8002166:	6625      	str	r5, [r4, #96]	; 0x60
 8002168:	e741      	b.n	8001fee <inv_check_magnetic_disturbance+0x22>
 800216a:	1c30      	adds	r0, r6, #0
 800216c:	4954      	ldr	r1, [pc, #336]	; (80022c0 <inv_check_magnetic_disturbance+0x2f4>)
 800216e:	f001 f953 	bl	8003418 <__aeabi_fcmplt>
 8002172:	2800      	cmp	r0, #0
 8002174:	d093      	beq.n	800209e <inv_check_magnetic_disturbance+0xd2>
 8002176:	4e52      	ldr	r6, [pc, #328]	; (80022c0 <inv_check_magnetic_disturbance+0x2f4>)
 8002178:	e791      	b.n	800209e <inv_check_magnetic_disturbance+0xd2>
 800217a:	a806      	add	r0, sp, #24
 800217c:	f00c f9c7 	bl	800e50e <inv_get_gyro_sum_of_sqr>
 8002180:	2390      	movs	r3, #144	; 0x90
 8002182:	33ff      	adds	r3, #255	; 0xff
 8002184:	0980      	lsrs	r0, r0, #6
 8002186:	4298      	cmp	r0, r3
 8002188:	d900      	bls.n	800218c <inv_check_magnetic_disturbance+0x1c0>
 800218a:	e74c      	b.n	8002026 <inv_check_magnetic_disturbance+0x5a>
 800218c:	59e3      	ldr	r3, [r4, r7]
 800218e:	e74d      	b.n	800202c <inv_check_magnetic_disturbance+0x60>
 8002190:	1c23      	adds	r3, r4, #0
 8002192:	1c32      	adds	r2, r6, #0
 8002194:	33ac      	adds	r3, #172	; 0xac
 8002196:	ca83      	ldmia	r2!, {r0, r1, r7}
 8002198:	c383      	stmia	r3!, {r0, r1, r7}
 800219a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800219c:	2b00      	cmp	r3, #0
 800219e:	d113      	bne.n	80021c8 <inv_check_magnetic_disturbance+0x1fc>
 80021a0:	6873      	ldr	r3, [r6, #4]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d110      	bne.n	80021c8 <inv_check_magnetic_disturbance+0x1fc>
 80021a6:	68b3      	ldr	r3, [r6, #8]
 80021a8:	4699      	mov	r9, r3
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d10c      	bne.n	80021c8 <inv_check_magnetic_disturbance+0x1fc>
 80021ae:	2698      	movs	r6, #152	; 0x98
 80021b0:	4b44      	ldr	r3, [pc, #272]	; (80022c4 <inv_check_magnetic_disturbance+0x2f8>)
 80021b2:	6023      	str	r3, [r4, #0]
 80021b4:	4b44      	ldr	r3, [pc, #272]	; (80022c8 <inv_check_magnetic_disturbance+0x2fc>)
 80021b6:	6063      	str	r3, [r4, #4]
 80021b8:	59a3      	ldr	r3, [r4, r6]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d06b      	beq.n	8002296 <inv_check_magnetic_disturbance+0x2ca>
 80021be:	4b43      	ldr	r3, [pc, #268]	; (80022cc <inv_check_magnetic_disturbance+0x300>)
 80021c0:	60a3      	str	r3, [r4, #8]
 80021c2:	4b43      	ldr	r3, [pc, #268]	; (80022d0 <inv_check_magnetic_disturbance+0x304>)
 80021c4:	60e3      	str	r3, [r4, #12]
 80021c6:	e78f      	b.n	80020e8 <inv_check_magnetic_disturbance+0x11c>
 80021c8:	1c30      	adds	r0, r6, #0
 80021ca:	f7ff fe6d 	bl	8001ea8 <Mag3ofNormalizedLong>
 80021ce:	2100      	movs	r1, #0
 80021d0:	4681      	mov	r9, r0
 80021d2:	f001 f91b 	bl	800340c <__aeabi_fcmpeq>
 80021d6:	2800      	cmp	r0, #0
 80021d8:	d186      	bne.n	80020e8 <inv_check_magnetic_disturbance+0x11c>
 80021da:	4648      	mov	r0, r9
 80021dc:	493d      	ldr	r1, [pc, #244]	; (80022d4 <inv_check_magnetic_disturbance+0x308>)
 80021de:	f001 ff5f 	bl	80040a0 <__aeabi_fsub>
 80021e2:	1c01      	adds	r1, r0, #0
 80021e4:	f001 fe0e 	bl	8003e04 <__aeabi_fmul>
 80021e8:	f00d fc06 	bl	800f9f8 <sqrtf>
 80021ec:	4939      	ldr	r1, [pc, #228]	; (80022d4 <inv_check_magnetic_disturbance+0x308>)
 80021ee:	6060      	str	r0, [r4, #4]
 80021f0:	4648      	mov	r0, r9
 80021f2:	f001 fa9d 	bl	8003730 <__aeabi_fadd>
 80021f6:	1c01      	adds	r1, r0, #0
 80021f8:	f001 fe04 	bl	8003e04 <__aeabi_fmul>
 80021fc:	f00d fbfc 	bl	800f9f8 <sqrtf>
 8002200:	6020      	str	r0, [r4, #0]
 8002202:	68b0      	ldr	r0, [r6, #8]
 8002204:	f002 f922 	bl	800444c <__aeabi_i2f>
 8002208:	21de      	movs	r1, #222	; 0xde
 800220a:	0589      	lsls	r1, r1, #22
 800220c:	f001 fdfa 	bl	8003e04 <__aeabi_fmul>
 8002210:	4649      	mov	r1, r9
 8002212:	f001 fc2d 	bl	8003a70 <__aeabi_fdiv>
 8002216:	21fe      	movs	r1, #254	; 0xfe
 8002218:	0589      	lsls	r1, r1, #22
 800221a:	4681      	mov	r9, r0
 800221c:	f001 f910 	bl	8003440 <__aeabi_fcmpgt>
 8002220:	2800      	cmp	r0, #0
 8002222:	d02f      	beq.n	8002284 <inv_check_magnetic_disturbance+0x2b8>
 8002224:	23fe      	movs	r3, #254	; 0xfe
 8002226:	059b      	lsls	r3, r3, #22
 8002228:	4699      	mov	r9, r3
 800222a:	269c      	movs	r6, #156	; 0x9c
 800222c:	4648      	mov	r0, r9
 800222e:	f00d fbbf 	bl	800f9b0 <acosf>
 8002232:	59a1      	ldr	r1, [r4, r6]
 8002234:	f001 ff34 	bl	80040a0 <__aeabi_fsub>
 8002238:	60a0      	str	r0, [r4, #8]
 800223a:	4648      	mov	r0, r9
 800223c:	f00d fbb8 	bl	800f9b0 <acosf>
 8002240:	59a1      	ldr	r1, [r4, r6]
 8002242:	f001 fa75 	bl	8003730 <__aeabi_fadd>
 8002246:	2200      	movs	r2, #0
 8002248:	238c      	movs	r3, #140	; 0x8c
 800224a:	60e0      	str	r0, [r4, #12]
 800224c:	50e2      	str	r2, [r4, r3]
 800224e:	e74b      	b.n	80020e8 <inv_check_magnetic_disturbance+0x11c>
 8002250:	a806      	add	r0, sp, #24
 8002252:	f008 fdbf 	bl	800add4 <inv_get_gyro>
 8002256:	e6da      	b.n	800200e <inv_check_magnetic_disturbance+0x42>
 8002258:	2390      	movs	r3, #144	; 0x90
 800225a:	4641      	mov	r1, r8
 800225c:	58e0      	ldr	r0, [r4, r3]
 800225e:	f7ff fd99 	bl	8001d94 <inv_track_dip_angle>
 8002262:	e731      	b.n	80020c8 <inv_check_magnetic_disturbance+0xfc>
 8002264:	6620      	str	r0, [r4, #96]	; 0x60
 8002266:	1c21      	adds	r1, r4, #0
 8002268:	1c20      	adds	r0, r4, #0
 800226a:	3128      	adds	r1, #40	; 0x28
 800226c:	2230      	movs	r2, #48	; 0x30
 800226e:	3018      	adds	r0, #24
 8002270:	f00f fe46 	bl	8011f00 <memmove>
 8002274:	1c20      	adds	r0, r4, #0
 8002276:	1c21      	adds	r1, r4, #0
 8002278:	3048      	adds	r0, #72	; 0x48
 800227a:	3158      	adds	r1, #88	; 0x58
 800227c:	f00d f8a2 	bl	800f3c4 <inv_get_compass_correction>
 8002280:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8002282:	e6b4      	b.n	8001fee <inv_check_magnetic_disturbance+0x22>
 8002284:	4648      	mov	r0, r9
 8002286:	490e      	ldr	r1, [pc, #56]	; (80022c0 <inv_check_magnetic_disturbance+0x2f4>)
 8002288:	f001 f8c6 	bl	8003418 <__aeabi_fcmplt>
 800228c:	2800      	cmp	r0, #0
 800228e:	d0cc      	beq.n	800222a <inv_check_magnetic_disturbance+0x25e>
 8002290:	4b0b      	ldr	r3, [pc, #44]	; (80022c0 <inv_check_magnetic_disturbance+0x2f4>)
 8002292:	4699      	mov	r9, r3
 8002294:	e7c9      	b.n	800222a <inv_check_magnetic_disturbance+0x25e>
 8002296:	33a7      	adds	r3, #167	; 0xa7
 8002298:	58e3      	ldr	r3, [r4, r3]
 800229a:	469b      	mov	fp, r3
 800229c:	239c      	movs	r3, #156	; 0x9c
 800229e:	58e3      	ldr	r3, [r4, r3]
 80022a0:	4658      	mov	r0, fp
 80022a2:	1c19      	adds	r1, r3, #0
 80022a4:	469a      	mov	sl, r3
 80022a6:	f001 fefb 	bl	80040a0 <__aeabi_fsub>
 80022aa:	4651      	mov	r1, sl
 80022ac:	60a0      	str	r0, [r4, #8]
 80022ae:	4658      	mov	r0, fp
 80022b0:	f001 fa3e 	bl	8003730 <__aeabi_fadd>
 80022b4:	464b      	mov	r3, r9
 80022b6:	60e0      	str	r0, [r4, #12]
 80022b8:	51a3      	str	r3, [r4, r6]
 80022ba:	e715      	b.n	80020e8 <inv_check_magnetic_disturbance+0x11c>
 80022bc:	2000044c 	.word	0x2000044c
 80022c0:	bf800000 	.word	0xbf800000
 80022c4:	42700000 	.word	0x42700000
 80022c8:	41f00000 	.word	0x41f00000
 80022cc:	c2b40000 	.word	0xc2b40000
 80022d0:	42b40000 	.word	0x42b40000
 80022d4:	41200000 	.word	0x41200000

080022d8 <inv_magnetic_disturbance_process>:
 80022d8:	b570      	push	{r4, r5, r6, lr}
 80022da:	b088      	sub	sp, #32
 80022dc:	1c04      	adds	r4, r0, #0
 80022de:	a801      	add	r0, sp, #4
 80022e0:	f00d f8ec 	bl	800f4bc <inv_get_gravity>
 80022e4:	22c4      	movs	r2, #196	; 0xc4
 80022e6:	23c0      	movs	r3, #192	; 0xc0
 80022e8:	58a5      	ldr	r5, [r4, r2]
 80022ea:	58e3      	ldr	r3, [r4, r3]
 80022ec:	a804      	add	r0, sp, #16
 80022ee:	1b5d      	subs	r5, r3, r5
 80022f0:	f00d f934 	bl	800f55c <inv_get_6axis_quaternion>
 80022f4:	1c22      	adds	r2, r4, #0
 80022f6:	1c06      	adds	r6, r0, #0
 80022f8:	32a0      	adds	r2, #160	; 0xa0
 80022fa:	a904      	add	r1, sp, #16
 80022fc:	ab01      	add	r3, sp, #4
 80022fe:	1c28      	adds	r0, r5, #0
 8002300:	f7ff fe64 	bl	8001fcc <inv_check_magnetic_disturbance>
 8002304:	f008 f972 	bl	800a5ec <inv_set_compass_disturbance>
 8002308:	1c30      	adds	r0, r6, #0
 800230a:	b008      	add	sp, #32
 800230c:	bd70      	pop	{r4, r5, r6, pc}
 800230e:	46c0      	nop			; (mov r8, r8)

08002310 <inv_get_magnetic_disturbance_state>:
 8002310:	4b01      	ldr	r3, [pc, #4]	; (8002318 <inv_get_magnetic_disturbance_state+0x8>)
 8002312:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8002314:	4770      	bx	lr
 8002316:	46c0      	nop			; (mov r8, r8)
 8002318:	2000044c 	.word	0x2000044c

0800231c <inv_run_motion_no_motion>:
 800231c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800231e:	464d      	mov	r5, r9
 8002320:	4644      	mov	r4, r8
 8002322:	465f      	mov	r7, fp
 8002324:	4656      	mov	r6, sl
 8002326:	4681      	mov	r9, r0
 8002328:	20fe      	movs	r0, #254	; 0xfe
 800232a:	b4f0      	push	{r4, r5, r6, r7}
 800232c:	4d45      	ldr	r5, [pc, #276]	; (8002444 <inv_run_motion_no_motion+0x128>)
 800232e:	b087      	sub	sp, #28
 8002330:	68af      	ldr	r7, [r5, #8]
 8002332:	0580      	lsls	r0, r0, #22
 8002334:	1c39      	adds	r1, r7, #0
 8002336:	f001 feb3 	bl	80040a0 <__aeabi_fsub>
 800233a:	464b      	mov	r3, r9
 800233c:	4680      	mov	r8, r0
 800233e:	2400      	movs	r4, #0
 8002340:	1d1e      	adds	r6, r3, #4
 8002342:	2300      	movs	r3, #0
 8002344:	5ef0      	ldrsh	r0, [r6, r3]
 8002346:	3602      	adds	r6, #2
 8002348:	0400      	lsls	r0, r0, #16
 800234a:	f002 f87f 	bl	800444c <__aeabi_i2f>
 800234e:	466b      	mov	r3, sp
 8002350:	5118      	str	r0, [r3, r4]
 8002352:	2314      	movs	r3, #20
 8002354:	469a      	mov	sl, r3
 8002356:	1c39      	adds	r1, r7, #0
 8002358:	44aa      	add	sl, r5
 800235a:	f001 fd53 	bl	8003e04 <__aeabi_fmul>
 800235e:	4653      	mov	r3, sl
 8002360:	4683      	mov	fp, r0
 8002362:	58e1      	ldr	r1, [r4, r3]
 8002364:	4640      	mov	r0, r8
 8002366:	f001 fd4d 	bl	8003e04 <__aeabi_fmul>
 800236a:	1c01      	adds	r1, r0, #0
 800236c:	4658      	mov	r0, fp
 800236e:	f001 f9df 	bl	8003730 <__aeabi_fadd>
 8002372:	4653      	mov	r3, sl
 8002374:	50e0      	str	r0, [r4, r3]
 8002376:	3404      	adds	r4, #4
 8002378:	2c0c      	cmp	r4, #12
 800237a:	d1e2      	bne.n	8002342 <inv_run_motion_no_motion+0x26>
 800237c:	9900      	ldr	r1, [sp, #0]
 800237e:	6968      	ldr	r0, [r5, #20]
 8002380:	f001 fe8e 	bl	80040a0 <__aeabi_fsub>
 8002384:	9901      	ldr	r1, [sp, #4]
 8002386:	1c07      	adds	r7, r0, #0
 8002388:	69a8      	ldr	r0, [r5, #24]
 800238a:	f001 fe89 	bl	80040a0 <__aeabi_fsub>
 800238e:	9902      	ldr	r1, [sp, #8]
 8002390:	1c06      	adds	r6, r0, #0
 8002392:	69e8      	ldr	r0, [r5, #28]
 8002394:	f001 fe84 	bl	80040a0 <__aeabi_fsub>
 8002398:	1c39      	adds	r1, r7, #0
 800239a:	1c04      	adds	r4, r0, #0
 800239c:	1c38      	adds	r0, r7, #0
 800239e:	f001 fd31 	bl	8003e04 <__aeabi_fmul>
 80023a2:	1c31      	adds	r1, r6, #0
 80023a4:	1c07      	adds	r7, r0, #0
 80023a6:	1c30      	adds	r0, r6, #0
 80023a8:	f001 fd2c 	bl	8003e04 <__aeabi_fmul>
 80023ac:	1c01      	adds	r1, r0, #0
 80023ae:	1c38      	adds	r0, r7, #0
 80023b0:	f001 f9be 	bl	8003730 <__aeabi_fadd>
 80023b4:	1c21      	adds	r1, r4, #0
 80023b6:	1c06      	adds	r6, r0, #0
 80023b8:	1c20      	adds	r0, r4, #0
 80023ba:	f001 fd23 	bl	8003e04 <__aeabi_fmul>
 80023be:	1c01      	adds	r1, r0, #0
 80023c0:	1c30      	adds	r0, r6, #0
 80023c2:	f001 f9b5 	bl	8003730 <__aeabi_fadd>
 80023c6:	f00d fb17 	bl	800f9f8 <sqrtf>
 80023ca:	68e9      	ldr	r1, [r5, #12]
 80023cc:	f001 f838 	bl	8003440 <__aeabi_fcmpgt>
 80023d0:	2800      	cmp	r0, #0
 80023d2:	d024      	beq.n	800241e <inv_run_motion_no_motion+0x102>
 80023d4:	2300      	movs	r3, #0
 80023d6:	682a      	ldr	r2, [r5, #0]
 80023d8:	606b      	str	r3, [r5, #4]
 80023da:	2a01      	cmp	r2, #1
 80023dc:	d02c      	beq.n	8002438 <inv_run_motion_no_motion+0x11c>
 80023de:	692a      	ldr	r2, [r5, #16]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	da14      	bge.n	800240e <inv_run_motion_no_motion+0xf2>
 80023e4:	682b      	ldr	r3, [r5, #0]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d020      	beq.n	800242c <inv_run_motion_no_motion+0x110>
 80023ea:	6968      	ldr	r0, [r5, #20]
 80023ec:	f002 f80e 	bl	800440c <__aeabi_f2iz>
 80023f0:	9003      	str	r0, [sp, #12]
 80023f2:	69a8      	ldr	r0, [r5, #24]
 80023f4:	f002 f80a 	bl	800440c <__aeabi_f2iz>
 80023f8:	9004      	str	r0, [sp, #16]
 80023fa:	69e8      	ldr	r0, [r5, #28]
 80023fc:	f002 f806 	bl	800440c <__aeabi_f2iz>
 8002400:	2300      	movs	r3, #0
 8002402:	9005      	str	r0, [sp, #20]
 8002404:	2103      	movs	r1, #3
 8002406:	a803      	add	r0, sp, #12
 8002408:	606b      	str	r3, [r5, #4]
 800240a:	f008 f935 	bl	800a678 <inv_set_gyro_bias>
 800240e:	2000      	movs	r0, #0
 8002410:	b007      	add	sp, #28
 8002412:	bc3c      	pop	{r2, r3, r4, r5}
 8002414:	4690      	mov	r8, r2
 8002416:	4699      	mov	r9, r3
 8002418:	46a2      	mov	sl, r4
 800241a:	46ab      	mov	fp, r5
 800241c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800241e:	686a      	ldr	r2, [r5, #4]
 8002420:	464b      	mov	r3, r9
 8002422:	4694      	mov	ip, r2
 8002424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002426:	4463      	add	r3, ip
 8002428:	606b      	str	r3, [r5, #4]
 800242a:	e7d8      	b.n	80023de <inv_run_motion_no_motion+0xc2>
 800242c:	2002      	movs	r0, #2
 800242e:	f00c fffd 	bl	800f42c <inv_set_motion_state>
 8002432:	2301      	movs	r3, #1
 8002434:	602b      	str	r3, [r5, #0]
 8002436:	e7d8      	b.n	80023ea <inv_run_motion_no_motion+0xce>
 8002438:	2001      	movs	r0, #1
 800243a:	602b      	str	r3, [r5, #0]
 800243c:	f00c fff6 	bl	800f42c <inv_set_motion_state>
 8002440:	686b      	ldr	r3, [r5, #4]
 8002442:	e7cc      	b.n	80023de <inv_run_motion_no_motion+0xc2>
 8002444:	20000504 	.word	0x20000504

08002448 <inv_init_motion_no_motion>:
 8002448:	2200      	movs	r2, #0
 800244a:	4b06      	ldr	r3, [pc, #24]	; (8002464 <inv_init_motion_no_motion+0x1c>)
 800244c:	2000      	movs	r0, #0
 800244e:	601a      	str	r2, [r3, #0]
 8002450:	605a      	str	r2, [r3, #4]
 8002452:	4a05      	ldr	r2, [pc, #20]	; (8002468 <inv_init_motion_no_motion+0x20>)
 8002454:	60da      	str	r2, [r3, #12]
 8002456:	4a05      	ldr	r2, [pc, #20]	; (800246c <inv_init_motion_no_motion+0x24>)
 8002458:	609a      	str	r2, [r3, #8]
 800245a:	22fa      	movs	r2, #250	; 0xfa
 800245c:	0152      	lsls	r2, r2, #5
 800245e:	611a      	str	r2, [r3, #16]
 8002460:	4770      	bx	lr
 8002462:	46c0      	nop			; (mov r8, r8)
 8002464:	20000504 	.word	0x20000504
 8002468:	49435000 	.word	0x49435000
 800246c:	3d4ccccd 	.word	0x3d4ccccd

08002470 <inv_start_motion_no_motion>:
 8002470:	b508      	push	{r3, lr}
 8002472:	2103      	movs	r1, #3
 8002474:	2200      	movs	r2, #0
 8002476:	2001      	movs	r0, #1
 8002478:	f00b ff90 	bl	800e39c <inv_set_message>
 800247c:	f7ff ffe4 	bl	8002448 <inv_init_motion_no_motion>
 8002480:	4803      	ldr	r0, [pc, #12]	; (8002490 <inv_start_motion_no_motion+0x20>)
 8002482:	2164      	movs	r1, #100	; 0x64
 8002484:	2202      	movs	r2, #2
 8002486:	f008 fa7b 	bl	800a980 <inv_register_data_cb>
 800248a:	2000      	movs	r0, #0
 800248c:	bd08      	pop	{r3, pc}
 800248e:	46c0      	nop			; (mov r8, r8)
 8002490:	0800231d 	.word	0x0800231d

08002494 <inv_enable_motion_no_motion>:
 8002494:	2200      	movs	r2, #0
 8002496:	b508      	push	{r3, lr}
 8002498:	4b06      	ldr	r3, [pc, #24]	; (80024b4 <inv_enable_motion_no_motion+0x20>)
 800249a:	4807      	ldr	r0, [pc, #28]	; (80024b8 <inv_enable_motion_no_motion+0x24>)
 800249c:	601a      	str	r2, [r3, #0]
 800249e:	605a      	str	r2, [r3, #4]
 80024a0:	4a06      	ldr	r2, [pc, #24]	; (80024bc <inv_enable_motion_no_motion+0x28>)
 80024a2:	60da      	str	r2, [r3, #12]
 80024a4:	4a06      	ldr	r2, [pc, #24]	; (80024c0 <inv_enable_motion_no_motion+0x2c>)
 80024a6:	609a      	str	r2, [r3, #8]
 80024a8:	22fa      	movs	r2, #250	; 0xfa
 80024aa:	0152      	lsls	r2, r2, #5
 80024ac:	611a      	str	r2, [r3, #16]
 80024ae:	f00d f9c5 	bl	800f83c <inv_register_mpl_start_notification>
 80024b2:	bd08      	pop	{r3, pc}
 80024b4:	20000504 	.word	0x20000504
 80024b8:	08002471 	.word	0x08002471
 80024bc:	49435000 	.word	0x49435000
 80024c0:	3d4ccccd 	.word	0x3d4ccccd

080024c4 <inv_stop_motion_no_motion>:
 80024c4:	b508      	push	{r3, lr}
 80024c6:	2001      	movs	r0, #1
 80024c8:	f00c ffb0 	bl	800f42c <inv_set_motion_state>
 80024cc:	4801      	ldr	r0, [pc, #4]	; (80024d4 <inv_stop_motion_no_motion+0x10>)
 80024ce:	f008 fb01 	bl	800aad4 <inv_unregister_data_cb>
 80024d2:	bd08      	pop	{r3, pc}
 80024d4:	0800231d 	.word	0x0800231d

080024d8 <inv_disable_motion_no_motion>:
 80024d8:	b508      	push	{r3, lr}
 80024da:	f7ff fff3 	bl	80024c4 <inv_stop_motion_no_motion>
 80024de:	4802      	ldr	r0, [pc, #8]	; (80024e8 <inv_disable_motion_no_motion+0x10>)
 80024e0:	f00d f9ac 	bl	800f83c <inv_register_mpl_start_notification>
 80024e4:	bd08      	pop	{r3, pc}
 80024e6:	46c0      	nop			; (mov r8, r8)
 80024e8:	08002471 	.word	0x08002471

080024ec <inv_set_no_motion_time>:
 80024ec:	4b01      	ldr	r3, [pc, #4]	; (80024f4 <inv_set_no_motion_time+0x8>)
 80024ee:	6118      	str	r0, [r3, #16]
 80024f0:	2000      	movs	r0, #0
 80024f2:	4770      	bx	lr
 80024f4:	20000504 	.word	0x20000504

080024f8 <inv_normalize_quat>:
 80024f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024fa:	464f      	mov	r7, r9
 80024fc:	4646      	mov	r6, r8
 80024fe:	1c04      	adds	r4, r0, #0
 8002500:	b4c0      	push	{r6, r7}
 8002502:	6800      	ldr	r0, [r0, #0]
 8002504:	1c0d      	adds	r5, r1, #0
 8002506:	f001 ffa1 	bl	800444c <__aeabi_i2f>
 800250a:	4681      	mov	r9, r0
 800250c:	6860      	ldr	r0, [r4, #4]
 800250e:	f001 ff9d 	bl	800444c <__aeabi_i2f>
 8002512:	4680      	mov	r8, r0
 8002514:	68a0      	ldr	r0, [r4, #8]
 8002516:	f001 ff99 	bl	800444c <__aeabi_i2f>
 800251a:	1c07      	adds	r7, r0, #0
 800251c:	68e0      	ldr	r0, [r4, #12]
 800251e:	f001 ff95 	bl	800444c <__aeabi_i2f>
 8002522:	4649      	mov	r1, r9
 8002524:	1c06      	adds	r6, r0, #0
 8002526:	4648      	mov	r0, r9
 8002528:	f001 fc6c 	bl	8003e04 <__aeabi_fmul>
 800252c:	4641      	mov	r1, r8
 800252e:	4681      	mov	r9, r0
 8002530:	4640      	mov	r0, r8
 8002532:	f001 fc67 	bl	8003e04 <__aeabi_fmul>
 8002536:	1c01      	adds	r1, r0, #0
 8002538:	4648      	mov	r0, r9
 800253a:	f001 f8f9 	bl	8003730 <__aeabi_fadd>
 800253e:	1c39      	adds	r1, r7, #0
 8002540:	4680      	mov	r8, r0
 8002542:	1c38      	adds	r0, r7, #0
 8002544:	f001 fc5e 	bl	8003e04 <__aeabi_fmul>
 8002548:	1c01      	adds	r1, r0, #0
 800254a:	4640      	mov	r0, r8
 800254c:	f001 f8f0 	bl	8003730 <__aeabi_fadd>
 8002550:	1c31      	adds	r1, r6, #0
 8002552:	1c07      	adds	r7, r0, #0
 8002554:	1c30      	adds	r0, r6, #0
 8002556:	f001 fc55 	bl	8003e04 <__aeabi_fmul>
 800255a:	1c01      	adds	r1, r0, #0
 800255c:	1c38      	adds	r0, r7, #0
 800255e:	f001 f8e7 	bl	8003730 <__aeabi_fadd>
 8002562:	2100      	movs	r1, #0
 8002564:	1c06      	adds	r6, r0, #0
 8002566:	f000 ff61 	bl	800342c <__aeabi_fcmple>
 800256a:	2800      	cmp	r0, #0
 800256c:	d134      	bne.n	80025d8 <inv_normalize_quat+0xe0>
 800256e:	1c30      	adds	r0, r6, #0
 8002570:	f00d fa42 	bl	800f9f8 <sqrtf>
 8002574:	1c01      	adds	r1, r0, #0
 8002576:	20fe      	movs	r0, #254	; 0xfe
 8002578:	0580      	lsls	r0, r0, #22
 800257a:	f001 fa79 	bl	8003a70 <__aeabi_fdiv>
 800257e:	219d      	movs	r1, #157	; 0x9d
 8002580:	05c9      	lsls	r1, r1, #23
 8002582:	f001 fc3f 	bl	8003e04 <__aeabi_fmul>
 8002586:	1c06      	adds	r6, r0, #0
 8002588:	6820      	ldr	r0, [r4, #0]
 800258a:	f001 ff5f 	bl	800444c <__aeabi_i2f>
 800258e:	1c31      	adds	r1, r6, #0
 8002590:	f001 fc38 	bl	8003e04 <__aeabi_fmul>
 8002594:	f001 ff3a 	bl	800440c <__aeabi_f2iz>
 8002598:	6028      	str	r0, [r5, #0]
 800259a:	6860      	ldr	r0, [r4, #4]
 800259c:	f001 ff56 	bl	800444c <__aeabi_i2f>
 80025a0:	1c31      	adds	r1, r6, #0
 80025a2:	f001 fc2f 	bl	8003e04 <__aeabi_fmul>
 80025a6:	f001 ff31 	bl	800440c <__aeabi_f2iz>
 80025aa:	6068      	str	r0, [r5, #4]
 80025ac:	68a0      	ldr	r0, [r4, #8]
 80025ae:	f001 ff4d 	bl	800444c <__aeabi_i2f>
 80025b2:	1c31      	adds	r1, r6, #0
 80025b4:	f001 fc26 	bl	8003e04 <__aeabi_fmul>
 80025b8:	f001 ff28 	bl	800440c <__aeabi_f2iz>
 80025bc:	60a8      	str	r0, [r5, #8]
 80025be:	68e0      	ldr	r0, [r4, #12]
 80025c0:	f001 ff44 	bl	800444c <__aeabi_i2f>
 80025c4:	1c31      	adds	r1, r6, #0
 80025c6:	f001 fc1d 	bl	8003e04 <__aeabi_fmul>
 80025ca:	f001 ff1f 	bl	800440c <__aeabi_f2iz>
 80025ce:	60e8      	str	r0, [r5, #12]
 80025d0:	bc0c      	pop	{r2, r3}
 80025d2:	4690      	mov	r8, r2
 80025d4:	4699      	mov	r9, r3
 80025d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80025d8:	2380      	movs	r3, #128	; 0x80
 80025da:	05db      	lsls	r3, r3, #23
 80025dc:	602b      	str	r3, [r5, #0]
 80025de:	2300      	movs	r3, #0
 80025e0:	606b      	str	r3, [r5, #4]
 80025e2:	60ab      	str	r3, [r5, #8]
 80025e4:	60eb      	str	r3, [r5, #12]
 80025e6:	e7f3      	b.n	80025d0 <inv_normalize_quat+0xd8>

080025e8 <inv_start_quaternion>:
 80025e8:	b508      	push	{r3, lr}
 80025ea:	4b08      	ldr	r3, [pc, #32]	; (800260c <inv_start_quaternion+0x24>)
 80025ec:	4908      	ldr	r1, [pc, #32]	; (8002610 <inv_start_quaternion+0x28>)
 80025ee:	6818      	ldr	r0, [r3, #0]
 80025f0:	2208      	movs	r2, #8
 80025f2:	f00f fc77 	bl	8011ee4 <memcmp>
 80025f6:	1c03      	adds	r3, r0, #0
 80025f8:	2032      	movs	r0, #50	; 0x32
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d000      	beq.n	8002600 <inv_start_quaternion+0x18>
 80025fe:	bd08      	pop	{r3, pc}
 8002600:	21c8      	movs	r1, #200	; 0xc8
 8002602:	2213      	movs	r2, #19
 8002604:	4803      	ldr	r0, [pc, #12]	; (8002614 <inv_start_quaternion+0x2c>)
 8002606:	f008 f9bb 	bl	800a980 <inv_register_data_cb>
 800260a:	e7f8      	b.n	80025fe <inv_start_quaternion+0x16>
 800260c:	20000000 	.word	0x20000000
 8002610:	08016708 	.word	0x08016708
 8002614:	08002f89 	.word	0x08002f89

08002618 <inv_generate_gyro_quaternion.part.1>:
 8002618:	b570      	push	{r4, r5, r6, lr}
 800261a:	6986      	ldr	r6, [r0, #24]
 800261c:	b08a      	sub	sp, #40	; 0x28
 800261e:	17f3      	asrs	r3, r6, #31
 8002620:	18f2      	adds	r2, r6, r3
 8002622:	405a      	eors	r2, r3
 8002624:	4b42      	ldr	r3, [pc, #264]	; (8002730 <inv_generate_gyro_quaternion.part.1+0x118>)
 8002626:	429a      	cmp	r2, r3
 8002628:	dc5b      	bgt.n	80026e2 <inv_generate_gyro_quaternion.part.1+0xca>
 800262a:	69c2      	ldr	r2, [r0, #28]
 800262c:	17d1      	asrs	r1, r2, #31
 800262e:	1852      	adds	r2, r2, r1
 8002630:	404a      	eors	r2, r1
 8002632:	429a      	cmp	r2, r3
 8002634:	dd5e      	ble.n	80026f4 <inv_generate_gyro_quaternion.part.1+0xdc>
 8002636:	23c8      	movs	r3, #200	; 0xc8
 8002638:	03db      	lsls	r3, r3, #15
 800263a:	429a      	cmp	r2, r3
 800263c:	dc00      	bgt.n	8002640 <inv_generate_gyro_quaternion.part.1+0x28>
 800263e:	e074      	b.n	800272a <inv_generate_gyro_quaternion.part.1+0x112>
 8002640:	2303      	movs	r3, #3
 8002642:	4c3c      	ldr	r4, [pc, #240]	; (8002734 <inv_generate_gyro_quaternion.part.1+0x11c>)
 8002644:	1c05      	adds	r5, r0, #0
 8002646:	63a3      	str	r3, [r4, #56]	; 0x38
 8002648:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800264a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800264c:	4283      	cmp	r3, r0
 800264e:	d066      	beq.n	800271e <inv_generate_gyro_quaternion.part.1+0x106>
 8002650:	6360      	str	r0, [r4, #52]	; 0x34
 8002652:	f001 fefb 	bl	800444c <__aeabi_i2f>
 8002656:	4938      	ldr	r1, [pc, #224]	; (8002738 <inv_generate_gyro_quaternion.part.1+0x120>)
 8002658:	f001 fa0a 	bl	8003a70 <__aeabi_fdiv>
 800265c:	219c      	movs	r1, #156	; 0x9c
 800265e:	05c9      	lsls	r1, r1, #23
 8002660:	f001 fbd0 	bl	8003e04 <__aeabi_fmul>
 8002664:	f003 fdd4 	bl	8006210 <__aeabi_f2d>
 8002668:	4a34      	ldr	r2, [pc, #208]	; (800273c <inv_generate_gyro_quaternion.part.1+0x124>)
 800266a:	4b35      	ldr	r3, [pc, #212]	; (8002740 <inv_generate_gyro_quaternion.part.1+0x128>)
 800266c:	f002 fee2 	bl	8005434 <__aeabi_dmul>
 8002670:	2200      	movs	r2, #0
 8002672:	4b34      	ldr	r3, [pc, #208]	; (8002744 <inv_generate_gyro_quaternion.part.1+0x12c>)
 8002674:	f002 fede 	bl	8005434 <__aeabi_dmul>
 8002678:	2200      	movs	r2, #0
 800267a:	4b33      	ldr	r3, [pc, #204]	; (8002748 <inv_generate_gyro_quaternion.part.1+0x130>)
 800267c:	f002 fae0 	bl	8004c40 <__aeabi_ddiv>
 8002680:	f003 fd3a 	bl	80060f8 <__aeabi_d2iz>
 8002684:	1c01      	adds	r1, r0, #0
 8002686:	6320      	str	r0, [r4, #48]	; 0x30
 8002688:	2300      	movs	r3, #0
 800268a:	1c30      	adds	r0, r6, #0
 800268c:	9302      	str	r3, [sp, #8]
 800268e:	f00b ff82 	bl	800e596 <inv_q30_mult>
 8002692:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002694:	9003      	str	r0, [sp, #12]
 8002696:	69e8      	ldr	r0, [r5, #28]
 8002698:	f00b ff7d 	bl	800e596 <inv_q30_mult>
 800269c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800269e:	9004      	str	r0, [sp, #16]
 80026a0:	6a28      	ldr	r0, [r5, #32]
 80026a2:	f00b ff78 	bl	800e596 <inv_q30_mult>
 80026a6:	a902      	add	r1, sp, #8
 80026a8:	9005      	str	r0, [sp, #20]
 80026aa:	aa06      	add	r2, sp, #24
 80026ac:	1c20      	adds	r0, r4, #0
 80026ae:	f00b ff95 	bl	800e5dc <inv_q_mult>
 80026b2:	9b06      	ldr	r3, [sp, #24]
 80026b4:	1c20      	adds	r0, r4, #0
 80026b6:	019b      	lsls	r3, r3, #6
 80026b8:	9306      	str	r3, [sp, #24]
 80026ba:	9b07      	ldr	r3, [sp, #28]
 80026bc:	a906      	add	r1, sp, #24
 80026be:	019b      	lsls	r3, r3, #6
 80026c0:	9307      	str	r3, [sp, #28]
 80026c2:	9b08      	ldr	r3, [sp, #32]
 80026c4:	1c22      	adds	r2, r4, #0
 80026c6:	019b      	lsls	r3, r3, #6
 80026c8:	9308      	str	r3, [sp, #32]
 80026ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80026cc:	9301      	str	r3, [sp, #4]
 80026ce:	019b      	lsls	r3, r3, #6
 80026d0:	9309      	str	r3, [sp, #36]	; 0x24
 80026d2:	f00c f84c 	bl	800e76e <inv_q_add>
 80026d6:	1c20      	adds	r0, r4, #0
 80026d8:	1c21      	adds	r1, r4, #0
 80026da:	f7ff ff0d 	bl	80024f8 <inv_normalize_quat>
 80026de:	b00a      	add	sp, #40	; 0x28
 80026e0:	bd70      	pop	{r4, r5, r6, pc}
 80026e2:	23c8      	movs	r3, #200	; 0xc8
 80026e4:	03db      	lsls	r3, r3, #15
 80026e6:	429a      	cmp	r2, r3
 80026e8:	dcaa      	bgt.n	8002640 <inv_generate_gyro_quaternion.part.1+0x28>
 80026ea:	69c3      	ldr	r3, [r0, #28]
 80026ec:	17d9      	asrs	r1, r3, #31
 80026ee:	185a      	adds	r2, r3, r1
 80026f0:	404a      	eors	r2, r1
 80026f2:	e7a0      	b.n	8002636 <inv_generate_gyro_quaternion.part.1+0x1e>
 80026f4:	6a02      	ldr	r2, [r0, #32]
 80026f6:	17d4      	asrs	r4, r2, #31
 80026f8:	1911      	adds	r1, r2, r4
 80026fa:	4061      	eors	r1, r4
 80026fc:	4299      	cmp	r1, r3
 80026fe:	dd10      	ble.n	8002722 <inv_generate_gyro_quaternion.part.1+0x10a>
 8002700:	17d3      	asrs	r3, r2, #31
 8002702:	18d2      	adds	r2, r2, r3
 8002704:	405a      	eors	r2, r3
 8002706:	23c8      	movs	r3, #200	; 0xc8
 8002708:	03db      	lsls	r3, r3, #15
 800270a:	429a      	cmp	r2, r3
 800270c:	dc98      	bgt.n	8002640 <inv_generate_gyro_quaternion.part.1+0x28>
 800270e:	2302      	movs	r3, #2
 8002710:	4c08      	ldr	r4, [pc, #32]	; (8002734 <inv_generate_gyro_quaternion.part.1+0x11c>)
 8002712:	1c05      	adds	r5, r0, #0
 8002714:	63a3      	str	r3, [r4, #56]	; 0x38
 8002716:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8002718:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800271a:	4283      	cmp	r3, r0
 800271c:	d198      	bne.n	8002650 <inv_generate_gyro_quaternion.part.1+0x38>
 800271e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002720:	e7b2      	b.n	8002688 <inv_generate_gyro_quaternion.part.1+0x70>
 8002722:	2200      	movs	r2, #0
 8002724:	4b03      	ldr	r3, [pc, #12]	; (8002734 <inv_generate_gyro_quaternion.part.1+0x11c>)
 8002726:	639a      	str	r2, [r3, #56]	; 0x38
 8002728:	e7d9      	b.n	80026de <inv_generate_gyro_quaternion.part.1+0xc6>
 800272a:	6a02      	ldr	r2, [r0, #32]
 800272c:	e7e8      	b.n	8002700 <inv_generate_gyro_quaternion.part.1+0xe8>
 800272e:	46c0      	nop			; (mov r8, r8)
 8002730:	0000ffff 	.word	0x0000ffff
 8002734:	20000524 	.word	0x20000524
 8002738:	49742400 	.word	0x49742400
 800273c:	54442d18 	.word	0x54442d18
 8002740:	400921fb 	.word	0x400921fb
 8002744:	40700000 	.word	0x40700000
 8002748:	40668000 	.word	0x40668000

0800274c <inv_generate_gyro_quaternion>:
 800274c:	b508      	push	{r3, lr}
 800274e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002750:	065b      	lsls	r3, r3, #25
 8002752:	d501      	bpl.n	8002758 <inv_generate_gyro_quaternion+0xc>
 8002754:	f7ff ff60 	bl	8002618 <inv_generate_gyro_quaternion.part.1>
 8002758:	bd08      	pop	{r3, pc}
 800275a:	46c0      	nop			; (mov r8, r8)

0800275c <inv_set_quaternion>:
 800275c:	b530      	push	{r4, r5, lr}
 800275e:	4c0a      	ldr	r4, [pc, #40]	; (8002788 <inv_set_quaternion+0x2c>)
 8002760:	b085      	sub	sp, #20
 8002762:	1c05      	adds	r5, r0, #0
 8002764:	4669      	mov	r1, sp
 8002766:	1c20      	adds	r0, r4, #0
 8002768:	f00c f830 	bl	800e7cc <inv_q_invert>
 800276c:	1c22      	adds	r2, r4, #0
 800276e:	1c28      	adds	r0, r5, #0
 8002770:	4669      	mov	r1, sp
 8002772:	3220      	adds	r2, #32
 8002774:	f00b ff32 	bl	800e5dc <inv_q_mult>
 8002778:	1c20      	adds	r0, r4, #0
 800277a:	1c29      	adds	r1, r5, #0
 800277c:	2210      	movs	r2, #16
 800277e:	3010      	adds	r0, #16
 8002780:	f00f fc64 	bl	801204c <memcpy>
 8002784:	b005      	add	sp, #20
 8002786:	bd30      	pop	{r4, r5, pc}
 8002788:	20000524 	.word	0x20000524

0800278c <inv_generate_accel_gyro_quaternion>:
 800278c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800278e:	4644      	mov	r4, r8
 8002790:	465f      	mov	r7, fp
 8002792:	4656      	mov	r6, sl
 8002794:	464d      	mov	r5, r9
 8002796:	2250      	movs	r2, #80	; 0x50
 8002798:	b4f0      	push	{r4, r5, r6, r7}
 800279a:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800279c:	b09f      	sub	sp, #124	; 0x7c
 800279e:	1c04      	adds	r4, r0, #0
 80027a0:	4013      	ands	r3, r2
 80027a2:	2b40      	cmp	r3, #64	; 0x40
 80027a4:	d100      	bne.n	80027a8 <inv_generate_accel_gyro_quaternion+0x1c>
 80027a6:	e2c1      	b.n	8002d2c <inv_generate_accel_gyro_quaternion+0x5a0>
 80027a8:	2690      	movs	r6, #144	; 0x90
 80027aa:	0076      	lsls	r6, r6, #1
 80027ac:	5983      	ldr	r3, [r0, r6]
 80027ae:	4dc2      	ldr	r5, [pc, #776]	; (8002ab8 <inv_generate_accel_gyro_quaternion+0x32c>)
 80027b0:	401a      	ands	r2, r3
 80027b2:	2a40      	cmp	r2, #64	; 0x40
 80027b4:	d100      	bne.n	80027b8 <inv_generate_accel_gyro_quaternion+0x2c>
 80027b6:	e389      	b.n	8002ecc <inv_generate_accel_gyro_quaternion+0x740>
 80027b8:	05da      	lsls	r2, r3, #23
 80027ba:	d500      	bpl.n	80027be <inv_generate_accel_gyro_quaternion+0x32>
 80027bc:	e18c      	b.n	8002ad8 <inv_generate_accel_gyro_quaternion+0x34c>
 80027be:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80027c0:	065b      	lsls	r3, r3, #25
 80027c2:	d500      	bpl.n	80027c6 <inv_generate_accel_gyro_quaternion+0x3a>
 80027c4:	e268      	b.n	8002c98 <inv_generate_accel_gyro_quaternion+0x50c>
 80027c6:	1c2f      	adds	r7, r5, #0
 80027c8:	1c28      	adds	r0, r5, #0
 80027ca:	3710      	adds	r7, #16
 80027cc:	3020      	adds	r0, #32
 80027ce:	1c29      	adds	r1, r5, #0
 80027d0:	1c3a      	adds	r2, r7, #0
 80027d2:	f00b ff03 	bl	800e5dc <inv_q_mult>
 80027d6:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80027d8:	065b      	lsls	r3, r3, #25
 80027da:	d572      	bpl.n	80028c2 <inv_generate_accel_gyro_quaternion+0x136>
 80027dc:	2390      	movs	r3, #144	; 0x90
 80027de:	005b      	lsls	r3, r3, #1
 80027e0:	58e3      	ldr	r3, [r4, r3]
 80027e2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80027e4:	4313      	orrs	r3, r2
 80027e6:	05db      	lsls	r3, r3, #23
 80027e8:	d400      	bmi.n	80027ec <inv_generate_accel_gyro_quaternion+0x60>
 80027ea:	e072      	b.n	80028d2 <inv_generate_accel_gyro_quaternion+0x146>
 80027ec:	1c21      	adds	r1, r4, #0
 80027ee:	ae12      	add	r6, sp, #72	; 0x48
 80027f0:	1c38      	adds	r0, r7, #0
 80027f2:	315c      	adds	r1, #92	; 0x5c
 80027f4:	1c32      	adds	r2, r6, #0
 80027f6:	f00c f80b 	bl	800e810 <inv_q_rotate>
 80027fa:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80027fc:	6e67      	ldr	r7, [r4, #100]	; 0x64
 80027fe:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002800:	4690      	mov	r8, r2
 8002802:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8002804:	17d2      	asrs	r2, r2, #31
 8002806:	17db      	asrs	r3, r3, #31
 8002808:	4692      	mov	sl, r2
 800280a:	17fa      	asrs	r2, r7, #31
 800280c:	4691      	mov	r9, r2
 800280e:	1c19      	adds	r1, r3, #0
 8002810:	1c02      	adds	r2, r0, #0
 8002812:	f000 fe4d 	bl	80034b0 <__aeabi_lmul>
 8002816:	4642      	mov	r2, r8
 8002818:	9000      	str	r0, [sp, #0]
 800281a:	9101      	str	r1, [sp, #4]
 800281c:	4653      	mov	r3, sl
 800281e:	4640      	mov	r0, r8
 8002820:	4651      	mov	r1, sl
 8002822:	f000 fe45 	bl	80034b0 <__aeabi_lmul>
 8002826:	9a00      	ldr	r2, [sp, #0]
 8002828:	9b01      	ldr	r3, [sp, #4]
 800282a:	1812      	adds	r2, r2, r0
 800282c:	414b      	adcs	r3, r1
 800282e:	1c38      	adds	r0, r7, #0
 8002830:	9200      	str	r2, [sp, #0]
 8002832:	9301      	str	r3, [sp, #4]
 8002834:	4649      	mov	r1, r9
 8002836:	1c3a      	adds	r2, r7, #0
 8002838:	464b      	mov	r3, r9
 800283a:	f000 fe39 	bl	80034b0 <__aeabi_lmul>
 800283e:	9a00      	ldr	r2, [sp, #0]
 8002840:	9b01      	ldr	r3, [sp, #4]
 8002842:	1880      	adds	r0, r0, r2
 8002844:	4159      	adcs	r1, r3
 8002846:	2902      	cmp	r1, #2
 8002848:	dd00      	ble.n	800284c <inv_generate_accel_gyro_quaternion+0xc0>
 800284a:	e22d      	b.n	8002ca8 <inv_generate_accel_gyro_quaternion+0x51c>
 800284c:	d100      	bne.n	8002850 <inv_generate_accel_gyro_quaternion+0xc4>
 800284e:	e227      	b.n	8002ca0 <inv_generate_accel_gyro_quaternion+0x514>
 8002850:	6baf      	ldr	r7, [r5, #56]	; 0x38
 8002852:	2f04      	cmp	r7, #4
 8002854:	d100      	bne.n	8002858 <inv_generate_accel_gyro_quaternion+0xcc>
 8002856:	e25a      	b.n	8002d0e <inv_generate_accel_gyro_quaternion+0x582>
 8002858:	1ebb      	subs	r3, r7, #2
 800285a:	2b01      	cmp	r3, #1
 800285c:	d800      	bhi.n	8002860 <inv_generate_accel_gyro_quaternion+0xd4>
 800285e:	e258      	b.n	8002d12 <inv_generate_accel_gyro_quaternion+0x586>
 8002860:	2001      	movs	r0, #1
 8002862:	2f01      	cmp	r7, #1
 8002864:	d100      	bne.n	8002868 <inv_generate_accel_gyro_quaternion+0xdc>
 8002866:	e36a      	b.n	8002f3e <inv_generate_accel_gyro_quaternion+0x7b2>
 8002868:	0084      	lsls	r4, r0, #2
 800286a:	4894      	ldr	r0, [pc, #592]	; (8002abc <inv_generate_accel_gyro_quaternion+0x330>)
 800286c:	4344      	muls	r4, r0
 800286e:	2700      	movs	r7, #0
 8002870:	6870      	ldr	r0, [r6, #4]
 8002872:	1c21      	adds	r1, r4, #0
 8002874:	0280      	lsls	r0, r0, #10
 8002876:	9716      	str	r7, [sp, #88]	; 0x58
 8002878:	f00b fe8d 	bl	800e596 <inv_q30_mult>
 800287c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800287e:	9017      	str	r0, [sp, #92]	; 0x5c
 8002880:	4258      	negs	r0, r3
 8002882:	1c21      	adds	r1, r4, #0
 8002884:	0280      	lsls	r0, r0, #10
 8002886:	1c2c      	adds	r4, r5, #0
 8002888:	f00b fe85 	bl	800e596 <inv_q30_mult>
 800288c:	3410      	adds	r4, #16
 800288e:	9018      	str	r0, [sp, #96]	; 0x60
 8002890:	1c21      	adds	r1, r4, #0
 8002892:	a816      	add	r0, sp, #88	; 0x58
 8002894:	aa1a      	add	r2, sp, #104	; 0x68
 8002896:	9719      	str	r7, [sp, #100]	; 0x64
 8002898:	f00b fea0 	bl	800e5dc <inv_q_mult>
 800289c:	1c22      	adds	r2, r4, #0
 800289e:	1c20      	adds	r0, r4, #0
 80028a0:	a91a      	add	r1, sp, #104	; 0x68
 80028a2:	f00b ff64 	bl	800e76e <inv_q_add>
 80028a6:	1c20      	adds	r0, r4, #0
 80028a8:	1c21      	adds	r1, r4, #0
 80028aa:	f7ff fe25 	bl	80024f8 <inv_normalize_quat>
 80028ae:	1c28      	adds	r0, r5, #0
 80028b0:	a902      	add	r1, sp, #8
 80028b2:	f00b ff8b 	bl	800e7cc <inv_q_invert>
 80028b6:	1c2a      	adds	r2, r5, #0
 80028b8:	1c20      	adds	r0, r4, #0
 80028ba:	3220      	adds	r2, #32
 80028bc:	a902      	add	r1, sp, #8
 80028be:	f00b fe8d 	bl	800e5dc <inv_q_mult>
 80028c2:	2000      	movs	r0, #0
 80028c4:	b01f      	add	sp, #124	; 0x7c
 80028c6:	bc3c      	pop	{r2, r3, r4, r5}
 80028c8:	4690      	mov	r8, r2
 80028ca:	4699      	mov	r9, r3
 80028cc:	46a2      	mov	sl, r4
 80028ce:	46ab      	mov	fp, r5
 80028d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028d2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80028d4:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80028d6:	4698      	mov	r8, r3
 80028d8:	f001 fdb8 	bl	800444c <__aeabi_i2f>
 80028dc:	4681      	mov	r9, r0
 80028de:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80028e0:	f001 fdb4 	bl	800444c <__aeabi_i2f>
 80028e4:	1c07      	adds	r7, r0, #0
 80028e6:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80028e8:	f001 fdb0 	bl	800444c <__aeabi_i2f>
 80028ec:	4649      	mov	r1, r9
 80028ee:	1c06      	adds	r6, r0, #0
 80028f0:	4648      	mov	r0, r9
 80028f2:	f001 fa87 	bl	8003e04 <__aeabi_fmul>
 80028f6:	1c39      	adds	r1, r7, #0
 80028f8:	4681      	mov	r9, r0
 80028fa:	1c38      	adds	r0, r7, #0
 80028fc:	f001 fa82 	bl	8003e04 <__aeabi_fmul>
 8002900:	1c01      	adds	r1, r0, #0
 8002902:	4648      	mov	r0, r9
 8002904:	f000 ff14 	bl	8003730 <__aeabi_fadd>
 8002908:	1c31      	adds	r1, r6, #0
 800290a:	1c07      	adds	r7, r0, #0
 800290c:	1c30      	adds	r0, r6, #0
 800290e:	f001 fa79 	bl	8003e04 <__aeabi_fmul>
 8002912:	1c01      	adds	r1, r0, #0
 8002914:	1c38      	adds	r0, r7, #0
 8002916:	f000 ff0b 	bl	8003730 <__aeabi_fadd>
 800291a:	f00d f86d 	bl	800f9f8 <sqrtf>
 800291e:	218d      	movs	r1, #141	; 0x8d
 8002920:	1c06      	adds	r6, r0, #0
 8002922:	0040      	lsls	r0, r0, #1
 8002924:	0840      	lsrs	r0, r0, #1
 8002926:	05c9      	lsls	r1, r1, #23
 8002928:	f000 fd8a 	bl	8003440 <__aeabi_fcmpgt>
 800292c:	2800      	cmp	r0, #0
 800292e:	d100      	bne.n	8002932 <inv_generate_accel_gyro_quaternion+0x1a6>
 8002930:	e0b5      	b.n	8002a9e <inv_generate_accel_gyro_quaternion+0x312>
 8002932:	6928      	ldr	r0, [r5, #16]
 8002934:	f001 fd8a 	bl	800444c <__aeabi_i2f>
 8002938:	21c2      	movs	r1, #194	; 0xc2
 800293a:	0589      	lsls	r1, r1, #22
 800293c:	f001 fa62 	bl	8003e04 <__aeabi_fmul>
 8002940:	901a      	str	r0, [sp, #104]	; 0x68
 8002942:	6968      	ldr	r0, [r5, #20]
 8002944:	f001 fd82 	bl	800444c <__aeabi_i2f>
 8002948:	21c2      	movs	r1, #194	; 0xc2
 800294a:	0589      	lsls	r1, r1, #22
 800294c:	f001 fa5a 	bl	8003e04 <__aeabi_fmul>
 8002950:	af1a      	add	r7, sp, #104	; 0x68
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	69a8      	ldr	r0, [r5, #24]
 8002956:	f001 fd79 	bl	800444c <__aeabi_i2f>
 800295a:	21c2      	movs	r1, #194	; 0xc2
 800295c:	0589      	lsls	r1, r1, #22
 800295e:	f001 fa51 	bl	8003e04 <__aeabi_fmul>
 8002962:	60b8      	str	r0, [r7, #8]
 8002964:	69e8      	ldr	r0, [r5, #28]
 8002966:	f001 fd71 	bl	800444c <__aeabi_i2f>
 800296a:	21c2      	movs	r1, #194	; 0xc2
 800296c:	0589      	lsls	r1, r1, #22
 800296e:	f001 fa49 	bl	8003e04 <__aeabi_fmul>
 8002972:	2300      	movs	r3, #0
 8002974:	60f8      	str	r0, [r7, #12]
 8002976:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8002978:	9316      	str	r3, [sp, #88]	; 0x58
 800297a:	f001 fd67 	bl	800444c <__aeabi_i2f>
 800297e:	1c31      	adds	r1, r6, #0
 8002980:	f001 f876 	bl	8003a70 <__aeabi_fdiv>
 8002984:	9017      	str	r0, [sp, #92]	; 0x5c
 8002986:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8002988:	f001 fd60 	bl	800444c <__aeabi_i2f>
 800298c:	1c31      	adds	r1, r6, #0
 800298e:	f001 f86f 	bl	8003a70 <__aeabi_fdiv>
 8002992:	9018      	str	r0, [sp, #96]	; 0x60
 8002994:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8002996:	f001 fd59 	bl	800444c <__aeabi_i2f>
 800299a:	1c31      	adds	r1, r6, #0
 800299c:	f001 f868 	bl	8003a70 <__aeabi_fdiv>
 80029a0:	aa06      	add	r2, sp, #24
 80029a2:	9019      	str	r0, [sp, #100]	; 0x64
 80029a4:	a916      	add	r1, sp, #88	; 0x58
 80029a6:	1c38      	adds	r0, r7, #0
 80029a8:	f00b ff63 	bl	800e872 <inv_q_multf>
 80029ac:	1c38      	adds	r0, r7, #0
 80029ae:	a90e      	add	r1, sp, #56	; 0x38
 80029b0:	f00c fa61 	bl	800ee76 <inv_q_invertf>
 80029b4:	aa0a      	add	r2, sp, #40	; 0x28
 80029b6:	a806      	add	r0, sp, #24
 80029b8:	a90e      	add	r1, sp, #56	; 0x38
 80029ba:	f00b ff5a 	bl	800e872 <inv_q_multf>
 80029be:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80029c0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80029c2:	1c31      	adds	r1, r6, #0
 80029c4:	1c30      	adds	r0, r6, #0
 80029c6:	f001 fa1d 	bl	8003e04 <__aeabi_fmul>
 80029ca:	1c21      	adds	r1, r4, #0
 80029cc:	4681      	mov	r9, r0
 80029ce:	1c20      	adds	r0, r4, #0
 80029d0:	f001 fa18 	bl	8003e04 <__aeabi_fmul>
 80029d4:	1c01      	adds	r1, r0, #0
 80029d6:	4648      	mov	r0, r9
 80029d8:	f000 feaa 	bl	8003730 <__aeabi_fadd>
 80029dc:	4938      	ldr	r1, [pc, #224]	; (8002ac0 <inv_generate_accel_gyro_quaternion+0x334>)
 80029de:	4681      	mov	r9, r0
 80029e0:	f000 fd1a 	bl	8003418 <__aeabi_fcmplt>
 80029e4:	2800      	cmp	r0, #0
 80029e6:	d110      	bne.n	8002a0a <inv_generate_accel_gyro_quaternion+0x27e>
 80029e8:	4648      	mov	r0, r9
 80029ea:	4936      	ldr	r1, [pc, #216]	; (8002ac4 <inv_generate_accel_gyro_quaternion+0x338>)
 80029ec:	f000 fd14 	bl	8003418 <__aeabi_fcmplt>
 80029f0:	2800      	cmp	r0, #0
 80029f2:	d000      	beq.n	80029f6 <inv_generate_accel_gyro_quaternion+0x26a>
 80029f4:	e2b5      	b.n	8002f62 <inv_generate_accel_gyro_quaternion+0x7d6>
 80029f6:	4648      	mov	r0, r9
 80029f8:	4933      	ldr	r1, [pc, #204]	; (8002ac8 <inv_generate_accel_gyro_quaternion+0x33c>)
 80029fa:	f000 fd0d 	bl	8003418 <__aeabi_fcmplt>
 80029fe:	2800      	cmp	r0, #0
 8002a00:	d000      	beq.n	8002a04 <inv_generate_accel_gyro_quaternion+0x278>
 8002a02:	e28d      	b.n	8002f20 <inv_generate_accel_gyro_quaternion+0x794>
 8002a04:	4b31      	ldr	r3, [pc, #196]	; (8002acc <inv_generate_accel_gyro_quaternion+0x340>)
 8002a06:	4699      	mov	r9, r3
 8002a08:	e001      	b.n	8002a0e <inv_generate_accel_gyro_quaternion+0x282>
 8002a0a:	4b31      	ldr	r3, [pc, #196]	; (8002ad0 <inv_generate_accel_gyro_quaternion+0x344>)
 8002a0c:	4699      	mov	r9, r3
 8002a0e:	4640      	mov	r0, r8
 8002a10:	f001 fd1c 	bl	800444c <__aeabi_i2f>
 8002a14:	492f      	ldr	r1, [pc, #188]	; (8002ad4 <inv_generate_accel_gyro_quaternion+0x348>)
 8002a16:	f001 f82b 	bl	8003a70 <__aeabi_fdiv>
 8002a1a:	4649      	mov	r1, r9
 8002a1c:	f001 f9f2 	bl	8003e04 <__aeabi_fmul>
 8002a20:	4681      	mov	r9, r0
 8002a22:	2300      	movs	r3, #0
 8002a24:	4649      	mov	r1, r9
 8002a26:	1c30      	adds	r0, r6, #0
 8002a28:	4698      	mov	r8, r3
 8002a2a:	9312      	str	r3, [sp, #72]	; 0x48
 8002a2c:	f001 f9ea 	bl	8003e04 <__aeabi_fmul>
 8002a30:	2380      	movs	r3, #128	; 0x80
 8002a32:	061b      	lsls	r3, r3, #24
 8002a34:	18e1      	adds	r1, r4, r3
 8002a36:	9013      	str	r0, [sp, #76]	; 0x4c
 8002a38:	4648      	mov	r0, r9
 8002a3a:	f001 f9e3 	bl	8003e04 <__aeabi_fmul>
 8002a3e:	4643      	mov	r3, r8
 8002a40:	9014      	str	r0, [sp, #80]	; 0x50
 8002a42:	1c39      	adds	r1, r7, #0
 8002a44:	a812      	add	r0, sp, #72	; 0x48
 8002a46:	aa0a      	add	r2, sp, #40	; 0x28
 8002a48:	9315      	str	r3, [sp, #84]	; 0x54
 8002a4a:	f00b ff12 	bl	800e872 <inv_q_multf>
 8002a4e:	a80a      	add	r0, sp, #40	; 0x28
 8002a50:	1c02      	adds	r2, r0, #0
 8002a52:	1c39      	adds	r1, r7, #0
 8002a54:	f00c f818 	bl	800ea88 <inv_q_addf>
 8002a58:	a80a      	add	r0, sp, #40	; 0x28
 8002a5a:	f00c f97f 	bl	800ed5c <inv_q_norm4>
 8002a5e:	219d      	movs	r1, #157	; 0x9d
 8002a60:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002a62:	05c9      	lsls	r1, r1, #23
 8002a64:	f001 f9ce 	bl	8003e04 <__aeabi_fmul>
 8002a68:	f001 fcd0 	bl	800440c <__aeabi_f2iz>
 8002a6c:	219d      	movs	r1, #157	; 0x9d
 8002a6e:	6128      	str	r0, [r5, #16]
 8002a70:	05c9      	lsls	r1, r1, #23
 8002a72:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8002a74:	f001 f9c6 	bl	8003e04 <__aeabi_fmul>
 8002a78:	f001 fcc8 	bl	800440c <__aeabi_f2iz>
 8002a7c:	219d      	movs	r1, #157	; 0x9d
 8002a7e:	6168      	str	r0, [r5, #20]
 8002a80:	05c9      	lsls	r1, r1, #23
 8002a82:	980c      	ldr	r0, [sp, #48]	; 0x30
 8002a84:	f001 f9be 	bl	8003e04 <__aeabi_fmul>
 8002a88:	f001 fcc0 	bl	800440c <__aeabi_f2iz>
 8002a8c:	219d      	movs	r1, #157	; 0x9d
 8002a8e:	61a8      	str	r0, [r5, #24]
 8002a90:	05c9      	lsls	r1, r1, #23
 8002a92:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002a94:	f001 f9b6 	bl	8003e04 <__aeabi_fmul>
 8002a98:	f001 fcb8 	bl	800440c <__aeabi_f2iz>
 8002a9c:	61e8      	str	r0, [r5, #28]
 8002a9e:	1c28      	adds	r0, r5, #0
 8002aa0:	a902      	add	r1, sp, #8
 8002aa2:	f00b fe93 	bl	800e7cc <inv_q_invert>
 8002aa6:	1c28      	adds	r0, r5, #0
 8002aa8:	1c2a      	adds	r2, r5, #0
 8002aaa:	3010      	adds	r0, #16
 8002aac:	3220      	adds	r2, #32
 8002aae:	a902      	add	r1, sp, #8
 8002ab0:	f00b fd94 	bl	800e5dc <inv_q_mult>
 8002ab4:	e705      	b.n	80028c2 <inv_generate_accel_gyro_quaternion+0x136>
 8002ab6:	46c0      	nop			; (mov r8, r8)
 8002ab8:	20000524 	.word	0x20000524
 8002abc:	00c49ba6 	.word	0x00c49ba6
 8002ac0:	3951b717 	.word	0x3951b717
 8002ac4:	3c23d70a 	.word	0x3c23d70a
 8002ac8:	3e4ccccd 	.word	0x3e4ccccd
 8002acc:	3ecccccd 	.word	0x3ecccccd
 8002ad0:	3bc49ba6 	.word	0x3bc49ba6
 8002ad4:	47cd1400 	.word	0x47cd1400
 8002ad8:	065a      	lsls	r2, r3, #25
 8002ada:	d400      	bmi.n	8002ade <inv_generate_accel_gyro_quaternion+0x352>
 8002adc:	e673      	b.n	80027c6 <inv_generate_accel_gyro_quaternion+0x3a>
 8002ade:	2288      	movs	r2, #136	; 0x88
 8002ae0:	0052      	lsls	r2, r2, #1
 8002ae2:	58a1      	ldr	r1, [r4, r2]
 8002ae4:	682a      	ldr	r2, [r5, #0]
 8002ae6:	1a89      	subs	r1, r1, r2
 8002ae8:	2296      	movs	r2, #150	; 0x96
 8002aea:	0052      	lsls	r2, r2, #1
 8002aec:	58a0      	ldr	r0, [r4, r2]
 8002aee:	4aef      	ldr	r2, [pc, #956]	; (8002eac <inv_generate_accel_gyro_quaternion+0x720>)
 8002af0:	4342      	muls	r2, r0
 8002af2:	4291      	cmp	r1, r2
 8002af4:	dc00      	bgt.n	8002af8 <inv_generate_accel_gyro_quaternion+0x36c>
 8002af6:	e1f4      	b.n	8002ee2 <inv_generate_accel_gyro_quaternion+0x756>
 8002af8:	2203      	movs	r2, #3
 8002afa:	63aa      	str	r2, [r5, #56]	; 0x38
 8002afc:	059b      	lsls	r3, r3, #22
 8002afe:	d500      	bpl.n	8002b02 <inv_generate_accel_gyro_quaternion+0x376>
 8002b00:	e1f2      	b.n	8002ee8 <inv_generate_accel_gyro_quaternion+0x75c>
 8002b02:	ae12      	add	r6, sp, #72	; 0x48
 8002b04:	1c30      	adds	r0, r6, #0
 8002b06:	2100      	movs	r1, #0
 8002b08:	f007 fe1a 	bl	800a740 <inv_get_gyro_bias>
 8002b0c:	1c29      	adds	r1, r5, #0
 8002b0e:	1c30      	adds	r0, r6, #0
 8002b10:	313c      	adds	r1, #60	; 0x3c
 8002b12:	220c      	movs	r2, #12
 8002b14:	f00f f9e6 	bl	8011ee4 <memcmp>
 8002b18:	2800      	cmp	r0, #0
 8002b1a:	d107      	bne.n	8002b2c <inv_generate_accel_gyro_quaternion+0x3a0>
 8002b1c:	2394      	movs	r3, #148	; 0x94
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	58e3      	ldr	r3, [r4, r3]
 8002b22:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8002b24:	af1a      	add	r7, sp, #104	; 0x68
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d100      	bne.n	8002b2c <inv_generate_accel_gyro_quaternion+0x3a0>
 8002b2a:	e096      	b.n	8002c5a <inv_generate_accel_gyro_quaternion+0x4ce>
 8002b2c:	af1a      	add	r7, sp, #104	; 0x68
 8002b2e:	1c32      	adds	r2, r6, #0
 8002b30:	1c3b      	adds	r3, r7, #0
 8002b32:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002b34:	8820      	ldrh	r0, [r4, #0]
 8002b36:	f00c fb36 	bl	800f1a6 <inv_convert_to_body_with_scale>
 8002b3a:	981a      	ldr	r0, [sp, #104]	; 0x68
 8002b3c:	f001 fc86 	bl	800444c <__aeabi_i2f>
 8002b40:	4682      	mov	sl, r0
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f001 fc82 	bl	800444c <__aeabi_i2f>
 8002b48:	4681      	mov	r9, r0
 8002b4a:	68b8      	ldr	r0, [r7, #8]
 8002b4c:	f001 fc7e 	bl	800444c <__aeabi_i2f>
 8002b50:	4651      	mov	r1, sl
 8002b52:	4680      	mov	r8, r0
 8002b54:	4650      	mov	r0, sl
 8002b56:	f001 f955 	bl	8003e04 <__aeabi_fmul>
 8002b5a:	4649      	mov	r1, r9
 8002b5c:	4682      	mov	sl, r0
 8002b5e:	4648      	mov	r0, r9
 8002b60:	f001 f950 	bl	8003e04 <__aeabi_fmul>
 8002b64:	1c01      	adds	r1, r0, #0
 8002b66:	4650      	mov	r0, sl
 8002b68:	f000 fde2 	bl	8003730 <__aeabi_fadd>
 8002b6c:	4641      	mov	r1, r8
 8002b6e:	4681      	mov	r9, r0
 8002b70:	4640      	mov	r0, r8
 8002b72:	f001 f947 	bl	8003e04 <__aeabi_fmul>
 8002b76:	1c01      	adds	r1, r0, #0
 8002b78:	4648      	mov	r0, r9
 8002b7a:	f000 fdd9 	bl	8003730 <__aeabi_fadd>
 8002b7e:	f00c ff3b 	bl	800f9f8 <sqrtf>
 8002b82:	2394      	movs	r3, #148	; 0x94
 8002b84:	005b      	lsls	r3, r3, #1
 8002b86:	58e3      	ldr	r3, [r4, r3]
 8002b88:	49c9      	ldr	r1, [pc, #804]	; (8002eb0 <inv_generate_accel_gyro_quaternion+0x724>)
 8002b8a:	4699      	mov	r9, r3
 8002b8c:	4680      	mov	r8, r0
 8002b8e:	f001 f939 	bl	8003e04 <__aeabi_fmul>
 8002b92:	49c8      	ldr	r1, [pc, #800]	; (8002eb4 <inv_generate_accel_gyro_quaternion+0x728>)
 8002b94:	f000 ff6c 	bl	8003a70 <__aeabi_fdiv>
 8002b98:	21de      	movs	r1, #222	; 0xde
 8002b9a:	0589      	lsls	r1, r1, #22
 8002b9c:	f001 f932 	bl	8003e04 <__aeabi_fmul>
 8002ba0:	4682      	mov	sl, r0
 8002ba2:	4648      	mov	r0, r9
 8002ba4:	f001 fc52 	bl	800444c <__aeabi_i2f>
 8002ba8:	1c01      	adds	r1, r0, #0
 8002baa:	4650      	mov	r0, sl
 8002bac:	f001 f92a 	bl	8003e04 <__aeabi_fmul>
 8002bb0:	49c1      	ldr	r1, [pc, #772]	; (8002eb8 <inv_generate_accel_gyro_quaternion+0x72c>)
 8002bb2:	f000 ff5d 	bl	8003a70 <__aeabi_fdiv>
 8002bb6:	21fc      	movs	r1, #252	; 0xfc
 8002bb8:	0589      	lsls	r1, r1, #22
 8002bba:	f001 f923 	bl	8003e04 <__aeabi_fmul>
 8002bbe:	4682      	mov	sl, r0
 8002bc0:	f00c ff36 	bl	800fa30 <cosf>
 8002bc4:	4683      	mov	fp, r0
 8002bc6:	4650      	mov	r0, sl
 8002bc8:	f00c ff6a 	bl	800faa0 <sinf>
 8002bcc:	2180      	movs	r1, #128	; 0x80
 8002bce:	4682      	mov	sl, r0
 8002bd0:	05c9      	lsls	r1, r1, #23
 8002bd2:	4640      	mov	r0, r8
 8002bd4:	f000 fc20 	bl	8003418 <__aeabi_fcmplt>
 8002bd8:	2800      	cmp	r0, #0
 8002bda:	d000      	beq.n	8002bde <inv_generate_accel_gyro_quaternion+0x452>
 8002bdc:	e18b      	b.n	8002ef6 <inv_generate_accel_gyro_quaternion+0x76a>
 8002bde:	219d      	movs	r1, #157	; 0x9d
 8002be0:	4658      	mov	r0, fp
 8002be2:	05c9      	lsls	r1, r1, #23
 8002be4:	f001 f90e 	bl	8003e04 <__aeabi_fmul>
 8002be8:	f001 fc10 	bl	800440c <__aeabi_f2iz>
 8002bec:	2380      	movs	r3, #128	; 0x80
 8002bee:	219d      	movs	r1, #157	; 0x9d
 8002bf0:	061b      	lsls	r3, r3, #24
 8002bf2:	4453      	add	r3, sl
 8002bf4:	05c9      	lsls	r1, r1, #23
 8002bf6:	64a8      	str	r0, [r5, #72]	; 0x48
 8002bf8:	1c18      	adds	r0, r3, #0
 8002bfa:	f001 f903 	bl	8003e04 <__aeabi_fmul>
 8002bfe:	4682      	mov	sl, r0
 8002c00:	981a      	ldr	r0, [sp, #104]	; 0x68
 8002c02:	f001 fc23 	bl	800444c <__aeabi_i2f>
 8002c06:	1c01      	adds	r1, r0, #0
 8002c08:	4650      	mov	r0, sl
 8002c0a:	f001 f8fb 	bl	8003e04 <__aeabi_fmul>
 8002c0e:	4641      	mov	r1, r8
 8002c10:	f000 ff2e 	bl	8003a70 <__aeabi_fdiv>
 8002c14:	f001 fbfa 	bl	800440c <__aeabi_f2iz>
 8002c18:	64e8      	str	r0, [r5, #76]	; 0x4c
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f001 fc16 	bl	800444c <__aeabi_i2f>
 8002c20:	1c01      	adds	r1, r0, #0
 8002c22:	4650      	mov	r0, sl
 8002c24:	f001 f8ee 	bl	8003e04 <__aeabi_fmul>
 8002c28:	4641      	mov	r1, r8
 8002c2a:	f000 ff21 	bl	8003a70 <__aeabi_fdiv>
 8002c2e:	f001 fbed 	bl	800440c <__aeabi_f2iz>
 8002c32:	6528      	str	r0, [r5, #80]	; 0x50
 8002c34:	68b8      	ldr	r0, [r7, #8]
 8002c36:	f001 fc09 	bl	800444c <__aeabi_i2f>
 8002c3a:	1c01      	adds	r1, r0, #0
 8002c3c:	4650      	mov	r0, sl
 8002c3e:	f001 f8e1 	bl	8003e04 <__aeabi_fmul>
 8002c42:	4641      	mov	r1, r8
 8002c44:	f000 ff14 	bl	8003a70 <__aeabi_fdiv>
 8002c48:	f001 fbe0 	bl	800440c <__aeabi_f2iz>
 8002c4c:	6568      	str	r0, [r5, #84]	; 0x54
 8002c4e:	1c2b      	adds	r3, r5, #0
 8002c50:	333c      	adds	r3, #60	; 0x3c
 8002c52:	ce07      	ldmia	r6!, {r0, r1, r2}
 8002c54:	c307      	stmia	r3!, {r0, r1, r2}
 8002c56:	464b      	mov	r3, r9
 8002c58:	65ab      	str	r3, [r5, #88]	; 0x58
 8002c5a:	1c26      	adds	r6, r4, #0
 8002c5c:	1c29      	adds	r1, r5, #0
 8002c5e:	3611      	adds	r6, #17
 8002c60:	36ff      	adds	r6, #255	; 0xff
 8002c62:	1c30      	adds	r0, r6, #0
 8002c64:	1c3a      	adds	r2, r7, #0
 8002c66:	3148      	adds	r1, #72	; 0x48
 8002c68:	f00b fcb8 	bl	800e5dc <inv_q_mult>
 8002c6c:	235c      	movs	r3, #92	; 0x5c
 8002c6e:	4698      	mov	r8, r3
 8002c70:	44a8      	add	r8, r5
 8002c72:	aa16      	add	r2, sp, #88	; 0x58
 8002c74:	4640      	mov	r0, r8
 8002c76:	1c39      	adds	r1, r7, #0
 8002c78:	f00b fcb0 	bl	800e5dc <inv_q_mult>
 8002c7c:	1c30      	adds	r0, r6, #0
 8002c7e:	4641      	mov	r1, r8
 8002c80:	f00b fda4 	bl	800e7cc <inv_q_invert>
 8002c84:	1c28      	adds	r0, r5, #0
 8002c86:	a916      	add	r1, sp, #88	; 0x58
 8002c88:	1c3a      	adds	r2, r7, #0
 8002c8a:	f00b fca7 	bl	800e5dc <inv_q_mult>
 8002c8e:	1c38      	adds	r0, r7, #0
 8002c90:	1c29      	adds	r1, r5, #0
 8002c92:	f7ff fc31 	bl	80024f8 <inv_normalize_quat>
 8002c96:	e596      	b.n	80027c6 <inv_generate_accel_gyro_quaternion+0x3a>
 8002c98:	1c20      	adds	r0, r4, #0
 8002c9a:	f7ff fcbd 	bl	8002618 <inv_generate_gyro_quaternion.part.1>
 8002c9e:	e592      	b.n	80027c6 <inv_generate_accel_gyro_quaternion+0x3a>
 8002ca0:	4b86      	ldr	r3, [pc, #536]	; (8002ebc <inv_generate_accel_gyro_quaternion+0x730>)
 8002ca2:	4298      	cmp	r0, r3
 8002ca4:	d800      	bhi.n	8002ca8 <inv_generate_accel_gyro_quaternion+0x51c>
 8002ca6:	e5d3      	b.n	8002850 <inv_generate_accel_gyro_quaternion+0xc4>
 8002ca8:	a80e      	add	r0, sp, #56	; 0x38
 8002caa:	f00c fd43 	bl	800f734 <inv_get_linear_accel>
 8002cae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002cb0:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8002cb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002cb4:	4690      	mov	r8, r2
 8002cb6:	980e      	ldr	r0, [sp, #56]	; 0x38
 8002cb8:	17d2      	asrs	r2, r2, #31
 8002cba:	17db      	asrs	r3, r3, #31
 8002cbc:	4692      	mov	sl, r2
 8002cbe:	17fa      	asrs	r2, r7, #31
 8002cc0:	4691      	mov	r9, r2
 8002cc2:	1c19      	adds	r1, r3, #0
 8002cc4:	1c02      	adds	r2, r0, #0
 8002cc6:	f000 fbf3 	bl	80034b0 <__aeabi_lmul>
 8002cca:	4642      	mov	r2, r8
 8002ccc:	9000      	str	r0, [sp, #0]
 8002cce:	9101      	str	r1, [sp, #4]
 8002cd0:	4653      	mov	r3, sl
 8002cd2:	4640      	mov	r0, r8
 8002cd4:	4651      	mov	r1, sl
 8002cd6:	f000 fbeb 	bl	80034b0 <__aeabi_lmul>
 8002cda:	9a00      	ldr	r2, [sp, #0]
 8002cdc:	9b01      	ldr	r3, [sp, #4]
 8002cde:	1812      	adds	r2, r2, r0
 8002ce0:	414b      	adcs	r3, r1
 8002ce2:	1c38      	adds	r0, r7, #0
 8002ce4:	9200      	str	r2, [sp, #0]
 8002ce6:	9301      	str	r3, [sp, #4]
 8002ce8:	4649      	mov	r1, r9
 8002cea:	1c3a      	adds	r2, r7, #0
 8002cec:	464b      	mov	r3, r9
 8002cee:	f000 fbdf 	bl	80034b0 <__aeabi_lmul>
 8002cf2:	9a00      	ldr	r2, [sp, #0]
 8002cf4:	9b01      	ldr	r3, [sp, #4]
 8002cf6:	1880      	adds	r0, r0, r2
 8002cf8:	4159      	adcs	r1, r3
 8002cfa:	2902      	cmp	r1, #2
 8002cfc:	dc05      	bgt.n	8002d0a <inv_generate_accel_gyro_quaternion+0x57e>
 8002cfe:	d000      	beq.n	8002d02 <inv_generate_accel_gyro_quaternion+0x576>
 8002d00:	e5a6      	b.n	8002850 <inv_generate_accel_gyro_quaternion+0xc4>
 8002d02:	4b6e      	ldr	r3, [pc, #440]	; (8002ebc <inv_generate_accel_gyro_quaternion+0x730>)
 8002d04:	4298      	cmp	r0, r3
 8002d06:	d800      	bhi.n	8002d0a <inv_generate_accel_gyro_quaternion+0x57e>
 8002d08:	e5a2      	b.n	8002850 <inv_generate_accel_gyro_quaternion+0xc4>
 8002d0a:	2304      	movs	r3, #4
 8002d0c:	63ab      	str	r3, [r5, #56]	; 0x38
 8002d0e:	2400      	movs	r4, #0
 8002d10:	e5ad      	b.n	800286e <inv_generate_accel_gyro_quaternion+0xe2>
 8002d12:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8002d14:	496a      	ldr	r1, [pc, #424]	; (8002ec0 <inv_generate_accel_gyro_quaternion+0x734>)
 8002d16:	f000 fa43 	bl	80031a0 <__divsi3>
 8002d1a:	2800      	cmp	r0, #0
 8002d1c:	dc00      	bgt.n	8002d20 <inv_generate_accel_gyro_quaternion+0x594>
 8002d1e:	e103      	b.n	8002f28 <inv_generate_accel_gyro_quaternion+0x79c>
 8002d20:	2f03      	cmp	r7, #3
 8002d22:	d000      	beq.n	8002d26 <inv_generate_accel_gyro_quaternion+0x59a>
 8002d24:	e5a0      	b.n	8002868 <inv_generate_accel_gyro_quaternion+0xdc>
 8002d26:	4c67      	ldr	r4, [pc, #412]	; (8002ec4 <inv_generate_accel_gyro_quaternion+0x738>)
 8002d28:	4344      	muls	r4, r0
 8002d2a:	e5a0      	b.n	800286e <inv_generate_accel_gyro_quaternion+0xe2>
 8002d2c:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8002d2e:	f001 fb8d 	bl	800444c <__aeabi_i2f>
 8002d32:	1c07      	adds	r7, r0, #0
 8002d34:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8002d36:	f001 fb89 	bl	800444c <__aeabi_i2f>
 8002d3a:	1c06      	adds	r6, r0, #0
 8002d3c:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8002d3e:	f001 fb85 	bl	800444c <__aeabi_i2f>
 8002d42:	1c39      	adds	r1, r7, #0
 8002d44:	1c05      	adds	r5, r0, #0
 8002d46:	1c38      	adds	r0, r7, #0
 8002d48:	f001 f85c 	bl	8003e04 <__aeabi_fmul>
 8002d4c:	1c31      	adds	r1, r6, #0
 8002d4e:	1c07      	adds	r7, r0, #0
 8002d50:	1c30      	adds	r0, r6, #0
 8002d52:	f001 f857 	bl	8003e04 <__aeabi_fmul>
 8002d56:	1c01      	adds	r1, r0, #0
 8002d58:	1c38      	adds	r0, r7, #0
 8002d5a:	f000 fce9 	bl	8003730 <__aeabi_fadd>
 8002d5e:	1c29      	adds	r1, r5, #0
 8002d60:	1c06      	adds	r6, r0, #0
 8002d62:	1c28      	adds	r0, r5, #0
 8002d64:	f001 f84e 	bl	8003e04 <__aeabi_fmul>
 8002d68:	1c01      	adds	r1, r0, #0
 8002d6a:	1c30      	adds	r0, r6, #0
 8002d6c:	f000 fce0 	bl	8003730 <__aeabi_fadd>
 8002d70:	f00c fe42 	bl	800f9f8 <sqrtf>
 8002d74:	21fe      	movs	r1, #254	; 0xfe
 8002d76:	0589      	lsls	r1, r1, #22
 8002d78:	1c05      	adds	r5, r0, #0
 8002d7a:	f000 fb57 	bl	800342c <__aeabi_fcmple>
 8002d7e:	2800      	cmp	r0, #0
 8002d80:	d000      	beq.n	8002d84 <inv_generate_accel_gyro_quaternion+0x5f8>
 8002d82:	e0d3      	b.n	8002f2c <inv_generate_accel_gyro_quaternion+0x7a0>
 8002d84:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8002d86:	f001 fb61 	bl	800444c <__aeabi_i2f>
 8002d8a:	1c29      	adds	r1, r5, #0
 8002d8c:	f000 fe70 	bl	8003a70 <__aeabi_fdiv>
 8002d90:	1c05      	adds	r5, r0, #0
 8002d92:	20fe      	movs	r0, #254	; 0xfe
 8002d94:	1c29      	adds	r1, r5, #0
 8002d96:	0580      	lsls	r0, r0, #22
 8002d98:	f001 f982 	bl	80040a0 <__aeabi_fsub>
 8002d9c:	2100      	movs	r1, #0
 8002d9e:	1c06      	adds	r6, r0, #0
 8002da0:	f000 fb4e 	bl	8003440 <__aeabi_fcmpgt>
 8002da4:	2800      	cmp	r0, #0
 8002da6:	d100      	bne.n	8002daa <inv_generate_accel_gyro_quaternion+0x61e>
 8002da8:	e0de      	b.n	8002f68 <inv_generate_accel_gyro_quaternion+0x7dc>
 8002daa:	21fc      	movs	r1, #252	; 0xfc
 8002dac:	1c30      	adds	r0, r6, #0
 8002dae:	0589      	lsls	r1, r1, #22
 8002db0:	f001 f828 	bl	8003e04 <__aeabi_fmul>
 8002db4:	f00c fe20 	bl	800f9f8 <sqrtf>
 8002db8:	21fe      	movs	r1, #254	; 0xfe
 8002dba:	1c06      	adds	r6, r0, #0
 8002dbc:	0589      	lsls	r1, r1, #22
 8002dbe:	1c28      	adds	r0, r5, #0
 8002dc0:	f000 fcb6 	bl	8003730 <__aeabi_fadd>
 8002dc4:	2100      	movs	r1, #0
 8002dc6:	1c05      	adds	r5, r0, #0
 8002dc8:	f000 fb3a 	bl	8003440 <__aeabi_fcmpgt>
 8002dcc:	2800      	cmp	r0, #0
 8002dce:	d100      	bne.n	8002dd2 <inv_generate_accel_gyro_quaternion+0x646>
 8002dd0:	e0cc      	b.n	8002f6c <inv_generate_accel_gyro_quaternion+0x7e0>
 8002dd2:	21fc      	movs	r1, #252	; 0xfc
 8002dd4:	1c28      	adds	r0, r5, #0
 8002dd6:	0589      	lsls	r1, r1, #22
 8002dd8:	f001 f814 	bl	8003e04 <__aeabi_fmul>
 8002ddc:	f00c fe0c 	bl	800f9f8 <sqrtf>
 8002de0:	4681      	mov	r9, r0
 8002de2:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8002de4:	f001 fb32 	bl	800444c <__aeabi_i2f>
 8002de8:	1c07      	adds	r7, r0, #0
 8002dea:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8002dec:	f001 fb2e 	bl	800444c <__aeabi_i2f>
 8002df0:	1c39      	adds	r1, r7, #0
 8002df2:	1c05      	adds	r5, r0, #0
 8002df4:	1c38      	adds	r0, r7, #0
 8002df6:	f001 f805 	bl	8003e04 <__aeabi_fmul>
 8002dfa:	1c29      	adds	r1, r5, #0
 8002dfc:	1c07      	adds	r7, r0, #0
 8002dfe:	1c28      	adds	r0, r5, #0
 8002e00:	f001 f800 	bl	8003e04 <__aeabi_fmul>
 8002e04:	1c01      	adds	r1, r0, #0
 8002e06:	1c38      	adds	r0, r7, #0
 8002e08:	f000 fc92 	bl	8003730 <__aeabi_fadd>
 8002e0c:	f00c fdf4 	bl	800f9f8 <sqrtf>
 8002e10:	21fe      	movs	r1, #254	; 0xfe
 8002e12:	0589      	lsls	r1, r1, #22
 8002e14:	1c07      	adds	r7, r0, #0
 8002e16:	f000 fb09 	bl	800342c <__aeabi_fcmple>
 8002e1a:	4680      	mov	r8, r0
 8002e1c:	2800      	cmp	r0, #0
 8002e1e:	d000      	beq.n	8002e22 <inv_generate_accel_gyro_quaternion+0x696>
 8002e20:	e084      	b.n	8002f2c <inv_generate_accel_gyro_quaternion+0x7a0>
 8002e22:	219d      	movs	r1, #157	; 0x9d
 8002e24:	4648      	mov	r0, r9
 8002e26:	05c9      	lsls	r1, r1, #23
 8002e28:	f000 ffec 	bl	8003e04 <__aeabi_fmul>
 8002e2c:	f001 faee 	bl	800440c <__aeabi_f2iz>
 8002e30:	4d25      	ldr	r5, [pc, #148]	; (8002ec8 <inv_generate_accel_gyro_quaternion+0x73c>)
 8002e32:	6128      	str	r0, [r5, #16]
 8002e34:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8002e36:	f001 fb09 	bl	800444c <__aeabi_i2f>
 8002e3a:	1c39      	adds	r1, r7, #0
 8002e3c:	f000 fe18 	bl	8003a70 <__aeabi_fdiv>
 8002e40:	1c01      	adds	r1, r0, #0
 8002e42:	1c30      	adds	r0, r6, #0
 8002e44:	f000 ffde 	bl	8003e04 <__aeabi_fmul>
 8002e48:	219d      	movs	r1, #157	; 0x9d
 8002e4a:	05c9      	lsls	r1, r1, #23
 8002e4c:	f000 ffda 	bl	8003e04 <__aeabi_fmul>
 8002e50:	f001 fadc 	bl	800440c <__aeabi_f2iz>
 8002e54:	2380      	movs	r3, #128	; 0x80
 8002e56:	061b      	lsls	r3, r3, #24
 8002e58:	469c      	mov	ip, r3
 8002e5a:	6168      	str	r0, [r5, #20]
 8002e5c:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8002e5e:	4466      	add	r6, ip
 8002e60:	f001 faf4 	bl	800444c <__aeabi_i2f>
 8002e64:	1c39      	adds	r1, r7, #0
 8002e66:	f000 fe03 	bl	8003a70 <__aeabi_fdiv>
 8002e6a:	1c01      	adds	r1, r0, #0
 8002e6c:	1c30      	adds	r0, r6, #0
 8002e6e:	f000 ffc9 	bl	8003e04 <__aeabi_fmul>
 8002e72:	219d      	movs	r1, #157	; 0x9d
 8002e74:	05c9      	lsls	r1, r1, #23
 8002e76:	f000 ffc5 	bl	8003e04 <__aeabi_fmul>
 8002e7a:	f001 fac7 	bl	800440c <__aeabi_f2iz>
 8002e7e:	4643      	mov	r3, r8
 8002e80:	61a8      	str	r0, [r5, #24]
 8002e82:	61eb      	str	r3, [r5, #28]
 8002e84:	2390      	movs	r3, #144	; 0x90
 8002e86:	005b      	lsls	r3, r3, #1
 8002e88:	58e3      	ldr	r3, [r4, r3]
 8002e8a:	05db      	lsls	r3, r3, #23
 8002e8c:	d461      	bmi.n	8002f52 <inv_generate_accel_gyro_quaternion+0x7c6>
 8002e8e:	1c28      	adds	r0, r5, #0
 8002e90:	a902      	add	r1, sp, #8
 8002e92:	f00b fc9b 	bl	800e7cc <inv_q_invert>
 8002e96:	1c28      	adds	r0, r5, #0
 8002e98:	1c2a      	adds	r2, r5, #0
 8002e9a:	3010      	adds	r0, #16
 8002e9c:	3220      	adds	r2, #32
 8002e9e:	a902      	add	r1, sp, #8
 8002ea0:	f00b fb9c 	bl	800e5dc <inv_q_mult>
 8002ea4:	2390      	movs	r3, #144	; 0x90
 8002ea6:	005b      	lsls	r3, r3, #1
 8002ea8:	58e3      	ldr	r3, [r4, r3]
 8002eaa:	e485      	b.n	80027b8 <inv_generate_accel_gyro_quaternion+0x2c>
 8002eac:	001c9871 	.word	0x001c9871
 8002eb0:	40490fdb 	.word	0x40490fdb
 8002eb4:	43340000 	.word	0x43340000
 8002eb8:	49742400 	.word	0x49742400
 8002ebc:	3fffffff 	.word	0x3fffffff
 8002ec0:	00001388 	.word	0x00001388
 8002ec4:	00c49ba6 	.word	0x00c49ba6
 8002ec8:	20000524 	.word	0x20000524
 8002ecc:	1c29      	adds	r1, r5, #0
 8002ece:	3011      	adds	r0, #17
 8002ed0:	315c      	adds	r1, #92	; 0x5c
 8002ed2:	30ff      	adds	r0, #255	; 0xff
 8002ed4:	f00b fc7a 	bl	800e7cc <inv_q_invert>
 8002ed8:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8002eda:	05db      	lsls	r3, r3, #23
 8002edc:	d413      	bmi.n	8002f06 <inv_generate_accel_gyro_quaternion+0x77a>
 8002ede:	59a3      	ldr	r3, [r4, r6]
 8002ee0:	e46a      	b.n	80027b8 <inv_generate_accel_gyro_quaternion+0x2c>
 8002ee2:	2202      	movs	r2, #2
 8002ee4:	63aa      	str	r2, [r5, #56]	; 0x38
 8002ee6:	e609      	b.n	8002afc <inv_generate_accel_gyro_quaternion+0x370>
 8002ee8:	1c20      	adds	r0, r4, #0
 8002eea:	3011      	adds	r0, #17
 8002eec:	30ff      	adds	r0, #255	; 0xff
 8002eee:	1c29      	adds	r1, r5, #0
 8002ef0:	f7ff fb02 	bl	80024f8 <inv_normalize_quat>
 8002ef4:	e467      	b.n	80027c6 <inv_generate_accel_gyro_quaternion+0x3a>
 8002ef6:	2380      	movs	r3, #128	; 0x80
 8002ef8:	05db      	lsls	r3, r3, #23
 8002efa:	64ab      	str	r3, [r5, #72]	; 0x48
 8002efc:	2300      	movs	r3, #0
 8002efe:	64eb      	str	r3, [r5, #76]	; 0x4c
 8002f00:	652b      	str	r3, [r5, #80]	; 0x50
 8002f02:	656b      	str	r3, [r5, #84]	; 0x54
 8002f04:	e6a3      	b.n	8002c4e <inv_generate_accel_gyro_quaternion+0x4c2>
 8002f06:	1c28      	adds	r0, r5, #0
 8002f08:	a902      	add	r1, sp, #8
 8002f0a:	f00b fc5f 	bl	800e7cc <inv_q_invert>
 8002f0e:	1c28      	adds	r0, r5, #0
 8002f10:	1c2a      	adds	r2, r5, #0
 8002f12:	3010      	adds	r0, #16
 8002f14:	3220      	adds	r2, #32
 8002f16:	a902      	add	r1, sp, #8
 8002f18:	f00b fb60 	bl	800e5dc <inv_q_mult>
 8002f1c:	59a3      	ldr	r3, [r4, r6]
 8002f1e:	e44b      	b.n	80027b8 <inv_generate_accel_gyro_quaternion+0x2c>
 8002f20:	23fa      	movs	r3, #250	; 0xfa
 8002f22:	059b      	lsls	r3, r3, #22
 8002f24:	4699      	mov	r9, r3
 8002f26:	e572      	b.n	8002a0e <inv_generate_accel_gyro_quaternion+0x282>
 8002f28:	2001      	movs	r0, #1
 8002f2a:	e6f9      	b.n	8002d20 <inv_generate_accel_gyro_quaternion+0x594>
 8002f2c:	2380      	movs	r3, #128	; 0x80
 8002f2e:	4d11      	ldr	r5, [pc, #68]	; (8002f74 <inv_generate_accel_gyro_quaternion+0x7e8>)
 8002f30:	05db      	lsls	r3, r3, #23
 8002f32:	612b      	str	r3, [r5, #16]
 8002f34:	2300      	movs	r3, #0
 8002f36:	616b      	str	r3, [r5, #20]
 8002f38:	61ab      	str	r3, [r5, #24]
 8002f3a:	61eb      	str	r3, [r5, #28]
 8002f3c:	e7a2      	b.n	8002e84 <inv_generate_accel_gyro_quaternion+0x6f8>
 8002f3e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8002f40:	490d      	ldr	r1, [pc, #52]	; (8002f78 <inv_generate_accel_gyro_quaternion+0x7ec>)
 8002f42:	f000 f92d 	bl	80031a0 <__divsi3>
 8002f46:	2800      	cmp	r0, #0
 8002f48:	dd12      	ble.n	8002f70 <inv_generate_accel_gyro_quaternion+0x7e4>
 8002f4a:	4c0c      	ldr	r4, [pc, #48]	; (8002f7c <inv_generate_accel_gyro_quaternion+0x7f0>)
 8002f4c:	00c0      	lsls	r0, r0, #3
 8002f4e:	4344      	muls	r4, r0
 8002f50:	e48d      	b.n	800286e <inv_generate_accel_gyro_quaternion+0xe2>
 8002f52:	1c20      	adds	r0, r4, #0
 8002f54:	1c29      	adds	r1, r5, #0
 8002f56:	3011      	adds	r0, #17
 8002f58:	315c      	adds	r1, #92	; 0x5c
 8002f5a:	30ff      	adds	r0, #255	; 0xff
 8002f5c:	f00b fc36 	bl	800e7cc <inv_q_invert>
 8002f60:	e795      	b.n	8002e8e <inv_generate_accel_gyro_quaternion+0x702>
 8002f62:	4b07      	ldr	r3, [pc, #28]	; (8002f80 <inv_generate_accel_gyro_quaternion+0x7f4>)
 8002f64:	4699      	mov	r9, r3
 8002f66:	e552      	b.n	8002a0e <inv_generate_accel_gyro_quaternion+0x282>
 8002f68:	2000      	movs	r0, #0
 8002f6a:	e723      	b.n	8002db4 <inv_generate_accel_gyro_quaternion+0x628>
 8002f6c:	2000      	movs	r0, #0
 8002f6e:	e735      	b.n	8002ddc <inv_generate_accel_gyro_quaternion+0x650>
 8002f70:	4c04      	ldr	r4, [pc, #16]	; (8002f84 <inv_generate_accel_gyro_quaternion+0x7f8>)
 8002f72:	e47c      	b.n	800286e <inv_generate_accel_gyro_quaternion+0xe2>
 8002f74:	20000524 	.word	0x20000524
 8002f78:	00001388 	.word	0x00001388
 8002f7c:	00c49ba6 	.word	0x00c49ba6
 8002f80:	3d75c28f 	.word	0x3d75c28f
 8002f84:	0624dd30 	.word	0x0624dd30

08002f88 <inv_generate_quaternion>:
 8002f88:	2280      	movs	r2, #128	; 0x80
 8002f8a:	b538      	push	{r3, r4, r5, lr}
 8002f8c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002f8e:	0052      	lsls	r2, r2, #1
 8002f90:	4213      	tst	r3, r2
 8002f92:	d102      	bne.n	8002f9a <inv_generate_quaternion+0x12>
 8002f94:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8002f96:	4213      	tst	r3, r2
 8002f98:	d012      	beq.n	8002fc0 <inv_generate_quaternion+0x38>
 8002f9a:	2390      	movs	r3, #144	; 0x90
 8002f9c:	22c0      	movs	r2, #192	; 0xc0
 8002f9e:	005b      	lsls	r3, r3, #1
 8002fa0:	58c3      	ldr	r3, [r0, r3]
 8002fa2:	0092      	lsls	r2, r2, #2
 8002fa4:	1c04      	adds	r4, r0, #0
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d014      	beq.n	8002fd6 <inv_generate_quaternion+0x4e>
 8002fac:	f7ff fbee 	bl	800278c <inv_generate_accel_gyro_quaternion>
 8002fb0:	4d0e      	ldr	r5, [pc, #56]	; (8002fec <inv_generate_quaternion+0x64>)
 8002fb2:	1c28      	adds	r0, r5, #0
 8002fb4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002fb6:	3010      	adds	r0, #16
 8002fb8:	f00c f9cc 	bl	800f354 <inv_store_gaming_quaternion>
 8002fbc:	2000      	movs	r0, #0
 8002fbe:	bd38      	pop	{r3, r4, r5, pc}
 8002fc0:	2390      	movs	r3, #144	; 0x90
 8002fc2:	005b      	lsls	r3, r3, #1
 8002fc4:	58c3      	ldr	r3, [r0, r3]
 8002fc6:	4213      	tst	r3, r2
 8002fc8:	d0f8      	beq.n	8002fbc <inv_generate_quaternion+0x34>
 8002fca:	22c0      	movs	r2, #192	; 0xc0
 8002fcc:	0092      	lsls	r2, r2, #2
 8002fce:	1c04      	adds	r4, r0, #0
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d1ea      	bne.n	8002fac <inv_generate_quaternion+0x24>
 8002fd6:	4d05      	ldr	r5, [pc, #20]	; (8002fec <inv_generate_quaternion+0x64>)
 8002fd8:	1c21      	adds	r1, r4, #0
 8002fda:	1c28      	adds	r0, r5, #0
 8002fdc:	3111      	adds	r1, #17
 8002fde:	31ff      	adds	r1, #255	; 0xff
 8002fe0:	2210      	movs	r2, #16
 8002fe2:	3010      	adds	r0, #16
 8002fe4:	f00f f832 	bl	801204c <memcpy>
 8002fe8:	e7e3      	b.n	8002fb2 <inv_generate_quaternion+0x2a>
 8002fea:	46c0      	nop			; (mov r8, r8)
 8002fec:	20000524 	.word	0x20000524

08002ff0 <inv_stop_quaternion>:
 8002ff0:	b508      	push	{r3, lr}
 8002ff2:	4802      	ldr	r0, [pc, #8]	; (8002ffc <inv_stop_quaternion+0xc>)
 8002ff4:	f007 fd6e 	bl	800aad4 <inv_unregister_data_cb>
 8002ff8:	bd08      	pop	{r3, pc}
 8002ffa:	46c0      	nop			; (mov r8, r8)
 8002ffc:	08002f89 	.word	0x08002f89

08003000 <inv_init_quaternion>:
 8003000:	b510      	push	{r4, lr}
 8003002:	4c07      	ldr	r4, [pc, #28]	; (8003020 <inv_init_quaternion+0x20>)
 8003004:	2100      	movs	r1, #0
 8003006:	1c20      	adds	r0, r4, #0
 8003008:	226c      	movs	r2, #108	; 0x6c
 800300a:	f00e ff8c 	bl	8011f26 <memset>
 800300e:	2380      	movs	r3, #128	; 0x80
 8003010:	05db      	lsls	r3, r3, #23
 8003012:	2000      	movs	r0, #0
 8003014:	6123      	str	r3, [r4, #16]
 8003016:	6023      	str	r3, [r4, #0]
 8003018:	6223      	str	r3, [r4, #32]
 800301a:	63e3      	str	r3, [r4, #60]	; 0x3c
 800301c:	65e3      	str	r3, [r4, #92]	; 0x5c
 800301e:	bd10      	pop	{r4, pc}
 8003020:	20000524 	.word	0x20000524

08003024 <inv_enable_quaternion>:
 8003024:	b508      	push	{r3, lr}
 8003026:	f7ff ffeb 	bl	8003000 <inv_init_quaternion>
 800302a:	2800      	cmp	r0, #0
 800302c:	d102      	bne.n	8003034 <inv_enable_quaternion+0x10>
 800302e:	4802      	ldr	r0, [pc, #8]	; (8003038 <inv_enable_quaternion+0x14>)
 8003030:	f00c fc04 	bl	800f83c <inv_register_mpl_start_notification>
 8003034:	bd08      	pop	{r3, pc}
 8003036:	46c0      	nop			; (mov r8, r8)
 8003038:	080025e9 	.word	0x080025e9

0800303c <inv_disable_quaternion>:
 800303c:	b508      	push	{r3, lr}
 800303e:	4803      	ldr	r0, [pc, #12]	; (800304c <inv_disable_quaternion+0x10>)
 8003040:	f007 fd48 	bl	800aad4 <inv_unregister_data_cb>
 8003044:	4802      	ldr	r0, [pc, #8]	; (8003050 <inv_disable_quaternion+0x14>)
 8003046:	f00c fbb9 	bl	800f7bc <inv_unregister_mpl_start_notification>
 800304a:	bd08      	pop	{r3, pc}
 800304c:	08002f89 	.word	0x08002f89
 8003050:	080025e9 	.word	0x080025e9

08003054 <strlen>:
 8003054:	2300      	movs	r3, #0
 8003056:	5cc2      	ldrb	r2, [r0, r3]
 8003058:	3301      	adds	r3, #1
 800305a:	2a00      	cmp	r2, #0
 800305c:	d1fb      	bne.n	8003056 <strlen+0x2>
 800305e:	1e58      	subs	r0, r3, #1
 8003060:	4770      	bx	lr
	...

08003064 <__gnu_thumb1_case_uqi>:
 8003064:	b402      	push	{r1}
 8003066:	4671      	mov	r1, lr
 8003068:	0849      	lsrs	r1, r1, #1
 800306a:	0049      	lsls	r1, r1, #1
 800306c:	5c09      	ldrb	r1, [r1, r0]
 800306e:	0049      	lsls	r1, r1, #1
 8003070:	448e      	add	lr, r1
 8003072:	bc02      	pop	{r1}
 8003074:	4770      	bx	lr
 8003076:	46c0      	nop			; (mov r8, r8)

08003078 <__gnu_thumb1_case_shi>:
 8003078:	b403      	push	{r0, r1}
 800307a:	4671      	mov	r1, lr
 800307c:	0849      	lsrs	r1, r1, #1
 800307e:	0040      	lsls	r0, r0, #1
 8003080:	0049      	lsls	r1, r1, #1
 8003082:	5e09      	ldrsh	r1, [r1, r0]
 8003084:	0049      	lsls	r1, r1, #1
 8003086:	448e      	add	lr, r1
 8003088:	bc03      	pop	{r0, r1}
 800308a:	4770      	bx	lr

0800308c <__udivsi3>:
 800308c:	2200      	movs	r2, #0
 800308e:	0843      	lsrs	r3, r0, #1
 8003090:	428b      	cmp	r3, r1
 8003092:	d374      	bcc.n	800317e <__udivsi3+0xf2>
 8003094:	0903      	lsrs	r3, r0, #4
 8003096:	428b      	cmp	r3, r1
 8003098:	d35f      	bcc.n	800315a <__udivsi3+0xce>
 800309a:	0a03      	lsrs	r3, r0, #8
 800309c:	428b      	cmp	r3, r1
 800309e:	d344      	bcc.n	800312a <__udivsi3+0x9e>
 80030a0:	0b03      	lsrs	r3, r0, #12
 80030a2:	428b      	cmp	r3, r1
 80030a4:	d328      	bcc.n	80030f8 <__udivsi3+0x6c>
 80030a6:	0c03      	lsrs	r3, r0, #16
 80030a8:	428b      	cmp	r3, r1
 80030aa:	d30d      	bcc.n	80030c8 <__udivsi3+0x3c>
 80030ac:	22ff      	movs	r2, #255	; 0xff
 80030ae:	0209      	lsls	r1, r1, #8
 80030b0:	ba12      	rev	r2, r2
 80030b2:	0c03      	lsrs	r3, r0, #16
 80030b4:	428b      	cmp	r3, r1
 80030b6:	d302      	bcc.n	80030be <__udivsi3+0x32>
 80030b8:	1212      	asrs	r2, r2, #8
 80030ba:	0209      	lsls	r1, r1, #8
 80030bc:	d065      	beq.n	800318a <__udivsi3+0xfe>
 80030be:	0b03      	lsrs	r3, r0, #12
 80030c0:	428b      	cmp	r3, r1
 80030c2:	d319      	bcc.n	80030f8 <__udivsi3+0x6c>
 80030c4:	e000      	b.n	80030c8 <__udivsi3+0x3c>
 80030c6:	0a09      	lsrs	r1, r1, #8
 80030c8:	0bc3      	lsrs	r3, r0, #15
 80030ca:	428b      	cmp	r3, r1
 80030cc:	d301      	bcc.n	80030d2 <__udivsi3+0x46>
 80030ce:	03cb      	lsls	r3, r1, #15
 80030d0:	1ac0      	subs	r0, r0, r3
 80030d2:	4152      	adcs	r2, r2
 80030d4:	0b83      	lsrs	r3, r0, #14
 80030d6:	428b      	cmp	r3, r1
 80030d8:	d301      	bcc.n	80030de <__udivsi3+0x52>
 80030da:	038b      	lsls	r3, r1, #14
 80030dc:	1ac0      	subs	r0, r0, r3
 80030de:	4152      	adcs	r2, r2
 80030e0:	0b43      	lsrs	r3, r0, #13
 80030e2:	428b      	cmp	r3, r1
 80030e4:	d301      	bcc.n	80030ea <__udivsi3+0x5e>
 80030e6:	034b      	lsls	r3, r1, #13
 80030e8:	1ac0      	subs	r0, r0, r3
 80030ea:	4152      	adcs	r2, r2
 80030ec:	0b03      	lsrs	r3, r0, #12
 80030ee:	428b      	cmp	r3, r1
 80030f0:	d301      	bcc.n	80030f6 <__udivsi3+0x6a>
 80030f2:	030b      	lsls	r3, r1, #12
 80030f4:	1ac0      	subs	r0, r0, r3
 80030f6:	4152      	adcs	r2, r2
 80030f8:	0ac3      	lsrs	r3, r0, #11
 80030fa:	428b      	cmp	r3, r1
 80030fc:	d301      	bcc.n	8003102 <__udivsi3+0x76>
 80030fe:	02cb      	lsls	r3, r1, #11
 8003100:	1ac0      	subs	r0, r0, r3
 8003102:	4152      	adcs	r2, r2
 8003104:	0a83      	lsrs	r3, r0, #10
 8003106:	428b      	cmp	r3, r1
 8003108:	d301      	bcc.n	800310e <__udivsi3+0x82>
 800310a:	028b      	lsls	r3, r1, #10
 800310c:	1ac0      	subs	r0, r0, r3
 800310e:	4152      	adcs	r2, r2
 8003110:	0a43      	lsrs	r3, r0, #9
 8003112:	428b      	cmp	r3, r1
 8003114:	d301      	bcc.n	800311a <__udivsi3+0x8e>
 8003116:	024b      	lsls	r3, r1, #9
 8003118:	1ac0      	subs	r0, r0, r3
 800311a:	4152      	adcs	r2, r2
 800311c:	0a03      	lsrs	r3, r0, #8
 800311e:	428b      	cmp	r3, r1
 8003120:	d301      	bcc.n	8003126 <__udivsi3+0x9a>
 8003122:	020b      	lsls	r3, r1, #8
 8003124:	1ac0      	subs	r0, r0, r3
 8003126:	4152      	adcs	r2, r2
 8003128:	d2cd      	bcs.n	80030c6 <__udivsi3+0x3a>
 800312a:	09c3      	lsrs	r3, r0, #7
 800312c:	428b      	cmp	r3, r1
 800312e:	d301      	bcc.n	8003134 <__udivsi3+0xa8>
 8003130:	01cb      	lsls	r3, r1, #7
 8003132:	1ac0      	subs	r0, r0, r3
 8003134:	4152      	adcs	r2, r2
 8003136:	0983      	lsrs	r3, r0, #6
 8003138:	428b      	cmp	r3, r1
 800313a:	d301      	bcc.n	8003140 <__udivsi3+0xb4>
 800313c:	018b      	lsls	r3, r1, #6
 800313e:	1ac0      	subs	r0, r0, r3
 8003140:	4152      	adcs	r2, r2
 8003142:	0943      	lsrs	r3, r0, #5
 8003144:	428b      	cmp	r3, r1
 8003146:	d301      	bcc.n	800314c <__udivsi3+0xc0>
 8003148:	014b      	lsls	r3, r1, #5
 800314a:	1ac0      	subs	r0, r0, r3
 800314c:	4152      	adcs	r2, r2
 800314e:	0903      	lsrs	r3, r0, #4
 8003150:	428b      	cmp	r3, r1
 8003152:	d301      	bcc.n	8003158 <__udivsi3+0xcc>
 8003154:	010b      	lsls	r3, r1, #4
 8003156:	1ac0      	subs	r0, r0, r3
 8003158:	4152      	adcs	r2, r2
 800315a:	08c3      	lsrs	r3, r0, #3
 800315c:	428b      	cmp	r3, r1
 800315e:	d301      	bcc.n	8003164 <__udivsi3+0xd8>
 8003160:	00cb      	lsls	r3, r1, #3
 8003162:	1ac0      	subs	r0, r0, r3
 8003164:	4152      	adcs	r2, r2
 8003166:	0883      	lsrs	r3, r0, #2
 8003168:	428b      	cmp	r3, r1
 800316a:	d301      	bcc.n	8003170 <__udivsi3+0xe4>
 800316c:	008b      	lsls	r3, r1, #2
 800316e:	1ac0      	subs	r0, r0, r3
 8003170:	4152      	adcs	r2, r2
 8003172:	0843      	lsrs	r3, r0, #1
 8003174:	428b      	cmp	r3, r1
 8003176:	d301      	bcc.n	800317c <__udivsi3+0xf0>
 8003178:	004b      	lsls	r3, r1, #1
 800317a:	1ac0      	subs	r0, r0, r3
 800317c:	4152      	adcs	r2, r2
 800317e:	1a41      	subs	r1, r0, r1
 8003180:	d200      	bcs.n	8003184 <__udivsi3+0xf8>
 8003182:	4601      	mov	r1, r0
 8003184:	4152      	adcs	r2, r2
 8003186:	4610      	mov	r0, r2
 8003188:	4770      	bx	lr
 800318a:	e7ff      	b.n	800318c <__udivsi3+0x100>
 800318c:	b501      	push	{r0, lr}
 800318e:	2000      	movs	r0, #0
 8003190:	f000 f8f0 	bl	8003374 <__aeabi_idiv0>
 8003194:	bd02      	pop	{r1, pc}
 8003196:	46c0      	nop			; (mov r8, r8)

08003198 <__aeabi_uidivmod>:
 8003198:	2900      	cmp	r1, #0
 800319a:	d0f7      	beq.n	800318c <__udivsi3+0x100>
 800319c:	e776      	b.n	800308c <__udivsi3>
 800319e:	4770      	bx	lr

080031a0 <__divsi3>:
 80031a0:	4603      	mov	r3, r0
 80031a2:	430b      	orrs	r3, r1
 80031a4:	d47f      	bmi.n	80032a6 <__divsi3+0x106>
 80031a6:	2200      	movs	r2, #0
 80031a8:	0843      	lsrs	r3, r0, #1
 80031aa:	428b      	cmp	r3, r1
 80031ac:	d374      	bcc.n	8003298 <__divsi3+0xf8>
 80031ae:	0903      	lsrs	r3, r0, #4
 80031b0:	428b      	cmp	r3, r1
 80031b2:	d35f      	bcc.n	8003274 <__divsi3+0xd4>
 80031b4:	0a03      	lsrs	r3, r0, #8
 80031b6:	428b      	cmp	r3, r1
 80031b8:	d344      	bcc.n	8003244 <__divsi3+0xa4>
 80031ba:	0b03      	lsrs	r3, r0, #12
 80031bc:	428b      	cmp	r3, r1
 80031be:	d328      	bcc.n	8003212 <__divsi3+0x72>
 80031c0:	0c03      	lsrs	r3, r0, #16
 80031c2:	428b      	cmp	r3, r1
 80031c4:	d30d      	bcc.n	80031e2 <__divsi3+0x42>
 80031c6:	22ff      	movs	r2, #255	; 0xff
 80031c8:	0209      	lsls	r1, r1, #8
 80031ca:	ba12      	rev	r2, r2
 80031cc:	0c03      	lsrs	r3, r0, #16
 80031ce:	428b      	cmp	r3, r1
 80031d0:	d302      	bcc.n	80031d8 <__divsi3+0x38>
 80031d2:	1212      	asrs	r2, r2, #8
 80031d4:	0209      	lsls	r1, r1, #8
 80031d6:	d065      	beq.n	80032a4 <__divsi3+0x104>
 80031d8:	0b03      	lsrs	r3, r0, #12
 80031da:	428b      	cmp	r3, r1
 80031dc:	d319      	bcc.n	8003212 <__divsi3+0x72>
 80031de:	e000      	b.n	80031e2 <__divsi3+0x42>
 80031e0:	0a09      	lsrs	r1, r1, #8
 80031e2:	0bc3      	lsrs	r3, r0, #15
 80031e4:	428b      	cmp	r3, r1
 80031e6:	d301      	bcc.n	80031ec <__divsi3+0x4c>
 80031e8:	03cb      	lsls	r3, r1, #15
 80031ea:	1ac0      	subs	r0, r0, r3
 80031ec:	4152      	adcs	r2, r2
 80031ee:	0b83      	lsrs	r3, r0, #14
 80031f0:	428b      	cmp	r3, r1
 80031f2:	d301      	bcc.n	80031f8 <__divsi3+0x58>
 80031f4:	038b      	lsls	r3, r1, #14
 80031f6:	1ac0      	subs	r0, r0, r3
 80031f8:	4152      	adcs	r2, r2
 80031fa:	0b43      	lsrs	r3, r0, #13
 80031fc:	428b      	cmp	r3, r1
 80031fe:	d301      	bcc.n	8003204 <__divsi3+0x64>
 8003200:	034b      	lsls	r3, r1, #13
 8003202:	1ac0      	subs	r0, r0, r3
 8003204:	4152      	adcs	r2, r2
 8003206:	0b03      	lsrs	r3, r0, #12
 8003208:	428b      	cmp	r3, r1
 800320a:	d301      	bcc.n	8003210 <__divsi3+0x70>
 800320c:	030b      	lsls	r3, r1, #12
 800320e:	1ac0      	subs	r0, r0, r3
 8003210:	4152      	adcs	r2, r2
 8003212:	0ac3      	lsrs	r3, r0, #11
 8003214:	428b      	cmp	r3, r1
 8003216:	d301      	bcc.n	800321c <__divsi3+0x7c>
 8003218:	02cb      	lsls	r3, r1, #11
 800321a:	1ac0      	subs	r0, r0, r3
 800321c:	4152      	adcs	r2, r2
 800321e:	0a83      	lsrs	r3, r0, #10
 8003220:	428b      	cmp	r3, r1
 8003222:	d301      	bcc.n	8003228 <__divsi3+0x88>
 8003224:	028b      	lsls	r3, r1, #10
 8003226:	1ac0      	subs	r0, r0, r3
 8003228:	4152      	adcs	r2, r2
 800322a:	0a43      	lsrs	r3, r0, #9
 800322c:	428b      	cmp	r3, r1
 800322e:	d301      	bcc.n	8003234 <__divsi3+0x94>
 8003230:	024b      	lsls	r3, r1, #9
 8003232:	1ac0      	subs	r0, r0, r3
 8003234:	4152      	adcs	r2, r2
 8003236:	0a03      	lsrs	r3, r0, #8
 8003238:	428b      	cmp	r3, r1
 800323a:	d301      	bcc.n	8003240 <__divsi3+0xa0>
 800323c:	020b      	lsls	r3, r1, #8
 800323e:	1ac0      	subs	r0, r0, r3
 8003240:	4152      	adcs	r2, r2
 8003242:	d2cd      	bcs.n	80031e0 <__divsi3+0x40>
 8003244:	09c3      	lsrs	r3, r0, #7
 8003246:	428b      	cmp	r3, r1
 8003248:	d301      	bcc.n	800324e <__divsi3+0xae>
 800324a:	01cb      	lsls	r3, r1, #7
 800324c:	1ac0      	subs	r0, r0, r3
 800324e:	4152      	adcs	r2, r2
 8003250:	0983      	lsrs	r3, r0, #6
 8003252:	428b      	cmp	r3, r1
 8003254:	d301      	bcc.n	800325a <__divsi3+0xba>
 8003256:	018b      	lsls	r3, r1, #6
 8003258:	1ac0      	subs	r0, r0, r3
 800325a:	4152      	adcs	r2, r2
 800325c:	0943      	lsrs	r3, r0, #5
 800325e:	428b      	cmp	r3, r1
 8003260:	d301      	bcc.n	8003266 <__divsi3+0xc6>
 8003262:	014b      	lsls	r3, r1, #5
 8003264:	1ac0      	subs	r0, r0, r3
 8003266:	4152      	adcs	r2, r2
 8003268:	0903      	lsrs	r3, r0, #4
 800326a:	428b      	cmp	r3, r1
 800326c:	d301      	bcc.n	8003272 <__divsi3+0xd2>
 800326e:	010b      	lsls	r3, r1, #4
 8003270:	1ac0      	subs	r0, r0, r3
 8003272:	4152      	adcs	r2, r2
 8003274:	08c3      	lsrs	r3, r0, #3
 8003276:	428b      	cmp	r3, r1
 8003278:	d301      	bcc.n	800327e <__divsi3+0xde>
 800327a:	00cb      	lsls	r3, r1, #3
 800327c:	1ac0      	subs	r0, r0, r3
 800327e:	4152      	adcs	r2, r2
 8003280:	0883      	lsrs	r3, r0, #2
 8003282:	428b      	cmp	r3, r1
 8003284:	d301      	bcc.n	800328a <__divsi3+0xea>
 8003286:	008b      	lsls	r3, r1, #2
 8003288:	1ac0      	subs	r0, r0, r3
 800328a:	4152      	adcs	r2, r2
 800328c:	0843      	lsrs	r3, r0, #1
 800328e:	428b      	cmp	r3, r1
 8003290:	d301      	bcc.n	8003296 <__divsi3+0xf6>
 8003292:	004b      	lsls	r3, r1, #1
 8003294:	1ac0      	subs	r0, r0, r3
 8003296:	4152      	adcs	r2, r2
 8003298:	1a41      	subs	r1, r0, r1
 800329a:	d200      	bcs.n	800329e <__divsi3+0xfe>
 800329c:	4601      	mov	r1, r0
 800329e:	4152      	adcs	r2, r2
 80032a0:	4610      	mov	r0, r2
 80032a2:	4770      	bx	lr
 80032a4:	e05d      	b.n	8003362 <__divsi3+0x1c2>
 80032a6:	0fca      	lsrs	r2, r1, #31
 80032a8:	d000      	beq.n	80032ac <__divsi3+0x10c>
 80032aa:	4249      	negs	r1, r1
 80032ac:	1003      	asrs	r3, r0, #32
 80032ae:	d300      	bcc.n	80032b2 <__divsi3+0x112>
 80032b0:	4240      	negs	r0, r0
 80032b2:	4053      	eors	r3, r2
 80032b4:	2200      	movs	r2, #0
 80032b6:	469c      	mov	ip, r3
 80032b8:	0903      	lsrs	r3, r0, #4
 80032ba:	428b      	cmp	r3, r1
 80032bc:	d32d      	bcc.n	800331a <__divsi3+0x17a>
 80032be:	0a03      	lsrs	r3, r0, #8
 80032c0:	428b      	cmp	r3, r1
 80032c2:	d312      	bcc.n	80032ea <__divsi3+0x14a>
 80032c4:	22fc      	movs	r2, #252	; 0xfc
 80032c6:	0189      	lsls	r1, r1, #6
 80032c8:	ba12      	rev	r2, r2
 80032ca:	0a03      	lsrs	r3, r0, #8
 80032cc:	428b      	cmp	r3, r1
 80032ce:	d30c      	bcc.n	80032ea <__divsi3+0x14a>
 80032d0:	0189      	lsls	r1, r1, #6
 80032d2:	1192      	asrs	r2, r2, #6
 80032d4:	428b      	cmp	r3, r1
 80032d6:	d308      	bcc.n	80032ea <__divsi3+0x14a>
 80032d8:	0189      	lsls	r1, r1, #6
 80032da:	1192      	asrs	r2, r2, #6
 80032dc:	428b      	cmp	r3, r1
 80032de:	d304      	bcc.n	80032ea <__divsi3+0x14a>
 80032e0:	0189      	lsls	r1, r1, #6
 80032e2:	d03a      	beq.n	800335a <__divsi3+0x1ba>
 80032e4:	1192      	asrs	r2, r2, #6
 80032e6:	e000      	b.n	80032ea <__divsi3+0x14a>
 80032e8:	0989      	lsrs	r1, r1, #6
 80032ea:	09c3      	lsrs	r3, r0, #7
 80032ec:	428b      	cmp	r3, r1
 80032ee:	d301      	bcc.n	80032f4 <__divsi3+0x154>
 80032f0:	01cb      	lsls	r3, r1, #7
 80032f2:	1ac0      	subs	r0, r0, r3
 80032f4:	4152      	adcs	r2, r2
 80032f6:	0983      	lsrs	r3, r0, #6
 80032f8:	428b      	cmp	r3, r1
 80032fa:	d301      	bcc.n	8003300 <__divsi3+0x160>
 80032fc:	018b      	lsls	r3, r1, #6
 80032fe:	1ac0      	subs	r0, r0, r3
 8003300:	4152      	adcs	r2, r2
 8003302:	0943      	lsrs	r3, r0, #5
 8003304:	428b      	cmp	r3, r1
 8003306:	d301      	bcc.n	800330c <__divsi3+0x16c>
 8003308:	014b      	lsls	r3, r1, #5
 800330a:	1ac0      	subs	r0, r0, r3
 800330c:	4152      	adcs	r2, r2
 800330e:	0903      	lsrs	r3, r0, #4
 8003310:	428b      	cmp	r3, r1
 8003312:	d301      	bcc.n	8003318 <__divsi3+0x178>
 8003314:	010b      	lsls	r3, r1, #4
 8003316:	1ac0      	subs	r0, r0, r3
 8003318:	4152      	adcs	r2, r2
 800331a:	08c3      	lsrs	r3, r0, #3
 800331c:	428b      	cmp	r3, r1
 800331e:	d301      	bcc.n	8003324 <__divsi3+0x184>
 8003320:	00cb      	lsls	r3, r1, #3
 8003322:	1ac0      	subs	r0, r0, r3
 8003324:	4152      	adcs	r2, r2
 8003326:	0883      	lsrs	r3, r0, #2
 8003328:	428b      	cmp	r3, r1
 800332a:	d301      	bcc.n	8003330 <__divsi3+0x190>
 800332c:	008b      	lsls	r3, r1, #2
 800332e:	1ac0      	subs	r0, r0, r3
 8003330:	4152      	adcs	r2, r2
 8003332:	d2d9      	bcs.n	80032e8 <__divsi3+0x148>
 8003334:	0843      	lsrs	r3, r0, #1
 8003336:	428b      	cmp	r3, r1
 8003338:	d301      	bcc.n	800333e <__divsi3+0x19e>
 800333a:	004b      	lsls	r3, r1, #1
 800333c:	1ac0      	subs	r0, r0, r3
 800333e:	4152      	adcs	r2, r2
 8003340:	1a41      	subs	r1, r0, r1
 8003342:	d200      	bcs.n	8003346 <__divsi3+0x1a6>
 8003344:	4601      	mov	r1, r0
 8003346:	4663      	mov	r3, ip
 8003348:	4152      	adcs	r2, r2
 800334a:	105b      	asrs	r3, r3, #1
 800334c:	4610      	mov	r0, r2
 800334e:	d301      	bcc.n	8003354 <__divsi3+0x1b4>
 8003350:	4240      	negs	r0, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d500      	bpl.n	8003358 <__divsi3+0x1b8>
 8003356:	4249      	negs	r1, r1
 8003358:	4770      	bx	lr
 800335a:	4663      	mov	r3, ip
 800335c:	105b      	asrs	r3, r3, #1
 800335e:	d300      	bcc.n	8003362 <__divsi3+0x1c2>
 8003360:	4240      	negs	r0, r0
 8003362:	b501      	push	{r0, lr}
 8003364:	2000      	movs	r0, #0
 8003366:	f000 f805 	bl	8003374 <__aeabi_idiv0>
 800336a:	bd02      	pop	{r1, pc}

0800336c <__aeabi_idivmod>:
 800336c:	2900      	cmp	r1, #0
 800336e:	d0f8      	beq.n	8003362 <__divsi3+0x1c2>
 8003370:	e716      	b.n	80031a0 <__divsi3>
 8003372:	4770      	bx	lr

08003374 <__aeabi_idiv0>:
 8003374:	4770      	bx	lr
 8003376:	46c0      	nop			; (mov r8, r8)

08003378 <__aeabi_cdrcmple>:
 8003378:	4684      	mov	ip, r0
 800337a:	0010      	movs	r0, r2
 800337c:	4662      	mov	r2, ip
 800337e:	468c      	mov	ip, r1
 8003380:	0019      	movs	r1, r3
 8003382:	4663      	mov	r3, ip
 8003384:	e000      	b.n	8003388 <__aeabi_cdcmpeq>
 8003386:	46c0      	nop			; (mov r8, r8)

08003388 <__aeabi_cdcmpeq>:
 8003388:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800338a:	f001 ffef 	bl	800536c <__ledf2>
 800338e:	2800      	cmp	r0, #0
 8003390:	d401      	bmi.n	8003396 <__aeabi_cdcmpeq+0xe>
 8003392:	2100      	movs	r1, #0
 8003394:	42c8      	cmn	r0, r1
 8003396:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08003398 <__aeabi_dcmpeq>:
 8003398:	b510      	push	{r4, lr}
 800339a:	f001 ff3f 	bl	800521c <__eqdf2>
 800339e:	4240      	negs	r0, r0
 80033a0:	3001      	adds	r0, #1
 80033a2:	bd10      	pop	{r4, pc}

080033a4 <__aeabi_dcmplt>:
 80033a4:	b510      	push	{r4, lr}
 80033a6:	f001 ffe1 	bl	800536c <__ledf2>
 80033aa:	2800      	cmp	r0, #0
 80033ac:	db01      	blt.n	80033b2 <__aeabi_dcmplt+0xe>
 80033ae:	2000      	movs	r0, #0
 80033b0:	bd10      	pop	{r4, pc}
 80033b2:	2001      	movs	r0, #1
 80033b4:	bd10      	pop	{r4, pc}
 80033b6:	46c0      	nop			; (mov r8, r8)

080033b8 <__aeabi_dcmple>:
 80033b8:	b510      	push	{r4, lr}
 80033ba:	f001 ffd7 	bl	800536c <__ledf2>
 80033be:	2800      	cmp	r0, #0
 80033c0:	dd01      	ble.n	80033c6 <__aeabi_dcmple+0xe>
 80033c2:	2000      	movs	r0, #0
 80033c4:	bd10      	pop	{r4, pc}
 80033c6:	2001      	movs	r0, #1
 80033c8:	bd10      	pop	{r4, pc}
 80033ca:	46c0      	nop			; (mov r8, r8)

080033cc <__aeabi_dcmpgt>:
 80033cc:	b510      	push	{r4, lr}
 80033ce:	f001 ff67 	bl	80052a0 <__gedf2>
 80033d2:	2800      	cmp	r0, #0
 80033d4:	dc01      	bgt.n	80033da <__aeabi_dcmpgt+0xe>
 80033d6:	2000      	movs	r0, #0
 80033d8:	bd10      	pop	{r4, pc}
 80033da:	2001      	movs	r0, #1
 80033dc:	bd10      	pop	{r4, pc}
 80033de:	46c0      	nop			; (mov r8, r8)

080033e0 <__aeabi_dcmpge>:
 80033e0:	b510      	push	{r4, lr}
 80033e2:	f001 ff5d 	bl	80052a0 <__gedf2>
 80033e6:	2800      	cmp	r0, #0
 80033e8:	da01      	bge.n	80033ee <__aeabi_dcmpge+0xe>
 80033ea:	2000      	movs	r0, #0
 80033ec:	bd10      	pop	{r4, pc}
 80033ee:	2001      	movs	r0, #1
 80033f0:	bd10      	pop	{r4, pc}
 80033f2:	46c0      	nop			; (mov r8, r8)

080033f4 <__aeabi_cfrcmple>:
 80033f4:	4684      	mov	ip, r0
 80033f6:	0008      	movs	r0, r1
 80033f8:	4661      	mov	r1, ip
 80033fa:	e7ff      	b.n	80033fc <__aeabi_cfcmpeq>

080033fc <__aeabi_cfcmpeq>:
 80033fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80033fe:	f000 fcbd 	bl	8003d7c <__lesf2>
 8003402:	2800      	cmp	r0, #0
 8003404:	d401      	bmi.n	800340a <__aeabi_cfcmpeq+0xe>
 8003406:	2100      	movs	r1, #0
 8003408:	42c8      	cmn	r0, r1
 800340a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800340c <__aeabi_fcmpeq>:
 800340c:	b510      	push	{r4, lr}
 800340e:	f000 fc49 	bl	8003ca4 <__eqsf2>
 8003412:	4240      	negs	r0, r0
 8003414:	3001      	adds	r0, #1
 8003416:	bd10      	pop	{r4, pc}

08003418 <__aeabi_fcmplt>:
 8003418:	b510      	push	{r4, lr}
 800341a:	f000 fcaf 	bl	8003d7c <__lesf2>
 800341e:	2800      	cmp	r0, #0
 8003420:	db01      	blt.n	8003426 <__aeabi_fcmplt+0xe>
 8003422:	2000      	movs	r0, #0
 8003424:	bd10      	pop	{r4, pc}
 8003426:	2001      	movs	r0, #1
 8003428:	bd10      	pop	{r4, pc}
 800342a:	46c0      	nop			; (mov r8, r8)

0800342c <__aeabi_fcmple>:
 800342c:	b510      	push	{r4, lr}
 800342e:	f000 fca5 	bl	8003d7c <__lesf2>
 8003432:	2800      	cmp	r0, #0
 8003434:	dd01      	ble.n	800343a <__aeabi_fcmple+0xe>
 8003436:	2000      	movs	r0, #0
 8003438:	bd10      	pop	{r4, pc}
 800343a:	2001      	movs	r0, #1
 800343c:	bd10      	pop	{r4, pc}
 800343e:	46c0      	nop			; (mov r8, r8)

08003440 <__aeabi_fcmpgt>:
 8003440:	b510      	push	{r4, lr}
 8003442:	f000 fc55 	bl	8003cf0 <__gesf2>
 8003446:	2800      	cmp	r0, #0
 8003448:	dc01      	bgt.n	800344e <__aeabi_fcmpgt+0xe>
 800344a:	2000      	movs	r0, #0
 800344c:	bd10      	pop	{r4, pc}
 800344e:	2001      	movs	r0, #1
 8003450:	bd10      	pop	{r4, pc}
 8003452:	46c0      	nop			; (mov r8, r8)

08003454 <__aeabi_fcmpge>:
 8003454:	b510      	push	{r4, lr}
 8003456:	f000 fc4b 	bl	8003cf0 <__gesf2>
 800345a:	2800      	cmp	r0, #0
 800345c:	da01      	bge.n	8003462 <__aeabi_fcmpge+0xe>
 800345e:	2000      	movs	r0, #0
 8003460:	bd10      	pop	{r4, pc}
 8003462:	2001      	movs	r0, #1
 8003464:	bd10      	pop	{r4, pc}
 8003466:	46c0      	nop			; (mov r8, r8)

08003468 <__aeabi_ldivmod>:
 8003468:	2b00      	cmp	r3, #0
 800346a:	d115      	bne.n	8003498 <__aeabi_ldivmod+0x30>
 800346c:	2a00      	cmp	r2, #0
 800346e:	d113      	bne.n	8003498 <__aeabi_ldivmod+0x30>
 8003470:	2900      	cmp	r1, #0
 8003472:	db06      	blt.n	8003482 <__aeabi_ldivmod+0x1a>
 8003474:	dc01      	bgt.n	800347a <__aeabi_ldivmod+0x12>
 8003476:	2800      	cmp	r0, #0
 8003478:	d006      	beq.n	8003488 <__aeabi_ldivmod+0x20>
 800347a:	2000      	movs	r0, #0
 800347c:	43c0      	mvns	r0, r0
 800347e:	0841      	lsrs	r1, r0, #1
 8003480:	e002      	b.n	8003488 <__aeabi_ldivmod+0x20>
 8003482:	2180      	movs	r1, #128	; 0x80
 8003484:	0609      	lsls	r1, r1, #24
 8003486:	2000      	movs	r0, #0
 8003488:	b407      	push	{r0, r1, r2}
 800348a:	4802      	ldr	r0, [pc, #8]	; (8003494 <__aeabi_ldivmod+0x2c>)
 800348c:	a101      	add	r1, pc, #4	; (adr r1, 8003494 <__aeabi_ldivmod+0x2c>)
 800348e:	1840      	adds	r0, r0, r1
 8003490:	9002      	str	r0, [sp, #8]
 8003492:	bd03      	pop	{r0, r1, pc}
 8003494:	fffffee1 	.word	0xfffffee1
 8003498:	b403      	push	{r0, r1}
 800349a:	4668      	mov	r0, sp
 800349c:	b501      	push	{r0, lr}
 800349e:	9802      	ldr	r0, [sp, #8]
 80034a0:	f000 f928 	bl	80036f4 <__gnu_ldivmod_helper>
 80034a4:	9b01      	ldr	r3, [sp, #4]
 80034a6:	469e      	mov	lr, r3
 80034a8:	b002      	add	sp, #8
 80034aa:	bc0c      	pop	{r2, r3}
 80034ac:	4770      	bx	lr
 80034ae:	46c0      	nop			; (mov r8, r8)

080034b0 <__aeabi_lmul>:
 80034b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034b2:	46ce      	mov	lr, r9
 80034b4:	4699      	mov	r9, r3
 80034b6:	0c03      	lsrs	r3, r0, #16
 80034b8:	469c      	mov	ip, r3
 80034ba:	0413      	lsls	r3, r2, #16
 80034bc:	4647      	mov	r7, r8
 80034be:	0c1b      	lsrs	r3, r3, #16
 80034c0:	001d      	movs	r5, r3
 80034c2:	000e      	movs	r6, r1
 80034c4:	4661      	mov	r1, ip
 80034c6:	0404      	lsls	r4, r0, #16
 80034c8:	0c24      	lsrs	r4, r4, #16
 80034ca:	b580      	push	{r7, lr}
 80034cc:	0007      	movs	r7, r0
 80034ce:	0c10      	lsrs	r0, r2, #16
 80034d0:	434b      	muls	r3, r1
 80034d2:	4365      	muls	r5, r4
 80034d4:	4341      	muls	r1, r0
 80034d6:	4360      	muls	r0, r4
 80034d8:	0c2c      	lsrs	r4, r5, #16
 80034da:	18c0      	adds	r0, r0, r3
 80034dc:	1820      	adds	r0, r4, r0
 80034de:	468c      	mov	ip, r1
 80034e0:	4283      	cmp	r3, r0
 80034e2:	d903      	bls.n	80034ec <__aeabi_lmul+0x3c>
 80034e4:	2380      	movs	r3, #128	; 0x80
 80034e6:	025b      	lsls	r3, r3, #9
 80034e8:	4698      	mov	r8, r3
 80034ea:	44c4      	add	ip, r8
 80034ec:	4649      	mov	r1, r9
 80034ee:	4379      	muls	r1, r7
 80034f0:	4356      	muls	r6, r2
 80034f2:	0c03      	lsrs	r3, r0, #16
 80034f4:	042d      	lsls	r5, r5, #16
 80034f6:	0c2d      	lsrs	r5, r5, #16
 80034f8:	1989      	adds	r1, r1, r6
 80034fa:	4463      	add	r3, ip
 80034fc:	0400      	lsls	r0, r0, #16
 80034fe:	1940      	adds	r0, r0, r5
 8003500:	18c9      	adds	r1, r1, r3
 8003502:	bcc0      	pop	{r6, r7}
 8003504:	46b9      	mov	r9, r7
 8003506:	46b0      	mov	r8, r6
 8003508:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800350a:	46c0      	nop			; (mov r8, r8)

0800350c <__aeabi_f2uiz>:
 800350c:	219e      	movs	r1, #158	; 0x9e
 800350e:	b510      	push	{r4, lr}
 8003510:	05c9      	lsls	r1, r1, #23
 8003512:	1c04      	adds	r4, r0, #0
 8003514:	f7ff ff9e 	bl	8003454 <__aeabi_fcmpge>
 8003518:	2800      	cmp	r0, #0
 800351a:	d103      	bne.n	8003524 <__aeabi_f2uiz+0x18>
 800351c:	1c20      	adds	r0, r4, #0
 800351e:	f000 ff75 	bl	800440c <__aeabi_f2iz>
 8003522:	bd10      	pop	{r4, pc}
 8003524:	219e      	movs	r1, #158	; 0x9e
 8003526:	1c20      	adds	r0, r4, #0
 8003528:	05c9      	lsls	r1, r1, #23
 800352a:	f000 fdb9 	bl	80040a0 <__aeabi_fsub>
 800352e:	f000 ff6d 	bl	800440c <__aeabi_f2iz>
 8003532:	2380      	movs	r3, #128	; 0x80
 8003534:	061b      	lsls	r3, r3, #24
 8003536:	469c      	mov	ip, r3
 8003538:	4460      	add	r0, ip
 800353a:	e7f2      	b.n	8003522 <__aeabi_f2uiz+0x16>

0800353c <__aeabi_d2uiz>:
 800353c:	b570      	push	{r4, r5, r6, lr}
 800353e:	2200      	movs	r2, #0
 8003540:	4b0c      	ldr	r3, [pc, #48]	; (8003574 <__aeabi_d2uiz+0x38>)
 8003542:	0004      	movs	r4, r0
 8003544:	000d      	movs	r5, r1
 8003546:	f7ff ff4b 	bl	80033e0 <__aeabi_dcmpge>
 800354a:	2800      	cmp	r0, #0
 800354c:	d104      	bne.n	8003558 <__aeabi_d2uiz+0x1c>
 800354e:	0020      	movs	r0, r4
 8003550:	0029      	movs	r1, r5
 8003552:	f002 fdd1 	bl	80060f8 <__aeabi_d2iz>
 8003556:	bd70      	pop	{r4, r5, r6, pc}
 8003558:	4b06      	ldr	r3, [pc, #24]	; (8003574 <__aeabi_d2uiz+0x38>)
 800355a:	2200      	movs	r2, #0
 800355c:	0020      	movs	r0, r4
 800355e:	0029      	movs	r1, r5
 8003560:	f002 fa2a 	bl	80059b8 <__aeabi_dsub>
 8003564:	f002 fdc8 	bl	80060f8 <__aeabi_d2iz>
 8003568:	2380      	movs	r3, #128	; 0x80
 800356a:	061b      	lsls	r3, r3, #24
 800356c:	469c      	mov	ip, r3
 800356e:	4460      	add	r0, ip
 8003570:	e7f1      	b.n	8003556 <__aeabi_d2uiz+0x1a>
 8003572:	46c0      	nop			; (mov r8, r8)
 8003574:	41e00000 	.word	0x41e00000

08003578 <__aeabi_f2lz>:
 8003578:	b510      	push	{r4, lr}
 800357a:	2100      	movs	r1, #0
 800357c:	1c04      	adds	r4, r0, #0
 800357e:	f7ff ff4b 	bl	8003418 <__aeabi_fcmplt>
 8003582:	2800      	cmp	r0, #0
 8003584:	d107      	bne.n	8003596 <__aeabi_f2lz+0x1e>
 8003586:	1c20      	adds	r0, r4, #0
 8003588:	f000 f82c 	bl	80035e4 <__aeabi_f2ulz>
 800358c:	0002      	movs	r2, r0
 800358e:	000b      	movs	r3, r1
 8003590:	0010      	movs	r0, r2
 8003592:	0019      	movs	r1, r3
 8003594:	bd10      	pop	{r4, pc}
 8003596:	2380      	movs	r3, #128	; 0x80
 8003598:	061b      	lsls	r3, r3, #24
 800359a:	18e0      	adds	r0, r4, r3
 800359c:	f000 f822 	bl	80035e4 <__aeabi_f2ulz>
 80035a0:	2300      	movs	r3, #0
 80035a2:	4242      	negs	r2, r0
 80035a4:	418b      	sbcs	r3, r1
 80035a6:	e7f3      	b.n	8003590 <__aeabi_f2lz+0x18>

080035a8 <__aeabi_d2lz>:
 80035a8:	b570      	push	{r4, r5, r6, lr}
 80035aa:	0005      	movs	r5, r0
 80035ac:	000c      	movs	r4, r1
 80035ae:	2200      	movs	r2, #0
 80035b0:	2300      	movs	r3, #0
 80035b2:	0028      	movs	r0, r5
 80035b4:	0021      	movs	r1, r4
 80035b6:	f7ff fef5 	bl	80033a4 <__aeabi_dcmplt>
 80035ba:	2800      	cmp	r0, #0
 80035bc:	d108      	bne.n	80035d0 <__aeabi_d2lz+0x28>
 80035be:	0028      	movs	r0, r5
 80035c0:	0021      	movs	r1, r4
 80035c2:	f000 f82f 	bl	8003624 <__aeabi_d2ulz>
 80035c6:	0002      	movs	r2, r0
 80035c8:	000b      	movs	r3, r1
 80035ca:	0010      	movs	r0, r2
 80035cc:	0019      	movs	r1, r3
 80035ce:	bd70      	pop	{r4, r5, r6, pc}
 80035d0:	2380      	movs	r3, #128	; 0x80
 80035d2:	061b      	lsls	r3, r3, #24
 80035d4:	18e1      	adds	r1, r4, r3
 80035d6:	0028      	movs	r0, r5
 80035d8:	f000 f824 	bl	8003624 <__aeabi_d2ulz>
 80035dc:	2300      	movs	r3, #0
 80035de:	4242      	negs	r2, r0
 80035e0:	418b      	sbcs	r3, r1
 80035e2:	e7f2      	b.n	80035ca <__aeabi_d2lz+0x22>

080035e4 <__aeabi_f2ulz>:
 80035e4:	b570      	push	{r4, r5, r6, lr}
 80035e6:	f002 fe13 	bl	8006210 <__aeabi_f2d>
 80035ea:	2200      	movs	r2, #0
 80035ec:	4b0b      	ldr	r3, [pc, #44]	; (800361c <__aeabi_f2ulz+0x38>)
 80035ee:	000d      	movs	r5, r1
 80035f0:	0004      	movs	r4, r0
 80035f2:	f001 ff1f 	bl	8005434 <__aeabi_dmul>
 80035f6:	f7ff ffa1 	bl	800353c <__aeabi_d2uiz>
 80035fa:	0006      	movs	r6, r0
 80035fc:	f002 fde2 	bl	80061c4 <__aeabi_ui2d>
 8003600:	2200      	movs	r2, #0
 8003602:	4b07      	ldr	r3, [pc, #28]	; (8003620 <__aeabi_f2ulz+0x3c>)
 8003604:	f001 ff16 	bl	8005434 <__aeabi_dmul>
 8003608:	0002      	movs	r2, r0
 800360a:	000b      	movs	r3, r1
 800360c:	0020      	movs	r0, r4
 800360e:	0029      	movs	r1, r5
 8003610:	f002 f9d2 	bl	80059b8 <__aeabi_dsub>
 8003614:	f7ff ff92 	bl	800353c <__aeabi_d2uiz>
 8003618:	0031      	movs	r1, r6
 800361a:	bd70      	pop	{r4, r5, r6, pc}
 800361c:	3df00000 	.word	0x3df00000
 8003620:	41f00000 	.word	0x41f00000

08003624 <__aeabi_d2ulz>:
 8003624:	b570      	push	{r4, r5, r6, lr}
 8003626:	2200      	movs	r2, #0
 8003628:	4b0b      	ldr	r3, [pc, #44]	; (8003658 <__aeabi_d2ulz+0x34>)
 800362a:	000d      	movs	r5, r1
 800362c:	0004      	movs	r4, r0
 800362e:	f001 ff01 	bl	8005434 <__aeabi_dmul>
 8003632:	f7ff ff83 	bl	800353c <__aeabi_d2uiz>
 8003636:	0006      	movs	r6, r0
 8003638:	f002 fdc4 	bl	80061c4 <__aeabi_ui2d>
 800363c:	2200      	movs	r2, #0
 800363e:	4b07      	ldr	r3, [pc, #28]	; (800365c <__aeabi_d2ulz+0x38>)
 8003640:	f001 fef8 	bl	8005434 <__aeabi_dmul>
 8003644:	0002      	movs	r2, r0
 8003646:	000b      	movs	r3, r1
 8003648:	0020      	movs	r0, r4
 800364a:	0029      	movs	r1, r5
 800364c:	f002 f9b4 	bl	80059b8 <__aeabi_dsub>
 8003650:	f7ff ff74 	bl	800353c <__aeabi_d2uiz>
 8003654:	0031      	movs	r1, r6
 8003656:	bd70      	pop	{r4, r5, r6, pc}
 8003658:	3df00000 	.word	0x3df00000
 800365c:	41f00000 	.word	0x41f00000

08003660 <__aeabi_l2f>:
 8003660:	b5d0      	push	{r4, r6, r7, lr}
 8003662:	0004      	movs	r4, r0
 8003664:	2601      	movs	r6, #1
 8003666:	000b      	movs	r3, r1
 8003668:	0022      	movs	r2, r4
 800366a:	4f14      	ldr	r7, [pc, #80]	; (80036bc <__aeabi_l2f+0x5c>)
 800366c:	4276      	negs	r6, r6
 800366e:	0008      	movs	r0, r1
 8003670:	18b6      	adds	r6, r6, r2
 8003672:	415f      	adcs	r7, r3
 8003674:	2180      	movs	r1, #128	; 0x80
 8003676:	03c9      	lsls	r1, r1, #15
 8003678:	428f      	cmp	r7, r1
 800367a:	d216      	bcs.n	80036aa <__aeabi_l2f+0x4a>
 800367c:	4910      	ldr	r1, [pc, #64]	; (80036c0 <__aeabi_l2f+0x60>)
 800367e:	428f      	cmp	r7, r1
 8003680:	d011      	beq.n	80036a6 <__aeabi_l2f+0x46>
 8003682:	f002 fd6f 	bl	8006164 <__aeabi_i2d>
 8003686:	2200      	movs	r2, #0
 8003688:	4b0e      	ldr	r3, [pc, #56]	; (80036c4 <__aeabi_l2f+0x64>)
 800368a:	f001 fed3 	bl	8005434 <__aeabi_dmul>
 800368e:	0006      	movs	r6, r0
 8003690:	000f      	movs	r7, r1
 8003692:	0020      	movs	r0, r4
 8003694:	f002 fd96 	bl	80061c4 <__aeabi_ui2d>
 8003698:	0032      	movs	r2, r6
 800369a:	003b      	movs	r3, r7
 800369c:	f000 ff70 	bl	8004580 <__aeabi_dadd>
 80036a0:	f002 fdfe 	bl	80062a0 <__aeabi_d2f>
 80036a4:	bdd0      	pop	{r4, r6, r7, pc}
 80036a6:	3602      	adds	r6, #2
 80036a8:	d9eb      	bls.n	8003682 <__aeabi_l2f+0x22>
 80036aa:	0552      	lsls	r2, r2, #21
 80036ac:	d0e9      	beq.n	8003682 <__aeabi_l2f+0x22>
 80036ae:	0ae3      	lsrs	r3, r4, #11
 80036b0:	2480      	movs	r4, #128	; 0x80
 80036b2:	02db      	lsls	r3, r3, #11
 80036b4:	0124      	lsls	r4, r4, #4
 80036b6:	431c      	orrs	r4, r3
 80036b8:	e7e3      	b.n	8003682 <__aeabi_l2f+0x22>
 80036ba:	46c0      	nop			; (mov r8, r8)
 80036bc:	001fffff 	.word	0x001fffff
 80036c0:	003fffff 	.word	0x003fffff
 80036c4:	41f00000 	.word	0x41f00000

080036c8 <__aeabi_l2d>:
 80036c8:	b570      	push	{r4, r5, r6, lr}
 80036ca:	0006      	movs	r6, r0
 80036cc:	0008      	movs	r0, r1
 80036ce:	f002 fd49 	bl	8006164 <__aeabi_i2d>
 80036d2:	2200      	movs	r2, #0
 80036d4:	4b06      	ldr	r3, [pc, #24]	; (80036f0 <__aeabi_l2d+0x28>)
 80036d6:	f001 fead 	bl	8005434 <__aeabi_dmul>
 80036da:	000d      	movs	r5, r1
 80036dc:	0004      	movs	r4, r0
 80036de:	0030      	movs	r0, r6
 80036e0:	f002 fd70 	bl	80061c4 <__aeabi_ui2d>
 80036e4:	002b      	movs	r3, r5
 80036e6:	0022      	movs	r2, r4
 80036e8:	f000 ff4a 	bl	8004580 <__aeabi_dadd>
 80036ec:	bd70      	pop	{r4, r5, r6, pc}
 80036ee:	46c0      	nop			; (mov r8, r8)
 80036f0:	41f00000 	.word	0x41f00000

080036f4 <__gnu_ldivmod_helper>:
 80036f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036f6:	46ce      	mov	lr, r9
 80036f8:	4647      	mov	r7, r8
 80036fa:	b580      	push	{r7, lr}
 80036fc:	4691      	mov	r9, r2
 80036fe:	4698      	mov	r8, r3
 8003700:	0004      	movs	r4, r0
 8003702:	000d      	movs	r5, r1
 8003704:	f002 fe70 	bl	80063e8 <__divdi3>
 8003708:	0007      	movs	r7, r0
 800370a:	000e      	movs	r6, r1
 800370c:	0002      	movs	r2, r0
 800370e:	000b      	movs	r3, r1
 8003710:	4648      	mov	r0, r9
 8003712:	4641      	mov	r1, r8
 8003714:	f7ff fecc 	bl	80034b0 <__aeabi_lmul>
 8003718:	1a24      	subs	r4, r4, r0
 800371a:	418d      	sbcs	r5, r1
 800371c:	9b08      	ldr	r3, [sp, #32]
 800371e:	0038      	movs	r0, r7
 8003720:	0031      	movs	r1, r6
 8003722:	601c      	str	r4, [r3, #0]
 8003724:	605d      	str	r5, [r3, #4]
 8003726:	bcc0      	pop	{r6, r7}
 8003728:	46b9      	mov	r9, r7
 800372a:	46b0      	mov	r8, r6
 800372c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800372e:	46c0      	nop			; (mov r8, r8)

08003730 <__aeabi_fadd>:
 8003730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003732:	4647      	mov	r7, r8
 8003734:	46ce      	mov	lr, r9
 8003736:	024a      	lsls	r2, r1, #9
 8003738:	0243      	lsls	r3, r0, #9
 800373a:	0045      	lsls	r5, r0, #1
 800373c:	0fc4      	lsrs	r4, r0, #31
 800373e:	0a50      	lsrs	r0, r2, #9
 8003740:	4680      	mov	r8, r0
 8003742:	0048      	lsls	r0, r1, #1
 8003744:	0a5b      	lsrs	r3, r3, #9
 8003746:	0e00      	lsrs	r0, r0, #24
 8003748:	0992      	lsrs	r2, r2, #6
 800374a:	4694      	mov	ip, r2
 800374c:	b580      	push	{r7, lr}
 800374e:	001e      	movs	r6, r3
 8003750:	4681      	mov	r9, r0
 8003752:	0002      	movs	r2, r0
 8003754:	0e2d      	lsrs	r5, r5, #24
 8003756:	00df      	lsls	r7, r3, #3
 8003758:	0fc9      	lsrs	r1, r1, #31
 800375a:	428c      	cmp	r4, r1
 800375c:	d024      	beq.n	80037a8 <__aeabi_fadd+0x78>
 800375e:	1a28      	subs	r0, r5, r0
 8003760:	2800      	cmp	r0, #0
 8003762:	dd0e      	ble.n	8003782 <__aeabi_fadd+0x52>
 8003764:	2a00      	cmp	r2, #0
 8003766:	d13e      	bne.n	80037e6 <__aeabi_fadd+0xb6>
 8003768:	4662      	mov	r2, ip
 800376a:	2a00      	cmp	r2, #0
 800376c:	d100      	bne.n	8003770 <__aeabi_fadd+0x40>
 800376e:	e0fd      	b.n	800396c <__aeabi_fadd+0x23c>
 8003770:	1e42      	subs	r2, r0, #1
 8003772:	2801      	cmp	r0, #1
 8003774:	d100      	bne.n	8003778 <__aeabi_fadd+0x48>
 8003776:	e137      	b.n	80039e8 <__aeabi_fadd+0x2b8>
 8003778:	28ff      	cmp	r0, #255	; 0xff
 800377a:	d100      	bne.n	800377e <__aeabi_fadd+0x4e>
 800377c:	e0a9      	b.n	80038d2 <__aeabi_fadd+0x1a2>
 800377e:	0010      	movs	r0, r2
 8003780:	e039      	b.n	80037f6 <__aeabi_fadd+0xc6>
 8003782:	2800      	cmp	r0, #0
 8003784:	d063      	beq.n	800384e <__aeabi_fadd+0x11e>
 8003786:	464b      	mov	r3, r9
 8003788:	1b52      	subs	r2, r2, r5
 800378a:	2d00      	cmp	r5, #0
 800378c:	d000      	beq.n	8003790 <__aeabi_fadd+0x60>
 800378e:	e0e0      	b.n	8003952 <__aeabi_fadd+0x222>
 8003790:	2f00      	cmp	r7, #0
 8003792:	d100      	bne.n	8003796 <__aeabi_fadd+0x66>
 8003794:	e0ce      	b.n	8003934 <__aeabi_fadd+0x204>
 8003796:	1e53      	subs	r3, r2, #1
 8003798:	2a01      	cmp	r2, #1
 800379a:	d100      	bne.n	800379e <__aeabi_fadd+0x6e>
 800379c:	e155      	b.n	8003a4a <__aeabi_fadd+0x31a>
 800379e:	2aff      	cmp	r2, #255	; 0xff
 80037a0:	d100      	bne.n	80037a4 <__aeabi_fadd+0x74>
 80037a2:	e094      	b.n	80038ce <__aeabi_fadd+0x19e>
 80037a4:	001a      	movs	r2, r3
 80037a6:	e0d9      	b.n	800395c <__aeabi_fadd+0x22c>
 80037a8:	1a2a      	subs	r2, r5, r0
 80037aa:	2a00      	cmp	r2, #0
 80037ac:	dc00      	bgt.n	80037b0 <__aeabi_fadd+0x80>
 80037ae:	e099      	b.n	80038e4 <__aeabi_fadd+0x1b4>
 80037b0:	2800      	cmp	r0, #0
 80037b2:	d062      	beq.n	800387a <__aeabi_fadd+0x14a>
 80037b4:	2dff      	cmp	r5, #255	; 0xff
 80037b6:	d100      	bne.n	80037ba <__aeabi_fadd+0x8a>
 80037b8:	e08b      	b.n	80038d2 <__aeabi_fadd+0x1a2>
 80037ba:	2380      	movs	r3, #128	; 0x80
 80037bc:	4661      	mov	r1, ip
 80037be:	04db      	lsls	r3, r3, #19
 80037c0:	4319      	orrs	r1, r3
 80037c2:	468c      	mov	ip, r1
 80037c4:	2a1b      	cmp	r2, #27
 80037c6:	dc00      	bgt.n	80037ca <__aeabi_fadd+0x9a>
 80037c8:	e0d2      	b.n	8003970 <__aeabi_fadd+0x240>
 80037ca:	2301      	movs	r3, #1
 80037cc:	19db      	adds	r3, r3, r7
 80037ce:	015a      	lsls	r2, r3, #5
 80037d0:	d56a      	bpl.n	80038a8 <__aeabi_fadd+0x178>
 80037d2:	3501      	adds	r5, #1
 80037d4:	2dff      	cmp	r5, #255	; 0xff
 80037d6:	d05b      	beq.n	8003890 <__aeabi_fadd+0x160>
 80037d8:	2201      	movs	r2, #1
 80037da:	49a3      	ldr	r1, [pc, #652]	; (8003a68 <__aeabi_fadd+0x338>)
 80037dc:	401a      	ands	r2, r3
 80037de:	085b      	lsrs	r3, r3, #1
 80037e0:	400b      	ands	r3, r1
 80037e2:	4313      	orrs	r3, r2
 80037e4:	e01c      	b.n	8003820 <__aeabi_fadd+0xf0>
 80037e6:	2dff      	cmp	r5, #255	; 0xff
 80037e8:	d100      	bne.n	80037ec <__aeabi_fadd+0xbc>
 80037ea:	e072      	b.n	80038d2 <__aeabi_fadd+0x1a2>
 80037ec:	2380      	movs	r3, #128	; 0x80
 80037ee:	4662      	mov	r2, ip
 80037f0:	04db      	lsls	r3, r3, #19
 80037f2:	431a      	orrs	r2, r3
 80037f4:	4694      	mov	ip, r2
 80037f6:	281b      	cmp	r0, #27
 80037f8:	dc00      	bgt.n	80037fc <__aeabi_fadd+0xcc>
 80037fa:	e090      	b.n	800391e <__aeabi_fadd+0x1ee>
 80037fc:	2301      	movs	r3, #1
 80037fe:	1afb      	subs	r3, r7, r3
 8003800:	015a      	lsls	r2, r3, #5
 8003802:	d551      	bpl.n	80038a8 <__aeabi_fadd+0x178>
 8003804:	019b      	lsls	r3, r3, #6
 8003806:	099e      	lsrs	r6, r3, #6
 8003808:	0030      	movs	r0, r6
 800380a:	f002 fdcf 	bl	80063ac <__clzsi2>
 800380e:	0033      	movs	r3, r6
 8003810:	3805      	subs	r0, #5
 8003812:	4083      	lsls	r3, r0
 8003814:	4285      	cmp	r5, r0
 8003816:	dc00      	bgt.n	800381a <__aeabi_fadd+0xea>
 8003818:	e075      	b.n	8003906 <__aeabi_fadd+0x1d6>
 800381a:	4a94      	ldr	r2, [pc, #592]	; (8003a6c <__aeabi_fadd+0x33c>)
 800381c:	1a2d      	subs	r5, r5, r0
 800381e:	4013      	ands	r3, r2
 8003820:	075a      	lsls	r2, r3, #29
 8003822:	d004      	beq.n	800382e <__aeabi_fadd+0xfe>
 8003824:	220f      	movs	r2, #15
 8003826:	401a      	ands	r2, r3
 8003828:	2a04      	cmp	r2, #4
 800382a:	d000      	beq.n	800382e <__aeabi_fadd+0xfe>
 800382c:	3304      	adds	r3, #4
 800382e:	015a      	lsls	r2, r3, #5
 8003830:	d53c      	bpl.n	80038ac <__aeabi_fadd+0x17c>
 8003832:	1c68      	adds	r0, r5, #1
 8003834:	2dfe      	cmp	r5, #254	; 0xfe
 8003836:	d02b      	beq.n	8003890 <__aeabi_fadd+0x160>
 8003838:	019b      	lsls	r3, r3, #6
 800383a:	0a5e      	lsrs	r6, r3, #9
 800383c:	b2c0      	uxtb	r0, r0
 800383e:	05c0      	lsls	r0, r0, #23
 8003840:	4330      	orrs	r0, r6
 8003842:	07e4      	lsls	r4, r4, #31
 8003844:	4320      	orrs	r0, r4
 8003846:	bcc0      	pop	{r6, r7}
 8003848:	46b9      	mov	r9, r7
 800384a:	46b0      	mov	r8, r6
 800384c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800384e:	20fe      	movs	r0, #254	; 0xfe
 8003850:	1c6a      	adds	r2, r5, #1
 8003852:	4210      	tst	r0, r2
 8003854:	d172      	bne.n	800393c <__aeabi_fadd+0x20c>
 8003856:	2d00      	cmp	r5, #0
 8003858:	d000      	beq.n	800385c <__aeabi_fadd+0x12c>
 800385a:	e0ae      	b.n	80039ba <__aeabi_fadd+0x28a>
 800385c:	2f00      	cmp	r7, #0
 800385e:	d100      	bne.n	8003862 <__aeabi_fadd+0x132>
 8003860:	e0ec      	b.n	8003a3c <__aeabi_fadd+0x30c>
 8003862:	4663      	mov	r3, ip
 8003864:	2000      	movs	r0, #0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d0e9      	beq.n	800383e <__aeabi_fadd+0x10e>
 800386a:	1afb      	subs	r3, r7, r3
 800386c:	015a      	lsls	r2, r3, #5
 800386e:	d400      	bmi.n	8003872 <__aeabi_fadd+0x142>
 8003870:	e0f3      	b.n	8003a5a <__aeabi_fadd+0x32a>
 8003872:	4663      	mov	r3, ip
 8003874:	000c      	movs	r4, r1
 8003876:	1bdb      	subs	r3, r3, r7
 8003878:	e7d2      	b.n	8003820 <__aeabi_fadd+0xf0>
 800387a:	4661      	mov	r1, ip
 800387c:	2900      	cmp	r1, #0
 800387e:	d05b      	beq.n	8003938 <__aeabi_fadd+0x208>
 8003880:	1e51      	subs	r1, r2, #1
 8003882:	2a01      	cmp	r2, #1
 8003884:	d100      	bne.n	8003888 <__aeabi_fadd+0x158>
 8003886:	e0a7      	b.n	80039d8 <__aeabi_fadd+0x2a8>
 8003888:	2aff      	cmp	r2, #255	; 0xff
 800388a:	d022      	beq.n	80038d2 <__aeabi_fadd+0x1a2>
 800388c:	000a      	movs	r2, r1
 800388e:	e799      	b.n	80037c4 <__aeabi_fadd+0x94>
 8003890:	20ff      	movs	r0, #255	; 0xff
 8003892:	2600      	movs	r6, #0
 8003894:	e7d3      	b.n	800383e <__aeabi_fadd+0x10e>
 8003896:	21fe      	movs	r1, #254	; 0xfe
 8003898:	1c6a      	adds	r2, r5, #1
 800389a:	4211      	tst	r1, r2
 800389c:	d073      	beq.n	8003986 <__aeabi_fadd+0x256>
 800389e:	2aff      	cmp	r2, #255	; 0xff
 80038a0:	d0f6      	beq.n	8003890 <__aeabi_fadd+0x160>
 80038a2:	0015      	movs	r5, r2
 80038a4:	4467      	add	r7, ip
 80038a6:	087b      	lsrs	r3, r7, #1
 80038a8:	075a      	lsls	r2, r3, #29
 80038aa:	d1bb      	bne.n	8003824 <__aeabi_fadd+0xf4>
 80038ac:	08db      	lsrs	r3, r3, #3
 80038ae:	2dff      	cmp	r5, #255	; 0xff
 80038b0:	d00f      	beq.n	80038d2 <__aeabi_fadd+0x1a2>
 80038b2:	025b      	lsls	r3, r3, #9
 80038b4:	0a5e      	lsrs	r6, r3, #9
 80038b6:	b2e8      	uxtb	r0, r5
 80038b8:	e7c1      	b.n	800383e <__aeabi_fadd+0x10e>
 80038ba:	4662      	mov	r2, ip
 80038bc:	2a00      	cmp	r2, #0
 80038be:	d008      	beq.n	80038d2 <__aeabi_fadd+0x1a2>
 80038c0:	2280      	movs	r2, #128	; 0x80
 80038c2:	03d2      	lsls	r2, r2, #15
 80038c4:	4213      	tst	r3, r2
 80038c6:	d004      	beq.n	80038d2 <__aeabi_fadd+0x1a2>
 80038c8:	4640      	mov	r0, r8
 80038ca:	4210      	tst	r0, r2
 80038cc:	d101      	bne.n	80038d2 <__aeabi_fadd+0x1a2>
 80038ce:	000c      	movs	r4, r1
 80038d0:	4643      	mov	r3, r8
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d0dc      	beq.n	8003890 <__aeabi_fadd+0x160>
 80038d6:	2680      	movs	r6, #128	; 0x80
 80038d8:	03f6      	lsls	r6, r6, #15
 80038da:	431e      	orrs	r6, r3
 80038dc:	0276      	lsls	r6, r6, #9
 80038de:	20ff      	movs	r0, #255	; 0xff
 80038e0:	0a76      	lsrs	r6, r6, #9
 80038e2:	e7ac      	b.n	800383e <__aeabi_fadd+0x10e>
 80038e4:	2a00      	cmp	r2, #0
 80038e6:	d0d6      	beq.n	8003896 <__aeabi_fadd+0x166>
 80038e8:	1b42      	subs	r2, r0, r5
 80038ea:	2d00      	cmp	r5, #0
 80038ec:	d05c      	beq.n	80039a8 <__aeabi_fadd+0x278>
 80038ee:	28ff      	cmp	r0, #255	; 0xff
 80038f0:	d0ee      	beq.n	80038d0 <__aeabi_fadd+0x1a0>
 80038f2:	2380      	movs	r3, #128	; 0x80
 80038f4:	04db      	lsls	r3, r3, #19
 80038f6:	431f      	orrs	r7, r3
 80038f8:	2a1b      	cmp	r2, #27
 80038fa:	dc00      	bgt.n	80038fe <__aeabi_fadd+0x1ce>
 80038fc:	e082      	b.n	8003a04 <__aeabi_fadd+0x2d4>
 80038fe:	2301      	movs	r3, #1
 8003900:	464d      	mov	r5, r9
 8003902:	4463      	add	r3, ip
 8003904:	e763      	b.n	80037ce <__aeabi_fadd+0x9e>
 8003906:	2220      	movs	r2, #32
 8003908:	1b40      	subs	r0, r0, r5
 800390a:	3001      	adds	r0, #1
 800390c:	1a12      	subs	r2, r2, r0
 800390e:	0019      	movs	r1, r3
 8003910:	4093      	lsls	r3, r2
 8003912:	40c1      	lsrs	r1, r0
 8003914:	1e5a      	subs	r2, r3, #1
 8003916:	4193      	sbcs	r3, r2
 8003918:	2500      	movs	r5, #0
 800391a:	430b      	orrs	r3, r1
 800391c:	e780      	b.n	8003820 <__aeabi_fadd+0xf0>
 800391e:	2320      	movs	r3, #32
 8003920:	4661      	mov	r1, ip
 8003922:	1a1b      	subs	r3, r3, r0
 8003924:	4099      	lsls	r1, r3
 8003926:	4662      	mov	r2, ip
 8003928:	000b      	movs	r3, r1
 800392a:	40c2      	lsrs	r2, r0
 800392c:	1e59      	subs	r1, r3, #1
 800392e:	418b      	sbcs	r3, r1
 8003930:	4313      	orrs	r3, r2
 8003932:	e764      	b.n	80037fe <__aeabi_fadd+0xce>
 8003934:	000c      	movs	r4, r1
 8003936:	4643      	mov	r3, r8
 8003938:	0015      	movs	r5, r2
 800393a:	e7b8      	b.n	80038ae <__aeabi_fadd+0x17e>
 800393c:	4663      	mov	r3, ip
 800393e:	1afe      	subs	r6, r7, r3
 8003940:	0173      	lsls	r3, r6, #5
 8003942:	d445      	bmi.n	80039d0 <__aeabi_fadd+0x2a0>
 8003944:	2e00      	cmp	r6, #0
 8003946:	d000      	beq.n	800394a <__aeabi_fadd+0x21a>
 8003948:	e75e      	b.n	8003808 <__aeabi_fadd+0xd8>
 800394a:	2400      	movs	r4, #0
 800394c:	2000      	movs	r0, #0
 800394e:	2600      	movs	r6, #0
 8003950:	e775      	b.n	800383e <__aeabi_fadd+0x10e>
 8003952:	2bff      	cmp	r3, #255	; 0xff
 8003954:	d0bb      	beq.n	80038ce <__aeabi_fadd+0x19e>
 8003956:	2380      	movs	r3, #128	; 0x80
 8003958:	04db      	lsls	r3, r3, #19
 800395a:	431f      	orrs	r7, r3
 800395c:	2a1b      	cmp	r2, #27
 800395e:	dd47      	ble.n	80039f0 <__aeabi_fadd+0x2c0>
 8003960:	2301      	movs	r3, #1
 8003962:	4662      	mov	r2, ip
 8003964:	000c      	movs	r4, r1
 8003966:	464d      	mov	r5, r9
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	e749      	b.n	8003800 <__aeabi_fadd+0xd0>
 800396c:	0005      	movs	r5, r0
 800396e:	e79e      	b.n	80038ae <__aeabi_fadd+0x17e>
 8003970:	4661      	mov	r1, ip
 8003972:	2320      	movs	r3, #32
 8003974:	40d1      	lsrs	r1, r2
 8003976:	1a9b      	subs	r3, r3, r2
 8003978:	4662      	mov	r2, ip
 800397a:	409a      	lsls	r2, r3
 800397c:	0013      	movs	r3, r2
 800397e:	1e5a      	subs	r2, r3, #1
 8003980:	4193      	sbcs	r3, r2
 8003982:	430b      	orrs	r3, r1
 8003984:	e722      	b.n	80037cc <__aeabi_fadd+0x9c>
 8003986:	2d00      	cmp	r5, #0
 8003988:	d146      	bne.n	8003a18 <__aeabi_fadd+0x2e8>
 800398a:	2f00      	cmp	r7, #0
 800398c:	d062      	beq.n	8003a54 <__aeabi_fadd+0x324>
 800398e:	4663      	mov	r3, ip
 8003990:	2000      	movs	r0, #0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d100      	bne.n	8003998 <__aeabi_fadd+0x268>
 8003996:	e752      	b.n	800383e <__aeabi_fadd+0x10e>
 8003998:	003b      	movs	r3, r7
 800399a:	4463      	add	r3, ip
 800399c:	015a      	lsls	r2, r3, #5
 800399e:	d583      	bpl.n	80038a8 <__aeabi_fadd+0x178>
 80039a0:	4a32      	ldr	r2, [pc, #200]	; (8003a6c <__aeabi_fadd+0x33c>)
 80039a2:	3501      	adds	r5, #1
 80039a4:	4013      	ands	r3, r2
 80039a6:	e77f      	b.n	80038a8 <__aeabi_fadd+0x178>
 80039a8:	2f00      	cmp	r7, #0
 80039aa:	d0c4      	beq.n	8003936 <__aeabi_fadd+0x206>
 80039ac:	1e53      	subs	r3, r2, #1
 80039ae:	2a01      	cmp	r2, #1
 80039b0:	d012      	beq.n	80039d8 <__aeabi_fadd+0x2a8>
 80039b2:	2aff      	cmp	r2, #255	; 0xff
 80039b4:	d08c      	beq.n	80038d0 <__aeabi_fadd+0x1a0>
 80039b6:	001a      	movs	r2, r3
 80039b8:	e79e      	b.n	80038f8 <__aeabi_fadd+0x1c8>
 80039ba:	2f00      	cmp	r7, #0
 80039bc:	d000      	beq.n	80039c0 <__aeabi_fadd+0x290>
 80039be:	e77c      	b.n	80038ba <__aeabi_fadd+0x18a>
 80039c0:	4663      	mov	r3, ip
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d183      	bne.n	80038ce <__aeabi_fadd+0x19e>
 80039c6:	2680      	movs	r6, #128	; 0x80
 80039c8:	2400      	movs	r4, #0
 80039ca:	20ff      	movs	r0, #255	; 0xff
 80039cc:	03f6      	lsls	r6, r6, #15
 80039ce:	e736      	b.n	800383e <__aeabi_fadd+0x10e>
 80039d0:	4663      	mov	r3, ip
 80039d2:	000c      	movs	r4, r1
 80039d4:	1bde      	subs	r6, r3, r7
 80039d6:	e717      	b.n	8003808 <__aeabi_fadd+0xd8>
 80039d8:	003b      	movs	r3, r7
 80039da:	4463      	add	r3, ip
 80039dc:	2501      	movs	r5, #1
 80039de:	015a      	lsls	r2, r3, #5
 80039e0:	d400      	bmi.n	80039e4 <__aeabi_fadd+0x2b4>
 80039e2:	e761      	b.n	80038a8 <__aeabi_fadd+0x178>
 80039e4:	2502      	movs	r5, #2
 80039e6:	e6f7      	b.n	80037d8 <__aeabi_fadd+0xa8>
 80039e8:	4663      	mov	r3, ip
 80039ea:	2501      	movs	r5, #1
 80039ec:	1afb      	subs	r3, r7, r3
 80039ee:	e707      	b.n	8003800 <__aeabi_fadd+0xd0>
 80039f0:	2320      	movs	r3, #32
 80039f2:	1a9b      	subs	r3, r3, r2
 80039f4:	0038      	movs	r0, r7
 80039f6:	409f      	lsls	r7, r3
 80039f8:	003b      	movs	r3, r7
 80039fa:	40d0      	lsrs	r0, r2
 80039fc:	1e5a      	subs	r2, r3, #1
 80039fe:	4193      	sbcs	r3, r2
 8003a00:	4303      	orrs	r3, r0
 8003a02:	e7ae      	b.n	8003962 <__aeabi_fadd+0x232>
 8003a04:	2320      	movs	r3, #32
 8003a06:	1a9b      	subs	r3, r3, r2
 8003a08:	0039      	movs	r1, r7
 8003a0a:	409f      	lsls	r7, r3
 8003a0c:	003b      	movs	r3, r7
 8003a0e:	40d1      	lsrs	r1, r2
 8003a10:	1e5a      	subs	r2, r3, #1
 8003a12:	4193      	sbcs	r3, r2
 8003a14:	430b      	orrs	r3, r1
 8003a16:	e773      	b.n	8003900 <__aeabi_fadd+0x1d0>
 8003a18:	2f00      	cmp	r7, #0
 8003a1a:	d100      	bne.n	8003a1e <__aeabi_fadd+0x2ee>
 8003a1c:	e758      	b.n	80038d0 <__aeabi_fadd+0x1a0>
 8003a1e:	4662      	mov	r2, ip
 8003a20:	2a00      	cmp	r2, #0
 8003a22:	d100      	bne.n	8003a26 <__aeabi_fadd+0x2f6>
 8003a24:	e755      	b.n	80038d2 <__aeabi_fadd+0x1a2>
 8003a26:	2280      	movs	r2, #128	; 0x80
 8003a28:	03d2      	lsls	r2, r2, #15
 8003a2a:	4213      	tst	r3, r2
 8003a2c:	d100      	bne.n	8003a30 <__aeabi_fadd+0x300>
 8003a2e:	e750      	b.n	80038d2 <__aeabi_fadd+0x1a2>
 8003a30:	4641      	mov	r1, r8
 8003a32:	4211      	tst	r1, r2
 8003a34:	d000      	beq.n	8003a38 <__aeabi_fadd+0x308>
 8003a36:	e74c      	b.n	80038d2 <__aeabi_fadd+0x1a2>
 8003a38:	4643      	mov	r3, r8
 8003a3a:	e74a      	b.n	80038d2 <__aeabi_fadd+0x1a2>
 8003a3c:	4663      	mov	r3, ip
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d083      	beq.n	800394a <__aeabi_fadd+0x21a>
 8003a42:	000c      	movs	r4, r1
 8003a44:	4646      	mov	r6, r8
 8003a46:	2000      	movs	r0, #0
 8003a48:	e6f9      	b.n	800383e <__aeabi_fadd+0x10e>
 8003a4a:	4663      	mov	r3, ip
 8003a4c:	000c      	movs	r4, r1
 8003a4e:	1bdb      	subs	r3, r3, r7
 8003a50:	3501      	adds	r5, #1
 8003a52:	e6d5      	b.n	8003800 <__aeabi_fadd+0xd0>
 8003a54:	4646      	mov	r6, r8
 8003a56:	2000      	movs	r0, #0
 8003a58:	e6f1      	b.n	800383e <__aeabi_fadd+0x10e>
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d000      	beq.n	8003a60 <__aeabi_fadd+0x330>
 8003a5e:	e723      	b.n	80038a8 <__aeabi_fadd+0x178>
 8003a60:	2400      	movs	r4, #0
 8003a62:	2600      	movs	r6, #0
 8003a64:	e6eb      	b.n	800383e <__aeabi_fadd+0x10e>
 8003a66:	46c0      	nop			; (mov r8, r8)
 8003a68:	7dffffff 	.word	0x7dffffff
 8003a6c:	fbffffff 	.word	0xfbffffff

08003a70 <__aeabi_fdiv>:
 8003a70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a72:	464f      	mov	r7, r9
 8003a74:	4646      	mov	r6, r8
 8003a76:	46d6      	mov	lr, sl
 8003a78:	0245      	lsls	r5, r0, #9
 8003a7a:	b5c0      	push	{r6, r7, lr}
 8003a7c:	0047      	lsls	r7, r0, #1
 8003a7e:	1c0c      	adds	r4, r1, #0
 8003a80:	0a6d      	lsrs	r5, r5, #9
 8003a82:	0e3f      	lsrs	r7, r7, #24
 8003a84:	0fc6      	lsrs	r6, r0, #31
 8003a86:	2f00      	cmp	r7, #0
 8003a88:	d100      	bne.n	8003a8c <__aeabi_fdiv+0x1c>
 8003a8a:	e06f      	b.n	8003b6c <__aeabi_fdiv+0xfc>
 8003a8c:	2fff      	cmp	r7, #255	; 0xff
 8003a8e:	d100      	bne.n	8003a92 <__aeabi_fdiv+0x22>
 8003a90:	e074      	b.n	8003b7c <__aeabi_fdiv+0x10c>
 8003a92:	2300      	movs	r3, #0
 8003a94:	2280      	movs	r2, #128	; 0x80
 8003a96:	4699      	mov	r9, r3
 8003a98:	469a      	mov	sl, r3
 8003a9a:	00ed      	lsls	r5, r5, #3
 8003a9c:	04d2      	lsls	r2, r2, #19
 8003a9e:	4315      	orrs	r5, r2
 8003aa0:	3f7f      	subs	r7, #127	; 0x7f
 8003aa2:	0263      	lsls	r3, r4, #9
 8003aa4:	0a5b      	lsrs	r3, r3, #9
 8003aa6:	4698      	mov	r8, r3
 8003aa8:	0063      	lsls	r3, r4, #1
 8003aaa:	0e1b      	lsrs	r3, r3, #24
 8003aac:	0fe4      	lsrs	r4, r4, #31
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d04d      	beq.n	8003b4e <__aeabi_fdiv+0xde>
 8003ab2:	2bff      	cmp	r3, #255	; 0xff
 8003ab4:	d045      	beq.n	8003b42 <__aeabi_fdiv+0xd2>
 8003ab6:	4642      	mov	r2, r8
 8003ab8:	2180      	movs	r1, #128	; 0x80
 8003aba:	00d2      	lsls	r2, r2, #3
 8003abc:	04c9      	lsls	r1, r1, #19
 8003abe:	4311      	orrs	r1, r2
 8003ac0:	4688      	mov	r8, r1
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	3b7f      	subs	r3, #127	; 0x7f
 8003ac6:	0031      	movs	r1, r6
 8003ac8:	1aff      	subs	r7, r7, r3
 8003aca:	464b      	mov	r3, r9
 8003acc:	4061      	eors	r1, r4
 8003ace:	b2c9      	uxtb	r1, r1
 8003ad0:	2b0f      	cmp	r3, #15
 8003ad2:	d900      	bls.n	8003ad6 <__aeabi_fdiv+0x66>
 8003ad4:	e0b8      	b.n	8003c48 <__aeabi_fdiv+0x1d8>
 8003ad6:	4870      	ldr	r0, [pc, #448]	; (8003c98 <__aeabi_fdiv+0x228>)
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	58c3      	ldr	r3, [r0, r3]
 8003adc:	469f      	mov	pc, r3
 8003ade:	2300      	movs	r3, #0
 8003ae0:	4698      	mov	r8, r3
 8003ae2:	0026      	movs	r6, r4
 8003ae4:	4645      	mov	r5, r8
 8003ae6:	4692      	mov	sl, r2
 8003ae8:	4653      	mov	r3, sl
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d100      	bne.n	8003af0 <__aeabi_fdiv+0x80>
 8003aee:	e08d      	b.n	8003c0c <__aeabi_fdiv+0x19c>
 8003af0:	2b03      	cmp	r3, #3
 8003af2:	d100      	bne.n	8003af6 <__aeabi_fdiv+0x86>
 8003af4:	e0a1      	b.n	8003c3a <__aeabi_fdiv+0x1ca>
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d018      	beq.n	8003b2c <__aeabi_fdiv+0xbc>
 8003afa:	003b      	movs	r3, r7
 8003afc:	337f      	adds	r3, #127	; 0x7f
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	dd6d      	ble.n	8003bde <__aeabi_fdiv+0x16e>
 8003b02:	076a      	lsls	r2, r5, #29
 8003b04:	d004      	beq.n	8003b10 <__aeabi_fdiv+0xa0>
 8003b06:	220f      	movs	r2, #15
 8003b08:	402a      	ands	r2, r5
 8003b0a:	2a04      	cmp	r2, #4
 8003b0c:	d000      	beq.n	8003b10 <__aeabi_fdiv+0xa0>
 8003b0e:	3504      	adds	r5, #4
 8003b10:	012a      	lsls	r2, r5, #4
 8003b12:	d503      	bpl.n	8003b1c <__aeabi_fdiv+0xac>
 8003b14:	4b61      	ldr	r3, [pc, #388]	; (8003c9c <__aeabi_fdiv+0x22c>)
 8003b16:	401d      	ands	r5, r3
 8003b18:	003b      	movs	r3, r7
 8003b1a:	3380      	adds	r3, #128	; 0x80
 8003b1c:	2bfe      	cmp	r3, #254	; 0xfe
 8003b1e:	dd00      	ble.n	8003b22 <__aeabi_fdiv+0xb2>
 8003b20:	e074      	b.n	8003c0c <__aeabi_fdiv+0x19c>
 8003b22:	01aa      	lsls	r2, r5, #6
 8003b24:	0a52      	lsrs	r2, r2, #9
 8003b26:	b2d8      	uxtb	r0, r3
 8003b28:	e002      	b.n	8003b30 <__aeabi_fdiv+0xc0>
 8003b2a:	000e      	movs	r6, r1
 8003b2c:	2000      	movs	r0, #0
 8003b2e:	2200      	movs	r2, #0
 8003b30:	05c0      	lsls	r0, r0, #23
 8003b32:	07f6      	lsls	r6, r6, #31
 8003b34:	4310      	orrs	r0, r2
 8003b36:	4330      	orrs	r0, r6
 8003b38:	bce0      	pop	{r5, r6, r7}
 8003b3a:	46ba      	mov	sl, r7
 8003b3c:	46b1      	mov	r9, r6
 8003b3e:	46a8      	mov	r8, r5
 8003b40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b42:	4643      	mov	r3, r8
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d13f      	bne.n	8003bc8 <__aeabi_fdiv+0x158>
 8003b48:	2202      	movs	r2, #2
 8003b4a:	3fff      	subs	r7, #255	; 0xff
 8003b4c:	e003      	b.n	8003b56 <__aeabi_fdiv+0xe6>
 8003b4e:	4643      	mov	r3, r8
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d12d      	bne.n	8003bb0 <__aeabi_fdiv+0x140>
 8003b54:	2201      	movs	r2, #1
 8003b56:	0031      	movs	r1, r6
 8003b58:	464b      	mov	r3, r9
 8003b5a:	4061      	eors	r1, r4
 8003b5c:	b2c9      	uxtb	r1, r1
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	2b0f      	cmp	r3, #15
 8003b62:	d838      	bhi.n	8003bd6 <__aeabi_fdiv+0x166>
 8003b64:	484e      	ldr	r0, [pc, #312]	; (8003ca0 <__aeabi_fdiv+0x230>)
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	58c3      	ldr	r3, [r0, r3]
 8003b6a:	469f      	mov	pc, r3
 8003b6c:	2d00      	cmp	r5, #0
 8003b6e:	d113      	bne.n	8003b98 <__aeabi_fdiv+0x128>
 8003b70:	2304      	movs	r3, #4
 8003b72:	4699      	mov	r9, r3
 8003b74:	3b03      	subs	r3, #3
 8003b76:	2700      	movs	r7, #0
 8003b78:	469a      	mov	sl, r3
 8003b7a:	e792      	b.n	8003aa2 <__aeabi_fdiv+0x32>
 8003b7c:	2d00      	cmp	r5, #0
 8003b7e:	d105      	bne.n	8003b8c <__aeabi_fdiv+0x11c>
 8003b80:	2308      	movs	r3, #8
 8003b82:	4699      	mov	r9, r3
 8003b84:	3b06      	subs	r3, #6
 8003b86:	27ff      	movs	r7, #255	; 0xff
 8003b88:	469a      	mov	sl, r3
 8003b8a:	e78a      	b.n	8003aa2 <__aeabi_fdiv+0x32>
 8003b8c:	230c      	movs	r3, #12
 8003b8e:	4699      	mov	r9, r3
 8003b90:	3b09      	subs	r3, #9
 8003b92:	27ff      	movs	r7, #255	; 0xff
 8003b94:	469a      	mov	sl, r3
 8003b96:	e784      	b.n	8003aa2 <__aeabi_fdiv+0x32>
 8003b98:	0028      	movs	r0, r5
 8003b9a:	f002 fc07 	bl	80063ac <__clzsi2>
 8003b9e:	2776      	movs	r7, #118	; 0x76
 8003ba0:	1f43      	subs	r3, r0, #5
 8003ba2:	409d      	lsls	r5, r3
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	427f      	negs	r7, r7
 8003ba8:	4699      	mov	r9, r3
 8003baa:	469a      	mov	sl, r3
 8003bac:	1a3f      	subs	r7, r7, r0
 8003bae:	e778      	b.n	8003aa2 <__aeabi_fdiv+0x32>
 8003bb0:	4640      	mov	r0, r8
 8003bb2:	f002 fbfb 	bl	80063ac <__clzsi2>
 8003bb6:	4642      	mov	r2, r8
 8003bb8:	1f43      	subs	r3, r0, #5
 8003bba:	409a      	lsls	r2, r3
 8003bbc:	2376      	movs	r3, #118	; 0x76
 8003bbe:	425b      	negs	r3, r3
 8003bc0:	4690      	mov	r8, r2
 8003bc2:	1a1b      	subs	r3, r3, r0
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	e77e      	b.n	8003ac6 <__aeabi_fdiv+0x56>
 8003bc8:	2303      	movs	r3, #3
 8003bca:	464a      	mov	r2, r9
 8003bcc:	431a      	orrs	r2, r3
 8003bce:	4691      	mov	r9, r2
 8003bd0:	33fc      	adds	r3, #252	; 0xfc
 8003bd2:	2203      	movs	r2, #3
 8003bd4:	e777      	b.n	8003ac6 <__aeabi_fdiv+0x56>
 8003bd6:	000e      	movs	r6, r1
 8003bd8:	20ff      	movs	r0, #255	; 0xff
 8003bda:	2200      	movs	r2, #0
 8003bdc:	e7a8      	b.n	8003b30 <__aeabi_fdiv+0xc0>
 8003bde:	2201      	movs	r2, #1
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	2b1b      	cmp	r3, #27
 8003be4:	dca2      	bgt.n	8003b2c <__aeabi_fdiv+0xbc>
 8003be6:	379e      	adds	r7, #158	; 0x9e
 8003be8:	002a      	movs	r2, r5
 8003bea:	40bd      	lsls	r5, r7
 8003bec:	40da      	lsrs	r2, r3
 8003bee:	1e6b      	subs	r3, r5, #1
 8003bf0:	419d      	sbcs	r5, r3
 8003bf2:	4315      	orrs	r5, r2
 8003bf4:	076a      	lsls	r2, r5, #29
 8003bf6:	d004      	beq.n	8003c02 <__aeabi_fdiv+0x192>
 8003bf8:	220f      	movs	r2, #15
 8003bfa:	402a      	ands	r2, r5
 8003bfc:	2a04      	cmp	r2, #4
 8003bfe:	d000      	beq.n	8003c02 <__aeabi_fdiv+0x192>
 8003c00:	3504      	adds	r5, #4
 8003c02:	016a      	lsls	r2, r5, #5
 8003c04:	d544      	bpl.n	8003c90 <__aeabi_fdiv+0x220>
 8003c06:	2001      	movs	r0, #1
 8003c08:	2200      	movs	r2, #0
 8003c0a:	e791      	b.n	8003b30 <__aeabi_fdiv+0xc0>
 8003c0c:	20ff      	movs	r0, #255	; 0xff
 8003c0e:	2200      	movs	r2, #0
 8003c10:	e78e      	b.n	8003b30 <__aeabi_fdiv+0xc0>
 8003c12:	2280      	movs	r2, #128	; 0x80
 8003c14:	2600      	movs	r6, #0
 8003c16:	20ff      	movs	r0, #255	; 0xff
 8003c18:	03d2      	lsls	r2, r2, #15
 8003c1a:	e789      	b.n	8003b30 <__aeabi_fdiv+0xc0>
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	4698      	mov	r8, r3
 8003c20:	2280      	movs	r2, #128	; 0x80
 8003c22:	03d2      	lsls	r2, r2, #15
 8003c24:	4215      	tst	r5, r2
 8003c26:	d008      	beq.n	8003c3a <__aeabi_fdiv+0x1ca>
 8003c28:	4643      	mov	r3, r8
 8003c2a:	4213      	tst	r3, r2
 8003c2c:	d105      	bne.n	8003c3a <__aeabi_fdiv+0x1ca>
 8003c2e:	431a      	orrs	r2, r3
 8003c30:	0252      	lsls	r2, r2, #9
 8003c32:	0026      	movs	r6, r4
 8003c34:	20ff      	movs	r0, #255	; 0xff
 8003c36:	0a52      	lsrs	r2, r2, #9
 8003c38:	e77a      	b.n	8003b30 <__aeabi_fdiv+0xc0>
 8003c3a:	2280      	movs	r2, #128	; 0x80
 8003c3c:	03d2      	lsls	r2, r2, #15
 8003c3e:	432a      	orrs	r2, r5
 8003c40:	0252      	lsls	r2, r2, #9
 8003c42:	20ff      	movs	r0, #255	; 0xff
 8003c44:	0a52      	lsrs	r2, r2, #9
 8003c46:	e773      	b.n	8003b30 <__aeabi_fdiv+0xc0>
 8003c48:	4642      	mov	r2, r8
 8003c4a:	016b      	lsls	r3, r5, #5
 8003c4c:	0155      	lsls	r5, r2, #5
 8003c4e:	42ab      	cmp	r3, r5
 8003c50:	d21a      	bcs.n	8003c88 <__aeabi_fdiv+0x218>
 8003c52:	201b      	movs	r0, #27
 8003c54:	2200      	movs	r2, #0
 8003c56:	3f01      	subs	r7, #1
 8003c58:	2601      	movs	r6, #1
 8003c5a:	001c      	movs	r4, r3
 8003c5c:	0052      	lsls	r2, r2, #1
 8003c5e:	005b      	lsls	r3, r3, #1
 8003c60:	2c00      	cmp	r4, #0
 8003c62:	db01      	blt.n	8003c68 <__aeabi_fdiv+0x1f8>
 8003c64:	429d      	cmp	r5, r3
 8003c66:	d801      	bhi.n	8003c6c <__aeabi_fdiv+0x1fc>
 8003c68:	1b5b      	subs	r3, r3, r5
 8003c6a:	4332      	orrs	r2, r6
 8003c6c:	3801      	subs	r0, #1
 8003c6e:	2800      	cmp	r0, #0
 8003c70:	d1f3      	bne.n	8003c5a <__aeabi_fdiv+0x1ea>
 8003c72:	1e58      	subs	r0, r3, #1
 8003c74:	4183      	sbcs	r3, r0
 8003c76:	4313      	orrs	r3, r2
 8003c78:	001d      	movs	r5, r3
 8003c7a:	003b      	movs	r3, r7
 8003c7c:	337f      	adds	r3, #127	; 0x7f
 8003c7e:	000e      	movs	r6, r1
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	dd00      	ble.n	8003c86 <__aeabi_fdiv+0x216>
 8003c84:	e73d      	b.n	8003b02 <__aeabi_fdiv+0x92>
 8003c86:	e7aa      	b.n	8003bde <__aeabi_fdiv+0x16e>
 8003c88:	201a      	movs	r0, #26
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	1b5b      	subs	r3, r3, r5
 8003c8e:	e7e3      	b.n	8003c58 <__aeabi_fdiv+0x1e8>
 8003c90:	01aa      	lsls	r2, r5, #6
 8003c92:	2000      	movs	r0, #0
 8003c94:	0a52      	lsrs	r2, r2, #9
 8003c96:	e74b      	b.n	8003b30 <__aeabi_fdiv+0xc0>
 8003c98:	08015988 	.word	0x08015988
 8003c9c:	f7ffffff 	.word	0xf7ffffff
 8003ca0:	080159c8 	.word	0x080159c8

08003ca4 <__eqsf2>:
 8003ca4:	b570      	push	{r4, r5, r6, lr}
 8003ca6:	0042      	lsls	r2, r0, #1
 8003ca8:	0245      	lsls	r5, r0, #9
 8003caa:	024e      	lsls	r6, r1, #9
 8003cac:	004c      	lsls	r4, r1, #1
 8003cae:	0fc3      	lsrs	r3, r0, #31
 8003cb0:	0a6d      	lsrs	r5, r5, #9
 8003cb2:	2001      	movs	r0, #1
 8003cb4:	0e12      	lsrs	r2, r2, #24
 8003cb6:	0a76      	lsrs	r6, r6, #9
 8003cb8:	0e24      	lsrs	r4, r4, #24
 8003cba:	0fc9      	lsrs	r1, r1, #31
 8003cbc:	2aff      	cmp	r2, #255	; 0xff
 8003cbe:	d006      	beq.n	8003cce <__eqsf2+0x2a>
 8003cc0:	2cff      	cmp	r4, #255	; 0xff
 8003cc2:	d003      	beq.n	8003ccc <__eqsf2+0x28>
 8003cc4:	42a2      	cmp	r2, r4
 8003cc6:	d101      	bne.n	8003ccc <__eqsf2+0x28>
 8003cc8:	42b5      	cmp	r5, r6
 8003cca:	d006      	beq.n	8003cda <__eqsf2+0x36>
 8003ccc:	bd70      	pop	{r4, r5, r6, pc}
 8003cce:	2d00      	cmp	r5, #0
 8003cd0:	d1fc      	bne.n	8003ccc <__eqsf2+0x28>
 8003cd2:	2cff      	cmp	r4, #255	; 0xff
 8003cd4:	d1fa      	bne.n	8003ccc <__eqsf2+0x28>
 8003cd6:	2e00      	cmp	r6, #0
 8003cd8:	d1f8      	bne.n	8003ccc <__eqsf2+0x28>
 8003cda:	428b      	cmp	r3, r1
 8003cdc:	d006      	beq.n	8003cec <__eqsf2+0x48>
 8003cde:	2001      	movs	r0, #1
 8003ce0:	2a00      	cmp	r2, #0
 8003ce2:	d1f3      	bne.n	8003ccc <__eqsf2+0x28>
 8003ce4:	0028      	movs	r0, r5
 8003ce6:	1e43      	subs	r3, r0, #1
 8003ce8:	4198      	sbcs	r0, r3
 8003cea:	e7ef      	b.n	8003ccc <__eqsf2+0x28>
 8003cec:	2000      	movs	r0, #0
 8003cee:	e7ed      	b.n	8003ccc <__eqsf2+0x28>

08003cf0 <__gesf2>:
 8003cf0:	b570      	push	{r4, r5, r6, lr}
 8003cf2:	0042      	lsls	r2, r0, #1
 8003cf4:	0245      	lsls	r5, r0, #9
 8003cf6:	024e      	lsls	r6, r1, #9
 8003cf8:	004c      	lsls	r4, r1, #1
 8003cfa:	0fc3      	lsrs	r3, r0, #31
 8003cfc:	0a6d      	lsrs	r5, r5, #9
 8003cfe:	0e12      	lsrs	r2, r2, #24
 8003d00:	0a76      	lsrs	r6, r6, #9
 8003d02:	0e24      	lsrs	r4, r4, #24
 8003d04:	0fc8      	lsrs	r0, r1, #31
 8003d06:	2aff      	cmp	r2, #255	; 0xff
 8003d08:	d01b      	beq.n	8003d42 <__gesf2+0x52>
 8003d0a:	2cff      	cmp	r4, #255	; 0xff
 8003d0c:	d00e      	beq.n	8003d2c <__gesf2+0x3c>
 8003d0e:	2a00      	cmp	r2, #0
 8003d10:	d11b      	bne.n	8003d4a <__gesf2+0x5a>
 8003d12:	2c00      	cmp	r4, #0
 8003d14:	d101      	bne.n	8003d1a <__gesf2+0x2a>
 8003d16:	2e00      	cmp	r6, #0
 8003d18:	d01c      	beq.n	8003d54 <__gesf2+0x64>
 8003d1a:	2d00      	cmp	r5, #0
 8003d1c:	d00c      	beq.n	8003d38 <__gesf2+0x48>
 8003d1e:	4283      	cmp	r3, r0
 8003d20:	d01c      	beq.n	8003d5c <__gesf2+0x6c>
 8003d22:	2102      	movs	r1, #2
 8003d24:	1e58      	subs	r0, r3, #1
 8003d26:	4008      	ands	r0, r1
 8003d28:	3801      	subs	r0, #1
 8003d2a:	bd70      	pop	{r4, r5, r6, pc}
 8003d2c:	2e00      	cmp	r6, #0
 8003d2e:	d122      	bne.n	8003d76 <__gesf2+0x86>
 8003d30:	2a00      	cmp	r2, #0
 8003d32:	d1f4      	bne.n	8003d1e <__gesf2+0x2e>
 8003d34:	2d00      	cmp	r5, #0
 8003d36:	d1f2      	bne.n	8003d1e <__gesf2+0x2e>
 8003d38:	2800      	cmp	r0, #0
 8003d3a:	d1f6      	bne.n	8003d2a <__gesf2+0x3a>
 8003d3c:	2001      	movs	r0, #1
 8003d3e:	4240      	negs	r0, r0
 8003d40:	e7f3      	b.n	8003d2a <__gesf2+0x3a>
 8003d42:	2d00      	cmp	r5, #0
 8003d44:	d117      	bne.n	8003d76 <__gesf2+0x86>
 8003d46:	2cff      	cmp	r4, #255	; 0xff
 8003d48:	d0f0      	beq.n	8003d2c <__gesf2+0x3c>
 8003d4a:	2c00      	cmp	r4, #0
 8003d4c:	d1e7      	bne.n	8003d1e <__gesf2+0x2e>
 8003d4e:	2e00      	cmp	r6, #0
 8003d50:	d1e5      	bne.n	8003d1e <__gesf2+0x2e>
 8003d52:	e7e6      	b.n	8003d22 <__gesf2+0x32>
 8003d54:	2000      	movs	r0, #0
 8003d56:	2d00      	cmp	r5, #0
 8003d58:	d0e7      	beq.n	8003d2a <__gesf2+0x3a>
 8003d5a:	e7e2      	b.n	8003d22 <__gesf2+0x32>
 8003d5c:	42a2      	cmp	r2, r4
 8003d5e:	dc05      	bgt.n	8003d6c <__gesf2+0x7c>
 8003d60:	dbea      	blt.n	8003d38 <__gesf2+0x48>
 8003d62:	42b5      	cmp	r5, r6
 8003d64:	d802      	bhi.n	8003d6c <__gesf2+0x7c>
 8003d66:	d3e7      	bcc.n	8003d38 <__gesf2+0x48>
 8003d68:	2000      	movs	r0, #0
 8003d6a:	e7de      	b.n	8003d2a <__gesf2+0x3a>
 8003d6c:	4243      	negs	r3, r0
 8003d6e:	4158      	adcs	r0, r3
 8003d70:	0040      	lsls	r0, r0, #1
 8003d72:	3801      	subs	r0, #1
 8003d74:	e7d9      	b.n	8003d2a <__gesf2+0x3a>
 8003d76:	2002      	movs	r0, #2
 8003d78:	4240      	negs	r0, r0
 8003d7a:	e7d6      	b.n	8003d2a <__gesf2+0x3a>

08003d7c <__lesf2>:
 8003d7c:	b570      	push	{r4, r5, r6, lr}
 8003d7e:	0042      	lsls	r2, r0, #1
 8003d80:	0245      	lsls	r5, r0, #9
 8003d82:	024e      	lsls	r6, r1, #9
 8003d84:	004c      	lsls	r4, r1, #1
 8003d86:	0fc3      	lsrs	r3, r0, #31
 8003d88:	0a6d      	lsrs	r5, r5, #9
 8003d8a:	0e12      	lsrs	r2, r2, #24
 8003d8c:	0a76      	lsrs	r6, r6, #9
 8003d8e:	0e24      	lsrs	r4, r4, #24
 8003d90:	0fc8      	lsrs	r0, r1, #31
 8003d92:	2aff      	cmp	r2, #255	; 0xff
 8003d94:	d00b      	beq.n	8003dae <__lesf2+0x32>
 8003d96:	2cff      	cmp	r4, #255	; 0xff
 8003d98:	d00d      	beq.n	8003db6 <__lesf2+0x3a>
 8003d9a:	2a00      	cmp	r2, #0
 8003d9c:	d11f      	bne.n	8003dde <__lesf2+0x62>
 8003d9e:	2c00      	cmp	r4, #0
 8003da0:	d116      	bne.n	8003dd0 <__lesf2+0x54>
 8003da2:	2e00      	cmp	r6, #0
 8003da4:	d114      	bne.n	8003dd0 <__lesf2+0x54>
 8003da6:	2000      	movs	r0, #0
 8003da8:	2d00      	cmp	r5, #0
 8003daa:	d010      	beq.n	8003dce <__lesf2+0x52>
 8003dac:	e009      	b.n	8003dc2 <__lesf2+0x46>
 8003dae:	2d00      	cmp	r5, #0
 8003db0:	d10c      	bne.n	8003dcc <__lesf2+0x50>
 8003db2:	2cff      	cmp	r4, #255	; 0xff
 8003db4:	d113      	bne.n	8003dde <__lesf2+0x62>
 8003db6:	2e00      	cmp	r6, #0
 8003db8:	d108      	bne.n	8003dcc <__lesf2+0x50>
 8003dba:	2a00      	cmp	r2, #0
 8003dbc:	d008      	beq.n	8003dd0 <__lesf2+0x54>
 8003dbe:	4283      	cmp	r3, r0
 8003dc0:	d012      	beq.n	8003de8 <__lesf2+0x6c>
 8003dc2:	2102      	movs	r1, #2
 8003dc4:	1e58      	subs	r0, r3, #1
 8003dc6:	4008      	ands	r0, r1
 8003dc8:	3801      	subs	r0, #1
 8003dca:	e000      	b.n	8003dce <__lesf2+0x52>
 8003dcc:	2002      	movs	r0, #2
 8003dce:	bd70      	pop	{r4, r5, r6, pc}
 8003dd0:	2d00      	cmp	r5, #0
 8003dd2:	d1f4      	bne.n	8003dbe <__lesf2+0x42>
 8003dd4:	2800      	cmp	r0, #0
 8003dd6:	d1fa      	bne.n	8003dce <__lesf2+0x52>
 8003dd8:	2001      	movs	r0, #1
 8003dda:	4240      	negs	r0, r0
 8003ddc:	e7f7      	b.n	8003dce <__lesf2+0x52>
 8003dde:	2c00      	cmp	r4, #0
 8003de0:	d1ed      	bne.n	8003dbe <__lesf2+0x42>
 8003de2:	2e00      	cmp	r6, #0
 8003de4:	d1eb      	bne.n	8003dbe <__lesf2+0x42>
 8003de6:	e7ec      	b.n	8003dc2 <__lesf2+0x46>
 8003de8:	42a2      	cmp	r2, r4
 8003dea:	dc05      	bgt.n	8003df8 <__lesf2+0x7c>
 8003dec:	dbf2      	blt.n	8003dd4 <__lesf2+0x58>
 8003dee:	42b5      	cmp	r5, r6
 8003df0:	d802      	bhi.n	8003df8 <__lesf2+0x7c>
 8003df2:	d3ef      	bcc.n	8003dd4 <__lesf2+0x58>
 8003df4:	2000      	movs	r0, #0
 8003df6:	e7ea      	b.n	8003dce <__lesf2+0x52>
 8003df8:	4243      	negs	r3, r0
 8003dfa:	4158      	adcs	r0, r3
 8003dfc:	0040      	lsls	r0, r0, #1
 8003dfe:	3801      	subs	r0, #1
 8003e00:	e7e5      	b.n	8003dce <__lesf2+0x52>
 8003e02:	46c0      	nop			; (mov r8, r8)

08003e04 <__aeabi_fmul>:
 8003e04:	0243      	lsls	r3, r0, #9
 8003e06:	0a5b      	lsrs	r3, r3, #9
 8003e08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e0a:	464f      	mov	r7, r9
 8003e0c:	4646      	mov	r6, r8
 8003e0e:	4699      	mov	r9, r3
 8003e10:	46d6      	mov	lr, sl
 8003e12:	0fc3      	lsrs	r3, r0, #31
 8003e14:	0045      	lsls	r5, r0, #1
 8003e16:	4698      	mov	r8, r3
 8003e18:	b5c0      	push	{r6, r7, lr}
 8003e1a:	464b      	mov	r3, r9
 8003e1c:	1c0f      	adds	r7, r1, #0
 8003e1e:	0e2d      	lsrs	r5, r5, #24
 8003e20:	d100      	bne.n	8003e24 <__aeabi_fmul+0x20>
 8003e22:	e0cb      	b.n	8003fbc <__aeabi_fmul+0x1b8>
 8003e24:	2dff      	cmp	r5, #255	; 0xff
 8003e26:	d100      	bne.n	8003e2a <__aeabi_fmul+0x26>
 8003e28:	e0cf      	b.n	8003fca <__aeabi_fmul+0x1c6>
 8003e2a:	2280      	movs	r2, #128	; 0x80
 8003e2c:	00db      	lsls	r3, r3, #3
 8003e2e:	04d2      	lsls	r2, r2, #19
 8003e30:	431a      	orrs	r2, r3
 8003e32:	2300      	movs	r3, #0
 8003e34:	4691      	mov	r9, r2
 8003e36:	2600      	movs	r6, #0
 8003e38:	469a      	mov	sl, r3
 8003e3a:	3d7f      	subs	r5, #127	; 0x7f
 8003e3c:	027c      	lsls	r4, r7, #9
 8003e3e:	007b      	lsls	r3, r7, #1
 8003e40:	0a64      	lsrs	r4, r4, #9
 8003e42:	0e1b      	lsrs	r3, r3, #24
 8003e44:	0fff      	lsrs	r7, r7, #31
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d100      	bne.n	8003e4c <__aeabi_fmul+0x48>
 8003e4a:	e0a9      	b.n	8003fa0 <__aeabi_fmul+0x19c>
 8003e4c:	2bff      	cmp	r3, #255	; 0xff
 8003e4e:	d011      	beq.n	8003e74 <__aeabi_fmul+0x70>
 8003e50:	2280      	movs	r2, #128	; 0x80
 8003e52:	00e4      	lsls	r4, r4, #3
 8003e54:	04d2      	lsls	r2, r2, #19
 8003e56:	4314      	orrs	r4, r2
 8003e58:	4642      	mov	r2, r8
 8003e5a:	3b7f      	subs	r3, #127	; 0x7f
 8003e5c:	195b      	adds	r3, r3, r5
 8003e5e:	407a      	eors	r2, r7
 8003e60:	2000      	movs	r0, #0
 8003e62:	b2d2      	uxtb	r2, r2
 8003e64:	1c5d      	adds	r5, r3, #1
 8003e66:	2e0a      	cmp	r6, #10
 8003e68:	dd13      	ble.n	8003e92 <__aeabi_fmul+0x8e>
 8003e6a:	003a      	movs	r2, r7
 8003e6c:	2e0b      	cmp	r6, #11
 8003e6e:	d047      	beq.n	8003f00 <__aeabi_fmul+0xfc>
 8003e70:	4647      	mov	r7, r8
 8003e72:	e03f      	b.n	8003ef4 <__aeabi_fmul+0xf0>
 8003e74:	002b      	movs	r3, r5
 8003e76:	33ff      	adds	r3, #255	; 0xff
 8003e78:	2c00      	cmp	r4, #0
 8003e7a:	d11e      	bne.n	8003eba <__aeabi_fmul+0xb6>
 8003e7c:	2202      	movs	r2, #2
 8003e7e:	4316      	orrs	r6, r2
 8003e80:	4642      	mov	r2, r8
 8003e82:	3501      	adds	r5, #1
 8003e84:	407a      	eors	r2, r7
 8003e86:	b2d2      	uxtb	r2, r2
 8003e88:	35ff      	adds	r5, #255	; 0xff
 8003e8a:	2e0a      	cmp	r6, #10
 8003e8c:	dd00      	ble.n	8003e90 <__aeabi_fmul+0x8c>
 8003e8e:	e0e4      	b.n	800405a <__aeabi_fmul+0x256>
 8003e90:	2002      	movs	r0, #2
 8003e92:	2e02      	cmp	r6, #2
 8003e94:	dc1c      	bgt.n	8003ed0 <__aeabi_fmul+0xcc>
 8003e96:	3e01      	subs	r6, #1
 8003e98:	2e01      	cmp	r6, #1
 8003e9a:	d842      	bhi.n	8003f22 <__aeabi_fmul+0x11e>
 8003e9c:	2802      	cmp	r0, #2
 8003e9e:	d03d      	beq.n	8003f1c <__aeabi_fmul+0x118>
 8003ea0:	2801      	cmp	r0, #1
 8003ea2:	d166      	bne.n	8003f72 <__aeabi_fmul+0x16e>
 8003ea4:	2000      	movs	r0, #0
 8003ea6:	2100      	movs	r1, #0
 8003ea8:	05c0      	lsls	r0, r0, #23
 8003eaa:	4308      	orrs	r0, r1
 8003eac:	07d2      	lsls	r2, r2, #31
 8003eae:	4310      	orrs	r0, r2
 8003eb0:	bce0      	pop	{r5, r6, r7}
 8003eb2:	46ba      	mov	sl, r7
 8003eb4:	46b1      	mov	r9, r6
 8003eb6:	46a8      	mov	r8, r5
 8003eb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003eba:	2203      	movs	r2, #3
 8003ebc:	4316      	orrs	r6, r2
 8003ebe:	4642      	mov	r2, r8
 8003ec0:	3501      	adds	r5, #1
 8003ec2:	407a      	eors	r2, r7
 8003ec4:	b2d2      	uxtb	r2, r2
 8003ec6:	35ff      	adds	r5, #255	; 0xff
 8003ec8:	2e0a      	cmp	r6, #10
 8003eca:	dd00      	ble.n	8003ece <__aeabi_fmul+0xca>
 8003ecc:	e0e4      	b.n	8004098 <__aeabi_fmul+0x294>
 8003ece:	2003      	movs	r0, #3
 8003ed0:	2101      	movs	r1, #1
 8003ed2:	40b1      	lsls	r1, r6
 8003ed4:	26a6      	movs	r6, #166	; 0xa6
 8003ed6:	00f6      	lsls	r6, r6, #3
 8003ed8:	4231      	tst	r1, r6
 8003eda:	d10a      	bne.n	8003ef2 <__aeabi_fmul+0xee>
 8003edc:	2690      	movs	r6, #144	; 0x90
 8003ede:	00b6      	lsls	r6, r6, #2
 8003ee0:	4231      	tst	r1, r6
 8003ee2:	d116      	bne.n	8003f12 <__aeabi_fmul+0x10e>
 8003ee4:	3eb9      	subs	r6, #185	; 0xb9
 8003ee6:	3eff      	subs	r6, #255	; 0xff
 8003ee8:	420e      	tst	r6, r1
 8003eea:	d01a      	beq.n	8003f22 <__aeabi_fmul+0x11e>
 8003eec:	46a1      	mov	r9, r4
 8003eee:	4682      	mov	sl, r0
 8003ef0:	e000      	b.n	8003ef4 <__aeabi_fmul+0xf0>
 8003ef2:	0017      	movs	r7, r2
 8003ef4:	4653      	mov	r3, sl
 8003ef6:	003a      	movs	r2, r7
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d00f      	beq.n	8003f1c <__aeabi_fmul+0x118>
 8003efc:	464c      	mov	r4, r9
 8003efe:	4650      	mov	r0, sl
 8003f00:	2803      	cmp	r0, #3
 8003f02:	d1cd      	bne.n	8003ea0 <__aeabi_fmul+0x9c>
 8003f04:	2180      	movs	r1, #128	; 0x80
 8003f06:	03c9      	lsls	r1, r1, #15
 8003f08:	4321      	orrs	r1, r4
 8003f0a:	0249      	lsls	r1, r1, #9
 8003f0c:	20ff      	movs	r0, #255	; 0xff
 8003f0e:	0a49      	lsrs	r1, r1, #9
 8003f10:	e7ca      	b.n	8003ea8 <__aeabi_fmul+0xa4>
 8003f12:	2180      	movs	r1, #128	; 0x80
 8003f14:	2200      	movs	r2, #0
 8003f16:	20ff      	movs	r0, #255	; 0xff
 8003f18:	03c9      	lsls	r1, r1, #15
 8003f1a:	e7c5      	b.n	8003ea8 <__aeabi_fmul+0xa4>
 8003f1c:	20ff      	movs	r0, #255	; 0xff
 8003f1e:	2100      	movs	r1, #0
 8003f20:	e7c2      	b.n	8003ea8 <__aeabi_fmul+0xa4>
 8003f22:	0c20      	lsrs	r0, r4, #16
 8003f24:	4649      	mov	r1, r9
 8003f26:	0424      	lsls	r4, r4, #16
 8003f28:	0c24      	lsrs	r4, r4, #16
 8003f2a:	0027      	movs	r7, r4
 8003f2c:	0c0e      	lsrs	r6, r1, #16
 8003f2e:	0409      	lsls	r1, r1, #16
 8003f30:	0c09      	lsrs	r1, r1, #16
 8003f32:	4374      	muls	r4, r6
 8003f34:	434f      	muls	r7, r1
 8003f36:	4346      	muls	r6, r0
 8003f38:	4348      	muls	r0, r1
 8003f3a:	0c39      	lsrs	r1, r7, #16
 8003f3c:	1900      	adds	r0, r0, r4
 8003f3e:	1809      	adds	r1, r1, r0
 8003f40:	428c      	cmp	r4, r1
 8003f42:	d903      	bls.n	8003f4c <__aeabi_fmul+0x148>
 8003f44:	2080      	movs	r0, #128	; 0x80
 8003f46:	0240      	lsls	r0, r0, #9
 8003f48:	4684      	mov	ip, r0
 8003f4a:	4466      	add	r6, ip
 8003f4c:	043f      	lsls	r7, r7, #16
 8003f4e:	0408      	lsls	r0, r1, #16
 8003f50:	0c3f      	lsrs	r7, r7, #16
 8003f52:	19c0      	adds	r0, r0, r7
 8003f54:	0184      	lsls	r4, r0, #6
 8003f56:	1e67      	subs	r7, r4, #1
 8003f58:	41bc      	sbcs	r4, r7
 8003f5a:	0c09      	lsrs	r1, r1, #16
 8003f5c:	0e80      	lsrs	r0, r0, #26
 8003f5e:	1989      	adds	r1, r1, r6
 8003f60:	4304      	orrs	r4, r0
 8003f62:	0189      	lsls	r1, r1, #6
 8003f64:	430c      	orrs	r4, r1
 8003f66:	0109      	lsls	r1, r1, #4
 8003f68:	d571      	bpl.n	800404e <__aeabi_fmul+0x24a>
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	0861      	lsrs	r1, r4, #1
 8003f6e:	401c      	ands	r4, r3
 8003f70:	430c      	orrs	r4, r1
 8003f72:	002b      	movs	r3, r5
 8003f74:	337f      	adds	r3, #127	; 0x7f
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	dd51      	ble.n	800401e <__aeabi_fmul+0x21a>
 8003f7a:	0761      	lsls	r1, r4, #29
 8003f7c:	d004      	beq.n	8003f88 <__aeabi_fmul+0x184>
 8003f7e:	210f      	movs	r1, #15
 8003f80:	4021      	ands	r1, r4
 8003f82:	2904      	cmp	r1, #4
 8003f84:	d000      	beq.n	8003f88 <__aeabi_fmul+0x184>
 8003f86:	3404      	adds	r4, #4
 8003f88:	0121      	lsls	r1, r4, #4
 8003f8a:	d503      	bpl.n	8003f94 <__aeabi_fmul+0x190>
 8003f8c:	4b43      	ldr	r3, [pc, #268]	; (800409c <__aeabi_fmul+0x298>)
 8003f8e:	401c      	ands	r4, r3
 8003f90:	002b      	movs	r3, r5
 8003f92:	3380      	adds	r3, #128	; 0x80
 8003f94:	2bfe      	cmp	r3, #254	; 0xfe
 8003f96:	dcc1      	bgt.n	8003f1c <__aeabi_fmul+0x118>
 8003f98:	01a1      	lsls	r1, r4, #6
 8003f9a:	0a49      	lsrs	r1, r1, #9
 8003f9c:	b2d8      	uxtb	r0, r3
 8003f9e:	e783      	b.n	8003ea8 <__aeabi_fmul+0xa4>
 8003fa0:	2c00      	cmp	r4, #0
 8003fa2:	d12c      	bne.n	8003ffe <__aeabi_fmul+0x1fa>
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	4642      	mov	r2, r8
 8003fa8:	431e      	orrs	r6, r3
 8003faa:	002b      	movs	r3, r5
 8003fac:	407a      	eors	r2, r7
 8003fae:	2001      	movs	r0, #1
 8003fb0:	b2d2      	uxtb	r2, r2
 8003fb2:	1c5d      	adds	r5, r3, #1
 8003fb4:	2e0a      	cmp	r6, #10
 8003fb6:	dd00      	ble.n	8003fba <__aeabi_fmul+0x1b6>
 8003fb8:	e757      	b.n	8003e6a <__aeabi_fmul+0x66>
 8003fba:	e76a      	b.n	8003e92 <__aeabi_fmul+0x8e>
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d110      	bne.n	8003fe2 <__aeabi_fmul+0x1de>
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	2604      	movs	r6, #4
 8003fc4:	2500      	movs	r5, #0
 8003fc6:	469a      	mov	sl, r3
 8003fc8:	e738      	b.n	8003e3c <__aeabi_fmul+0x38>
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d104      	bne.n	8003fd8 <__aeabi_fmul+0x1d4>
 8003fce:	2302      	movs	r3, #2
 8003fd0:	2608      	movs	r6, #8
 8003fd2:	25ff      	movs	r5, #255	; 0xff
 8003fd4:	469a      	mov	sl, r3
 8003fd6:	e731      	b.n	8003e3c <__aeabi_fmul+0x38>
 8003fd8:	2303      	movs	r3, #3
 8003fda:	260c      	movs	r6, #12
 8003fdc:	25ff      	movs	r5, #255	; 0xff
 8003fde:	469a      	mov	sl, r3
 8003fe0:	e72c      	b.n	8003e3c <__aeabi_fmul+0x38>
 8003fe2:	4648      	mov	r0, r9
 8003fe4:	f002 f9e2 	bl	80063ac <__clzsi2>
 8003fe8:	464a      	mov	r2, r9
 8003fea:	1f43      	subs	r3, r0, #5
 8003fec:	2576      	movs	r5, #118	; 0x76
 8003fee:	409a      	lsls	r2, r3
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	426d      	negs	r5, r5
 8003ff4:	4691      	mov	r9, r2
 8003ff6:	2600      	movs	r6, #0
 8003ff8:	469a      	mov	sl, r3
 8003ffa:	1a2d      	subs	r5, r5, r0
 8003ffc:	e71e      	b.n	8003e3c <__aeabi_fmul+0x38>
 8003ffe:	0020      	movs	r0, r4
 8004000:	f002 f9d4 	bl	80063ac <__clzsi2>
 8004004:	4642      	mov	r2, r8
 8004006:	1f43      	subs	r3, r0, #5
 8004008:	409c      	lsls	r4, r3
 800400a:	1a2b      	subs	r3, r5, r0
 800400c:	3b76      	subs	r3, #118	; 0x76
 800400e:	407a      	eors	r2, r7
 8004010:	2000      	movs	r0, #0
 8004012:	b2d2      	uxtb	r2, r2
 8004014:	1c5d      	adds	r5, r3, #1
 8004016:	2e0a      	cmp	r6, #10
 8004018:	dd00      	ble.n	800401c <__aeabi_fmul+0x218>
 800401a:	e726      	b.n	8003e6a <__aeabi_fmul+0x66>
 800401c:	e739      	b.n	8003e92 <__aeabi_fmul+0x8e>
 800401e:	2101      	movs	r1, #1
 8004020:	1acb      	subs	r3, r1, r3
 8004022:	2b1b      	cmp	r3, #27
 8004024:	dd00      	ble.n	8004028 <__aeabi_fmul+0x224>
 8004026:	e73d      	b.n	8003ea4 <__aeabi_fmul+0xa0>
 8004028:	359e      	adds	r5, #158	; 0x9e
 800402a:	0021      	movs	r1, r4
 800402c:	40ac      	lsls	r4, r5
 800402e:	40d9      	lsrs	r1, r3
 8004030:	1e63      	subs	r3, r4, #1
 8004032:	419c      	sbcs	r4, r3
 8004034:	4321      	orrs	r1, r4
 8004036:	074b      	lsls	r3, r1, #29
 8004038:	d004      	beq.n	8004044 <__aeabi_fmul+0x240>
 800403a:	230f      	movs	r3, #15
 800403c:	400b      	ands	r3, r1
 800403e:	2b04      	cmp	r3, #4
 8004040:	d000      	beq.n	8004044 <__aeabi_fmul+0x240>
 8004042:	3104      	adds	r1, #4
 8004044:	014b      	lsls	r3, r1, #5
 8004046:	d504      	bpl.n	8004052 <__aeabi_fmul+0x24e>
 8004048:	2001      	movs	r0, #1
 800404a:	2100      	movs	r1, #0
 800404c:	e72c      	b.n	8003ea8 <__aeabi_fmul+0xa4>
 800404e:	001d      	movs	r5, r3
 8004050:	e78f      	b.n	8003f72 <__aeabi_fmul+0x16e>
 8004052:	0189      	lsls	r1, r1, #6
 8004054:	2000      	movs	r0, #0
 8004056:	0a49      	lsrs	r1, r1, #9
 8004058:	e726      	b.n	8003ea8 <__aeabi_fmul+0xa4>
 800405a:	2302      	movs	r3, #2
 800405c:	2e0f      	cmp	r6, #15
 800405e:	d10c      	bne.n	800407a <__aeabi_fmul+0x276>
 8004060:	2180      	movs	r1, #128	; 0x80
 8004062:	464b      	mov	r3, r9
 8004064:	03c9      	lsls	r1, r1, #15
 8004066:	420b      	tst	r3, r1
 8004068:	d00d      	beq.n	8004086 <__aeabi_fmul+0x282>
 800406a:	420c      	tst	r4, r1
 800406c:	d10b      	bne.n	8004086 <__aeabi_fmul+0x282>
 800406e:	4321      	orrs	r1, r4
 8004070:	0249      	lsls	r1, r1, #9
 8004072:	003a      	movs	r2, r7
 8004074:	20ff      	movs	r0, #255	; 0xff
 8004076:	0a49      	lsrs	r1, r1, #9
 8004078:	e716      	b.n	8003ea8 <__aeabi_fmul+0xa4>
 800407a:	2e0b      	cmp	r6, #11
 800407c:	d000      	beq.n	8004080 <__aeabi_fmul+0x27c>
 800407e:	e6f7      	b.n	8003e70 <__aeabi_fmul+0x6c>
 8004080:	46a1      	mov	r9, r4
 8004082:	469a      	mov	sl, r3
 8004084:	e736      	b.n	8003ef4 <__aeabi_fmul+0xf0>
 8004086:	2180      	movs	r1, #128	; 0x80
 8004088:	464b      	mov	r3, r9
 800408a:	03c9      	lsls	r1, r1, #15
 800408c:	4319      	orrs	r1, r3
 800408e:	0249      	lsls	r1, r1, #9
 8004090:	4642      	mov	r2, r8
 8004092:	20ff      	movs	r0, #255	; 0xff
 8004094:	0a49      	lsrs	r1, r1, #9
 8004096:	e707      	b.n	8003ea8 <__aeabi_fmul+0xa4>
 8004098:	2303      	movs	r3, #3
 800409a:	e7df      	b.n	800405c <__aeabi_fmul+0x258>
 800409c:	f7ffffff 	.word	0xf7ffffff

080040a0 <__aeabi_fsub>:
 80040a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040a2:	46c6      	mov	lr, r8
 80040a4:	0243      	lsls	r3, r0, #9
 80040a6:	0a5b      	lsrs	r3, r3, #9
 80040a8:	0045      	lsls	r5, r0, #1
 80040aa:	00da      	lsls	r2, r3, #3
 80040ac:	0fc4      	lsrs	r4, r0, #31
 80040ae:	0248      	lsls	r0, r1, #9
 80040b0:	004f      	lsls	r7, r1, #1
 80040b2:	4694      	mov	ip, r2
 80040b4:	0a42      	lsrs	r2, r0, #9
 80040b6:	001e      	movs	r6, r3
 80040b8:	4690      	mov	r8, r2
 80040ba:	b500      	push	{lr}
 80040bc:	0e2d      	lsrs	r5, r5, #24
 80040be:	0e3f      	lsrs	r7, r7, #24
 80040c0:	0fc9      	lsrs	r1, r1, #31
 80040c2:	0980      	lsrs	r0, r0, #6
 80040c4:	2fff      	cmp	r7, #255	; 0xff
 80040c6:	d059      	beq.n	800417c <__aeabi_fsub+0xdc>
 80040c8:	2201      	movs	r2, #1
 80040ca:	4051      	eors	r1, r2
 80040cc:	428c      	cmp	r4, r1
 80040ce:	d039      	beq.n	8004144 <__aeabi_fsub+0xa4>
 80040d0:	1bea      	subs	r2, r5, r7
 80040d2:	2a00      	cmp	r2, #0
 80040d4:	dd58      	ble.n	8004188 <__aeabi_fsub+0xe8>
 80040d6:	2f00      	cmp	r7, #0
 80040d8:	d068      	beq.n	80041ac <__aeabi_fsub+0x10c>
 80040da:	2dff      	cmp	r5, #255	; 0xff
 80040dc:	d100      	bne.n	80040e0 <__aeabi_fsub+0x40>
 80040de:	e0d1      	b.n	8004284 <__aeabi_fsub+0x1e4>
 80040e0:	2380      	movs	r3, #128	; 0x80
 80040e2:	04db      	lsls	r3, r3, #19
 80040e4:	4318      	orrs	r0, r3
 80040e6:	2a1b      	cmp	r2, #27
 80040e8:	dc00      	bgt.n	80040ec <__aeabi_fsub+0x4c>
 80040ea:	e0e3      	b.n	80042b4 <__aeabi_fsub+0x214>
 80040ec:	2301      	movs	r3, #1
 80040ee:	4662      	mov	r2, ip
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	015a      	lsls	r2, r3, #5
 80040f4:	d400      	bmi.n	80040f8 <__aeabi_fsub+0x58>
 80040f6:	e0ac      	b.n	8004252 <__aeabi_fsub+0x1b2>
 80040f8:	019b      	lsls	r3, r3, #6
 80040fa:	099e      	lsrs	r6, r3, #6
 80040fc:	0030      	movs	r0, r6
 80040fe:	f002 f955 	bl	80063ac <__clzsi2>
 8004102:	0033      	movs	r3, r6
 8004104:	3805      	subs	r0, #5
 8004106:	4083      	lsls	r3, r0
 8004108:	4285      	cmp	r5, r0
 800410a:	dc00      	bgt.n	800410e <__aeabi_fsub+0x6e>
 800410c:	e0c6      	b.n	800429c <__aeabi_fsub+0x1fc>
 800410e:	4ab2      	ldr	r2, [pc, #712]	; (80043d8 <__aeabi_fsub+0x338>)
 8004110:	1a2d      	subs	r5, r5, r0
 8004112:	4013      	ands	r3, r2
 8004114:	075a      	lsls	r2, r3, #29
 8004116:	d004      	beq.n	8004122 <__aeabi_fsub+0x82>
 8004118:	220f      	movs	r2, #15
 800411a:	401a      	ands	r2, r3
 800411c:	2a04      	cmp	r2, #4
 800411e:	d000      	beq.n	8004122 <__aeabi_fsub+0x82>
 8004120:	3304      	adds	r3, #4
 8004122:	015a      	lsls	r2, r3, #5
 8004124:	d400      	bmi.n	8004128 <__aeabi_fsub+0x88>
 8004126:	e097      	b.n	8004258 <__aeabi_fsub+0x1b8>
 8004128:	1c6a      	adds	r2, r5, #1
 800412a:	2dfe      	cmp	r5, #254	; 0xfe
 800412c:	d100      	bne.n	8004130 <__aeabi_fsub+0x90>
 800412e:	e084      	b.n	800423a <__aeabi_fsub+0x19a>
 8004130:	019b      	lsls	r3, r3, #6
 8004132:	0a5e      	lsrs	r6, r3, #9
 8004134:	b2d2      	uxtb	r2, r2
 8004136:	05d0      	lsls	r0, r2, #23
 8004138:	4330      	orrs	r0, r6
 800413a:	07e4      	lsls	r4, r4, #31
 800413c:	4320      	orrs	r0, r4
 800413e:	bc80      	pop	{r7}
 8004140:	46b8      	mov	r8, r7
 8004142:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004144:	1bea      	subs	r2, r5, r7
 8004146:	2a00      	cmp	r2, #0
 8004148:	dd41      	ble.n	80041ce <__aeabi_fsub+0x12e>
 800414a:	2f00      	cmp	r7, #0
 800414c:	d06b      	beq.n	8004226 <__aeabi_fsub+0x186>
 800414e:	2dff      	cmp	r5, #255	; 0xff
 8004150:	d100      	bne.n	8004154 <__aeabi_fsub+0xb4>
 8004152:	e097      	b.n	8004284 <__aeabi_fsub+0x1e4>
 8004154:	2380      	movs	r3, #128	; 0x80
 8004156:	04db      	lsls	r3, r3, #19
 8004158:	4318      	orrs	r0, r3
 800415a:	2a1b      	cmp	r2, #27
 800415c:	dc00      	bgt.n	8004160 <__aeabi_fsub+0xc0>
 800415e:	e0cc      	b.n	80042fa <__aeabi_fsub+0x25a>
 8004160:	2301      	movs	r3, #1
 8004162:	4463      	add	r3, ip
 8004164:	015a      	lsls	r2, r3, #5
 8004166:	d574      	bpl.n	8004252 <__aeabi_fsub+0x1b2>
 8004168:	3501      	adds	r5, #1
 800416a:	2dff      	cmp	r5, #255	; 0xff
 800416c:	d065      	beq.n	800423a <__aeabi_fsub+0x19a>
 800416e:	2201      	movs	r2, #1
 8004170:	499a      	ldr	r1, [pc, #616]	; (80043dc <__aeabi_fsub+0x33c>)
 8004172:	401a      	ands	r2, r3
 8004174:	085b      	lsrs	r3, r3, #1
 8004176:	400b      	ands	r3, r1
 8004178:	4313      	orrs	r3, r2
 800417a:	e7cb      	b.n	8004114 <__aeabi_fsub+0x74>
 800417c:	2800      	cmp	r0, #0
 800417e:	d01f      	beq.n	80041c0 <__aeabi_fsub+0x120>
 8004180:	428c      	cmp	r4, r1
 8004182:	d022      	beq.n	80041ca <__aeabi_fsub+0x12a>
 8004184:	002a      	movs	r2, r5
 8004186:	3aff      	subs	r2, #255	; 0xff
 8004188:	2a00      	cmp	r2, #0
 800418a:	d035      	beq.n	80041f8 <__aeabi_fsub+0x158>
 800418c:	1b7a      	subs	r2, r7, r5
 800418e:	2d00      	cmp	r5, #0
 8004190:	d000      	beq.n	8004194 <__aeabi_fsub+0xf4>
 8004192:	e099      	b.n	80042c8 <__aeabi_fsub+0x228>
 8004194:	4663      	mov	r3, ip
 8004196:	2b00      	cmp	r3, #0
 8004198:	d100      	bne.n	800419c <__aeabi_fsub+0xfc>
 800419a:	e0dd      	b.n	8004358 <__aeabi_fsub+0x2b8>
 800419c:	1e53      	subs	r3, r2, #1
 800419e:	2a01      	cmp	r2, #1
 80041a0:	d100      	bne.n	80041a4 <__aeabi_fsub+0x104>
 80041a2:	e105      	b.n	80043b0 <__aeabi_fsub+0x310>
 80041a4:	2aff      	cmp	r2, #255	; 0xff
 80041a6:	d06b      	beq.n	8004280 <__aeabi_fsub+0x1e0>
 80041a8:	001a      	movs	r2, r3
 80041aa:	e094      	b.n	80042d6 <__aeabi_fsub+0x236>
 80041ac:	2800      	cmp	r0, #0
 80041ae:	d073      	beq.n	8004298 <__aeabi_fsub+0x1f8>
 80041b0:	1e51      	subs	r1, r2, #1
 80041b2:	2a01      	cmp	r2, #1
 80041b4:	d100      	bne.n	80041b8 <__aeabi_fsub+0x118>
 80041b6:	e0df      	b.n	8004378 <__aeabi_fsub+0x2d8>
 80041b8:	2aff      	cmp	r2, #255	; 0xff
 80041ba:	d063      	beq.n	8004284 <__aeabi_fsub+0x1e4>
 80041bc:	000a      	movs	r2, r1
 80041be:	e792      	b.n	80040e6 <__aeabi_fsub+0x46>
 80041c0:	2201      	movs	r2, #1
 80041c2:	4051      	eors	r1, r2
 80041c4:	42a1      	cmp	r1, r4
 80041c6:	d000      	beq.n	80041ca <__aeabi_fsub+0x12a>
 80041c8:	e782      	b.n	80040d0 <__aeabi_fsub+0x30>
 80041ca:	002a      	movs	r2, r5
 80041cc:	3aff      	subs	r2, #255	; 0xff
 80041ce:	2a00      	cmp	r2, #0
 80041d0:	d036      	beq.n	8004240 <__aeabi_fsub+0x1a0>
 80041d2:	1b7a      	subs	r2, r7, r5
 80041d4:	2d00      	cmp	r5, #0
 80041d6:	d100      	bne.n	80041da <__aeabi_fsub+0x13a>
 80041d8:	e0aa      	b.n	8004330 <__aeabi_fsub+0x290>
 80041da:	2fff      	cmp	r7, #255	; 0xff
 80041dc:	d100      	bne.n	80041e0 <__aeabi_fsub+0x140>
 80041de:	e0da      	b.n	8004396 <__aeabi_fsub+0x2f6>
 80041e0:	2380      	movs	r3, #128	; 0x80
 80041e2:	4661      	mov	r1, ip
 80041e4:	04db      	lsls	r3, r3, #19
 80041e6:	4319      	orrs	r1, r3
 80041e8:	468c      	mov	ip, r1
 80041ea:	2a1b      	cmp	r2, #27
 80041ec:	dc00      	bgt.n	80041f0 <__aeabi_fsub+0x150>
 80041ee:	e0d4      	b.n	800439a <__aeabi_fsub+0x2fa>
 80041f0:	2301      	movs	r3, #1
 80041f2:	003d      	movs	r5, r7
 80041f4:	181b      	adds	r3, r3, r0
 80041f6:	e7b5      	b.n	8004164 <__aeabi_fsub+0xc4>
 80041f8:	27fe      	movs	r7, #254	; 0xfe
 80041fa:	1c6a      	adds	r2, r5, #1
 80041fc:	4217      	tst	r7, r2
 80041fe:	d171      	bne.n	80042e4 <__aeabi_fsub+0x244>
 8004200:	2d00      	cmp	r5, #0
 8004202:	d000      	beq.n	8004206 <__aeabi_fsub+0x166>
 8004204:	e09e      	b.n	8004344 <__aeabi_fsub+0x2a4>
 8004206:	4663      	mov	r3, ip
 8004208:	2b00      	cmp	r3, #0
 800420a:	d100      	bne.n	800420e <__aeabi_fsub+0x16e>
 800420c:	e0d5      	b.n	80043ba <__aeabi_fsub+0x31a>
 800420e:	2200      	movs	r2, #0
 8004210:	2800      	cmp	r0, #0
 8004212:	d100      	bne.n	8004216 <__aeabi_fsub+0x176>
 8004214:	e78f      	b.n	8004136 <__aeabi_fsub+0x96>
 8004216:	1a1b      	subs	r3, r3, r0
 8004218:	015e      	lsls	r6, r3, #5
 800421a:	d400      	bmi.n	800421e <__aeabi_fsub+0x17e>
 800421c:	e0d6      	b.n	80043cc <__aeabi_fsub+0x32c>
 800421e:	4663      	mov	r3, ip
 8004220:	000c      	movs	r4, r1
 8004222:	1ac3      	subs	r3, r0, r3
 8004224:	e776      	b.n	8004114 <__aeabi_fsub+0x74>
 8004226:	2800      	cmp	r0, #0
 8004228:	d036      	beq.n	8004298 <__aeabi_fsub+0x1f8>
 800422a:	1e51      	subs	r1, r2, #1
 800422c:	2a01      	cmp	r2, #1
 800422e:	d100      	bne.n	8004232 <__aeabi_fsub+0x192>
 8004230:	e09a      	b.n	8004368 <__aeabi_fsub+0x2c8>
 8004232:	2aff      	cmp	r2, #255	; 0xff
 8004234:	d026      	beq.n	8004284 <__aeabi_fsub+0x1e4>
 8004236:	000a      	movs	r2, r1
 8004238:	e78f      	b.n	800415a <__aeabi_fsub+0xba>
 800423a:	22ff      	movs	r2, #255	; 0xff
 800423c:	2600      	movs	r6, #0
 800423e:	e77a      	b.n	8004136 <__aeabi_fsub+0x96>
 8004240:	27fe      	movs	r7, #254	; 0xfe
 8004242:	1c6a      	adds	r2, r5, #1
 8004244:	4217      	tst	r7, r2
 8004246:	d062      	beq.n	800430e <__aeabi_fsub+0x26e>
 8004248:	2aff      	cmp	r2, #255	; 0xff
 800424a:	d0f6      	beq.n	800423a <__aeabi_fsub+0x19a>
 800424c:	0015      	movs	r5, r2
 800424e:	4460      	add	r0, ip
 8004250:	0843      	lsrs	r3, r0, #1
 8004252:	075a      	lsls	r2, r3, #29
 8004254:	d000      	beq.n	8004258 <__aeabi_fsub+0x1b8>
 8004256:	e75f      	b.n	8004118 <__aeabi_fsub+0x78>
 8004258:	08db      	lsrs	r3, r3, #3
 800425a:	2dff      	cmp	r5, #255	; 0xff
 800425c:	d012      	beq.n	8004284 <__aeabi_fsub+0x1e4>
 800425e:	025b      	lsls	r3, r3, #9
 8004260:	0a5e      	lsrs	r6, r3, #9
 8004262:	b2ea      	uxtb	r2, r5
 8004264:	e767      	b.n	8004136 <__aeabi_fsub+0x96>
 8004266:	4662      	mov	r2, ip
 8004268:	2a00      	cmp	r2, #0
 800426a:	d100      	bne.n	800426e <__aeabi_fsub+0x1ce>
 800426c:	e093      	b.n	8004396 <__aeabi_fsub+0x2f6>
 800426e:	2800      	cmp	r0, #0
 8004270:	d008      	beq.n	8004284 <__aeabi_fsub+0x1e4>
 8004272:	2280      	movs	r2, #128	; 0x80
 8004274:	03d2      	lsls	r2, r2, #15
 8004276:	4213      	tst	r3, r2
 8004278:	d004      	beq.n	8004284 <__aeabi_fsub+0x1e4>
 800427a:	4640      	mov	r0, r8
 800427c:	4210      	tst	r0, r2
 800427e:	d101      	bne.n	8004284 <__aeabi_fsub+0x1e4>
 8004280:	000c      	movs	r4, r1
 8004282:	4643      	mov	r3, r8
 8004284:	2b00      	cmp	r3, #0
 8004286:	d0d8      	beq.n	800423a <__aeabi_fsub+0x19a>
 8004288:	2680      	movs	r6, #128	; 0x80
 800428a:	03f6      	lsls	r6, r6, #15
 800428c:	431e      	orrs	r6, r3
 800428e:	0276      	lsls	r6, r6, #9
 8004290:	22ff      	movs	r2, #255	; 0xff
 8004292:	0a76      	lsrs	r6, r6, #9
 8004294:	e74f      	b.n	8004136 <__aeabi_fsub+0x96>
 8004296:	4643      	mov	r3, r8
 8004298:	0015      	movs	r5, r2
 800429a:	e7de      	b.n	800425a <__aeabi_fsub+0x1ba>
 800429c:	2220      	movs	r2, #32
 800429e:	1b40      	subs	r0, r0, r5
 80042a0:	3001      	adds	r0, #1
 80042a2:	1a12      	subs	r2, r2, r0
 80042a4:	0019      	movs	r1, r3
 80042a6:	4093      	lsls	r3, r2
 80042a8:	40c1      	lsrs	r1, r0
 80042aa:	1e5a      	subs	r2, r3, #1
 80042ac:	4193      	sbcs	r3, r2
 80042ae:	2500      	movs	r5, #0
 80042b0:	430b      	orrs	r3, r1
 80042b2:	e72f      	b.n	8004114 <__aeabi_fsub+0x74>
 80042b4:	2320      	movs	r3, #32
 80042b6:	1a9b      	subs	r3, r3, r2
 80042b8:	0001      	movs	r1, r0
 80042ba:	4098      	lsls	r0, r3
 80042bc:	0003      	movs	r3, r0
 80042be:	40d1      	lsrs	r1, r2
 80042c0:	1e5a      	subs	r2, r3, #1
 80042c2:	4193      	sbcs	r3, r2
 80042c4:	430b      	orrs	r3, r1
 80042c6:	e712      	b.n	80040ee <__aeabi_fsub+0x4e>
 80042c8:	2fff      	cmp	r7, #255	; 0xff
 80042ca:	d0d9      	beq.n	8004280 <__aeabi_fsub+0x1e0>
 80042cc:	2380      	movs	r3, #128	; 0x80
 80042ce:	4664      	mov	r4, ip
 80042d0:	04db      	lsls	r3, r3, #19
 80042d2:	431c      	orrs	r4, r3
 80042d4:	46a4      	mov	ip, r4
 80042d6:	2a1b      	cmp	r2, #27
 80042d8:	dd52      	ble.n	8004380 <__aeabi_fsub+0x2e0>
 80042da:	2301      	movs	r3, #1
 80042dc:	000c      	movs	r4, r1
 80042de:	003d      	movs	r5, r7
 80042e0:	1ac3      	subs	r3, r0, r3
 80042e2:	e706      	b.n	80040f2 <__aeabi_fsub+0x52>
 80042e4:	4663      	mov	r3, ip
 80042e6:	1a1e      	subs	r6, r3, r0
 80042e8:	0173      	lsls	r3, r6, #5
 80042ea:	d439      	bmi.n	8004360 <__aeabi_fsub+0x2c0>
 80042ec:	2e00      	cmp	r6, #0
 80042ee:	d000      	beq.n	80042f2 <__aeabi_fsub+0x252>
 80042f0:	e704      	b.n	80040fc <__aeabi_fsub+0x5c>
 80042f2:	2400      	movs	r4, #0
 80042f4:	2200      	movs	r2, #0
 80042f6:	2600      	movs	r6, #0
 80042f8:	e71d      	b.n	8004136 <__aeabi_fsub+0x96>
 80042fa:	2320      	movs	r3, #32
 80042fc:	1a9b      	subs	r3, r3, r2
 80042fe:	0001      	movs	r1, r0
 8004300:	4098      	lsls	r0, r3
 8004302:	0003      	movs	r3, r0
 8004304:	40d1      	lsrs	r1, r2
 8004306:	1e5a      	subs	r2, r3, #1
 8004308:	4193      	sbcs	r3, r2
 800430a:	430b      	orrs	r3, r1
 800430c:	e729      	b.n	8004162 <__aeabi_fsub+0xc2>
 800430e:	2d00      	cmp	r5, #0
 8004310:	d1a9      	bne.n	8004266 <__aeabi_fsub+0x1c6>
 8004312:	4663      	mov	r3, ip
 8004314:	2b00      	cmp	r3, #0
 8004316:	d056      	beq.n	80043c6 <__aeabi_fsub+0x326>
 8004318:	2200      	movs	r2, #0
 800431a:	2800      	cmp	r0, #0
 800431c:	d100      	bne.n	8004320 <__aeabi_fsub+0x280>
 800431e:	e70a      	b.n	8004136 <__aeabi_fsub+0x96>
 8004320:	0003      	movs	r3, r0
 8004322:	4463      	add	r3, ip
 8004324:	015a      	lsls	r2, r3, #5
 8004326:	d594      	bpl.n	8004252 <__aeabi_fsub+0x1b2>
 8004328:	4a2b      	ldr	r2, [pc, #172]	; (80043d8 <__aeabi_fsub+0x338>)
 800432a:	3501      	adds	r5, #1
 800432c:	4013      	ands	r3, r2
 800432e:	e790      	b.n	8004252 <__aeabi_fsub+0x1b2>
 8004330:	4663      	mov	r3, ip
 8004332:	2b00      	cmp	r3, #0
 8004334:	d0af      	beq.n	8004296 <__aeabi_fsub+0x1f6>
 8004336:	1e53      	subs	r3, r2, #1
 8004338:	2a01      	cmp	r2, #1
 800433a:	d015      	beq.n	8004368 <__aeabi_fsub+0x2c8>
 800433c:	2aff      	cmp	r2, #255	; 0xff
 800433e:	d02a      	beq.n	8004396 <__aeabi_fsub+0x2f6>
 8004340:	001a      	movs	r2, r3
 8004342:	e752      	b.n	80041ea <__aeabi_fsub+0x14a>
 8004344:	4662      	mov	r2, ip
 8004346:	2a00      	cmp	r2, #0
 8004348:	d191      	bne.n	800426e <__aeabi_fsub+0x1ce>
 800434a:	2800      	cmp	r0, #0
 800434c:	d198      	bne.n	8004280 <__aeabi_fsub+0x1e0>
 800434e:	2680      	movs	r6, #128	; 0x80
 8004350:	2400      	movs	r4, #0
 8004352:	22ff      	movs	r2, #255	; 0xff
 8004354:	03f6      	lsls	r6, r6, #15
 8004356:	e6ee      	b.n	8004136 <__aeabi_fsub+0x96>
 8004358:	000c      	movs	r4, r1
 800435a:	4643      	mov	r3, r8
 800435c:	0015      	movs	r5, r2
 800435e:	e77c      	b.n	800425a <__aeabi_fsub+0x1ba>
 8004360:	4663      	mov	r3, ip
 8004362:	000c      	movs	r4, r1
 8004364:	1ac6      	subs	r6, r0, r3
 8004366:	e6c9      	b.n	80040fc <__aeabi_fsub+0x5c>
 8004368:	0003      	movs	r3, r0
 800436a:	4463      	add	r3, ip
 800436c:	2501      	movs	r5, #1
 800436e:	015a      	lsls	r2, r3, #5
 8004370:	d400      	bmi.n	8004374 <__aeabi_fsub+0x2d4>
 8004372:	e76e      	b.n	8004252 <__aeabi_fsub+0x1b2>
 8004374:	2502      	movs	r5, #2
 8004376:	e6fa      	b.n	800416e <__aeabi_fsub+0xce>
 8004378:	4663      	mov	r3, ip
 800437a:	2501      	movs	r5, #1
 800437c:	1a1b      	subs	r3, r3, r0
 800437e:	e6b8      	b.n	80040f2 <__aeabi_fsub+0x52>
 8004380:	4664      	mov	r4, ip
 8004382:	2320      	movs	r3, #32
 8004384:	40d4      	lsrs	r4, r2
 8004386:	1a9b      	subs	r3, r3, r2
 8004388:	4662      	mov	r2, ip
 800438a:	409a      	lsls	r2, r3
 800438c:	0013      	movs	r3, r2
 800438e:	1e5a      	subs	r2, r3, #1
 8004390:	4193      	sbcs	r3, r2
 8004392:	4323      	orrs	r3, r4
 8004394:	e7a2      	b.n	80042dc <__aeabi_fsub+0x23c>
 8004396:	4643      	mov	r3, r8
 8004398:	e774      	b.n	8004284 <__aeabi_fsub+0x1e4>
 800439a:	4661      	mov	r1, ip
 800439c:	2320      	movs	r3, #32
 800439e:	40d1      	lsrs	r1, r2
 80043a0:	1a9b      	subs	r3, r3, r2
 80043a2:	4662      	mov	r2, ip
 80043a4:	409a      	lsls	r2, r3
 80043a6:	0013      	movs	r3, r2
 80043a8:	1e5a      	subs	r2, r3, #1
 80043aa:	4193      	sbcs	r3, r2
 80043ac:	430b      	orrs	r3, r1
 80043ae:	e720      	b.n	80041f2 <__aeabi_fsub+0x152>
 80043b0:	4663      	mov	r3, ip
 80043b2:	000c      	movs	r4, r1
 80043b4:	2501      	movs	r5, #1
 80043b6:	1ac3      	subs	r3, r0, r3
 80043b8:	e69b      	b.n	80040f2 <__aeabi_fsub+0x52>
 80043ba:	2800      	cmp	r0, #0
 80043bc:	d099      	beq.n	80042f2 <__aeabi_fsub+0x252>
 80043be:	000c      	movs	r4, r1
 80043c0:	4646      	mov	r6, r8
 80043c2:	2200      	movs	r2, #0
 80043c4:	e6b7      	b.n	8004136 <__aeabi_fsub+0x96>
 80043c6:	4646      	mov	r6, r8
 80043c8:	2200      	movs	r2, #0
 80043ca:	e6b4      	b.n	8004136 <__aeabi_fsub+0x96>
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d000      	beq.n	80043d2 <__aeabi_fsub+0x332>
 80043d0:	e73f      	b.n	8004252 <__aeabi_fsub+0x1b2>
 80043d2:	2400      	movs	r4, #0
 80043d4:	2600      	movs	r6, #0
 80043d6:	e6ae      	b.n	8004136 <__aeabi_fsub+0x96>
 80043d8:	fbffffff 	.word	0xfbffffff
 80043dc:	7dffffff 	.word	0x7dffffff

080043e0 <__aeabi_fcmpun>:
 80043e0:	0243      	lsls	r3, r0, #9
 80043e2:	024a      	lsls	r2, r1, #9
 80043e4:	0040      	lsls	r0, r0, #1
 80043e6:	0049      	lsls	r1, r1, #1
 80043e8:	0a5b      	lsrs	r3, r3, #9
 80043ea:	0a52      	lsrs	r2, r2, #9
 80043ec:	0e09      	lsrs	r1, r1, #24
 80043ee:	0e00      	lsrs	r0, r0, #24
 80043f0:	28ff      	cmp	r0, #255	; 0xff
 80043f2:	d006      	beq.n	8004402 <__aeabi_fcmpun+0x22>
 80043f4:	2000      	movs	r0, #0
 80043f6:	29ff      	cmp	r1, #255	; 0xff
 80043f8:	d102      	bne.n	8004400 <__aeabi_fcmpun+0x20>
 80043fa:	1e53      	subs	r3, r2, #1
 80043fc:	419a      	sbcs	r2, r3
 80043fe:	0010      	movs	r0, r2
 8004400:	4770      	bx	lr
 8004402:	38fe      	subs	r0, #254	; 0xfe
 8004404:	2b00      	cmp	r3, #0
 8004406:	d1fb      	bne.n	8004400 <__aeabi_fcmpun+0x20>
 8004408:	e7f4      	b.n	80043f4 <__aeabi_fcmpun+0x14>
 800440a:	46c0      	nop			; (mov r8, r8)

0800440c <__aeabi_f2iz>:
 800440c:	0241      	lsls	r1, r0, #9
 800440e:	0042      	lsls	r2, r0, #1
 8004410:	0fc3      	lsrs	r3, r0, #31
 8004412:	0a49      	lsrs	r1, r1, #9
 8004414:	2000      	movs	r0, #0
 8004416:	0e12      	lsrs	r2, r2, #24
 8004418:	2a7e      	cmp	r2, #126	; 0x7e
 800441a:	dd03      	ble.n	8004424 <__aeabi_f2iz+0x18>
 800441c:	2a9d      	cmp	r2, #157	; 0x9d
 800441e:	dd02      	ble.n	8004426 <__aeabi_f2iz+0x1a>
 8004420:	4a09      	ldr	r2, [pc, #36]	; (8004448 <__aeabi_f2iz+0x3c>)
 8004422:	1898      	adds	r0, r3, r2
 8004424:	4770      	bx	lr
 8004426:	2080      	movs	r0, #128	; 0x80
 8004428:	0400      	lsls	r0, r0, #16
 800442a:	4301      	orrs	r1, r0
 800442c:	2a95      	cmp	r2, #149	; 0x95
 800442e:	dc07      	bgt.n	8004440 <__aeabi_f2iz+0x34>
 8004430:	2096      	movs	r0, #150	; 0x96
 8004432:	1a82      	subs	r2, r0, r2
 8004434:	40d1      	lsrs	r1, r2
 8004436:	4248      	negs	r0, r1
 8004438:	2b00      	cmp	r3, #0
 800443a:	d1f3      	bne.n	8004424 <__aeabi_f2iz+0x18>
 800443c:	0008      	movs	r0, r1
 800443e:	e7f1      	b.n	8004424 <__aeabi_f2iz+0x18>
 8004440:	3a96      	subs	r2, #150	; 0x96
 8004442:	4091      	lsls	r1, r2
 8004444:	e7f7      	b.n	8004436 <__aeabi_f2iz+0x2a>
 8004446:	46c0      	nop			; (mov r8, r8)
 8004448:	7fffffff 	.word	0x7fffffff

0800444c <__aeabi_i2f>:
 800444c:	b570      	push	{r4, r5, r6, lr}
 800444e:	2800      	cmp	r0, #0
 8004450:	d013      	beq.n	800447a <__aeabi_i2f+0x2e>
 8004452:	17c3      	asrs	r3, r0, #31
 8004454:	18c5      	adds	r5, r0, r3
 8004456:	405d      	eors	r5, r3
 8004458:	0fc4      	lsrs	r4, r0, #31
 800445a:	0028      	movs	r0, r5
 800445c:	f001 ffa6 	bl	80063ac <__clzsi2>
 8004460:	239e      	movs	r3, #158	; 0x9e
 8004462:	0001      	movs	r1, r0
 8004464:	1a1b      	subs	r3, r3, r0
 8004466:	2b96      	cmp	r3, #150	; 0x96
 8004468:	dc0f      	bgt.n	800448a <__aeabi_i2f+0x3e>
 800446a:	2808      	cmp	r0, #8
 800446c:	d031      	beq.n	80044d2 <__aeabi_i2f+0x86>
 800446e:	3908      	subs	r1, #8
 8004470:	408d      	lsls	r5, r1
 8004472:	026d      	lsls	r5, r5, #9
 8004474:	0a6d      	lsrs	r5, r5, #9
 8004476:	b2d8      	uxtb	r0, r3
 8004478:	e002      	b.n	8004480 <__aeabi_i2f+0x34>
 800447a:	2400      	movs	r4, #0
 800447c:	2000      	movs	r0, #0
 800447e:	2500      	movs	r5, #0
 8004480:	05c0      	lsls	r0, r0, #23
 8004482:	4328      	orrs	r0, r5
 8004484:	07e4      	lsls	r4, r4, #31
 8004486:	4320      	orrs	r0, r4
 8004488:	bd70      	pop	{r4, r5, r6, pc}
 800448a:	2b99      	cmp	r3, #153	; 0x99
 800448c:	dd0c      	ble.n	80044a8 <__aeabi_i2f+0x5c>
 800448e:	2205      	movs	r2, #5
 8004490:	1a12      	subs	r2, r2, r0
 8004492:	0028      	movs	r0, r5
 8004494:	40d0      	lsrs	r0, r2
 8004496:	0002      	movs	r2, r0
 8004498:	0008      	movs	r0, r1
 800449a:	301b      	adds	r0, #27
 800449c:	4085      	lsls	r5, r0
 800449e:	0028      	movs	r0, r5
 80044a0:	1e45      	subs	r5, r0, #1
 80044a2:	41a8      	sbcs	r0, r5
 80044a4:	4302      	orrs	r2, r0
 80044a6:	0015      	movs	r5, r2
 80044a8:	2905      	cmp	r1, #5
 80044aa:	dc16      	bgt.n	80044da <__aeabi_i2f+0x8e>
 80044ac:	002a      	movs	r2, r5
 80044ae:	480f      	ldr	r0, [pc, #60]	; (80044ec <__aeabi_i2f+0xa0>)
 80044b0:	4002      	ands	r2, r0
 80044b2:	076e      	lsls	r6, r5, #29
 80044b4:	d009      	beq.n	80044ca <__aeabi_i2f+0x7e>
 80044b6:	260f      	movs	r6, #15
 80044b8:	4035      	ands	r5, r6
 80044ba:	2d04      	cmp	r5, #4
 80044bc:	d005      	beq.n	80044ca <__aeabi_i2f+0x7e>
 80044be:	3204      	adds	r2, #4
 80044c0:	0155      	lsls	r5, r2, #5
 80044c2:	d502      	bpl.n	80044ca <__aeabi_i2f+0x7e>
 80044c4:	239f      	movs	r3, #159	; 0x9f
 80044c6:	4002      	ands	r2, r0
 80044c8:	1a5b      	subs	r3, r3, r1
 80044ca:	0192      	lsls	r2, r2, #6
 80044cc:	0a55      	lsrs	r5, r2, #9
 80044ce:	b2d8      	uxtb	r0, r3
 80044d0:	e7d6      	b.n	8004480 <__aeabi_i2f+0x34>
 80044d2:	026d      	lsls	r5, r5, #9
 80044d4:	2096      	movs	r0, #150	; 0x96
 80044d6:	0a6d      	lsrs	r5, r5, #9
 80044d8:	e7d2      	b.n	8004480 <__aeabi_i2f+0x34>
 80044da:	1f4a      	subs	r2, r1, #5
 80044dc:	4095      	lsls	r5, r2
 80044de:	002a      	movs	r2, r5
 80044e0:	4802      	ldr	r0, [pc, #8]	; (80044ec <__aeabi_i2f+0xa0>)
 80044e2:	4002      	ands	r2, r0
 80044e4:	076e      	lsls	r6, r5, #29
 80044e6:	d0f0      	beq.n	80044ca <__aeabi_i2f+0x7e>
 80044e8:	e7e5      	b.n	80044b6 <__aeabi_i2f+0x6a>
 80044ea:	46c0      	nop			; (mov r8, r8)
 80044ec:	fbffffff 	.word	0xfbffffff

080044f0 <__aeabi_ui2f>:
 80044f0:	b570      	push	{r4, r5, r6, lr}
 80044f2:	1e04      	subs	r4, r0, #0
 80044f4:	d00e      	beq.n	8004514 <__aeabi_ui2f+0x24>
 80044f6:	f001 ff59 	bl	80063ac <__clzsi2>
 80044fa:	239e      	movs	r3, #158	; 0x9e
 80044fc:	0001      	movs	r1, r0
 80044fe:	1a1b      	subs	r3, r3, r0
 8004500:	2b96      	cmp	r3, #150	; 0x96
 8004502:	dc0c      	bgt.n	800451e <__aeabi_ui2f+0x2e>
 8004504:	2808      	cmp	r0, #8
 8004506:	d02c      	beq.n	8004562 <__aeabi_ui2f+0x72>
 8004508:	3908      	subs	r1, #8
 800450a:	408c      	lsls	r4, r1
 800450c:	0264      	lsls	r4, r4, #9
 800450e:	0a64      	lsrs	r4, r4, #9
 8004510:	b2d8      	uxtb	r0, r3
 8004512:	e001      	b.n	8004518 <__aeabi_ui2f+0x28>
 8004514:	2000      	movs	r0, #0
 8004516:	2400      	movs	r4, #0
 8004518:	05c0      	lsls	r0, r0, #23
 800451a:	4320      	orrs	r0, r4
 800451c:	bd70      	pop	{r4, r5, r6, pc}
 800451e:	2b99      	cmp	r3, #153	; 0x99
 8004520:	dd0a      	ble.n	8004538 <__aeabi_ui2f+0x48>
 8004522:	0002      	movs	r2, r0
 8004524:	0020      	movs	r0, r4
 8004526:	321b      	adds	r2, #27
 8004528:	4090      	lsls	r0, r2
 800452a:	0002      	movs	r2, r0
 800452c:	1e50      	subs	r0, r2, #1
 800452e:	4182      	sbcs	r2, r0
 8004530:	2005      	movs	r0, #5
 8004532:	1a40      	subs	r0, r0, r1
 8004534:	40c4      	lsrs	r4, r0
 8004536:	4314      	orrs	r4, r2
 8004538:	2905      	cmp	r1, #5
 800453a:	dc16      	bgt.n	800456a <__aeabi_ui2f+0x7a>
 800453c:	0022      	movs	r2, r4
 800453e:	480f      	ldr	r0, [pc, #60]	; (800457c <__aeabi_ui2f+0x8c>)
 8004540:	4002      	ands	r2, r0
 8004542:	0765      	lsls	r5, r4, #29
 8004544:	d009      	beq.n	800455a <__aeabi_ui2f+0x6a>
 8004546:	250f      	movs	r5, #15
 8004548:	402c      	ands	r4, r5
 800454a:	2c04      	cmp	r4, #4
 800454c:	d005      	beq.n	800455a <__aeabi_ui2f+0x6a>
 800454e:	3204      	adds	r2, #4
 8004550:	0154      	lsls	r4, r2, #5
 8004552:	d502      	bpl.n	800455a <__aeabi_ui2f+0x6a>
 8004554:	239f      	movs	r3, #159	; 0x9f
 8004556:	4002      	ands	r2, r0
 8004558:	1a5b      	subs	r3, r3, r1
 800455a:	0192      	lsls	r2, r2, #6
 800455c:	0a54      	lsrs	r4, r2, #9
 800455e:	b2d8      	uxtb	r0, r3
 8004560:	e7da      	b.n	8004518 <__aeabi_ui2f+0x28>
 8004562:	0264      	lsls	r4, r4, #9
 8004564:	2096      	movs	r0, #150	; 0x96
 8004566:	0a64      	lsrs	r4, r4, #9
 8004568:	e7d6      	b.n	8004518 <__aeabi_ui2f+0x28>
 800456a:	1f4a      	subs	r2, r1, #5
 800456c:	4094      	lsls	r4, r2
 800456e:	0022      	movs	r2, r4
 8004570:	4802      	ldr	r0, [pc, #8]	; (800457c <__aeabi_ui2f+0x8c>)
 8004572:	4002      	ands	r2, r0
 8004574:	0765      	lsls	r5, r4, #29
 8004576:	d0f0      	beq.n	800455a <__aeabi_ui2f+0x6a>
 8004578:	e7e5      	b.n	8004546 <__aeabi_ui2f+0x56>
 800457a:	46c0      	nop			; (mov r8, r8)
 800457c:	fbffffff 	.word	0xfbffffff

08004580 <__aeabi_dadd>:
 8004580:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004582:	464f      	mov	r7, r9
 8004584:	4646      	mov	r6, r8
 8004586:	46d6      	mov	lr, sl
 8004588:	0004      	movs	r4, r0
 800458a:	b5c0      	push	{r6, r7, lr}
 800458c:	001f      	movs	r7, r3
 800458e:	030b      	lsls	r3, r1, #12
 8004590:	0010      	movs	r0, r2
 8004592:	004e      	lsls	r6, r1, #1
 8004594:	0a5b      	lsrs	r3, r3, #9
 8004596:	0fcd      	lsrs	r5, r1, #31
 8004598:	0f61      	lsrs	r1, r4, #29
 800459a:	007a      	lsls	r2, r7, #1
 800459c:	4319      	orrs	r1, r3
 800459e:	00e3      	lsls	r3, r4, #3
 80045a0:	033c      	lsls	r4, r7, #12
 80045a2:	0fff      	lsrs	r7, r7, #31
 80045a4:	46bc      	mov	ip, r7
 80045a6:	0a64      	lsrs	r4, r4, #9
 80045a8:	0f47      	lsrs	r7, r0, #29
 80045aa:	4327      	orrs	r7, r4
 80045ac:	0d76      	lsrs	r6, r6, #21
 80045ae:	0d52      	lsrs	r2, r2, #21
 80045b0:	00c0      	lsls	r0, r0, #3
 80045b2:	46b9      	mov	r9, r7
 80045b4:	4680      	mov	r8, r0
 80045b6:	1ab7      	subs	r7, r6, r2
 80045b8:	4565      	cmp	r5, ip
 80045ba:	d100      	bne.n	80045be <__aeabi_dadd+0x3e>
 80045bc:	e09b      	b.n	80046f6 <__aeabi_dadd+0x176>
 80045be:	2f00      	cmp	r7, #0
 80045c0:	dc00      	bgt.n	80045c4 <__aeabi_dadd+0x44>
 80045c2:	e084      	b.n	80046ce <__aeabi_dadd+0x14e>
 80045c4:	2a00      	cmp	r2, #0
 80045c6:	d100      	bne.n	80045ca <__aeabi_dadd+0x4a>
 80045c8:	e0be      	b.n	8004748 <__aeabi_dadd+0x1c8>
 80045ca:	4ac8      	ldr	r2, [pc, #800]	; (80048ec <__aeabi_dadd+0x36c>)
 80045cc:	4296      	cmp	r6, r2
 80045ce:	d100      	bne.n	80045d2 <__aeabi_dadd+0x52>
 80045d0:	e124      	b.n	800481c <__aeabi_dadd+0x29c>
 80045d2:	2280      	movs	r2, #128	; 0x80
 80045d4:	464c      	mov	r4, r9
 80045d6:	0412      	lsls	r2, r2, #16
 80045d8:	4314      	orrs	r4, r2
 80045da:	46a1      	mov	r9, r4
 80045dc:	2f38      	cmp	r7, #56	; 0x38
 80045de:	dd00      	ble.n	80045e2 <__aeabi_dadd+0x62>
 80045e0:	e167      	b.n	80048b2 <__aeabi_dadd+0x332>
 80045e2:	2f1f      	cmp	r7, #31
 80045e4:	dd00      	ble.n	80045e8 <__aeabi_dadd+0x68>
 80045e6:	e1d6      	b.n	8004996 <__aeabi_dadd+0x416>
 80045e8:	2220      	movs	r2, #32
 80045ea:	464c      	mov	r4, r9
 80045ec:	1bd2      	subs	r2, r2, r7
 80045ee:	4094      	lsls	r4, r2
 80045f0:	46a2      	mov	sl, r4
 80045f2:	4644      	mov	r4, r8
 80045f4:	40fc      	lsrs	r4, r7
 80045f6:	0020      	movs	r0, r4
 80045f8:	4654      	mov	r4, sl
 80045fa:	4304      	orrs	r4, r0
 80045fc:	4640      	mov	r0, r8
 80045fe:	4090      	lsls	r0, r2
 8004600:	1e42      	subs	r2, r0, #1
 8004602:	4190      	sbcs	r0, r2
 8004604:	464a      	mov	r2, r9
 8004606:	40fa      	lsrs	r2, r7
 8004608:	4304      	orrs	r4, r0
 800460a:	1a89      	subs	r1, r1, r2
 800460c:	1b1c      	subs	r4, r3, r4
 800460e:	42a3      	cmp	r3, r4
 8004610:	4192      	sbcs	r2, r2
 8004612:	4252      	negs	r2, r2
 8004614:	1a8b      	subs	r3, r1, r2
 8004616:	469a      	mov	sl, r3
 8004618:	4653      	mov	r3, sl
 800461a:	021b      	lsls	r3, r3, #8
 800461c:	d400      	bmi.n	8004620 <__aeabi_dadd+0xa0>
 800461e:	e0d4      	b.n	80047ca <__aeabi_dadd+0x24a>
 8004620:	4653      	mov	r3, sl
 8004622:	025a      	lsls	r2, r3, #9
 8004624:	0a53      	lsrs	r3, r2, #9
 8004626:	469a      	mov	sl, r3
 8004628:	4653      	mov	r3, sl
 800462a:	2b00      	cmp	r3, #0
 800462c:	d100      	bne.n	8004630 <__aeabi_dadd+0xb0>
 800462e:	e104      	b.n	800483a <__aeabi_dadd+0x2ba>
 8004630:	4650      	mov	r0, sl
 8004632:	f001 febb 	bl	80063ac <__clzsi2>
 8004636:	0003      	movs	r3, r0
 8004638:	3b08      	subs	r3, #8
 800463a:	2220      	movs	r2, #32
 800463c:	0020      	movs	r0, r4
 800463e:	1ad2      	subs	r2, r2, r3
 8004640:	4651      	mov	r1, sl
 8004642:	40d0      	lsrs	r0, r2
 8004644:	4099      	lsls	r1, r3
 8004646:	0002      	movs	r2, r0
 8004648:	409c      	lsls	r4, r3
 800464a:	430a      	orrs	r2, r1
 800464c:	42b3      	cmp	r3, r6
 800464e:	da00      	bge.n	8004652 <__aeabi_dadd+0xd2>
 8004650:	e102      	b.n	8004858 <__aeabi_dadd+0x2d8>
 8004652:	1b9b      	subs	r3, r3, r6
 8004654:	1c59      	adds	r1, r3, #1
 8004656:	291f      	cmp	r1, #31
 8004658:	dd00      	ble.n	800465c <__aeabi_dadd+0xdc>
 800465a:	e0a7      	b.n	80047ac <__aeabi_dadd+0x22c>
 800465c:	2320      	movs	r3, #32
 800465e:	0010      	movs	r0, r2
 8004660:	0026      	movs	r6, r4
 8004662:	1a5b      	subs	r3, r3, r1
 8004664:	409c      	lsls	r4, r3
 8004666:	4098      	lsls	r0, r3
 8004668:	40ce      	lsrs	r6, r1
 800466a:	40ca      	lsrs	r2, r1
 800466c:	1e63      	subs	r3, r4, #1
 800466e:	419c      	sbcs	r4, r3
 8004670:	4330      	orrs	r0, r6
 8004672:	4692      	mov	sl, r2
 8004674:	2600      	movs	r6, #0
 8004676:	4304      	orrs	r4, r0
 8004678:	0763      	lsls	r3, r4, #29
 800467a:	d009      	beq.n	8004690 <__aeabi_dadd+0x110>
 800467c:	230f      	movs	r3, #15
 800467e:	4023      	ands	r3, r4
 8004680:	2b04      	cmp	r3, #4
 8004682:	d005      	beq.n	8004690 <__aeabi_dadd+0x110>
 8004684:	1d23      	adds	r3, r4, #4
 8004686:	42a3      	cmp	r3, r4
 8004688:	41a4      	sbcs	r4, r4
 800468a:	4264      	negs	r4, r4
 800468c:	44a2      	add	sl, r4
 800468e:	001c      	movs	r4, r3
 8004690:	4653      	mov	r3, sl
 8004692:	021b      	lsls	r3, r3, #8
 8004694:	d400      	bmi.n	8004698 <__aeabi_dadd+0x118>
 8004696:	e09b      	b.n	80047d0 <__aeabi_dadd+0x250>
 8004698:	4b94      	ldr	r3, [pc, #592]	; (80048ec <__aeabi_dadd+0x36c>)
 800469a:	3601      	adds	r6, #1
 800469c:	429e      	cmp	r6, r3
 800469e:	d100      	bne.n	80046a2 <__aeabi_dadd+0x122>
 80046a0:	e0b8      	b.n	8004814 <__aeabi_dadd+0x294>
 80046a2:	4653      	mov	r3, sl
 80046a4:	4992      	ldr	r1, [pc, #584]	; (80048f0 <__aeabi_dadd+0x370>)
 80046a6:	08e4      	lsrs	r4, r4, #3
 80046a8:	400b      	ands	r3, r1
 80046aa:	0019      	movs	r1, r3
 80046ac:	075b      	lsls	r3, r3, #29
 80046ae:	4323      	orrs	r3, r4
 80046b0:	0572      	lsls	r2, r6, #21
 80046b2:	024c      	lsls	r4, r1, #9
 80046b4:	0b24      	lsrs	r4, r4, #12
 80046b6:	0d52      	lsrs	r2, r2, #21
 80046b8:	0512      	lsls	r2, r2, #20
 80046ba:	07ed      	lsls	r5, r5, #31
 80046bc:	4322      	orrs	r2, r4
 80046be:	432a      	orrs	r2, r5
 80046c0:	0018      	movs	r0, r3
 80046c2:	0011      	movs	r1, r2
 80046c4:	bce0      	pop	{r5, r6, r7}
 80046c6:	46ba      	mov	sl, r7
 80046c8:	46b1      	mov	r9, r6
 80046ca:	46a8      	mov	r8, r5
 80046cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046ce:	2f00      	cmp	r7, #0
 80046d0:	d048      	beq.n	8004764 <__aeabi_dadd+0x1e4>
 80046d2:	1b97      	subs	r7, r2, r6
 80046d4:	2e00      	cmp	r6, #0
 80046d6:	d000      	beq.n	80046da <__aeabi_dadd+0x15a>
 80046d8:	e10e      	b.n	80048f8 <__aeabi_dadd+0x378>
 80046da:	000c      	movs	r4, r1
 80046dc:	431c      	orrs	r4, r3
 80046de:	d100      	bne.n	80046e2 <__aeabi_dadd+0x162>
 80046e0:	e1b7      	b.n	8004a52 <__aeabi_dadd+0x4d2>
 80046e2:	1e7c      	subs	r4, r7, #1
 80046e4:	2f01      	cmp	r7, #1
 80046e6:	d100      	bne.n	80046ea <__aeabi_dadd+0x16a>
 80046e8:	e226      	b.n	8004b38 <__aeabi_dadd+0x5b8>
 80046ea:	4d80      	ldr	r5, [pc, #512]	; (80048ec <__aeabi_dadd+0x36c>)
 80046ec:	42af      	cmp	r7, r5
 80046ee:	d100      	bne.n	80046f2 <__aeabi_dadd+0x172>
 80046f0:	e1d5      	b.n	8004a9e <__aeabi_dadd+0x51e>
 80046f2:	0027      	movs	r7, r4
 80046f4:	e107      	b.n	8004906 <__aeabi_dadd+0x386>
 80046f6:	2f00      	cmp	r7, #0
 80046f8:	dc00      	bgt.n	80046fc <__aeabi_dadd+0x17c>
 80046fa:	e0b2      	b.n	8004862 <__aeabi_dadd+0x2e2>
 80046fc:	2a00      	cmp	r2, #0
 80046fe:	d047      	beq.n	8004790 <__aeabi_dadd+0x210>
 8004700:	4a7a      	ldr	r2, [pc, #488]	; (80048ec <__aeabi_dadd+0x36c>)
 8004702:	4296      	cmp	r6, r2
 8004704:	d100      	bne.n	8004708 <__aeabi_dadd+0x188>
 8004706:	e089      	b.n	800481c <__aeabi_dadd+0x29c>
 8004708:	2280      	movs	r2, #128	; 0x80
 800470a:	464c      	mov	r4, r9
 800470c:	0412      	lsls	r2, r2, #16
 800470e:	4314      	orrs	r4, r2
 8004710:	46a1      	mov	r9, r4
 8004712:	2f38      	cmp	r7, #56	; 0x38
 8004714:	dc6b      	bgt.n	80047ee <__aeabi_dadd+0x26e>
 8004716:	2f1f      	cmp	r7, #31
 8004718:	dc00      	bgt.n	800471c <__aeabi_dadd+0x19c>
 800471a:	e16e      	b.n	80049fa <__aeabi_dadd+0x47a>
 800471c:	003a      	movs	r2, r7
 800471e:	4648      	mov	r0, r9
 8004720:	3a20      	subs	r2, #32
 8004722:	40d0      	lsrs	r0, r2
 8004724:	4684      	mov	ip, r0
 8004726:	2f20      	cmp	r7, #32
 8004728:	d007      	beq.n	800473a <__aeabi_dadd+0x1ba>
 800472a:	2240      	movs	r2, #64	; 0x40
 800472c:	4648      	mov	r0, r9
 800472e:	1bd2      	subs	r2, r2, r7
 8004730:	4090      	lsls	r0, r2
 8004732:	0002      	movs	r2, r0
 8004734:	4640      	mov	r0, r8
 8004736:	4310      	orrs	r0, r2
 8004738:	4680      	mov	r8, r0
 800473a:	4640      	mov	r0, r8
 800473c:	1e42      	subs	r2, r0, #1
 800473e:	4190      	sbcs	r0, r2
 8004740:	4662      	mov	r2, ip
 8004742:	0004      	movs	r4, r0
 8004744:	4314      	orrs	r4, r2
 8004746:	e057      	b.n	80047f8 <__aeabi_dadd+0x278>
 8004748:	464a      	mov	r2, r9
 800474a:	4302      	orrs	r2, r0
 800474c:	d100      	bne.n	8004750 <__aeabi_dadd+0x1d0>
 800474e:	e103      	b.n	8004958 <__aeabi_dadd+0x3d8>
 8004750:	1e7a      	subs	r2, r7, #1
 8004752:	2f01      	cmp	r7, #1
 8004754:	d100      	bne.n	8004758 <__aeabi_dadd+0x1d8>
 8004756:	e193      	b.n	8004a80 <__aeabi_dadd+0x500>
 8004758:	4c64      	ldr	r4, [pc, #400]	; (80048ec <__aeabi_dadd+0x36c>)
 800475a:	42a7      	cmp	r7, r4
 800475c:	d100      	bne.n	8004760 <__aeabi_dadd+0x1e0>
 800475e:	e18a      	b.n	8004a76 <__aeabi_dadd+0x4f6>
 8004760:	0017      	movs	r7, r2
 8004762:	e73b      	b.n	80045dc <__aeabi_dadd+0x5c>
 8004764:	4c63      	ldr	r4, [pc, #396]	; (80048f4 <__aeabi_dadd+0x374>)
 8004766:	1c72      	adds	r2, r6, #1
 8004768:	4222      	tst	r2, r4
 800476a:	d000      	beq.n	800476e <__aeabi_dadd+0x1ee>
 800476c:	e0e0      	b.n	8004930 <__aeabi_dadd+0x3b0>
 800476e:	000a      	movs	r2, r1
 8004770:	431a      	orrs	r2, r3
 8004772:	2e00      	cmp	r6, #0
 8004774:	d000      	beq.n	8004778 <__aeabi_dadd+0x1f8>
 8004776:	e174      	b.n	8004a62 <__aeabi_dadd+0x4e2>
 8004778:	2a00      	cmp	r2, #0
 800477a:	d100      	bne.n	800477e <__aeabi_dadd+0x1fe>
 800477c:	e1d0      	b.n	8004b20 <__aeabi_dadd+0x5a0>
 800477e:	464a      	mov	r2, r9
 8004780:	4302      	orrs	r2, r0
 8004782:	d000      	beq.n	8004786 <__aeabi_dadd+0x206>
 8004784:	e1e3      	b.n	8004b4e <__aeabi_dadd+0x5ce>
 8004786:	074a      	lsls	r2, r1, #29
 8004788:	08db      	lsrs	r3, r3, #3
 800478a:	4313      	orrs	r3, r2
 800478c:	08c9      	lsrs	r1, r1, #3
 800478e:	e029      	b.n	80047e4 <__aeabi_dadd+0x264>
 8004790:	464a      	mov	r2, r9
 8004792:	4302      	orrs	r2, r0
 8004794:	d100      	bne.n	8004798 <__aeabi_dadd+0x218>
 8004796:	e17d      	b.n	8004a94 <__aeabi_dadd+0x514>
 8004798:	1e7a      	subs	r2, r7, #1
 800479a:	2f01      	cmp	r7, #1
 800479c:	d100      	bne.n	80047a0 <__aeabi_dadd+0x220>
 800479e:	e0e0      	b.n	8004962 <__aeabi_dadd+0x3e2>
 80047a0:	4c52      	ldr	r4, [pc, #328]	; (80048ec <__aeabi_dadd+0x36c>)
 80047a2:	42a7      	cmp	r7, r4
 80047a4:	d100      	bne.n	80047a8 <__aeabi_dadd+0x228>
 80047a6:	e166      	b.n	8004a76 <__aeabi_dadd+0x4f6>
 80047a8:	0017      	movs	r7, r2
 80047aa:	e7b2      	b.n	8004712 <__aeabi_dadd+0x192>
 80047ac:	0010      	movs	r0, r2
 80047ae:	3b1f      	subs	r3, #31
 80047b0:	40d8      	lsrs	r0, r3
 80047b2:	2920      	cmp	r1, #32
 80047b4:	d003      	beq.n	80047be <__aeabi_dadd+0x23e>
 80047b6:	2340      	movs	r3, #64	; 0x40
 80047b8:	1a5b      	subs	r3, r3, r1
 80047ba:	409a      	lsls	r2, r3
 80047bc:	4314      	orrs	r4, r2
 80047be:	1e63      	subs	r3, r4, #1
 80047c0:	419c      	sbcs	r4, r3
 80047c2:	2300      	movs	r3, #0
 80047c4:	2600      	movs	r6, #0
 80047c6:	469a      	mov	sl, r3
 80047c8:	4304      	orrs	r4, r0
 80047ca:	0763      	lsls	r3, r4, #29
 80047cc:	d000      	beq.n	80047d0 <__aeabi_dadd+0x250>
 80047ce:	e755      	b.n	800467c <__aeabi_dadd+0xfc>
 80047d0:	4652      	mov	r2, sl
 80047d2:	08e3      	lsrs	r3, r4, #3
 80047d4:	0752      	lsls	r2, r2, #29
 80047d6:	4313      	orrs	r3, r2
 80047d8:	4652      	mov	r2, sl
 80047da:	0037      	movs	r7, r6
 80047dc:	08d1      	lsrs	r1, r2, #3
 80047de:	4a43      	ldr	r2, [pc, #268]	; (80048ec <__aeabi_dadd+0x36c>)
 80047e0:	4297      	cmp	r7, r2
 80047e2:	d01f      	beq.n	8004824 <__aeabi_dadd+0x2a4>
 80047e4:	0309      	lsls	r1, r1, #12
 80047e6:	057a      	lsls	r2, r7, #21
 80047e8:	0b0c      	lsrs	r4, r1, #12
 80047ea:	0d52      	lsrs	r2, r2, #21
 80047ec:	e764      	b.n	80046b8 <__aeabi_dadd+0x138>
 80047ee:	4642      	mov	r2, r8
 80047f0:	464c      	mov	r4, r9
 80047f2:	4314      	orrs	r4, r2
 80047f4:	1e62      	subs	r2, r4, #1
 80047f6:	4194      	sbcs	r4, r2
 80047f8:	18e4      	adds	r4, r4, r3
 80047fa:	429c      	cmp	r4, r3
 80047fc:	4192      	sbcs	r2, r2
 80047fe:	4252      	negs	r2, r2
 8004800:	4692      	mov	sl, r2
 8004802:	448a      	add	sl, r1
 8004804:	4653      	mov	r3, sl
 8004806:	021b      	lsls	r3, r3, #8
 8004808:	d5df      	bpl.n	80047ca <__aeabi_dadd+0x24a>
 800480a:	4b38      	ldr	r3, [pc, #224]	; (80048ec <__aeabi_dadd+0x36c>)
 800480c:	3601      	adds	r6, #1
 800480e:	429e      	cmp	r6, r3
 8004810:	d000      	beq.n	8004814 <__aeabi_dadd+0x294>
 8004812:	e0b3      	b.n	800497c <__aeabi_dadd+0x3fc>
 8004814:	0032      	movs	r2, r6
 8004816:	2400      	movs	r4, #0
 8004818:	2300      	movs	r3, #0
 800481a:	e74d      	b.n	80046b8 <__aeabi_dadd+0x138>
 800481c:	074a      	lsls	r2, r1, #29
 800481e:	08db      	lsrs	r3, r3, #3
 8004820:	4313      	orrs	r3, r2
 8004822:	08c9      	lsrs	r1, r1, #3
 8004824:	001a      	movs	r2, r3
 8004826:	430a      	orrs	r2, r1
 8004828:	d100      	bne.n	800482c <__aeabi_dadd+0x2ac>
 800482a:	e200      	b.n	8004c2e <__aeabi_dadd+0x6ae>
 800482c:	2480      	movs	r4, #128	; 0x80
 800482e:	0324      	lsls	r4, r4, #12
 8004830:	430c      	orrs	r4, r1
 8004832:	0324      	lsls	r4, r4, #12
 8004834:	4a2d      	ldr	r2, [pc, #180]	; (80048ec <__aeabi_dadd+0x36c>)
 8004836:	0b24      	lsrs	r4, r4, #12
 8004838:	e73e      	b.n	80046b8 <__aeabi_dadd+0x138>
 800483a:	0020      	movs	r0, r4
 800483c:	f001 fdb6 	bl	80063ac <__clzsi2>
 8004840:	0003      	movs	r3, r0
 8004842:	3318      	adds	r3, #24
 8004844:	2b1f      	cmp	r3, #31
 8004846:	dc00      	bgt.n	800484a <__aeabi_dadd+0x2ca>
 8004848:	e6f7      	b.n	800463a <__aeabi_dadd+0xba>
 800484a:	0022      	movs	r2, r4
 800484c:	3808      	subs	r0, #8
 800484e:	4082      	lsls	r2, r0
 8004850:	2400      	movs	r4, #0
 8004852:	42b3      	cmp	r3, r6
 8004854:	db00      	blt.n	8004858 <__aeabi_dadd+0x2d8>
 8004856:	e6fc      	b.n	8004652 <__aeabi_dadd+0xd2>
 8004858:	1af6      	subs	r6, r6, r3
 800485a:	4b25      	ldr	r3, [pc, #148]	; (80048f0 <__aeabi_dadd+0x370>)
 800485c:	401a      	ands	r2, r3
 800485e:	4692      	mov	sl, r2
 8004860:	e70a      	b.n	8004678 <__aeabi_dadd+0xf8>
 8004862:	2f00      	cmp	r7, #0
 8004864:	d02b      	beq.n	80048be <__aeabi_dadd+0x33e>
 8004866:	1b97      	subs	r7, r2, r6
 8004868:	2e00      	cmp	r6, #0
 800486a:	d100      	bne.n	800486e <__aeabi_dadd+0x2ee>
 800486c:	e0b8      	b.n	80049e0 <__aeabi_dadd+0x460>
 800486e:	4c1f      	ldr	r4, [pc, #124]	; (80048ec <__aeabi_dadd+0x36c>)
 8004870:	42a2      	cmp	r2, r4
 8004872:	d100      	bne.n	8004876 <__aeabi_dadd+0x2f6>
 8004874:	e11c      	b.n	8004ab0 <__aeabi_dadd+0x530>
 8004876:	2480      	movs	r4, #128	; 0x80
 8004878:	0424      	lsls	r4, r4, #16
 800487a:	4321      	orrs	r1, r4
 800487c:	2f38      	cmp	r7, #56	; 0x38
 800487e:	dd00      	ble.n	8004882 <__aeabi_dadd+0x302>
 8004880:	e11e      	b.n	8004ac0 <__aeabi_dadd+0x540>
 8004882:	2f1f      	cmp	r7, #31
 8004884:	dd00      	ble.n	8004888 <__aeabi_dadd+0x308>
 8004886:	e19e      	b.n	8004bc6 <__aeabi_dadd+0x646>
 8004888:	2620      	movs	r6, #32
 800488a:	000c      	movs	r4, r1
 800488c:	1bf6      	subs	r6, r6, r7
 800488e:	0018      	movs	r0, r3
 8004890:	40b3      	lsls	r3, r6
 8004892:	40b4      	lsls	r4, r6
 8004894:	40f8      	lsrs	r0, r7
 8004896:	1e5e      	subs	r6, r3, #1
 8004898:	41b3      	sbcs	r3, r6
 800489a:	40f9      	lsrs	r1, r7
 800489c:	4304      	orrs	r4, r0
 800489e:	431c      	orrs	r4, r3
 80048a0:	4489      	add	r9, r1
 80048a2:	4444      	add	r4, r8
 80048a4:	4544      	cmp	r4, r8
 80048a6:	419b      	sbcs	r3, r3
 80048a8:	425b      	negs	r3, r3
 80048aa:	444b      	add	r3, r9
 80048ac:	469a      	mov	sl, r3
 80048ae:	0016      	movs	r6, r2
 80048b0:	e7a8      	b.n	8004804 <__aeabi_dadd+0x284>
 80048b2:	4642      	mov	r2, r8
 80048b4:	464c      	mov	r4, r9
 80048b6:	4314      	orrs	r4, r2
 80048b8:	1e62      	subs	r2, r4, #1
 80048ba:	4194      	sbcs	r4, r2
 80048bc:	e6a6      	b.n	800460c <__aeabi_dadd+0x8c>
 80048be:	4c0d      	ldr	r4, [pc, #52]	; (80048f4 <__aeabi_dadd+0x374>)
 80048c0:	1c72      	adds	r2, r6, #1
 80048c2:	4222      	tst	r2, r4
 80048c4:	d000      	beq.n	80048c8 <__aeabi_dadd+0x348>
 80048c6:	e0a8      	b.n	8004a1a <__aeabi_dadd+0x49a>
 80048c8:	000a      	movs	r2, r1
 80048ca:	431a      	orrs	r2, r3
 80048cc:	2e00      	cmp	r6, #0
 80048ce:	d000      	beq.n	80048d2 <__aeabi_dadd+0x352>
 80048d0:	e10a      	b.n	8004ae8 <__aeabi_dadd+0x568>
 80048d2:	2a00      	cmp	r2, #0
 80048d4:	d100      	bne.n	80048d8 <__aeabi_dadd+0x358>
 80048d6:	e15e      	b.n	8004b96 <__aeabi_dadd+0x616>
 80048d8:	464a      	mov	r2, r9
 80048da:	4302      	orrs	r2, r0
 80048dc:	d000      	beq.n	80048e0 <__aeabi_dadd+0x360>
 80048de:	e161      	b.n	8004ba4 <__aeabi_dadd+0x624>
 80048e0:	074a      	lsls	r2, r1, #29
 80048e2:	08db      	lsrs	r3, r3, #3
 80048e4:	4313      	orrs	r3, r2
 80048e6:	08c9      	lsrs	r1, r1, #3
 80048e8:	e77c      	b.n	80047e4 <__aeabi_dadd+0x264>
 80048ea:	46c0      	nop			; (mov r8, r8)
 80048ec:	000007ff 	.word	0x000007ff
 80048f0:	ff7fffff 	.word	0xff7fffff
 80048f4:	000007fe 	.word	0x000007fe
 80048f8:	4ccf      	ldr	r4, [pc, #828]	; (8004c38 <__aeabi_dadd+0x6b8>)
 80048fa:	42a2      	cmp	r2, r4
 80048fc:	d100      	bne.n	8004900 <__aeabi_dadd+0x380>
 80048fe:	e0ce      	b.n	8004a9e <__aeabi_dadd+0x51e>
 8004900:	2480      	movs	r4, #128	; 0x80
 8004902:	0424      	lsls	r4, r4, #16
 8004904:	4321      	orrs	r1, r4
 8004906:	2f38      	cmp	r7, #56	; 0x38
 8004908:	dc5b      	bgt.n	80049c2 <__aeabi_dadd+0x442>
 800490a:	2f1f      	cmp	r7, #31
 800490c:	dd00      	ble.n	8004910 <__aeabi_dadd+0x390>
 800490e:	e0dc      	b.n	8004aca <__aeabi_dadd+0x54a>
 8004910:	2520      	movs	r5, #32
 8004912:	000c      	movs	r4, r1
 8004914:	1bed      	subs	r5, r5, r7
 8004916:	001e      	movs	r6, r3
 8004918:	40ab      	lsls	r3, r5
 800491a:	40ac      	lsls	r4, r5
 800491c:	40fe      	lsrs	r6, r7
 800491e:	1e5d      	subs	r5, r3, #1
 8004920:	41ab      	sbcs	r3, r5
 8004922:	4334      	orrs	r4, r6
 8004924:	40f9      	lsrs	r1, r7
 8004926:	431c      	orrs	r4, r3
 8004928:	464b      	mov	r3, r9
 800492a:	1a5b      	subs	r3, r3, r1
 800492c:	4699      	mov	r9, r3
 800492e:	e04c      	b.n	80049ca <__aeabi_dadd+0x44a>
 8004930:	464a      	mov	r2, r9
 8004932:	1a1c      	subs	r4, r3, r0
 8004934:	1a88      	subs	r0, r1, r2
 8004936:	42a3      	cmp	r3, r4
 8004938:	4192      	sbcs	r2, r2
 800493a:	4252      	negs	r2, r2
 800493c:	4692      	mov	sl, r2
 800493e:	0002      	movs	r2, r0
 8004940:	4650      	mov	r0, sl
 8004942:	1a12      	subs	r2, r2, r0
 8004944:	4692      	mov	sl, r2
 8004946:	0212      	lsls	r2, r2, #8
 8004948:	d478      	bmi.n	8004a3c <__aeabi_dadd+0x4bc>
 800494a:	4653      	mov	r3, sl
 800494c:	4323      	orrs	r3, r4
 800494e:	d000      	beq.n	8004952 <__aeabi_dadd+0x3d2>
 8004950:	e66a      	b.n	8004628 <__aeabi_dadd+0xa8>
 8004952:	2100      	movs	r1, #0
 8004954:	2500      	movs	r5, #0
 8004956:	e745      	b.n	80047e4 <__aeabi_dadd+0x264>
 8004958:	074a      	lsls	r2, r1, #29
 800495a:	08db      	lsrs	r3, r3, #3
 800495c:	4313      	orrs	r3, r2
 800495e:	08c9      	lsrs	r1, r1, #3
 8004960:	e73d      	b.n	80047de <__aeabi_dadd+0x25e>
 8004962:	181c      	adds	r4, r3, r0
 8004964:	429c      	cmp	r4, r3
 8004966:	419b      	sbcs	r3, r3
 8004968:	4449      	add	r1, r9
 800496a:	468a      	mov	sl, r1
 800496c:	425b      	negs	r3, r3
 800496e:	449a      	add	sl, r3
 8004970:	4653      	mov	r3, sl
 8004972:	2601      	movs	r6, #1
 8004974:	021b      	lsls	r3, r3, #8
 8004976:	d400      	bmi.n	800497a <__aeabi_dadd+0x3fa>
 8004978:	e727      	b.n	80047ca <__aeabi_dadd+0x24a>
 800497a:	2602      	movs	r6, #2
 800497c:	4652      	mov	r2, sl
 800497e:	4baf      	ldr	r3, [pc, #700]	; (8004c3c <__aeabi_dadd+0x6bc>)
 8004980:	2101      	movs	r1, #1
 8004982:	401a      	ands	r2, r3
 8004984:	0013      	movs	r3, r2
 8004986:	4021      	ands	r1, r4
 8004988:	0862      	lsrs	r2, r4, #1
 800498a:	430a      	orrs	r2, r1
 800498c:	07dc      	lsls	r4, r3, #31
 800498e:	085b      	lsrs	r3, r3, #1
 8004990:	469a      	mov	sl, r3
 8004992:	4314      	orrs	r4, r2
 8004994:	e670      	b.n	8004678 <__aeabi_dadd+0xf8>
 8004996:	003a      	movs	r2, r7
 8004998:	464c      	mov	r4, r9
 800499a:	3a20      	subs	r2, #32
 800499c:	40d4      	lsrs	r4, r2
 800499e:	46a4      	mov	ip, r4
 80049a0:	2f20      	cmp	r7, #32
 80049a2:	d007      	beq.n	80049b4 <__aeabi_dadd+0x434>
 80049a4:	2240      	movs	r2, #64	; 0x40
 80049a6:	4648      	mov	r0, r9
 80049a8:	1bd2      	subs	r2, r2, r7
 80049aa:	4090      	lsls	r0, r2
 80049ac:	0002      	movs	r2, r0
 80049ae:	4640      	mov	r0, r8
 80049b0:	4310      	orrs	r0, r2
 80049b2:	4680      	mov	r8, r0
 80049b4:	4640      	mov	r0, r8
 80049b6:	1e42      	subs	r2, r0, #1
 80049b8:	4190      	sbcs	r0, r2
 80049ba:	4662      	mov	r2, ip
 80049bc:	0004      	movs	r4, r0
 80049be:	4314      	orrs	r4, r2
 80049c0:	e624      	b.n	800460c <__aeabi_dadd+0x8c>
 80049c2:	4319      	orrs	r1, r3
 80049c4:	000c      	movs	r4, r1
 80049c6:	1e63      	subs	r3, r4, #1
 80049c8:	419c      	sbcs	r4, r3
 80049ca:	4643      	mov	r3, r8
 80049cc:	1b1c      	subs	r4, r3, r4
 80049ce:	45a0      	cmp	r8, r4
 80049d0:	419b      	sbcs	r3, r3
 80049d2:	4649      	mov	r1, r9
 80049d4:	425b      	negs	r3, r3
 80049d6:	1acb      	subs	r3, r1, r3
 80049d8:	469a      	mov	sl, r3
 80049da:	4665      	mov	r5, ip
 80049dc:	0016      	movs	r6, r2
 80049de:	e61b      	b.n	8004618 <__aeabi_dadd+0x98>
 80049e0:	000c      	movs	r4, r1
 80049e2:	431c      	orrs	r4, r3
 80049e4:	d100      	bne.n	80049e8 <__aeabi_dadd+0x468>
 80049e6:	e0c7      	b.n	8004b78 <__aeabi_dadd+0x5f8>
 80049e8:	1e7c      	subs	r4, r7, #1
 80049ea:	2f01      	cmp	r7, #1
 80049ec:	d100      	bne.n	80049f0 <__aeabi_dadd+0x470>
 80049ee:	e0f9      	b.n	8004be4 <__aeabi_dadd+0x664>
 80049f0:	4e91      	ldr	r6, [pc, #580]	; (8004c38 <__aeabi_dadd+0x6b8>)
 80049f2:	42b7      	cmp	r7, r6
 80049f4:	d05c      	beq.n	8004ab0 <__aeabi_dadd+0x530>
 80049f6:	0027      	movs	r7, r4
 80049f8:	e740      	b.n	800487c <__aeabi_dadd+0x2fc>
 80049fa:	2220      	movs	r2, #32
 80049fc:	464c      	mov	r4, r9
 80049fe:	4640      	mov	r0, r8
 8004a00:	1bd2      	subs	r2, r2, r7
 8004a02:	4094      	lsls	r4, r2
 8004a04:	40f8      	lsrs	r0, r7
 8004a06:	4304      	orrs	r4, r0
 8004a08:	4640      	mov	r0, r8
 8004a0a:	4090      	lsls	r0, r2
 8004a0c:	1e42      	subs	r2, r0, #1
 8004a0e:	4190      	sbcs	r0, r2
 8004a10:	464a      	mov	r2, r9
 8004a12:	40fa      	lsrs	r2, r7
 8004a14:	4304      	orrs	r4, r0
 8004a16:	1889      	adds	r1, r1, r2
 8004a18:	e6ee      	b.n	80047f8 <__aeabi_dadd+0x278>
 8004a1a:	4c87      	ldr	r4, [pc, #540]	; (8004c38 <__aeabi_dadd+0x6b8>)
 8004a1c:	42a2      	cmp	r2, r4
 8004a1e:	d100      	bne.n	8004a22 <__aeabi_dadd+0x4a2>
 8004a20:	e6f9      	b.n	8004816 <__aeabi_dadd+0x296>
 8004a22:	1818      	adds	r0, r3, r0
 8004a24:	4298      	cmp	r0, r3
 8004a26:	419b      	sbcs	r3, r3
 8004a28:	4449      	add	r1, r9
 8004a2a:	425b      	negs	r3, r3
 8004a2c:	18cb      	adds	r3, r1, r3
 8004a2e:	07dc      	lsls	r4, r3, #31
 8004a30:	0840      	lsrs	r0, r0, #1
 8004a32:	085b      	lsrs	r3, r3, #1
 8004a34:	469a      	mov	sl, r3
 8004a36:	0016      	movs	r6, r2
 8004a38:	4304      	orrs	r4, r0
 8004a3a:	e6c6      	b.n	80047ca <__aeabi_dadd+0x24a>
 8004a3c:	4642      	mov	r2, r8
 8004a3e:	1ad4      	subs	r4, r2, r3
 8004a40:	45a0      	cmp	r8, r4
 8004a42:	4180      	sbcs	r0, r0
 8004a44:	464b      	mov	r3, r9
 8004a46:	4240      	negs	r0, r0
 8004a48:	1a59      	subs	r1, r3, r1
 8004a4a:	1a0b      	subs	r3, r1, r0
 8004a4c:	469a      	mov	sl, r3
 8004a4e:	4665      	mov	r5, ip
 8004a50:	e5ea      	b.n	8004628 <__aeabi_dadd+0xa8>
 8004a52:	464b      	mov	r3, r9
 8004a54:	464a      	mov	r2, r9
 8004a56:	08c0      	lsrs	r0, r0, #3
 8004a58:	075b      	lsls	r3, r3, #29
 8004a5a:	4665      	mov	r5, ip
 8004a5c:	4303      	orrs	r3, r0
 8004a5e:	08d1      	lsrs	r1, r2, #3
 8004a60:	e6bd      	b.n	80047de <__aeabi_dadd+0x25e>
 8004a62:	2a00      	cmp	r2, #0
 8004a64:	d000      	beq.n	8004a68 <__aeabi_dadd+0x4e8>
 8004a66:	e08e      	b.n	8004b86 <__aeabi_dadd+0x606>
 8004a68:	464b      	mov	r3, r9
 8004a6a:	4303      	orrs	r3, r0
 8004a6c:	d117      	bne.n	8004a9e <__aeabi_dadd+0x51e>
 8004a6e:	2180      	movs	r1, #128	; 0x80
 8004a70:	2500      	movs	r5, #0
 8004a72:	0309      	lsls	r1, r1, #12
 8004a74:	e6da      	b.n	800482c <__aeabi_dadd+0x2ac>
 8004a76:	074a      	lsls	r2, r1, #29
 8004a78:	08db      	lsrs	r3, r3, #3
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	08c9      	lsrs	r1, r1, #3
 8004a7e:	e6d1      	b.n	8004824 <__aeabi_dadd+0x2a4>
 8004a80:	1a1c      	subs	r4, r3, r0
 8004a82:	464a      	mov	r2, r9
 8004a84:	42a3      	cmp	r3, r4
 8004a86:	419b      	sbcs	r3, r3
 8004a88:	1a89      	subs	r1, r1, r2
 8004a8a:	425b      	negs	r3, r3
 8004a8c:	1acb      	subs	r3, r1, r3
 8004a8e:	469a      	mov	sl, r3
 8004a90:	2601      	movs	r6, #1
 8004a92:	e5c1      	b.n	8004618 <__aeabi_dadd+0x98>
 8004a94:	074a      	lsls	r2, r1, #29
 8004a96:	08db      	lsrs	r3, r3, #3
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	08c9      	lsrs	r1, r1, #3
 8004a9c:	e69f      	b.n	80047de <__aeabi_dadd+0x25e>
 8004a9e:	4643      	mov	r3, r8
 8004aa0:	08d8      	lsrs	r0, r3, #3
 8004aa2:	464b      	mov	r3, r9
 8004aa4:	464a      	mov	r2, r9
 8004aa6:	075b      	lsls	r3, r3, #29
 8004aa8:	4665      	mov	r5, ip
 8004aaa:	4303      	orrs	r3, r0
 8004aac:	08d1      	lsrs	r1, r2, #3
 8004aae:	e6b9      	b.n	8004824 <__aeabi_dadd+0x2a4>
 8004ab0:	4643      	mov	r3, r8
 8004ab2:	08d8      	lsrs	r0, r3, #3
 8004ab4:	464b      	mov	r3, r9
 8004ab6:	464a      	mov	r2, r9
 8004ab8:	075b      	lsls	r3, r3, #29
 8004aba:	4303      	orrs	r3, r0
 8004abc:	08d1      	lsrs	r1, r2, #3
 8004abe:	e6b1      	b.n	8004824 <__aeabi_dadd+0x2a4>
 8004ac0:	4319      	orrs	r1, r3
 8004ac2:	000c      	movs	r4, r1
 8004ac4:	1e63      	subs	r3, r4, #1
 8004ac6:	419c      	sbcs	r4, r3
 8004ac8:	e6eb      	b.n	80048a2 <__aeabi_dadd+0x322>
 8004aca:	003c      	movs	r4, r7
 8004acc:	000d      	movs	r5, r1
 8004ace:	3c20      	subs	r4, #32
 8004ad0:	40e5      	lsrs	r5, r4
 8004ad2:	2f20      	cmp	r7, #32
 8004ad4:	d003      	beq.n	8004ade <__aeabi_dadd+0x55e>
 8004ad6:	2440      	movs	r4, #64	; 0x40
 8004ad8:	1be4      	subs	r4, r4, r7
 8004ada:	40a1      	lsls	r1, r4
 8004adc:	430b      	orrs	r3, r1
 8004ade:	001c      	movs	r4, r3
 8004ae0:	1e63      	subs	r3, r4, #1
 8004ae2:	419c      	sbcs	r4, r3
 8004ae4:	432c      	orrs	r4, r5
 8004ae6:	e770      	b.n	80049ca <__aeabi_dadd+0x44a>
 8004ae8:	2a00      	cmp	r2, #0
 8004aea:	d0e1      	beq.n	8004ab0 <__aeabi_dadd+0x530>
 8004aec:	464a      	mov	r2, r9
 8004aee:	4302      	orrs	r2, r0
 8004af0:	d0c1      	beq.n	8004a76 <__aeabi_dadd+0x4f6>
 8004af2:	074a      	lsls	r2, r1, #29
 8004af4:	08db      	lsrs	r3, r3, #3
 8004af6:	4313      	orrs	r3, r2
 8004af8:	2280      	movs	r2, #128	; 0x80
 8004afa:	08c9      	lsrs	r1, r1, #3
 8004afc:	0312      	lsls	r2, r2, #12
 8004afe:	4211      	tst	r1, r2
 8004b00:	d008      	beq.n	8004b14 <__aeabi_dadd+0x594>
 8004b02:	4648      	mov	r0, r9
 8004b04:	08c4      	lsrs	r4, r0, #3
 8004b06:	4214      	tst	r4, r2
 8004b08:	d104      	bne.n	8004b14 <__aeabi_dadd+0x594>
 8004b0a:	4643      	mov	r3, r8
 8004b0c:	0021      	movs	r1, r4
 8004b0e:	08db      	lsrs	r3, r3, #3
 8004b10:	0742      	lsls	r2, r0, #29
 8004b12:	4313      	orrs	r3, r2
 8004b14:	0f5a      	lsrs	r2, r3, #29
 8004b16:	00db      	lsls	r3, r3, #3
 8004b18:	0752      	lsls	r2, r2, #29
 8004b1a:	08db      	lsrs	r3, r3, #3
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	e681      	b.n	8004824 <__aeabi_dadd+0x2a4>
 8004b20:	464b      	mov	r3, r9
 8004b22:	4303      	orrs	r3, r0
 8004b24:	d100      	bne.n	8004b28 <__aeabi_dadd+0x5a8>
 8004b26:	e714      	b.n	8004952 <__aeabi_dadd+0x3d2>
 8004b28:	464b      	mov	r3, r9
 8004b2a:	464a      	mov	r2, r9
 8004b2c:	08c0      	lsrs	r0, r0, #3
 8004b2e:	075b      	lsls	r3, r3, #29
 8004b30:	4665      	mov	r5, ip
 8004b32:	4303      	orrs	r3, r0
 8004b34:	08d1      	lsrs	r1, r2, #3
 8004b36:	e655      	b.n	80047e4 <__aeabi_dadd+0x264>
 8004b38:	1ac4      	subs	r4, r0, r3
 8004b3a:	45a0      	cmp	r8, r4
 8004b3c:	4180      	sbcs	r0, r0
 8004b3e:	464b      	mov	r3, r9
 8004b40:	4240      	negs	r0, r0
 8004b42:	1a59      	subs	r1, r3, r1
 8004b44:	1a0b      	subs	r3, r1, r0
 8004b46:	469a      	mov	sl, r3
 8004b48:	4665      	mov	r5, ip
 8004b4a:	2601      	movs	r6, #1
 8004b4c:	e564      	b.n	8004618 <__aeabi_dadd+0x98>
 8004b4e:	1a1c      	subs	r4, r3, r0
 8004b50:	464a      	mov	r2, r9
 8004b52:	42a3      	cmp	r3, r4
 8004b54:	4180      	sbcs	r0, r0
 8004b56:	1a8a      	subs	r2, r1, r2
 8004b58:	4240      	negs	r0, r0
 8004b5a:	1a12      	subs	r2, r2, r0
 8004b5c:	4692      	mov	sl, r2
 8004b5e:	0212      	lsls	r2, r2, #8
 8004b60:	d549      	bpl.n	8004bf6 <__aeabi_dadd+0x676>
 8004b62:	4642      	mov	r2, r8
 8004b64:	1ad4      	subs	r4, r2, r3
 8004b66:	45a0      	cmp	r8, r4
 8004b68:	4180      	sbcs	r0, r0
 8004b6a:	464b      	mov	r3, r9
 8004b6c:	4240      	negs	r0, r0
 8004b6e:	1a59      	subs	r1, r3, r1
 8004b70:	1a0b      	subs	r3, r1, r0
 8004b72:	469a      	mov	sl, r3
 8004b74:	4665      	mov	r5, ip
 8004b76:	e57f      	b.n	8004678 <__aeabi_dadd+0xf8>
 8004b78:	464b      	mov	r3, r9
 8004b7a:	464a      	mov	r2, r9
 8004b7c:	08c0      	lsrs	r0, r0, #3
 8004b7e:	075b      	lsls	r3, r3, #29
 8004b80:	4303      	orrs	r3, r0
 8004b82:	08d1      	lsrs	r1, r2, #3
 8004b84:	e62b      	b.n	80047de <__aeabi_dadd+0x25e>
 8004b86:	464a      	mov	r2, r9
 8004b88:	08db      	lsrs	r3, r3, #3
 8004b8a:	4302      	orrs	r2, r0
 8004b8c:	d138      	bne.n	8004c00 <__aeabi_dadd+0x680>
 8004b8e:	074a      	lsls	r2, r1, #29
 8004b90:	4313      	orrs	r3, r2
 8004b92:	08c9      	lsrs	r1, r1, #3
 8004b94:	e646      	b.n	8004824 <__aeabi_dadd+0x2a4>
 8004b96:	464b      	mov	r3, r9
 8004b98:	464a      	mov	r2, r9
 8004b9a:	08c0      	lsrs	r0, r0, #3
 8004b9c:	075b      	lsls	r3, r3, #29
 8004b9e:	4303      	orrs	r3, r0
 8004ba0:	08d1      	lsrs	r1, r2, #3
 8004ba2:	e61f      	b.n	80047e4 <__aeabi_dadd+0x264>
 8004ba4:	181c      	adds	r4, r3, r0
 8004ba6:	429c      	cmp	r4, r3
 8004ba8:	419b      	sbcs	r3, r3
 8004baa:	4449      	add	r1, r9
 8004bac:	468a      	mov	sl, r1
 8004bae:	425b      	negs	r3, r3
 8004bb0:	449a      	add	sl, r3
 8004bb2:	4653      	mov	r3, sl
 8004bb4:	021b      	lsls	r3, r3, #8
 8004bb6:	d400      	bmi.n	8004bba <__aeabi_dadd+0x63a>
 8004bb8:	e607      	b.n	80047ca <__aeabi_dadd+0x24a>
 8004bba:	4652      	mov	r2, sl
 8004bbc:	4b1f      	ldr	r3, [pc, #124]	; (8004c3c <__aeabi_dadd+0x6bc>)
 8004bbe:	2601      	movs	r6, #1
 8004bc0:	401a      	ands	r2, r3
 8004bc2:	4692      	mov	sl, r2
 8004bc4:	e601      	b.n	80047ca <__aeabi_dadd+0x24a>
 8004bc6:	003c      	movs	r4, r7
 8004bc8:	000e      	movs	r6, r1
 8004bca:	3c20      	subs	r4, #32
 8004bcc:	40e6      	lsrs	r6, r4
 8004bce:	2f20      	cmp	r7, #32
 8004bd0:	d003      	beq.n	8004bda <__aeabi_dadd+0x65a>
 8004bd2:	2440      	movs	r4, #64	; 0x40
 8004bd4:	1be4      	subs	r4, r4, r7
 8004bd6:	40a1      	lsls	r1, r4
 8004bd8:	430b      	orrs	r3, r1
 8004bda:	001c      	movs	r4, r3
 8004bdc:	1e63      	subs	r3, r4, #1
 8004bde:	419c      	sbcs	r4, r3
 8004be0:	4334      	orrs	r4, r6
 8004be2:	e65e      	b.n	80048a2 <__aeabi_dadd+0x322>
 8004be4:	4443      	add	r3, r8
 8004be6:	4283      	cmp	r3, r0
 8004be8:	4180      	sbcs	r0, r0
 8004bea:	4449      	add	r1, r9
 8004bec:	468a      	mov	sl, r1
 8004bee:	4240      	negs	r0, r0
 8004bf0:	001c      	movs	r4, r3
 8004bf2:	4482      	add	sl, r0
 8004bf4:	e6bc      	b.n	8004970 <__aeabi_dadd+0x3f0>
 8004bf6:	4653      	mov	r3, sl
 8004bf8:	4323      	orrs	r3, r4
 8004bfa:	d100      	bne.n	8004bfe <__aeabi_dadd+0x67e>
 8004bfc:	e6a9      	b.n	8004952 <__aeabi_dadd+0x3d2>
 8004bfe:	e5e4      	b.n	80047ca <__aeabi_dadd+0x24a>
 8004c00:	074a      	lsls	r2, r1, #29
 8004c02:	4313      	orrs	r3, r2
 8004c04:	2280      	movs	r2, #128	; 0x80
 8004c06:	08c9      	lsrs	r1, r1, #3
 8004c08:	0312      	lsls	r2, r2, #12
 8004c0a:	4211      	tst	r1, r2
 8004c0c:	d009      	beq.n	8004c22 <__aeabi_dadd+0x6a2>
 8004c0e:	4648      	mov	r0, r9
 8004c10:	08c4      	lsrs	r4, r0, #3
 8004c12:	4214      	tst	r4, r2
 8004c14:	d105      	bne.n	8004c22 <__aeabi_dadd+0x6a2>
 8004c16:	4643      	mov	r3, r8
 8004c18:	4665      	mov	r5, ip
 8004c1a:	0021      	movs	r1, r4
 8004c1c:	08db      	lsrs	r3, r3, #3
 8004c1e:	0742      	lsls	r2, r0, #29
 8004c20:	4313      	orrs	r3, r2
 8004c22:	0f5a      	lsrs	r2, r3, #29
 8004c24:	00db      	lsls	r3, r3, #3
 8004c26:	08db      	lsrs	r3, r3, #3
 8004c28:	0752      	lsls	r2, r2, #29
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	e5fa      	b.n	8004824 <__aeabi_dadd+0x2a4>
 8004c2e:	2300      	movs	r3, #0
 8004c30:	4a01      	ldr	r2, [pc, #4]	; (8004c38 <__aeabi_dadd+0x6b8>)
 8004c32:	001c      	movs	r4, r3
 8004c34:	e540      	b.n	80046b8 <__aeabi_dadd+0x138>
 8004c36:	46c0      	nop			; (mov r8, r8)
 8004c38:	000007ff 	.word	0x000007ff
 8004c3c:	ff7fffff 	.word	0xff7fffff

08004c40 <__aeabi_ddiv>:
 8004c40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c42:	4657      	mov	r7, sl
 8004c44:	464e      	mov	r6, r9
 8004c46:	4645      	mov	r5, r8
 8004c48:	46de      	mov	lr, fp
 8004c4a:	b5e0      	push	{r5, r6, r7, lr}
 8004c4c:	030c      	lsls	r4, r1, #12
 8004c4e:	001f      	movs	r7, r3
 8004c50:	004b      	lsls	r3, r1, #1
 8004c52:	4681      	mov	r9, r0
 8004c54:	4692      	mov	sl, r2
 8004c56:	0005      	movs	r5, r0
 8004c58:	b085      	sub	sp, #20
 8004c5a:	0b24      	lsrs	r4, r4, #12
 8004c5c:	0d5b      	lsrs	r3, r3, #21
 8004c5e:	0fce      	lsrs	r6, r1, #31
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d100      	bne.n	8004c66 <__aeabi_ddiv+0x26>
 8004c64:	e152      	b.n	8004f0c <__aeabi_ddiv+0x2cc>
 8004c66:	4ad2      	ldr	r2, [pc, #840]	; (8004fb0 <__aeabi_ddiv+0x370>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d100      	bne.n	8004c6e <__aeabi_ddiv+0x2e>
 8004c6c:	e16e      	b.n	8004f4c <__aeabi_ddiv+0x30c>
 8004c6e:	0f42      	lsrs	r2, r0, #29
 8004c70:	00e4      	lsls	r4, r4, #3
 8004c72:	4314      	orrs	r4, r2
 8004c74:	2280      	movs	r2, #128	; 0x80
 8004c76:	0412      	lsls	r2, r2, #16
 8004c78:	4322      	orrs	r2, r4
 8004c7a:	4690      	mov	r8, r2
 8004c7c:	4acd      	ldr	r2, [pc, #820]	; (8004fb4 <__aeabi_ddiv+0x374>)
 8004c7e:	00c5      	lsls	r5, r0, #3
 8004c80:	4693      	mov	fp, r2
 8004c82:	449b      	add	fp, r3
 8004c84:	2300      	movs	r3, #0
 8004c86:	4699      	mov	r9, r3
 8004c88:	9300      	str	r3, [sp, #0]
 8004c8a:	033c      	lsls	r4, r7, #12
 8004c8c:	007b      	lsls	r3, r7, #1
 8004c8e:	4650      	mov	r0, sl
 8004c90:	0b24      	lsrs	r4, r4, #12
 8004c92:	0d5b      	lsrs	r3, r3, #21
 8004c94:	0fff      	lsrs	r7, r7, #31
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d100      	bne.n	8004c9c <__aeabi_ddiv+0x5c>
 8004c9a:	e11a      	b.n	8004ed2 <__aeabi_ddiv+0x292>
 8004c9c:	4ac4      	ldr	r2, [pc, #784]	; (8004fb0 <__aeabi_ddiv+0x370>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d100      	bne.n	8004ca4 <__aeabi_ddiv+0x64>
 8004ca2:	e15e      	b.n	8004f62 <__aeabi_ddiv+0x322>
 8004ca4:	0f42      	lsrs	r2, r0, #29
 8004ca6:	00e4      	lsls	r4, r4, #3
 8004ca8:	4322      	orrs	r2, r4
 8004caa:	2480      	movs	r4, #128	; 0x80
 8004cac:	0424      	lsls	r4, r4, #16
 8004cae:	4314      	orrs	r4, r2
 8004cb0:	4ac0      	ldr	r2, [pc, #768]	; (8004fb4 <__aeabi_ddiv+0x374>)
 8004cb2:	00c1      	lsls	r1, r0, #3
 8004cb4:	4694      	mov	ip, r2
 8004cb6:	465a      	mov	r2, fp
 8004cb8:	4463      	add	r3, ip
 8004cba:	1ad3      	subs	r3, r2, r3
 8004cbc:	469b      	mov	fp, r3
 8004cbe:	2000      	movs	r0, #0
 8004cc0:	0033      	movs	r3, r6
 8004cc2:	407b      	eors	r3, r7
 8004cc4:	469a      	mov	sl, r3
 8004cc6:	464b      	mov	r3, r9
 8004cc8:	2b0f      	cmp	r3, #15
 8004cca:	d827      	bhi.n	8004d1c <__aeabi_ddiv+0xdc>
 8004ccc:	4aba      	ldr	r2, [pc, #744]	; (8004fb8 <__aeabi_ddiv+0x378>)
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	58d3      	ldr	r3, [r2, r3]
 8004cd2:	469f      	mov	pc, r3
 8004cd4:	46b2      	mov	sl, r6
 8004cd6:	9b00      	ldr	r3, [sp, #0]
 8004cd8:	2b02      	cmp	r3, #2
 8004cda:	d016      	beq.n	8004d0a <__aeabi_ddiv+0xca>
 8004cdc:	2b03      	cmp	r3, #3
 8004cde:	d100      	bne.n	8004ce2 <__aeabi_ddiv+0xa2>
 8004ce0:	e287      	b.n	80051f2 <__aeabi_ddiv+0x5b2>
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d000      	beq.n	8004ce8 <__aeabi_ddiv+0xa8>
 8004ce6:	e0d5      	b.n	8004e94 <__aeabi_ddiv+0x254>
 8004ce8:	2300      	movs	r3, #0
 8004cea:	2200      	movs	r2, #0
 8004cec:	2500      	movs	r5, #0
 8004cee:	051b      	lsls	r3, r3, #20
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	4652      	mov	r2, sl
 8004cf4:	07d2      	lsls	r2, r2, #31
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	0028      	movs	r0, r5
 8004cfa:	0019      	movs	r1, r3
 8004cfc:	b005      	add	sp, #20
 8004cfe:	bcf0      	pop	{r4, r5, r6, r7}
 8004d00:	46bb      	mov	fp, r7
 8004d02:	46b2      	mov	sl, r6
 8004d04:	46a9      	mov	r9, r5
 8004d06:	46a0      	mov	r8, r4
 8004d08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	2500      	movs	r5, #0
 8004d0e:	4ba8      	ldr	r3, [pc, #672]	; (8004fb0 <__aeabi_ddiv+0x370>)
 8004d10:	e7ed      	b.n	8004cee <__aeabi_ddiv+0xae>
 8004d12:	46ba      	mov	sl, r7
 8004d14:	46a0      	mov	r8, r4
 8004d16:	000d      	movs	r5, r1
 8004d18:	9000      	str	r0, [sp, #0]
 8004d1a:	e7dc      	b.n	8004cd6 <__aeabi_ddiv+0x96>
 8004d1c:	4544      	cmp	r4, r8
 8004d1e:	d200      	bcs.n	8004d22 <__aeabi_ddiv+0xe2>
 8004d20:	e1c4      	b.n	80050ac <__aeabi_ddiv+0x46c>
 8004d22:	d100      	bne.n	8004d26 <__aeabi_ddiv+0xe6>
 8004d24:	e1bf      	b.n	80050a6 <__aeabi_ddiv+0x466>
 8004d26:	2301      	movs	r3, #1
 8004d28:	425b      	negs	r3, r3
 8004d2a:	469c      	mov	ip, r3
 8004d2c:	002e      	movs	r6, r5
 8004d2e:	4640      	mov	r0, r8
 8004d30:	2500      	movs	r5, #0
 8004d32:	44e3      	add	fp, ip
 8004d34:	0223      	lsls	r3, r4, #8
 8004d36:	0e0c      	lsrs	r4, r1, #24
 8004d38:	431c      	orrs	r4, r3
 8004d3a:	0c1b      	lsrs	r3, r3, #16
 8004d3c:	4699      	mov	r9, r3
 8004d3e:	0423      	lsls	r3, r4, #16
 8004d40:	020a      	lsls	r2, r1, #8
 8004d42:	0c1f      	lsrs	r7, r3, #16
 8004d44:	4649      	mov	r1, r9
 8004d46:	9200      	str	r2, [sp, #0]
 8004d48:	9701      	str	r7, [sp, #4]
 8004d4a:	f7fe fa25 	bl	8003198 <__aeabi_uidivmod>
 8004d4e:	0002      	movs	r2, r0
 8004d50:	437a      	muls	r2, r7
 8004d52:	040b      	lsls	r3, r1, #16
 8004d54:	0c31      	lsrs	r1, r6, #16
 8004d56:	4680      	mov	r8, r0
 8004d58:	4319      	orrs	r1, r3
 8004d5a:	428a      	cmp	r2, r1
 8004d5c:	d907      	bls.n	8004d6e <__aeabi_ddiv+0x12e>
 8004d5e:	2301      	movs	r3, #1
 8004d60:	425b      	negs	r3, r3
 8004d62:	469c      	mov	ip, r3
 8004d64:	1909      	adds	r1, r1, r4
 8004d66:	44e0      	add	r8, ip
 8004d68:	428c      	cmp	r4, r1
 8004d6a:	d800      	bhi.n	8004d6e <__aeabi_ddiv+0x12e>
 8004d6c:	e201      	b.n	8005172 <__aeabi_ddiv+0x532>
 8004d6e:	1a88      	subs	r0, r1, r2
 8004d70:	4649      	mov	r1, r9
 8004d72:	f7fe fa11 	bl	8003198 <__aeabi_uidivmod>
 8004d76:	9a01      	ldr	r2, [sp, #4]
 8004d78:	0436      	lsls	r6, r6, #16
 8004d7a:	4342      	muls	r2, r0
 8004d7c:	0409      	lsls	r1, r1, #16
 8004d7e:	0c36      	lsrs	r6, r6, #16
 8004d80:	0003      	movs	r3, r0
 8004d82:	430e      	orrs	r6, r1
 8004d84:	42b2      	cmp	r2, r6
 8004d86:	d904      	bls.n	8004d92 <__aeabi_ddiv+0x152>
 8004d88:	1936      	adds	r6, r6, r4
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	42b4      	cmp	r4, r6
 8004d8e:	d800      	bhi.n	8004d92 <__aeabi_ddiv+0x152>
 8004d90:	e1e9      	b.n	8005166 <__aeabi_ddiv+0x526>
 8004d92:	1ab0      	subs	r0, r6, r2
 8004d94:	4642      	mov	r2, r8
 8004d96:	9e00      	ldr	r6, [sp, #0]
 8004d98:	0412      	lsls	r2, r2, #16
 8004d9a:	431a      	orrs	r2, r3
 8004d9c:	0c33      	lsrs	r3, r6, #16
 8004d9e:	001f      	movs	r7, r3
 8004da0:	0c11      	lsrs	r1, r2, #16
 8004da2:	4690      	mov	r8, r2
 8004da4:	9302      	str	r3, [sp, #8]
 8004da6:	0413      	lsls	r3, r2, #16
 8004da8:	0432      	lsls	r2, r6, #16
 8004daa:	0c16      	lsrs	r6, r2, #16
 8004dac:	0032      	movs	r2, r6
 8004dae:	0c1b      	lsrs	r3, r3, #16
 8004db0:	435a      	muls	r2, r3
 8004db2:	9603      	str	r6, [sp, #12]
 8004db4:	437b      	muls	r3, r7
 8004db6:	434e      	muls	r6, r1
 8004db8:	4379      	muls	r1, r7
 8004dba:	0c17      	lsrs	r7, r2, #16
 8004dbc:	46bc      	mov	ip, r7
 8004dbe:	199b      	adds	r3, r3, r6
 8004dc0:	4463      	add	r3, ip
 8004dc2:	429e      	cmp	r6, r3
 8004dc4:	d903      	bls.n	8004dce <__aeabi_ddiv+0x18e>
 8004dc6:	2680      	movs	r6, #128	; 0x80
 8004dc8:	0276      	lsls	r6, r6, #9
 8004dca:	46b4      	mov	ip, r6
 8004dcc:	4461      	add	r1, ip
 8004dce:	0c1e      	lsrs	r6, r3, #16
 8004dd0:	1871      	adds	r1, r6, r1
 8004dd2:	0416      	lsls	r6, r2, #16
 8004dd4:	041b      	lsls	r3, r3, #16
 8004dd6:	0c36      	lsrs	r6, r6, #16
 8004dd8:	199e      	adds	r6, r3, r6
 8004dda:	4288      	cmp	r0, r1
 8004ddc:	d302      	bcc.n	8004de4 <__aeabi_ddiv+0x1a4>
 8004dde:	d112      	bne.n	8004e06 <__aeabi_ddiv+0x1c6>
 8004de0:	42b5      	cmp	r5, r6
 8004de2:	d210      	bcs.n	8004e06 <__aeabi_ddiv+0x1c6>
 8004de4:	4643      	mov	r3, r8
 8004de6:	1e5a      	subs	r2, r3, #1
 8004de8:	9b00      	ldr	r3, [sp, #0]
 8004dea:	469c      	mov	ip, r3
 8004dec:	4465      	add	r5, ip
 8004dee:	001f      	movs	r7, r3
 8004df0:	429d      	cmp	r5, r3
 8004df2:	419b      	sbcs	r3, r3
 8004df4:	425b      	negs	r3, r3
 8004df6:	191b      	adds	r3, r3, r4
 8004df8:	18c0      	adds	r0, r0, r3
 8004dfa:	4284      	cmp	r4, r0
 8004dfc:	d200      	bcs.n	8004e00 <__aeabi_ddiv+0x1c0>
 8004dfe:	e19e      	b.n	800513e <__aeabi_ddiv+0x4fe>
 8004e00:	d100      	bne.n	8004e04 <__aeabi_ddiv+0x1c4>
 8004e02:	e199      	b.n	8005138 <__aeabi_ddiv+0x4f8>
 8004e04:	4690      	mov	r8, r2
 8004e06:	1bae      	subs	r6, r5, r6
 8004e08:	42b5      	cmp	r5, r6
 8004e0a:	41ad      	sbcs	r5, r5
 8004e0c:	1a40      	subs	r0, r0, r1
 8004e0e:	426d      	negs	r5, r5
 8004e10:	1b40      	subs	r0, r0, r5
 8004e12:	4284      	cmp	r4, r0
 8004e14:	d100      	bne.n	8004e18 <__aeabi_ddiv+0x1d8>
 8004e16:	e1d2      	b.n	80051be <__aeabi_ddiv+0x57e>
 8004e18:	4649      	mov	r1, r9
 8004e1a:	f7fe f9bd 	bl	8003198 <__aeabi_uidivmod>
 8004e1e:	9a01      	ldr	r2, [sp, #4]
 8004e20:	040b      	lsls	r3, r1, #16
 8004e22:	4342      	muls	r2, r0
 8004e24:	0c31      	lsrs	r1, r6, #16
 8004e26:	0005      	movs	r5, r0
 8004e28:	4319      	orrs	r1, r3
 8004e2a:	428a      	cmp	r2, r1
 8004e2c:	d900      	bls.n	8004e30 <__aeabi_ddiv+0x1f0>
 8004e2e:	e16c      	b.n	800510a <__aeabi_ddiv+0x4ca>
 8004e30:	1a88      	subs	r0, r1, r2
 8004e32:	4649      	mov	r1, r9
 8004e34:	f7fe f9b0 	bl	8003198 <__aeabi_uidivmod>
 8004e38:	9a01      	ldr	r2, [sp, #4]
 8004e3a:	0436      	lsls	r6, r6, #16
 8004e3c:	4342      	muls	r2, r0
 8004e3e:	0409      	lsls	r1, r1, #16
 8004e40:	0c36      	lsrs	r6, r6, #16
 8004e42:	0003      	movs	r3, r0
 8004e44:	430e      	orrs	r6, r1
 8004e46:	42b2      	cmp	r2, r6
 8004e48:	d900      	bls.n	8004e4c <__aeabi_ddiv+0x20c>
 8004e4a:	e153      	b.n	80050f4 <__aeabi_ddiv+0x4b4>
 8004e4c:	9803      	ldr	r0, [sp, #12]
 8004e4e:	1ab6      	subs	r6, r6, r2
 8004e50:	0002      	movs	r2, r0
 8004e52:	042d      	lsls	r5, r5, #16
 8004e54:	431d      	orrs	r5, r3
 8004e56:	9f02      	ldr	r7, [sp, #8]
 8004e58:	042b      	lsls	r3, r5, #16
 8004e5a:	0c1b      	lsrs	r3, r3, #16
 8004e5c:	435a      	muls	r2, r3
 8004e5e:	437b      	muls	r3, r7
 8004e60:	469c      	mov	ip, r3
 8004e62:	0c29      	lsrs	r1, r5, #16
 8004e64:	4348      	muls	r0, r1
 8004e66:	0c13      	lsrs	r3, r2, #16
 8004e68:	4484      	add	ip, r0
 8004e6a:	4463      	add	r3, ip
 8004e6c:	4379      	muls	r1, r7
 8004e6e:	4298      	cmp	r0, r3
 8004e70:	d903      	bls.n	8004e7a <__aeabi_ddiv+0x23a>
 8004e72:	2080      	movs	r0, #128	; 0x80
 8004e74:	0240      	lsls	r0, r0, #9
 8004e76:	4684      	mov	ip, r0
 8004e78:	4461      	add	r1, ip
 8004e7a:	0c18      	lsrs	r0, r3, #16
 8004e7c:	0412      	lsls	r2, r2, #16
 8004e7e:	041b      	lsls	r3, r3, #16
 8004e80:	0c12      	lsrs	r2, r2, #16
 8004e82:	1840      	adds	r0, r0, r1
 8004e84:	189b      	adds	r3, r3, r2
 8004e86:	4286      	cmp	r6, r0
 8004e88:	d200      	bcs.n	8004e8c <__aeabi_ddiv+0x24c>
 8004e8a:	e100      	b.n	800508e <__aeabi_ddiv+0x44e>
 8004e8c:	d100      	bne.n	8004e90 <__aeabi_ddiv+0x250>
 8004e8e:	e0fb      	b.n	8005088 <__aeabi_ddiv+0x448>
 8004e90:	2301      	movs	r3, #1
 8004e92:	431d      	orrs	r5, r3
 8004e94:	4b49      	ldr	r3, [pc, #292]	; (8004fbc <__aeabi_ddiv+0x37c>)
 8004e96:	445b      	add	r3, fp
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	dc00      	bgt.n	8004e9e <__aeabi_ddiv+0x25e>
 8004e9c:	e0aa      	b.n	8004ff4 <__aeabi_ddiv+0x3b4>
 8004e9e:	076a      	lsls	r2, r5, #29
 8004ea0:	d000      	beq.n	8004ea4 <__aeabi_ddiv+0x264>
 8004ea2:	e13d      	b.n	8005120 <__aeabi_ddiv+0x4e0>
 8004ea4:	08e9      	lsrs	r1, r5, #3
 8004ea6:	4642      	mov	r2, r8
 8004ea8:	01d2      	lsls	r2, r2, #7
 8004eaa:	d506      	bpl.n	8004eba <__aeabi_ddiv+0x27a>
 8004eac:	4642      	mov	r2, r8
 8004eae:	4b44      	ldr	r3, [pc, #272]	; (8004fc0 <__aeabi_ddiv+0x380>)
 8004eb0:	401a      	ands	r2, r3
 8004eb2:	2380      	movs	r3, #128	; 0x80
 8004eb4:	4690      	mov	r8, r2
 8004eb6:	00db      	lsls	r3, r3, #3
 8004eb8:	445b      	add	r3, fp
 8004eba:	4a42      	ldr	r2, [pc, #264]	; (8004fc4 <__aeabi_ddiv+0x384>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	dd00      	ble.n	8004ec2 <__aeabi_ddiv+0x282>
 8004ec0:	e723      	b.n	8004d0a <__aeabi_ddiv+0xca>
 8004ec2:	4642      	mov	r2, r8
 8004ec4:	055b      	lsls	r3, r3, #21
 8004ec6:	0755      	lsls	r5, r2, #29
 8004ec8:	0252      	lsls	r2, r2, #9
 8004eca:	430d      	orrs	r5, r1
 8004ecc:	0b12      	lsrs	r2, r2, #12
 8004ece:	0d5b      	lsrs	r3, r3, #21
 8004ed0:	e70d      	b.n	8004cee <__aeabi_ddiv+0xae>
 8004ed2:	4651      	mov	r1, sl
 8004ed4:	4321      	orrs	r1, r4
 8004ed6:	d100      	bne.n	8004eda <__aeabi_ddiv+0x29a>
 8004ed8:	e07c      	b.n	8004fd4 <__aeabi_ddiv+0x394>
 8004eda:	2c00      	cmp	r4, #0
 8004edc:	d100      	bne.n	8004ee0 <__aeabi_ddiv+0x2a0>
 8004ede:	e0fb      	b.n	80050d8 <__aeabi_ddiv+0x498>
 8004ee0:	0020      	movs	r0, r4
 8004ee2:	f001 fa63 	bl	80063ac <__clzsi2>
 8004ee6:	0002      	movs	r2, r0
 8004ee8:	3a0b      	subs	r2, #11
 8004eea:	231d      	movs	r3, #29
 8004eec:	1a9b      	subs	r3, r3, r2
 8004eee:	4652      	mov	r2, sl
 8004ef0:	0001      	movs	r1, r0
 8004ef2:	40da      	lsrs	r2, r3
 8004ef4:	4653      	mov	r3, sl
 8004ef6:	3908      	subs	r1, #8
 8004ef8:	408b      	lsls	r3, r1
 8004efa:	408c      	lsls	r4, r1
 8004efc:	0019      	movs	r1, r3
 8004efe:	4314      	orrs	r4, r2
 8004f00:	4b31      	ldr	r3, [pc, #196]	; (8004fc8 <__aeabi_ddiv+0x388>)
 8004f02:	4458      	add	r0, fp
 8004f04:	469b      	mov	fp, r3
 8004f06:	4483      	add	fp, r0
 8004f08:	2000      	movs	r0, #0
 8004f0a:	e6d9      	b.n	8004cc0 <__aeabi_ddiv+0x80>
 8004f0c:	0003      	movs	r3, r0
 8004f0e:	4323      	orrs	r3, r4
 8004f10:	4698      	mov	r8, r3
 8004f12:	d044      	beq.n	8004f9e <__aeabi_ddiv+0x35e>
 8004f14:	2c00      	cmp	r4, #0
 8004f16:	d100      	bne.n	8004f1a <__aeabi_ddiv+0x2da>
 8004f18:	e0cf      	b.n	80050ba <__aeabi_ddiv+0x47a>
 8004f1a:	0020      	movs	r0, r4
 8004f1c:	f001 fa46 	bl	80063ac <__clzsi2>
 8004f20:	0001      	movs	r1, r0
 8004f22:	0002      	movs	r2, r0
 8004f24:	390b      	subs	r1, #11
 8004f26:	231d      	movs	r3, #29
 8004f28:	1a5b      	subs	r3, r3, r1
 8004f2a:	4649      	mov	r1, r9
 8004f2c:	0010      	movs	r0, r2
 8004f2e:	40d9      	lsrs	r1, r3
 8004f30:	3808      	subs	r0, #8
 8004f32:	4084      	lsls	r4, r0
 8004f34:	000b      	movs	r3, r1
 8004f36:	464d      	mov	r5, r9
 8004f38:	4323      	orrs	r3, r4
 8004f3a:	4698      	mov	r8, r3
 8004f3c:	4085      	lsls	r5, r0
 8004f3e:	4b23      	ldr	r3, [pc, #140]	; (8004fcc <__aeabi_ddiv+0x38c>)
 8004f40:	1a9b      	subs	r3, r3, r2
 8004f42:	469b      	mov	fp, r3
 8004f44:	2300      	movs	r3, #0
 8004f46:	4699      	mov	r9, r3
 8004f48:	9300      	str	r3, [sp, #0]
 8004f4a:	e69e      	b.n	8004c8a <__aeabi_ddiv+0x4a>
 8004f4c:	0002      	movs	r2, r0
 8004f4e:	4322      	orrs	r2, r4
 8004f50:	4690      	mov	r8, r2
 8004f52:	d11d      	bne.n	8004f90 <__aeabi_ddiv+0x350>
 8004f54:	2208      	movs	r2, #8
 8004f56:	469b      	mov	fp, r3
 8004f58:	2302      	movs	r3, #2
 8004f5a:	2500      	movs	r5, #0
 8004f5c:	4691      	mov	r9, r2
 8004f5e:	9300      	str	r3, [sp, #0]
 8004f60:	e693      	b.n	8004c8a <__aeabi_ddiv+0x4a>
 8004f62:	4651      	mov	r1, sl
 8004f64:	4321      	orrs	r1, r4
 8004f66:	d109      	bne.n	8004f7c <__aeabi_ddiv+0x33c>
 8004f68:	2302      	movs	r3, #2
 8004f6a:	464a      	mov	r2, r9
 8004f6c:	431a      	orrs	r2, r3
 8004f6e:	4b18      	ldr	r3, [pc, #96]	; (8004fd0 <__aeabi_ddiv+0x390>)
 8004f70:	4691      	mov	r9, r2
 8004f72:	469c      	mov	ip, r3
 8004f74:	2400      	movs	r4, #0
 8004f76:	2002      	movs	r0, #2
 8004f78:	44e3      	add	fp, ip
 8004f7a:	e6a1      	b.n	8004cc0 <__aeabi_ddiv+0x80>
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	464a      	mov	r2, r9
 8004f80:	431a      	orrs	r2, r3
 8004f82:	4b13      	ldr	r3, [pc, #76]	; (8004fd0 <__aeabi_ddiv+0x390>)
 8004f84:	4691      	mov	r9, r2
 8004f86:	469c      	mov	ip, r3
 8004f88:	4651      	mov	r1, sl
 8004f8a:	2003      	movs	r0, #3
 8004f8c:	44e3      	add	fp, ip
 8004f8e:	e697      	b.n	8004cc0 <__aeabi_ddiv+0x80>
 8004f90:	220c      	movs	r2, #12
 8004f92:	469b      	mov	fp, r3
 8004f94:	2303      	movs	r3, #3
 8004f96:	46a0      	mov	r8, r4
 8004f98:	4691      	mov	r9, r2
 8004f9a:	9300      	str	r3, [sp, #0]
 8004f9c:	e675      	b.n	8004c8a <__aeabi_ddiv+0x4a>
 8004f9e:	2304      	movs	r3, #4
 8004fa0:	4699      	mov	r9, r3
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	469b      	mov	fp, r3
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	2500      	movs	r5, #0
 8004faa:	9300      	str	r3, [sp, #0]
 8004fac:	e66d      	b.n	8004c8a <__aeabi_ddiv+0x4a>
 8004fae:	46c0      	nop			; (mov r8, r8)
 8004fb0:	000007ff 	.word	0x000007ff
 8004fb4:	fffffc01 	.word	0xfffffc01
 8004fb8:	08015a08 	.word	0x08015a08
 8004fbc:	000003ff 	.word	0x000003ff
 8004fc0:	feffffff 	.word	0xfeffffff
 8004fc4:	000007fe 	.word	0x000007fe
 8004fc8:	000003f3 	.word	0x000003f3
 8004fcc:	fffffc0d 	.word	0xfffffc0d
 8004fd0:	fffff801 	.word	0xfffff801
 8004fd4:	464a      	mov	r2, r9
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	431a      	orrs	r2, r3
 8004fda:	4691      	mov	r9, r2
 8004fdc:	2400      	movs	r4, #0
 8004fde:	2001      	movs	r0, #1
 8004fe0:	e66e      	b.n	8004cc0 <__aeabi_ddiv+0x80>
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	2280      	movs	r2, #128	; 0x80
 8004fe6:	469a      	mov	sl, r3
 8004fe8:	2500      	movs	r5, #0
 8004fea:	4b88      	ldr	r3, [pc, #544]	; (800520c <__aeabi_ddiv+0x5cc>)
 8004fec:	0312      	lsls	r2, r2, #12
 8004fee:	e67e      	b.n	8004cee <__aeabi_ddiv+0xae>
 8004ff0:	2501      	movs	r5, #1
 8004ff2:	426d      	negs	r5, r5
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	1ad2      	subs	r2, r2, r3
 8004ff8:	2a38      	cmp	r2, #56	; 0x38
 8004ffa:	dd00      	ble.n	8004ffe <__aeabi_ddiv+0x3be>
 8004ffc:	e674      	b.n	8004ce8 <__aeabi_ddiv+0xa8>
 8004ffe:	2a1f      	cmp	r2, #31
 8005000:	dc00      	bgt.n	8005004 <__aeabi_ddiv+0x3c4>
 8005002:	e0bd      	b.n	8005180 <__aeabi_ddiv+0x540>
 8005004:	211f      	movs	r1, #31
 8005006:	4249      	negs	r1, r1
 8005008:	1acb      	subs	r3, r1, r3
 800500a:	4641      	mov	r1, r8
 800500c:	40d9      	lsrs	r1, r3
 800500e:	000b      	movs	r3, r1
 8005010:	2a20      	cmp	r2, #32
 8005012:	d004      	beq.n	800501e <__aeabi_ddiv+0x3de>
 8005014:	4641      	mov	r1, r8
 8005016:	4a7e      	ldr	r2, [pc, #504]	; (8005210 <__aeabi_ddiv+0x5d0>)
 8005018:	445a      	add	r2, fp
 800501a:	4091      	lsls	r1, r2
 800501c:	430d      	orrs	r5, r1
 800501e:	0029      	movs	r1, r5
 8005020:	1e4a      	subs	r2, r1, #1
 8005022:	4191      	sbcs	r1, r2
 8005024:	4319      	orrs	r1, r3
 8005026:	2307      	movs	r3, #7
 8005028:	001d      	movs	r5, r3
 800502a:	2200      	movs	r2, #0
 800502c:	400d      	ands	r5, r1
 800502e:	420b      	tst	r3, r1
 8005030:	d100      	bne.n	8005034 <__aeabi_ddiv+0x3f4>
 8005032:	e0d0      	b.n	80051d6 <__aeabi_ddiv+0x596>
 8005034:	220f      	movs	r2, #15
 8005036:	2300      	movs	r3, #0
 8005038:	400a      	ands	r2, r1
 800503a:	2a04      	cmp	r2, #4
 800503c:	d100      	bne.n	8005040 <__aeabi_ddiv+0x400>
 800503e:	e0c7      	b.n	80051d0 <__aeabi_ddiv+0x590>
 8005040:	1d0a      	adds	r2, r1, #4
 8005042:	428a      	cmp	r2, r1
 8005044:	4189      	sbcs	r1, r1
 8005046:	4249      	negs	r1, r1
 8005048:	185b      	adds	r3, r3, r1
 800504a:	0011      	movs	r1, r2
 800504c:	021a      	lsls	r2, r3, #8
 800504e:	d400      	bmi.n	8005052 <__aeabi_ddiv+0x412>
 8005050:	e0be      	b.n	80051d0 <__aeabi_ddiv+0x590>
 8005052:	2301      	movs	r3, #1
 8005054:	2200      	movs	r2, #0
 8005056:	2500      	movs	r5, #0
 8005058:	e649      	b.n	8004cee <__aeabi_ddiv+0xae>
 800505a:	2280      	movs	r2, #128	; 0x80
 800505c:	4643      	mov	r3, r8
 800505e:	0312      	lsls	r2, r2, #12
 8005060:	4213      	tst	r3, r2
 8005062:	d008      	beq.n	8005076 <__aeabi_ddiv+0x436>
 8005064:	4214      	tst	r4, r2
 8005066:	d106      	bne.n	8005076 <__aeabi_ddiv+0x436>
 8005068:	4322      	orrs	r2, r4
 800506a:	0312      	lsls	r2, r2, #12
 800506c:	46ba      	mov	sl, r7
 800506e:	000d      	movs	r5, r1
 8005070:	4b66      	ldr	r3, [pc, #408]	; (800520c <__aeabi_ddiv+0x5cc>)
 8005072:	0b12      	lsrs	r2, r2, #12
 8005074:	e63b      	b.n	8004cee <__aeabi_ddiv+0xae>
 8005076:	2280      	movs	r2, #128	; 0x80
 8005078:	4643      	mov	r3, r8
 800507a:	0312      	lsls	r2, r2, #12
 800507c:	431a      	orrs	r2, r3
 800507e:	0312      	lsls	r2, r2, #12
 8005080:	46b2      	mov	sl, r6
 8005082:	4b62      	ldr	r3, [pc, #392]	; (800520c <__aeabi_ddiv+0x5cc>)
 8005084:	0b12      	lsrs	r2, r2, #12
 8005086:	e632      	b.n	8004cee <__aeabi_ddiv+0xae>
 8005088:	2b00      	cmp	r3, #0
 800508a:	d100      	bne.n	800508e <__aeabi_ddiv+0x44e>
 800508c:	e702      	b.n	8004e94 <__aeabi_ddiv+0x254>
 800508e:	19a6      	adds	r6, r4, r6
 8005090:	1e6a      	subs	r2, r5, #1
 8005092:	42a6      	cmp	r6, r4
 8005094:	d200      	bcs.n	8005098 <__aeabi_ddiv+0x458>
 8005096:	e089      	b.n	80051ac <__aeabi_ddiv+0x56c>
 8005098:	4286      	cmp	r6, r0
 800509a:	d200      	bcs.n	800509e <__aeabi_ddiv+0x45e>
 800509c:	e09f      	b.n	80051de <__aeabi_ddiv+0x59e>
 800509e:	d100      	bne.n	80050a2 <__aeabi_ddiv+0x462>
 80050a0:	e0af      	b.n	8005202 <__aeabi_ddiv+0x5c2>
 80050a2:	0015      	movs	r5, r2
 80050a4:	e6f4      	b.n	8004e90 <__aeabi_ddiv+0x250>
 80050a6:	42a9      	cmp	r1, r5
 80050a8:	d900      	bls.n	80050ac <__aeabi_ddiv+0x46c>
 80050aa:	e63c      	b.n	8004d26 <__aeabi_ddiv+0xe6>
 80050ac:	4643      	mov	r3, r8
 80050ae:	07de      	lsls	r6, r3, #31
 80050b0:	0858      	lsrs	r0, r3, #1
 80050b2:	086b      	lsrs	r3, r5, #1
 80050b4:	431e      	orrs	r6, r3
 80050b6:	07ed      	lsls	r5, r5, #31
 80050b8:	e63c      	b.n	8004d34 <__aeabi_ddiv+0xf4>
 80050ba:	f001 f977 	bl	80063ac <__clzsi2>
 80050be:	0001      	movs	r1, r0
 80050c0:	0002      	movs	r2, r0
 80050c2:	3115      	adds	r1, #21
 80050c4:	3220      	adds	r2, #32
 80050c6:	291c      	cmp	r1, #28
 80050c8:	dc00      	bgt.n	80050cc <__aeabi_ddiv+0x48c>
 80050ca:	e72c      	b.n	8004f26 <__aeabi_ddiv+0x2e6>
 80050cc:	464b      	mov	r3, r9
 80050ce:	3808      	subs	r0, #8
 80050d0:	4083      	lsls	r3, r0
 80050d2:	2500      	movs	r5, #0
 80050d4:	4698      	mov	r8, r3
 80050d6:	e732      	b.n	8004f3e <__aeabi_ddiv+0x2fe>
 80050d8:	f001 f968 	bl	80063ac <__clzsi2>
 80050dc:	0003      	movs	r3, r0
 80050de:	001a      	movs	r2, r3
 80050e0:	3215      	adds	r2, #21
 80050e2:	3020      	adds	r0, #32
 80050e4:	2a1c      	cmp	r2, #28
 80050e6:	dc00      	bgt.n	80050ea <__aeabi_ddiv+0x4aa>
 80050e8:	e6ff      	b.n	8004eea <__aeabi_ddiv+0x2aa>
 80050ea:	4654      	mov	r4, sl
 80050ec:	3b08      	subs	r3, #8
 80050ee:	2100      	movs	r1, #0
 80050f0:	409c      	lsls	r4, r3
 80050f2:	e705      	b.n	8004f00 <__aeabi_ddiv+0x2c0>
 80050f4:	1936      	adds	r6, r6, r4
 80050f6:	3b01      	subs	r3, #1
 80050f8:	42b4      	cmp	r4, r6
 80050fa:	d900      	bls.n	80050fe <__aeabi_ddiv+0x4be>
 80050fc:	e6a6      	b.n	8004e4c <__aeabi_ddiv+0x20c>
 80050fe:	42b2      	cmp	r2, r6
 8005100:	d800      	bhi.n	8005104 <__aeabi_ddiv+0x4c4>
 8005102:	e6a3      	b.n	8004e4c <__aeabi_ddiv+0x20c>
 8005104:	1e83      	subs	r3, r0, #2
 8005106:	1936      	adds	r6, r6, r4
 8005108:	e6a0      	b.n	8004e4c <__aeabi_ddiv+0x20c>
 800510a:	1909      	adds	r1, r1, r4
 800510c:	3d01      	subs	r5, #1
 800510e:	428c      	cmp	r4, r1
 8005110:	d900      	bls.n	8005114 <__aeabi_ddiv+0x4d4>
 8005112:	e68d      	b.n	8004e30 <__aeabi_ddiv+0x1f0>
 8005114:	428a      	cmp	r2, r1
 8005116:	d800      	bhi.n	800511a <__aeabi_ddiv+0x4da>
 8005118:	e68a      	b.n	8004e30 <__aeabi_ddiv+0x1f0>
 800511a:	1e85      	subs	r5, r0, #2
 800511c:	1909      	adds	r1, r1, r4
 800511e:	e687      	b.n	8004e30 <__aeabi_ddiv+0x1f0>
 8005120:	220f      	movs	r2, #15
 8005122:	402a      	ands	r2, r5
 8005124:	2a04      	cmp	r2, #4
 8005126:	d100      	bne.n	800512a <__aeabi_ddiv+0x4ea>
 8005128:	e6bc      	b.n	8004ea4 <__aeabi_ddiv+0x264>
 800512a:	1d29      	adds	r1, r5, #4
 800512c:	42a9      	cmp	r1, r5
 800512e:	41ad      	sbcs	r5, r5
 8005130:	426d      	negs	r5, r5
 8005132:	08c9      	lsrs	r1, r1, #3
 8005134:	44a8      	add	r8, r5
 8005136:	e6b6      	b.n	8004ea6 <__aeabi_ddiv+0x266>
 8005138:	42af      	cmp	r7, r5
 800513a:	d900      	bls.n	800513e <__aeabi_ddiv+0x4fe>
 800513c:	e662      	b.n	8004e04 <__aeabi_ddiv+0x1c4>
 800513e:	4281      	cmp	r1, r0
 8005140:	d804      	bhi.n	800514c <__aeabi_ddiv+0x50c>
 8005142:	d000      	beq.n	8005146 <__aeabi_ddiv+0x506>
 8005144:	e65e      	b.n	8004e04 <__aeabi_ddiv+0x1c4>
 8005146:	42ae      	cmp	r6, r5
 8005148:	d800      	bhi.n	800514c <__aeabi_ddiv+0x50c>
 800514a:	e65b      	b.n	8004e04 <__aeabi_ddiv+0x1c4>
 800514c:	2302      	movs	r3, #2
 800514e:	425b      	negs	r3, r3
 8005150:	469c      	mov	ip, r3
 8005152:	9b00      	ldr	r3, [sp, #0]
 8005154:	44e0      	add	r8, ip
 8005156:	469c      	mov	ip, r3
 8005158:	4465      	add	r5, ip
 800515a:	429d      	cmp	r5, r3
 800515c:	419b      	sbcs	r3, r3
 800515e:	425b      	negs	r3, r3
 8005160:	191b      	adds	r3, r3, r4
 8005162:	18c0      	adds	r0, r0, r3
 8005164:	e64f      	b.n	8004e06 <__aeabi_ddiv+0x1c6>
 8005166:	42b2      	cmp	r2, r6
 8005168:	d800      	bhi.n	800516c <__aeabi_ddiv+0x52c>
 800516a:	e612      	b.n	8004d92 <__aeabi_ddiv+0x152>
 800516c:	1e83      	subs	r3, r0, #2
 800516e:	1936      	adds	r6, r6, r4
 8005170:	e60f      	b.n	8004d92 <__aeabi_ddiv+0x152>
 8005172:	428a      	cmp	r2, r1
 8005174:	d800      	bhi.n	8005178 <__aeabi_ddiv+0x538>
 8005176:	e5fa      	b.n	8004d6e <__aeabi_ddiv+0x12e>
 8005178:	1e83      	subs	r3, r0, #2
 800517a:	4698      	mov	r8, r3
 800517c:	1909      	adds	r1, r1, r4
 800517e:	e5f6      	b.n	8004d6e <__aeabi_ddiv+0x12e>
 8005180:	4b24      	ldr	r3, [pc, #144]	; (8005214 <__aeabi_ddiv+0x5d4>)
 8005182:	0028      	movs	r0, r5
 8005184:	445b      	add	r3, fp
 8005186:	4641      	mov	r1, r8
 8005188:	409d      	lsls	r5, r3
 800518a:	4099      	lsls	r1, r3
 800518c:	40d0      	lsrs	r0, r2
 800518e:	1e6b      	subs	r3, r5, #1
 8005190:	419d      	sbcs	r5, r3
 8005192:	4643      	mov	r3, r8
 8005194:	4301      	orrs	r1, r0
 8005196:	4329      	orrs	r1, r5
 8005198:	40d3      	lsrs	r3, r2
 800519a:	074a      	lsls	r2, r1, #29
 800519c:	d100      	bne.n	80051a0 <__aeabi_ddiv+0x560>
 800519e:	e755      	b.n	800504c <__aeabi_ddiv+0x40c>
 80051a0:	220f      	movs	r2, #15
 80051a2:	400a      	ands	r2, r1
 80051a4:	2a04      	cmp	r2, #4
 80051a6:	d000      	beq.n	80051aa <__aeabi_ddiv+0x56a>
 80051a8:	e74a      	b.n	8005040 <__aeabi_ddiv+0x400>
 80051aa:	e74f      	b.n	800504c <__aeabi_ddiv+0x40c>
 80051ac:	0015      	movs	r5, r2
 80051ae:	4286      	cmp	r6, r0
 80051b0:	d000      	beq.n	80051b4 <__aeabi_ddiv+0x574>
 80051b2:	e66d      	b.n	8004e90 <__aeabi_ddiv+0x250>
 80051b4:	9a00      	ldr	r2, [sp, #0]
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d000      	beq.n	80051bc <__aeabi_ddiv+0x57c>
 80051ba:	e669      	b.n	8004e90 <__aeabi_ddiv+0x250>
 80051bc:	e66a      	b.n	8004e94 <__aeabi_ddiv+0x254>
 80051be:	4b16      	ldr	r3, [pc, #88]	; (8005218 <__aeabi_ddiv+0x5d8>)
 80051c0:	445b      	add	r3, fp
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	dc00      	bgt.n	80051c8 <__aeabi_ddiv+0x588>
 80051c6:	e713      	b.n	8004ff0 <__aeabi_ddiv+0x3b0>
 80051c8:	2501      	movs	r5, #1
 80051ca:	2100      	movs	r1, #0
 80051cc:	44a8      	add	r8, r5
 80051ce:	e66a      	b.n	8004ea6 <__aeabi_ddiv+0x266>
 80051d0:	075d      	lsls	r5, r3, #29
 80051d2:	025b      	lsls	r3, r3, #9
 80051d4:	0b1a      	lsrs	r2, r3, #12
 80051d6:	08c9      	lsrs	r1, r1, #3
 80051d8:	2300      	movs	r3, #0
 80051da:	430d      	orrs	r5, r1
 80051dc:	e587      	b.n	8004cee <__aeabi_ddiv+0xae>
 80051de:	9900      	ldr	r1, [sp, #0]
 80051e0:	3d02      	subs	r5, #2
 80051e2:	004a      	lsls	r2, r1, #1
 80051e4:	428a      	cmp	r2, r1
 80051e6:	41bf      	sbcs	r7, r7
 80051e8:	427f      	negs	r7, r7
 80051ea:	193f      	adds	r7, r7, r4
 80051ec:	19f6      	adds	r6, r6, r7
 80051ee:	9200      	str	r2, [sp, #0]
 80051f0:	e7dd      	b.n	80051ae <__aeabi_ddiv+0x56e>
 80051f2:	2280      	movs	r2, #128	; 0x80
 80051f4:	4643      	mov	r3, r8
 80051f6:	0312      	lsls	r2, r2, #12
 80051f8:	431a      	orrs	r2, r3
 80051fa:	0312      	lsls	r2, r2, #12
 80051fc:	4b03      	ldr	r3, [pc, #12]	; (800520c <__aeabi_ddiv+0x5cc>)
 80051fe:	0b12      	lsrs	r2, r2, #12
 8005200:	e575      	b.n	8004cee <__aeabi_ddiv+0xae>
 8005202:	9900      	ldr	r1, [sp, #0]
 8005204:	4299      	cmp	r1, r3
 8005206:	d3ea      	bcc.n	80051de <__aeabi_ddiv+0x59e>
 8005208:	0015      	movs	r5, r2
 800520a:	e7d3      	b.n	80051b4 <__aeabi_ddiv+0x574>
 800520c:	000007ff 	.word	0x000007ff
 8005210:	0000043e 	.word	0x0000043e
 8005214:	0000041e 	.word	0x0000041e
 8005218:	000003ff 	.word	0x000003ff

0800521c <__eqdf2>:
 800521c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800521e:	464e      	mov	r6, r9
 8005220:	4645      	mov	r5, r8
 8005222:	46de      	mov	lr, fp
 8005224:	4657      	mov	r7, sl
 8005226:	4690      	mov	r8, r2
 8005228:	b5e0      	push	{r5, r6, r7, lr}
 800522a:	0017      	movs	r7, r2
 800522c:	031a      	lsls	r2, r3, #12
 800522e:	0b12      	lsrs	r2, r2, #12
 8005230:	0005      	movs	r5, r0
 8005232:	4684      	mov	ip, r0
 8005234:	4819      	ldr	r0, [pc, #100]	; (800529c <__eqdf2+0x80>)
 8005236:	030e      	lsls	r6, r1, #12
 8005238:	004c      	lsls	r4, r1, #1
 800523a:	4691      	mov	r9, r2
 800523c:	005a      	lsls	r2, r3, #1
 800523e:	0fdb      	lsrs	r3, r3, #31
 8005240:	469b      	mov	fp, r3
 8005242:	0b36      	lsrs	r6, r6, #12
 8005244:	0d64      	lsrs	r4, r4, #21
 8005246:	0fc9      	lsrs	r1, r1, #31
 8005248:	0d52      	lsrs	r2, r2, #21
 800524a:	4284      	cmp	r4, r0
 800524c:	d019      	beq.n	8005282 <__eqdf2+0x66>
 800524e:	4282      	cmp	r2, r0
 8005250:	d010      	beq.n	8005274 <__eqdf2+0x58>
 8005252:	2001      	movs	r0, #1
 8005254:	4294      	cmp	r4, r2
 8005256:	d10e      	bne.n	8005276 <__eqdf2+0x5a>
 8005258:	454e      	cmp	r6, r9
 800525a:	d10c      	bne.n	8005276 <__eqdf2+0x5a>
 800525c:	2001      	movs	r0, #1
 800525e:	45c4      	cmp	ip, r8
 8005260:	d109      	bne.n	8005276 <__eqdf2+0x5a>
 8005262:	4559      	cmp	r1, fp
 8005264:	d017      	beq.n	8005296 <__eqdf2+0x7a>
 8005266:	2c00      	cmp	r4, #0
 8005268:	d105      	bne.n	8005276 <__eqdf2+0x5a>
 800526a:	0030      	movs	r0, r6
 800526c:	4328      	orrs	r0, r5
 800526e:	1e43      	subs	r3, r0, #1
 8005270:	4198      	sbcs	r0, r3
 8005272:	e000      	b.n	8005276 <__eqdf2+0x5a>
 8005274:	2001      	movs	r0, #1
 8005276:	bcf0      	pop	{r4, r5, r6, r7}
 8005278:	46bb      	mov	fp, r7
 800527a:	46b2      	mov	sl, r6
 800527c:	46a9      	mov	r9, r5
 800527e:	46a0      	mov	r8, r4
 8005280:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005282:	0033      	movs	r3, r6
 8005284:	2001      	movs	r0, #1
 8005286:	432b      	orrs	r3, r5
 8005288:	d1f5      	bne.n	8005276 <__eqdf2+0x5a>
 800528a:	42a2      	cmp	r2, r4
 800528c:	d1f3      	bne.n	8005276 <__eqdf2+0x5a>
 800528e:	464b      	mov	r3, r9
 8005290:	433b      	orrs	r3, r7
 8005292:	d1f0      	bne.n	8005276 <__eqdf2+0x5a>
 8005294:	e7e2      	b.n	800525c <__eqdf2+0x40>
 8005296:	2000      	movs	r0, #0
 8005298:	e7ed      	b.n	8005276 <__eqdf2+0x5a>
 800529a:	46c0      	nop			; (mov r8, r8)
 800529c:	000007ff 	.word	0x000007ff

080052a0 <__gedf2>:
 80052a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052a2:	4647      	mov	r7, r8
 80052a4:	46ce      	mov	lr, r9
 80052a6:	0004      	movs	r4, r0
 80052a8:	0018      	movs	r0, r3
 80052aa:	0016      	movs	r6, r2
 80052ac:	031b      	lsls	r3, r3, #12
 80052ae:	0b1b      	lsrs	r3, r3, #12
 80052b0:	4d2d      	ldr	r5, [pc, #180]	; (8005368 <__gedf2+0xc8>)
 80052b2:	004a      	lsls	r2, r1, #1
 80052b4:	4699      	mov	r9, r3
 80052b6:	b580      	push	{r7, lr}
 80052b8:	0043      	lsls	r3, r0, #1
 80052ba:	030f      	lsls	r7, r1, #12
 80052bc:	46a4      	mov	ip, r4
 80052be:	46b0      	mov	r8, r6
 80052c0:	0b3f      	lsrs	r7, r7, #12
 80052c2:	0d52      	lsrs	r2, r2, #21
 80052c4:	0fc9      	lsrs	r1, r1, #31
 80052c6:	0d5b      	lsrs	r3, r3, #21
 80052c8:	0fc0      	lsrs	r0, r0, #31
 80052ca:	42aa      	cmp	r2, r5
 80052cc:	d021      	beq.n	8005312 <__gedf2+0x72>
 80052ce:	42ab      	cmp	r3, r5
 80052d0:	d013      	beq.n	80052fa <__gedf2+0x5a>
 80052d2:	2a00      	cmp	r2, #0
 80052d4:	d122      	bne.n	800531c <__gedf2+0x7c>
 80052d6:	433c      	orrs	r4, r7
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d102      	bne.n	80052e2 <__gedf2+0x42>
 80052dc:	464d      	mov	r5, r9
 80052de:	432e      	orrs	r6, r5
 80052e0:	d022      	beq.n	8005328 <__gedf2+0x88>
 80052e2:	2c00      	cmp	r4, #0
 80052e4:	d010      	beq.n	8005308 <__gedf2+0x68>
 80052e6:	4281      	cmp	r1, r0
 80052e8:	d022      	beq.n	8005330 <__gedf2+0x90>
 80052ea:	2002      	movs	r0, #2
 80052ec:	3901      	subs	r1, #1
 80052ee:	4008      	ands	r0, r1
 80052f0:	3801      	subs	r0, #1
 80052f2:	bcc0      	pop	{r6, r7}
 80052f4:	46b9      	mov	r9, r7
 80052f6:	46b0      	mov	r8, r6
 80052f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052fa:	464d      	mov	r5, r9
 80052fc:	432e      	orrs	r6, r5
 80052fe:	d129      	bne.n	8005354 <__gedf2+0xb4>
 8005300:	2a00      	cmp	r2, #0
 8005302:	d1f0      	bne.n	80052e6 <__gedf2+0x46>
 8005304:	433c      	orrs	r4, r7
 8005306:	d1ee      	bne.n	80052e6 <__gedf2+0x46>
 8005308:	2800      	cmp	r0, #0
 800530a:	d1f2      	bne.n	80052f2 <__gedf2+0x52>
 800530c:	2001      	movs	r0, #1
 800530e:	4240      	negs	r0, r0
 8005310:	e7ef      	b.n	80052f2 <__gedf2+0x52>
 8005312:	003d      	movs	r5, r7
 8005314:	4325      	orrs	r5, r4
 8005316:	d11d      	bne.n	8005354 <__gedf2+0xb4>
 8005318:	4293      	cmp	r3, r2
 800531a:	d0ee      	beq.n	80052fa <__gedf2+0x5a>
 800531c:	2b00      	cmp	r3, #0
 800531e:	d1e2      	bne.n	80052e6 <__gedf2+0x46>
 8005320:	464c      	mov	r4, r9
 8005322:	4326      	orrs	r6, r4
 8005324:	d1df      	bne.n	80052e6 <__gedf2+0x46>
 8005326:	e7e0      	b.n	80052ea <__gedf2+0x4a>
 8005328:	2000      	movs	r0, #0
 800532a:	2c00      	cmp	r4, #0
 800532c:	d0e1      	beq.n	80052f2 <__gedf2+0x52>
 800532e:	e7dc      	b.n	80052ea <__gedf2+0x4a>
 8005330:	429a      	cmp	r2, r3
 8005332:	dc0a      	bgt.n	800534a <__gedf2+0xaa>
 8005334:	dbe8      	blt.n	8005308 <__gedf2+0x68>
 8005336:	454f      	cmp	r7, r9
 8005338:	d8d7      	bhi.n	80052ea <__gedf2+0x4a>
 800533a:	d00e      	beq.n	800535a <__gedf2+0xba>
 800533c:	2000      	movs	r0, #0
 800533e:	454f      	cmp	r7, r9
 8005340:	d2d7      	bcs.n	80052f2 <__gedf2+0x52>
 8005342:	2900      	cmp	r1, #0
 8005344:	d0e2      	beq.n	800530c <__gedf2+0x6c>
 8005346:	0008      	movs	r0, r1
 8005348:	e7d3      	b.n	80052f2 <__gedf2+0x52>
 800534a:	4243      	negs	r3, r0
 800534c:	4158      	adcs	r0, r3
 800534e:	0040      	lsls	r0, r0, #1
 8005350:	3801      	subs	r0, #1
 8005352:	e7ce      	b.n	80052f2 <__gedf2+0x52>
 8005354:	2002      	movs	r0, #2
 8005356:	4240      	negs	r0, r0
 8005358:	e7cb      	b.n	80052f2 <__gedf2+0x52>
 800535a:	45c4      	cmp	ip, r8
 800535c:	d8c5      	bhi.n	80052ea <__gedf2+0x4a>
 800535e:	2000      	movs	r0, #0
 8005360:	45c4      	cmp	ip, r8
 8005362:	d2c6      	bcs.n	80052f2 <__gedf2+0x52>
 8005364:	e7ed      	b.n	8005342 <__gedf2+0xa2>
 8005366:	46c0      	nop			; (mov r8, r8)
 8005368:	000007ff 	.word	0x000007ff

0800536c <__ledf2>:
 800536c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800536e:	4647      	mov	r7, r8
 8005370:	46ce      	mov	lr, r9
 8005372:	0004      	movs	r4, r0
 8005374:	0018      	movs	r0, r3
 8005376:	0016      	movs	r6, r2
 8005378:	031b      	lsls	r3, r3, #12
 800537a:	0b1b      	lsrs	r3, r3, #12
 800537c:	4d2c      	ldr	r5, [pc, #176]	; (8005430 <__ledf2+0xc4>)
 800537e:	004a      	lsls	r2, r1, #1
 8005380:	4699      	mov	r9, r3
 8005382:	b580      	push	{r7, lr}
 8005384:	0043      	lsls	r3, r0, #1
 8005386:	030f      	lsls	r7, r1, #12
 8005388:	46a4      	mov	ip, r4
 800538a:	46b0      	mov	r8, r6
 800538c:	0b3f      	lsrs	r7, r7, #12
 800538e:	0d52      	lsrs	r2, r2, #21
 8005390:	0fc9      	lsrs	r1, r1, #31
 8005392:	0d5b      	lsrs	r3, r3, #21
 8005394:	0fc0      	lsrs	r0, r0, #31
 8005396:	42aa      	cmp	r2, r5
 8005398:	d00d      	beq.n	80053b6 <__ledf2+0x4a>
 800539a:	42ab      	cmp	r3, r5
 800539c:	d010      	beq.n	80053c0 <__ledf2+0x54>
 800539e:	2a00      	cmp	r2, #0
 80053a0:	d127      	bne.n	80053f2 <__ledf2+0x86>
 80053a2:	433c      	orrs	r4, r7
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d111      	bne.n	80053cc <__ledf2+0x60>
 80053a8:	464d      	mov	r5, r9
 80053aa:	432e      	orrs	r6, r5
 80053ac:	d10e      	bne.n	80053cc <__ledf2+0x60>
 80053ae:	2000      	movs	r0, #0
 80053b0:	2c00      	cmp	r4, #0
 80053b2:	d015      	beq.n	80053e0 <__ledf2+0x74>
 80053b4:	e00e      	b.n	80053d4 <__ledf2+0x68>
 80053b6:	003d      	movs	r5, r7
 80053b8:	4325      	orrs	r5, r4
 80053ba:	d110      	bne.n	80053de <__ledf2+0x72>
 80053bc:	4293      	cmp	r3, r2
 80053be:	d118      	bne.n	80053f2 <__ledf2+0x86>
 80053c0:	464d      	mov	r5, r9
 80053c2:	432e      	orrs	r6, r5
 80053c4:	d10b      	bne.n	80053de <__ledf2+0x72>
 80053c6:	2a00      	cmp	r2, #0
 80053c8:	d102      	bne.n	80053d0 <__ledf2+0x64>
 80053ca:	433c      	orrs	r4, r7
 80053cc:	2c00      	cmp	r4, #0
 80053ce:	d00b      	beq.n	80053e8 <__ledf2+0x7c>
 80053d0:	4281      	cmp	r1, r0
 80053d2:	d014      	beq.n	80053fe <__ledf2+0x92>
 80053d4:	2002      	movs	r0, #2
 80053d6:	3901      	subs	r1, #1
 80053d8:	4008      	ands	r0, r1
 80053da:	3801      	subs	r0, #1
 80053dc:	e000      	b.n	80053e0 <__ledf2+0x74>
 80053de:	2002      	movs	r0, #2
 80053e0:	bcc0      	pop	{r6, r7}
 80053e2:	46b9      	mov	r9, r7
 80053e4:	46b0      	mov	r8, r6
 80053e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053e8:	2800      	cmp	r0, #0
 80053ea:	d1f9      	bne.n	80053e0 <__ledf2+0x74>
 80053ec:	2001      	movs	r0, #1
 80053ee:	4240      	negs	r0, r0
 80053f0:	e7f6      	b.n	80053e0 <__ledf2+0x74>
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d1ec      	bne.n	80053d0 <__ledf2+0x64>
 80053f6:	464c      	mov	r4, r9
 80053f8:	4326      	orrs	r6, r4
 80053fa:	d1e9      	bne.n	80053d0 <__ledf2+0x64>
 80053fc:	e7ea      	b.n	80053d4 <__ledf2+0x68>
 80053fe:	429a      	cmp	r2, r3
 8005400:	dd04      	ble.n	800540c <__ledf2+0xa0>
 8005402:	4243      	negs	r3, r0
 8005404:	4158      	adcs	r0, r3
 8005406:	0040      	lsls	r0, r0, #1
 8005408:	3801      	subs	r0, #1
 800540a:	e7e9      	b.n	80053e0 <__ledf2+0x74>
 800540c:	429a      	cmp	r2, r3
 800540e:	dbeb      	blt.n	80053e8 <__ledf2+0x7c>
 8005410:	454f      	cmp	r7, r9
 8005412:	d8df      	bhi.n	80053d4 <__ledf2+0x68>
 8005414:	d006      	beq.n	8005424 <__ledf2+0xb8>
 8005416:	2000      	movs	r0, #0
 8005418:	454f      	cmp	r7, r9
 800541a:	d2e1      	bcs.n	80053e0 <__ledf2+0x74>
 800541c:	2900      	cmp	r1, #0
 800541e:	d0e5      	beq.n	80053ec <__ledf2+0x80>
 8005420:	0008      	movs	r0, r1
 8005422:	e7dd      	b.n	80053e0 <__ledf2+0x74>
 8005424:	45c4      	cmp	ip, r8
 8005426:	d8d5      	bhi.n	80053d4 <__ledf2+0x68>
 8005428:	2000      	movs	r0, #0
 800542a:	45c4      	cmp	ip, r8
 800542c:	d2d8      	bcs.n	80053e0 <__ledf2+0x74>
 800542e:	e7f5      	b.n	800541c <__ledf2+0xb0>
 8005430:	000007ff 	.word	0x000007ff

08005434 <__aeabi_dmul>:
 8005434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005436:	4645      	mov	r5, r8
 8005438:	46de      	mov	lr, fp
 800543a:	4657      	mov	r7, sl
 800543c:	464e      	mov	r6, r9
 800543e:	b5e0      	push	{r5, r6, r7, lr}
 8005440:	001f      	movs	r7, r3
 8005442:	030b      	lsls	r3, r1, #12
 8005444:	0b1b      	lsrs	r3, r3, #12
 8005446:	469b      	mov	fp, r3
 8005448:	004d      	lsls	r5, r1, #1
 800544a:	0fcb      	lsrs	r3, r1, #31
 800544c:	0004      	movs	r4, r0
 800544e:	4691      	mov	r9, r2
 8005450:	4698      	mov	r8, r3
 8005452:	b087      	sub	sp, #28
 8005454:	0d6d      	lsrs	r5, r5, #21
 8005456:	d100      	bne.n	800545a <__aeabi_dmul+0x26>
 8005458:	e1cd      	b.n	80057f6 <__aeabi_dmul+0x3c2>
 800545a:	4bce      	ldr	r3, [pc, #824]	; (8005794 <__aeabi_dmul+0x360>)
 800545c:	429d      	cmp	r5, r3
 800545e:	d100      	bne.n	8005462 <__aeabi_dmul+0x2e>
 8005460:	e1e9      	b.n	8005836 <__aeabi_dmul+0x402>
 8005462:	465a      	mov	r2, fp
 8005464:	0f43      	lsrs	r3, r0, #29
 8005466:	00d2      	lsls	r2, r2, #3
 8005468:	4313      	orrs	r3, r2
 800546a:	2280      	movs	r2, #128	; 0x80
 800546c:	0412      	lsls	r2, r2, #16
 800546e:	431a      	orrs	r2, r3
 8005470:	00c3      	lsls	r3, r0, #3
 8005472:	469a      	mov	sl, r3
 8005474:	4bc8      	ldr	r3, [pc, #800]	; (8005798 <__aeabi_dmul+0x364>)
 8005476:	4693      	mov	fp, r2
 8005478:	469c      	mov	ip, r3
 800547a:	2300      	movs	r3, #0
 800547c:	2600      	movs	r6, #0
 800547e:	4465      	add	r5, ip
 8005480:	9300      	str	r3, [sp, #0]
 8005482:	033c      	lsls	r4, r7, #12
 8005484:	007b      	lsls	r3, r7, #1
 8005486:	4648      	mov	r0, r9
 8005488:	0b24      	lsrs	r4, r4, #12
 800548a:	0d5b      	lsrs	r3, r3, #21
 800548c:	0fff      	lsrs	r7, r7, #31
 800548e:	2b00      	cmp	r3, #0
 8005490:	d100      	bne.n	8005494 <__aeabi_dmul+0x60>
 8005492:	e189      	b.n	80057a8 <__aeabi_dmul+0x374>
 8005494:	4abf      	ldr	r2, [pc, #764]	; (8005794 <__aeabi_dmul+0x360>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d019      	beq.n	80054ce <__aeabi_dmul+0x9a>
 800549a:	0f42      	lsrs	r2, r0, #29
 800549c:	00e4      	lsls	r4, r4, #3
 800549e:	4322      	orrs	r2, r4
 80054a0:	2480      	movs	r4, #128	; 0x80
 80054a2:	0424      	lsls	r4, r4, #16
 80054a4:	4314      	orrs	r4, r2
 80054a6:	4abc      	ldr	r2, [pc, #752]	; (8005798 <__aeabi_dmul+0x364>)
 80054a8:	2100      	movs	r1, #0
 80054aa:	4694      	mov	ip, r2
 80054ac:	4642      	mov	r2, r8
 80054ae:	4463      	add	r3, ip
 80054b0:	195b      	adds	r3, r3, r5
 80054b2:	9301      	str	r3, [sp, #4]
 80054b4:	9b01      	ldr	r3, [sp, #4]
 80054b6:	407a      	eors	r2, r7
 80054b8:	3301      	adds	r3, #1
 80054ba:	00c0      	lsls	r0, r0, #3
 80054bc:	b2d2      	uxtb	r2, r2
 80054be:	9302      	str	r3, [sp, #8]
 80054c0:	2e0a      	cmp	r6, #10
 80054c2:	dd1c      	ble.n	80054fe <__aeabi_dmul+0xca>
 80054c4:	003a      	movs	r2, r7
 80054c6:	2e0b      	cmp	r6, #11
 80054c8:	d05e      	beq.n	8005588 <__aeabi_dmul+0x154>
 80054ca:	4647      	mov	r7, r8
 80054cc:	e056      	b.n	800557c <__aeabi_dmul+0x148>
 80054ce:	4649      	mov	r1, r9
 80054d0:	4bb0      	ldr	r3, [pc, #704]	; (8005794 <__aeabi_dmul+0x360>)
 80054d2:	4321      	orrs	r1, r4
 80054d4:	18eb      	adds	r3, r5, r3
 80054d6:	9301      	str	r3, [sp, #4]
 80054d8:	2900      	cmp	r1, #0
 80054da:	d12a      	bne.n	8005532 <__aeabi_dmul+0xfe>
 80054dc:	2080      	movs	r0, #128	; 0x80
 80054de:	2202      	movs	r2, #2
 80054e0:	0100      	lsls	r0, r0, #4
 80054e2:	002b      	movs	r3, r5
 80054e4:	4684      	mov	ip, r0
 80054e6:	4316      	orrs	r6, r2
 80054e8:	4642      	mov	r2, r8
 80054ea:	4463      	add	r3, ip
 80054ec:	407a      	eors	r2, r7
 80054ee:	b2d2      	uxtb	r2, r2
 80054f0:	9302      	str	r3, [sp, #8]
 80054f2:	2e0a      	cmp	r6, #10
 80054f4:	dd00      	ble.n	80054f8 <__aeabi_dmul+0xc4>
 80054f6:	e231      	b.n	800595c <__aeabi_dmul+0x528>
 80054f8:	2000      	movs	r0, #0
 80054fa:	2400      	movs	r4, #0
 80054fc:	2102      	movs	r1, #2
 80054fe:	2e02      	cmp	r6, #2
 8005500:	dc26      	bgt.n	8005550 <__aeabi_dmul+0x11c>
 8005502:	3e01      	subs	r6, #1
 8005504:	2e01      	cmp	r6, #1
 8005506:	d852      	bhi.n	80055ae <__aeabi_dmul+0x17a>
 8005508:	2902      	cmp	r1, #2
 800550a:	d04c      	beq.n	80055a6 <__aeabi_dmul+0x172>
 800550c:	2901      	cmp	r1, #1
 800550e:	d000      	beq.n	8005512 <__aeabi_dmul+0xde>
 8005510:	e118      	b.n	8005744 <__aeabi_dmul+0x310>
 8005512:	2300      	movs	r3, #0
 8005514:	2400      	movs	r4, #0
 8005516:	2500      	movs	r5, #0
 8005518:	051b      	lsls	r3, r3, #20
 800551a:	4323      	orrs	r3, r4
 800551c:	07d2      	lsls	r2, r2, #31
 800551e:	4313      	orrs	r3, r2
 8005520:	0028      	movs	r0, r5
 8005522:	0019      	movs	r1, r3
 8005524:	b007      	add	sp, #28
 8005526:	bcf0      	pop	{r4, r5, r6, r7}
 8005528:	46bb      	mov	fp, r7
 800552a:	46b2      	mov	sl, r6
 800552c:	46a9      	mov	r9, r5
 800552e:	46a0      	mov	r8, r4
 8005530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005532:	2180      	movs	r1, #128	; 0x80
 8005534:	2203      	movs	r2, #3
 8005536:	0109      	lsls	r1, r1, #4
 8005538:	002b      	movs	r3, r5
 800553a:	468c      	mov	ip, r1
 800553c:	4316      	orrs	r6, r2
 800553e:	4642      	mov	r2, r8
 8005540:	4463      	add	r3, ip
 8005542:	407a      	eors	r2, r7
 8005544:	b2d2      	uxtb	r2, r2
 8005546:	9302      	str	r3, [sp, #8]
 8005548:	2e0a      	cmp	r6, #10
 800554a:	dd00      	ble.n	800554e <__aeabi_dmul+0x11a>
 800554c:	e228      	b.n	80059a0 <__aeabi_dmul+0x56c>
 800554e:	2103      	movs	r1, #3
 8005550:	2501      	movs	r5, #1
 8005552:	40b5      	lsls	r5, r6
 8005554:	46ac      	mov	ip, r5
 8005556:	26a6      	movs	r6, #166	; 0xa6
 8005558:	4663      	mov	r3, ip
 800555a:	00f6      	lsls	r6, r6, #3
 800555c:	4035      	ands	r5, r6
 800555e:	4233      	tst	r3, r6
 8005560:	d10b      	bne.n	800557a <__aeabi_dmul+0x146>
 8005562:	2690      	movs	r6, #144	; 0x90
 8005564:	00b6      	lsls	r6, r6, #2
 8005566:	4233      	tst	r3, r6
 8005568:	d118      	bne.n	800559c <__aeabi_dmul+0x168>
 800556a:	3eb9      	subs	r6, #185	; 0xb9
 800556c:	3eff      	subs	r6, #255	; 0xff
 800556e:	421e      	tst	r6, r3
 8005570:	d01d      	beq.n	80055ae <__aeabi_dmul+0x17a>
 8005572:	46a3      	mov	fp, r4
 8005574:	4682      	mov	sl, r0
 8005576:	9100      	str	r1, [sp, #0]
 8005578:	e000      	b.n	800557c <__aeabi_dmul+0x148>
 800557a:	0017      	movs	r7, r2
 800557c:	9900      	ldr	r1, [sp, #0]
 800557e:	003a      	movs	r2, r7
 8005580:	2902      	cmp	r1, #2
 8005582:	d010      	beq.n	80055a6 <__aeabi_dmul+0x172>
 8005584:	465c      	mov	r4, fp
 8005586:	4650      	mov	r0, sl
 8005588:	2903      	cmp	r1, #3
 800558a:	d1bf      	bne.n	800550c <__aeabi_dmul+0xd8>
 800558c:	2380      	movs	r3, #128	; 0x80
 800558e:	031b      	lsls	r3, r3, #12
 8005590:	431c      	orrs	r4, r3
 8005592:	0324      	lsls	r4, r4, #12
 8005594:	0005      	movs	r5, r0
 8005596:	4b7f      	ldr	r3, [pc, #508]	; (8005794 <__aeabi_dmul+0x360>)
 8005598:	0b24      	lsrs	r4, r4, #12
 800559a:	e7bd      	b.n	8005518 <__aeabi_dmul+0xe4>
 800559c:	2480      	movs	r4, #128	; 0x80
 800559e:	2200      	movs	r2, #0
 80055a0:	4b7c      	ldr	r3, [pc, #496]	; (8005794 <__aeabi_dmul+0x360>)
 80055a2:	0324      	lsls	r4, r4, #12
 80055a4:	e7b8      	b.n	8005518 <__aeabi_dmul+0xe4>
 80055a6:	2400      	movs	r4, #0
 80055a8:	2500      	movs	r5, #0
 80055aa:	4b7a      	ldr	r3, [pc, #488]	; (8005794 <__aeabi_dmul+0x360>)
 80055ac:	e7b4      	b.n	8005518 <__aeabi_dmul+0xe4>
 80055ae:	4653      	mov	r3, sl
 80055b0:	041e      	lsls	r6, r3, #16
 80055b2:	0c36      	lsrs	r6, r6, #16
 80055b4:	0c1f      	lsrs	r7, r3, #16
 80055b6:	0033      	movs	r3, r6
 80055b8:	0c01      	lsrs	r1, r0, #16
 80055ba:	0400      	lsls	r0, r0, #16
 80055bc:	0c00      	lsrs	r0, r0, #16
 80055be:	4343      	muls	r3, r0
 80055c0:	4698      	mov	r8, r3
 80055c2:	0003      	movs	r3, r0
 80055c4:	437b      	muls	r3, r7
 80055c6:	4699      	mov	r9, r3
 80055c8:	0033      	movs	r3, r6
 80055ca:	434b      	muls	r3, r1
 80055cc:	469c      	mov	ip, r3
 80055ce:	4643      	mov	r3, r8
 80055d0:	000d      	movs	r5, r1
 80055d2:	0c1b      	lsrs	r3, r3, #16
 80055d4:	469a      	mov	sl, r3
 80055d6:	437d      	muls	r5, r7
 80055d8:	44cc      	add	ip, r9
 80055da:	44d4      	add	ip, sl
 80055dc:	9500      	str	r5, [sp, #0]
 80055de:	45e1      	cmp	r9, ip
 80055e0:	d904      	bls.n	80055ec <__aeabi_dmul+0x1b8>
 80055e2:	2380      	movs	r3, #128	; 0x80
 80055e4:	025b      	lsls	r3, r3, #9
 80055e6:	4699      	mov	r9, r3
 80055e8:	444d      	add	r5, r9
 80055ea:	9500      	str	r5, [sp, #0]
 80055ec:	4663      	mov	r3, ip
 80055ee:	0c1b      	lsrs	r3, r3, #16
 80055f0:	001d      	movs	r5, r3
 80055f2:	4663      	mov	r3, ip
 80055f4:	041b      	lsls	r3, r3, #16
 80055f6:	469c      	mov	ip, r3
 80055f8:	4643      	mov	r3, r8
 80055fa:	041b      	lsls	r3, r3, #16
 80055fc:	0c1b      	lsrs	r3, r3, #16
 80055fe:	4698      	mov	r8, r3
 8005600:	4663      	mov	r3, ip
 8005602:	4443      	add	r3, r8
 8005604:	9303      	str	r3, [sp, #12]
 8005606:	0c23      	lsrs	r3, r4, #16
 8005608:	4698      	mov	r8, r3
 800560a:	0033      	movs	r3, r6
 800560c:	0424      	lsls	r4, r4, #16
 800560e:	0c24      	lsrs	r4, r4, #16
 8005610:	4363      	muls	r3, r4
 8005612:	469c      	mov	ip, r3
 8005614:	0023      	movs	r3, r4
 8005616:	437b      	muls	r3, r7
 8005618:	4699      	mov	r9, r3
 800561a:	4643      	mov	r3, r8
 800561c:	435e      	muls	r6, r3
 800561e:	435f      	muls	r7, r3
 8005620:	444e      	add	r6, r9
 8005622:	4663      	mov	r3, ip
 8005624:	46b2      	mov	sl, r6
 8005626:	0c1e      	lsrs	r6, r3, #16
 8005628:	4456      	add	r6, sl
 800562a:	45b1      	cmp	r9, r6
 800562c:	d903      	bls.n	8005636 <__aeabi_dmul+0x202>
 800562e:	2380      	movs	r3, #128	; 0x80
 8005630:	025b      	lsls	r3, r3, #9
 8005632:	4699      	mov	r9, r3
 8005634:	444f      	add	r7, r9
 8005636:	0c33      	lsrs	r3, r6, #16
 8005638:	4699      	mov	r9, r3
 800563a:	003b      	movs	r3, r7
 800563c:	444b      	add	r3, r9
 800563e:	9305      	str	r3, [sp, #20]
 8005640:	4663      	mov	r3, ip
 8005642:	46ac      	mov	ip, r5
 8005644:	041f      	lsls	r7, r3, #16
 8005646:	0c3f      	lsrs	r7, r7, #16
 8005648:	0436      	lsls	r6, r6, #16
 800564a:	19f6      	adds	r6, r6, r7
 800564c:	44b4      	add	ip, r6
 800564e:	4663      	mov	r3, ip
 8005650:	9304      	str	r3, [sp, #16]
 8005652:	465b      	mov	r3, fp
 8005654:	0c1b      	lsrs	r3, r3, #16
 8005656:	469c      	mov	ip, r3
 8005658:	465b      	mov	r3, fp
 800565a:	041f      	lsls	r7, r3, #16
 800565c:	0c3f      	lsrs	r7, r7, #16
 800565e:	003b      	movs	r3, r7
 8005660:	4343      	muls	r3, r0
 8005662:	4699      	mov	r9, r3
 8005664:	4663      	mov	r3, ip
 8005666:	4343      	muls	r3, r0
 8005668:	469a      	mov	sl, r3
 800566a:	464b      	mov	r3, r9
 800566c:	4660      	mov	r0, ip
 800566e:	0c1b      	lsrs	r3, r3, #16
 8005670:	469b      	mov	fp, r3
 8005672:	4348      	muls	r0, r1
 8005674:	4379      	muls	r1, r7
 8005676:	4451      	add	r1, sl
 8005678:	4459      	add	r1, fp
 800567a:	458a      	cmp	sl, r1
 800567c:	d903      	bls.n	8005686 <__aeabi_dmul+0x252>
 800567e:	2380      	movs	r3, #128	; 0x80
 8005680:	025b      	lsls	r3, r3, #9
 8005682:	469a      	mov	sl, r3
 8005684:	4450      	add	r0, sl
 8005686:	0c0b      	lsrs	r3, r1, #16
 8005688:	469a      	mov	sl, r3
 800568a:	464b      	mov	r3, r9
 800568c:	041b      	lsls	r3, r3, #16
 800568e:	0c1b      	lsrs	r3, r3, #16
 8005690:	4699      	mov	r9, r3
 8005692:	003b      	movs	r3, r7
 8005694:	4363      	muls	r3, r4
 8005696:	0409      	lsls	r1, r1, #16
 8005698:	4645      	mov	r5, r8
 800569a:	4449      	add	r1, r9
 800569c:	4699      	mov	r9, r3
 800569e:	4663      	mov	r3, ip
 80056a0:	435c      	muls	r4, r3
 80056a2:	436b      	muls	r3, r5
 80056a4:	469c      	mov	ip, r3
 80056a6:	464b      	mov	r3, r9
 80056a8:	0c1b      	lsrs	r3, r3, #16
 80056aa:	4698      	mov	r8, r3
 80056ac:	436f      	muls	r7, r5
 80056ae:	193f      	adds	r7, r7, r4
 80056b0:	4447      	add	r7, r8
 80056b2:	4450      	add	r0, sl
 80056b4:	42bc      	cmp	r4, r7
 80056b6:	d903      	bls.n	80056c0 <__aeabi_dmul+0x28c>
 80056b8:	2380      	movs	r3, #128	; 0x80
 80056ba:	025b      	lsls	r3, r3, #9
 80056bc:	4698      	mov	r8, r3
 80056be:	44c4      	add	ip, r8
 80056c0:	9b04      	ldr	r3, [sp, #16]
 80056c2:	9d00      	ldr	r5, [sp, #0]
 80056c4:	4698      	mov	r8, r3
 80056c6:	4445      	add	r5, r8
 80056c8:	42b5      	cmp	r5, r6
 80056ca:	41b6      	sbcs	r6, r6
 80056cc:	4273      	negs	r3, r6
 80056ce:	4698      	mov	r8, r3
 80056d0:	464b      	mov	r3, r9
 80056d2:	041e      	lsls	r6, r3, #16
 80056d4:	9b05      	ldr	r3, [sp, #20]
 80056d6:	043c      	lsls	r4, r7, #16
 80056d8:	4699      	mov	r9, r3
 80056da:	0c36      	lsrs	r6, r6, #16
 80056dc:	19a4      	adds	r4, r4, r6
 80056de:	444c      	add	r4, r9
 80056e0:	46a1      	mov	r9, r4
 80056e2:	4683      	mov	fp, r0
 80056e4:	186e      	adds	r6, r5, r1
 80056e6:	44c1      	add	r9, r8
 80056e8:	428e      	cmp	r6, r1
 80056ea:	4189      	sbcs	r1, r1
 80056ec:	44cb      	add	fp, r9
 80056ee:	465d      	mov	r5, fp
 80056f0:	4249      	negs	r1, r1
 80056f2:	186d      	adds	r5, r5, r1
 80056f4:	429c      	cmp	r4, r3
 80056f6:	41a4      	sbcs	r4, r4
 80056f8:	45c1      	cmp	r9, r8
 80056fa:	419b      	sbcs	r3, r3
 80056fc:	4583      	cmp	fp, r0
 80056fe:	4180      	sbcs	r0, r0
 8005700:	428d      	cmp	r5, r1
 8005702:	4189      	sbcs	r1, r1
 8005704:	425b      	negs	r3, r3
 8005706:	4264      	negs	r4, r4
 8005708:	431c      	orrs	r4, r3
 800570a:	4240      	negs	r0, r0
 800570c:	9b03      	ldr	r3, [sp, #12]
 800570e:	4249      	negs	r1, r1
 8005710:	4301      	orrs	r1, r0
 8005712:	0270      	lsls	r0, r6, #9
 8005714:	0c3f      	lsrs	r7, r7, #16
 8005716:	4318      	orrs	r0, r3
 8005718:	19e4      	adds	r4, r4, r7
 800571a:	1e47      	subs	r7, r0, #1
 800571c:	41b8      	sbcs	r0, r7
 800571e:	1864      	adds	r4, r4, r1
 8005720:	4464      	add	r4, ip
 8005722:	0df6      	lsrs	r6, r6, #23
 8005724:	0261      	lsls	r1, r4, #9
 8005726:	4330      	orrs	r0, r6
 8005728:	0dec      	lsrs	r4, r5, #23
 800572a:	026e      	lsls	r6, r5, #9
 800572c:	430c      	orrs	r4, r1
 800572e:	4330      	orrs	r0, r6
 8005730:	01c9      	lsls	r1, r1, #7
 8005732:	d400      	bmi.n	8005736 <__aeabi_dmul+0x302>
 8005734:	e0f1      	b.n	800591a <__aeabi_dmul+0x4e6>
 8005736:	2101      	movs	r1, #1
 8005738:	0843      	lsrs	r3, r0, #1
 800573a:	4001      	ands	r1, r0
 800573c:	430b      	orrs	r3, r1
 800573e:	07e0      	lsls	r0, r4, #31
 8005740:	4318      	orrs	r0, r3
 8005742:	0864      	lsrs	r4, r4, #1
 8005744:	4915      	ldr	r1, [pc, #84]	; (800579c <__aeabi_dmul+0x368>)
 8005746:	9b02      	ldr	r3, [sp, #8]
 8005748:	468c      	mov	ip, r1
 800574a:	4463      	add	r3, ip
 800574c:	2b00      	cmp	r3, #0
 800574e:	dc00      	bgt.n	8005752 <__aeabi_dmul+0x31e>
 8005750:	e097      	b.n	8005882 <__aeabi_dmul+0x44e>
 8005752:	0741      	lsls	r1, r0, #29
 8005754:	d009      	beq.n	800576a <__aeabi_dmul+0x336>
 8005756:	210f      	movs	r1, #15
 8005758:	4001      	ands	r1, r0
 800575a:	2904      	cmp	r1, #4
 800575c:	d005      	beq.n	800576a <__aeabi_dmul+0x336>
 800575e:	1d01      	adds	r1, r0, #4
 8005760:	4281      	cmp	r1, r0
 8005762:	4180      	sbcs	r0, r0
 8005764:	4240      	negs	r0, r0
 8005766:	1824      	adds	r4, r4, r0
 8005768:	0008      	movs	r0, r1
 800576a:	01e1      	lsls	r1, r4, #7
 800576c:	d506      	bpl.n	800577c <__aeabi_dmul+0x348>
 800576e:	2180      	movs	r1, #128	; 0x80
 8005770:	00c9      	lsls	r1, r1, #3
 8005772:	468c      	mov	ip, r1
 8005774:	4b0a      	ldr	r3, [pc, #40]	; (80057a0 <__aeabi_dmul+0x36c>)
 8005776:	401c      	ands	r4, r3
 8005778:	9b02      	ldr	r3, [sp, #8]
 800577a:	4463      	add	r3, ip
 800577c:	4909      	ldr	r1, [pc, #36]	; (80057a4 <__aeabi_dmul+0x370>)
 800577e:	428b      	cmp	r3, r1
 8005780:	dd00      	ble.n	8005784 <__aeabi_dmul+0x350>
 8005782:	e710      	b.n	80055a6 <__aeabi_dmul+0x172>
 8005784:	0761      	lsls	r1, r4, #29
 8005786:	08c5      	lsrs	r5, r0, #3
 8005788:	0264      	lsls	r4, r4, #9
 800578a:	055b      	lsls	r3, r3, #21
 800578c:	430d      	orrs	r5, r1
 800578e:	0b24      	lsrs	r4, r4, #12
 8005790:	0d5b      	lsrs	r3, r3, #21
 8005792:	e6c1      	b.n	8005518 <__aeabi_dmul+0xe4>
 8005794:	000007ff 	.word	0x000007ff
 8005798:	fffffc01 	.word	0xfffffc01
 800579c:	000003ff 	.word	0x000003ff
 80057a0:	feffffff 	.word	0xfeffffff
 80057a4:	000007fe 	.word	0x000007fe
 80057a8:	464b      	mov	r3, r9
 80057aa:	4323      	orrs	r3, r4
 80057ac:	d059      	beq.n	8005862 <__aeabi_dmul+0x42e>
 80057ae:	2c00      	cmp	r4, #0
 80057b0:	d100      	bne.n	80057b4 <__aeabi_dmul+0x380>
 80057b2:	e0a3      	b.n	80058fc <__aeabi_dmul+0x4c8>
 80057b4:	0020      	movs	r0, r4
 80057b6:	f000 fdf9 	bl	80063ac <__clzsi2>
 80057ba:	0001      	movs	r1, r0
 80057bc:	0003      	movs	r3, r0
 80057be:	390b      	subs	r1, #11
 80057c0:	221d      	movs	r2, #29
 80057c2:	1a52      	subs	r2, r2, r1
 80057c4:	4649      	mov	r1, r9
 80057c6:	0018      	movs	r0, r3
 80057c8:	40d1      	lsrs	r1, r2
 80057ca:	464a      	mov	r2, r9
 80057cc:	3808      	subs	r0, #8
 80057ce:	4082      	lsls	r2, r0
 80057d0:	4084      	lsls	r4, r0
 80057d2:	0010      	movs	r0, r2
 80057d4:	430c      	orrs	r4, r1
 80057d6:	4a74      	ldr	r2, [pc, #464]	; (80059a8 <__aeabi_dmul+0x574>)
 80057d8:	1aeb      	subs	r3, r5, r3
 80057da:	4694      	mov	ip, r2
 80057dc:	4642      	mov	r2, r8
 80057de:	4463      	add	r3, ip
 80057e0:	9301      	str	r3, [sp, #4]
 80057e2:	9b01      	ldr	r3, [sp, #4]
 80057e4:	407a      	eors	r2, r7
 80057e6:	3301      	adds	r3, #1
 80057e8:	2100      	movs	r1, #0
 80057ea:	b2d2      	uxtb	r2, r2
 80057ec:	9302      	str	r3, [sp, #8]
 80057ee:	2e0a      	cmp	r6, #10
 80057f0:	dd00      	ble.n	80057f4 <__aeabi_dmul+0x3c0>
 80057f2:	e667      	b.n	80054c4 <__aeabi_dmul+0x90>
 80057f4:	e683      	b.n	80054fe <__aeabi_dmul+0xca>
 80057f6:	465b      	mov	r3, fp
 80057f8:	4303      	orrs	r3, r0
 80057fa:	469a      	mov	sl, r3
 80057fc:	d02a      	beq.n	8005854 <__aeabi_dmul+0x420>
 80057fe:	465b      	mov	r3, fp
 8005800:	2b00      	cmp	r3, #0
 8005802:	d06d      	beq.n	80058e0 <__aeabi_dmul+0x4ac>
 8005804:	4658      	mov	r0, fp
 8005806:	f000 fdd1 	bl	80063ac <__clzsi2>
 800580a:	0001      	movs	r1, r0
 800580c:	0003      	movs	r3, r0
 800580e:	390b      	subs	r1, #11
 8005810:	221d      	movs	r2, #29
 8005812:	1a52      	subs	r2, r2, r1
 8005814:	0021      	movs	r1, r4
 8005816:	0018      	movs	r0, r3
 8005818:	465d      	mov	r5, fp
 800581a:	40d1      	lsrs	r1, r2
 800581c:	3808      	subs	r0, #8
 800581e:	4085      	lsls	r5, r0
 8005820:	000a      	movs	r2, r1
 8005822:	4084      	lsls	r4, r0
 8005824:	432a      	orrs	r2, r5
 8005826:	4693      	mov	fp, r2
 8005828:	46a2      	mov	sl, r4
 800582a:	4d5f      	ldr	r5, [pc, #380]	; (80059a8 <__aeabi_dmul+0x574>)
 800582c:	2600      	movs	r6, #0
 800582e:	1aed      	subs	r5, r5, r3
 8005830:	2300      	movs	r3, #0
 8005832:	9300      	str	r3, [sp, #0]
 8005834:	e625      	b.n	8005482 <__aeabi_dmul+0x4e>
 8005836:	465b      	mov	r3, fp
 8005838:	4303      	orrs	r3, r0
 800583a:	469a      	mov	sl, r3
 800583c:	d105      	bne.n	800584a <__aeabi_dmul+0x416>
 800583e:	2300      	movs	r3, #0
 8005840:	469b      	mov	fp, r3
 8005842:	3302      	adds	r3, #2
 8005844:	2608      	movs	r6, #8
 8005846:	9300      	str	r3, [sp, #0]
 8005848:	e61b      	b.n	8005482 <__aeabi_dmul+0x4e>
 800584a:	2303      	movs	r3, #3
 800584c:	4682      	mov	sl, r0
 800584e:	260c      	movs	r6, #12
 8005850:	9300      	str	r3, [sp, #0]
 8005852:	e616      	b.n	8005482 <__aeabi_dmul+0x4e>
 8005854:	2300      	movs	r3, #0
 8005856:	469b      	mov	fp, r3
 8005858:	3301      	adds	r3, #1
 800585a:	2604      	movs	r6, #4
 800585c:	2500      	movs	r5, #0
 800585e:	9300      	str	r3, [sp, #0]
 8005860:	e60f      	b.n	8005482 <__aeabi_dmul+0x4e>
 8005862:	4642      	mov	r2, r8
 8005864:	3301      	adds	r3, #1
 8005866:	9501      	str	r5, [sp, #4]
 8005868:	431e      	orrs	r6, r3
 800586a:	9b01      	ldr	r3, [sp, #4]
 800586c:	407a      	eors	r2, r7
 800586e:	3301      	adds	r3, #1
 8005870:	2400      	movs	r4, #0
 8005872:	2000      	movs	r0, #0
 8005874:	2101      	movs	r1, #1
 8005876:	b2d2      	uxtb	r2, r2
 8005878:	9302      	str	r3, [sp, #8]
 800587a:	2e0a      	cmp	r6, #10
 800587c:	dd00      	ble.n	8005880 <__aeabi_dmul+0x44c>
 800587e:	e621      	b.n	80054c4 <__aeabi_dmul+0x90>
 8005880:	e63d      	b.n	80054fe <__aeabi_dmul+0xca>
 8005882:	2101      	movs	r1, #1
 8005884:	1ac9      	subs	r1, r1, r3
 8005886:	2938      	cmp	r1, #56	; 0x38
 8005888:	dd00      	ble.n	800588c <__aeabi_dmul+0x458>
 800588a:	e642      	b.n	8005512 <__aeabi_dmul+0xde>
 800588c:	291f      	cmp	r1, #31
 800588e:	dd47      	ble.n	8005920 <__aeabi_dmul+0x4ec>
 8005890:	261f      	movs	r6, #31
 8005892:	0025      	movs	r5, r4
 8005894:	4276      	negs	r6, r6
 8005896:	1af3      	subs	r3, r6, r3
 8005898:	40dd      	lsrs	r5, r3
 800589a:	002b      	movs	r3, r5
 800589c:	2920      	cmp	r1, #32
 800589e:	d005      	beq.n	80058ac <__aeabi_dmul+0x478>
 80058a0:	4942      	ldr	r1, [pc, #264]	; (80059ac <__aeabi_dmul+0x578>)
 80058a2:	9d02      	ldr	r5, [sp, #8]
 80058a4:	468c      	mov	ip, r1
 80058a6:	4465      	add	r5, ip
 80058a8:	40ac      	lsls	r4, r5
 80058aa:	4320      	orrs	r0, r4
 80058ac:	1e41      	subs	r1, r0, #1
 80058ae:	4188      	sbcs	r0, r1
 80058b0:	4318      	orrs	r0, r3
 80058b2:	2307      	movs	r3, #7
 80058b4:	001d      	movs	r5, r3
 80058b6:	2400      	movs	r4, #0
 80058b8:	4005      	ands	r5, r0
 80058ba:	4203      	tst	r3, r0
 80058bc:	d04a      	beq.n	8005954 <__aeabi_dmul+0x520>
 80058be:	230f      	movs	r3, #15
 80058c0:	2400      	movs	r4, #0
 80058c2:	4003      	ands	r3, r0
 80058c4:	2b04      	cmp	r3, #4
 80058c6:	d042      	beq.n	800594e <__aeabi_dmul+0x51a>
 80058c8:	1d03      	adds	r3, r0, #4
 80058ca:	4283      	cmp	r3, r0
 80058cc:	4180      	sbcs	r0, r0
 80058ce:	4240      	negs	r0, r0
 80058d0:	1824      	adds	r4, r4, r0
 80058d2:	0018      	movs	r0, r3
 80058d4:	0223      	lsls	r3, r4, #8
 80058d6:	d53a      	bpl.n	800594e <__aeabi_dmul+0x51a>
 80058d8:	2301      	movs	r3, #1
 80058da:	2400      	movs	r4, #0
 80058dc:	2500      	movs	r5, #0
 80058de:	e61b      	b.n	8005518 <__aeabi_dmul+0xe4>
 80058e0:	f000 fd64 	bl	80063ac <__clzsi2>
 80058e4:	0001      	movs	r1, r0
 80058e6:	0003      	movs	r3, r0
 80058e8:	3115      	adds	r1, #21
 80058ea:	3320      	adds	r3, #32
 80058ec:	291c      	cmp	r1, #28
 80058ee:	dd8f      	ble.n	8005810 <__aeabi_dmul+0x3dc>
 80058f0:	3808      	subs	r0, #8
 80058f2:	2200      	movs	r2, #0
 80058f4:	4084      	lsls	r4, r0
 80058f6:	4692      	mov	sl, r2
 80058f8:	46a3      	mov	fp, r4
 80058fa:	e796      	b.n	800582a <__aeabi_dmul+0x3f6>
 80058fc:	f000 fd56 	bl	80063ac <__clzsi2>
 8005900:	0001      	movs	r1, r0
 8005902:	0003      	movs	r3, r0
 8005904:	3115      	adds	r1, #21
 8005906:	3320      	adds	r3, #32
 8005908:	291c      	cmp	r1, #28
 800590a:	dc00      	bgt.n	800590e <__aeabi_dmul+0x4da>
 800590c:	e758      	b.n	80057c0 <__aeabi_dmul+0x38c>
 800590e:	0002      	movs	r2, r0
 8005910:	464c      	mov	r4, r9
 8005912:	3a08      	subs	r2, #8
 8005914:	2000      	movs	r0, #0
 8005916:	4094      	lsls	r4, r2
 8005918:	e75d      	b.n	80057d6 <__aeabi_dmul+0x3a2>
 800591a:	9b01      	ldr	r3, [sp, #4]
 800591c:	9302      	str	r3, [sp, #8]
 800591e:	e711      	b.n	8005744 <__aeabi_dmul+0x310>
 8005920:	4b23      	ldr	r3, [pc, #140]	; (80059b0 <__aeabi_dmul+0x57c>)
 8005922:	0026      	movs	r6, r4
 8005924:	469c      	mov	ip, r3
 8005926:	0003      	movs	r3, r0
 8005928:	9d02      	ldr	r5, [sp, #8]
 800592a:	40cb      	lsrs	r3, r1
 800592c:	4465      	add	r5, ip
 800592e:	40ae      	lsls	r6, r5
 8005930:	431e      	orrs	r6, r3
 8005932:	0003      	movs	r3, r0
 8005934:	40ab      	lsls	r3, r5
 8005936:	1e58      	subs	r0, r3, #1
 8005938:	4183      	sbcs	r3, r0
 800593a:	0030      	movs	r0, r6
 800593c:	4318      	orrs	r0, r3
 800593e:	40cc      	lsrs	r4, r1
 8005940:	0743      	lsls	r3, r0, #29
 8005942:	d0c7      	beq.n	80058d4 <__aeabi_dmul+0x4a0>
 8005944:	230f      	movs	r3, #15
 8005946:	4003      	ands	r3, r0
 8005948:	2b04      	cmp	r3, #4
 800594a:	d1bd      	bne.n	80058c8 <__aeabi_dmul+0x494>
 800594c:	e7c2      	b.n	80058d4 <__aeabi_dmul+0x4a0>
 800594e:	0765      	lsls	r5, r4, #29
 8005950:	0264      	lsls	r4, r4, #9
 8005952:	0b24      	lsrs	r4, r4, #12
 8005954:	08c0      	lsrs	r0, r0, #3
 8005956:	2300      	movs	r3, #0
 8005958:	4305      	orrs	r5, r0
 800595a:	e5dd      	b.n	8005518 <__aeabi_dmul+0xe4>
 800595c:	2500      	movs	r5, #0
 800595e:	2302      	movs	r3, #2
 8005960:	2e0f      	cmp	r6, #15
 8005962:	d10c      	bne.n	800597e <__aeabi_dmul+0x54a>
 8005964:	2480      	movs	r4, #128	; 0x80
 8005966:	465b      	mov	r3, fp
 8005968:	0324      	lsls	r4, r4, #12
 800596a:	4223      	tst	r3, r4
 800596c:	d00e      	beq.n	800598c <__aeabi_dmul+0x558>
 800596e:	4221      	tst	r1, r4
 8005970:	d10c      	bne.n	800598c <__aeabi_dmul+0x558>
 8005972:	430c      	orrs	r4, r1
 8005974:	0324      	lsls	r4, r4, #12
 8005976:	003a      	movs	r2, r7
 8005978:	4b0e      	ldr	r3, [pc, #56]	; (80059b4 <__aeabi_dmul+0x580>)
 800597a:	0b24      	lsrs	r4, r4, #12
 800597c:	e5cc      	b.n	8005518 <__aeabi_dmul+0xe4>
 800597e:	2e0b      	cmp	r6, #11
 8005980:	d000      	beq.n	8005984 <__aeabi_dmul+0x550>
 8005982:	e5a2      	b.n	80054ca <__aeabi_dmul+0x96>
 8005984:	468b      	mov	fp, r1
 8005986:	46aa      	mov	sl, r5
 8005988:	9300      	str	r3, [sp, #0]
 800598a:	e5f7      	b.n	800557c <__aeabi_dmul+0x148>
 800598c:	2480      	movs	r4, #128	; 0x80
 800598e:	465b      	mov	r3, fp
 8005990:	0324      	lsls	r4, r4, #12
 8005992:	431c      	orrs	r4, r3
 8005994:	0324      	lsls	r4, r4, #12
 8005996:	4642      	mov	r2, r8
 8005998:	4655      	mov	r5, sl
 800599a:	4b06      	ldr	r3, [pc, #24]	; (80059b4 <__aeabi_dmul+0x580>)
 800599c:	0b24      	lsrs	r4, r4, #12
 800599e:	e5bb      	b.n	8005518 <__aeabi_dmul+0xe4>
 80059a0:	464d      	mov	r5, r9
 80059a2:	0021      	movs	r1, r4
 80059a4:	2303      	movs	r3, #3
 80059a6:	e7db      	b.n	8005960 <__aeabi_dmul+0x52c>
 80059a8:	fffffc0d 	.word	0xfffffc0d
 80059ac:	0000043e 	.word	0x0000043e
 80059b0:	0000041e 	.word	0x0000041e
 80059b4:	000007ff 	.word	0x000007ff

080059b8 <__aeabi_dsub>:
 80059b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059ba:	4657      	mov	r7, sl
 80059bc:	464e      	mov	r6, r9
 80059be:	4645      	mov	r5, r8
 80059c0:	46de      	mov	lr, fp
 80059c2:	b5e0      	push	{r5, r6, r7, lr}
 80059c4:	000d      	movs	r5, r1
 80059c6:	0004      	movs	r4, r0
 80059c8:	0019      	movs	r1, r3
 80059ca:	0010      	movs	r0, r2
 80059cc:	032b      	lsls	r3, r5, #12
 80059ce:	0a5b      	lsrs	r3, r3, #9
 80059d0:	0f62      	lsrs	r2, r4, #29
 80059d2:	431a      	orrs	r2, r3
 80059d4:	00e3      	lsls	r3, r4, #3
 80059d6:	030c      	lsls	r4, r1, #12
 80059d8:	0a64      	lsrs	r4, r4, #9
 80059da:	0f47      	lsrs	r7, r0, #29
 80059dc:	4327      	orrs	r7, r4
 80059de:	4cd0      	ldr	r4, [pc, #832]	; (8005d20 <__aeabi_dsub+0x368>)
 80059e0:	006e      	lsls	r6, r5, #1
 80059e2:	4691      	mov	r9, r2
 80059e4:	b083      	sub	sp, #12
 80059e6:	004a      	lsls	r2, r1, #1
 80059e8:	00c0      	lsls	r0, r0, #3
 80059ea:	4698      	mov	r8, r3
 80059ec:	46a2      	mov	sl, r4
 80059ee:	0d76      	lsrs	r6, r6, #21
 80059f0:	0fed      	lsrs	r5, r5, #31
 80059f2:	0d52      	lsrs	r2, r2, #21
 80059f4:	0fc9      	lsrs	r1, r1, #31
 80059f6:	9001      	str	r0, [sp, #4]
 80059f8:	42a2      	cmp	r2, r4
 80059fa:	d100      	bne.n	80059fe <__aeabi_dsub+0x46>
 80059fc:	e0b9      	b.n	8005b72 <__aeabi_dsub+0x1ba>
 80059fe:	2401      	movs	r4, #1
 8005a00:	4061      	eors	r1, r4
 8005a02:	468b      	mov	fp, r1
 8005a04:	428d      	cmp	r5, r1
 8005a06:	d100      	bne.n	8005a0a <__aeabi_dsub+0x52>
 8005a08:	e08d      	b.n	8005b26 <__aeabi_dsub+0x16e>
 8005a0a:	1ab4      	subs	r4, r6, r2
 8005a0c:	46a4      	mov	ip, r4
 8005a0e:	2c00      	cmp	r4, #0
 8005a10:	dc00      	bgt.n	8005a14 <__aeabi_dsub+0x5c>
 8005a12:	e0b7      	b.n	8005b84 <__aeabi_dsub+0x1cc>
 8005a14:	2a00      	cmp	r2, #0
 8005a16:	d100      	bne.n	8005a1a <__aeabi_dsub+0x62>
 8005a18:	e0cb      	b.n	8005bb2 <__aeabi_dsub+0x1fa>
 8005a1a:	4ac1      	ldr	r2, [pc, #772]	; (8005d20 <__aeabi_dsub+0x368>)
 8005a1c:	4296      	cmp	r6, r2
 8005a1e:	d100      	bne.n	8005a22 <__aeabi_dsub+0x6a>
 8005a20:	e186      	b.n	8005d30 <__aeabi_dsub+0x378>
 8005a22:	2280      	movs	r2, #128	; 0x80
 8005a24:	0412      	lsls	r2, r2, #16
 8005a26:	4317      	orrs	r7, r2
 8005a28:	4662      	mov	r2, ip
 8005a2a:	2a38      	cmp	r2, #56	; 0x38
 8005a2c:	dd00      	ble.n	8005a30 <__aeabi_dsub+0x78>
 8005a2e:	e1a4      	b.n	8005d7a <__aeabi_dsub+0x3c2>
 8005a30:	2a1f      	cmp	r2, #31
 8005a32:	dd00      	ble.n	8005a36 <__aeabi_dsub+0x7e>
 8005a34:	e21d      	b.n	8005e72 <__aeabi_dsub+0x4ba>
 8005a36:	4661      	mov	r1, ip
 8005a38:	2220      	movs	r2, #32
 8005a3a:	003c      	movs	r4, r7
 8005a3c:	1a52      	subs	r2, r2, r1
 8005a3e:	0001      	movs	r1, r0
 8005a40:	4090      	lsls	r0, r2
 8005a42:	4094      	lsls	r4, r2
 8005a44:	1e42      	subs	r2, r0, #1
 8005a46:	4190      	sbcs	r0, r2
 8005a48:	4662      	mov	r2, ip
 8005a4a:	46a0      	mov	r8, r4
 8005a4c:	4664      	mov	r4, ip
 8005a4e:	40d7      	lsrs	r7, r2
 8005a50:	464a      	mov	r2, r9
 8005a52:	40e1      	lsrs	r1, r4
 8005a54:	4644      	mov	r4, r8
 8005a56:	1bd2      	subs	r2, r2, r7
 8005a58:	4691      	mov	r9, r2
 8005a5a:	430c      	orrs	r4, r1
 8005a5c:	4304      	orrs	r4, r0
 8005a5e:	1b1c      	subs	r4, r3, r4
 8005a60:	42a3      	cmp	r3, r4
 8005a62:	4192      	sbcs	r2, r2
 8005a64:	464b      	mov	r3, r9
 8005a66:	4252      	negs	r2, r2
 8005a68:	1a9b      	subs	r3, r3, r2
 8005a6a:	469a      	mov	sl, r3
 8005a6c:	4653      	mov	r3, sl
 8005a6e:	021b      	lsls	r3, r3, #8
 8005a70:	d400      	bmi.n	8005a74 <__aeabi_dsub+0xbc>
 8005a72:	e12b      	b.n	8005ccc <__aeabi_dsub+0x314>
 8005a74:	4653      	mov	r3, sl
 8005a76:	025a      	lsls	r2, r3, #9
 8005a78:	0a53      	lsrs	r3, r2, #9
 8005a7a:	469a      	mov	sl, r3
 8005a7c:	4653      	mov	r3, sl
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d100      	bne.n	8005a84 <__aeabi_dsub+0xcc>
 8005a82:	e166      	b.n	8005d52 <__aeabi_dsub+0x39a>
 8005a84:	4650      	mov	r0, sl
 8005a86:	f000 fc91 	bl	80063ac <__clzsi2>
 8005a8a:	0003      	movs	r3, r0
 8005a8c:	3b08      	subs	r3, #8
 8005a8e:	2220      	movs	r2, #32
 8005a90:	0020      	movs	r0, r4
 8005a92:	1ad2      	subs	r2, r2, r3
 8005a94:	4651      	mov	r1, sl
 8005a96:	40d0      	lsrs	r0, r2
 8005a98:	4099      	lsls	r1, r3
 8005a9a:	0002      	movs	r2, r0
 8005a9c:	409c      	lsls	r4, r3
 8005a9e:	430a      	orrs	r2, r1
 8005aa0:	429e      	cmp	r6, r3
 8005aa2:	dd00      	ble.n	8005aa6 <__aeabi_dsub+0xee>
 8005aa4:	e164      	b.n	8005d70 <__aeabi_dsub+0x3b8>
 8005aa6:	1b9b      	subs	r3, r3, r6
 8005aa8:	1c59      	adds	r1, r3, #1
 8005aaa:	291f      	cmp	r1, #31
 8005aac:	dd00      	ble.n	8005ab0 <__aeabi_dsub+0xf8>
 8005aae:	e0fe      	b.n	8005cae <__aeabi_dsub+0x2f6>
 8005ab0:	2320      	movs	r3, #32
 8005ab2:	0010      	movs	r0, r2
 8005ab4:	0026      	movs	r6, r4
 8005ab6:	1a5b      	subs	r3, r3, r1
 8005ab8:	409c      	lsls	r4, r3
 8005aba:	4098      	lsls	r0, r3
 8005abc:	40ce      	lsrs	r6, r1
 8005abe:	40ca      	lsrs	r2, r1
 8005ac0:	1e63      	subs	r3, r4, #1
 8005ac2:	419c      	sbcs	r4, r3
 8005ac4:	4330      	orrs	r0, r6
 8005ac6:	4692      	mov	sl, r2
 8005ac8:	2600      	movs	r6, #0
 8005aca:	4304      	orrs	r4, r0
 8005acc:	0763      	lsls	r3, r4, #29
 8005ace:	d009      	beq.n	8005ae4 <__aeabi_dsub+0x12c>
 8005ad0:	230f      	movs	r3, #15
 8005ad2:	4023      	ands	r3, r4
 8005ad4:	2b04      	cmp	r3, #4
 8005ad6:	d005      	beq.n	8005ae4 <__aeabi_dsub+0x12c>
 8005ad8:	1d23      	adds	r3, r4, #4
 8005ada:	42a3      	cmp	r3, r4
 8005adc:	41a4      	sbcs	r4, r4
 8005ade:	4264      	negs	r4, r4
 8005ae0:	44a2      	add	sl, r4
 8005ae2:	001c      	movs	r4, r3
 8005ae4:	4653      	mov	r3, sl
 8005ae6:	021b      	lsls	r3, r3, #8
 8005ae8:	d400      	bmi.n	8005aec <__aeabi_dsub+0x134>
 8005aea:	e0f2      	b.n	8005cd2 <__aeabi_dsub+0x31a>
 8005aec:	4b8c      	ldr	r3, [pc, #560]	; (8005d20 <__aeabi_dsub+0x368>)
 8005aee:	3601      	adds	r6, #1
 8005af0:	429e      	cmp	r6, r3
 8005af2:	d100      	bne.n	8005af6 <__aeabi_dsub+0x13e>
 8005af4:	e10f      	b.n	8005d16 <__aeabi_dsub+0x35e>
 8005af6:	4653      	mov	r3, sl
 8005af8:	498a      	ldr	r1, [pc, #552]	; (8005d24 <__aeabi_dsub+0x36c>)
 8005afa:	08e4      	lsrs	r4, r4, #3
 8005afc:	400b      	ands	r3, r1
 8005afe:	0019      	movs	r1, r3
 8005b00:	075b      	lsls	r3, r3, #29
 8005b02:	4323      	orrs	r3, r4
 8005b04:	0572      	lsls	r2, r6, #21
 8005b06:	024c      	lsls	r4, r1, #9
 8005b08:	0b24      	lsrs	r4, r4, #12
 8005b0a:	0d52      	lsrs	r2, r2, #21
 8005b0c:	0512      	lsls	r2, r2, #20
 8005b0e:	4322      	orrs	r2, r4
 8005b10:	07ed      	lsls	r5, r5, #31
 8005b12:	432a      	orrs	r2, r5
 8005b14:	0018      	movs	r0, r3
 8005b16:	0011      	movs	r1, r2
 8005b18:	b003      	add	sp, #12
 8005b1a:	bcf0      	pop	{r4, r5, r6, r7}
 8005b1c:	46bb      	mov	fp, r7
 8005b1e:	46b2      	mov	sl, r6
 8005b20:	46a9      	mov	r9, r5
 8005b22:	46a0      	mov	r8, r4
 8005b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b26:	1ab4      	subs	r4, r6, r2
 8005b28:	46a4      	mov	ip, r4
 8005b2a:	2c00      	cmp	r4, #0
 8005b2c:	dd59      	ble.n	8005be2 <__aeabi_dsub+0x22a>
 8005b2e:	2a00      	cmp	r2, #0
 8005b30:	d100      	bne.n	8005b34 <__aeabi_dsub+0x17c>
 8005b32:	e0b0      	b.n	8005c96 <__aeabi_dsub+0x2de>
 8005b34:	4556      	cmp	r6, sl
 8005b36:	d100      	bne.n	8005b3a <__aeabi_dsub+0x182>
 8005b38:	e0fa      	b.n	8005d30 <__aeabi_dsub+0x378>
 8005b3a:	2280      	movs	r2, #128	; 0x80
 8005b3c:	0412      	lsls	r2, r2, #16
 8005b3e:	4317      	orrs	r7, r2
 8005b40:	4662      	mov	r2, ip
 8005b42:	2a38      	cmp	r2, #56	; 0x38
 8005b44:	dd00      	ble.n	8005b48 <__aeabi_dsub+0x190>
 8005b46:	e0d4      	b.n	8005cf2 <__aeabi_dsub+0x33a>
 8005b48:	2a1f      	cmp	r2, #31
 8005b4a:	dc00      	bgt.n	8005b4e <__aeabi_dsub+0x196>
 8005b4c:	e1c0      	b.n	8005ed0 <__aeabi_dsub+0x518>
 8005b4e:	0039      	movs	r1, r7
 8005b50:	3a20      	subs	r2, #32
 8005b52:	40d1      	lsrs	r1, r2
 8005b54:	4662      	mov	r2, ip
 8005b56:	2a20      	cmp	r2, #32
 8005b58:	d006      	beq.n	8005b68 <__aeabi_dsub+0x1b0>
 8005b5a:	4664      	mov	r4, ip
 8005b5c:	2240      	movs	r2, #64	; 0x40
 8005b5e:	1b12      	subs	r2, r2, r4
 8005b60:	003c      	movs	r4, r7
 8005b62:	4094      	lsls	r4, r2
 8005b64:	4304      	orrs	r4, r0
 8005b66:	9401      	str	r4, [sp, #4]
 8005b68:	9c01      	ldr	r4, [sp, #4]
 8005b6a:	1e62      	subs	r2, r4, #1
 8005b6c:	4194      	sbcs	r4, r2
 8005b6e:	430c      	orrs	r4, r1
 8005b70:	e0c3      	b.n	8005cfa <__aeabi_dsub+0x342>
 8005b72:	003c      	movs	r4, r7
 8005b74:	4304      	orrs	r4, r0
 8005b76:	d02b      	beq.n	8005bd0 <__aeabi_dsub+0x218>
 8005b78:	468b      	mov	fp, r1
 8005b7a:	428d      	cmp	r5, r1
 8005b7c:	d02e      	beq.n	8005bdc <__aeabi_dsub+0x224>
 8005b7e:	4c6a      	ldr	r4, [pc, #424]	; (8005d28 <__aeabi_dsub+0x370>)
 8005b80:	46a4      	mov	ip, r4
 8005b82:	44b4      	add	ip, r6
 8005b84:	4664      	mov	r4, ip
 8005b86:	2c00      	cmp	r4, #0
 8005b88:	d05f      	beq.n	8005c4a <__aeabi_dsub+0x292>
 8005b8a:	1b94      	subs	r4, r2, r6
 8005b8c:	46a4      	mov	ip, r4
 8005b8e:	2e00      	cmp	r6, #0
 8005b90:	d000      	beq.n	8005b94 <__aeabi_dsub+0x1dc>
 8005b92:	e120      	b.n	8005dd6 <__aeabi_dsub+0x41e>
 8005b94:	464c      	mov	r4, r9
 8005b96:	431c      	orrs	r4, r3
 8005b98:	d100      	bne.n	8005b9c <__aeabi_dsub+0x1e4>
 8005b9a:	e1c7      	b.n	8005f2c <__aeabi_dsub+0x574>
 8005b9c:	4661      	mov	r1, ip
 8005b9e:	1e4c      	subs	r4, r1, #1
 8005ba0:	2901      	cmp	r1, #1
 8005ba2:	d100      	bne.n	8005ba6 <__aeabi_dsub+0x1ee>
 8005ba4:	e223      	b.n	8005fee <__aeabi_dsub+0x636>
 8005ba6:	4d5e      	ldr	r5, [pc, #376]	; (8005d20 <__aeabi_dsub+0x368>)
 8005ba8:	45ac      	cmp	ip, r5
 8005baa:	d100      	bne.n	8005bae <__aeabi_dsub+0x1f6>
 8005bac:	e1d8      	b.n	8005f60 <__aeabi_dsub+0x5a8>
 8005bae:	46a4      	mov	ip, r4
 8005bb0:	e11a      	b.n	8005de8 <__aeabi_dsub+0x430>
 8005bb2:	003a      	movs	r2, r7
 8005bb4:	4302      	orrs	r2, r0
 8005bb6:	d100      	bne.n	8005bba <__aeabi_dsub+0x202>
 8005bb8:	e0e4      	b.n	8005d84 <__aeabi_dsub+0x3cc>
 8005bba:	0022      	movs	r2, r4
 8005bbc:	3a01      	subs	r2, #1
 8005bbe:	2c01      	cmp	r4, #1
 8005bc0:	d100      	bne.n	8005bc4 <__aeabi_dsub+0x20c>
 8005bc2:	e1c3      	b.n	8005f4c <__aeabi_dsub+0x594>
 8005bc4:	4956      	ldr	r1, [pc, #344]	; (8005d20 <__aeabi_dsub+0x368>)
 8005bc6:	428c      	cmp	r4, r1
 8005bc8:	d100      	bne.n	8005bcc <__aeabi_dsub+0x214>
 8005bca:	e0b1      	b.n	8005d30 <__aeabi_dsub+0x378>
 8005bcc:	4694      	mov	ip, r2
 8005bce:	e72b      	b.n	8005a28 <__aeabi_dsub+0x70>
 8005bd0:	2401      	movs	r4, #1
 8005bd2:	4061      	eors	r1, r4
 8005bd4:	468b      	mov	fp, r1
 8005bd6:	428d      	cmp	r5, r1
 8005bd8:	d000      	beq.n	8005bdc <__aeabi_dsub+0x224>
 8005bda:	e716      	b.n	8005a0a <__aeabi_dsub+0x52>
 8005bdc:	4952      	ldr	r1, [pc, #328]	; (8005d28 <__aeabi_dsub+0x370>)
 8005bde:	468c      	mov	ip, r1
 8005be0:	44b4      	add	ip, r6
 8005be2:	4664      	mov	r4, ip
 8005be4:	2c00      	cmp	r4, #0
 8005be6:	d100      	bne.n	8005bea <__aeabi_dsub+0x232>
 8005be8:	e0d3      	b.n	8005d92 <__aeabi_dsub+0x3da>
 8005bea:	1b91      	subs	r1, r2, r6
 8005bec:	468c      	mov	ip, r1
 8005bee:	2e00      	cmp	r6, #0
 8005bf0:	d100      	bne.n	8005bf4 <__aeabi_dsub+0x23c>
 8005bf2:	e15e      	b.n	8005eb2 <__aeabi_dsub+0x4fa>
 8005bf4:	494a      	ldr	r1, [pc, #296]	; (8005d20 <__aeabi_dsub+0x368>)
 8005bf6:	428a      	cmp	r2, r1
 8005bf8:	d100      	bne.n	8005bfc <__aeabi_dsub+0x244>
 8005bfa:	e1be      	b.n	8005f7a <__aeabi_dsub+0x5c2>
 8005bfc:	2180      	movs	r1, #128	; 0x80
 8005bfe:	464c      	mov	r4, r9
 8005c00:	0409      	lsls	r1, r1, #16
 8005c02:	430c      	orrs	r4, r1
 8005c04:	46a1      	mov	r9, r4
 8005c06:	4661      	mov	r1, ip
 8005c08:	2938      	cmp	r1, #56	; 0x38
 8005c0a:	dd00      	ble.n	8005c0e <__aeabi_dsub+0x256>
 8005c0c:	e1ba      	b.n	8005f84 <__aeabi_dsub+0x5cc>
 8005c0e:	291f      	cmp	r1, #31
 8005c10:	dd00      	ble.n	8005c14 <__aeabi_dsub+0x25c>
 8005c12:	e227      	b.n	8006064 <__aeabi_dsub+0x6ac>
 8005c14:	2420      	movs	r4, #32
 8005c16:	1a64      	subs	r4, r4, r1
 8005c18:	4649      	mov	r1, r9
 8005c1a:	40a1      	lsls	r1, r4
 8005c1c:	001e      	movs	r6, r3
 8005c1e:	4688      	mov	r8, r1
 8005c20:	4661      	mov	r1, ip
 8005c22:	40a3      	lsls	r3, r4
 8005c24:	40ce      	lsrs	r6, r1
 8005c26:	4641      	mov	r1, r8
 8005c28:	1e5c      	subs	r4, r3, #1
 8005c2a:	41a3      	sbcs	r3, r4
 8005c2c:	4331      	orrs	r1, r6
 8005c2e:	4319      	orrs	r1, r3
 8005c30:	000c      	movs	r4, r1
 8005c32:	4663      	mov	r3, ip
 8005c34:	4649      	mov	r1, r9
 8005c36:	40d9      	lsrs	r1, r3
 8005c38:	187f      	adds	r7, r7, r1
 8005c3a:	1824      	adds	r4, r4, r0
 8005c3c:	4284      	cmp	r4, r0
 8005c3e:	419b      	sbcs	r3, r3
 8005c40:	425b      	negs	r3, r3
 8005c42:	469a      	mov	sl, r3
 8005c44:	0016      	movs	r6, r2
 8005c46:	44ba      	add	sl, r7
 8005c48:	e05d      	b.n	8005d06 <__aeabi_dsub+0x34e>
 8005c4a:	4c38      	ldr	r4, [pc, #224]	; (8005d2c <__aeabi_dsub+0x374>)
 8005c4c:	1c72      	adds	r2, r6, #1
 8005c4e:	4222      	tst	r2, r4
 8005c50:	d000      	beq.n	8005c54 <__aeabi_dsub+0x29c>
 8005c52:	e0df      	b.n	8005e14 <__aeabi_dsub+0x45c>
 8005c54:	464a      	mov	r2, r9
 8005c56:	431a      	orrs	r2, r3
 8005c58:	2e00      	cmp	r6, #0
 8005c5a:	d000      	beq.n	8005c5e <__aeabi_dsub+0x2a6>
 8005c5c:	e15c      	b.n	8005f18 <__aeabi_dsub+0x560>
 8005c5e:	2a00      	cmp	r2, #0
 8005c60:	d100      	bne.n	8005c64 <__aeabi_dsub+0x2ac>
 8005c62:	e1cf      	b.n	8006004 <__aeabi_dsub+0x64c>
 8005c64:	003a      	movs	r2, r7
 8005c66:	4302      	orrs	r2, r0
 8005c68:	d100      	bne.n	8005c6c <__aeabi_dsub+0x2b4>
 8005c6a:	e17f      	b.n	8005f6c <__aeabi_dsub+0x5b4>
 8005c6c:	1a1c      	subs	r4, r3, r0
 8005c6e:	464a      	mov	r2, r9
 8005c70:	42a3      	cmp	r3, r4
 8005c72:	4189      	sbcs	r1, r1
 8005c74:	1bd2      	subs	r2, r2, r7
 8005c76:	4249      	negs	r1, r1
 8005c78:	1a52      	subs	r2, r2, r1
 8005c7a:	4692      	mov	sl, r2
 8005c7c:	0212      	lsls	r2, r2, #8
 8005c7e:	d400      	bmi.n	8005c82 <__aeabi_dsub+0x2ca>
 8005c80:	e20a      	b.n	8006098 <__aeabi_dsub+0x6e0>
 8005c82:	1ac4      	subs	r4, r0, r3
 8005c84:	42a0      	cmp	r0, r4
 8005c86:	4180      	sbcs	r0, r0
 8005c88:	464b      	mov	r3, r9
 8005c8a:	4240      	negs	r0, r0
 8005c8c:	1aff      	subs	r7, r7, r3
 8005c8e:	1a3b      	subs	r3, r7, r0
 8005c90:	469a      	mov	sl, r3
 8005c92:	465d      	mov	r5, fp
 8005c94:	e71a      	b.n	8005acc <__aeabi_dsub+0x114>
 8005c96:	003a      	movs	r2, r7
 8005c98:	4302      	orrs	r2, r0
 8005c9a:	d073      	beq.n	8005d84 <__aeabi_dsub+0x3cc>
 8005c9c:	0022      	movs	r2, r4
 8005c9e:	3a01      	subs	r2, #1
 8005ca0:	2c01      	cmp	r4, #1
 8005ca2:	d100      	bne.n	8005ca6 <__aeabi_dsub+0x2ee>
 8005ca4:	e0cb      	b.n	8005e3e <__aeabi_dsub+0x486>
 8005ca6:	4554      	cmp	r4, sl
 8005ca8:	d042      	beq.n	8005d30 <__aeabi_dsub+0x378>
 8005caa:	4694      	mov	ip, r2
 8005cac:	e748      	b.n	8005b40 <__aeabi_dsub+0x188>
 8005cae:	0010      	movs	r0, r2
 8005cb0:	3b1f      	subs	r3, #31
 8005cb2:	40d8      	lsrs	r0, r3
 8005cb4:	2920      	cmp	r1, #32
 8005cb6:	d003      	beq.n	8005cc0 <__aeabi_dsub+0x308>
 8005cb8:	2340      	movs	r3, #64	; 0x40
 8005cba:	1a5b      	subs	r3, r3, r1
 8005cbc:	409a      	lsls	r2, r3
 8005cbe:	4314      	orrs	r4, r2
 8005cc0:	1e63      	subs	r3, r4, #1
 8005cc2:	419c      	sbcs	r4, r3
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	2600      	movs	r6, #0
 8005cc8:	469a      	mov	sl, r3
 8005cca:	4304      	orrs	r4, r0
 8005ccc:	0763      	lsls	r3, r4, #29
 8005cce:	d000      	beq.n	8005cd2 <__aeabi_dsub+0x31a>
 8005cd0:	e6fe      	b.n	8005ad0 <__aeabi_dsub+0x118>
 8005cd2:	4652      	mov	r2, sl
 8005cd4:	08e3      	lsrs	r3, r4, #3
 8005cd6:	0752      	lsls	r2, r2, #29
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	4652      	mov	r2, sl
 8005cdc:	46b4      	mov	ip, r6
 8005cde:	08d2      	lsrs	r2, r2, #3
 8005ce0:	490f      	ldr	r1, [pc, #60]	; (8005d20 <__aeabi_dsub+0x368>)
 8005ce2:	458c      	cmp	ip, r1
 8005ce4:	d02a      	beq.n	8005d3c <__aeabi_dsub+0x384>
 8005ce6:	0312      	lsls	r2, r2, #12
 8005ce8:	0b14      	lsrs	r4, r2, #12
 8005cea:	4662      	mov	r2, ip
 8005cec:	0552      	lsls	r2, r2, #21
 8005cee:	0d52      	lsrs	r2, r2, #21
 8005cf0:	e70c      	b.n	8005b0c <__aeabi_dsub+0x154>
 8005cf2:	003c      	movs	r4, r7
 8005cf4:	4304      	orrs	r4, r0
 8005cf6:	1e62      	subs	r2, r4, #1
 8005cf8:	4194      	sbcs	r4, r2
 8005cfa:	18e4      	adds	r4, r4, r3
 8005cfc:	429c      	cmp	r4, r3
 8005cfe:	4192      	sbcs	r2, r2
 8005d00:	4252      	negs	r2, r2
 8005d02:	444a      	add	r2, r9
 8005d04:	4692      	mov	sl, r2
 8005d06:	4653      	mov	r3, sl
 8005d08:	021b      	lsls	r3, r3, #8
 8005d0a:	d5df      	bpl.n	8005ccc <__aeabi_dsub+0x314>
 8005d0c:	4b04      	ldr	r3, [pc, #16]	; (8005d20 <__aeabi_dsub+0x368>)
 8005d0e:	3601      	adds	r6, #1
 8005d10:	429e      	cmp	r6, r3
 8005d12:	d000      	beq.n	8005d16 <__aeabi_dsub+0x35e>
 8005d14:	e0a0      	b.n	8005e58 <__aeabi_dsub+0x4a0>
 8005d16:	0032      	movs	r2, r6
 8005d18:	2400      	movs	r4, #0
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	e6f6      	b.n	8005b0c <__aeabi_dsub+0x154>
 8005d1e:	46c0      	nop			; (mov r8, r8)
 8005d20:	000007ff 	.word	0x000007ff
 8005d24:	ff7fffff 	.word	0xff7fffff
 8005d28:	fffff801 	.word	0xfffff801
 8005d2c:	000007fe 	.word	0x000007fe
 8005d30:	08db      	lsrs	r3, r3, #3
 8005d32:	464a      	mov	r2, r9
 8005d34:	0752      	lsls	r2, r2, #29
 8005d36:	4313      	orrs	r3, r2
 8005d38:	464a      	mov	r2, r9
 8005d3a:	08d2      	lsrs	r2, r2, #3
 8005d3c:	0019      	movs	r1, r3
 8005d3e:	4311      	orrs	r1, r2
 8005d40:	d100      	bne.n	8005d44 <__aeabi_dsub+0x38c>
 8005d42:	e1b5      	b.n	80060b0 <__aeabi_dsub+0x6f8>
 8005d44:	2480      	movs	r4, #128	; 0x80
 8005d46:	0324      	lsls	r4, r4, #12
 8005d48:	4314      	orrs	r4, r2
 8005d4a:	0324      	lsls	r4, r4, #12
 8005d4c:	4ad5      	ldr	r2, [pc, #852]	; (80060a4 <__aeabi_dsub+0x6ec>)
 8005d4e:	0b24      	lsrs	r4, r4, #12
 8005d50:	e6dc      	b.n	8005b0c <__aeabi_dsub+0x154>
 8005d52:	0020      	movs	r0, r4
 8005d54:	f000 fb2a 	bl	80063ac <__clzsi2>
 8005d58:	0003      	movs	r3, r0
 8005d5a:	3318      	adds	r3, #24
 8005d5c:	2b1f      	cmp	r3, #31
 8005d5e:	dc00      	bgt.n	8005d62 <__aeabi_dsub+0x3aa>
 8005d60:	e695      	b.n	8005a8e <__aeabi_dsub+0xd6>
 8005d62:	0022      	movs	r2, r4
 8005d64:	3808      	subs	r0, #8
 8005d66:	4082      	lsls	r2, r0
 8005d68:	2400      	movs	r4, #0
 8005d6a:	429e      	cmp	r6, r3
 8005d6c:	dc00      	bgt.n	8005d70 <__aeabi_dsub+0x3b8>
 8005d6e:	e69a      	b.n	8005aa6 <__aeabi_dsub+0xee>
 8005d70:	1af6      	subs	r6, r6, r3
 8005d72:	4bcd      	ldr	r3, [pc, #820]	; (80060a8 <__aeabi_dsub+0x6f0>)
 8005d74:	401a      	ands	r2, r3
 8005d76:	4692      	mov	sl, r2
 8005d78:	e6a8      	b.n	8005acc <__aeabi_dsub+0x114>
 8005d7a:	003c      	movs	r4, r7
 8005d7c:	4304      	orrs	r4, r0
 8005d7e:	1e62      	subs	r2, r4, #1
 8005d80:	4194      	sbcs	r4, r2
 8005d82:	e66c      	b.n	8005a5e <__aeabi_dsub+0xa6>
 8005d84:	464a      	mov	r2, r9
 8005d86:	08db      	lsrs	r3, r3, #3
 8005d88:	0752      	lsls	r2, r2, #29
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	464a      	mov	r2, r9
 8005d8e:	08d2      	lsrs	r2, r2, #3
 8005d90:	e7a6      	b.n	8005ce0 <__aeabi_dsub+0x328>
 8005d92:	4cc6      	ldr	r4, [pc, #792]	; (80060ac <__aeabi_dsub+0x6f4>)
 8005d94:	1c72      	adds	r2, r6, #1
 8005d96:	4222      	tst	r2, r4
 8005d98:	d000      	beq.n	8005d9c <__aeabi_dsub+0x3e4>
 8005d9a:	e0ac      	b.n	8005ef6 <__aeabi_dsub+0x53e>
 8005d9c:	464a      	mov	r2, r9
 8005d9e:	431a      	orrs	r2, r3
 8005da0:	2e00      	cmp	r6, #0
 8005da2:	d000      	beq.n	8005da6 <__aeabi_dsub+0x3ee>
 8005da4:	e105      	b.n	8005fb2 <__aeabi_dsub+0x5fa>
 8005da6:	2a00      	cmp	r2, #0
 8005da8:	d100      	bne.n	8005dac <__aeabi_dsub+0x3f4>
 8005daa:	e156      	b.n	800605a <__aeabi_dsub+0x6a2>
 8005dac:	003a      	movs	r2, r7
 8005dae:	4302      	orrs	r2, r0
 8005db0:	d100      	bne.n	8005db4 <__aeabi_dsub+0x3fc>
 8005db2:	e0db      	b.n	8005f6c <__aeabi_dsub+0x5b4>
 8005db4:	181c      	adds	r4, r3, r0
 8005db6:	429c      	cmp	r4, r3
 8005db8:	419b      	sbcs	r3, r3
 8005dba:	444f      	add	r7, r9
 8005dbc:	46ba      	mov	sl, r7
 8005dbe:	425b      	negs	r3, r3
 8005dc0:	449a      	add	sl, r3
 8005dc2:	4653      	mov	r3, sl
 8005dc4:	021b      	lsls	r3, r3, #8
 8005dc6:	d400      	bmi.n	8005dca <__aeabi_dsub+0x412>
 8005dc8:	e780      	b.n	8005ccc <__aeabi_dsub+0x314>
 8005dca:	4652      	mov	r2, sl
 8005dcc:	4bb6      	ldr	r3, [pc, #728]	; (80060a8 <__aeabi_dsub+0x6f0>)
 8005dce:	2601      	movs	r6, #1
 8005dd0:	401a      	ands	r2, r3
 8005dd2:	4692      	mov	sl, r2
 8005dd4:	e77a      	b.n	8005ccc <__aeabi_dsub+0x314>
 8005dd6:	4cb3      	ldr	r4, [pc, #716]	; (80060a4 <__aeabi_dsub+0x6ec>)
 8005dd8:	42a2      	cmp	r2, r4
 8005dda:	d100      	bne.n	8005dde <__aeabi_dsub+0x426>
 8005ddc:	e0c0      	b.n	8005f60 <__aeabi_dsub+0x5a8>
 8005dde:	2480      	movs	r4, #128	; 0x80
 8005de0:	464d      	mov	r5, r9
 8005de2:	0424      	lsls	r4, r4, #16
 8005de4:	4325      	orrs	r5, r4
 8005de6:	46a9      	mov	r9, r5
 8005de8:	4664      	mov	r4, ip
 8005dea:	2c38      	cmp	r4, #56	; 0x38
 8005dec:	dc53      	bgt.n	8005e96 <__aeabi_dsub+0x4de>
 8005dee:	4661      	mov	r1, ip
 8005df0:	2c1f      	cmp	r4, #31
 8005df2:	dd00      	ble.n	8005df6 <__aeabi_dsub+0x43e>
 8005df4:	e0cd      	b.n	8005f92 <__aeabi_dsub+0x5da>
 8005df6:	2520      	movs	r5, #32
 8005df8:	001e      	movs	r6, r3
 8005dfa:	1b2d      	subs	r5, r5, r4
 8005dfc:	464c      	mov	r4, r9
 8005dfe:	40ab      	lsls	r3, r5
 8005e00:	40ac      	lsls	r4, r5
 8005e02:	40ce      	lsrs	r6, r1
 8005e04:	1e5d      	subs	r5, r3, #1
 8005e06:	41ab      	sbcs	r3, r5
 8005e08:	4334      	orrs	r4, r6
 8005e0a:	4323      	orrs	r3, r4
 8005e0c:	464c      	mov	r4, r9
 8005e0e:	40cc      	lsrs	r4, r1
 8005e10:	1b3f      	subs	r7, r7, r4
 8005e12:	e045      	b.n	8005ea0 <__aeabi_dsub+0x4e8>
 8005e14:	464a      	mov	r2, r9
 8005e16:	1a1c      	subs	r4, r3, r0
 8005e18:	1bd1      	subs	r1, r2, r7
 8005e1a:	42a3      	cmp	r3, r4
 8005e1c:	4192      	sbcs	r2, r2
 8005e1e:	4252      	negs	r2, r2
 8005e20:	4692      	mov	sl, r2
 8005e22:	000a      	movs	r2, r1
 8005e24:	4651      	mov	r1, sl
 8005e26:	1a52      	subs	r2, r2, r1
 8005e28:	4692      	mov	sl, r2
 8005e2a:	0212      	lsls	r2, r2, #8
 8005e2c:	d500      	bpl.n	8005e30 <__aeabi_dsub+0x478>
 8005e2e:	e083      	b.n	8005f38 <__aeabi_dsub+0x580>
 8005e30:	4653      	mov	r3, sl
 8005e32:	4323      	orrs	r3, r4
 8005e34:	d000      	beq.n	8005e38 <__aeabi_dsub+0x480>
 8005e36:	e621      	b.n	8005a7c <__aeabi_dsub+0xc4>
 8005e38:	2200      	movs	r2, #0
 8005e3a:	2500      	movs	r5, #0
 8005e3c:	e753      	b.n	8005ce6 <__aeabi_dsub+0x32e>
 8005e3e:	181c      	adds	r4, r3, r0
 8005e40:	429c      	cmp	r4, r3
 8005e42:	419b      	sbcs	r3, r3
 8005e44:	444f      	add	r7, r9
 8005e46:	46ba      	mov	sl, r7
 8005e48:	425b      	negs	r3, r3
 8005e4a:	449a      	add	sl, r3
 8005e4c:	4653      	mov	r3, sl
 8005e4e:	2601      	movs	r6, #1
 8005e50:	021b      	lsls	r3, r3, #8
 8005e52:	d400      	bmi.n	8005e56 <__aeabi_dsub+0x49e>
 8005e54:	e73a      	b.n	8005ccc <__aeabi_dsub+0x314>
 8005e56:	2602      	movs	r6, #2
 8005e58:	4652      	mov	r2, sl
 8005e5a:	4b93      	ldr	r3, [pc, #588]	; (80060a8 <__aeabi_dsub+0x6f0>)
 8005e5c:	2101      	movs	r1, #1
 8005e5e:	401a      	ands	r2, r3
 8005e60:	0013      	movs	r3, r2
 8005e62:	4021      	ands	r1, r4
 8005e64:	0862      	lsrs	r2, r4, #1
 8005e66:	430a      	orrs	r2, r1
 8005e68:	07dc      	lsls	r4, r3, #31
 8005e6a:	085b      	lsrs	r3, r3, #1
 8005e6c:	469a      	mov	sl, r3
 8005e6e:	4314      	orrs	r4, r2
 8005e70:	e62c      	b.n	8005acc <__aeabi_dsub+0x114>
 8005e72:	0039      	movs	r1, r7
 8005e74:	3a20      	subs	r2, #32
 8005e76:	40d1      	lsrs	r1, r2
 8005e78:	4662      	mov	r2, ip
 8005e7a:	2a20      	cmp	r2, #32
 8005e7c:	d006      	beq.n	8005e8c <__aeabi_dsub+0x4d4>
 8005e7e:	4664      	mov	r4, ip
 8005e80:	2240      	movs	r2, #64	; 0x40
 8005e82:	1b12      	subs	r2, r2, r4
 8005e84:	003c      	movs	r4, r7
 8005e86:	4094      	lsls	r4, r2
 8005e88:	4304      	orrs	r4, r0
 8005e8a:	9401      	str	r4, [sp, #4]
 8005e8c:	9c01      	ldr	r4, [sp, #4]
 8005e8e:	1e62      	subs	r2, r4, #1
 8005e90:	4194      	sbcs	r4, r2
 8005e92:	430c      	orrs	r4, r1
 8005e94:	e5e3      	b.n	8005a5e <__aeabi_dsub+0xa6>
 8005e96:	4649      	mov	r1, r9
 8005e98:	4319      	orrs	r1, r3
 8005e9a:	000b      	movs	r3, r1
 8005e9c:	1e5c      	subs	r4, r3, #1
 8005e9e:	41a3      	sbcs	r3, r4
 8005ea0:	1ac4      	subs	r4, r0, r3
 8005ea2:	42a0      	cmp	r0, r4
 8005ea4:	419b      	sbcs	r3, r3
 8005ea6:	425b      	negs	r3, r3
 8005ea8:	1afb      	subs	r3, r7, r3
 8005eaa:	469a      	mov	sl, r3
 8005eac:	465d      	mov	r5, fp
 8005eae:	0016      	movs	r6, r2
 8005eb0:	e5dc      	b.n	8005a6c <__aeabi_dsub+0xb4>
 8005eb2:	4649      	mov	r1, r9
 8005eb4:	4319      	orrs	r1, r3
 8005eb6:	d100      	bne.n	8005eba <__aeabi_dsub+0x502>
 8005eb8:	e0ae      	b.n	8006018 <__aeabi_dsub+0x660>
 8005eba:	4661      	mov	r1, ip
 8005ebc:	4664      	mov	r4, ip
 8005ebe:	3901      	subs	r1, #1
 8005ec0:	2c01      	cmp	r4, #1
 8005ec2:	d100      	bne.n	8005ec6 <__aeabi_dsub+0x50e>
 8005ec4:	e0e0      	b.n	8006088 <__aeabi_dsub+0x6d0>
 8005ec6:	4c77      	ldr	r4, [pc, #476]	; (80060a4 <__aeabi_dsub+0x6ec>)
 8005ec8:	45a4      	cmp	ip, r4
 8005eca:	d056      	beq.n	8005f7a <__aeabi_dsub+0x5c2>
 8005ecc:	468c      	mov	ip, r1
 8005ece:	e69a      	b.n	8005c06 <__aeabi_dsub+0x24e>
 8005ed0:	4661      	mov	r1, ip
 8005ed2:	2220      	movs	r2, #32
 8005ed4:	003c      	movs	r4, r7
 8005ed6:	1a52      	subs	r2, r2, r1
 8005ed8:	4094      	lsls	r4, r2
 8005eda:	0001      	movs	r1, r0
 8005edc:	4090      	lsls	r0, r2
 8005ede:	46a0      	mov	r8, r4
 8005ee0:	4664      	mov	r4, ip
 8005ee2:	1e42      	subs	r2, r0, #1
 8005ee4:	4190      	sbcs	r0, r2
 8005ee6:	4662      	mov	r2, ip
 8005ee8:	40e1      	lsrs	r1, r4
 8005eea:	4644      	mov	r4, r8
 8005eec:	40d7      	lsrs	r7, r2
 8005eee:	430c      	orrs	r4, r1
 8005ef0:	4304      	orrs	r4, r0
 8005ef2:	44b9      	add	r9, r7
 8005ef4:	e701      	b.n	8005cfa <__aeabi_dsub+0x342>
 8005ef6:	496b      	ldr	r1, [pc, #428]	; (80060a4 <__aeabi_dsub+0x6ec>)
 8005ef8:	428a      	cmp	r2, r1
 8005efa:	d100      	bne.n	8005efe <__aeabi_dsub+0x546>
 8005efc:	e70c      	b.n	8005d18 <__aeabi_dsub+0x360>
 8005efe:	1818      	adds	r0, r3, r0
 8005f00:	4298      	cmp	r0, r3
 8005f02:	419b      	sbcs	r3, r3
 8005f04:	444f      	add	r7, r9
 8005f06:	425b      	negs	r3, r3
 8005f08:	18fb      	adds	r3, r7, r3
 8005f0a:	07dc      	lsls	r4, r3, #31
 8005f0c:	0840      	lsrs	r0, r0, #1
 8005f0e:	085b      	lsrs	r3, r3, #1
 8005f10:	469a      	mov	sl, r3
 8005f12:	0016      	movs	r6, r2
 8005f14:	4304      	orrs	r4, r0
 8005f16:	e6d9      	b.n	8005ccc <__aeabi_dsub+0x314>
 8005f18:	2a00      	cmp	r2, #0
 8005f1a:	d000      	beq.n	8005f1e <__aeabi_dsub+0x566>
 8005f1c:	e081      	b.n	8006022 <__aeabi_dsub+0x66a>
 8005f1e:	003b      	movs	r3, r7
 8005f20:	4303      	orrs	r3, r0
 8005f22:	d11d      	bne.n	8005f60 <__aeabi_dsub+0x5a8>
 8005f24:	2280      	movs	r2, #128	; 0x80
 8005f26:	2500      	movs	r5, #0
 8005f28:	0312      	lsls	r2, r2, #12
 8005f2a:	e70b      	b.n	8005d44 <__aeabi_dsub+0x38c>
 8005f2c:	08c0      	lsrs	r0, r0, #3
 8005f2e:	077b      	lsls	r3, r7, #29
 8005f30:	465d      	mov	r5, fp
 8005f32:	4303      	orrs	r3, r0
 8005f34:	08fa      	lsrs	r2, r7, #3
 8005f36:	e6d3      	b.n	8005ce0 <__aeabi_dsub+0x328>
 8005f38:	1ac4      	subs	r4, r0, r3
 8005f3a:	42a0      	cmp	r0, r4
 8005f3c:	4180      	sbcs	r0, r0
 8005f3e:	464b      	mov	r3, r9
 8005f40:	4240      	negs	r0, r0
 8005f42:	1aff      	subs	r7, r7, r3
 8005f44:	1a3b      	subs	r3, r7, r0
 8005f46:	469a      	mov	sl, r3
 8005f48:	465d      	mov	r5, fp
 8005f4a:	e597      	b.n	8005a7c <__aeabi_dsub+0xc4>
 8005f4c:	1a1c      	subs	r4, r3, r0
 8005f4e:	464a      	mov	r2, r9
 8005f50:	42a3      	cmp	r3, r4
 8005f52:	419b      	sbcs	r3, r3
 8005f54:	1bd7      	subs	r7, r2, r7
 8005f56:	425b      	negs	r3, r3
 8005f58:	1afb      	subs	r3, r7, r3
 8005f5a:	469a      	mov	sl, r3
 8005f5c:	2601      	movs	r6, #1
 8005f5e:	e585      	b.n	8005a6c <__aeabi_dsub+0xb4>
 8005f60:	08c0      	lsrs	r0, r0, #3
 8005f62:	077b      	lsls	r3, r7, #29
 8005f64:	465d      	mov	r5, fp
 8005f66:	4303      	orrs	r3, r0
 8005f68:	08fa      	lsrs	r2, r7, #3
 8005f6a:	e6e7      	b.n	8005d3c <__aeabi_dsub+0x384>
 8005f6c:	464a      	mov	r2, r9
 8005f6e:	08db      	lsrs	r3, r3, #3
 8005f70:	0752      	lsls	r2, r2, #29
 8005f72:	4313      	orrs	r3, r2
 8005f74:	464a      	mov	r2, r9
 8005f76:	08d2      	lsrs	r2, r2, #3
 8005f78:	e6b5      	b.n	8005ce6 <__aeabi_dsub+0x32e>
 8005f7a:	08c0      	lsrs	r0, r0, #3
 8005f7c:	077b      	lsls	r3, r7, #29
 8005f7e:	4303      	orrs	r3, r0
 8005f80:	08fa      	lsrs	r2, r7, #3
 8005f82:	e6db      	b.n	8005d3c <__aeabi_dsub+0x384>
 8005f84:	4649      	mov	r1, r9
 8005f86:	4319      	orrs	r1, r3
 8005f88:	000b      	movs	r3, r1
 8005f8a:	1e59      	subs	r1, r3, #1
 8005f8c:	418b      	sbcs	r3, r1
 8005f8e:	001c      	movs	r4, r3
 8005f90:	e653      	b.n	8005c3a <__aeabi_dsub+0x282>
 8005f92:	464d      	mov	r5, r9
 8005f94:	3c20      	subs	r4, #32
 8005f96:	40e5      	lsrs	r5, r4
 8005f98:	2920      	cmp	r1, #32
 8005f9a:	d005      	beq.n	8005fa8 <__aeabi_dsub+0x5f0>
 8005f9c:	2440      	movs	r4, #64	; 0x40
 8005f9e:	1a64      	subs	r4, r4, r1
 8005fa0:	4649      	mov	r1, r9
 8005fa2:	40a1      	lsls	r1, r4
 8005fa4:	430b      	orrs	r3, r1
 8005fa6:	4698      	mov	r8, r3
 8005fa8:	4643      	mov	r3, r8
 8005faa:	1e5c      	subs	r4, r3, #1
 8005fac:	41a3      	sbcs	r3, r4
 8005fae:	432b      	orrs	r3, r5
 8005fb0:	e776      	b.n	8005ea0 <__aeabi_dsub+0x4e8>
 8005fb2:	2a00      	cmp	r2, #0
 8005fb4:	d0e1      	beq.n	8005f7a <__aeabi_dsub+0x5c2>
 8005fb6:	003a      	movs	r2, r7
 8005fb8:	08db      	lsrs	r3, r3, #3
 8005fba:	4302      	orrs	r2, r0
 8005fbc:	d100      	bne.n	8005fc0 <__aeabi_dsub+0x608>
 8005fbe:	e6b8      	b.n	8005d32 <__aeabi_dsub+0x37a>
 8005fc0:	464a      	mov	r2, r9
 8005fc2:	0752      	lsls	r2, r2, #29
 8005fc4:	2480      	movs	r4, #128	; 0x80
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	464a      	mov	r2, r9
 8005fca:	0324      	lsls	r4, r4, #12
 8005fcc:	08d2      	lsrs	r2, r2, #3
 8005fce:	4222      	tst	r2, r4
 8005fd0:	d007      	beq.n	8005fe2 <__aeabi_dsub+0x62a>
 8005fd2:	08fe      	lsrs	r6, r7, #3
 8005fd4:	4226      	tst	r6, r4
 8005fd6:	d104      	bne.n	8005fe2 <__aeabi_dsub+0x62a>
 8005fd8:	465d      	mov	r5, fp
 8005fda:	0032      	movs	r2, r6
 8005fdc:	08c3      	lsrs	r3, r0, #3
 8005fde:	077f      	lsls	r7, r7, #29
 8005fe0:	433b      	orrs	r3, r7
 8005fe2:	0f59      	lsrs	r1, r3, #29
 8005fe4:	00db      	lsls	r3, r3, #3
 8005fe6:	0749      	lsls	r1, r1, #29
 8005fe8:	08db      	lsrs	r3, r3, #3
 8005fea:	430b      	orrs	r3, r1
 8005fec:	e6a6      	b.n	8005d3c <__aeabi_dsub+0x384>
 8005fee:	1ac4      	subs	r4, r0, r3
 8005ff0:	42a0      	cmp	r0, r4
 8005ff2:	4180      	sbcs	r0, r0
 8005ff4:	464b      	mov	r3, r9
 8005ff6:	4240      	negs	r0, r0
 8005ff8:	1aff      	subs	r7, r7, r3
 8005ffa:	1a3b      	subs	r3, r7, r0
 8005ffc:	469a      	mov	sl, r3
 8005ffe:	465d      	mov	r5, fp
 8006000:	2601      	movs	r6, #1
 8006002:	e533      	b.n	8005a6c <__aeabi_dsub+0xb4>
 8006004:	003b      	movs	r3, r7
 8006006:	4303      	orrs	r3, r0
 8006008:	d100      	bne.n	800600c <__aeabi_dsub+0x654>
 800600a:	e715      	b.n	8005e38 <__aeabi_dsub+0x480>
 800600c:	08c0      	lsrs	r0, r0, #3
 800600e:	077b      	lsls	r3, r7, #29
 8006010:	465d      	mov	r5, fp
 8006012:	4303      	orrs	r3, r0
 8006014:	08fa      	lsrs	r2, r7, #3
 8006016:	e666      	b.n	8005ce6 <__aeabi_dsub+0x32e>
 8006018:	08c0      	lsrs	r0, r0, #3
 800601a:	077b      	lsls	r3, r7, #29
 800601c:	4303      	orrs	r3, r0
 800601e:	08fa      	lsrs	r2, r7, #3
 8006020:	e65e      	b.n	8005ce0 <__aeabi_dsub+0x328>
 8006022:	003a      	movs	r2, r7
 8006024:	08db      	lsrs	r3, r3, #3
 8006026:	4302      	orrs	r2, r0
 8006028:	d100      	bne.n	800602c <__aeabi_dsub+0x674>
 800602a:	e682      	b.n	8005d32 <__aeabi_dsub+0x37a>
 800602c:	464a      	mov	r2, r9
 800602e:	0752      	lsls	r2, r2, #29
 8006030:	2480      	movs	r4, #128	; 0x80
 8006032:	4313      	orrs	r3, r2
 8006034:	464a      	mov	r2, r9
 8006036:	0324      	lsls	r4, r4, #12
 8006038:	08d2      	lsrs	r2, r2, #3
 800603a:	4222      	tst	r2, r4
 800603c:	d007      	beq.n	800604e <__aeabi_dsub+0x696>
 800603e:	08fe      	lsrs	r6, r7, #3
 8006040:	4226      	tst	r6, r4
 8006042:	d104      	bne.n	800604e <__aeabi_dsub+0x696>
 8006044:	465d      	mov	r5, fp
 8006046:	0032      	movs	r2, r6
 8006048:	08c3      	lsrs	r3, r0, #3
 800604a:	077f      	lsls	r7, r7, #29
 800604c:	433b      	orrs	r3, r7
 800604e:	0f59      	lsrs	r1, r3, #29
 8006050:	00db      	lsls	r3, r3, #3
 8006052:	08db      	lsrs	r3, r3, #3
 8006054:	0749      	lsls	r1, r1, #29
 8006056:	430b      	orrs	r3, r1
 8006058:	e670      	b.n	8005d3c <__aeabi_dsub+0x384>
 800605a:	08c0      	lsrs	r0, r0, #3
 800605c:	077b      	lsls	r3, r7, #29
 800605e:	4303      	orrs	r3, r0
 8006060:	08fa      	lsrs	r2, r7, #3
 8006062:	e640      	b.n	8005ce6 <__aeabi_dsub+0x32e>
 8006064:	464c      	mov	r4, r9
 8006066:	3920      	subs	r1, #32
 8006068:	40cc      	lsrs	r4, r1
 800606a:	4661      	mov	r1, ip
 800606c:	2920      	cmp	r1, #32
 800606e:	d006      	beq.n	800607e <__aeabi_dsub+0x6c6>
 8006070:	4666      	mov	r6, ip
 8006072:	2140      	movs	r1, #64	; 0x40
 8006074:	1b89      	subs	r1, r1, r6
 8006076:	464e      	mov	r6, r9
 8006078:	408e      	lsls	r6, r1
 800607a:	4333      	orrs	r3, r6
 800607c:	4698      	mov	r8, r3
 800607e:	4643      	mov	r3, r8
 8006080:	1e59      	subs	r1, r3, #1
 8006082:	418b      	sbcs	r3, r1
 8006084:	431c      	orrs	r4, r3
 8006086:	e5d8      	b.n	8005c3a <__aeabi_dsub+0x282>
 8006088:	181c      	adds	r4, r3, r0
 800608a:	4284      	cmp	r4, r0
 800608c:	4180      	sbcs	r0, r0
 800608e:	444f      	add	r7, r9
 8006090:	46ba      	mov	sl, r7
 8006092:	4240      	negs	r0, r0
 8006094:	4482      	add	sl, r0
 8006096:	e6d9      	b.n	8005e4c <__aeabi_dsub+0x494>
 8006098:	4653      	mov	r3, sl
 800609a:	4323      	orrs	r3, r4
 800609c:	d100      	bne.n	80060a0 <__aeabi_dsub+0x6e8>
 800609e:	e6cb      	b.n	8005e38 <__aeabi_dsub+0x480>
 80060a0:	e614      	b.n	8005ccc <__aeabi_dsub+0x314>
 80060a2:	46c0      	nop			; (mov r8, r8)
 80060a4:	000007ff 	.word	0x000007ff
 80060a8:	ff7fffff 	.word	0xff7fffff
 80060ac:	000007fe 	.word	0x000007fe
 80060b0:	2300      	movs	r3, #0
 80060b2:	4a01      	ldr	r2, [pc, #4]	; (80060b8 <__aeabi_dsub+0x700>)
 80060b4:	001c      	movs	r4, r3
 80060b6:	e529      	b.n	8005b0c <__aeabi_dsub+0x154>
 80060b8:	000007ff 	.word	0x000007ff

080060bc <__aeabi_dcmpun>:
 80060bc:	b570      	push	{r4, r5, r6, lr}
 80060be:	0005      	movs	r5, r0
 80060c0:	480c      	ldr	r0, [pc, #48]	; (80060f4 <__aeabi_dcmpun+0x38>)
 80060c2:	031c      	lsls	r4, r3, #12
 80060c4:	0016      	movs	r6, r2
 80060c6:	005b      	lsls	r3, r3, #1
 80060c8:	030a      	lsls	r2, r1, #12
 80060ca:	0049      	lsls	r1, r1, #1
 80060cc:	0b12      	lsrs	r2, r2, #12
 80060ce:	0d49      	lsrs	r1, r1, #21
 80060d0:	0b24      	lsrs	r4, r4, #12
 80060d2:	0d5b      	lsrs	r3, r3, #21
 80060d4:	4281      	cmp	r1, r0
 80060d6:	d008      	beq.n	80060ea <__aeabi_dcmpun+0x2e>
 80060d8:	4a06      	ldr	r2, [pc, #24]	; (80060f4 <__aeabi_dcmpun+0x38>)
 80060da:	2000      	movs	r0, #0
 80060dc:	4293      	cmp	r3, r2
 80060de:	d103      	bne.n	80060e8 <__aeabi_dcmpun+0x2c>
 80060e0:	0020      	movs	r0, r4
 80060e2:	4330      	orrs	r0, r6
 80060e4:	1e43      	subs	r3, r0, #1
 80060e6:	4198      	sbcs	r0, r3
 80060e8:	bd70      	pop	{r4, r5, r6, pc}
 80060ea:	2001      	movs	r0, #1
 80060ec:	432a      	orrs	r2, r5
 80060ee:	d1fb      	bne.n	80060e8 <__aeabi_dcmpun+0x2c>
 80060f0:	e7f2      	b.n	80060d8 <__aeabi_dcmpun+0x1c>
 80060f2:	46c0      	nop			; (mov r8, r8)
 80060f4:	000007ff 	.word	0x000007ff

080060f8 <__aeabi_d2iz>:
 80060f8:	000a      	movs	r2, r1
 80060fa:	b530      	push	{r4, r5, lr}
 80060fc:	4c13      	ldr	r4, [pc, #76]	; (800614c <__aeabi_d2iz+0x54>)
 80060fe:	0053      	lsls	r3, r2, #1
 8006100:	0309      	lsls	r1, r1, #12
 8006102:	0005      	movs	r5, r0
 8006104:	0b09      	lsrs	r1, r1, #12
 8006106:	2000      	movs	r0, #0
 8006108:	0d5b      	lsrs	r3, r3, #21
 800610a:	0fd2      	lsrs	r2, r2, #31
 800610c:	42a3      	cmp	r3, r4
 800610e:	dd04      	ble.n	800611a <__aeabi_d2iz+0x22>
 8006110:	480f      	ldr	r0, [pc, #60]	; (8006150 <__aeabi_d2iz+0x58>)
 8006112:	4283      	cmp	r3, r0
 8006114:	dd02      	ble.n	800611c <__aeabi_d2iz+0x24>
 8006116:	4b0f      	ldr	r3, [pc, #60]	; (8006154 <__aeabi_d2iz+0x5c>)
 8006118:	18d0      	adds	r0, r2, r3
 800611a:	bd30      	pop	{r4, r5, pc}
 800611c:	2080      	movs	r0, #128	; 0x80
 800611e:	0340      	lsls	r0, r0, #13
 8006120:	4301      	orrs	r1, r0
 8006122:	480d      	ldr	r0, [pc, #52]	; (8006158 <__aeabi_d2iz+0x60>)
 8006124:	1ac0      	subs	r0, r0, r3
 8006126:	281f      	cmp	r0, #31
 8006128:	dd08      	ble.n	800613c <__aeabi_d2iz+0x44>
 800612a:	480c      	ldr	r0, [pc, #48]	; (800615c <__aeabi_d2iz+0x64>)
 800612c:	1ac3      	subs	r3, r0, r3
 800612e:	40d9      	lsrs	r1, r3
 8006130:	000b      	movs	r3, r1
 8006132:	4258      	negs	r0, r3
 8006134:	2a00      	cmp	r2, #0
 8006136:	d1f0      	bne.n	800611a <__aeabi_d2iz+0x22>
 8006138:	0018      	movs	r0, r3
 800613a:	e7ee      	b.n	800611a <__aeabi_d2iz+0x22>
 800613c:	4c08      	ldr	r4, [pc, #32]	; (8006160 <__aeabi_d2iz+0x68>)
 800613e:	40c5      	lsrs	r5, r0
 8006140:	46a4      	mov	ip, r4
 8006142:	4463      	add	r3, ip
 8006144:	4099      	lsls	r1, r3
 8006146:	000b      	movs	r3, r1
 8006148:	432b      	orrs	r3, r5
 800614a:	e7f2      	b.n	8006132 <__aeabi_d2iz+0x3a>
 800614c:	000003fe 	.word	0x000003fe
 8006150:	0000041d 	.word	0x0000041d
 8006154:	7fffffff 	.word	0x7fffffff
 8006158:	00000433 	.word	0x00000433
 800615c:	00000413 	.word	0x00000413
 8006160:	fffffbed 	.word	0xfffffbed

08006164 <__aeabi_i2d>:
 8006164:	b570      	push	{r4, r5, r6, lr}
 8006166:	2800      	cmp	r0, #0
 8006168:	d016      	beq.n	8006198 <__aeabi_i2d+0x34>
 800616a:	17c3      	asrs	r3, r0, #31
 800616c:	18c5      	adds	r5, r0, r3
 800616e:	405d      	eors	r5, r3
 8006170:	0fc4      	lsrs	r4, r0, #31
 8006172:	0028      	movs	r0, r5
 8006174:	f000 f91a 	bl	80063ac <__clzsi2>
 8006178:	4b11      	ldr	r3, [pc, #68]	; (80061c0 <__aeabi_i2d+0x5c>)
 800617a:	1a1b      	subs	r3, r3, r0
 800617c:	280a      	cmp	r0, #10
 800617e:	dc16      	bgt.n	80061ae <__aeabi_i2d+0x4a>
 8006180:	0002      	movs	r2, r0
 8006182:	002e      	movs	r6, r5
 8006184:	3215      	adds	r2, #21
 8006186:	4096      	lsls	r6, r2
 8006188:	220b      	movs	r2, #11
 800618a:	1a12      	subs	r2, r2, r0
 800618c:	40d5      	lsrs	r5, r2
 800618e:	055b      	lsls	r3, r3, #21
 8006190:	032d      	lsls	r5, r5, #12
 8006192:	0b2d      	lsrs	r5, r5, #12
 8006194:	0d5b      	lsrs	r3, r3, #21
 8006196:	e003      	b.n	80061a0 <__aeabi_i2d+0x3c>
 8006198:	2400      	movs	r4, #0
 800619a:	2300      	movs	r3, #0
 800619c:	2500      	movs	r5, #0
 800619e:	2600      	movs	r6, #0
 80061a0:	051b      	lsls	r3, r3, #20
 80061a2:	432b      	orrs	r3, r5
 80061a4:	07e4      	lsls	r4, r4, #31
 80061a6:	4323      	orrs	r3, r4
 80061a8:	0030      	movs	r0, r6
 80061aa:	0019      	movs	r1, r3
 80061ac:	bd70      	pop	{r4, r5, r6, pc}
 80061ae:	380b      	subs	r0, #11
 80061b0:	4085      	lsls	r5, r0
 80061b2:	055b      	lsls	r3, r3, #21
 80061b4:	032d      	lsls	r5, r5, #12
 80061b6:	2600      	movs	r6, #0
 80061b8:	0b2d      	lsrs	r5, r5, #12
 80061ba:	0d5b      	lsrs	r3, r3, #21
 80061bc:	e7f0      	b.n	80061a0 <__aeabi_i2d+0x3c>
 80061be:	46c0      	nop			; (mov r8, r8)
 80061c0:	0000041e 	.word	0x0000041e

080061c4 <__aeabi_ui2d>:
 80061c4:	b510      	push	{r4, lr}
 80061c6:	1e04      	subs	r4, r0, #0
 80061c8:	d010      	beq.n	80061ec <__aeabi_ui2d+0x28>
 80061ca:	f000 f8ef 	bl	80063ac <__clzsi2>
 80061ce:	4b0f      	ldr	r3, [pc, #60]	; (800620c <__aeabi_ui2d+0x48>)
 80061d0:	1a1b      	subs	r3, r3, r0
 80061d2:	280a      	cmp	r0, #10
 80061d4:	dc11      	bgt.n	80061fa <__aeabi_ui2d+0x36>
 80061d6:	220b      	movs	r2, #11
 80061d8:	0021      	movs	r1, r4
 80061da:	1a12      	subs	r2, r2, r0
 80061dc:	40d1      	lsrs	r1, r2
 80061de:	3015      	adds	r0, #21
 80061e0:	030a      	lsls	r2, r1, #12
 80061e2:	055b      	lsls	r3, r3, #21
 80061e4:	4084      	lsls	r4, r0
 80061e6:	0b12      	lsrs	r2, r2, #12
 80061e8:	0d5b      	lsrs	r3, r3, #21
 80061ea:	e001      	b.n	80061f0 <__aeabi_ui2d+0x2c>
 80061ec:	2300      	movs	r3, #0
 80061ee:	2200      	movs	r2, #0
 80061f0:	051b      	lsls	r3, r3, #20
 80061f2:	4313      	orrs	r3, r2
 80061f4:	0020      	movs	r0, r4
 80061f6:	0019      	movs	r1, r3
 80061f8:	bd10      	pop	{r4, pc}
 80061fa:	0022      	movs	r2, r4
 80061fc:	380b      	subs	r0, #11
 80061fe:	4082      	lsls	r2, r0
 8006200:	055b      	lsls	r3, r3, #21
 8006202:	0312      	lsls	r2, r2, #12
 8006204:	2400      	movs	r4, #0
 8006206:	0b12      	lsrs	r2, r2, #12
 8006208:	0d5b      	lsrs	r3, r3, #21
 800620a:	e7f1      	b.n	80061f0 <__aeabi_ui2d+0x2c>
 800620c:	0000041e 	.word	0x0000041e

08006210 <__aeabi_f2d>:
 8006210:	b570      	push	{r4, r5, r6, lr}
 8006212:	0242      	lsls	r2, r0, #9
 8006214:	0043      	lsls	r3, r0, #1
 8006216:	0fc4      	lsrs	r4, r0, #31
 8006218:	20fe      	movs	r0, #254	; 0xfe
 800621a:	0e1b      	lsrs	r3, r3, #24
 800621c:	1c59      	adds	r1, r3, #1
 800621e:	0a55      	lsrs	r5, r2, #9
 8006220:	4208      	tst	r0, r1
 8006222:	d00c      	beq.n	800623e <__aeabi_f2d+0x2e>
 8006224:	21e0      	movs	r1, #224	; 0xe0
 8006226:	0089      	lsls	r1, r1, #2
 8006228:	468c      	mov	ip, r1
 800622a:	076d      	lsls	r5, r5, #29
 800622c:	0b12      	lsrs	r2, r2, #12
 800622e:	4463      	add	r3, ip
 8006230:	051b      	lsls	r3, r3, #20
 8006232:	4313      	orrs	r3, r2
 8006234:	07e4      	lsls	r4, r4, #31
 8006236:	4323      	orrs	r3, r4
 8006238:	0028      	movs	r0, r5
 800623a:	0019      	movs	r1, r3
 800623c:	bd70      	pop	{r4, r5, r6, pc}
 800623e:	2b00      	cmp	r3, #0
 8006240:	d114      	bne.n	800626c <__aeabi_f2d+0x5c>
 8006242:	2d00      	cmp	r5, #0
 8006244:	d01b      	beq.n	800627e <__aeabi_f2d+0x6e>
 8006246:	0028      	movs	r0, r5
 8006248:	f000 f8b0 	bl	80063ac <__clzsi2>
 800624c:	280a      	cmp	r0, #10
 800624e:	dc1c      	bgt.n	800628a <__aeabi_f2d+0x7a>
 8006250:	230b      	movs	r3, #11
 8006252:	002a      	movs	r2, r5
 8006254:	1a1b      	subs	r3, r3, r0
 8006256:	40da      	lsrs	r2, r3
 8006258:	0003      	movs	r3, r0
 800625a:	3315      	adds	r3, #21
 800625c:	409d      	lsls	r5, r3
 800625e:	4b0e      	ldr	r3, [pc, #56]	; (8006298 <__aeabi_f2d+0x88>)
 8006260:	0312      	lsls	r2, r2, #12
 8006262:	1a1b      	subs	r3, r3, r0
 8006264:	055b      	lsls	r3, r3, #21
 8006266:	0b12      	lsrs	r2, r2, #12
 8006268:	0d5b      	lsrs	r3, r3, #21
 800626a:	e7e1      	b.n	8006230 <__aeabi_f2d+0x20>
 800626c:	2d00      	cmp	r5, #0
 800626e:	d009      	beq.n	8006284 <__aeabi_f2d+0x74>
 8006270:	0b13      	lsrs	r3, r2, #12
 8006272:	2280      	movs	r2, #128	; 0x80
 8006274:	0312      	lsls	r2, r2, #12
 8006276:	431a      	orrs	r2, r3
 8006278:	076d      	lsls	r5, r5, #29
 800627a:	4b08      	ldr	r3, [pc, #32]	; (800629c <__aeabi_f2d+0x8c>)
 800627c:	e7d8      	b.n	8006230 <__aeabi_f2d+0x20>
 800627e:	2300      	movs	r3, #0
 8006280:	2200      	movs	r2, #0
 8006282:	e7d5      	b.n	8006230 <__aeabi_f2d+0x20>
 8006284:	2200      	movs	r2, #0
 8006286:	4b05      	ldr	r3, [pc, #20]	; (800629c <__aeabi_f2d+0x8c>)
 8006288:	e7d2      	b.n	8006230 <__aeabi_f2d+0x20>
 800628a:	0003      	movs	r3, r0
 800628c:	002a      	movs	r2, r5
 800628e:	3b0b      	subs	r3, #11
 8006290:	409a      	lsls	r2, r3
 8006292:	2500      	movs	r5, #0
 8006294:	e7e3      	b.n	800625e <__aeabi_f2d+0x4e>
 8006296:	46c0      	nop			; (mov r8, r8)
 8006298:	00000389 	.word	0x00000389
 800629c:	000007ff 	.word	0x000007ff

080062a0 <__aeabi_d2f>:
 80062a0:	0002      	movs	r2, r0
 80062a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062a4:	004b      	lsls	r3, r1, #1
 80062a6:	030d      	lsls	r5, r1, #12
 80062a8:	0f40      	lsrs	r0, r0, #29
 80062aa:	0d5b      	lsrs	r3, r3, #21
 80062ac:	0fcc      	lsrs	r4, r1, #31
 80062ae:	0a6d      	lsrs	r5, r5, #9
 80062b0:	493a      	ldr	r1, [pc, #232]	; (800639c <__aeabi_d2f+0xfc>)
 80062b2:	4305      	orrs	r5, r0
 80062b4:	1c58      	adds	r0, r3, #1
 80062b6:	00d7      	lsls	r7, r2, #3
 80062b8:	4208      	tst	r0, r1
 80062ba:	d00a      	beq.n	80062d2 <__aeabi_d2f+0x32>
 80062bc:	4938      	ldr	r1, [pc, #224]	; (80063a0 <__aeabi_d2f+0x100>)
 80062be:	1859      	adds	r1, r3, r1
 80062c0:	29fe      	cmp	r1, #254	; 0xfe
 80062c2:	dd16      	ble.n	80062f2 <__aeabi_d2f+0x52>
 80062c4:	20ff      	movs	r0, #255	; 0xff
 80062c6:	2200      	movs	r2, #0
 80062c8:	05c0      	lsls	r0, r0, #23
 80062ca:	4310      	orrs	r0, r2
 80062cc:	07e4      	lsls	r4, r4, #31
 80062ce:	4320      	orrs	r0, r4
 80062d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d106      	bne.n	80062e4 <__aeabi_d2f+0x44>
 80062d6:	433d      	orrs	r5, r7
 80062d8:	d026      	beq.n	8006328 <__aeabi_d2f+0x88>
 80062da:	2205      	movs	r2, #5
 80062dc:	0192      	lsls	r2, r2, #6
 80062de:	0a52      	lsrs	r2, r2, #9
 80062e0:	b2d8      	uxtb	r0, r3
 80062e2:	e7f1      	b.n	80062c8 <__aeabi_d2f+0x28>
 80062e4:	432f      	orrs	r7, r5
 80062e6:	d0ed      	beq.n	80062c4 <__aeabi_d2f+0x24>
 80062e8:	2280      	movs	r2, #128	; 0x80
 80062ea:	03d2      	lsls	r2, r2, #15
 80062ec:	20ff      	movs	r0, #255	; 0xff
 80062ee:	432a      	orrs	r2, r5
 80062f0:	e7ea      	b.n	80062c8 <__aeabi_d2f+0x28>
 80062f2:	2900      	cmp	r1, #0
 80062f4:	dd1b      	ble.n	800632e <__aeabi_d2f+0x8e>
 80062f6:	0192      	lsls	r2, r2, #6
 80062f8:	1e50      	subs	r0, r2, #1
 80062fa:	4182      	sbcs	r2, r0
 80062fc:	00ed      	lsls	r5, r5, #3
 80062fe:	0f7f      	lsrs	r7, r7, #29
 8006300:	432a      	orrs	r2, r5
 8006302:	433a      	orrs	r2, r7
 8006304:	0753      	lsls	r3, r2, #29
 8006306:	d047      	beq.n	8006398 <__aeabi_d2f+0xf8>
 8006308:	230f      	movs	r3, #15
 800630a:	4013      	ands	r3, r2
 800630c:	2b04      	cmp	r3, #4
 800630e:	d000      	beq.n	8006312 <__aeabi_d2f+0x72>
 8006310:	3204      	adds	r2, #4
 8006312:	2380      	movs	r3, #128	; 0x80
 8006314:	04db      	lsls	r3, r3, #19
 8006316:	4013      	ands	r3, r2
 8006318:	d03e      	beq.n	8006398 <__aeabi_d2f+0xf8>
 800631a:	1c48      	adds	r0, r1, #1
 800631c:	29fe      	cmp	r1, #254	; 0xfe
 800631e:	d0d1      	beq.n	80062c4 <__aeabi_d2f+0x24>
 8006320:	0192      	lsls	r2, r2, #6
 8006322:	0a52      	lsrs	r2, r2, #9
 8006324:	b2c0      	uxtb	r0, r0
 8006326:	e7cf      	b.n	80062c8 <__aeabi_d2f+0x28>
 8006328:	2000      	movs	r0, #0
 800632a:	2200      	movs	r2, #0
 800632c:	e7cc      	b.n	80062c8 <__aeabi_d2f+0x28>
 800632e:	000a      	movs	r2, r1
 8006330:	3217      	adds	r2, #23
 8006332:	db2f      	blt.n	8006394 <__aeabi_d2f+0xf4>
 8006334:	2680      	movs	r6, #128	; 0x80
 8006336:	0436      	lsls	r6, r6, #16
 8006338:	432e      	orrs	r6, r5
 800633a:	251e      	movs	r5, #30
 800633c:	1a6d      	subs	r5, r5, r1
 800633e:	2d1f      	cmp	r5, #31
 8006340:	dd11      	ble.n	8006366 <__aeabi_d2f+0xc6>
 8006342:	2202      	movs	r2, #2
 8006344:	4252      	negs	r2, r2
 8006346:	1a52      	subs	r2, r2, r1
 8006348:	0031      	movs	r1, r6
 800634a:	40d1      	lsrs	r1, r2
 800634c:	2d20      	cmp	r5, #32
 800634e:	d004      	beq.n	800635a <__aeabi_d2f+0xba>
 8006350:	4a14      	ldr	r2, [pc, #80]	; (80063a4 <__aeabi_d2f+0x104>)
 8006352:	4694      	mov	ip, r2
 8006354:	4463      	add	r3, ip
 8006356:	409e      	lsls	r6, r3
 8006358:	4337      	orrs	r7, r6
 800635a:	003a      	movs	r2, r7
 800635c:	1e53      	subs	r3, r2, #1
 800635e:	419a      	sbcs	r2, r3
 8006360:	430a      	orrs	r2, r1
 8006362:	2100      	movs	r1, #0
 8006364:	e7ce      	b.n	8006304 <__aeabi_d2f+0x64>
 8006366:	4a10      	ldr	r2, [pc, #64]	; (80063a8 <__aeabi_d2f+0x108>)
 8006368:	0038      	movs	r0, r7
 800636a:	4694      	mov	ip, r2
 800636c:	4463      	add	r3, ip
 800636e:	4098      	lsls	r0, r3
 8006370:	003a      	movs	r2, r7
 8006372:	1e41      	subs	r1, r0, #1
 8006374:	4188      	sbcs	r0, r1
 8006376:	409e      	lsls	r6, r3
 8006378:	40ea      	lsrs	r2, r5
 800637a:	4330      	orrs	r0, r6
 800637c:	4302      	orrs	r2, r0
 800637e:	2100      	movs	r1, #0
 8006380:	0753      	lsls	r3, r2, #29
 8006382:	d1c1      	bne.n	8006308 <__aeabi_d2f+0x68>
 8006384:	2180      	movs	r1, #128	; 0x80
 8006386:	0013      	movs	r3, r2
 8006388:	04c9      	lsls	r1, r1, #19
 800638a:	2001      	movs	r0, #1
 800638c:	400b      	ands	r3, r1
 800638e:	420a      	tst	r2, r1
 8006390:	d1c6      	bne.n	8006320 <__aeabi_d2f+0x80>
 8006392:	e7a3      	b.n	80062dc <__aeabi_d2f+0x3c>
 8006394:	2300      	movs	r3, #0
 8006396:	e7a0      	b.n	80062da <__aeabi_d2f+0x3a>
 8006398:	000b      	movs	r3, r1
 800639a:	e79f      	b.n	80062dc <__aeabi_d2f+0x3c>
 800639c:	000007fe 	.word	0x000007fe
 80063a0:	fffffc80 	.word	0xfffffc80
 80063a4:	fffffca2 	.word	0xfffffca2
 80063a8:	fffffc82 	.word	0xfffffc82

080063ac <__clzsi2>:
 80063ac:	211c      	movs	r1, #28
 80063ae:	2301      	movs	r3, #1
 80063b0:	041b      	lsls	r3, r3, #16
 80063b2:	4298      	cmp	r0, r3
 80063b4:	d301      	bcc.n	80063ba <__clzsi2+0xe>
 80063b6:	0c00      	lsrs	r0, r0, #16
 80063b8:	3910      	subs	r1, #16
 80063ba:	0a1b      	lsrs	r3, r3, #8
 80063bc:	4298      	cmp	r0, r3
 80063be:	d301      	bcc.n	80063c4 <__clzsi2+0x18>
 80063c0:	0a00      	lsrs	r0, r0, #8
 80063c2:	3908      	subs	r1, #8
 80063c4:	091b      	lsrs	r3, r3, #4
 80063c6:	4298      	cmp	r0, r3
 80063c8:	d301      	bcc.n	80063ce <__clzsi2+0x22>
 80063ca:	0900      	lsrs	r0, r0, #4
 80063cc:	3904      	subs	r1, #4
 80063ce:	a202      	add	r2, pc, #8	; (adr r2, 80063d8 <__clzsi2+0x2c>)
 80063d0:	5c10      	ldrb	r0, [r2, r0]
 80063d2:	1840      	adds	r0, r0, r1
 80063d4:	4770      	bx	lr
 80063d6:	46c0      	nop			; (mov r8, r8)
 80063d8:	02020304 	.word	0x02020304
 80063dc:	01010101 	.word	0x01010101
	...

080063e8 <__divdi3>:
 80063e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063ea:	4657      	mov	r7, sl
 80063ec:	464e      	mov	r6, r9
 80063ee:	4645      	mov	r5, r8
 80063f0:	46de      	mov	lr, fp
 80063f2:	b5e0      	push	{r5, r6, r7, lr}
 80063f4:	000f      	movs	r7, r1
 80063f6:	0019      	movs	r1, r3
 80063f8:	2300      	movs	r3, #0
 80063fa:	0006      	movs	r6, r0
 80063fc:	4698      	mov	r8, r3
 80063fe:	0010      	movs	r0, r2
 8006400:	b083      	sub	sp, #12
 8006402:	2f00      	cmp	r7, #0
 8006404:	da07      	bge.n	8006416 <__divdi3+0x2e>
 8006406:	0033      	movs	r3, r6
 8006408:	003c      	movs	r4, r7
 800640a:	2700      	movs	r7, #0
 800640c:	425e      	negs	r6, r3
 800640e:	41a7      	sbcs	r7, r4
 8006410:	2301      	movs	r3, #1
 8006412:	425b      	negs	r3, r3
 8006414:	4698      	mov	r8, r3
 8006416:	2900      	cmp	r1, #0
 8006418:	da07      	bge.n	800642a <__divdi3+0x42>
 800641a:	4643      	mov	r3, r8
 800641c:	43db      	mvns	r3, r3
 800641e:	000c      	movs	r4, r1
 8006420:	4698      	mov	r8, r3
 8006422:	0003      	movs	r3, r0
 8006424:	2100      	movs	r1, #0
 8006426:	4258      	negs	r0, r3
 8006428:	41a1      	sbcs	r1, r4
 800642a:	0034      	movs	r4, r6
 800642c:	003d      	movs	r5, r7
 800642e:	4682      	mov	sl, r0
 8006430:	4689      	mov	r9, r1
 8006432:	42b9      	cmp	r1, r7
 8006434:	d869      	bhi.n	800650a <__divdi3+0x122>
 8006436:	d066      	beq.n	8006506 <__divdi3+0x11e>
 8006438:	4649      	mov	r1, r9
 800643a:	4650      	mov	r0, sl
 800643c:	f000 f8ba 	bl	80065b4 <__clzdi2>
 8006440:	4683      	mov	fp, r0
 8006442:	0039      	movs	r1, r7
 8006444:	0030      	movs	r0, r6
 8006446:	f000 f8b5 	bl	80065b4 <__clzdi2>
 800644a:	465b      	mov	r3, fp
 800644c:	1a1b      	subs	r3, r3, r0
 800644e:	469c      	mov	ip, r3
 8006450:	3b20      	subs	r3, #32
 8006452:	d46b      	bmi.n	800652c <__divdi3+0x144>
 8006454:	4651      	mov	r1, sl
 8006456:	4099      	lsls	r1, r3
 8006458:	469b      	mov	fp, r3
 800645a:	4660      	mov	r0, ip
 800645c:	000b      	movs	r3, r1
 800645e:	4651      	mov	r1, sl
 8006460:	4081      	lsls	r1, r0
 8006462:	000a      	movs	r2, r1
 8006464:	42bb      	cmp	r3, r7
 8006466:	d900      	bls.n	800646a <__divdi3+0x82>
 8006468:	e073      	b.n	8006552 <__divdi3+0x16a>
 800646a:	42bb      	cmp	r3, r7
 800646c:	d100      	bne.n	8006470 <__divdi3+0x88>
 800646e:	e07a      	b.n	8006566 <__divdi3+0x17e>
 8006470:	0034      	movs	r4, r6
 8006472:	003d      	movs	r5, r7
 8006474:	4659      	mov	r1, fp
 8006476:	1aa4      	subs	r4, r4, r2
 8006478:	419d      	sbcs	r5, r3
 800647a:	2900      	cmp	r1, #0
 800647c:	da00      	bge.n	8006480 <__divdi3+0x98>
 800647e:	e075      	b.n	800656c <__divdi3+0x184>
 8006480:	2100      	movs	r1, #0
 8006482:	2000      	movs	r0, #0
 8006484:	2601      	movs	r6, #1
 8006486:	9000      	str	r0, [sp, #0]
 8006488:	9101      	str	r1, [sp, #4]
 800648a:	4659      	mov	r1, fp
 800648c:	408e      	lsls	r6, r1
 800648e:	9601      	str	r6, [sp, #4]
 8006490:	4661      	mov	r1, ip
 8006492:	2601      	movs	r6, #1
 8006494:	408e      	lsls	r6, r1
 8006496:	4661      	mov	r1, ip
 8006498:	9600      	str	r6, [sp, #0]
 800649a:	2900      	cmp	r1, #0
 800649c:	d060      	beq.n	8006560 <__divdi3+0x178>
 800649e:	07d9      	lsls	r1, r3, #31
 80064a0:	0856      	lsrs	r6, r2, #1
 80064a2:	430e      	orrs	r6, r1
 80064a4:	085f      	lsrs	r7, r3, #1
 80064a6:	4661      	mov	r1, ip
 80064a8:	2201      	movs	r2, #1
 80064aa:	2300      	movs	r3, #0
 80064ac:	e00c      	b.n	80064c8 <__divdi3+0xe0>
 80064ae:	42af      	cmp	r7, r5
 80064b0:	d101      	bne.n	80064b6 <__divdi3+0xce>
 80064b2:	42a6      	cmp	r6, r4
 80064b4:	d80a      	bhi.n	80064cc <__divdi3+0xe4>
 80064b6:	1ba4      	subs	r4, r4, r6
 80064b8:	41bd      	sbcs	r5, r7
 80064ba:	1924      	adds	r4, r4, r4
 80064bc:	416d      	adcs	r5, r5
 80064be:	3901      	subs	r1, #1
 80064c0:	18a4      	adds	r4, r4, r2
 80064c2:	415d      	adcs	r5, r3
 80064c4:	2900      	cmp	r1, #0
 80064c6:	d006      	beq.n	80064d6 <__divdi3+0xee>
 80064c8:	42af      	cmp	r7, r5
 80064ca:	d9f0      	bls.n	80064ae <__divdi3+0xc6>
 80064cc:	3901      	subs	r1, #1
 80064ce:	1924      	adds	r4, r4, r4
 80064d0:	416d      	adcs	r5, r5
 80064d2:	2900      	cmp	r1, #0
 80064d4:	d1f8      	bne.n	80064c8 <__divdi3+0xe0>
 80064d6:	9800      	ldr	r0, [sp, #0]
 80064d8:	9901      	ldr	r1, [sp, #4]
 80064da:	465b      	mov	r3, fp
 80064dc:	1900      	adds	r0, r0, r4
 80064de:	4169      	adcs	r1, r5
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	db4e      	blt.n	8006582 <__divdi3+0x19a>
 80064e4:	002e      	movs	r6, r5
 80064e6:	002c      	movs	r4, r5
 80064e8:	40de      	lsrs	r6, r3
 80064ea:	4663      	mov	r3, ip
 80064ec:	40dc      	lsrs	r4, r3
 80064ee:	465b      	mov	r3, fp
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	db56      	blt.n	80065a2 <__divdi3+0x1ba>
 80064f4:	0034      	movs	r4, r6
 80064f6:	409c      	lsls	r4, r3
 80064f8:	0023      	movs	r3, r4
 80064fa:	4664      	mov	r4, ip
 80064fc:	40a6      	lsls	r6, r4
 80064fe:	0032      	movs	r2, r6
 8006500:	1a80      	subs	r0, r0, r2
 8006502:	4199      	sbcs	r1, r3
 8006504:	e003      	b.n	800650e <__divdi3+0x126>
 8006506:	42b0      	cmp	r0, r6
 8006508:	d996      	bls.n	8006438 <__divdi3+0x50>
 800650a:	2000      	movs	r0, #0
 800650c:	2100      	movs	r1, #0
 800650e:	4643      	mov	r3, r8
 8006510:	2b00      	cmp	r3, #0
 8006512:	d004      	beq.n	800651e <__divdi3+0x136>
 8006514:	0003      	movs	r3, r0
 8006516:	000c      	movs	r4, r1
 8006518:	2100      	movs	r1, #0
 800651a:	4258      	negs	r0, r3
 800651c:	41a1      	sbcs	r1, r4
 800651e:	b003      	add	sp, #12
 8006520:	bcf0      	pop	{r4, r5, r6, r7}
 8006522:	46bb      	mov	fp, r7
 8006524:	46b2      	mov	sl, r6
 8006526:	46a9      	mov	r9, r5
 8006528:	46a0      	mov	r8, r4
 800652a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800652c:	4662      	mov	r2, ip
 800652e:	4648      	mov	r0, r9
 8006530:	469b      	mov	fp, r3
 8006532:	2320      	movs	r3, #32
 8006534:	4651      	mov	r1, sl
 8006536:	4090      	lsls	r0, r2
 8006538:	1a9b      	subs	r3, r3, r2
 800653a:	40d9      	lsrs	r1, r3
 800653c:	0003      	movs	r3, r0
 800653e:	9100      	str	r1, [sp, #0]
 8006540:	9900      	ldr	r1, [sp, #0]
 8006542:	4660      	mov	r0, ip
 8006544:	430b      	orrs	r3, r1
 8006546:	4651      	mov	r1, sl
 8006548:	4081      	lsls	r1, r0
 800654a:	000a      	movs	r2, r1
 800654c:	42bb      	cmp	r3, r7
 800654e:	d800      	bhi.n	8006552 <__divdi3+0x16a>
 8006550:	e78b      	b.n	800646a <__divdi3+0x82>
 8006552:	2100      	movs	r1, #0
 8006554:	2000      	movs	r0, #0
 8006556:	9000      	str	r0, [sp, #0]
 8006558:	9101      	str	r1, [sp, #4]
 800655a:	4661      	mov	r1, ip
 800655c:	2900      	cmp	r1, #0
 800655e:	d19e      	bne.n	800649e <__divdi3+0xb6>
 8006560:	9800      	ldr	r0, [sp, #0]
 8006562:	9901      	ldr	r1, [sp, #4]
 8006564:	e7d3      	b.n	800650e <__divdi3+0x126>
 8006566:	42b1      	cmp	r1, r6
 8006568:	d8f3      	bhi.n	8006552 <__divdi3+0x16a>
 800656a:	e781      	b.n	8006470 <__divdi3+0x88>
 800656c:	4661      	mov	r1, ip
 800656e:	2620      	movs	r6, #32
 8006570:	2701      	movs	r7, #1
 8006572:	1a76      	subs	r6, r6, r1
 8006574:	2000      	movs	r0, #0
 8006576:	2100      	movs	r1, #0
 8006578:	40f7      	lsrs	r7, r6
 800657a:	9000      	str	r0, [sp, #0]
 800657c:	9101      	str	r1, [sp, #4]
 800657e:	9701      	str	r7, [sp, #4]
 8006580:	e786      	b.n	8006490 <__divdi3+0xa8>
 8006582:	4662      	mov	r2, ip
 8006584:	2320      	movs	r3, #32
 8006586:	1a9b      	subs	r3, r3, r2
 8006588:	002a      	movs	r2, r5
 800658a:	409a      	lsls	r2, r3
 800658c:	0026      	movs	r6, r4
 800658e:	0013      	movs	r3, r2
 8006590:	4662      	mov	r2, ip
 8006592:	40d6      	lsrs	r6, r2
 8006594:	002c      	movs	r4, r5
 8006596:	431e      	orrs	r6, r3
 8006598:	4663      	mov	r3, ip
 800659a:	40dc      	lsrs	r4, r3
 800659c:	465b      	mov	r3, fp
 800659e:	2b00      	cmp	r3, #0
 80065a0:	daa8      	bge.n	80064f4 <__divdi3+0x10c>
 80065a2:	4662      	mov	r2, ip
 80065a4:	2320      	movs	r3, #32
 80065a6:	0035      	movs	r5, r6
 80065a8:	4094      	lsls	r4, r2
 80065aa:	1a9b      	subs	r3, r3, r2
 80065ac:	40dd      	lsrs	r5, r3
 80065ae:	0023      	movs	r3, r4
 80065b0:	432b      	orrs	r3, r5
 80065b2:	e7a2      	b.n	80064fa <__divdi3+0x112>

080065b4 <__clzdi2>:
 80065b4:	b510      	push	{r4, lr}
 80065b6:	2900      	cmp	r1, #0
 80065b8:	d103      	bne.n	80065c2 <__clzdi2+0xe>
 80065ba:	f7ff fef7 	bl	80063ac <__clzsi2>
 80065be:	3020      	adds	r0, #32
 80065c0:	e002      	b.n	80065c8 <__clzdi2+0x14>
 80065c2:	0008      	movs	r0, r1
 80065c4:	f7ff fef2 	bl	80063ac <__clzsi2>
 80065c8:	bd10      	pop	{r4, pc}
 80065ca:	46c0      	nop			; (mov r8, r8)

080065cc <Sensors_I2C_WriteRegister>:
 * @param len��д��ĳ���
 *	@param data_ptr:ָ��Ҫд�������
 * @retval ����Ϊ0��������Ϊ��0
 */
int Sensors_I2C_WriteRegister(unsigned char slave_addr, unsigned char reg_addr, unsigned short len,
		unsigned char *data_ptr) {
 80065cc:	b5b0      	push	{r4, r5, r7, lr}
 80065ce:	b088      	sub	sp, #32
 80065d0:	af04      	add	r7, sp, #16
 80065d2:	0004      	movs	r4, r0
 80065d4:	0008      	movs	r0, r1
 80065d6:	0011      	movs	r1, r2
 80065d8:	603b      	str	r3, [r7, #0]
 80065da:	1dfb      	adds	r3, r7, #7
 80065dc:	1c22      	adds	r2, r4, #0
 80065de:	701a      	strb	r2, [r3, #0]
 80065e0:	1dbb      	adds	r3, r7, #6
 80065e2:	1c02      	adds	r2, r0, #0
 80065e4:	701a      	strb	r2, [r3, #0]
 80065e6:	1d3b      	adds	r3, r7, #4
 80065e8:	1c0a      	adds	r2, r1, #0
 80065ea:	801a      	strh	r2, [r3, #0]

	HAL_StatusTypeDef status = HAL_OK;
 80065ec:	200f      	movs	r0, #15
 80065ee:	183b      	adds	r3, r7, r0
 80065f0:	2200      	movs	r2, #0
 80065f2:	701a      	strb	r2, [r3, #0]
	status = HAL_I2C_Mem_Write(&hi2c1, slave_addr, reg_addr,
 80065f4:	1dfb      	adds	r3, r7, #7
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	b299      	uxth	r1, r3
 80065fa:	1dbb      	adds	r3, r7, #6
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	b29a      	uxth	r2, r3
 8006600:	0005      	movs	r5, r0
 8006602:	183c      	adds	r4, r7, r0
 8006604:	481d      	ldr	r0, [pc, #116]	; (800667c <Sensors_I2C_WriteRegister+0xb0>)
 8006606:	23fa      	movs	r3, #250	; 0xfa
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	9302      	str	r3, [sp, #8]
 800660c:	1d3b      	adds	r3, r7, #4
 800660e:	881b      	ldrh	r3, [r3, #0]
 8006610:	9301      	str	r3, [sp, #4]
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	9300      	str	r3, [sp, #0]
 8006616:	2301      	movs	r3, #1
 8006618:	f001 fbc0 	bl	8007d9c <HAL_I2C_Mem_Write>
 800661c:	0003      	movs	r3, r0
 800661e:	7023      	strb	r3, [r4, #0]
	I2C_MEMADD_SIZE_8BIT, (uint8_t*) data_ptr, len, I2C_TIMEOUT);

	/* ���ͨѶ״̬ */
	if (status != HAL_OK) {
 8006620:	197b      	adds	r3, r7, r5
 8006622:	781b      	ldrb	r3, [r3, #0]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d005      	beq.n	8006634 <Sensors_I2C_WriteRegister+0x68>
		/* ���߳����� */
		printf("I2C Write Wrong!!\r\n");
 8006628:	4b15      	ldr	r3, [pc, #84]	; (8006680 <Sensors_I2C_WriteRegister+0xb4>)
 800662a:	0018      	movs	r0, r3
 800662c:	f00b fb1c 	bl	8011c68 <puts>
		return HAL_ERROR;
 8006630:	2301      	movs	r3, #1
 8006632:	e01f      	b.n	8006674 <Sensors_I2C_WriteRegister+0xa8>
	}

	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8006634:	46c0      	nop			; (mov r8, r8)
 8006636:	4b11      	ldr	r3, [pc, #68]	; (800667c <Sensors_I2C_WriteRegister+0xb0>)
 8006638:	0018      	movs	r0, r3
 800663a:	f001 ff2b 	bl	8008494 <HAL_I2C_GetState>
 800663e:	0003      	movs	r3, r0
 8006640:	2b20      	cmp	r3, #32
 8006642:	d1f8      	bne.n	8006636 <Sensors_I2C_WriteRegister+0x6a>
	}

	/* ���SENSOR�Ƿ����������һ�ζ�д���� */
	while (HAL_I2C_IsDeviceReady(&hi2c1, slave_addr, 50, I2C_TIMEOUT) == HAL_TIMEOUT)
 8006644:	46c0      	nop			; (mov r8, r8)
 8006646:	1dfb      	adds	r3, r7, #7
 8006648:	781b      	ldrb	r3, [r3, #0]
 800664a:	b299      	uxth	r1, r3
 800664c:	23fa      	movs	r3, #250	; 0xfa
 800664e:	009b      	lsls	r3, r3, #2
 8006650:	480a      	ldr	r0, [pc, #40]	; (800667c <Sensors_I2C_WriteRegister+0xb0>)
 8006652:	2232      	movs	r2, #50	; 0x32
 8006654:	f001 fe04 	bl	8008260 <HAL_I2C_IsDeviceReady>
 8006658:	0003      	movs	r3, r0
 800665a:	2b03      	cmp	r3, #3
 800665c:	d0f3      	beq.n	8006646 <Sensors_I2C_WriteRegister+0x7a>
		;

	/* �ȴ�������� */
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 800665e:	46c0      	nop			; (mov r8, r8)
 8006660:	4b06      	ldr	r3, [pc, #24]	; (800667c <Sensors_I2C_WriteRegister+0xb0>)
 8006662:	0018      	movs	r0, r3
 8006664:	f001 ff16 	bl	8008494 <HAL_I2C_GetState>
 8006668:	0003      	movs	r3, r0
 800666a:	2b20      	cmp	r3, #32
 800666c:	d1f8      	bne.n	8006660 <Sensors_I2C_WriteRegister+0x94>

	}

	return status;
 800666e:	230f      	movs	r3, #15
 8006670:	18fb      	adds	r3, r7, r3
 8006672:	781b      	ldrb	r3, [r3, #0]
}
 8006674:	0018      	movs	r0, r3
 8006676:	46bd      	mov	sp, r7
 8006678:	b004      	add	sp, #16
 800667a:	bdb0      	pop	{r4, r5, r7, pc}
 800667c:	200005bc 	.word	0x200005bc
 8006680:	08015784 	.word	0x08015784

08006684 <Sensors_I2C_ReadRegister>:
 * @param len��Ҫ��ȡ�ĳ���
 *	@param data_ptr:ָ��Ҫ�洢���ݵ�ָ��
 * @retval ����Ϊ0��������Ϊ��0
 */
int Sensors_I2C_ReadRegister(unsigned char slave_addr, unsigned char reg_addr, unsigned short len,
		unsigned char *data_ptr) {
 8006684:	b5b0      	push	{r4, r5, r7, lr}
 8006686:	b088      	sub	sp, #32
 8006688:	af04      	add	r7, sp, #16
 800668a:	0004      	movs	r4, r0
 800668c:	0008      	movs	r0, r1
 800668e:	0011      	movs	r1, r2
 8006690:	603b      	str	r3, [r7, #0]
 8006692:	1dfb      	adds	r3, r7, #7
 8006694:	1c22      	adds	r2, r4, #0
 8006696:	701a      	strb	r2, [r3, #0]
 8006698:	1dbb      	adds	r3, r7, #6
 800669a:	1c02      	adds	r2, r0, #0
 800669c:	701a      	strb	r2, [r3, #0]
 800669e:	1d3b      	adds	r3, r7, #4
 80066a0:	1c0a      	adds	r2, r1, #0
 80066a2:	801a      	strh	r2, [r3, #0]

//	printf("%d %d\n", reg_addr, len);

	HAL_StatusTypeDef status = HAL_OK;
 80066a4:	200f      	movs	r0, #15
 80066a6:	183b      	adds	r3, r7, r0
 80066a8:	2200      	movs	r2, #0
 80066aa:	701a      	strb	r2, [r3, #0]
	status = HAL_I2C_Mem_Read(&hi2c1, slave_addr, reg_addr,
 80066ac:	1dfb      	adds	r3, r7, #7
 80066ae:	781b      	ldrb	r3, [r3, #0]
 80066b0:	b299      	uxth	r1, r3
 80066b2:	1dbb      	adds	r3, r7, #6
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	b29a      	uxth	r2, r3
 80066b8:	0005      	movs	r5, r0
 80066ba:	183c      	adds	r4, r7, r0
 80066bc:	481d      	ldr	r0, [pc, #116]	; (8006734 <Sensors_I2C_ReadRegister+0xb0>)
 80066be:	23fa      	movs	r3, #250	; 0xfa
 80066c0:	009b      	lsls	r3, r3, #2
 80066c2:	9302      	str	r3, [sp, #8]
 80066c4:	1d3b      	adds	r3, r7, #4
 80066c6:	881b      	ldrh	r3, [r3, #0]
 80066c8:	9301      	str	r3, [sp, #4]
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	9300      	str	r3, [sp, #0]
 80066ce:	2301      	movs	r3, #1
 80066d0:	f001 fc92 	bl	8007ff8 <HAL_I2C_Mem_Read>
 80066d4:	0003      	movs	r3, r0
 80066d6:	7023      	strb	r3, [r4, #0]
	I2C_MEMADD_SIZE_8BIT, (uint8_t*) data_ptr, len, I2C_TIMEOUT);

	/* ���ͨѶ״̬ */
	if (status != HAL_OK) {
 80066d8:	197b      	adds	r3, r7, r5
 80066da:	781b      	ldrb	r3, [r3, #0]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d005      	beq.n	80066ec <Sensors_I2C_ReadRegister+0x68>
		/* ���߳����� */
		printf("I2C Read Wrong!!\r\n");
 80066e0:	4b15      	ldr	r3, [pc, #84]	; (8006738 <Sensors_I2C_ReadRegister+0xb4>)
 80066e2:	0018      	movs	r0, r3
 80066e4:	f00b fac0 	bl	8011c68 <puts>
		return HAL_ERROR;
 80066e8:	2301      	movs	r3, #1
 80066ea:	e01f      	b.n	800672c <Sensors_I2C_ReadRegister+0xa8>
	}

	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80066ec:	46c0      	nop			; (mov r8, r8)
 80066ee:	4b11      	ldr	r3, [pc, #68]	; (8006734 <Sensors_I2C_ReadRegister+0xb0>)
 80066f0:	0018      	movs	r0, r3
 80066f2:	f001 fecf 	bl	8008494 <HAL_I2C_GetState>
 80066f6:	0003      	movs	r3, r0
 80066f8:	2b20      	cmp	r3, #32
 80066fa:	d1f8      	bne.n	80066ee <Sensors_I2C_ReadRegister+0x6a>
	}

	/* ���SENSOR�Ƿ����������һ�ζ�д���� */
	while (HAL_I2C_IsDeviceReady(&hi2c1, slave_addr, 50, I2C_TIMEOUT) == HAL_TIMEOUT)
 80066fc:	46c0      	nop			; (mov r8, r8)
 80066fe:	1dfb      	adds	r3, r7, #7
 8006700:	781b      	ldrb	r3, [r3, #0]
 8006702:	b299      	uxth	r1, r3
 8006704:	23fa      	movs	r3, #250	; 0xfa
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	480a      	ldr	r0, [pc, #40]	; (8006734 <Sensors_I2C_ReadRegister+0xb0>)
 800670a:	2232      	movs	r2, #50	; 0x32
 800670c:	f001 fda8 	bl	8008260 <HAL_I2C_IsDeviceReady>
 8006710:	0003      	movs	r3, r0
 8006712:	2b03      	cmp	r3, #3
 8006714:	d0f3      	beq.n	80066fe <Sensors_I2C_ReadRegister+0x7a>
		;

	/* �ȴ�������� */
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8006716:	46c0      	nop			; (mov r8, r8)
 8006718:	4b06      	ldr	r3, [pc, #24]	; (8006734 <Sensors_I2C_ReadRegister+0xb0>)
 800671a:	0018      	movs	r0, r3
 800671c:	f001 feba 	bl	8008494 <HAL_I2C_GetState>
 8006720:	0003      	movs	r3, r0
 8006722:	2b20      	cmp	r3, #32
 8006724:	d1f8      	bne.n	8006718 <Sensors_I2C_ReadRegister+0x94>

	}

	return status;
 8006726:	230f      	movs	r3, #15
 8006728:	18fb      	adds	r3, r7, r3
 800672a:	781b      	ldrb	r3, [r3, #0]
}
 800672c:	0018      	movs	r0, r3
 800672e:	46bd      	mov	sp, r7
 8006730:	b004      	add	sp, #16
 8006732:	bdb0      	pop	{r4, r5, r7, pc}
 8006734:	200005bc 	.word	0x200005bc
 8006738:	08015798 	.word	0x08015798

0800673c <get_tick_count>:
/**
 * @brief  ��ȡ��ǰ����ֵ
 * @param  �洢���º���ֵ�ı���
 * @retval ��
 */
int get_tick_count(unsigned long *count) {
 800673c:	b580      	push	{r7, lr}
 800673e:	b082      	sub	sp, #8
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
	count[0] = HAL_GetTick();
 8006744:	f000 ffbc 	bl	80076c0 <HAL_GetTick>
 8006748:	0002      	movs	r2, r0
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	601a      	str	r2, [r3, #0]
	return 0;
 800674e:	2300      	movs	r3, #0
}
 8006750:	0018      	movs	r0, r3
 8006752:	46bd      	mov	sp, r7
 8006754:	b002      	add	sp, #8
 8006756:	bd80      	pop	{r7, pc}

08006758 <run_self_test>:
int fputcc(int ch) {
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 1000);
	return ch;
}

static inline int run_self_test(void) {
 8006758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800675a:	b091      	sub	sp, #68	; 0x44
 800675c:	af04      	add	r7, sp, #16

	int result;
	long gyro[3], accel[3];
	result = mpu_run_self_test(gyro, accel);
 800675e:	230c      	movs	r3, #12
 8006760:	2108      	movs	r1, #8
 8006762:	185b      	adds	r3, r3, r1
 8006764:	19da      	adds	r2, r3, r7
 8006766:	2318      	movs	r3, #24
 8006768:	185b      	adds	r3, r3, r1
 800676a:	19db      	adds	r3, r3, r7
 800676c:	0011      	movs	r1, r2
 800676e:	0018      	movs	r0, r3
 8006770:	f006 fb44 	bl	800cdfc <mpu_run_self_test>
 8006774:	0003      	movs	r3, r0
 8006776:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (result != 0x7) {
 8006778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800677a:	2b07      	cmp	r3, #7
 800677c:	d01a      	beq.n	80067b4 <run_self_test+0x5c>
		if (!(result & 0x1))
 800677e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006780:	2201      	movs	r2, #1
 8006782:	4013      	ands	r3, r2
 8006784:	d103      	bne.n	800678e <run_self_test+0x36>
			printf("Gyro failed.\n");
 8006786:	4b8f      	ldr	r3, [pc, #572]	; (80069c4 <run_self_test+0x26c>)
 8006788:	0018      	movs	r0, r3
 800678a:	f00b fa6d 	bl	8011c68 <puts>
		if (!(result & 0x2))
 800678e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006790:	2202      	movs	r2, #2
 8006792:	4013      	ands	r3, r2
 8006794:	d103      	bne.n	800679e <run_self_test+0x46>
			printf("Accel failed.\n");
 8006796:	4b8c      	ldr	r3, [pc, #560]	; (80069c8 <run_self_test+0x270>)
 8006798:	0018      	movs	r0, r3
 800679a:	f00b fa65 	bl	8011c68 <puts>
		if (!(result & 0x4))
 800679e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067a0:	2204      	movs	r2, #4
 80067a2:	4013      	ands	r3, r2
 80067a4:	d103      	bne.n	80067ae <run_self_test+0x56>
			printf("Compass failed.\n");
 80067a6:	4b89      	ldr	r3, [pc, #548]	; (80069cc <run_self_test+0x274>)
 80067a8:	0018      	movs	r0, r3
 80067aa:	f00b fa5d 	bl	8011c68 <puts>
		return -1;
 80067ae:	2301      	movs	r3, #1
 80067b0:	425b      	negs	r3, r3
 80067b2:	e102      	b.n	80069ba <run_self_test+0x262>
	}

	printf("Passed!\n");
 80067b4:	4b86      	ldr	r3, [pc, #536]	; (80069d0 <run_self_test+0x278>)
 80067b6:	0018      	movs	r0, r3
 80067b8:	f00b fa56 	bl	8011c68 <puts>
	printf("accel: %.2f %.2f %.2f\n", accel[0] / 65536.f, accel[1] / 65536.f, accel[2] / 65536.f);
 80067bc:	260c      	movs	r6, #12
 80067be:	2508      	movs	r5, #8
 80067c0:	1973      	adds	r3, r6, r5
 80067c2:	19db      	adds	r3, r3, r7
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	0018      	movs	r0, r3
 80067c8:	f7fd fe40 	bl	800444c <__aeabi_i2f>
 80067cc:	1c03      	adds	r3, r0, #0
 80067ce:	218f      	movs	r1, #143	; 0x8f
 80067d0:	05c9      	lsls	r1, r1, #23
 80067d2:	1c18      	adds	r0, r3, #0
 80067d4:	f7fd f94c 	bl	8003a70 <__aeabi_fdiv>
 80067d8:	1c03      	adds	r3, r0, #0
 80067da:	1c18      	adds	r0, r3, #0
 80067dc:	f7ff fd18 	bl	8006210 <__aeabi_f2d>
 80067e0:	6038      	str	r0, [r7, #0]
 80067e2:	6079      	str	r1, [r7, #4]
 80067e4:	1972      	adds	r2, r6, r5
 80067e6:	19d3      	adds	r3, r2, r7
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	0018      	movs	r0, r3
 80067ec:	f7fd fe2e 	bl	800444c <__aeabi_i2f>
 80067f0:	1c03      	adds	r3, r0, #0
 80067f2:	218f      	movs	r1, #143	; 0x8f
 80067f4:	05c9      	lsls	r1, r1, #23
 80067f6:	1c18      	adds	r0, r3, #0
 80067f8:	f7fd f93a 	bl	8003a70 <__aeabi_fdiv>
 80067fc:	1c03      	adds	r3, r0, #0
 80067fe:	1c18      	adds	r0, r3, #0
 8006800:	f7ff fd06 	bl	8006210 <__aeabi_f2d>
 8006804:	0004      	movs	r4, r0
 8006806:	000d      	movs	r5, r1
 8006808:	2308      	movs	r3, #8
 800680a:	18f2      	adds	r2, r6, r3
 800680c:	19d3      	adds	r3, r2, r7
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	0018      	movs	r0, r3
 8006812:	f7fd fe1b 	bl	800444c <__aeabi_i2f>
 8006816:	1c03      	adds	r3, r0, #0
 8006818:	218f      	movs	r1, #143	; 0x8f
 800681a:	05c9      	lsls	r1, r1, #23
 800681c:	1c18      	adds	r0, r3, #0
 800681e:	f7fd f927 	bl	8003a70 <__aeabi_fdiv>
 8006822:	1c03      	adds	r3, r0, #0
 8006824:	1c18      	adds	r0, r3, #0
 8006826:	f7ff fcf3 	bl	8006210 <__aeabi_f2d>
 800682a:	0002      	movs	r2, r0
 800682c:	000b      	movs	r3, r1
 800682e:	4969      	ldr	r1, [pc, #420]	; (80069d4 <run_self_test+0x27c>)
 8006830:	9202      	str	r2, [sp, #8]
 8006832:	9303      	str	r3, [sp, #12]
 8006834:	9400      	str	r4, [sp, #0]
 8006836:	9501      	str	r5, [sp, #4]
 8006838:	683a      	ldr	r2, [r7, #0]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	0008      	movs	r0, r1
 800683e:	f00b f9ad 	bl	8011b9c <iprintf>
	printf("gyro: %.2f %.2f %.2f\n", gyro[0] / 65536.f, gyro[1] / 65536.f, gyro[2] / 65536.f);
 8006842:	2418      	movs	r4, #24
 8006844:	2508      	movs	r5, #8
 8006846:	1963      	adds	r3, r4, r5
 8006848:	19db      	adds	r3, r3, r7
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	0018      	movs	r0, r3
 800684e:	f7fd fdfd 	bl	800444c <__aeabi_i2f>
 8006852:	1c03      	adds	r3, r0, #0
 8006854:	218f      	movs	r1, #143	; 0x8f
 8006856:	05c9      	lsls	r1, r1, #23
 8006858:	1c18      	adds	r0, r3, #0
 800685a:	f7fd f909 	bl	8003a70 <__aeabi_fdiv>
 800685e:	1c03      	adds	r3, r0, #0
 8006860:	1c18      	adds	r0, r3, #0
 8006862:	f7ff fcd5 	bl	8006210 <__aeabi_f2d>
 8006866:	6038      	str	r0, [r7, #0]
 8006868:	6079      	str	r1, [r7, #4]
 800686a:	1963      	adds	r3, r4, r5
 800686c:	19db      	adds	r3, r3, r7
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	0018      	movs	r0, r3
 8006872:	f7fd fdeb 	bl	800444c <__aeabi_i2f>
 8006876:	1c03      	adds	r3, r0, #0
 8006878:	218f      	movs	r1, #143	; 0x8f
 800687a:	05c9      	lsls	r1, r1, #23
 800687c:	1c18      	adds	r0, r3, #0
 800687e:	f7fd f8f7 	bl	8003a70 <__aeabi_fdiv>
 8006882:	1c03      	adds	r3, r0, #0
 8006884:	1c18      	adds	r0, r3, #0
 8006886:	f7ff fcc3 	bl	8006210 <__aeabi_f2d>
 800688a:	0004      	movs	r4, r0
 800688c:	000d      	movs	r5, r1
 800688e:	2318      	movs	r3, #24
 8006890:	2208      	movs	r2, #8
 8006892:	189b      	adds	r3, r3, r2
 8006894:	19db      	adds	r3, r3, r7
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	0018      	movs	r0, r3
 800689a:	f7fd fdd7 	bl	800444c <__aeabi_i2f>
 800689e:	1c03      	adds	r3, r0, #0
 80068a0:	218f      	movs	r1, #143	; 0x8f
 80068a2:	05c9      	lsls	r1, r1, #23
 80068a4:	1c18      	adds	r0, r3, #0
 80068a6:	f7fd f8e3 	bl	8003a70 <__aeabi_fdiv>
 80068aa:	1c03      	adds	r3, r0, #0
 80068ac:	1c18      	adds	r0, r3, #0
 80068ae:	f7ff fcaf 	bl	8006210 <__aeabi_f2d>
 80068b2:	0002      	movs	r2, r0
 80068b4:	000b      	movs	r3, r1
 80068b6:	4948      	ldr	r1, [pc, #288]	; (80069d8 <run_self_test+0x280>)
 80068b8:	9202      	str	r2, [sp, #8]
 80068ba:	9303      	str	r3, [sp, #12]
 80068bc:	9400      	str	r4, [sp, #0]
 80068be:	9501      	str	r5, [sp, #4]
 80068c0:	683a      	ldr	r2, [r7, #0]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	0008      	movs	r0, r1
 80068c6:	f00b f969 	bl	8011b9c <iprintf>
	 * biases in g's << 16.
	 */
	unsigned short accel_sens;
	float gyro_sens;

	mpu_get_accel_sens(&accel_sens);
 80068ca:	250a      	movs	r5, #10
 80068cc:	2408      	movs	r4, #8
 80068ce:	192b      	adds	r3, r5, r4
 80068d0:	19db      	adds	r3, r3, r7
 80068d2:	0018      	movs	r0, r3
 80068d4:	f005 f98e 	bl	800bbf4 <mpu_get_accel_sens>
	accel[0] *= accel_sens;
 80068d8:	0022      	movs	r2, r4
 80068da:	18b3      	adds	r3, r6, r2
 80068dc:	19db      	adds	r3, r3, r7
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	0028      	movs	r0, r5
 80068e2:	0015      	movs	r5, r2
 80068e4:	1882      	adds	r2, r0, r2
 80068e6:	19d2      	adds	r2, r2, r7
 80068e8:	8812      	ldrh	r2, [r2, #0]
 80068ea:	435a      	muls	r2, r3
 80068ec:	1973      	adds	r3, r6, r5
 80068ee:	19db      	adds	r3, r3, r7
 80068f0:	601a      	str	r2, [r3, #0]
	accel[1] *= accel_sens;
 80068f2:	0031      	movs	r1, r6
 80068f4:	1973      	adds	r3, r6, r5
 80068f6:	19db      	adds	r3, r3, r7
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	1942      	adds	r2, r0, r5
 80068fc:	19d2      	adds	r2, r2, r7
 80068fe:	8812      	ldrh	r2, [r2, #0]
 8006900:	435a      	muls	r2, r3
 8006902:	194b      	adds	r3, r1, r5
 8006904:	19db      	adds	r3, r3, r7
 8006906:	605a      	str	r2, [r3, #4]
	accel[2] *= accel_sens;
 8006908:	194b      	adds	r3, r1, r5
 800690a:	19db      	adds	r3, r3, r7
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	1942      	adds	r2, r0, r5
 8006910:	19d2      	adds	r2, r2, r7
 8006912:	8812      	ldrh	r2, [r2, #0]
 8006914:	435a      	muls	r2, r3
 8006916:	194b      	adds	r3, r1, r5
 8006918:	19db      	adds	r3, r3, r7
 800691a:	609a      	str	r2, [r3, #8]
	inv_set_accel_bias(accel, 3);
 800691c:	194b      	adds	r3, r1, r5
 800691e:	19db      	adds	r3, r3, r7
 8006920:	2103      	movs	r1, #3
 8006922:	0018      	movs	r0, r3
 8006924:	f003 fe72 	bl	800a60c <inv_set_accel_bias>

	mpu_get_gyro_sens(&gyro_sens);
 8006928:	230c      	movs	r3, #12
 800692a:	18fb      	adds	r3, r7, r3
 800692c:	0018      	movs	r0, r3
 800692e:	f005 f92d 	bl	800bb8c <mpu_get_gyro_sens>
	gyro[0] = (long) (gyro[0] * gyro_sens);
 8006932:	2418      	movs	r4, #24
 8006934:	1963      	adds	r3, r4, r5
 8006936:	19db      	adds	r3, r3, r7
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	0018      	movs	r0, r3
 800693c:	f7fd fd86 	bl	800444c <__aeabi_i2f>
 8006940:	1c02      	adds	r2, r0, #0
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	1c19      	adds	r1, r3, #0
 8006946:	1c10      	adds	r0, r2, #0
 8006948:	f7fd fa5c 	bl	8003e04 <__aeabi_fmul>
 800694c:	1c03      	adds	r3, r0, #0
 800694e:	1c18      	adds	r0, r3, #0
 8006950:	f7fd fd5c 	bl	800440c <__aeabi_f2iz>
 8006954:	0002      	movs	r2, r0
 8006956:	1963      	adds	r3, r4, r5
 8006958:	19db      	adds	r3, r3, r7
 800695a:	601a      	str	r2, [r3, #0]
	gyro[1] = (long) (gyro[1] * gyro_sens);
 800695c:	1963      	adds	r3, r4, r5
 800695e:	19db      	adds	r3, r3, r7
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	0018      	movs	r0, r3
 8006964:	f7fd fd72 	bl	800444c <__aeabi_i2f>
 8006968:	1c02      	adds	r2, r0, #0
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	1c19      	adds	r1, r3, #0
 800696e:	1c10      	adds	r0, r2, #0
 8006970:	f7fd fa48 	bl	8003e04 <__aeabi_fmul>
 8006974:	1c03      	adds	r3, r0, #0
 8006976:	1c18      	adds	r0, r3, #0
 8006978:	f7fd fd48 	bl	800440c <__aeabi_f2iz>
 800697c:	0002      	movs	r2, r0
 800697e:	1963      	adds	r3, r4, r5
 8006980:	19db      	adds	r3, r3, r7
 8006982:	605a      	str	r2, [r3, #4]
	gyro[2] = (long) (gyro[2] * gyro_sens);
 8006984:	1963      	adds	r3, r4, r5
 8006986:	19db      	adds	r3, r3, r7
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	0018      	movs	r0, r3
 800698c:	f7fd fd5e 	bl	800444c <__aeabi_i2f>
 8006990:	1c02      	adds	r2, r0, #0
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	1c19      	adds	r1, r3, #0
 8006996:	1c10      	adds	r0, r2, #0
 8006998:	f7fd fa34 	bl	8003e04 <__aeabi_fmul>
 800699c:	1c03      	adds	r3, r0, #0
 800699e:	1c18      	adds	r0, r3, #0
 80069a0:	f7fd fd34 	bl	800440c <__aeabi_f2iz>
 80069a4:	0002      	movs	r2, r0
 80069a6:	1963      	adds	r3, r4, r5
 80069a8:	19db      	adds	r3, r3, r7
 80069aa:	609a      	str	r2, [r3, #8]
	inv_set_gyro_bias(gyro, 3);
 80069ac:	1963      	adds	r3, r4, r5
 80069ae:	19db      	adds	r3, r3, r7
 80069b0:	2103      	movs	r1, #3
 80069b2:	0018      	movs	r0, r3
 80069b4:	f003 fe60 	bl	800a678 <inv_set_gyro_bias>

	return 0;
 80069b8:	2300      	movs	r3, #0
}
 80069ba:	0018      	movs	r0, r3
 80069bc:	46bd      	mov	sp, r7
 80069be:	b00d      	add	sp, #52	; 0x34
 80069c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069c2:	46c0      	nop			; (mov r8, r8)
 80069c4:	080157ac 	.word	0x080157ac
 80069c8:	080157bc 	.word	0x080157bc
 80069cc:	080157cc 	.word	0x080157cc
 80069d0:	080157dc 	.word	0x080157dc
 80069d4:	080157e4 	.word	0x080157e4
 80069d8:	080157fc 	.word	0x080157fc

080069dc <gyro_data_ready_cb>:

/* Every time new gyro data is available, this function is called in an
 * ISR context. In this example, it sets a flag protecting the FIFO read
 * function.
 */
void gyro_data_ready_cb(void) {
 80069dc:	b580      	push	{r7, lr}
 80069de:	af00      	add	r7, sp, #0
	hal.new_gyro = 1;
 80069e0:	4b02      	ldr	r3, [pc, #8]	; (80069ec <gyro_data_ready_cb+0x10>)
 80069e2:	2201      	movs	r2, #1
 80069e4:	711a      	strb	r2, [r3, #4]
}
 80069e6:	46c0      	nop			; (mov r8, r8)
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}
 80069ec:	20000590 	.word	0x20000590

080069f0 <HAL_GPIO_EXTI_Callback>:

uint32_t lsti, cnti, lstci;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b082      	sub	sp, #8
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	0002      	movs	r2, r0
 80069f8:	1dbb      	adds	r3, r7, #6
 80069fa:	801a      	strh	r2, [r3, #0]
	if (GPIO_Pin == GPIO_PIN_9) {
 80069fc:	1dbb      	adds	r3, r7, #6
 80069fe:	881a      	ldrh	r2, [r3, #0]
 8006a00:	2380      	movs	r3, #128	; 0x80
 8006a02:	009b      	lsls	r3, r3, #2
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d11c      	bne.n	8006a42 <HAL_GPIO_EXTI_Callback+0x52>
		cnti++;
 8006a08:	4b10      	ldr	r3, [pc, #64]	; (8006a4c <HAL_GPIO_EXTI_Callback+0x5c>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	1c5a      	adds	r2, r3, #1
 8006a0e:	4b0f      	ldr	r3, [pc, #60]	; (8006a4c <HAL_GPIO_EXTI_Callback+0x5c>)
 8006a10:	601a      	str	r2, [r3, #0]
		if (HAL_GetTick() - lsti >= 1000) {
 8006a12:	f000 fe55 	bl	80076c0 <HAL_GetTick>
 8006a16:	0002      	movs	r2, r0
 8006a18:	4b0d      	ldr	r3, [pc, #52]	; (8006a50 <HAL_GPIO_EXTI_Callback+0x60>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	1ad2      	subs	r2, r2, r3
 8006a1e:	23fa      	movs	r3, #250	; 0xfa
 8006a20:	009b      	lsls	r3, r3, #2
 8006a22:	429a      	cmp	r2, r3
 8006a24:	d30b      	bcc.n	8006a3e <HAL_GPIO_EXTI_Callback+0x4e>
			lstci = cnti;
 8006a26:	4b09      	ldr	r3, [pc, #36]	; (8006a4c <HAL_GPIO_EXTI_Callback+0x5c>)
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	4b0a      	ldr	r3, [pc, #40]	; (8006a54 <HAL_GPIO_EXTI_Callback+0x64>)
 8006a2c:	601a      	str	r2, [r3, #0]
			cnti = 0;
 8006a2e:	4b07      	ldr	r3, [pc, #28]	; (8006a4c <HAL_GPIO_EXTI_Callback+0x5c>)
 8006a30:	2200      	movs	r2, #0
 8006a32:	601a      	str	r2, [r3, #0]
			lsti = HAL_GetTick();
 8006a34:	f000 fe44 	bl	80076c0 <HAL_GetTick>
 8006a38:	0002      	movs	r2, r0
 8006a3a:	4b05      	ldr	r3, [pc, #20]	; (8006a50 <HAL_GPIO_EXTI_Callback+0x60>)
 8006a3c:	601a      	str	r2, [r3, #0]
		}
		gyro_data_ready_cb();
 8006a3e:	f7ff ffcd 	bl	80069dc <gyro_data_ready_cb>
	}
}
 8006a42:	46c0      	nop			; (mov r8, r8)
 8006a44:	46bd      	mov	sp, r7
 8006a46:	b002      	add	sp, #8
 8006a48:	bd80      	pop	{r7, pc}
 8006a4a:	46c0      	nop			; (mov r8, r8)
 8006a4c:	200005b4 	.word	0x200005b4
 8006a50:	200005b0 	.word	0x200005b0
 8006a54:	200005b8 	.word	0x200005b8

08006a58 <MPU6050_Init>:
 * @par Parameters None
 * @retval void None
 * @par Required preconditions: None
 */

int MPU6050_Init(void) {
 8006a58:	b590      	push	{r4, r7, lr}
 8006a5a:	b085      	sub	sp, #20
 8006a5c:	af00      	add	r7, sp, #0
	unsigned char accel_fsr;
	unsigned short gyro_rate, gyro_fsr;
	unsigned long timestamp;
	struct int_param_s int_param;

	if (mpu_init(&int_param)) {
 8006a5e:	003b      	movs	r3, r7
 8006a60:	0018      	movs	r0, r3
 8006a62:	f004 fba3 	bl	800b1ac <mpu_init>
 8006a66:	1e03      	subs	r3, r0, #0
 8006a68:	d006      	beq.n	8006a78 <MPU6050_Init+0x20>
		printf("Could not initialize gyro.\n");
 8006a6a:	4b6d      	ldr	r3, [pc, #436]	; (8006c20 <MPU6050_Init+0x1c8>)
 8006a6c:	0018      	movs	r0, r3
 8006a6e:	f00b f8fb 	bl	8011c68 <puts>
		return -1;
 8006a72:	2301      	movs	r3, #1
 8006a74:	425b      	negs	r3, r3
 8006a76:	e0cf      	b.n	8006c18 <MPU6050_Init+0x1c0>
	} else {
		printf("Gyro initialized.\n");
 8006a78:	4b6a      	ldr	r3, [pc, #424]	; (8006c24 <MPU6050_Init+0x1cc>)
 8006a7a:	0018      	movs	r0, r3
 8006a7c:	f00b f8f4 	bl	8011c68 <puts>
	/* If you're not using an MPU9150 AND you're not using DMP features, this
	 * function will place all slaves on the primary bus.
	 * mpu_set_bypass(1);
	 */

	if (inv_init_mpl()) {
 8006a80:	f008 fc14 	bl	800f2ac <inv_init_mpl>
 8006a84:	1e03      	subs	r3, r0, #0
 8006a86:	d006      	beq.n	8006a96 <MPU6050_Init+0x3e>
		printf("Could not initialize MPL.\n");
 8006a88:	4b67      	ldr	r3, [pc, #412]	; (8006c28 <MPU6050_Init+0x1d0>)
 8006a8a:	0018      	movs	r0, r3
 8006a8c:	f00b f8ec 	bl	8011c68 <puts>
		return -1;
 8006a90:	2301      	movs	r3, #1
 8006a92:	425b      	negs	r3, r3
 8006a94:	e0c0      	b.n	8006c18 <MPU6050_Init+0x1c0>
	} else {
		printf("MPL initialized.\n");
 8006a96:	4b65      	ldr	r3, [pc, #404]	; (8006c2c <MPU6050_Init+0x1d4>)
 8006a98:	0018      	movs	r0, r3
 8006a9a:	f00b f8e5 	bl	8011c68 <puts>
	}

	/* Compute 6-axis and 9-axis quaternions. */
	inv_enable_quaternion();
 8006a9e:	f7fc fac1 	bl	8003024 <inv_enable_quaternion>
	inv_enable_9x_sensor_fusion();
 8006aa2:	f7fa fdcb 	bl	800163c <inv_enable_9x_sensor_fusion>
	 */

	/* Update gyro biases when not in motion.
	 * WARNING: These algorithms are mutually exclusive.
	 */
	inv_enable_fast_nomot();
 8006aa6:	f7fa fa23 	bl	8000ef0 <inv_enable_fast_nomot>
//	inv_enable_motion_no_motion();
	inv_set_no_motion_time(2000);
 8006aaa:	23fa      	movs	r3, #250	; 0xfa
 8006aac:	00db      	lsls	r3, r3, #3
 8006aae:	0018      	movs	r0, r3
 8006ab0:	f7fb fd1c 	bl	80024ec <inv_set_no_motion_time>

	/* Update gyro biases when temperature changes. */
	inv_enable_gyro_tc();
 8006ab4:	f7fb f8bc 	bl	8001c30 <inv_enable_gyro_tc>
	 * detected, so we'll just leave it out to save memory.
	 * inv_enable_heading_from_gyro();
	 */

	/* Allows use of the MPL APIs in read_from_mpl. */
	inv_enable_eMPL_outputs();
 8006ab8:	f004 faf8 	bl	800b0ac <inv_enable_eMPL_outputs>

	if (inv_start_mpl()) {
 8006abc:	f008 fc30 	bl	800f320 <inv_start_mpl>
 8006ac0:	1e03      	subs	r3, r0, #0
 8006ac2:	d006      	beq.n	8006ad2 <MPU6050_Init+0x7a>
		printf("Could not start the MPL.\n");
 8006ac4:	4b5a      	ldr	r3, [pc, #360]	; (8006c30 <MPU6050_Init+0x1d8>)
 8006ac6:	0018      	movs	r0, r3
 8006ac8:	f00b f8ce 	bl	8011c68 <puts>
		return -1;
 8006acc:	2301      	movs	r3, #1
 8006ace:	425b      	negs	r3, r3
 8006ad0:	e0a2      	b.n	8006c18 <MPU6050_Init+0x1c0>
	/* Get/set hardware configuration. Start gyro. */
	/* Wake up all sensors. */
	/* Push both gyro and accel data into the FIFO. */
	/* Read back configuration in case it was set improperly. */

	if (mpu_set_sensors(INV_XYZ_GYRO | INV_XYZ_ACCEL)
 8006ad2:	2078      	movs	r0, #120	; 0x78
 8006ad4:	f005 f934 	bl	800bd40 <mpu_set_sensors>
 8006ad8:	1e03      	subs	r3, r0, #0
 8006ada:	d11e      	bne.n	8006b1a <MPU6050_Init+0xc2>
			|| mpu_configure_fifo(INV_XYZ_GYRO | INV_XYZ_ACCEL)
 8006adc:	2078      	movs	r0, #120	; 0x78
 8006ade:	f005 f8d3 	bl	800bc88 <mpu_configure_fifo>
 8006ae2:	1e03      	subs	r3, r0, #0
 8006ae4:	d119      	bne.n	8006b1a <MPU6050_Init+0xc2>
			|| mpu_set_sample_rate(DEFAULT_MPU_HZ) || mpu_get_sample_rate(&gyro_rate)
 8006ae6:	2064      	movs	r0, #100	; 0x64
 8006ae8:	f004 ffda 	bl	800baa0 <mpu_set_sample_rate>
 8006aec:	1e03      	subs	r3, r0, #0
 8006aee:	d114      	bne.n	8006b1a <MPU6050_Init+0xc2>
 8006af0:	230c      	movs	r3, #12
 8006af2:	18fb      	adds	r3, r7, r3
 8006af4:	0018      	movs	r0, r3
 8006af6:	f004 ffbb 	bl	800ba70 <mpu_get_sample_rate>
 8006afa:	1e03      	subs	r3, r0, #0
 8006afc:	d10d      	bne.n	8006b1a <MPU6050_Init+0xc2>
			|| mpu_get_gyro_fsr(&gyro_fsr) || mpu_get_accel_fsr(&accel_fsr)) {
 8006afe:	230a      	movs	r3, #10
 8006b00:	18fb      	adds	r3, r7, r3
 8006b02:	0018      	movs	r0, r3
 8006b04:	f004 fdf8 	bl	800b6f8 <mpu_get_gyro_fsr>
 8006b08:	1e03      	subs	r3, r0, #0
 8006b0a:	d106      	bne.n	8006b1a <MPU6050_Init+0xc2>
 8006b0c:	230f      	movs	r3, #15
 8006b0e:	18fb      	adds	r3, r7, r3
 8006b10:	0018      	movs	r0, r3
 8006b12:	f004 fe87 	bl	800b824 <mpu_get_accel_fsr>
 8006b16:	1e03      	subs	r3, r0, #0
 8006b18:	d002      	beq.n	8006b20 <MPU6050_Init+0xc8>
		return -1;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	425b      	negs	r3, r3
 8006b1e:	e07b      	b.n	8006c18 <MPU6050_Init+0x1c0>
	}

	/* Sync driver configuration with MPL. */
	/* Sample rate expected in microseconds. */
	inv_set_gyro_sample_rate(1000000L / gyro_rate);
 8006b20:	240c      	movs	r4, #12
 8006b22:	193b      	adds	r3, r7, r4
 8006b24:	881b      	ldrh	r3, [r3, #0]
 8006b26:	0019      	movs	r1, r3
 8006b28:	4842      	ldr	r0, [pc, #264]	; (8006c34 <MPU6050_Init+0x1dc>)
 8006b2a:	f7fc fb39 	bl	80031a0 <__divsi3>
 8006b2e:	0003      	movs	r3, r0
 8006b30:	0018      	movs	r0, r3
 8006b32:	f003 fc31 	bl	800a398 <inv_set_gyro_sample_rate>
	inv_set_accel_sample_rate(1000000L / gyro_rate);
 8006b36:	193b      	adds	r3, r7, r4
 8006b38:	881b      	ldrh	r3, [r3, #0]
 8006b3a:	0019      	movs	r1, r3
 8006b3c:	483d      	ldr	r0, [pc, #244]	; (8006c34 <MPU6050_Init+0x1dc>)
 8006b3e:	f7fc fb2f 	bl	80031a0 <__divsi3>
 8006b42:	0003      	movs	r3, r0
 8006b44:	0018      	movs	r0, r3
 8006b46:	f003 fc4d 	bl	800a3e4 <inv_set_accel_sample_rate>

	/* Set chip-to-body orientation matrix.
	 * Set hardware units to dps/g's/degrees scaling factor.
	 */
	inv_set_gyro_orientation_and_scale(inv_orientation_matrix_to_scalar(gyro_pdata.orientation),
 8006b4a:	4b3b      	ldr	r3, [pc, #236]	; (8006c38 <MPU6050_Init+0x1e0>)
 8006b4c:	0018      	movs	r0, r3
 8006b4e:	f008 fafa 	bl	800f146 <inv_orientation_matrix_to_scalar>
 8006b52:	0003      	movs	r3, r0
 8006b54:	001a      	movs	r2, r3
			(long) gyro_fsr << 15);
 8006b56:	230a      	movs	r3, #10
 8006b58:	18fb      	adds	r3, r7, r3
 8006b5a:	881b      	ldrh	r3, [r3, #0]
	inv_set_gyro_orientation_and_scale(inv_orientation_matrix_to_scalar(gyro_pdata.orientation),
 8006b5c:	03db      	lsls	r3, r3, #15
 8006b5e:	0019      	movs	r1, r3
 8006b60:	0010      	movs	r0, r2
 8006b62:	f003 fc07 	bl	800a374 <inv_set_gyro_orientation_and_scale>
	inv_set_accel_orientation_and_scale(inv_orientation_matrix_to_scalar(gyro_pdata.orientation),
 8006b66:	4b34      	ldr	r3, [pc, #208]	; (8006c38 <MPU6050_Init+0x1e0>)
 8006b68:	0018      	movs	r0, r3
 8006b6a:	f008 faec 	bl	800f146 <inv_orientation_matrix_to_scalar>
 8006b6e:	0003      	movs	r3, r0
 8006b70:	001a      	movs	r2, r3
			(long) accel_fsr << 15);
 8006b72:	230f      	movs	r3, #15
 8006b74:	18fb      	adds	r3, r7, r3
 8006b76:	781b      	ldrb	r3, [r3, #0]
	inv_set_accel_orientation_and_scale(inv_orientation_matrix_to_scalar(gyro_pdata.orientation),
 8006b78:	03db      	lsls	r3, r3, #15
 8006b7a:	0019      	movs	r1, r3
 8006b7c:	0010      	movs	r0, r2
 8006b7e:	f003 fcd1 	bl	800a524 <inv_set_accel_orientation_and_scale>

	/* Initialize HAL state variables. */
	hal.sensors = ACCEL_ON | GYRO_ON;
 8006b82:	4b2e      	ldr	r3, [pc, #184]	; (8006c3c <MPU6050_Init+0x1e4>)
 8006b84:	2203      	movs	r2, #3
 8006b86:	705a      	strb	r2, [r3, #1]
	hal.dmp_on = 0;
 8006b88:	4b2c      	ldr	r3, [pc, #176]	; (8006c3c <MPU6050_Init+0x1e4>)
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	709a      	strb	r2, [r3, #2]
	hal.report = 0;
 8006b8e:	4b2b      	ldr	r3, [pc, #172]	; (8006c3c <MPU6050_Init+0x1e4>)
 8006b90:	2200      	movs	r2, #0
 8006b92:	619a      	str	r2, [r3, #24]
	hal.next_pedo_ms = 0;
 8006b94:	4b29      	ldr	r3, [pc, #164]	; (8006c3c <MPU6050_Init+0x1e4>)
 8006b96:	2200      	movs	r2, #0
 8006b98:	60da      	str	r2, [r3, #12]
	hal.next_temp_ms = 0;
 8006b9a:	4b28      	ldr	r3, [pc, #160]	; (8006c3c <MPU6050_Init+0x1e4>)
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	611a      	str	r2, [r3, #16]

	/* Compass reads are handled by scheduler. */
	get_tick_count(&timestamp);
 8006ba0:	1d3b      	adds	r3, r7, #4
 8006ba2:	0018      	movs	r0, r3
 8006ba4:	f7ff fdca 	bl	800673c <get_tick_count>
	 * DMP_FEATURE_SEND_RAW_GYRO: Add raw gyro data to the FIFO.
	 * DMP_FEATURE_SEND_CAL_GYRO: Add calibrated gyro data to the FIFO. Cannot
	 * be used in combination with DMP_FEATURE_SEND_RAW_GYRO.
	 */

	if (dmp_load_motion_driver_firmware()
 8006ba8:	f006 fbc6 	bl	800d338 <dmp_load_motion_driver_firmware>
 8006bac:	1e03      	subs	r3, r0, #0
 8006bae:	d109      	bne.n	8006bc4 <MPU6050_Init+0x16c>
			|| dmp_set_orientation(inv_orientation_matrix_to_scalar(gyro_pdata.orientation))) {
 8006bb0:	4b21      	ldr	r3, [pc, #132]	; (8006c38 <MPU6050_Init+0x1e0>)
 8006bb2:	0018      	movs	r0, r3
 8006bb4:	f008 fac7 	bl	800f146 <inv_orientation_matrix_to_scalar>
 8006bb8:	0003      	movs	r3, r0
 8006bba:	0018      	movs	r0, r3
 8006bbc:	f006 fbce 	bl	800d35c <dmp_set_orientation>
 8006bc0:	1e03      	subs	r3, r0, #0
 8006bc2:	d002      	beq.n	8006bca <MPU6050_Init+0x172>
		return -1;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	425b      	negs	r3, r3
 8006bc8:	e026      	b.n	8006c18 <MPU6050_Init+0x1c0>
	 * then the interrupts will be at 200Hz even if fifo rate
	 * is set at a different rate. To avoid this issue include the DMP_FEATURE_TAP
	 *
	 * DMP sensor fusion works only with gyro at +-2000dps and accel +-2G
	 */
	hal.dmp_features = DMP_FEATURE_6X_LP_QUAT | DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT
 8006bca:	4b1c      	ldr	r3, [pc, #112]	; (8006c3c <MPU6050_Init+0x1e4>)
 8006bcc:	2274      	movs	r2, #116	; 0x74
 8006bce:	32ff      	adds	r2, #255	; 0xff
 8006bd0:	839a      	strh	r2, [r3, #28]
			| DMP_FEATURE_SEND_RAW_ACCEL | DMP_FEATURE_SEND_CAL_GYRO | DMP_FEATURE_GYRO_CAL;

	if (dmp_enable_feature(hal.dmp_features) || dmp_set_fifo_rate(DEFAULT_MPU_HZ)
 8006bd2:	4b1a      	ldr	r3, [pc, #104]	; (8006c3c <MPU6050_Init+0x1e4>)
 8006bd4:	8b9b      	ldrh	r3, [r3, #28]
 8006bd6:	0018      	movs	r0, r3
 8006bd8:	f006 ff74 	bl	800dac4 <dmp_enable_feature>
 8006bdc:	1e03      	subs	r3, r0, #0
 8006bde:	d109      	bne.n	8006bf4 <MPU6050_Init+0x19c>
 8006be0:	2064      	movs	r0, #100	; 0x64
 8006be2:	f006 fcb5 	bl	800d550 <dmp_set_fifo_rate>
 8006be6:	1e03      	subs	r3, r0, #0
 8006be8:	d104      	bne.n	8006bf4 <MPU6050_Init+0x19c>
			|| mpu_set_dmp_state(1)) {
 8006bea:	2001      	movs	r0, #1
 8006bec:	f006 fb4a 	bl	800d284 <mpu_set_dmp_state>
 8006bf0:	1e03      	subs	r3, r0, #0
 8006bf2:	d002      	beq.n	8006bfa <MPU6050_Init+0x1a2>
		return -1;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	425b      	negs	r3, r3
 8006bf8:	e00e      	b.n	8006c18 <MPU6050_Init+0x1c0>
	}

	hal.dmp_on = 1;
 8006bfa:	4b10      	ldr	r3, [pc, #64]	; (8006c3c <MPU6050_Init+0x1e4>)
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	709a      	strb	r2, [r3, #2]

	if (run_self_test()) {
 8006c00:	f7ff fdaa 	bl	8006758 <run_self_test>
 8006c04:	1e03      	subs	r3, r0, #0
 8006c06:	d002      	beq.n	8006c0e <MPU6050_Init+0x1b6>
		return -1;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	425b      	negs	r3, r3
 8006c0c:	e004      	b.n	8006c18 <MPU6050_Init+0x1c0>
	}

	inv_accel_was_turned_off();
 8006c0e:	f003 fea3 	bl	800a958 <inv_accel_was_turned_off>
	inv_gyro_was_turned_off();
 8006c12:	f003 feab 	bl	800a96c <inv_gyro_was_turned_off>

	return 0;
 8006c16:	2300      	movs	r3, #0
}
 8006c18:	0018      	movs	r0, r3
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	b005      	add	sp, #20
 8006c1e:	bd90      	pop	{r4, r7, pc}
 8006c20:	08015814 	.word	0x08015814
 8006c24:	08015830 	.word	0x08015830
 8006c28:	08015844 	.word	0x08015844
 8006c2c:	08015860 	.word	0x08015860
 8006c30:	08015874 	.word	0x08015874
 8006c34:	000f4240 	.word	0x000f4240
 8006c38:	20000004 	.word	0x20000004
 8006c3c:	20000590 	.word	0x20000590

08006c40 <MPU6050_Go>:

int MPU6050_Go() {
 8006c40:	b590      	push	{r4, r7, lr}
 8006c42:	b095      	sub	sp, #84	; 0x54
 8006c44:	af02      	add	r7, sp, #8

	if(!hal.new_gyro){
 8006c46:	4b59      	ldr	r3, [pc, #356]	; (8006dac <MPU6050_Go+0x16c>)
 8006c48:	791b      	ldrb	r3, [r3, #4]
 8006c4a:	b2db      	uxtb	r3, r3
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d101      	bne.n	8006c54 <MPU6050_Go+0x14>
		return 0;
 8006c50:	2300      	movs	r3, #0
 8006c52:	e0a7      	b.n	8006da4 <MPU6050_Go+0x164>
	}

	unsigned long sensor_timestamp;
	int new_data = 0;
 8006c54:	2300      	movs	r3, #0
 8006c56:	647b      	str	r3, [r7, #68]	; 0x44

	unsigned long timestamp;
	char new_temp = 0;
 8006c58:	2443      	movs	r4, #67	; 0x43
 8006c5a:	193b      	adds	r3, r7, r4
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	701a      	strb	r2, [r3, #0]

	get_tick_count(&timestamp);
 8006c60:	2338      	movs	r3, #56	; 0x38
 8006c62:	18fb      	adds	r3, r7, r3
 8006c64:	0018      	movs	r0, r3
 8006c66:	f7ff fd69 	bl	800673c <get_tick_count>

	/* Temperature data doesn't need to be read with every gyro sample.
	 * Let's make them timer-based like the compass reads.
	 */
	if (timestamp > hal.next_temp_ms) {
 8006c6a:	4b50      	ldr	r3, [pc, #320]	; (8006dac <MPU6050_Go+0x16c>)
 8006c6c:	691a      	ldr	r2, [r3, #16]
 8006c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c70:	429a      	cmp	r2, r3
 8006c72:	d208      	bcs.n	8006c86 <MPU6050_Go+0x46>
		hal.next_temp_ms = timestamp + TEMP_READ_MS;
 8006c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c76:	33f5      	adds	r3, #245	; 0xf5
 8006c78:	33ff      	adds	r3, #255	; 0xff
 8006c7a:	001a      	movs	r2, r3
 8006c7c:	4b4b      	ldr	r3, [pc, #300]	; (8006dac <MPU6050_Go+0x16c>)
 8006c7e:	611a      	str	r2, [r3, #16]
		new_temp = 1;
 8006c80:	193b      	adds	r3, r7, r4
 8006c82:	2201      	movs	r2, #1
 8006c84:	701a      	strb	r2, [r3, #0]
	}

	if (hal.dmp_on) {
 8006c86:	4b49      	ldr	r3, [pc, #292]	; (8006dac <MPU6050_Go+0x16c>)
 8006c88:	789b      	ldrb	r3, [r3, #2]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d100      	bne.n	8006c90 <MPU6050_Go+0x50>
 8006c8e:	e081      	b.n	8006d94 <MPU6050_Go+0x154>
		 * event has occurred; on an event, the application will be notified
		 * via a callback (assuming that a callback function was properly
		 * registered). The more parameter is non-zero if there are
		 * leftover packets in the FIFO.
		 */
		if (dmp_read_fifo(gyro, accel_short, quat, &sensor_timestamp, &sensors, &more)) {
 8006c90:	233c      	movs	r3, #60	; 0x3c
 8006c92:	18fc      	adds	r4, r7, r3
 8006c94:	2308      	movs	r3, #8
 8006c96:	18fa      	adds	r2, r7, r3
 8006c98:	2328      	movs	r3, #40	; 0x28
 8006c9a:	18f9      	adds	r1, r7, r3
 8006c9c:	2330      	movs	r3, #48	; 0x30
 8006c9e:	18f8      	adds	r0, r7, r3
 8006ca0:	2325      	movs	r3, #37	; 0x25
 8006ca2:	18fb      	adds	r3, r7, r3
 8006ca4:	9301      	str	r3, [sp, #4]
 8006ca6:	2326      	movs	r3, #38	; 0x26
 8006ca8:	18fb      	adds	r3, r7, r3
 8006caa:	9300      	str	r3, [sp, #0]
 8006cac:	0023      	movs	r3, r4
 8006cae:	f007 f94d 	bl	800df4c <dmp_read_fifo>
 8006cb2:	1e03      	subs	r3, r0, #0
 8006cb4:	d002      	beq.n	8006cbc <MPU6050_Go+0x7c>
			return -1;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	425b      	negs	r3, r3
 8006cba:	e073      	b.n	8006da4 <MPU6050_Go+0x164>
		}

		if (!more)
 8006cbc:	2325      	movs	r3, #37	; 0x25
 8006cbe:	18fb      	adds	r3, r7, r3
 8006cc0:	781b      	ldrb	r3, [r3, #0]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d102      	bne.n	8006ccc <MPU6050_Go+0x8c>
			hal.new_gyro = 0;
 8006cc6:	4b39      	ldr	r3, [pc, #228]	; (8006dac <MPU6050_Go+0x16c>)
 8006cc8:	2200      	movs	r2, #0
 8006cca:	711a      	strb	r2, [r3, #4]

		if (sensors & INV_XYZ_GYRO) {
 8006ccc:	2326      	movs	r3, #38	; 0x26
 8006cce:	18fb      	adds	r3, r7, r3
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	5e9b      	ldrsh	r3, [r3, r2]
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	001a      	movs	r2, r3
 8006cd8:	2370      	movs	r3, #112	; 0x70
 8006cda:	4013      	ands	r3, r2
 8006cdc:	d022      	beq.n	8006d24 <MPU6050_Go+0xe4>
			/* Push the new data to the MPL. */
			inv_build_gyro(gyro, sensor_timestamp);
 8006cde:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006ce0:	2330      	movs	r3, #48	; 0x30
 8006ce2:	18fb      	adds	r3, r7, r3
 8006ce4:	0011      	movs	r1, r2
 8006ce6:	0018      	movs	r0, r3
 8006ce8:	f003 fdb2 	bl	800a850 <inv_build_gyro>
			new_data = 1;
 8006cec:	2301      	movs	r3, #1
 8006cee:	647b      	str	r3, [r7, #68]	; 0x44
			if (new_temp) {
 8006cf0:	2243      	movs	r2, #67	; 0x43
 8006cf2:	18bb      	adds	r3, r7, r2
 8006cf4:	781b      	ldrb	r3, [r3, #0]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d014      	beq.n	8006d24 <MPU6050_Go+0xe4>
				new_temp = 0;
 8006cfa:	18bb      	adds	r3, r7, r2
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	701a      	strb	r2, [r3, #0]
				/* Temperature only used for gyro temp comp. */
				if (mpu_get_temperature(&temperature, &sensor_timestamp)) {
 8006d00:	233c      	movs	r3, #60	; 0x3c
 8006d02:	18fa      	adds	r2, r7, r3
 8006d04:	1d3b      	adds	r3, r7, #4
 8006d06:	0011      	movs	r1, r2
 8006d08:	0018      	movs	r0, r3
 8006d0a:	f004 fb83 	bl	800b414 <mpu_get_temperature>
 8006d0e:	1e03      	subs	r3, r0, #0
 8006d10:	d002      	beq.n	8006d18 <MPU6050_Go+0xd8>
					return -1;
 8006d12:	2301      	movs	r3, #1
 8006d14:	425b      	negs	r3, r3
 8006d16:	e045      	b.n	8006da4 <MPU6050_Go+0x164>
				}
				inv_build_temp(temperature, sensor_timestamp);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006d1c:	0011      	movs	r1, r2
 8006d1e:	0018      	movs	r0, r3
 8006d20:	f003 fdc0 	bl	800a8a4 <inv_build_temp>
			}
		}
		if (sensors & INV_XYZ_ACCEL) {
 8006d24:	2326      	movs	r3, #38	; 0x26
 8006d26:	18fb      	adds	r3, r7, r3
 8006d28:	2200      	movs	r2, #0
 8006d2a:	5e9b      	ldrsh	r3, [r3, r2]
 8006d2c:	b29b      	uxth	r3, r3
 8006d2e:	001a      	movs	r2, r3
 8006d30:	2308      	movs	r3, #8
 8006d32:	4013      	ands	r3, r2
 8006d34:	d01b      	beq.n	8006d6e <MPU6050_Go+0x12e>
			accel[0] = (long) accel_short[0];
 8006d36:	2028      	movs	r0, #40	; 0x28
 8006d38:	183b      	adds	r3, r7, r0
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	5e9b      	ldrsh	r3, [r3, r2]
 8006d3e:	001a      	movs	r2, r3
 8006d40:	2118      	movs	r1, #24
 8006d42:	187b      	adds	r3, r7, r1
 8006d44:	601a      	str	r2, [r3, #0]
			accel[1] = (long) accel_short[1];
 8006d46:	183b      	adds	r3, r7, r0
 8006d48:	2202      	movs	r2, #2
 8006d4a:	5e9b      	ldrsh	r3, [r3, r2]
 8006d4c:	001a      	movs	r2, r3
 8006d4e:	187b      	adds	r3, r7, r1
 8006d50:	605a      	str	r2, [r3, #4]
			accel[2] = (long) accel_short[2];
 8006d52:	183b      	adds	r3, r7, r0
 8006d54:	2204      	movs	r2, #4
 8006d56:	5e9b      	ldrsh	r3, [r3, r2]
 8006d58:	001a      	movs	r2, r3
 8006d5a:	187b      	adds	r3, r7, r1
 8006d5c:	609a      	str	r2, [r3, #8]
			inv_build_accel(accel, 0, sensor_timestamp);
 8006d5e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006d60:	187b      	adds	r3, r7, r1
 8006d62:	2100      	movs	r1, #0
 8006d64:	0018      	movs	r0, r3
 8006d66:	f003 fd0b 	bl	800a780 <inv_build_accel>
			new_data = 1;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (sensors & INV_WXYZ_QUAT) {
 8006d6e:	2326      	movs	r3, #38	; 0x26
 8006d70:	18fb      	adds	r3, r7, r3
 8006d72:	2200      	movs	r2, #0
 8006d74:	5e9b      	ldrsh	r3, [r3, r2]
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	001a      	movs	r2, r3
 8006d7a:	2380      	movs	r3, #128	; 0x80
 8006d7c:	005b      	lsls	r3, r3, #1
 8006d7e:	4013      	ands	r3, r2
 8006d80:	d008      	beq.n	8006d94 <MPU6050_Go+0x154>
			inv_build_quat(quat, 0, sensor_timestamp);
 8006d82:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006d84:	2308      	movs	r3, #8
 8006d86:	18fb      	adds	r3, r7, r3
 8006d88:	2100      	movs	r1, #0
 8006d8a:	0018      	movs	r0, r3
 8006d8c:	f003 fdb0 	bl	800a8f0 <inv_build_quat>
			new_data = 1;
 8006d90:	2301      	movs	r3, #1
 8006d92:	647b      	str	r3, [r7, #68]	; 0x44
		}
	}

	if (new_data) {
 8006d94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d003      	beq.n	8006da2 <MPU6050_Go+0x162>
		inv_execute_on_data();
 8006d9a:	f003 fee7 	bl	800ab6c <inv_execute_on_data>
		return 1;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	e000      	b.n	8006da4 <MPU6050_Go+0x164>
	}

	return 0;
 8006da2:	2300      	movs	r3, #0
}
 8006da4:	0018      	movs	r0, r3
 8006da6:	46bd      	mov	sp, r7
 8006da8:	b013      	add	sp, #76	; 0x4c
 8006daa:	bd90      	pop	{r4, r7, pc}
 8006dac:	20000590 	.word	0x20000590

08006db0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8006db0:	b590      	push	{r4, r7, lr}
 8006db2:	b08b      	sub	sp, #44	; 0x2c
 8006db4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006db6:	2414      	movs	r4, #20
 8006db8:	193b      	adds	r3, r7, r4
 8006dba:	0018      	movs	r0, r3
 8006dbc:	2314      	movs	r3, #20
 8006dbe:	001a      	movs	r2, r3
 8006dc0:	2100      	movs	r1, #0
 8006dc2:	f00b f8b0 	bl	8011f26 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006dc6:	4b41      	ldr	r3, [pc, #260]	; (8006ecc <MX_GPIO_Init+0x11c>)
 8006dc8:	695a      	ldr	r2, [r3, #20]
 8006dca:	4b40      	ldr	r3, [pc, #256]	; (8006ecc <MX_GPIO_Init+0x11c>)
 8006dcc:	2180      	movs	r1, #128	; 0x80
 8006dce:	0309      	lsls	r1, r1, #12
 8006dd0:	430a      	orrs	r2, r1
 8006dd2:	615a      	str	r2, [r3, #20]
 8006dd4:	4b3d      	ldr	r3, [pc, #244]	; (8006ecc <MX_GPIO_Init+0x11c>)
 8006dd6:	695a      	ldr	r2, [r3, #20]
 8006dd8:	2380      	movs	r3, #128	; 0x80
 8006dda:	031b      	lsls	r3, r3, #12
 8006ddc:	4013      	ands	r3, r2
 8006dde:	613b      	str	r3, [r7, #16]
 8006de0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8006de2:	4b3a      	ldr	r3, [pc, #232]	; (8006ecc <MX_GPIO_Init+0x11c>)
 8006de4:	695a      	ldr	r2, [r3, #20]
 8006de6:	4b39      	ldr	r3, [pc, #228]	; (8006ecc <MX_GPIO_Init+0x11c>)
 8006de8:	2180      	movs	r1, #128	; 0x80
 8006dea:	03c9      	lsls	r1, r1, #15
 8006dec:	430a      	orrs	r2, r1
 8006dee:	615a      	str	r2, [r3, #20]
 8006df0:	4b36      	ldr	r3, [pc, #216]	; (8006ecc <MX_GPIO_Init+0x11c>)
 8006df2:	695a      	ldr	r2, [r3, #20]
 8006df4:	2380      	movs	r3, #128	; 0x80
 8006df6:	03db      	lsls	r3, r3, #15
 8006df8:	4013      	ands	r3, r2
 8006dfa:	60fb      	str	r3, [r7, #12]
 8006dfc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006dfe:	4b33      	ldr	r3, [pc, #204]	; (8006ecc <MX_GPIO_Init+0x11c>)
 8006e00:	695a      	ldr	r2, [r3, #20]
 8006e02:	4b32      	ldr	r3, [pc, #200]	; (8006ecc <MX_GPIO_Init+0x11c>)
 8006e04:	2180      	movs	r1, #128	; 0x80
 8006e06:	0289      	lsls	r1, r1, #10
 8006e08:	430a      	orrs	r2, r1
 8006e0a:	615a      	str	r2, [r3, #20]
 8006e0c:	4b2f      	ldr	r3, [pc, #188]	; (8006ecc <MX_GPIO_Init+0x11c>)
 8006e0e:	695a      	ldr	r2, [r3, #20]
 8006e10:	2380      	movs	r3, #128	; 0x80
 8006e12:	029b      	lsls	r3, r3, #10
 8006e14:	4013      	ands	r3, r2
 8006e16:	60bb      	str	r3, [r7, #8]
 8006e18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006e1a:	4b2c      	ldr	r3, [pc, #176]	; (8006ecc <MX_GPIO_Init+0x11c>)
 8006e1c:	695a      	ldr	r2, [r3, #20]
 8006e1e:	4b2b      	ldr	r3, [pc, #172]	; (8006ecc <MX_GPIO_Init+0x11c>)
 8006e20:	2180      	movs	r1, #128	; 0x80
 8006e22:	02c9      	lsls	r1, r1, #11
 8006e24:	430a      	orrs	r2, r1
 8006e26:	615a      	str	r2, [r3, #20]
 8006e28:	4b28      	ldr	r3, [pc, #160]	; (8006ecc <MX_GPIO_Init+0x11c>)
 8006e2a:	695a      	ldr	r2, [r3, #20]
 8006e2c:	2380      	movs	r3, #128	; 0x80
 8006e2e:	02db      	lsls	r3, r3, #11
 8006e30:	4013      	ands	r3, r2
 8006e32:	607b      	str	r3, [r7, #4]
 8006e34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8006e36:	2390      	movs	r3, #144	; 0x90
 8006e38:	05db      	lsls	r3, r3, #23
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	2120      	movs	r1, #32
 8006e3e:	0018      	movs	r0, r3
 8006e40:	f000 fec2 	bl	8007bc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8006e44:	193b      	adds	r3, r7, r4
 8006e46:	2280      	movs	r2, #128	; 0x80
 8006e48:	0192      	lsls	r2, r2, #6
 8006e4a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006e4c:	193b      	adds	r3, r7, r4
 8006e4e:	2284      	movs	r2, #132	; 0x84
 8006e50:	0392      	lsls	r2, r2, #14
 8006e52:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e54:	193b      	adds	r3, r7, r4
 8006e56:	2200      	movs	r2, #0
 8006e58:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8006e5a:	193b      	adds	r3, r7, r4
 8006e5c:	4a1c      	ldr	r2, [pc, #112]	; (8006ed0 <MX_GPIO_Init+0x120>)
 8006e5e:	0019      	movs	r1, r3
 8006e60:	0010      	movs	r0, r2
 8006e62:	f000 fd39 	bl	80078d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8006e66:	193b      	adds	r3, r7, r4
 8006e68:	2220      	movs	r2, #32
 8006e6a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006e6c:	193b      	adds	r3, r7, r4
 8006e6e:	2201      	movs	r2, #1
 8006e70:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e72:	193b      	adds	r3, r7, r4
 8006e74:	2200      	movs	r2, #0
 8006e76:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e78:	193b      	adds	r3, r7, r4
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8006e7e:	193a      	adds	r2, r7, r4
 8006e80:	2390      	movs	r3, #144	; 0x90
 8006e82:	05db      	lsls	r3, r3, #23
 8006e84:	0011      	movs	r1, r2
 8006e86:	0018      	movs	r0, r3
 8006e88:	f000 fd26 	bl	80078d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006e8c:	0021      	movs	r1, r4
 8006e8e:	187b      	adds	r3, r7, r1
 8006e90:	2280      	movs	r2, #128	; 0x80
 8006e92:	0092      	lsls	r2, r2, #2
 8006e94:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006e96:	187b      	adds	r3, r7, r1
 8006e98:	2288      	movs	r2, #136	; 0x88
 8006e9a:	0352      	lsls	r2, r2, #13
 8006e9c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006e9e:	187b      	adds	r3, r7, r1
 8006ea0:	2202      	movs	r2, #2
 8006ea2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ea4:	187a      	adds	r2, r7, r1
 8006ea6:	2390      	movs	r3, #144	; 0x90
 8006ea8:	05db      	lsls	r3, r3, #23
 8006eaa:	0011      	movs	r1, r2
 8006eac:	0018      	movs	r0, r3
 8006eae:	f000 fd13 	bl	80078d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	2100      	movs	r1, #0
 8006eb6:	2007      	movs	r0, #7
 8006eb8:	f000 fcdc 	bl	8007874 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8006ebc:	2007      	movs	r0, #7
 8006ebe:	f000 fcee 	bl	800789e <HAL_NVIC_EnableIRQ>

}
 8006ec2:	46c0      	nop			; (mov r8, r8)
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	b00b      	add	sp, #44	; 0x2c
 8006ec8:	bd90      	pop	{r4, r7, pc}
 8006eca:	46c0      	nop			; (mov r8, r8)
 8006ecc:	40021000 	.word	0x40021000
 8006ed0:	48000800 	.word	0x48000800

08006ed4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8006ed8:	4b1b      	ldr	r3, [pc, #108]	; (8006f48 <MX_I2C1_Init+0x74>)
 8006eda:	4a1c      	ldr	r2, [pc, #112]	; (8006f4c <MX_I2C1_Init+0x78>)
 8006edc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 8006ede:	4b1a      	ldr	r3, [pc, #104]	; (8006f48 <MX_I2C1_Init+0x74>)
 8006ee0:	4a1b      	ldr	r2, [pc, #108]	; (8006f50 <MX_I2C1_Init+0x7c>)
 8006ee2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8006ee4:	4b18      	ldr	r3, [pc, #96]	; (8006f48 <MX_I2C1_Init+0x74>)
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006eea:	4b17      	ldr	r3, [pc, #92]	; (8006f48 <MX_I2C1_Init+0x74>)
 8006eec:	2201      	movs	r2, #1
 8006eee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006ef0:	4b15      	ldr	r3, [pc, #84]	; (8006f48 <MX_I2C1_Init+0x74>)
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8006ef6:	4b14      	ldr	r3, [pc, #80]	; (8006f48 <MX_I2C1_Init+0x74>)
 8006ef8:	2200      	movs	r2, #0
 8006efa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006efc:	4b12      	ldr	r3, [pc, #72]	; (8006f48 <MX_I2C1_Init+0x74>)
 8006efe:	2200      	movs	r2, #0
 8006f00:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006f02:	4b11      	ldr	r3, [pc, #68]	; (8006f48 <MX_I2C1_Init+0x74>)
 8006f04:	2200      	movs	r2, #0
 8006f06:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006f08:	4b0f      	ldr	r3, [pc, #60]	; (8006f48 <MX_I2C1_Init+0x74>)
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006f0e:	4b0e      	ldr	r3, [pc, #56]	; (8006f48 <MX_I2C1_Init+0x74>)
 8006f10:	0018      	movs	r0, r3
 8006f12:	f000 fead 	bl	8007c70 <HAL_I2C_Init>
 8006f16:	1e03      	subs	r3, r0, #0
 8006f18:	d001      	beq.n	8006f1e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8006f1a:	f000 f9a9 	bl	8007270 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006f1e:	4b0a      	ldr	r3, [pc, #40]	; (8006f48 <MX_I2C1_Init+0x74>)
 8006f20:	2100      	movs	r1, #0
 8006f22:	0018      	movs	r0, r3
 8006f24:	f001 fdbc 	bl	8008aa0 <HAL_I2CEx_ConfigAnalogFilter>
 8006f28:	1e03      	subs	r3, r0, #0
 8006f2a:	d001      	beq.n	8006f30 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8006f2c:	f000 f9a0 	bl	8007270 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8006f30:	4b05      	ldr	r3, [pc, #20]	; (8006f48 <MX_I2C1_Init+0x74>)
 8006f32:	2100      	movs	r1, #0
 8006f34:	0018      	movs	r0, r3
 8006f36:	f001 fdff 	bl	8008b38 <HAL_I2CEx_ConfigDigitalFilter>
 8006f3a:	1e03      	subs	r3, r0, #0
 8006f3c:	d001      	beq.n	8006f42 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8006f3e:	f000 f997 	bl	8007270 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8006f42:	46c0      	nop			; (mov r8, r8)
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}
 8006f48:	200005bc 	.word	0x200005bc
 8006f4c:	40005400 	.word	0x40005400
 8006f50:	0000020b 	.word	0x0000020b

08006f54 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8006f54:	b590      	push	{r4, r7, lr}
 8006f56:	b08b      	sub	sp, #44	; 0x2c
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f5c:	2414      	movs	r4, #20
 8006f5e:	193b      	adds	r3, r7, r4
 8006f60:	0018      	movs	r0, r3
 8006f62:	2314      	movs	r3, #20
 8006f64:	001a      	movs	r2, r3
 8006f66:	2100      	movs	r1, #0
 8006f68:	f00a ffdd 	bl	8011f26 <memset>
  if(i2cHandle->Instance==I2C1)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a1c      	ldr	r2, [pc, #112]	; (8006fe4 <HAL_I2C_MspInit+0x90>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d132      	bne.n	8006fdc <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006f76:	4b1c      	ldr	r3, [pc, #112]	; (8006fe8 <HAL_I2C_MspInit+0x94>)
 8006f78:	695a      	ldr	r2, [r3, #20]
 8006f7a:	4b1b      	ldr	r3, [pc, #108]	; (8006fe8 <HAL_I2C_MspInit+0x94>)
 8006f7c:	2180      	movs	r1, #128	; 0x80
 8006f7e:	02c9      	lsls	r1, r1, #11
 8006f80:	430a      	orrs	r2, r1
 8006f82:	615a      	str	r2, [r3, #20]
 8006f84:	4b18      	ldr	r3, [pc, #96]	; (8006fe8 <HAL_I2C_MspInit+0x94>)
 8006f86:	695a      	ldr	r2, [r3, #20]
 8006f88:	2380      	movs	r3, #128	; 0x80
 8006f8a:	02db      	lsls	r3, r3, #11
 8006f8c:	4013      	ands	r3, r2
 8006f8e:	613b      	str	r3, [r7, #16]
 8006f90:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8006f92:	193b      	adds	r3, r7, r4
 8006f94:	22c0      	movs	r2, #192	; 0xc0
 8006f96:	0092      	lsls	r2, r2, #2
 8006f98:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006f9a:	0021      	movs	r1, r4
 8006f9c:	187b      	adds	r3, r7, r1
 8006f9e:	2212      	movs	r2, #18
 8006fa0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fa2:	187b      	adds	r3, r7, r1
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006fa8:	187b      	adds	r3, r7, r1
 8006faa:	2203      	movs	r2, #3
 8006fac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8006fae:	187b      	adds	r3, r7, r1
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006fb4:	187b      	adds	r3, r7, r1
 8006fb6:	4a0d      	ldr	r2, [pc, #52]	; (8006fec <HAL_I2C_MspInit+0x98>)
 8006fb8:	0019      	movs	r1, r3
 8006fba:	0010      	movs	r0, r2
 8006fbc:	f000 fc8c 	bl	80078d8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006fc0:	4b09      	ldr	r3, [pc, #36]	; (8006fe8 <HAL_I2C_MspInit+0x94>)
 8006fc2:	69da      	ldr	r2, [r3, #28]
 8006fc4:	4b08      	ldr	r3, [pc, #32]	; (8006fe8 <HAL_I2C_MspInit+0x94>)
 8006fc6:	2180      	movs	r1, #128	; 0x80
 8006fc8:	0389      	lsls	r1, r1, #14
 8006fca:	430a      	orrs	r2, r1
 8006fcc:	61da      	str	r2, [r3, #28]
 8006fce:	4b06      	ldr	r3, [pc, #24]	; (8006fe8 <HAL_I2C_MspInit+0x94>)
 8006fd0:	69da      	ldr	r2, [r3, #28]
 8006fd2:	2380      	movs	r3, #128	; 0x80
 8006fd4:	039b      	lsls	r3, r3, #14
 8006fd6:	4013      	ands	r3, r2
 8006fd8:	60fb      	str	r3, [r7, #12]
 8006fda:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8006fdc:	46c0      	nop			; (mov r8, r8)
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	b00b      	add	sp, #44	; 0x2c
 8006fe2:	bd90      	pop	{r4, r7, pc}
 8006fe4:	40005400 	.word	0x40005400
 8006fe8:	40021000 	.word	0x40021000
 8006fec:	48000400 	.word	0x48000400

08006ff0 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8006ff4:	4b0b      	ldr	r3, [pc, #44]	; (8007024 <MX_IWDG_Init+0x34>)
 8006ff6:	4a0c      	ldr	r2, [pc, #48]	; (8007028 <MX_IWDG_Init+0x38>)
 8006ff8:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_16;
 8006ffa:	4b0a      	ldr	r3, [pc, #40]	; (8007024 <MX_IWDG_Init+0x34>)
 8006ffc:	2202      	movs	r2, #2
 8006ffe:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8007000:	4b08      	ldr	r3, [pc, #32]	; (8007024 <MX_IWDG_Init+0x34>)
 8007002:	4a0a      	ldr	r2, [pc, #40]	; (800702c <MX_IWDG_Init+0x3c>)
 8007004:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 2500;
 8007006:	4b07      	ldr	r3, [pc, #28]	; (8007024 <MX_IWDG_Init+0x34>)
 8007008:	4a09      	ldr	r2, [pc, #36]	; (8007030 <MX_IWDG_Init+0x40>)
 800700a:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800700c:	4b05      	ldr	r3, [pc, #20]	; (8007024 <MX_IWDG_Init+0x34>)
 800700e:	0018      	movs	r0, r3
 8007010:	f001 fdde 	bl	8008bd0 <HAL_IWDG_Init>
 8007014:	1e03      	subs	r3, r0, #0
 8007016:	d001      	beq.n	800701c <MX_IWDG_Init+0x2c>
  {
    Error_Handler();
 8007018:	f000 f92a 	bl	8007270 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 800701c:	46c0      	nop			; (mov r8, r8)
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	46c0      	nop			; (mov r8, r8)
 8007024:	20000610 	.word	0x20000610
 8007028:	40003000 	.word	0x40003000
 800702c:	00000fff 	.word	0x00000fff
 8007030:	000009c4 	.word	0x000009c4

08007034 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8007038:	f3bf 8f4f 	dsb	sy
}
 800703c:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800703e:	4b04      	ldr	r3, [pc, #16]	; (8007050 <__NVIC_SystemReset+0x1c>)
 8007040:	4a04      	ldr	r2, [pc, #16]	; (8007054 <__NVIC_SystemReset+0x20>)
 8007042:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8007044:	f3bf 8f4f 	dsb	sy
}
 8007048:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800704a:	46c0      	nop			; (mov r8, r8)
 800704c:	e7fd      	b.n	800704a <__NVIC_SystemReset+0x16>
 800704e:	46c0      	nop			; (mov r8, r8)
 8007050:	e000ed00 	.word	0xe000ed00
 8007054:	05fa0004 	.word	0x05fa0004

08007058 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8007058:	b580      	push	{r7, lr}
 800705a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800705c:	f000 fad6 	bl	800760c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8007060:	f000 f89e 	bl	80071a0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8007064:	f7ff fea4 	bl	8006db0 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8007068:	f000 fa16 	bl	8007498 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 800706c:	f7ff ff32 	bl	8006ed4 <MX_I2C1_Init>
//	MX_IWDG_Init();
	/* USER CODE BEGIN 2 */

	while (MPU6050_Init()) {
 8007070:	46c0      	nop			; (mov r8, r8)
 8007072:	f7ff fcf1 	bl	8006a58 <MPU6050_Init>
 8007076:	1e03      	subs	r3, r0, #0
 8007078:	d005      	beq.n	8007086 <main+0x2e>
		printf("failed, restarting the cpu... \n");
 800707a:	4b40      	ldr	r3, [pc, #256]	; (800717c <main+0x124>)
 800707c:	0018      	movs	r0, r3
 800707e:	f00a fdf3 	bl	8011c68 <puts>
		NVIC_SystemReset();
 8007082:	f7ff ffd7 	bl	8007034 <__NVIC_SystemReset>
	}

	MX_IWDG_Init();
 8007086:	f7ff ffb3 	bl	8006ff0 <MX_IWDG_Init>
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		if (MPU6050_Go() == 1) {
 800708a:	f7ff fdd9 	bl	8006c40 <MPU6050_Go>
 800708e:	0003      	movs	r3, r0
 8007090:	2b01      	cmp	r3, #1
 8007092:	d114      	bne.n	80070be <main+0x66>
			if (cnt++ % 10 == 0) {
 8007094:	4b3a      	ldr	r3, [pc, #232]	; (8007180 <main+0x128>)
 8007096:	681a      	ldr	r2, [r3, #0]
 8007098:	1c51      	adds	r1, r2, #1
 800709a:	4b39      	ldr	r3, [pc, #228]	; (8007180 <main+0x128>)
 800709c:	6019      	str	r1, [r3, #0]
 800709e:	210a      	movs	r1, #10
 80070a0:	0010      	movs	r0, r2
 80070a2:	f7fc f963 	bl	800336c <__aeabi_idivmod>
 80070a6:	1e0b      	subs	r3, r1, #0
 80070a8:	d105      	bne.n	80070b6 <main+0x5e>
				HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80070aa:	2390      	movs	r3, #144	; 0x90
 80070ac:	05db      	lsls	r3, r3, #23
 80070ae:	2120      	movs	r1, #32
 80070b0:	0018      	movs	r0, r3
 80070b2:	f000 fda6 	bl	8007c02 <HAL_GPIO_TogglePin>
			}
			HAL_IWDG_Refresh(&hiwdg);
 80070b6:	4b33      	ldr	r3, [pc, #204]	; (8007184 <main+0x12c>)
 80070b8:	0018      	movs	r0, r3
 80070ba:	f001 fddb 	bl	8008c74 <HAL_IWDG_Refresh>
		}

		if (HAL_GetTick() - last_print > PRINT_FRQ_MS) {
 80070be:	f000 faff 	bl	80076c0 <HAL_GetTick>
 80070c2:	0002      	movs	r2, r0
 80070c4:	4b30      	ldr	r3, [pc, #192]	; (8007188 <main+0x130>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	1ad3      	subs	r3, r2, r3
 80070ca:	2b14      	cmp	r3, #20
 80070cc:	d9dd      	bls.n	800708a <main+0x32>

			last_print = HAL_GetTick();
 80070ce:	f000 faf7 	bl	80076c0 <HAL_GetTick>
 80070d2:	0002      	movs	r2, r0
 80070d4:	4b2c      	ldr	r3, [pc, #176]	; (8007188 <main+0x130>)
 80070d6:	601a      	str	r2, [r3, #0]

			if (PRINT_QUAT) {

				inv_get_sensor_type_quat(quat, &accuracy, &timestamp);
 80070d8:	4a2c      	ldr	r2, [pc, #176]	; (800718c <main+0x134>)
 80070da:	492d      	ldr	r1, [pc, #180]	; (8007190 <main+0x138>)
 80070dc:	4b2d      	ldr	r3, [pc, #180]	; (8007194 <main+0x13c>)
 80070de:	0018      	movs	r0, r3
 80070e0:	f003 fefc 	bl	800aedc <inv_get_sensor_type_quat>

				quat[0] = quat[0] >> 16;
 80070e4:	4b2b      	ldr	r3, [pc, #172]	; (8007194 <main+0x13c>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	141a      	asrs	r2, r3, #16
 80070ea:	4b2a      	ldr	r3, [pc, #168]	; (8007194 <main+0x13c>)
 80070ec:	601a      	str	r2, [r3, #0]
				quat[1] = quat[1] >> 16;
 80070ee:	4b29      	ldr	r3, [pc, #164]	; (8007194 <main+0x13c>)
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	141a      	asrs	r2, r3, #16
 80070f4:	4b27      	ldr	r3, [pc, #156]	; (8007194 <main+0x13c>)
 80070f6:	605a      	str	r2, [r3, #4]
				quat[2] = quat[2] >> 16;
 80070f8:	4b26      	ldr	r3, [pc, #152]	; (8007194 <main+0x13c>)
 80070fa:	689b      	ldr	r3, [r3, #8]
 80070fc:	141a      	asrs	r2, r3, #16
 80070fe:	4b25      	ldr	r3, [pc, #148]	; (8007194 <main+0x13c>)
 8007100:	609a      	str	r2, [r3, #8]
				quat[3] = quat[3] >> 16;
 8007102:	4b24      	ldr	r3, [pc, #144]	; (8007194 <main+0x13c>)
 8007104:	68db      	ldr	r3, [r3, #12]
 8007106:	141a      	asrs	r2, r3, #16
 8007108:	4b22      	ldr	r3, [pc, #136]	; (8007194 <main+0x13c>)
 800710a:	60da      	str	r2, [r3, #12]
				teapotPacket[2] = (quat[0] >> 8) & 0xffff;
 800710c:	4b21      	ldr	r3, [pc, #132]	; (8007194 <main+0x13c>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	121b      	asrs	r3, r3, #8
 8007112:	b2da      	uxtb	r2, r3
 8007114:	4b20      	ldr	r3, [pc, #128]	; (8007198 <main+0x140>)
 8007116:	709a      	strb	r2, [r3, #2]
				teapotPacket[3] = (quat[0] >> 0) & 0xffff;
 8007118:	4b1e      	ldr	r3, [pc, #120]	; (8007194 <main+0x13c>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	b2da      	uxtb	r2, r3
 800711e:	4b1e      	ldr	r3, [pc, #120]	; (8007198 <main+0x140>)
 8007120:	70da      	strb	r2, [r3, #3]
				teapotPacket[4] = (quat[1] >> 8) & 0xffff;
 8007122:	4b1c      	ldr	r3, [pc, #112]	; (8007194 <main+0x13c>)
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	121b      	asrs	r3, r3, #8
 8007128:	b2da      	uxtb	r2, r3
 800712a:	4b1b      	ldr	r3, [pc, #108]	; (8007198 <main+0x140>)
 800712c:	711a      	strb	r2, [r3, #4]
				teapotPacket[5] = (quat[1] >> 0) & 0xffff;
 800712e:	4b19      	ldr	r3, [pc, #100]	; (8007194 <main+0x13c>)
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	b2da      	uxtb	r2, r3
 8007134:	4b18      	ldr	r3, [pc, #96]	; (8007198 <main+0x140>)
 8007136:	715a      	strb	r2, [r3, #5]
				teapotPacket[6] = (quat[2] >> 8) & 0xffff;
 8007138:	4b16      	ldr	r3, [pc, #88]	; (8007194 <main+0x13c>)
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	121b      	asrs	r3, r3, #8
 800713e:	b2da      	uxtb	r2, r3
 8007140:	4b15      	ldr	r3, [pc, #84]	; (8007198 <main+0x140>)
 8007142:	719a      	strb	r2, [r3, #6]
				teapotPacket[7] = (quat[2] >> 0) & 0xffff;
 8007144:	4b13      	ldr	r3, [pc, #76]	; (8007194 <main+0x13c>)
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	b2da      	uxtb	r2, r3
 800714a:	4b13      	ldr	r3, [pc, #76]	; (8007198 <main+0x140>)
 800714c:	71da      	strb	r2, [r3, #7]
				teapotPacket[8] = (quat[3] >> 8) & 0xffff;
 800714e:	4b11      	ldr	r3, [pc, #68]	; (8007194 <main+0x13c>)
 8007150:	68db      	ldr	r3, [r3, #12]
 8007152:	121b      	asrs	r3, r3, #8
 8007154:	b2da      	uxtb	r2, r3
 8007156:	4b10      	ldr	r3, [pc, #64]	; (8007198 <main+0x140>)
 8007158:	721a      	strb	r2, [r3, #8]
				teapotPacket[9] = (quat[3] >> 0) & 0xffff;
 800715a:	4b0e      	ldr	r3, [pc, #56]	; (8007194 <main+0x13c>)
 800715c:	68db      	ldr	r3, [r3, #12]
 800715e:	b2da      	uxtb	r2, r3
 8007160:	4b0d      	ldr	r3, [pc, #52]	; (8007198 <main+0x140>)
 8007162:	725a      	strb	r2, [r3, #9]

				teapotPacket[11] = 0;
 8007164:	4b0c      	ldr	r3, [pc, #48]	; (8007198 <main+0x140>)
 8007166:	2200      	movs	r2, #0
 8007168:	72da      	strb	r2, [r3, #11]
				teapotPacket[10] = (euler[2] >> 8) & 0xffff;

				teapotPacket[11] = 1;
			}

			HAL_UART_Transmit(&huart2, teapotPacket, sizeof(teapotPacket), 1000);
 800716a:	23fa      	movs	r3, #250	; 0xfa
 800716c:	009b      	lsls	r3, r3, #2
 800716e:	490a      	ldr	r1, [pc, #40]	; (8007198 <main+0x140>)
 8007170:	480a      	ldr	r0, [pc, #40]	; (800719c <main+0x144>)
 8007172:	220e      	movs	r2, #14
 8007174:	f002 fbd4 	bl	8009920 <HAL_UART_Transmit>
		if (MPU6050_Go() == 1) {
 8007178:	e787      	b.n	800708a <main+0x32>
 800717a:	46c0      	nop			; (mov r8, r8)
 800717c:	08015890 	.word	0x08015890
 8007180:	20000620 	.word	0x20000620
 8007184:	20000610 	.word	0x20000610
 8007188:	20000638 	.word	0x20000638
 800718c:	2000063c 	.word	0x2000063c
 8007190:	20000634 	.word	0x20000634
 8007194:	20000624 	.word	0x20000624
 8007198:	20000010 	.word	0x20000010
 800719c:	20000644 	.word	0x20000644

080071a0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80071a0:	b590      	push	{r4, r7, lr}
 80071a2:	b099      	sub	sp, #100	; 0x64
 80071a4:	af00      	add	r7, sp, #0

	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80071a6:	242c      	movs	r4, #44	; 0x2c
 80071a8:	193b      	adds	r3, r7, r4
 80071aa:	0018      	movs	r0, r3
 80071ac:	2334      	movs	r3, #52	; 0x34
 80071ae:	001a      	movs	r2, r3
 80071b0:	2100      	movs	r1, #0
 80071b2:	f00a feb8 	bl	8011f26 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80071b6:	231c      	movs	r3, #28
 80071b8:	18fb      	adds	r3, r7, r3
 80071ba:	0018      	movs	r0, r3
 80071bc:	2310      	movs	r3, #16
 80071be:	001a      	movs	r2, r3
 80071c0:	2100      	movs	r1, #0
 80071c2:	f00a feb0 	bl	8011f26 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80071c6:	003b      	movs	r3, r7
 80071c8:	0018      	movs	r0, r3
 80071ca:	231c      	movs	r3, #28
 80071cc:	001a      	movs	r2, r3
 80071ce:	2100      	movs	r1, #0
 80071d0:	f00a fea9 	bl	8011f26 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSI;
 80071d4:	0021      	movs	r1, r4
 80071d6:	187b      	adds	r3, r7, r1
 80071d8:	220a      	movs	r2, #10
 80071da:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80071dc:	187b      	adds	r3, r7, r1
 80071de:	2201      	movs	r2, #1
 80071e0:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80071e2:	187b      	adds	r3, r7, r1
 80071e4:	2210      	movs	r2, #16
 80071e6:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80071e8:	187b      	adds	r3, r7, r1
 80071ea:	2201      	movs	r2, #1
 80071ec:	61da      	str	r2, [r3, #28]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80071ee:	187b      	adds	r3, r7, r1
 80071f0:	2202      	movs	r2, #2
 80071f2:	625a      	str	r2, [r3, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80071f4:	187b      	adds	r3, r7, r1
 80071f6:	2280      	movs	r2, #128	; 0x80
 80071f8:	0212      	lsls	r2, r2, #8
 80071fa:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80071fc:	187b      	adds	r3, r7, r1
 80071fe:	22a0      	movs	r2, #160	; 0xa0
 8007200:	0392      	lsls	r2, r2, #14
 8007202:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 8007204:	187b      	adds	r3, r7, r1
 8007206:	2201      	movs	r2, #1
 8007208:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800720a:	187b      	adds	r3, r7, r1
 800720c:	0018      	movs	r0, r3
 800720e:	f001 fd41 	bl	8008c94 <HAL_RCC_OscConfig>
 8007212:	1e03      	subs	r3, r0, #0
 8007214:	d001      	beq.n	800721a <SystemClock_Config+0x7a>
		Error_Handler();
 8007216:	f000 f82b 	bl	8007270 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
 800721a:	211c      	movs	r1, #28
 800721c:	187b      	adds	r3, r7, r1
 800721e:	2207      	movs	r2, #7
 8007220:	601a      	str	r2, [r3, #0]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007222:	187b      	adds	r3, r7, r1
 8007224:	2202      	movs	r2, #2
 8007226:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007228:	187b      	adds	r3, r7, r1
 800722a:	2200      	movs	r2, #0
 800722c:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800722e:	187b      	adds	r3, r7, r1
 8007230:	2200      	movs	r2, #0
 8007232:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8007234:	187b      	adds	r3, r7, r1
 8007236:	2101      	movs	r1, #1
 8007238:	0018      	movs	r0, r3
 800723a:	f002 f8b1 	bl	80093a0 <HAL_RCC_ClockConfig>
 800723e:	1e03      	subs	r3, r0, #0
 8007240:	d001      	beq.n	8007246 <SystemClock_Config+0xa6>
		Error_Handler();
 8007242:	f000 f815 	bl	8007270 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_I2C1;
 8007246:	003b      	movs	r3, r7
 8007248:	2222      	movs	r2, #34	; 0x22
 800724a:	601a      	str	r2, [r3, #0]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800724c:	003b      	movs	r3, r7
 800724e:	2200      	movs	r2, #0
 8007250:	60da      	str	r2, [r3, #12]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8007252:	003b      	movs	r3, r7
 8007254:	2200      	movs	r2, #0
 8007256:	615a      	str	r2, [r3, #20]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8007258:	003b      	movs	r3, r7
 800725a:	0018      	movs	r0, r3
 800725c:	f002 fa0c 	bl	8009678 <HAL_RCCEx_PeriphCLKConfig>
 8007260:	1e03      	subs	r3, r0, #0
 8007262:	d001      	beq.n	8007268 <SystemClock_Config+0xc8>
		Error_Handler();
 8007264:	f000 f804 	bl	8007270 <Error_Handler>
	}
}
 8007268:	46c0      	nop			; (mov r8, r8)
 800726a:	46bd      	mov	sp, r7
 800726c:	b019      	add	sp, #100	; 0x64
 800726e:	bd90      	pop	{r4, r7, pc}

08007270 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8007270:	b580      	push	{r7, lr}
 8007272:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8007274:	b672      	cpsid	i
}
 8007276:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8007278:	e7fe      	b.n	8007278 <Error_Handler+0x8>
	...

0800727c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b082      	sub	sp, #8
 8007280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007282:	4b0f      	ldr	r3, [pc, #60]	; (80072c0 <HAL_MspInit+0x44>)
 8007284:	699a      	ldr	r2, [r3, #24]
 8007286:	4b0e      	ldr	r3, [pc, #56]	; (80072c0 <HAL_MspInit+0x44>)
 8007288:	2101      	movs	r1, #1
 800728a:	430a      	orrs	r2, r1
 800728c:	619a      	str	r2, [r3, #24]
 800728e:	4b0c      	ldr	r3, [pc, #48]	; (80072c0 <HAL_MspInit+0x44>)
 8007290:	699b      	ldr	r3, [r3, #24]
 8007292:	2201      	movs	r2, #1
 8007294:	4013      	ands	r3, r2
 8007296:	607b      	str	r3, [r7, #4]
 8007298:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800729a:	4b09      	ldr	r3, [pc, #36]	; (80072c0 <HAL_MspInit+0x44>)
 800729c:	69da      	ldr	r2, [r3, #28]
 800729e:	4b08      	ldr	r3, [pc, #32]	; (80072c0 <HAL_MspInit+0x44>)
 80072a0:	2180      	movs	r1, #128	; 0x80
 80072a2:	0549      	lsls	r1, r1, #21
 80072a4:	430a      	orrs	r2, r1
 80072a6:	61da      	str	r2, [r3, #28]
 80072a8:	4b05      	ldr	r3, [pc, #20]	; (80072c0 <HAL_MspInit+0x44>)
 80072aa:	69da      	ldr	r2, [r3, #28]
 80072ac:	2380      	movs	r3, #128	; 0x80
 80072ae:	055b      	lsls	r3, r3, #21
 80072b0:	4013      	ands	r3, r2
 80072b2:	603b      	str	r3, [r7, #0]
 80072b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80072b6:	46c0      	nop			; (mov r8, r8)
 80072b8:	46bd      	mov	sp, r7
 80072ba:	b002      	add	sp, #8
 80072bc:	bd80      	pop	{r7, pc}
 80072be:	46c0      	nop			; (mov r8, r8)
 80072c0:	40021000 	.word	0x40021000

080072c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80072c8:	e7fe      	b.n	80072c8 <NMI_Handler+0x4>

080072ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80072ca:	b580      	push	{r7, lr}
 80072cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80072ce:	e7fe      	b.n	80072ce <HardFault_Handler+0x4>

080072d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80072d4:	46c0      	nop			; (mov r8, r8)
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}

080072da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80072da:	b580      	push	{r7, lr}
 80072dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80072de:	46c0      	nop			; (mov r8, r8)
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}

080072e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80072e8:	f000 f9d8 	bl	800769c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80072ec:	46c0      	nop			; (mov r8, r8)
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}

080072f2 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80072f2:	b580      	push	{r7, lr}
 80072f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80072f6:	2380      	movs	r3, #128	; 0x80
 80072f8:	009b      	lsls	r3, r3, #2
 80072fa:	0018      	movs	r0, r3
 80072fc:	f000 fc9c 	bl	8007c38 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8007300:	2380      	movs	r3, #128	; 0x80
 8007302:	019b      	lsls	r3, r3, #6
 8007304:	0018      	movs	r0, r3
 8007306:	f000 fc97 	bl	8007c38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800730a:	46c0      	nop			; (mov r8, r8)
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	af00      	add	r7, sp, #0
  return 1;
 8007314:	2301      	movs	r3, #1
}
 8007316:	0018      	movs	r0, r3
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}

0800731c <_kill>:

int _kill(int pid, int sig)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b082      	sub	sp, #8
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
 8007324:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8007326:	f00a fe59 	bl	8011fdc <__errno>
 800732a:	0003      	movs	r3, r0
 800732c:	2216      	movs	r2, #22
 800732e:	601a      	str	r2, [r3, #0]
  return -1;
 8007330:	2301      	movs	r3, #1
 8007332:	425b      	negs	r3, r3
}
 8007334:	0018      	movs	r0, r3
 8007336:	46bd      	mov	sp, r7
 8007338:	b002      	add	sp, #8
 800733a:	bd80      	pop	{r7, pc}

0800733c <_exit>:

void _exit (int status)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b082      	sub	sp, #8
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8007344:	2301      	movs	r3, #1
 8007346:	425a      	negs	r2, r3
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	0011      	movs	r1, r2
 800734c:	0018      	movs	r0, r3
 800734e:	f7ff ffe5 	bl	800731c <_kill>
  while (1) {}    /* Make sure we hang here */
 8007352:	e7fe      	b.n	8007352 <_exit+0x16>

08007354 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b086      	sub	sp, #24
 8007358:	af00      	add	r7, sp, #0
 800735a:	60f8      	str	r0, [r7, #12]
 800735c:	60b9      	str	r1, [r7, #8]
 800735e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007360:	2300      	movs	r3, #0
 8007362:	617b      	str	r3, [r7, #20]
 8007364:	e00a      	b.n	800737c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8007366:	e000      	b.n	800736a <_read+0x16>
 8007368:	bf00      	nop
 800736a:	0001      	movs	r1, r0
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	1c5a      	adds	r2, r3, #1
 8007370:	60ba      	str	r2, [r7, #8]
 8007372:	b2ca      	uxtb	r2, r1
 8007374:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	3301      	adds	r3, #1
 800737a:	617b      	str	r3, [r7, #20]
 800737c:	697a      	ldr	r2, [r7, #20]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	429a      	cmp	r2, r3
 8007382:	dbf0      	blt.n	8007366 <_read+0x12>
  }

  return len;
 8007384:	687b      	ldr	r3, [r7, #4]
}
 8007386:	0018      	movs	r0, r3
 8007388:	46bd      	mov	sp, r7
 800738a:	b006      	add	sp, #24
 800738c:	bd80      	pop	{r7, pc}

0800738e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800738e:	b580      	push	{r7, lr}
 8007390:	b086      	sub	sp, #24
 8007392:	af00      	add	r7, sp, #0
 8007394:	60f8      	str	r0, [r7, #12]
 8007396:	60b9      	str	r1, [r7, #8]
 8007398:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800739a:	2300      	movs	r3, #0
 800739c:	617b      	str	r3, [r7, #20]
 800739e:	e009      	b.n	80073b4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	1c5a      	adds	r2, r3, #1
 80073a4:	60ba      	str	r2, [r7, #8]
 80073a6:	781b      	ldrb	r3, [r3, #0]
 80073a8:	0018      	movs	r0, r3
 80073aa:	f000 f8f1 	bl	8007590 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	3301      	adds	r3, #1
 80073b2:	617b      	str	r3, [r7, #20]
 80073b4:	697a      	ldr	r2, [r7, #20]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	429a      	cmp	r2, r3
 80073ba:	dbf1      	blt.n	80073a0 <_write+0x12>
  }
  return len;
 80073bc:	687b      	ldr	r3, [r7, #4]
}
 80073be:	0018      	movs	r0, r3
 80073c0:	46bd      	mov	sp, r7
 80073c2:	b006      	add	sp, #24
 80073c4:	bd80      	pop	{r7, pc}

080073c6 <_close>:

int _close(int file)
{
 80073c6:	b580      	push	{r7, lr}
 80073c8:	b082      	sub	sp, #8
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80073ce:	2301      	movs	r3, #1
 80073d0:	425b      	negs	r3, r3
}
 80073d2:	0018      	movs	r0, r3
 80073d4:	46bd      	mov	sp, r7
 80073d6:	b002      	add	sp, #8
 80073d8:	bd80      	pop	{r7, pc}

080073da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80073da:	b580      	push	{r7, lr}
 80073dc:	b082      	sub	sp, #8
 80073de:	af00      	add	r7, sp, #0
 80073e0:	6078      	str	r0, [r7, #4]
 80073e2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	2280      	movs	r2, #128	; 0x80
 80073e8:	0192      	lsls	r2, r2, #6
 80073ea:	605a      	str	r2, [r3, #4]
  return 0;
 80073ec:	2300      	movs	r3, #0
}
 80073ee:	0018      	movs	r0, r3
 80073f0:	46bd      	mov	sp, r7
 80073f2:	b002      	add	sp, #8
 80073f4:	bd80      	pop	{r7, pc}

080073f6 <_isatty>:

int _isatty(int file)
{
 80073f6:	b580      	push	{r7, lr}
 80073f8:	b082      	sub	sp, #8
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80073fe:	2301      	movs	r3, #1
}
 8007400:	0018      	movs	r0, r3
 8007402:	46bd      	mov	sp, r7
 8007404:	b002      	add	sp, #8
 8007406:	bd80      	pop	{r7, pc}

08007408 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b084      	sub	sp, #16
 800740c:	af00      	add	r7, sp, #0
 800740e:	60f8      	str	r0, [r7, #12]
 8007410:	60b9      	str	r1, [r7, #8]
 8007412:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8007414:	2300      	movs	r3, #0
}
 8007416:	0018      	movs	r0, r3
 8007418:	46bd      	mov	sp, r7
 800741a:	b004      	add	sp, #16
 800741c:	bd80      	pop	{r7, pc}
	...

08007420 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b086      	sub	sp, #24
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007428:	4a14      	ldr	r2, [pc, #80]	; (800747c <_sbrk+0x5c>)
 800742a:	4b15      	ldr	r3, [pc, #84]	; (8007480 <_sbrk+0x60>)
 800742c:	1ad3      	subs	r3, r2, r3
 800742e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007434:	4b13      	ldr	r3, [pc, #76]	; (8007484 <_sbrk+0x64>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d102      	bne.n	8007442 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800743c:	4b11      	ldr	r3, [pc, #68]	; (8007484 <_sbrk+0x64>)
 800743e:	4a12      	ldr	r2, [pc, #72]	; (8007488 <_sbrk+0x68>)
 8007440:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007442:	4b10      	ldr	r3, [pc, #64]	; (8007484 <_sbrk+0x64>)
 8007444:	681a      	ldr	r2, [r3, #0]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	18d3      	adds	r3, r2, r3
 800744a:	693a      	ldr	r2, [r7, #16]
 800744c:	429a      	cmp	r2, r3
 800744e:	d207      	bcs.n	8007460 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007450:	f00a fdc4 	bl	8011fdc <__errno>
 8007454:	0003      	movs	r3, r0
 8007456:	220c      	movs	r2, #12
 8007458:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800745a:	2301      	movs	r3, #1
 800745c:	425b      	negs	r3, r3
 800745e:	e009      	b.n	8007474 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007460:	4b08      	ldr	r3, [pc, #32]	; (8007484 <_sbrk+0x64>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007466:	4b07      	ldr	r3, [pc, #28]	; (8007484 <_sbrk+0x64>)
 8007468:	681a      	ldr	r2, [r3, #0]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	18d2      	adds	r2, r2, r3
 800746e:	4b05      	ldr	r3, [pc, #20]	; (8007484 <_sbrk+0x64>)
 8007470:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8007472:	68fb      	ldr	r3, [r7, #12]
}
 8007474:	0018      	movs	r0, r3
 8007476:	46bd      	mov	sp, r7
 8007478:	b006      	add	sp, #24
 800747a:	bd80      	pop	{r7, pc}
 800747c:	20008000 	.word	0x20008000
 8007480:	00000400 	.word	0x00000400
 8007484:	20000640 	.word	0x20000640
 8007488:	20001140 	.word	0x20001140

0800748c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8007490:	46c0      	nop			; (mov r8, r8)
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}
	...

08007498 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800749c:	4b14      	ldr	r3, [pc, #80]	; (80074f0 <MX_USART2_UART_Init+0x58>)
 800749e:	4a15      	ldr	r2, [pc, #84]	; (80074f4 <MX_USART2_UART_Init+0x5c>)
 80074a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80074a2:	4b13      	ldr	r3, [pc, #76]	; (80074f0 <MX_USART2_UART_Init+0x58>)
 80074a4:	22e1      	movs	r2, #225	; 0xe1
 80074a6:	0252      	lsls	r2, r2, #9
 80074a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80074aa:	4b11      	ldr	r3, [pc, #68]	; (80074f0 <MX_USART2_UART_Init+0x58>)
 80074ac:	2200      	movs	r2, #0
 80074ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80074b0:	4b0f      	ldr	r3, [pc, #60]	; (80074f0 <MX_USART2_UART_Init+0x58>)
 80074b2:	2200      	movs	r2, #0
 80074b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80074b6:	4b0e      	ldr	r3, [pc, #56]	; (80074f0 <MX_USART2_UART_Init+0x58>)
 80074b8:	2200      	movs	r2, #0
 80074ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80074bc:	4b0c      	ldr	r3, [pc, #48]	; (80074f0 <MX_USART2_UART_Init+0x58>)
 80074be:	220c      	movs	r2, #12
 80074c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80074c2:	4b0b      	ldr	r3, [pc, #44]	; (80074f0 <MX_USART2_UART_Init+0x58>)
 80074c4:	2200      	movs	r2, #0
 80074c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80074c8:	4b09      	ldr	r3, [pc, #36]	; (80074f0 <MX_USART2_UART_Init+0x58>)
 80074ca:	2200      	movs	r2, #0
 80074cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80074ce:	4b08      	ldr	r3, [pc, #32]	; (80074f0 <MX_USART2_UART_Init+0x58>)
 80074d0:	2200      	movs	r2, #0
 80074d2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80074d4:	4b06      	ldr	r3, [pc, #24]	; (80074f0 <MX_USART2_UART_Init+0x58>)
 80074d6:	2200      	movs	r2, #0
 80074d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80074da:	4b05      	ldr	r3, [pc, #20]	; (80074f0 <MX_USART2_UART_Init+0x58>)
 80074dc:	0018      	movs	r0, r3
 80074de:	f002 f9cb 	bl	8009878 <HAL_UART_Init>
 80074e2:	1e03      	subs	r3, r0, #0
 80074e4:	d001      	beq.n	80074ea <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80074e6:	f7ff fec3 	bl	8007270 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80074ea:	46c0      	nop			; (mov r8, r8)
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}
 80074f0:	20000644 	.word	0x20000644
 80074f4:	40004400 	.word	0x40004400

080074f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80074f8:	b590      	push	{r4, r7, lr}
 80074fa:	b08b      	sub	sp, #44	; 0x2c
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007500:	2414      	movs	r4, #20
 8007502:	193b      	adds	r3, r7, r4
 8007504:	0018      	movs	r0, r3
 8007506:	2314      	movs	r3, #20
 8007508:	001a      	movs	r2, r3
 800750a:	2100      	movs	r1, #0
 800750c:	f00a fd0b 	bl	8011f26 <memset>
  if(uartHandle->Instance==USART2)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a1c      	ldr	r2, [pc, #112]	; (8007588 <HAL_UART_MspInit+0x90>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d132      	bne.n	8007580 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800751a:	4b1c      	ldr	r3, [pc, #112]	; (800758c <HAL_UART_MspInit+0x94>)
 800751c:	69da      	ldr	r2, [r3, #28]
 800751e:	4b1b      	ldr	r3, [pc, #108]	; (800758c <HAL_UART_MspInit+0x94>)
 8007520:	2180      	movs	r1, #128	; 0x80
 8007522:	0289      	lsls	r1, r1, #10
 8007524:	430a      	orrs	r2, r1
 8007526:	61da      	str	r2, [r3, #28]
 8007528:	4b18      	ldr	r3, [pc, #96]	; (800758c <HAL_UART_MspInit+0x94>)
 800752a:	69da      	ldr	r2, [r3, #28]
 800752c:	2380      	movs	r3, #128	; 0x80
 800752e:	029b      	lsls	r3, r3, #10
 8007530:	4013      	ands	r3, r2
 8007532:	613b      	str	r3, [r7, #16]
 8007534:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007536:	4b15      	ldr	r3, [pc, #84]	; (800758c <HAL_UART_MspInit+0x94>)
 8007538:	695a      	ldr	r2, [r3, #20]
 800753a:	4b14      	ldr	r3, [pc, #80]	; (800758c <HAL_UART_MspInit+0x94>)
 800753c:	2180      	movs	r1, #128	; 0x80
 800753e:	0289      	lsls	r1, r1, #10
 8007540:	430a      	orrs	r2, r1
 8007542:	615a      	str	r2, [r3, #20]
 8007544:	4b11      	ldr	r3, [pc, #68]	; (800758c <HAL_UART_MspInit+0x94>)
 8007546:	695a      	ldr	r2, [r3, #20]
 8007548:	2380      	movs	r3, #128	; 0x80
 800754a:	029b      	lsls	r3, r3, #10
 800754c:	4013      	ands	r3, r2
 800754e:	60fb      	str	r3, [r7, #12]
 8007550:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8007552:	0021      	movs	r1, r4
 8007554:	187b      	adds	r3, r7, r1
 8007556:	220c      	movs	r2, #12
 8007558:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800755a:	187b      	adds	r3, r7, r1
 800755c:	2202      	movs	r2, #2
 800755e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007560:	187b      	adds	r3, r7, r1
 8007562:	2200      	movs	r2, #0
 8007564:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007566:	187b      	adds	r3, r7, r1
 8007568:	2200      	movs	r2, #0
 800756a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800756c:	187b      	adds	r3, r7, r1
 800756e:	2201      	movs	r2, #1
 8007570:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007572:	187a      	adds	r2, r7, r1
 8007574:	2390      	movs	r3, #144	; 0x90
 8007576:	05db      	lsls	r3, r3, #23
 8007578:	0011      	movs	r1, r2
 800757a:	0018      	movs	r0, r3
 800757c:	f000 f9ac 	bl	80078d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8007580:	46c0      	nop			; (mov r8, r8)
 8007582:	46bd      	mov	sp, r7
 8007584:	b00b      	add	sp, #44	; 0x2c
 8007586:	bd90      	pop	{r4, r7, pc}
 8007588:	40004400 	.word	0x40004400
 800758c:	40021000 	.word	0x40021000

08007590 <__io_putchar>:
{
    HAL_UART_Transmit(&huart2,(uint8_t *)&ch,1,1000); return ch;
}

PUTCHAR_PROTOTYPE
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b082      	sub	sp, #8
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
    /* Place your implementation of fputc here */
    /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
    HAL_UART_Transmit(&huart2, (uint8_t *) &ch, 1, 0xFFFF);
 8007598:	4b05      	ldr	r3, [pc, #20]	; (80075b0 <__io_putchar+0x20>)
 800759a:	1d39      	adds	r1, r7, #4
 800759c:	4805      	ldr	r0, [pc, #20]	; (80075b4 <__io_putchar+0x24>)
 800759e:	2201      	movs	r2, #1
 80075a0:	f002 f9be 	bl	8009920 <HAL_UART_Transmit>

    return ch;
 80075a4:	687b      	ldr	r3, [r7, #4]
}
 80075a6:	0018      	movs	r0, r3
 80075a8:	46bd      	mov	sp, r7
 80075aa:	b002      	add	sp, #8
 80075ac:	bd80      	pop	{r7, pc}
 80075ae:	46c0      	nop			; (mov r8, r8)
 80075b0:	0000ffff 	.word	0x0000ffff
 80075b4:	20000644 	.word	0x20000644

080075b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80075b8:	480d      	ldr	r0, [pc, #52]	; (80075f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80075ba:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80075bc:	f7ff ff66 	bl	800748c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80075c0:	480c      	ldr	r0, [pc, #48]	; (80075f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80075c2:	490d      	ldr	r1, [pc, #52]	; (80075f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80075c4:	4a0d      	ldr	r2, [pc, #52]	; (80075fc <LoopForever+0xe>)
  movs r3, #0
 80075c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80075c8:	e002      	b.n	80075d0 <LoopCopyDataInit>

080075ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80075ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80075cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80075ce:	3304      	adds	r3, #4

080075d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80075d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80075d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80075d4:	d3f9      	bcc.n	80075ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80075d6:	4a0a      	ldr	r2, [pc, #40]	; (8007600 <LoopForever+0x12>)
  ldr r4, =_ebss
 80075d8:	4c0a      	ldr	r4, [pc, #40]	; (8007604 <LoopForever+0x16>)
  movs r3, #0
 80075da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80075dc:	e001      	b.n	80075e2 <LoopFillZerobss>

080075de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80075de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80075e0:	3204      	adds	r2, #4

080075e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80075e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80075e4:	d3fb      	bcc.n	80075de <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80075e6:	f00a fcff 	bl	8011fe8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80075ea:	f7ff fd35 	bl	8007058 <main>

080075ee <LoopForever>:

LoopForever:
    b LoopForever
 80075ee:	e7fe      	b.n	80075ee <LoopForever>
  ldr   r0, =_estack
 80075f0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80075f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80075f8:	20000228 	.word	0x20000228
  ldr r2, =_sidata
 80075fc:	08016f58 	.word	0x08016f58
  ldr r2, =_sbss
 8007600:	20000228 	.word	0x20000228
  ldr r4, =_ebss
 8007604:	20001140 	.word	0x20001140

08007608 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007608:	e7fe      	b.n	8007608 <ADC1_COMP_IRQHandler>
	...

0800760c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007610:	4b07      	ldr	r3, [pc, #28]	; (8007630 <HAL_Init+0x24>)
 8007612:	681a      	ldr	r2, [r3, #0]
 8007614:	4b06      	ldr	r3, [pc, #24]	; (8007630 <HAL_Init+0x24>)
 8007616:	2110      	movs	r1, #16
 8007618:	430a      	orrs	r2, r1
 800761a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800761c:	2000      	movs	r0, #0
 800761e:	f000 f809 	bl	8007634 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007622:	f7ff fe2b 	bl	800727c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007626:	2300      	movs	r3, #0
}
 8007628:	0018      	movs	r0, r3
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}
 800762e:	46c0      	nop			; (mov r8, r8)
 8007630:	40022000 	.word	0x40022000

08007634 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007634:	b590      	push	{r4, r7, lr}
 8007636:	b083      	sub	sp, #12
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800763c:	4b14      	ldr	r3, [pc, #80]	; (8007690 <HAL_InitTick+0x5c>)
 800763e:	681c      	ldr	r4, [r3, #0]
 8007640:	4b14      	ldr	r3, [pc, #80]	; (8007694 <HAL_InitTick+0x60>)
 8007642:	781b      	ldrb	r3, [r3, #0]
 8007644:	0019      	movs	r1, r3
 8007646:	23fa      	movs	r3, #250	; 0xfa
 8007648:	0098      	lsls	r0, r3, #2
 800764a:	f7fb fd1f 	bl	800308c <__udivsi3>
 800764e:	0003      	movs	r3, r0
 8007650:	0019      	movs	r1, r3
 8007652:	0020      	movs	r0, r4
 8007654:	f7fb fd1a 	bl	800308c <__udivsi3>
 8007658:	0003      	movs	r3, r0
 800765a:	0018      	movs	r0, r3
 800765c:	f000 f92f 	bl	80078be <HAL_SYSTICK_Config>
 8007660:	1e03      	subs	r3, r0, #0
 8007662:	d001      	beq.n	8007668 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8007664:	2301      	movs	r3, #1
 8007666:	e00f      	b.n	8007688 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2b03      	cmp	r3, #3
 800766c:	d80b      	bhi.n	8007686 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800766e:	6879      	ldr	r1, [r7, #4]
 8007670:	2301      	movs	r3, #1
 8007672:	425b      	negs	r3, r3
 8007674:	2200      	movs	r2, #0
 8007676:	0018      	movs	r0, r3
 8007678:	f000 f8fc 	bl	8007874 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800767c:	4b06      	ldr	r3, [pc, #24]	; (8007698 <HAL_InitTick+0x64>)
 800767e:	687a      	ldr	r2, [r7, #4]
 8007680:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8007682:	2300      	movs	r3, #0
 8007684:	e000      	b.n	8007688 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8007686:	2301      	movs	r3, #1
}
 8007688:	0018      	movs	r0, r3
 800768a:	46bd      	mov	sp, r7
 800768c:	b003      	add	sp, #12
 800768e:	bd90      	pop	{r4, r7, pc}
 8007690:	20000020 	.word	0x20000020
 8007694:	20000028 	.word	0x20000028
 8007698:	20000024 	.word	0x20000024

0800769c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80076a0:	4b05      	ldr	r3, [pc, #20]	; (80076b8 <HAL_IncTick+0x1c>)
 80076a2:	781b      	ldrb	r3, [r3, #0]
 80076a4:	001a      	movs	r2, r3
 80076a6:	4b05      	ldr	r3, [pc, #20]	; (80076bc <HAL_IncTick+0x20>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	18d2      	adds	r2, r2, r3
 80076ac:	4b03      	ldr	r3, [pc, #12]	; (80076bc <HAL_IncTick+0x20>)
 80076ae:	601a      	str	r2, [r3, #0]
}
 80076b0:	46c0      	nop			; (mov r8, r8)
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}
 80076b6:	46c0      	nop			; (mov r8, r8)
 80076b8:	20000028 	.word	0x20000028
 80076bc:	200006cc 	.word	0x200006cc

080076c0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	af00      	add	r7, sp, #0
  return uwTick;
 80076c4:	4b02      	ldr	r3, [pc, #8]	; (80076d0 <HAL_GetTick+0x10>)
 80076c6:	681b      	ldr	r3, [r3, #0]
}
 80076c8:	0018      	movs	r0, r3
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}
 80076ce:	46c0      	nop			; (mov r8, r8)
 80076d0:	200006cc 	.word	0x200006cc

080076d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b084      	sub	sp, #16
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80076dc:	f7ff fff0 	bl	80076c0 <HAL_GetTick>
 80076e0:	0003      	movs	r3, r0
 80076e2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	3301      	adds	r3, #1
 80076ec:	d005      	beq.n	80076fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80076ee:	4b0a      	ldr	r3, [pc, #40]	; (8007718 <HAL_Delay+0x44>)
 80076f0:	781b      	ldrb	r3, [r3, #0]
 80076f2:	001a      	movs	r2, r3
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	189b      	adds	r3, r3, r2
 80076f8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80076fa:	46c0      	nop			; (mov r8, r8)
 80076fc:	f7ff ffe0 	bl	80076c0 <HAL_GetTick>
 8007700:	0002      	movs	r2, r0
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	1ad3      	subs	r3, r2, r3
 8007706:	68fa      	ldr	r2, [r7, #12]
 8007708:	429a      	cmp	r2, r3
 800770a:	d8f7      	bhi.n	80076fc <HAL_Delay+0x28>
  {
  }
}
 800770c:	46c0      	nop			; (mov r8, r8)
 800770e:	46c0      	nop			; (mov r8, r8)
 8007710:	46bd      	mov	sp, r7
 8007712:	b004      	add	sp, #16
 8007714:	bd80      	pop	{r7, pc}
 8007716:	46c0      	nop			; (mov r8, r8)
 8007718:	20000028 	.word	0x20000028

0800771c <__NVIC_EnableIRQ>:
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b082      	sub	sp, #8
 8007720:	af00      	add	r7, sp, #0
 8007722:	0002      	movs	r2, r0
 8007724:	1dfb      	adds	r3, r7, #7
 8007726:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8007728:	1dfb      	adds	r3, r7, #7
 800772a:	781b      	ldrb	r3, [r3, #0]
 800772c:	2b7f      	cmp	r3, #127	; 0x7f
 800772e:	d809      	bhi.n	8007744 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007730:	1dfb      	adds	r3, r7, #7
 8007732:	781b      	ldrb	r3, [r3, #0]
 8007734:	001a      	movs	r2, r3
 8007736:	231f      	movs	r3, #31
 8007738:	401a      	ands	r2, r3
 800773a:	4b04      	ldr	r3, [pc, #16]	; (800774c <__NVIC_EnableIRQ+0x30>)
 800773c:	2101      	movs	r1, #1
 800773e:	4091      	lsls	r1, r2
 8007740:	000a      	movs	r2, r1
 8007742:	601a      	str	r2, [r3, #0]
}
 8007744:	46c0      	nop			; (mov r8, r8)
 8007746:	46bd      	mov	sp, r7
 8007748:	b002      	add	sp, #8
 800774a:	bd80      	pop	{r7, pc}
 800774c:	e000e100 	.word	0xe000e100

08007750 <__NVIC_SetPriority>:
{
 8007750:	b590      	push	{r4, r7, lr}
 8007752:	b083      	sub	sp, #12
 8007754:	af00      	add	r7, sp, #0
 8007756:	0002      	movs	r2, r0
 8007758:	6039      	str	r1, [r7, #0]
 800775a:	1dfb      	adds	r3, r7, #7
 800775c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800775e:	1dfb      	adds	r3, r7, #7
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	2b7f      	cmp	r3, #127	; 0x7f
 8007764:	d828      	bhi.n	80077b8 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007766:	4a2f      	ldr	r2, [pc, #188]	; (8007824 <__NVIC_SetPriority+0xd4>)
 8007768:	1dfb      	adds	r3, r7, #7
 800776a:	781b      	ldrb	r3, [r3, #0]
 800776c:	b25b      	sxtb	r3, r3
 800776e:	089b      	lsrs	r3, r3, #2
 8007770:	33c0      	adds	r3, #192	; 0xc0
 8007772:	009b      	lsls	r3, r3, #2
 8007774:	589b      	ldr	r3, [r3, r2]
 8007776:	1dfa      	adds	r2, r7, #7
 8007778:	7812      	ldrb	r2, [r2, #0]
 800777a:	0011      	movs	r1, r2
 800777c:	2203      	movs	r2, #3
 800777e:	400a      	ands	r2, r1
 8007780:	00d2      	lsls	r2, r2, #3
 8007782:	21ff      	movs	r1, #255	; 0xff
 8007784:	4091      	lsls	r1, r2
 8007786:	000a      	movs	r2, r1
 8007788:	43d2      	mvns	r2, r2
 800778a:	401a      	ands	r2, r3
 800778c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	019b      	lsls	r3, r3, #6
 8007792:	22ff      	movs	r2, #255	; 0xff
 8007794:	401a      	ands	r2, r3
 8007796:	1dfb      	adds	r3, r7, #7
 8007798:	781b      	ldrb	r3, [r3, #0]
 800779a:	0018      	movs	r0, r3
 800779c:	2303      	movs	r3, #3
 800779e:	4003      	ands	r3, r0
 80077a0:	00db      	lsls	r3, r3, #3
 80077a2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80077a4:	481f      	ldr	r0, [pc, #124]	; (8007824 <__NVIC_SetPriority+0xd4>)
 80077a6:	1dfb      	adds	r3, r7, #7
 80077a8:	781b      	ldrb	r3, [r3, #0]
 80077aa:	b25b      	sxtb	r3, r3
 80077ac:	089b      	lsrs	r3, r3, #2
 80077ae:	430a      	orrs	r2, r1
 80077b0:	33c0      	adds	r3, #192	; 0xc0
 80077b2:	009b      	lsls	r3, r3, #2
 80077b4:	501a      	str	r2, [r3, r0]
}
 80077b6:	e031      	b.n	800781c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80077b8:	4a1b      	ldr	r2, [pc, #108]	; (8007828 <__NVIC_SetPriority+0xd8>)
 80077ba:	1dfb      	adds	r3, r7, #7
 80077bc:	781b      	ldrb	r3, [r3, #0]
 80077be:	0019      	movs	r1, r3
 80077c0:	230f      	movs	r3, #15
 80077c2:	400b      	ands	r3, r1
 80077c4:	3b08      	subs	r3, #8
 80077c6:	089b      	lsrs	r3, r3, #2
 80077c8:	3306      	adds	r3, #6
 80077ca:	009b      	lsls	r3, r3, #2
 80077cc:	18d3      	adds	r3, r2, r3
 80077ce:	3304      	adds	r3, #4
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	1dfa      	adds	r2, r7, #7
 80077d4:	7812      	ldrb	r2, [r2, #0]
 80077d6:	0011      	movs	r1, r2
 80077d8:	2203      	movs	r2, #3
 80077da:	400a      	ands	r2, r1
 80077dc:	00d2      	lsls	r2, r2, #3
 80077de:	21ff      	movs	r1, #255	; 0xff
 80077e0:	4091      	lsls	r1, r2
 80077e2:	000a      	movs	r2, r1
 80077e4:	43d2      	mvns	r2, r2
 80077e6:	401a      	ands	r2, r3
 80077e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	019b      	lsls	r3, r3, #6
 80077ee:	22ff      	movs	r2, #255	; 0xff
 80077f0:	401a      	ands	r2, r3
 80077f2:	1dfb      	adds	r3, r7, #7
 80077f4:	781b      	ldrb	r3, [r3, #0]
 80077f6:	0018      	movs	r0, r3
 80077f8:	2303      	movs	r3, #3
 80077fa:	4003      	ands	r3, r0
 80077fc:	00db      	lsls	r3, r3, #3
 80077fe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007800:	4809      	ldr	r0, [pc, #36]	; (8007828 <__NVIC_SetPriority+0xd8>)
 8007802:	1dfb      	adds	r3, r7, #7
 8007804:	781b      	ldrb	r3, [r3, #0]
 8007806:	001c      	movs	r4, r3
 8007808:	230f      	movs	r3, #15
 800780a:	4023      	ands	r3, r4
 800780c:	3b08      	subs	r3, #8
 800780e:	089b      	lsrs	r3, r3, #2
 8007810:	430a      	orrs	r2, r1
 8007812:	3306      	adds	r3, #6
 8007814:	009b      	lsls	r3, r3, #2
 8007816:	18c3      	adds	r3, r0, r3
 8007818:	3304      	adds	r3, #4
 800781a:	601a      	str	r2, [r3, #0]
}
 800781c:	46c0      	nop			; (mov r8, r8)
 800781e:	46bd      	mov	sp, r7
 8007820:	b003      	add	sp, #12
 8007822:	bd90      	pop	{r4, r7, pc}
 8007824:	e000e100 	.word	0xe000e100
 8007828:	e000ed00 	.word	0xe000ed00

0800782c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b082      	sub	sp, #8
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	1e5a      	subs	r2, r3, #1
 8007838:	2380      	movs	r3, #128	; 0x80
 800783a:	045b      	lsls	r3, r3, #17
 800783c:	429a      	cmp	r2, r3
 800783e:	d301      	bcc.n	8007844 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007840:	2301      	movs	r3, #1
 8007842:	e010      	b.n	8007866 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007844:	4b0a      	ldr	r3, [pc, #40]	; (8007870 <SysTick_Config+0x44>)
 8007846:	687a      	ldr	r2, [r7, #4]
 8007848:	3a01      	subs	r2, #1
 800784a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800784c:	2301      	movs	r3, #1
 800784e:	425b      	negs	r3, r3
 8007850:	2103      	movs	r1, #3
 8007852:	0018      	movs	r0, r3
 8007854:	f7ff ff7c 	bl	8007750 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007858:	4b05      	ldr	r3, [pc, #20]	; (8007870 <SysTick_Config+0x44>)
 800785a:	2200      	movs	r2, #0
 800785c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800785e:	4b04      	ldr	r3, [pc, #16]	; (8007870 <SysTick_Config+0x44>)
 8007860:	2207      	movs	r2, #7
 8007862:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007864:	2300      	movs	r3, #0
}
 8007866:	0018      	movs	r0, r3
 8007868:	46bd      	mov	sp, r7
 800786a:	b002      	add	sp, #8
 800786c:	bd80      	pop	{r7, pc}
 800786e:	46c0      	nop			; (mov r8, r8)
 8007870:	e000e010 	.word	0xe000e010

08007874 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007874:	b580      	push	{r7, lr}
 8007876:	b084      	sub	sp, #16
 8007878:	af00      	add	r7, sp, #0
 800787a:	60b9      	str	r1, [r7, #8]
 800787c:	607a      	str	r2, [r7, #4]
 800787e:	210f      	movs	r1, #15
 8007880:	187b      	adds	r3, r7, r1
 8007882:	1c02      	adds	r2, r0, #0
 8007884:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8007886:	68ba      	ldr	r2, [r7, #8]
 8007888:	187b      	adds	r3, r7, r1
 800788a:	781b      	ldrb	r3, [r3, #0]
 800788c:	b25b      	sxtb	r3, r3
 800788e:	0011      	movs	r1, r2
 8007890:	0018      	movs	r0, r3
 8007892:	f7ff ff5d 	bl	8007750 <__NVIC_SetPriority>
}
 8007896:	46c0      	nop			; (mov r8, r8)
 8007898:	46bd      	mov	sp, r7
 800789a:	b004      	add	sp, #16
 800789c:	bd80      	pop	{r7, pc}

0800789e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800789e:	b580      	push	{r7, lr}
 80078a0:	b082      	sub	sp, #8
 80078a2:	af00      	add	r7, sp, #0
 80078a4:	0002      	movs	r2, r0
 80078a6:	1dfb      	adds	r3, r7, #7
 80078a8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80078aa:	1dfb      	adds	r3, r7, #7
 80078ac:	781b      	ldrb	r3, [r3, #0]
 80078ae:	b25b      	sxtb	r3, r3
 80078b0:	0018      	movs	r0, r3
 80078b2:	f7ff ff33 	bl	800771c <__NVIC_EnableIRQ>
}
 80078b6:	46c0      	nop			; (mov r8, r8)
 80078b8:	46bd      	mov	sp, r7
 80078ba:	b002      	add	sp, #8
 80078bc:	bd80      	pop	{r7, pc}

080078be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80078be:	b580      	push	{r7, lr}
 80078c0:	b082      	sub	sp, #8
 80078c2:	af00      	add	r7, sp, #0
 80078c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	0018      	movs	r0, r3
 80078ca:	f7ff ffaf 	bl	800782c <SysTick_Config>
 80078ce:	0003      	movs	r3, r0
}
 80078d0:	0018      	movs	r0, r3
 80078d2:	46bd      	mov	sp, r7
 80078d4:	b002      	add	sp, #8
 80078d6:	bd80      	pop	{r7, pc}

080078d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b086      	sub	sp, #24
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
 80078e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80078e2:	2300      	movs	r3, #0
 80078e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80078e6:	e155      	b.n	8007b94 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	2101      	movs	r1, #1
 80078ee:	697a      	ldr	r2, [r7, #20]
 80078f0:	4091      	lsls	r1, r2
 80078f2:	000a      	movs	r2, r1
 80078f4:	4013      	ands	r3, r2
 80078f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d100      	bne.n	8007900 <HAL_GPIO_Init+0x28>
 80078fe:	e146      	b.n	8007b8e <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	2203      	movs	r2, #3
 8007906:	4013      	ands	r3, r2
 8007908:	2b01      	cmp	r3, #1
 800790a:	d005      	beq.n	8007918 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	2203      	movs	r2, #3
 8007912:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007914:	2b02      	cmp	r3, #2
 8007916:	d130      	bne.n	800797a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	689b      	ldr	r3, [r3, #8]
 800791c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	005b      	lsls	r3, r3, #1
 8007922:	2203      	movs	r2, #3
 8007924:	409a      	lsls	r2, r3
 8007926:	0013      	movs	r3, r2
 8007928:	43da      	mvns	r2, r3
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	4013      	ands	r3, r2
 800792e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	68da      	ldr	r2, [r3, #12]
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	005b      	lsls	r3, r3, #1
 8007938:	409a      	lsls	r2, r3
 800793a:	0013      	movs	r3, r2
 800793c:	693a      	ldr	r2, [r7, #16]
 800793e:	4313      	orrs	r3, r2
 8007940:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	693a      	ldr	r2, [r7, #16]
 8007946:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800794e:	2201      	movs	r2, #1
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	409a      	lsls	r2, r3
 8007954:	0013      	movs	r3, r2
 8007956:	43da      	mvns	r2, r3
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	4013      	ands	r3, r2
 800795c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	091b      	lsrs	r3, r3, #4
 8007964:	2201      	movs	r2, #1
 8007966:	401a      	ands	r2, r3
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	409a      	lsls	r2, r3
 800796c:	0013      	movs	r3, r2
 800796e:	693a      	ldr	r2, [r7, #16]
 8007970:	4313      	orrs	r3, r2
 8007972:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	693a      	ldr	r2, [r7, #16]
 8007978:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	685b      	ldr	r3, [r3, #4]
 800797e:	2203      	movs	r2, #3
 8007980:	4013      	ands	r3, r2
 8007982:	2b03      	cmp	r3, #3
 8007984:	d017      	beq.n	80079b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	68db      	ldr	r3, [r3, #12]
 800798a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	005b      	lsls	r3, r3, #1
 8007990:	2203      	movs	r2, #3
 8007992:	409a      	lsls	r2, r3
 8007994:	0013      	movs	r3, r2
 8007996:	43da      	mvns	r2, r3
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	4013      	ands	r3, r2
 800799c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	689a      	ldr	r2, [r3, #8]
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	005b      	lsls	r3, r3, #1
 80079a6:	409a      	lsls	r2, r3
 80079a8:	0013      	movs	r3, r2
 80079aa:	693a      	ldr	r2, [r7, #16]
 80079ac:	4313      	orrs	r3, r2
 80079ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	693a      	ldr	r2, [r7, #16]
 80079b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	685b      	ldr	r3, [r3, #4]
 80079ba:	2203      	movs	r2, #3
 80079bc:	4013      	ands	r3, r2
 80079be:	2b02      	cmp	r3, #2
 80079c0:	d123      	bne.n	8007a0a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	08da      	lsrs	r2, r3, #3
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	3208      	adds	r2, #8
 80079ca:	0092      	lsls	r2, r2, #2
 80079cc:	58d3      	ldr	r3, [r2, r3]
 80079ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	2207      	movs	r2, #7
 80079d4:	4013      	ands	r3, r2
 80079d6:	009b      	lsls	r3, r3, #2
 80079d8:	220f      	movs	r2, #15
 80079da:	409a      	lsls	r2, r3
 80079dc:	0013      	movs	r3, r2
 80079de:	43da      	mvns	r2, r3
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	4013      	ands	r3, r2
 80079e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	691a      	ldr	r2, [r3, #16]
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	2107      	movs	r1, #7
 80079ee:	400b      	ands	r3, r1
 80079f0:	009b      	lsls	r3, r3, #2
 80079f2:	409a      	lsls	r2, r3
 80079f4:	0013      	movs	r3, r2
 80079f6:	693a      	ldr	r2, [r7, #16]
 80079f8:	4313      	orrs	r3, r2
 80079fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	08da      	lsrs	r2, r3, #3
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	3208      	adds	r2, #8
 8007a04:	0092      	lsls	r2, r2, #2
 8007a06:	6939      	ldr	r1, [r7, #16]
 8007a08:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	005b      	lsls	r3, r3, #1
 8007a14:	2203      	movs	r2, #3
 8007a16:	409a      	lsls	r2, r3
 8007a18:	0013      	movs	r3, r2
 8007a1a:	43da      	mvns	r2, r3
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	4013      	ands	r3, r2
 8007a20:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	685b      	ldr	r3, [r3, #4]
 8007a26:	2203      	movs	r2, #3
 8007a28:	401a      	ands	r2, r3
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	005b      	lsls	r3, r3, #1
 8007a2e:	409a      	lsls	r2, r3
 8007a30:	0013      	movs	r3, r2
 8007a32:	693a      	ldr	r2, [r7, #16]
 8007a34:	4313      	orrs	r3, r2
 8007a36:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	693a      	ldr	r2, [r7, #16]
 8007a3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	685a      	ldr	r2, [r3, #4]
 8007a42:	23c0      	movs	r3, #192	; 0xc0
 8007a44:	029b      	lsls	r3, r3, #10
 8007a46:	4013      	ands	r3, r2
 8007a48:	d100      	bne.n	8007a4c <HAL_GPIO_Init+0x174>
 8007a4a:	e0a0      	b.n	8007b8e <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007a4c:	4b57      	ldr	r3, [pc, #348]	; (8007bac <HAL_GPIO_Init+0x2d4>)
 8007a4e:	699a      	ldr	r2, [r3, #24]
 8007a50:	4b56      	ldr	r3, [pc, #344]	; (8007bac <HAL_GPIO_Init+0x2d4>)
 8007a52:	2101      	movs	r1, #1
 8007a54:	430a      	orrs	r2, r1
 8007a56:	619a      	str	r2, [r3, #24]
 8007a58:	4b54      	ldr	r3, [pc, #336]	; (8007bac <HAL_GPIO_Init+0x2d4>)
 8007a5a:	699b      	ldr	r3, [r3, #24]
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	4013      	ands	r3, r2
 8007a60:	60bb      	str	r3, [r7, #8]
 8007a62:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8007a64:	4a52      	ldr	r2, [pc, #328]	; (8007bb0 <HAL_GPIO_Init+0x2d8>)
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	089b      	lsrs	r3, r3, #2
 8007a6a:	3302      	adds	r3, #2
 8007a6c:	009b      	lsls	r3, r3, #2
 8007a6e:	589b      	ldr	r3, [r3, r2]
 8007a70:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	2203      	movs	r2, #3
 8007a76:	4013      	ands	r3, r2
 8007a78:	009b      	lsls	r3, r3, #2
 8007a7a:	220f      	movs	r2, #15
 8007a7c:	409a      	lsls	r2, r3
 8007a7e:	0013      	movs	r3, r2
 8007a80:	43da      	mvns	r2, r3
 8007a82:	693b      	ldr	r3, [r7, #16]
 8007a84:	4013      	ands	r3, r2
 8007a86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007a88:	687a      	ldr	r2, [r7, #4]
 8007a8a:	2390      	movs	r3, #144	; 0x90
 8007a8c:	05db      	lsls	r3, r3, #23
 8007a8e:	429a      	cmp	r2, r3
 8007a90:	d019      	beq.n	8007ac6 <HAL_GPIO_Init+0x1ee>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	4a47      	ldr	r2, [pc, #284]	; (8007bb4 <HAL_GPIO_Init+0x2dc>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d013      	beq.n	8007ac2 <HAL_GPIO_Init+0x1ea>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	4a46      	ldr	r2, [pc, #280]	; (8007bb8 <HAL_GPIO_Init+0x2e0>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d00d      	beq.n	8007abe <HAL_GPIO_Init+0x1e6>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	4a45      	ldr	r2, [pc, #276]	; (8007bbc <HAL_GPIO_Init+0x2e4>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d007      	beq.n	8007aba <HAL_GPIO_Init+0x1e2>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	4a44      	ldr	r2, [pc, #272]	; (8007bc0 <HAL_GPIO_Init+0x2e8>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d101      	bne.n	8007ab6 <HAL_GPIO_Init+0x1de>
 8007ab2:	2304      	movs	r3, #4
 8007ab4:	e008      	b.n	8007ac8 <HAL_GPIO_Init+0x1f0>
 8007ab6:	2305      	movs	r3, #5
 8007ab8:	e006      	b.n	8007ac8 <HAL_GPIO_Init+0x1f0>
 8007aba:	2303      	movs	r3, #3
 8007abc:	e004      	b.n	8007ac8 <HAL_GPIO_Init+0x1f0>
 8007abe:	2302      	movs	r3, #2
 8007ac0:	e002      	b.n	8007ac8 <HAL_GPIO_Init+0x1f0>
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	e000      	b.n	8007ac8 <HAL_GPIO_Init+0x1f0>
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	697a      	ldr	r2, [r7, #20]
 8007aca:	2103      	movs	r1, #3
 8007acc:	400a      	ands	r2, r1
 8007ace:	0092      	lsls	r2, r2, #2
 8007ad0:	4093      	lsls	r3, r2
 8007ad2:	693a      	ldr	r2, [r7, #16]
 8007ad4:	4313      	orrs	r3, r2
 8007ad6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8007ad8:	4935      	ldr	r1, [pc, #212]	; (8007bb0 <HAL_GPIO_Init+0x2d8>)
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	089b      	lsrs	r3, r3, #2
 8007ade:	3302      	adds	r3, #2
 8007ae0:	009b      	lsls	r3, r3, #2
 8007ae2:	693a      	ldr	r2, [r7, #16]
 8007ae4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007ae6:	4b37      	ldr	r3, [pc, #220]	; (8007bc4 <HAL_GPIO_Init+0x2ec>)
 8007ae8:	689b      	ldr	r3, [r3, #8]
 8007aea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	43da      	mvns	r2, r3
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	4013      	ands	r3, r2
 8007af4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	685a      	ldr	r2, [r3, #4]
 8007afa:	2380      	movs	r3, #128	; 0x80
 8007afc:	035b      	lsls	r3, r3, #13
 8007afe:	4013      	ands	r3, r2
 8007b00:	d003      	beq.n	8007b0a <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8007b02:	693a      	ldr	r2, [r7, #16]
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	4313      	orrs	r3, r2
 8007b08:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8007b0a:	4b2e      	ldr	r3, [pc, #184]	; (8007bc4 <HAL_GPIO_Init+0x2ec>)
 8007b0c:	693a      	ldr	r2, [r7, #16]
 8007b0e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8007b10:	4b2c      	ldr	r3, [pc, #176]	; (8007bc4 <HAL_GPIO_Init+0x2ec>)
 8007b12:	68db      	ldr	r3, [r3, #12]
 8007b14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	43da      	mvns	r2, r3
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	4013      	ands	r3, r2
 8007b1e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	685a      	ldr	r2, [r3, #4]
 8007b24:	2380      	movs	r3, #128	; 0x80
 8007b26:	039b      	lsls	r3, r3, #14
 8007b28:	4013      	ands	r3, r2
 8007b2a:	d003      	beq.n	8007b34 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8007b2c:	693a      	ldr	r2, [r7, #16]
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	4313      	orrs	r3, r2
 8007b32:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8007b34:	4b23      	ldr	r3, [pc, #140]	; (8007bc4 <HAL_GPIO_Init+0x2ec>)
 8007b36:	693a      	ldr	r2, [r7, #16]
 8007b38:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8007b3a:	4b22      	ldr	r3, [pc, #136]	; (8007bc4 <HAL_GPIO_Init+0x2ec>)
 8007b3c:	685b      	ldr	r3, [r3, #4]
 8007b3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	43da      	mvns	r2, r3
 8007b44:	693b      	ldr	r3, [r7, #16]
 8007b46:	4013      	ands	r3, r2
 8007b48:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	685a      	ldr	r2, [r3, #4]
 8007b4e:	2380      	movs	r3, #128	; 0x80
 8007b50:	029b      	lsls	r3, r3, #10
 8007b52:	4013      	ands	r3, r2
 8007b54:	d003      	beq.n	8007b5e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8007b56:	693a      	ldr	r2, [r7, #16]
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8007b5e:	4b19      	ldr	r3, [pc, #100]	; (8007bc4 <HAL_GPIO_Init+0x2ec>)
 8007b60:	693a      	ldr	r2, [r7, #16]
 8007b62:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8007b64:	4b17      	ldr	r3, [pc, #92]	; (8007bc4 <HAL_GPIO_Init+0x2ec>)
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	43da      	mvns	r2, r3
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	4013      	ands	r3, r2
 8007b72:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	685a      	ldr	r2, [r3, #4]
 8007b78:	2380      	movs	r3, #128	; 0x80
 8007b7a:	025b      	lsls	r3, r3, #9
 8007b7c:	4013      	ands	r3, r2
 8007b7e:	d003      	beq.n	8007b88 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8007b80:	693a      	ldr	r2, [r7, #16]
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	4313      	orrs	r3, r2
 8007b86:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8007b88:	4b0e      	ldr	r3, [pc, #56]	; (8007bc4 <HAL_GPIO_Init+0x2ec>)
 8007b8a:	693a      	ldr	r2, [r7, #16]
 8007b8c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	3301      	adds	r3, #1
 8007b92:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	681a      	ldr	r2, [r3, #0]
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	40da      	lsrs	r2, r3
 8007b9c:	1e13      	subs	r3, r2, #0
 8007b9e:	d000      	beq.n	8007ba2 <HAL_GPIO_Init+0x2ca>
 8007ba0:	e6a2      	b.n	80078e8 <HAL_GPIO_Init+0x10>
  } 
}
 8007ba2:	46c0      	nop			; (mov r8, r8)
 8007ba4:	46c0      	nop			; (mov r8, r8)
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	b006      	add	sp, #24
 8007baa:	bd80      	pop	{r7, pc}
 8007bac:	40021000 	.word	0x40021000
 8007bb0:	40010000 	.word	0x40010000
 8007bb4:	48000400 	.word	0x48000400
 8007bb8:	48000800 	.word	0x48000800
 8007bbc:	48000c00 	.word	0x48000c00
 8007bc0:	48001000 	.word	0x48001000
 8007bc4:	40010400 	.word	0x40010400

08007bc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b082      	sub	sp, #8
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
 8007bd0:	0008      	movs	r0, r1
 8007bd2:	0011      	movs	r1, r2
 8007bd4:	1cbb      	adds	r3, r7, #2
 8007bd6:	1c02      	adds	r2, r0, #0
 8007bd8:	801a      	strh	r2, [r3, #0]
 8007bda:	1c7b      	adds	r3, r7, #1
 8007bdc:	1c0a      	adds	r2, r1, #0
 8007bde:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007be0:	1c7b      	adds	r3, r7, #1
 8007be2:	781b      	ldrb	r3, [r3, #0]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d004      	beq.n	8007bf2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007be8:	1cbb      	adds	r3, r7, #2
 8007bea:	881a      	ldrh	r2, [r3, #0]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007bf0:	e003      	b.n	8007bfa <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007bf2:	1cbb      	adds	r3, r7, #2
 8007bf4:	881a      	ldrh	r2, [r3, #0]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007bfa:	46c0      	nop			; (mov r8, r8)
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	b002      	add	sp, #8
 8007c00:	bd80      	pop	{r7, pc}

08007c02 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007c02:	b580      	push	{r7, lr}
 8007c04:	b084      	sub	sp, #16
 8007c06:	af00      	add	r7, sp, #0
 8007c08:	6078      	str	r0, [r7, #4]
 8007c0a:	000a      	movs	r2, r1
 8007c0c:	1cbb      	adds	r3, r7, #2
 8007c0e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	695b      	ldr	r3, [r3, #20]
 8007c14:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007c16:	1cbb      	adds	r3, r7, #2
 8007c18:	881b      	ldrh	r3, [r3, #0]
 8007c1a:	68fa      	ldr	r2, [r7, #12]
 8007c1c:	4013      	ands	r3, r2
 8007c1e:	041a      	lsls	r2, r3, #16
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	43db      	mvns	r3, r3
 8007c24:	1cb9      	adds	r1, r7, #2
 8007c26:	8809      	ldrh	r1, [r1, #0]
 8007c28:	400b      	ands	r3, r1
 8007c2a:	431a      	orrs	r2, r3
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	619a      	str	r2, [r3, #24]
}
 8007c30:	46c0      	nop			; (mov r8, r8)
 8007c32:	46bd      	mov	sp, r7
 8007c34:	b004      	add	sp, #16
 8007c36:	bd80      	pop	{r7, pc}

08007c38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b082      	sub	sp, #8
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	0002      	movs	r2, r0
 8007c40:	1dbb      	adds	r3, r7, #6
 8007c42:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8007c44:	4b09      	ldr	r3, [pc, #36]	; (8007c6c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8007c46:	695b      	ldr	r3, [r3, #20]
 8007c48:	1dba      	adds	r2, r7, #6
 8007c4a:	8812      	ldrh	r2, [r2, #0]
 8007c4c:	4013      	ands	r3, r2
 8007c4e:	d008      	beq.n	8007c62 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007c50:	4b06      	ldr	r3, [pc, #24]	; (8007c6c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8007c52:	1dba      	adds	r2, r7, #6
 8007c54:	8812      	ldrh	r2, [r2, #0]
 8007c56:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007c58:	1dbb      	adds	r3, r7, #6
 8007c5a:	881b      	ldrh	r3, [r3, #0]
 8007c5c:	0018      	movs	r0, r3
 8007c5e:	f7fe fec7 	bl	80069f0 <HAL_GPIO_EXTI_Callback>
  }
}
 8007c62:	46c0      	nop			; (mov r8, r8)
 8007c64:	46bd      	mov	sp, r7
 8007c66:	b002      	add	sp, #8
 8007c68:	bd80      	pop	{r7, pc}
 8007c6a:	46c0      	nop			; (mov r8, r8)
 8007c6c:	40010400 	.word	0x40010400

08007c70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b082      	sub	sp, #8
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d101      	bne.n	8007c82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007c7e:	2301      	movs	r3, #1
 8007c80:	e082      	b.n	8007d88 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2241      	movs	r2, #65	; 0x41
 8007c86:	5c9b      	ldrb	r3, [r3, r2]
 8007c88:	b2db      	uxtb	r3, r3
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d107      	bne.n	8007c9e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2240      	movs	r2, #64	; 0x40
 8007c92:	2100      	movs	r1, #0
 8007c94:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	0018      	movs	r0, r3
 8007c9a:	f7ff f95b 	bl	8006f54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2241      	movs	r2, #65	; 0x41
 8007ca2:	2124      	movs	r1, #36	; 0x24
 8007ca4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	681a      	ldr	r2, [r3, #0]
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	2101      	movs	r1, #1
 8007cb2:	438a      	bics	r2, r1
 8007cb4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	685a      	ldr	r2, [r3, #4]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4934      	ldr	r1, [pc, #208]	; (8007d90 <HAL_I2C_Init+0x120>)
 8007cc0:	400a      	ands	r2, r1
 8007cc2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	689a      	ldr	r2, [r3, #8]
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	4931      	ldr	r1, [pc, #196]	; (8007d94 <HAL_I2C_Init+0x124>)
 8007cd0:	400a      	ands	r2, r1
 8007cd2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	68db      	ldr	r3, [r3, #12]
 8007cd8:	2b01      	cmp	r3, #1
 8007cda:	d108      	bne.n	8007cee <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	689a      	ldr	r2, [r3, #8]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	2180      	movs	r1, #128	; 0x80
 8007ce6:	0209      	lsls	r1, r1, #8
 8007ce8:	430a      	orrs	r2, r1
 8007cea:	609a      	str	r2, [r3, #8]
 8007cec:	e007      	b.n	8007cfe <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	689a      	ldr	r2, [r3, #8]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	2184      	movs	r1, #132	; 0x84
 8007cf8:	0209      	lsls	r1, r1, #8
 8007cfa:	430a      	orrs	r2, r1
 8007cfc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	68db      	ldr	r3, [r3, #12]
 8007d02:	2b02      	cmp	r3, #2
 8007d04:	d104      	bne.n	8007d10 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	2280      	movs	r2, #128	; 0x80
 8007d0c:	0112      	lsls	r2, r2, #4
 8007d0e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	685a      	ldr	r2, [r3, #4]
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	491f      	ldr	r1, [pc, #124]	; (8007d98 <HAL_I2C_Init+0x128>)
 8007d1c:	430a      	orrs	r2, r1
 8007d1e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	68da      	ldr	r2, [r3, #12]
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	491a      	ldr	r1, [pc, #104]	; (8007d94 <HAL_I2C_Init+0x124>)
 8007d2c:	400a      	ands	r2, r1
 8007d2e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	691a      	ldr	r2, [r3, #16]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	695b      	ldr	r3, [r3, #20]
 8007d38:	431a      	orrs	r2, r3
 8007d3a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	699b      	ldr	r3, [r3, #24]
 8007d40:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	430a      	orrs	r2, r1
 8007d48:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	69d9      	ldr	r1, [r3, #28]
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6a1a      	ldr	r2, [r3, #32]
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	430a      	orrs	r2, r1
 8007d58:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	681a      	ldr	r2, [r3, #0]
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	2101      	movs	r1, #1
 8007d66:	430a      	orrs	r2, r1
 8007d68:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2241      	movs	r2, #65	; 0x41
 8007d74:	2120      	movs	r1, #32
 8007d76:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2242      	movs	r2, #66	; 0x42
 8007d82:	2100      	movs	r1, #0
 8007d84:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007d86:	2300      	movs	r3, #0
}
 8007d88:	0018      	movs	r0, r3
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	b002      	add	sp, #8
 8007d8e:	bd80      	pop	{r7, pc}
 8007d90:	f0ffffff 	.word	0xf0ffffff
 8007d94:	ffff7fff 	.word	0xffff7fff
 8007d98:	02008000 	.word	0x02008000

08007d9c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d9c:	b590      	push	{r4, r7, lr}
 8007d9e:	b089      	sub	sp, #36	; 0x24
 8007da0:	af02      	add	r7, sp, #8
 8007da2:	60f8      	str	r0, [r7, #12]
 8007da4:	000c      	movs	r4, r1
 8007da6:	0010      	movs	r0, r2
 8007da8:	0019      	movs	r1, r3
 8007daa:	230a      	movs	r3, #10
 8007dac:	18fb      	adds	r3, r7, r3
 8007dae:	1c22      	adds	r2, r4, #0
 8007db0:	801a      	strh	r2, [r3, #0]
 8007db2:	2308      	movs	r3, #8
 8007db4:	18fb      	adds	r3, r7, r3
 8007db6:	1c02      	adds	r2, r0, #0
 8007db8:	801a      	strh	r2, [r3, #0]
 8007dba:	1dbb      	adds	r3, r7, #6
 8007dbc:	1c0a      	adds	r2, r1, #0
 8007dbe:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	2241      	movs	r2, #65	; 0x41
 8007dc4:	5c9b      	ldrb	r3, [r3, r2]
 8007dc6:	b2db      	uxtb	r3, r3
 8007dc8:	2b20      	cmp	r3, #32
 8007dca:	d000      	beq.n	8007dce <HAL_I2C_Mem_Write+0x32>
 8007dcc:	e10c      	b.n	8007fe8 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d004      	beq.n	8007dde <HAL_I2C_Mem_Write+0x42>
 8007dd4:	232c      	movs	r3, #44	; 0x2c
 8007dd6:	18fb      	adds	r3, r7, r3
 8007dd8:	881b      	ldrh	r3, [r3, #0]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d105      	bne.n	8007dea <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	2280      	movs	r2, #128	; 0x80
 8007de2:	0092      	lsls	r2, r2, #2
 8007de4:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007de6:	2301      	movs	r3, #1
 8007de8:	e0ff      	b.n	8007fea <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2240      	movs	r2, #64	; 0x40
 8007dee:	5c9b      	ldrb	r3, [r3, r2]
 8007df0:	2b01      	cmp	r3, #1
 8007df2:	d101      	bne.n	8007df8 <HAL_I2C_Mem_Write+0x5c>
 8007df4:	2302      	movs	r3, #2
 8007df6:	e0f8      	b.n	8007fea <HAL_I2C_Mem_Write+0x24e>
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	2240      	movs	r2, #64	; 0x40
 8007dfc:	2101      	movs	r1, #1
 8007dfe:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007e00:	f7ff fc5e 	bl	80076c0 <HAL_GetTick>
 8007e04:	0003      	movs	r3, r0
 8007e06:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007e08:	2380      	movs	r3, #128	; 0x80
 8007e0a:	0219      	lsls	r1, r3, #8
 8007e0c:	68f8      	ldr	r0, [r7, #12]
 8007e0e:	697b      	ldr	r3, [r7, #20]
 8007e10:	9300      	str	r3, [sp, #0]
 8007e12:	2319      	movs	r3, #25
 8007e14:	2201      	movs	r2, #1
 8007e16:	f000 fc31 	bl	800867c <I2C_WaitOnFlagUntilTimeout>
 8007e1a:	1e03      	subs	r3, r0, #0
 8007e1c:	d001      	beq.n	8007e22 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8007e1e:	2301      	movs	r3, #1
 8007e20:	e0e3      	b.n	8007fea <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	2241      	movs	r2, #65	; 0x41
 8007e26:	2121      	movs	r1, #33	; 0x21
 8007e28:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	2242      	movs	r2, #66	; 0x42
 8007e2e:	2140      	movs	r1, #64	; 0x40
 8007e30:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	2200      	movs	r2, #0
 8007e36:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e3c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	222c      	movs	r2, #44	; 0x2c
 8007e42:	18ba      	adds	r2, r7, r2
 8007e44:	8812      	ldrh	r2, [r2, #0]
 8007e46:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007e4e:	1dbb      	adds	r3, r7, #6
 8007e50:	881c      	ldrh	r4, [r3, #0]
 8007e52:	2308      	movs	r3, #8
 8007e54:	18fb      	adds	r3, r7, r3
 8007e56:	881a      	ldrh	r2, [r3, #0]
 8007e58:	230a      	movs	r3, #10
 8007e5a:	18fb      	adds	r3, r7, r3
 8007e5c:	8819      	ldrh	r1, [r3, #0]
 8007e5e:	68f8      	ldr	r0, [r7, #12]
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	9301      	str	r3, [sp, #4]
 8007e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e66:	9300      	str	r3, [sp, #0]
 8007e68:	0023      	movs	r3, r4
 8007e6a:	f000 fb1f 	bl	80084ac <I2C_RequestMemoryWrite>
 8007e6e:	1e03      	subs	r3, r0, #0
 8007e70:	d005      	beq.n	8007e7e <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	2240      	movs	r2, #64	; 0x40
 8007e76:	2100      	movs	r1, #0
 8007e78:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	e0b5      	b.n	8007fea <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e82:	b29b      	uxth	r3, r3
 8007e84:	2bff      	cmp	r3, #255	; 0xff
 8007e86:	d911      	bls.n	8007eac <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	22ff      	movs	r2, #255	; 0xff
 8007e8c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e92:	b2da      	uxtb	r2, r3
 8007e94:	2380      	movs	r3, #128	; 0x80
 8007e96:	045c      	lsls	r4, r3, #17
 8007e98:	230a      	movs	r3, #10
 8007e9a:	18fb      	adds	r3, r7, r3
 8007e9c:	8819      	ldrh	r1, [r3, #0]
 8007e9e:	68f8      	ldr	r0, [r7, #12]
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	9300      	str	r3, [sp, #0]
 8007ea4:	0023      	movs	r3, r4
 8007ea6:	f000 fdc1 	bl	8008a2c <I2C_TransferConfig>
 8007eaa:	e012      	b.n	8007ed2 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007eb0:	b29a      	uxth	r2, r3
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007eba:	b2da      	uxtb	r2, r3
 8007ebc:	2380      	movs	r3, #128	; 0x80
 8007ebe:	049c      	lsls	r4, r3, #18
 8007ec0:	230a      	movs	r3, #10
 8007ec2:	18fb      	adds	r3, r7, r3
 8007ec4:	8819      	ldrh	r1, [r3, #0]
 8007ec6:	68f8      	ldr	r0, [r7, #12]
 8007ec8:	2300      	movs	r3, #0
 8007eca:	9300      	str	r3, [sp, #0]
 8007ecc:	0023      	movs	r3, r4
 8007ece:	f000 fdad 	bl	8008a2c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007ed2:	697a      	ldr	r2, [r7, #20]
 8007ed4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	0018      	movs	r0, r3
 8007eda:	f000 fc1d 	bl	8008718 <I2C_WaitOnTXISFlagUntilTimeout>
 8007ede:	1e03      	subs	r3, r0, #0
 8007ee0:	d001      	beq.n	8007ee6 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	e081      	b.n	8007fea <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eea:	781a      	ldrb	r2, [r3, #0]
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ef6:	1c5a      	adds	r2, r3, #1
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f00:	b29b      	uxth	r3, r3
 8007f02:	3b01      	subs	r3, #1
 8007f04:	b29a      	uxth	r2, r3
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f0e:	3b01      	subs	r3, #1
 8007f10:	b29a      	uxth	r2, r3
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f1a:	b29b      	uxth	r3, r3
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d03a      	beq.n	8007f96 <HAL_I2C_Mem_Write+0x1fa>
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d136      	bne.n	8007f96 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007f28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f2a:	68f8      	ldr	r0, [r7, #12]
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	9300      	str	r3, [sp, #0]
 8007f30:	0013      	movs	r3, r2
 8007f32:	2200      	movs	r2, #0
 8007f34:	2180      	movs	r1, #128	; 0x80
 8007f36:	f000 fba1 	bl	800867c <I2C_WaitOnFlagUntilTimeout>
 8007f3a:	1e03      	subs	r3, r0, #0
 8007f3c:	d001      	beq.n	8007f42 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8007f3e:	2301      	movs	r3, #1
 8007f40:	e053      	b.n	8007fea <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f46:	b29b      	uxth	r3, r3
 8007f48:	2bff      	cmp	r3, #255	; 0xff
 8007f4a:	d911      	bls.n	8007f70 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	22ff      	movs	r2, #255	; 0xff
 8007f50:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f56:	b2da      	uxtb	r2, r3
 8007f58:	2380      	movs	r3, #128	; 0x80
 8007f5a:	045c      	lsls	r4, r3, #17
 8007f5c:	230a      	movs	r3, #10
 8007f5e:	18fb      	adds	r3, r7, r3
 8007f60:	8819      	ldrh	r1, [r3, #0]
 8007f62:	68f8      	ldr	r0, [r7, #12]
 8007f64:	2300      	movs	r3, #0
 8007f66:	9300      	str	r3, [sp, #0]
 8007f68:	0023      	movs	r3, r4
 8007f6a:	f000 fd5f 	bl	8008a2c <I2C_TransferConfig>
 8007f6e:	e012      	b.n	8007f96 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f74:	b29a      	uxth	r2, r3
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f7e:	b2da      	uxtb	r2, r3
 8007f80:	2380      	movs	r3, #128	; 0x80
 8007f82:	049c      	lsls	r4, r3, #18
 8007f84:	230a      	movs	r3, #10
 8007f86:	18fb      	adds	r3, r7, r3
 8007f88:	8819      	ldrh	r1, [r3, #0]
 8007f8a:	68f8      	ldr	r0, [r7, #12]
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	9300      	str	r3, [sp, #0]
 8007f90:	0023      	movs	r3, r4
 8007f92:	f000 fd4b 	bl	8008a2c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f9a:	b29b      	uxth	r3, r3
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d198      	bne.n	8007ed2 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007fa0:	697a      	ldr	r2, [r7, #20]
 8007fa2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	0018      	movs	r0, r3
 8007fa8:	f000 fbfc 	bl	80087a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007fac:	1e03      	subs	r3, r0, #0
 8007fae:	d001      	beq.n	8007fb4 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	e01a      	b.n	8007fea <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	2220      	movs	r2, #32
 8007fba:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	685a      	ldr	r2, [r3, #4]
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	490b      	ldr	r1, [pc, #44]	; (8007ff4 <HAL_I2C_Mem_Write+0x258>)
 8007fc8:	400a      	ands	r2, r1
 8007fca:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	2241      	movs	r2, #65	; 0x41
 8007fd0:	2120      	movs	r1, #32
 8007fd2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	2242      	movs	r2, #66	; 0x42
 8007fd8:	2100      	movs	r1, #0
 8007fda:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	2240      	movs	r2, #64	; 0x40
 8007fe0:	2100      	movs	r1, #0
 8007fe2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	e000      	b.n	8007fea <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8007fe8:	2302      	movs	r3, #2
  }
}
 8007fea:	0018      	movs	r0, r3
 8007fec:	46bd      	mov	sp, r7
 8007fee:	b007      	add	sp, #28
 8007ff0:	bd90      	pop	{r4, r7, pc}
 8007ff2:	46c0      	nop			; (mov r8, r8)
 8007ff4:	fe00e800 	.word	0xfe00e800

08007ff8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ff8:	b590      	push	{r4, r7, lr}
 8007ffa:	b089      	sub	sp, #36	; 0x24
 8007ffc:	af02      	add	r7, sp, #8
 8007ffe:	60f8      	str	r0, [r7, #12]
 8008000:	000c      	movs	r4, r1
 8008002:	0010      	movs	r0, r2
 8008004:	0019      	movs	r1, r3
 8008006:	230a      	movs	r3, #10
 8008008:	18fb      	adds	r3, r7, r3
 800800a:	1c22      	adds	r2, r4, #0
 800800c:	801a      	strh	r2, [r3, #0]
 800800e:	2308      	movs	r3, #8
 8008010:	18fb      	adds	r3, r7, r3
 8008012:	1c02      	adds	r2, r0, #0
 8008014:	801a      	strh	r2, [r3, #0]
 8008016:	1dbb      	adds	r3, r7, #6
 8008018:	1c0a      	adds	r2, r1, #0
 800801a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	2241      	movs	r2, #65	; 0x41
 8008020:	5c9b      	ldrb	r3, [r3, r2]
 8008022:	b2db      	uxtb	r3, r3
 8008024:	2b20      	cmp	r3, #32
 8008026:	d000      	beq.n	800802a <HAL_I2C_Mem_Read+0x32>
 8008028:	e110      	b.n	800824c <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800802a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800802c:	2b00      	cmp	r3, #0
 800802e:	d004      	beq.n	800803a <HAL_I2C_Mem_Read+0x42>
 8008030:	232c      	movs	r3, #44	; 0x2c
 8008032:	18fb      	adds	r3, r7, r3
 8008034:	881b      	ldrh	r3, [r3, #0]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d105      	bne.n	8008046 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	2280      	movs	r2, #128	; 0x80
 800803e:	0092      	lsls	r2, r2, #2
 8008040:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008042:	2301      	movs	r3, #1
 8008044:	e103      	b.n	800824e <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	2240      	movs	r2, #64	; 0x40
 800804a:	5c9b      	ldrb	r3, [r3, r2]
 800804c:	2b01      	cmp	r3, #1
 800804e:	d101      	bne.n	8008054 <HAL_I2C_Mem_Read+0x5c>
 8008050:	2302      	movs	r3, #2
 8008052:	e0fc      	b.n	800824e <HAL_I2C_Mem_Read+0x256>
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	2240      	movs	r2, #64	; 0x40
 8008058:	2101      	movs	r1, #1
 800805a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800805c:	f7ff fb30 	bl	80076c0 <HAL_GetTick>
 8008060:	0003      	movs	r3, r0
 8008062:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008064:	2380      	movs	r3, #128	; 0x80
 8008066:	0219      	lsls	r1, r3, #8
 8008068:	68f8      	ldr	r0, [r7, #12]
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	9300      	str	r3, [sp, #0]
 800806e:	2319      	movs	r3, #25
 8008070:	2201      	movs	r2, #1
 8008072:	f000 fb03 	bl	800867c <I2C_WaitOnFlagUntilTimeout>
 8008076:	1e03      	subs	r3, r0, #0
 8008078:	d001      	beq.n	800807e <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 800807a:	2301      	movs	r3, #1
 800807c:	e0e7      	b.n	800824e <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	2241      	movs	r2, #65	; 0x41
 8008082:	2122      	movs	r1, #34	; 0x22
 8008084:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	2242      	movs	r2, #66	; 0x42
 800808a:	2140      	movs	r1, #64	; 0x40
 800808c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	2200      	movs	r2, #0
 8008092:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008098:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	222c      	movs	r2, #44	; 0x2c
 800809e:	18ba      	adds	r2, r7, r2
 80080a0:	8812      	ldrh	r2, [r2, #0]
 80080a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	2200      	movs	r2, #0
 80080a8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80080aa:	1dbb      	adds	r3, r7, #6
 80080ac:	881c      	ldrh	r4, [r3, #0]
 80080ae:	2308      	movs	r3, #8
 80080b0:	18fb      	adds	r3, r7, r3
 80080b2:	881a      	ldrh	r2, [r3, #0]
 80080b4:	230a      	movs	r3, #10
 80080b6:	18fb      	adds	r3, r7, r3
 80080b8:	8819      	ldrh	r1, [r3, #0]
 80080ba:	68f8      	ldr	r0, [r7, #12]
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	9301      	str	r3, [sp, #4]
 80080c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080c2:	9300      	str	r3, [sp, #0]
 80080c4:	0023      	movs	r3, r4
 80080c6:	f000 fa55 	bl	8008574 <I2C_RequestMemoryRead>
 80080ca:	1e03      	subs	r3, r0, #0
 80080cc:	d005      	beq.n	80080da <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	2240      	movs	r2, #64	; 0x40
 80080d2:	2100      	movs	r1, #0
 80080d4:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80080d6:	2301      	movs	r3, #1
 80080d8:	e0b9      	b.n	800824e <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080de:	b29b      	uxth	r3, r3
 80080e0:	2bff      	cmp	r3, #255	; 0xff
 80080e2:	d911      	bls.n	8008108 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	22ff      	movs	r2, #255	; 0xff
 80080e8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080ee:	b2da      	uxtb	r2, r3
 80080f0:	2380      	movs	r3, #128	; 0x80
 80080f2:	045c      	lsls	r4, r3, #17
 80080f4:	230a      	movs	r3, #10
 80080f6:	18fb      	adds	r3, r7, r3
 80080f8:	8819      	ldrh	r1, [r3, #0]
 80080fa:	68f8      	ldr	r0, [r7, #12]
 80080fc:	4b56      	ldr	r3, [pc, #344]	; (8008258 <HAL_I2C_Mem_Read+0x260>)
 80080fe:	9300      	str	r3, [sp, #0]
 8008100:	0023      	movs	r3, r4
 8008102:	f000 fc93 	bl	8008a2c <I2C_TransferConfig>
 8008106:	e012      	b.n	800812e <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800810c:	b29a      	uxth	r2, r3
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008116:	b2da      	uxtb	r2, r3
 8008118:	2380      	movs	r3, #128	; 0x80
 800811a:	049c      	lsls	r4, r3, #18
 800811c:	230a      	movs	r3, #10
 800811e:	18fb      	adds	r3, r7, r3
 8008120:	8819      	ldrh	r1, [r3, #0]
 8008122:	68f8      	ldr	r0, [r7, #12]
 8008124:	4b4c      	ldr	r3, [pc, #304]	; (8008258 <HAL_I2C_Mem_Read+0x260>)
 8008126:	9300      	str	r3, [sp, #0]
 8008128:	0023      	movs	r3, r4
 800812a:	f000 fc7f 	bl	8008a2c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800812e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008130:	68f8      	ldr	r0, [r7, #12]
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	9300      	str	r3, [sp, #0]
 8008136:	0013      	movs	r3, r2
 8008138:	2200      	movs	r2, #0
 800813a:	2104      	movs	r1, #4
 800813c:	f000 fa9e 	bl	800867c <I2C_WaitOnFlagUntilTimeout>
 8008140:	1e03      	subs	r3, r0, #0
 8008142:	d001      	beq.n	8008148 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8008144:	2301      	movs	r3, #1
 8008146:	e082      	b.n	800824e <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008152:	b2d2      	uxtb	r2, r2
 8008154:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800815a:	1c5a      	adds	r2, r3, #1
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008164:	3b01      	subs	r3, #1
 8008166:	b29a      	uxth	r2, r3
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008170:	b29b      	uxth	r3, r3
 8008172:	3b01      	subs	r3, #1
 8008174:	b29a      	uxth	r2, r3
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800817e:	b29b      	uxth	r3, r3
 8008180:	2b00      	cmp	r3, #0
 8008182:	d03a      	beq.n	80081fa <HAL_I2C_Mem_Read+0x202>
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008188:	2b00      	cmp	r3, #0
 800818a:	d136      	bne.n	80081fa <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800818c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800818e:	68f8      	ldr	r0, [r7, #12]
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	9300      	str	r3, [sp, #0]
 8008194:	0013      	movs	r3, r2
 8008196:	2200      	movs	r2, #0
 8008198:	2180      	movs	r1, #128	; 0x80
 800819a:	f000 fa6f 	bl	800867c <I2C_WaitOnFlagUntilTimeout>
 800819e:	1e03      	subs	r3, r0, #0
 80081a0:	d001      	beq.n	80081a6 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 80081a2:	2301      	movs	r3, #1
 80081a4:	e053      	b.n	800824e <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081aa:	b29b      	uxth	r3, r3
 80081ac:	2bff      	cmp	r3, #255	; 0xff
 80081ae:	d911      	bls.n	80081d4 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	22ff      	movs	r2, #255	; 0xff
 80081b4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081ba:	b2da      	uxtb	r2, r3
 80081bc:	2380      	movs	r3, #128	; 0x80
 80081be:	045c      	lsls	r4, r3, #17
 80081c0:	230a      	movs	r3, #10
 80081c2:	18fb      	adds	r3, r7, r3
 80081c4:	8819      	ldrh	r1, [r3, #0]
 80081c6:	68f8      	ldr	r0, [r7, #12]
 80081c8:	2300      	movs	r3, #0
 80081ca:	9300      	str	r3, [sp, #0]
 80081cc:	0023      	movs	r3, r4
 80081ce:	f000 fc2d 	bl	8008a2c <I2C_TransferConfig>
 80081d2:	e012      	b.n	80081fa <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081d8:	b29a      	uxth	r2, r3
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081e2:	b2da      	uxtb	r2, r3
 80081e4:	2380      	movs	r3, #128	; 0x80
 80081e6:	049c      	lsls	r4, r3, #18
 80081e8:	230a      	movs	r3, #10
 80081ea:	18fb      	adds	r3, r7, r3
 80081ec:	8819      	ldrh	r1, [r3, #0]
 80081ee:	68f8      	ldr	r0, [r7, #12]
 80081f0:	2300      	movs	r3, #0
 80081f2:	9300      	str	r3, [sp, #0]
 80081f4:	0023      	movs	r3, r4
 80081f6:	f000 fc19 	bl	8008a2c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081fe:	b29b      	uxth	r3, r3
 8008200:	2b00      	cmp	r3, #0
 8008202:	d194      	bne.n	800812e <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008204:	697a      	ldr	r2, [r7, #20]
 8008206:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	0018      	movs	r0, r3
 800820c:	f000 faca 	bl	80087a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008210:	1e03      	subs	r3, r0, #0
 8008212:	d001      	beq.n	8008218 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8008214:	2301      	movs	r3, #1
 8008216:	e01a      	b.n	800824e <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	2220      	movs	r2, #32
 800821e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	685a      	ldr	r2, [r3, #4]
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	490c      	ldr	r1, [pc, #48]	; (800825c <HAL_I2C_Mem_Read+0x264>)
 800822c:	400a      	ands	r2, r1
 800822e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	2241      	movs	r2, #65	; 0x41
 8008234:	2120      	movs	r1, #32
 8008236:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	2242      	movs	r2, #66	; 0x42
 800823c:	2100      	movs	r1, #0
 800823e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	2240      	movs	r2, #64	; 0x40
 8008244:	2100      	movs	r1, #0
 8008246:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8008248:	2300      	movs	r3, #0
 800824a:	e000      	b.n	800824e <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 800824c:	2302      	movs	r3, #2
  }
}
 800824e:	0018      	movs	r0, r3
 8008250:	46bd      	mov	sp, r7
 8008252:	b007      	add	sp, #28
 8008254:	bd90      	pop	{r4, r7, pc}
 8008256:	46c0      	nop			; (mov r8, r8)
 8008258:	80002400 	.word	0x80002400
 800825c:	fe00e800 	.word	0xfe00e800

08008260 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b08a      	sub	sp, #40	; 0x28
 8008264:	af02      	add	r7, sp, #8
 8008266:	60f8      	str	r0, [r7, #12]
 8008268:	607a      	str	r2, [r7, #4]
 800826a:	603b      	str	r3, [r7, #0]
 800826c:	230a      	movs	r3, #10
 800826e:	18fb      	adds	r3, r7, r3
 8008270:	1c0a      	adds	r2, r1, #0
 8008272:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8008274:	2300      	movs	r3, #0
 8008276:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	2241      	movs	r2, #65	; 0x41
 800827c:	5c9b      	ldrb	r3, [r3, r2]
 800827e:	b2db      	uxtb	r3, r3
 8008280:	2b20      	cmp	r3, #32
 8008282:	d000      	beq.n	8008286 <HAL_I2C_IsDeviceReady+0x26>
 8008284:	e0fd      	b.n	8008482 <HAL_I2C_IsDeviceReady+0x222>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	699a      	ldr	r2, [r3, #24]
 800828c:	2380      	movs	r3, #128	; 0x80
 800828e:	021b      	lsls	r3, r3, #8
 8008290:	401a      	ands	r2, r3
 8008292:	2380      	movs	r3, #128	; 0x80
 8008294:	021b      	lsls	r3, r3, #8
 8008296:	429a      	cmp	r2, r3
 8008298:	d101      	bne.n	800829e <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 800829a:	2302      	movs	r3, #2
 800829c:	e0f2      	b.n	8008484 <HAL_I2C_IsDeviceReady+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	2240      	movs	r2, #64	; 0x40
 80082a2:	5c9b      	ldrb	r3, [r3, r2]
 80082a4:	2b01      	cmp	r3, #1
 80082a6:	d101      	bne.n	80082ac <HAL_I2C_IsDeviceReady+0x4c>
 80082a8:	2302      	movs	r3, #2
 80082aa:	e0eb      	b.n	8008484 <HAL_I2C_IsDeviceReady+0x224>
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	2240      	movs	r2, #64	; 0x40
 80082b0:	2101      	movs	r1, #1
 80082b2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	2241      	movs	r2, #65	; 0x41
 80082b8:	2124      	movs	r1, #36	; 0x24
 80082ba:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	2200      	movs	r2, #0
 80082c0:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	68db      	ldr	r3, [r3, #12]
 80082c6:	2b01      	cmp	r3, #1
 80082c8:	d107      	bne.n	80082da <HAL_I2C_IsDeviceReady+0x7a>
 80082ca:	230a      	movs	r3, #10
 80082cc:	18fb      	adds	r3, r7, r3
 80082ce:	881b      	ldrh	r3, [r3, #0]
 80082d0:	059b      	lsls	r3, r3, #22
 80082d2:	0d9b      	lsrs	r3, r3, #22
 80082d4:	4a6d      	ldr	r2, [pc, #436]	; (800848c <HAL_I2C_IsDeviceReady+0x22c>)
 80082d6:	431a      	orrs	r2, r3
 80082d8:	e006      	b.n	80082e8 <HAL_I2C_IsDeviceReady+0x88>
 80082da:	230a      	movs	r3, #10
 80082dc:	18fb      	adds	r3, r7, r3
 80082de:	881b      	ldrh	r3, [r3, #0]
 80082e0:	059b      	lsls	r3, r3, #22
 80082e2:	0d9b      	lsrs	r3, r3, #22
 80082e4:	4a6a      	ldr	r2, [pc, #424]	; (8008490 <HAL_I2C_IsDeviceReady+0x230>)
 80082e6:	431a      	orrs	r2, r3
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80082ee:	f7ff f9e7 	bl	80076c0 <HAL_GetTick>
 80082f2:	0003      	movs	r3, r0
 80082f4:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	699b      	ldr	r3, [r3, #24]
 80082fc:	2220      	movs	r2, #32
 80082fe:	4013      	ands	r3, r2
 8008300:	3b20      	subs	r3, #32
 8008302:	425a      	negs	r2, r3
 8008304:	4153      	adcs	r3, r2
 8008306:	b2da      	uxtb	r2, r3
 8008308:	231f      	movs	r3, #31
 800830a:	18fb      	adds	r3, r7, r3
 800830c:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	699b      	ldr	r3, [r3, #24]
 8008314:	2210      	movs	r2, #16
 8008316:	4013      	ands	r3, r2
 8008318:	3b10      	subs	r3, #16
 800831a:	425a      	negs	r2, r3
 800831c:	4153      	adcs	r3, r2
 800831e:	b2da      	uxtb	r2, r3
 8008320:	231e      	movs	r3, #30
 8008322:	18fb      	adds	r3, r7, r3
 8008324:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8008326:	e035      	b.n	8008394 <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	3301      	adds	r3, #1
 800832c:	d01a      	beq.n	8008364 <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800832e:	f7ff f9c7 	bl	80076c0 <HAL_GetTick>
 8008332:	0002      	movs	r2, r0
 8008334:	69bb      	ldr	r3, [r7, #24]
 8008336:	1ad3      	subs	r3, r2, r3
 8008338:	683a      	ldr	r2, [r7, #0]
 800833a:	429a      	cmp	r2, r3
 800833c:	d302      	bcc.n	8008344 <HAL_I2C_IsDeviceReady+0xe4>
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d10f      	bne.n	8008364 <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	2241      	movs	r2, #65	; 0x41
 8008348:	2120      	movs	r1, #32
 800834a:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008350:	2220      	movs	r2, #32
 8008352:	431a      	orrs	r2, r3
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	2240      	movs	r2, #64	; 0x40
 800835c:	2100      	movs	r1, #0
 800835e:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8008360:	2301      	movs	r3, #1
 8008362:	e08f      	b.n	8008484 <HAL_I2C_IsDeviceReady+0x224>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	699b      	ldr	r3, [r3, #24]
 800836a:	2220      	movs	r2, #32
 800836c:	4013      	ands	r3, r2
 800836e:	3b20      	subs	r3, #32
 8008370:	425a      	negs	r2, r3
 8008372:	4153      	adcs	r3, r2
 8008374:	b2da      	uxtb	r2, r3
 8008376:	231f      	movs	r3, #31
 8008378:	18fb      	adds	r3, r7, r3
 800837a:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	699b      	ldr	r3, [r3, #24]
 8008382:	2210      	movs	r2, #16
 8008384:	4013      	ands	r3, r2
 8008386:	3b10      	subs	r3, #16
 8008388:	425a      	negs	r2, r3
 800838a:	4153      	adcs	r3, r2
 800838c:	b2da      	uxtb	r2, r3
 800838e:	231e      	movs	r3, #30
 8008390:	18fb      	adds	r3, r7, r3
 8008392:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8008394:	231f      	movs	r3, #31
 8008396:	18fb      	adds	r3, r7, r3
 8008398:	781b      	ldrb	r3, [r3, #0]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d104      	bne.n	80083a8 <HAL_I2C_IsDeviceReady+0x148>
 800839e:	231e      	movs	r3, #30
 80083a0:	18fb      	adds	r3, r7, r3
 80083a2:	781b      	ldrb	r3, [r3, #0]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d0bf      	beq.n	8008328 <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	699b      	ldr	r3, [r3, #24]
 80083ae:	2210      	movs	r2, #16
 80083b0:	4013      	ands	r3, r2
 80083b2:	2b10      	cmp	r3, #16
 80083b4:	d01a      	beq.n	80083ec <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80083b6:	683a      	ldr	r2, [r7, #0]
 80083b8:	68f8      	ldr	r0, [r7, #12]
 80083ba:	69bb      	ldr	r3, [r7, #24]
 80083bc:	9300      	str	r3, [sp, #0]
 80083be:	0013      	movs	r3, r2
 80083c0:	2200      	movs	r2, #0
 80083c2:	2120      	movs	r1, #32
 80083c4:	f000 f95a 	bl	800867c <I2C_WaitOnFlagUntilTimeout>
 80083c8:	1e03      	subs	r3, r0, #0
 80083ca:	d001      	beq.n	80083d0 <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 80083cc:	2301      	movs	r3, #1
 80083ce:	e059      	b.n	8008484 <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	2220      	movs	r2, #32
 80083d6:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	2241      	movs	r2, #65	; 0x41
 80083dc:	2120      	movs	r1, #32
 80083de:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	2240      	movs	r2, #64	; 0x40
 80083e4:	2100      	movs	r1, #0
 80083e6:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 80083e8:	2300      	movs	r3, #0
 80083ea:	e04b      	b.n	8008484 <HAL_I2C_IsDeviceReady+0x224>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80083ec:	683a      	ldr	r2, [r7, #0]
 80083ee:	68f8      	ldr	r0, [r7, #12]
 80083f0:	69bb      	ldr	r3, [r7, #24]
 80083f2:	9300      	str	r3, [sp, #0]
 80083f4:	0013      	movs	r3, r2
 80083f6:	2200      	movs	r2, #0
 80083f8:	2120      	movs	r1, #32
 80083fa:	f000 f93f 	bl	800867c <I2C_WaitOnFlagUntilTimeout>
 80083fe:	1e03      	subs	r3, r0, #0
 8008400:	d001      	beq.n	8008406 <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 8008402:	2301      	movs	r3, #1
 8008404:	e03e      	b.n	8008484 <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	2210      	movs	r2, #16
 800840c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	2220      	movs	r2, #32
 8008414:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	687a      	ldr	r2, [r7, #4]
 800841a:	429a      	cmp	r2, r3
 800841c:	d119      	bne.n	8008452 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	685a      	ldr	r2, [r3, #4]
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	2180      	movs	r1, #128	; 0x80
 800842a:	01c9      	lsls	r1, r1, #7
 800842c:	430a      	orrs	r2, r1
 800842e:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8008430:	683a      	ldr	r2, [r7, #0]
 8008432:	68f8      	ldr	r0, [r7, #12]
 8008434:	69bb      	ldr	r3, [r7, #24]
 8008436:	9300      	str	r3, [sp, #0]
 8008438:	0013      	movs	r3, r2
 800843a:	2200      	movs	r2, #0
 800843c:	2120      	movs	r1, #32
 800843e:	f000 f91d 	bl	800867c <I2C_WaitOnFlagUntilTimeout>
 8008442:	1e03      	subs	r3, r0, #0
 8008444:	d001      	beq.n	800844a <HAL_I2C_IsDeviceReady+0x1ea>
        {
          return HAL_ERROR;
 8008446:	2301      	movs	r3, #1
 8008448:	e01c      	b.n	8008484 <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	2220      	movs	r2, #32
 8008450:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	3301      	adds	r3, #1
 8008456:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	687a      	ldr	r2, [r7, #4]
 800845c:	429a      	cmp	r2, r3
 800845e:	d900      	bls.n	8008462 <HAL_I2C_IsDeviceReady+0x202>
 8008460:	e72f      	b.n	80082c2 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	2241      	movs	r2, #65	; 0x41
 8008466:	2120      	movs	r1, #32
 8008468:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800846e:	2220      	movs	r2, #32
 8008470:	431a      	orrs	r2, r3
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	2240      	movs	r2, #64	; 0x40
 800847a:	2100      	movs	r1, #0
 800847c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800847e:	2301      	movs	r3, #1
 8008480:	e000      	b.n	8008484 <HAL_I2C_IsDeviceReady+0x224>
  }
  else
  {
    return HAL_BUSY;
 8008482:	2302      	movs	r3, #2
  }
}
 8008484:	0018      	movs	r0, r3
 8008486:	46bd      	mov	sp, r7
 8008488:	b008      	add	sp, #32
 800848a:	bd80      	pop	{r7, pc}
 800848c:	02002000 	.word	0x02002000
 8008490:	02002800 	.word	0x02002800

08008494 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b082      	sub	sp, #8
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2241      	movs	r2, #65	; 0x41
 80084a0:	5c9b      	ldrb	r3, [r3, r2]
 80084a2:	b2db      	uxtb	r3, r3
}
 80084a4:	0018      	movs	r0, r3
 80084a6:	46bd      	mov	sp, r7
 80084a8:	b002      	add	sp, #8
 80084aa:	bd80      	pop	{r7, pc}

080084ac <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80084ac:	b5b0      	push	{r4, r5, r7, lr}
 80084ae:	b086      	sub	sp, #24
 80084b0:	af02      	add	r7, sp, #8
 80084b2:	60f8      	str	r0, [r7, #12]
 80084b4:	000c      	movs	r4, r1
 80084b6:	0010      	movs	r0, r2
 80084b8:	0019      	movs	r1, r3
 80084ba:	250a      	movs	r5, #10
 80084bc:	197b      	adds	r3, r7, r5
 80084be:	1c22      	adds	r2, r4, #0
 80084c0:	801a      	strh	r2, [r3, #0]
 80084c2:	2308      	movs	r3, #8
 80084c4:	18fb      	adds	r3, r7, r3
 80084c6:	1c02      	adds	r2, r0, #0
 80084c8:	801a      	strh	r2, [r3, #0]
 80084ca:	1dbb      	adds	r3, r7, #6
 80084cc:	1c0a      	adds	r2, r1, #0
 80084ce:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80084d0:	1dbb      	adds	r3, r7, #6
 80084d2:	881b      	ldrh	r3, [r3, #0]
 80084d4:	b2da      	uxtb	r2, r3
 80084d6:	2380      	movs	r3, #128	; 0x80
 80084d8:	045c      	lsls	r4, r3, #17
 80084da:	197b      	adds	r3, r7, r5
 80084dc:	8819      	ldrh	r1, [r3, #0]
 80084de:	68f8      	ldr	r0, [r7, #12]
 80084e0:	4b23      	ldr	r3, [pc, #140]	; (8008570 <I2C_RequestMemoryWrite+0xc4>)
 80084e2:	9300      	str	r3, [sp, #0]
 80084e4:	0023      	movs	r3, r4
 80084e6:	f000 faa1 	bl	8008a2c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80084ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084ec:	6a39      	ldr	r1, [r7, #32]
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	0018      	movs	r0, r3
 80084f2:	f000 f911 	bl	8008718 <I2C_WaitOnTXISFlagUntilTimeout>
 80084f6:	1e03      	subs	r3, r0, #0
 80084f8:	d001      	beq.n	80084fe <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 80084fa:	2301      	movs	r3, #1
 80084fc:	e033      	b.n	8008566 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80084fe:	1dbb      	adds	r3, r7, #6
 8008500:	881b      	ldrh	r3, [r3, #0]
 8008502:	2b01      	cmp	r3, #1
 8008504:	d107      	bne.n	8008516 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008506:	2308      	movs	r3, #8
 8008508:	18fb      	adds	r3, r7, r3
 800850a:	881b      	ldrh	r3, [r3, #0]
 800850c:	b2da      	uxtb	r2, r3
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	629a      	str	r2, [r3, #40]	; 0x28
 8008514:	e019      	b.n	800854a <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008516:	2308      	movs	r3, #8
 8008518:	18fb      	adds	r3, r7, r3
 800851a:	881b      	ldrh	r3, [r3, #0]
 800851c:	0a1b      	lsrs	r3, r3, #8
 800851e:	b29b      	uxth	r3, r3
 8008520:	b2da      	uxtb	r2, r3
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008528:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800852a:	6a39      	ldr	r1, [r7, #32]
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	0018      	movs	r0, r3
 8008530:	f000 f8f2 	bl	8008718 <I2C_WaitOnTXISFlagUntilTimeout>
 8008534:	1e03      	subs	r3, r0, #0
 8008536:	d001      	beq.n	800853c <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8008538:	2301      	movs	r3, #1
 800853a:	e014      	b.n	8008566 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800853c:	2308      	movs	r3, #8
 800853e:	18fb      	adds	r3, r7, r3
 8008540:	881b      	ldrh	r3, [r3, #0]
 8008542:	b2da      	uxtb	r2, r3
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800854a:	6a3a      	ldr	r2, [r7, #32]
 800854c:	68f8      	ldr	r0, [r7, #12]
 800854e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008550:	9300      	str	r3, [sp, #0]
 8008552:	0013      	movs	r3, r2
 8008554:	2200      	movs	r2, #0
 8008556:	2180      	movs	r1, #128	; 0x80
 8008558:	f000 f890 	bl	800867c <I2C_WaitOnFlagUntilTimeout>
 800855c:	1e03      	subs	r3, r0, #0
 800855e:	d001      	beq.n	8008564 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8008560:	2301      	movs	r3, #1
 8008562:	e000      	b.n	8008566 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8008564:	2300      	movs	r3, #0
}
 8008566:	0018      	movs	r0, r3
 8008568:	46bd      	mov	sp, r7
 800856a:	b004      	add	sp, #16
 800856c:	bdb0      	pop	{r4, r5, r7, pc}
 800856e:	46c0      	nop			; (mov r8, r8)
 8008570:	80002000 	.word	0x80002000

08008574 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8008574:	b5b0      	push	{r4, r5, r7, lr}
 8008576:	b086      	sub	sp, #24
 8008578:	af02      	add	r7, sp, #8
 800857a:	60f8      	str	r0, [r7, #12]
 800857c:	000c      	movs	r4, r1
 800857e:	0010      	movs	r0, r2
 8008580:	0019      	movs	r1, r3
 8008582:	250a      	movs	r5, #10
 8008584:	197b      	adds	r3, r7, r5
 8008586:	1c22      	adds	r2, r4, #0
 8008588:	801a      	strh	r2, [r3, #0]
 800858a:	2308      	movs	r3, #8
 800858c:	18fb      	adds	r3, r7, r3
 800858e:	1c02      	adds	r2, r0, #0
 8008590:	801a      	strh	r2, [r3, #0]
 8008592:	1dbb      	adds	r3, r7, #6
 8008594:	1c0a      	adds	r2, r1, #0
 8008596:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008598:	1dbb      	adds	r3, r7, #6
 800859a:	881b      	ldrh	r3, [r3, #0]
 800859c:	b2da      	uxtb	r2, r3
 800859e:	197b      	adds	r3, r7, r5
 80085a0:	8819      	ldrh	r1, [r3, #0]
 80085a2:	68f8      	ldr	r0, [r7, #12]
 80085a4:	4b23      	ldr	r3, [pc, #140]	; (8008634 <I2C_RequestMemoryRead+0xc0>)
 80085a6:	9300      	str	r3, [sp, #0]
 80085a8:	2300      	movs	r3, #0
 80085aa:	f000 fa3f 	bl	8008a2c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80085ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085b0:	6a39      	ldr	r1, [r7, #32]
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	0018      	movs	r0, r3
 80085b6:	f000 f8af 	bl	8008718 <I2C_WaitOnTXISFlagUntilTimeout>
 80085ba:	1e03      	subs	r3, r0, #0
 80085bc:	d001      	beq.n	80085c2 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 80085be:	2301      	movs	r3, #1
 80085c0:	e033      	b.n	800862a <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80085c2:	1dbb      	adds	r3, r7, #6
 80085c4:	881b      	ldrh	r3, [r3, #0]
 80085c6:	2b01      	cmp	r3, #1
 80085c8:	d107      	bne.n	80085da <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80085ca:	2308      	movs	r3, #8
 80085cc:	18fb      	adds	r3, r7, r3
 80085ce:	881b      	ldrh	r3, [r3, #0]
 80085d0:	b2da      	uxtb	r2, r3
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	629a      	str	r2, [r3, #40]	; 0x28
 80085d8:	e019      	b.n	800860e <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80085da:	2308      	movs	r3, #8
 80085dc:	18fb      	adds	r3, r7, r3
 80085de:	881b      	ldrh	r3, [r3, #0]
 80085e0:	0a1b      	lsrs	r3, r3, #8
 80085e2:	b29b      	uxth	r3, r3
 80085e4:	b2da      	uxtb	r2, r3
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80085ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085ee:	6a39      	ldr	r1, [r7, #32]
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	0018      	movs	r0, r3
 80085f4:	f000 f890 	bl	8008718 <I2C_WaitOnTXISFlagUntilTimeout>
 80085f8:	1e03      	subs	r3, r0, #0
 80085fa:	d001      	beq.n	8008600 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 80085fc:	2301      	movs	r3, #1
 80085fe:	e014      	b.n	800862a <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008600:	2308      	movs	r3, #8
 8008602:	18fb      	adds	r3, r7, r3
 8008604:	881b      	ldrh	r3, [r3, #0]
 8008606:	b2da      	uxtb	r2, r3
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800860e:	6a3a      	ldr	r2, [r7, #32]
 8008610:	68f8      	ldr	r0, [r7, #12]
 8008612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008614:	9300      	str	r3, [sp, #0]
 8008616:	0013      	movs	r3, r2
 8008618:	2200      	movs	r2, #0
 800861a:	2140      	movs	r1, #64	; 0x40
 800861c:	f000 f82e 	bl	800867c <I2C_WaitOnFlagUntilTimeout>
 8008620:	1e03      	subs	r3, r0, #0
 8008622:	d001      	beq.n	8008628 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8008624:	2301      	movs	r3, #1
 8008626:	e000      	b.n	800862a <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8008628:	2300      	movs	r3, #0
}
 800862a:	0018      	movs	r0, r3
 800862c:	46bd      	mov	sp, r7
 800862e:	b004      	add	sp, #16
 8008630:	bdb0      	pop	{r4, r5, r7, pc}
 8008632:	46c0      	nop			; (mov r8, r8)
 8008634:	80002000 	.word	0x80002000

08008638 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b082      	sub	sp, #8
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	699b      	ldr	r3, [r3, #24]
 8008646:	2202      	movs	r2, #2
 8008648:	4013      	ands	r3, r2
 800864a:	2b02      	cmp	r3, #2
 800864c:	d103      	bne.n	8008656 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	2200      	movs	r2, #0
 8008654:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	699b      	ldr	r3, [r3, #24]
 800865c:	2201      	movs	r2, #1
 800865e:	4013      	ands	r3, r2
 8008660:	2b01      	cmp	r3, #1
 8008662:	d007      	beq.n	8008674 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	699a      	ldr	r2, [r3, #24]
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	2101      	movs	r1, #1
 8008670:	430a      	orrs	r2, r1
 8008672:	619a      	str	r2, [r3, #24]
  }
}
 8008674:	46c0      	nop			; (mov r8, r8)
 8008676:	46bd      	mov	sp, r7
 8008678:	b002      	add	sp, #8
 800867a:	bd80      	pop	{r7, pc}

0800867c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b084      	sub	sp, #16
 8008680:	af00      	add	r7, sp, #0
 8008682:	60f8      	str	r0, [r7, #12]
 8008684:	60b9      	str	r1, [r7, #8]
 8008686:	603b      	str	r3, [r7, #0]
 8008688:	1dfb      	adds	r3, r7, #7
 800868a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800868c:	e030      	b.n	80086f0 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	3301      	adds	r3, #1
 8008692:	d02d      	beq.n	80086f0 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008694:	f7ff f814 	bl	80076c0 <HAL_GetTick>
 8008698:	0002      	movs	r2, r0
 800869a:	69bb      	ldr	r3, [r7, #24]
 800869c:	1ad3      	subs	r3, r2, r3
 800869e:	683a      	ldr	r2, [r7, #0]
 80086a0:	429a      	cmp	r2, r3
 80086a2:	d302      	bcc.n	80086aa <I2C_WaitOnFlagUntilTimeout+0x2e>
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d122      	bne.n	80086f0 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	699b      	ldr	r3, [r3, #24]
 80086b0:	68ba      	ldr	r2, [r7, #8]
 80086b2:	4013      	ands	r3, r2
 80086b4:	68ba      	ldr	r2, [r7, #8]
 80086b6:	1ad3      	subs	r3, r2, r3
 80086b8:	425a      	negs	r2, r3
 80086ba:	4153      	adcs	r3, r2
 80086bc:	b2db      	uxtb	r3, r3
 80086be:	001a      	movs	r2, r3
 80086c0:	1dfb      	adds	r3, r7, #7
 80086c2:	781b      	ldrb	r3, [r3, #0]
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d113      	bne.n	80086f0 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086cc:	2220      	movs	r2, #32
 80086ce:	431a      	orrs	r2, r3
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	2241      	movs	r2, #65	; 0x41
 80086d8:	2120      	movs	r1, #32
 80086da:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	2242      	movs	r2, #66	; 0x42
 80086e0:	2100      	movs	r1, #0
 80086e2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	2240      	movs	r2, #64	; 0x40
 80086e8:	2100      	movs	r1, #0
 80086ea:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80086ec:	2301      	movs	r3, #1
 80086ee:	e00f      	b.n	8008710 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	699b      	ldr	r3, [r3, #24]
 80086f6:	68ba      	ldr	r2, [r7, #8]
 80086f8:	4013      	ands	r3, r2
 80086fa:	68ba      	ldr	r2, [r7, #8]
 80086fc:	1ad3      	subs	r3, r2, r3
 80086fe:	425a      	negs	r2, r3
 8008700:	4153      	adcs	r3, r2
 8008702:	b2db      	uxtb	r3, r3
 8008704:	001a      	movs	r2, r3
 8008706:	1dfb      	adds	r3, r7, #7
 8008708:	781b      	ldrb	r3, [r3, #0]
 800870a:	429a      	cmp	r2, r3
 800870c:	d0bf      	beq.n	800868e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800870e:	2300      	movs	r3, #0
}
 8008710:	0018      	movs	r0, r3
 8008712:	46bd      	mov	sp, r7
 8008714:	b004      	add	sp, #16
 8008716:	bd80      	pop	{r7, pc}

08008718 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b084      	sub	sp, #16
 800871c:	af00      	add	r7, sp, #0
 800871e:	60f8      	str	r0, [r7, #12]
 8008720:	60b9      	str	r1, [r7, #8]
 8008722:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008724:	e032      	b.n	800878c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008726:	687a      	ldr	r2, [r7, #4]
 8008728:	68b9      	ldr	r1, [r7, #8]
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	0018      	movs	r0, r3
 800872e:	f000 f87d 	bl	800882c <I2C_IsErrorOccurred>
 8008732:	1e03      	subs	r3, r0, #0
 8008734:	d001      	beq.n	800873a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008736:	2301      	movs	r3, #1
 8008738:	e030      	b.n	800879c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	3301      	adds	r3, #1
 800873e:	d025      	beq.n	800878c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008740:	f7fe ffbe 	bl	80076c0 <HAL_GetTick>
 8008744:	0002      	movs	r2, r0
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	1ad3      	subs	r3, r2, r3
 800874a:	68ba      	ldr	r2, [r7, #8]
 800874c:	429a      	cmp	r2, r3
 800874e:	d302      	bcc.n	8008756 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d11a      	bne.n	800878c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	699b      	ldr	r3, [r3, #24]
 800875c:	2202      	movs	r2, #2
 800875e:	4013      	ands	r3, r2
 8008760:	2b02      	cmp	r3, #2
 8008762:	d013      	beq.n	800878c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008768:	2220      	movs	r2, #32
 800876a:	431a      	orrs	r2, r3
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	2241      	movs	r2, #65	; 0x41
 8008774:	2120      	movs	r1, #32
 8008776:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	2242      	movs	r2, #66	; 0x42
 800877c:	2100      	movs	r1, #0
 800877e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	2240      	movs	r2, #64	; 0x40
 8008784:	2100      	movs	r1, #0
 8008786:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8008788:	2301      	movs	r3, #1
 800878a:	e007      	b.n	800879c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	699b      	ldr	r3, [r3, #24]
 8008792:	2202      	movs	r2, #2
 8008794:	4013      	ands	r3, r2
 8008796:	2b02      	cmp	r3, #2
 8008798:	d1c5      	bne.n	8008726 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800879a:	2300      	movs	r3, #0
}
 800879c:	0018      	movs	r0, r3
 800879e:	46bd      	mov	sp, r7
 80087a0:	b004      	add	sp, #16
 80087a2:	bd80      	pop	{r7, pc}

080087a4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b084      	sub	sp, #16
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	60f8      	str	r0, [r7, #12]
 80087ac:	60b9      	str	r1, [r7, #8]
 80087ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80087b0:	e02f      	b.n	8008812 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80087b2:	687a      	ldr	r2, [r7, #4]
 80087b4:	68b9      	ldr	r1, [r7, #8]
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	0018      	movs	r0, r3
 80087ba:	f000 f837 	bl	800882c <I2C_IsErrorOccurred>
 80087be:	1e03      	subs	r3, r0, #0
 80087c0:	d001      	beq.n	80087c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80087c2:	2301      	movs	r3, #1
 80087c4:	e02d      	b.n	8008822 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087c6:	f7fe ff7b 	bl	80076c0 <HAL_GetTick>
 80087ca:	0002      	movs	r2, r0
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	1ad3      	subs	r3, r2, r3
 80087d0:	68ba      	ldr	r2, [r7, #8]
 80087d2:	429a      	cmp	r2, r3
 80087d4:	d302      	bcc.n	80087dc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d11a      	bne.n	8008812 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	699b      	ldr	r3, [r3, #24]
 80087e2:	2220      	movs	r2, #32
 80087e4:	4013      	ands	r3, r2
 80087e6:	2b20      	cmp	r3, #32
 80087e8:	d013      	beq.n	8008812 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087ee:	2220      	movs	r2, #32
 80087f0:	431a      	orrs	r2, r3
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	2241      	movs	r2, #65	; 0x41
 80087fa:	2120      	movs	r1, #32
 80087fc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	2242      	movs	r2, #66	; 0x42
 8008802:	2100      	movs	r1, #0
 8008804:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	2240      	movs	r2, #64	; 0x40
 800880a:	2100      	movs	r1, #0
 800880c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800880e:	2301      	movs	r3, #1
 8008810:	e007      	b.n	8008822 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	699b      	ldr	r3, [r3, #24]
 8008818:	2220      	movs	r2, #32
 800881a:	4013      	ands	r3, r2
 800881c:	2b20      	cmp	r3, #32
 800881e:	d1c8      	bne.n	80087b2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008820:	2300      	movs	r3, #0
}
 8008822:	0018      	movs	r0, r3
 8008824:	46bd      	mov	sp, r7
 8008826:	b004      	add	sp, #16
 8008828:	bd80      	pop	{r7, pc}
	...

0800882c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800882c:	b590      	push	{r4, r7, lr}
 800882e:	b08b      	sub	sp, #44	; 0x2c
 8008830:	af00      	add	r7, sp, #0
 8008832:	60f8      	str	r0, [r7, #12]
 8008834:	60b9      	str	r1, [r7, #8]
 8008836:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008838:	2327      	movs	r3, #39	; 0x27
 800883a:	18fb      	adds	r3, r7, r3
 800883c:	2200      	movs	r2, #0
 800883e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	699b      	ldr	r3, [r3, #24]
 8008846:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008848:	2300      	movs	r3, #0
 800884a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008850:	69bb      	ldr	r3, [r7, #24]
 8008852:	2210      	movs	r2, #16
 8008854:	4013      	ands	r3, r2
 8008856:	d100      	bne.n	800885a <I2C_IsErrorOccurred+0x2e>
 8008858:	e082      	b.n	8008960 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	2210      	movs	r2, #16
 8008860:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008862:	e060      	b.n	8008926 <I2C_IsErrorOccurred+0xfa>
 8008864:	2427      	movs	r4, #39	; 0x27
 8008866:	193b      	adds	r3, r7, r4
 8008868:	193a      	adds	r2, r7, r4
 800886a:	7812      	ldrb	r2, [r2, #0]
 800886c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	3301      	adds	r3, #1
 8008872:	d058      	beq.n	8008926 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008874:	f7fe ff24 	bl	80076c0 <HAL_GetTick>
 8008878:	0002      	movs	r2, r0
 800887a:	69fb      	ldr	r3, [r7, #28]
 800887c:	1ad3      	subs	r3, r2, r3
 800887e:	68ba      	ldr	r2, [r7, #8]
 8008880:	429a      	cmp	r2, r3
 8008882:	d306      	bcc.n	8008892 <I2C_IsErrorOccurred+0x66>
 8008884:	193b      	adds	r3, r7, r4
 8008886:	193a      	adds	r2, r7, r4
 8008888:	7812      	ldrb	r2, [r2, #0]
 800888a:	701a      	strb	r2, [r3, #0]
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d149      	bne.n	8008926 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	685a      	ldr	r2, [r3, #4]
 8008898:	2380      	movs	r3, #128	; 0x80
 800889a:	01db      	lsls	r3, r3, #7
 800889c:	4013      	ands	r3, r2
 800889e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80088a0:	2013      	movs	r0, #19
 80088a2:	183b      	adds	r3, r7, r0
 80088a4:	68fa      	ldr	r2, [r7, #12]
 80088a6:	2142      	movs	r1, #66	; 0x42
 80088a8:	5c52      	ldrb	r2, [r2, r1]
 80088aa:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	699a      	ldr	r2, [r3, #24]
 80088b2:	2380      	movs	r3, #128	; 0x80
 80088b4:	021b      	lsls	r3, r3, #8
 80088b6:	401a      	ands	r2, r3
 80088b8:	2380      	movs	r3, #128	; 0x80
 80088ba:	021b      	lsls	r3, r3, #8
 80088bc:	429a      	cmp	r2, r3
 80088be:	d126      	bne.n	800890e <I2C_IsErrorOccurred+0xe2>
 80088c0:	697a      	ldr	r2, [r7, #20]
 80088c2:	2380      	movs	r3, #128	; 0x80
 80088c4:	01db      	lsls	r3, r3, #7
 80088c6:	429a      	cmp	r2, r3
 80088c8:	d021      	beq.n	800890e <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 80088ca:	183b      	adds	r3, r7, r0
 80088cc:	781b      	ldrb	r3, [r3, #0]
 80088ce:	2b20      	cmp	r3, #32
 80088d0:	d01d      	beq.n	800890e <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	685a      	ldr	r2, [r3, #4]
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	2180      	movs	r1, #128	; 0x80
 80088de:	01c9      	lsls	r1, r1, #7
 80088e0:	430a      	orrs	r2, r1
 80088e2:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80088e4:	f7fe feec 	bl	80076c0 <HAL_GetTick>
 80088e8:	0003      	movs	r3, r0
 80088ea:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80088ec:	e00f      	b.n	800890e <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80088ee:	f7fe fee7 	bl	80076c0 <HAL_GetTick>
 80088f2:	0002      	movs	r2, r0
 80088f4:	69fb      	ldr	r3, [r7, #28]
 80088f6:	1ad3      	subs	r3, r2, r3
 80088f8:	2b19      	cmp	r3, #25
 80088fa:	d908      	bls.n	800890e <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80088fc:	6a3b      	ldr	r3, [r7, #32]
 80088fe:	2220      	movs	r2, #32
 8008900:	4313      	orrs	r3, r2
 8008902:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008904:	2327      	movs	r3, #39	; 0x27
 8008906:	18fb      	adds	r3, r7, r3
 8008908:	2201      	movs	r2, #1
 800890a:	701a      	strb	r2, [r3, #0]

              break;
 800890c:	e00b      	b.n	8008926 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	699b      	ldr	r3, [r3, #24]
 8008914:	2220      	movs	r2, #32
 8008916:	4013      	ands	r3, r2
 8008918:	2127      	movs	r1, #39	; 0x27
 800891a:	187a      	adds	r2, r7, r1
 800891c:	1879      	adds	r1, r7, r1
 800891e:	7809      	ldrb	r1, [r1, #0]
 8008920:	7011      	strb	r1, [r2, #0]
 8008922:	2b20      	cmp	r3, #32
 8008924:	d1e3      	bne.n	80088ee <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	699b      	ldr	r3, [r3, #24]
 800892c:	2220      	movs	r2, #32
 800892e:	4013      	ands	r3, r2
 8008930:	2b20      	cmp	r3, #32
 8008932:	d004      	beq.n	800893e <I2C_IsErrorOccurred+0x112>
 8008934:	2327      	movs	r3, #39	; 0x27
 8008936:	18fb      	adds	r3, r7, r3
 8008938:	781b      	ldrb	r3, [r3, #0]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d092      	beq.n	8008864 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800893e:	2327      	movs	r3, #39	; 0x27
 8008940:	18fb      	adds	r3, r7, r3
 8008942:	781b      	ldrb	r3, [r3, #0]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d103      	bne.n	8008950 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	2220      	movs	r2, #32
 800894e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008950:	6a3b      	ldr	r3, [r7, #32]
 8008952:	2204      	movs	r2, #4
 8008954:	4313      	orrs	r3, r2
 8008956:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008958:	2327      	movs	r3, #39	; 0x27
 800895a:	18fb      	adds	r3, r7, r3
 800895c:	2201      	movs	r2, #1
 800895e:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	699b      	ldr	r3, [r3, #24]
 8008966:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008968:	69ba      	ldr	r2, [r7, #24]
 800896a:	2380      	movs	r3, #128	; 0x80
 800896c:	005b      	lsls	r3, r3, #1
 800896e:	4013      	ands	r3, r2
 8008970:	d00c      	beq.n	800898c <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008972:	6a3b      	ldr	r3, [r7, #32]
 8008974:	2201      	movs	r2, #1
 8008976:	4313      	orrs	r3, r2
 8008978:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	2280      	movs	r2, #128	; 0x80
 8008980:	0052      	lsls	r2, r2, #1
 8008982:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008984:	2327      	movs	r3, #39	; 0x27
 8008986:	18fb      	adds	r3, r7, r3
 8008988:	2201      	movs	r2, #1
 800898a:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800898c:	69ba      	ldr	r2, [r7, #24]
 800898e:	2380      	movs	r3, #128	; 0x80
 8008990:	00db      	lsls	r3, r3, #3
 8008992:	4013      	ands	r3, r2
 8008994:	d00c      	beq.n	80089b0 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008996:	6a3b      	ldr	r3, [r7, #32]
 8008998:	2208      	movs	r2, #8
 800899a:	4313      	orrs	r3, r2
 800899c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	2280      	movs	r2, #128	; 0x80
 80089a4:	00d2      	lsls	r2, r2, #3
 80089a6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80089a8:	2327      	movs	r3, #39	; 0x27
 80089aa:	18fb      	adds	r3, r7, r3
 80089ac:	2201      	movs	r2, #1
 80089ae:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80089b0:	69ba      	ldr	r2, [r7, #24]
 80089b2:	2380      	movs	r3, #128	; 0x80
 80089b4:	009b      	lsls	r3, r3, #2
 80089b6:	4013      	ands	r3, r2
 80089b8:	d00c      	beq.n	80089d4 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80089ba:	6a3b      	ldr	r3, [r7, #32]
 80089bc:	2202      	movs	r2, #2
 80089be:	4313      	orrs	r3, r2
 80089c0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	2280      	movs	r2, #128	; 0x80
 80089c8:	0092      	lsls	r2, r2, #2
 80089ca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80089cc:	2327      	movs	r3, #39	; 0x27
 80089ce:	18fb      	adds	r3, r7, r3
 80089d0:	2201      	movs	r2, #1
 80089d2:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80089d4:	2327      	movs	r3, #39	; 0x27
 80089d6:	18fb      	adds	r3, r7, r3
 80089d8:	781b      	ldrb	r3, [r3, #0]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d01d      	beq.n	8008a1a <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	0018      	movs	r0, r3
 80089e2:	f7ff fe29 	bl	8008638 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	685a      	ldr	r2, [r3, #4]
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	490d      	ldr	r1, [pc, #52]	; (8008a28 <I2C_IsErrorOccurred+0x1fc>)
 80089f2:	400a      	ands	r2, r1
 80089f4:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80089fa:	6a3b      	ldr	r3, [r7, #32]
 80089fc:	431a      	orrs	r2, r3
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	2241      	movs	r2, #65	; 0x41
 8008a06:	2120      	movs	r1, #32
 8008a08:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	2242      	movs	r2, #66	; 0x42
 8008a0e:	2100      	movs	r1, #0
 8008a10:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	2240      	movs	r2, #64	; 0x40
 8008a16:	2100      	movs	r1, #0
 8008a18:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8008a1a:	2327      	movs	r3, #39	; 0x27
 8008a1c:	18fb      	adds	r3, r7, r3
 8008a1e:	781b      	ldrb	r3, [r3, #0]
}
 8008a20:	0018      	movs	r0, r3
 8008a22:	46bd      	mov	sp, r7
 8008a24:	b00b      	add	sp, #44	; 0x2c
 8008a26:	bd90      	pop	{r4, r7, pc}
 8008a28:	fe00e800 	.word	0xfe00e800

08008a2c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008a2c:	b590      	push	{r4, r7, lr}
 8008a2e:	b087      	sub	sp, #28
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	60f8      	str	r0, [r7, #12]
 8008a34:	0008      	movs	r0, r1
 8008a36:	0011      	movs	r1, r2
 8008a38:	607b      	str	r3, [r7, #4]
 8008a3a:	240a      	movs	r4, #10
 8008a3c:	193b      	adds	r3, r7, r4
 8008a3e:	1c02      	adds	r2, r0, #0
 8008a40:	801a      	strh	r2, [r3, #0]
 8008a42:	2009      	movs	r0, #9
 8008a44:	183b      	adds	r3, r7, r0
 8008a46:	1c0a      	adds	r2, r1, #0
 8008a48:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008a4a:	193b      	adds	r3, r7, r4
 8008a4c:	881b      	ldrh	r3, [r3, #0]
 8008a4e:	059b      	lsls	r3, r3, #22
 8008a50:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008a52:	183b      	adds	r3, r7, r0
 8008a54:	781b      	ldrb	r3, [r3, #0]
 8008a56:	0419      	lsls	r1, r3, #16
 8008a58:	23ff      	movs	r3, #255	; 0xff
 8008a5a:	041b      	lsls	r3, r3, #16
 8008a5c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008a5e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a66:	4313      	orrs	r3, r2
 8008a68:	005b      	lsls	r3, r3, #1
 8008a6a:	085b      	lsrs	r3, r3, #1
 8008a6c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	685b      	ldr	r3, [r3, #4]
 8008a74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a76:	0d51      	lsrs	r1, r2, #21
 8008a78:	2280      	movs	r2, #128	; 0x80
 8008a7a:	00d2      	lsls	r2, r2, #3
 8008a7c:	400a      	ands	r2, r1
 8008a7e:	4907      	ldr	r1, [pc, #28]	; (8008a9c <I2C_TransferConfig+0x70>)
 8008a80:	430a      	orrs	r2, r1
 8008a82:	43d2      	mvns	r2, r2
 8008a84:	401a      	ands	r2, r3
 8008a86:	0011      	movs	r1, r2
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	697a      	ldr	r2, [r7, #20]
 8008a8e:	430a      	orrs	r2, r1
 8008a90:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008a92:	46c0      	nop			; (mov r8, r8)
 8008a94:	46bd      	mov	sp, r7
 8008a96:	b007      	add	sp, #28
 8008a98:	bd90      	pop	{r4, r7, pc}
 8008a9a:	46c0      	nop			; (mov r8, r8)
 8008a9c:	03ff63ff 	.word	0x03ff63ff

08008aa0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b082      	sub	sp, #8
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
 8008aa8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2241      	movs	r2, #65	; 0x41
 8008aae:	5c9b      	ldrb	r3, [r3, r2]
 8008ab0:	b2db      	uxtb	r3, r3
 8008ab2:	2b20      	cmp	r3, #32
 8008ab4:	d138      	bne.n	8008b28 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2240      	movs	r2, #64	; 0x40
 8008aba:	5c9b      	ldrb	r3, [r3, r2]
 8008abc:	2b01      	cmp	r3, #1
 8008abe:	d101      	bne.n	8008ac4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008ac0:	2302      	movs	r3, #2
 8008ac2:	e032      	b.n	8008b2a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2240      	movs	r2, #64	; 0x40
 8008ac8:	2101      	movs	r1, #1
 8008aca:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2241      	movs	r2, #65	; 0x41
 8008ad0:	2124      	movs	r1, #36	; 0x24
 8008ad2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	681a      	ldr	r2, [r3, #0]
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	2101      	movs	r1, #1
 8008ae0:	438a      	bics	r2, r1
 8008ae2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	681a      	ldr	r2, [r3, #0]
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	4911      	ldr	r1, [pc, #68]	; (8008b34 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8008af0:	400a      	ands	r2, r1
 8008af2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	6819      	ldr	r1, [r3, #0]
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	683a      	ldr	r2, [r7, #0]
 8008b00:	430a      	orrs	r2, r1
 8008b02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	681a      	ldr	r2, [r3, #0]
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	2101      	movs	r1, #1
 8008b10:	430a      	orrs	r2, r1
 8008b12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2241      	movs	r2, #65	; 0x41
 8008b18:	2120      	movs	r1, #32
 8008b1a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2240      	movs	r2, #64	; 0x40
 8008b20:	2100      	movs	r1, #0
 8008b22:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8008b24:	2300      	movs	r3, #0
 8008b26:	e000      	b.n	8008b2a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008b28:	2302      	movs	r3, #2
  }
}
 8008b2a:	0018      	movs	r0, r3
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	b002      	add	sp, #8
 8008b30:	bd80      	pop	{r7, pc}
 8008b32:	46c0      	nop			; (mov r8, r8)
 8008b34:	ffffefff 	.word	0xffffefff

08008b38 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b084      	sub	sp, #16
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2241      	movs	r2, #65	; 0x41
 8008b46:	5c9b      	ldrb	r3, [r3, r2]
 8008b48:	b2db      	uxtb	r3, r3
 8008b4a:	2b20      	cmp	r3, #32
 8008b4c:	d139      	bne.n	8008bc2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2240      	movs	r2, #64	; 0x40
 8008b52:	5c9b      	ldrb	r3, [r3, r2]
 8008b54:	2b01      	cmp	r3, #1
 8008b56:	d101      	bne.n	8008b5c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008b58:	2302      	movs	r3, #2
 8008b5a:	e033      	b.n	8008bc4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2240      	movs	r2, #64	; 0x40
 8008b60:	2101      	movs	r1, #1
 8008b62:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2241      	movs	r2, #65	; 0x41
 8008b68:	2124      	movs	r1, #36	; 0x24
 8008b6a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	681a      	ldr	r2, [r3, #0]
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	2101      	movs	r1, #1
 8008b78:	438a      	bics	r2, r1
 8008b7a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	4a11      	ldr	r2, [pc, #68]	; (8008bcc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8008b88:	4013      	ands	r3, r2
 8008b8a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	021b      	lsls	r3, r3, #8
 8008b90:	68fa      	ldr	r2, [r7, #12]
 8008b92:	4313      	orrs	r3, r2
 8008b94:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	68fa      	ldr	r2, [r7, #12]
 8008b9c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	681a      	ldr	r2, [r3, #0]
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	2101      	movs	r1, #1
 8008baa:	430a      	orrs	r2, r1
 8008bac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2241      	movs	r2, #65	; 0x41
 8008bb2:	2120      	movs	r1, #32
 8008bb4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2240      	movs	r2, #64	; 0x40
 8008bba:	2100      	movs	r1, #0
 8008bbc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	e000      	b.n	8008bc4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008bc2:	2302      	movs	r3, #2
  }
}
 8008bc4:	0018      	movs	r0, r3
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	b004      	add	sp, #16
 8008bca:	bd80      	pop	{r7, pc}
 8008bcc:	fffff0ff 	.word	0xfffff0ff

08008bd0 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b084      	sub	sp, #16
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d101      	bne.n	8008be2 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8008bde:	2301      	movs	r3, #1
 8008be0:	e03d      	b.n	8008c5e <HAL_IWDG_Init+0x8e>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	4a20      	ldr	r2, [pc, #128]	; (8008c68 <HAL_IWDG_Init+0x98>)
 8008be8:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	4a1f      	ldr	r2, [pc, #124]	; (8008c6c <HAL_IWDG_Init+0x9c>)
 8008bf0:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	687a      	ldr	r2, [r7, #4]
 8008bf8:	6852      	ldr	r2, [r2, #4]
 8008bfa:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	687a      	ldr	r2, [r7, #4]
 8008c02:	6892      	ldr	r2, [r2, #8]
 8008c04:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8008c06:	f7fe fd5b 	bl	80076c0 <HAL_GetTick>
 8008c0a:	0003      	movs	r3, r0
 8008c0c:	60fb      	str	r3, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8008c0e:	e00e      	b.n	8008c2e <HAL_IWDG_Init+0x5e>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8008c10:	f7fe fd56 	bl	80076c0 <HAL_GetTick>
 8008c14:	0002      	movs	r2, r0
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	1ad3      	subs	r3, r2, r3
 8008c1a:	2b27      	cmp	r3, #39	; 0x27
 8008c1c:	d907      	bls.n	8008c2e <HAL_IWDG_Init+0x5e>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	68db      	ldr	r3, [r3, #12]
 8008c24:	2207      	movs	r2, #7
 8008c26:	4013      	ands	r3, r2
 8008c28:	d001      	beq.n	8008c2e <HAL_IWDG_Init+0x5e>
      {
        return HAL_TIMEOUT;
 8008c2a:	2303      	movs	r3, #3
 8008c2c:	e017      	b.n	8008c5e <HAL_IWDG_Init+0x8e>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	68db      	ldr	r3, [r3, #12]
 8008c34:	2207      	movs	r2, #7
 8008c36:	4013      	ands	r3, r2
 8008c38:	d1ea      	bne.n	8008c10 <HAL_IWDG_Init+0x40>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	691a      	ldr	r2, [r3, #16]
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	68db      	ldr	r3, [r3, #12]
 8008c44:	429a      	cmp	r2, r3
 8008c46:	d005      	beq.n	8008c54 <HAL_IWDG_Init+0x84>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	687a      	ldr	r2, [r7, #4]
 8008c4e:	68d2      	ldr	r2, [r2, #12]
 8008c50:	611a      	str	r2, [r3, #16]
 8008c52:	e003      	b.n	8008c5c <HAL_IWDG_Init+0x8c>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	4a05      	ldr	r2, [pc, #20]	; (8008c70 <HAL_IWDG_Init+0xa0>)
 8008c5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008c5c:	2300      	movs	r3, #0
}
 8008c5e:	0018      	movs	r0, r3
 8008c60:	46bd      	mov	sp, r7
 8008c62:	b004      	add	sp, #16
 8008c64:	bd80      	pop	{r7, pc}
 8008c66:	46c0      	nop			; (mov r8, r8)
 8008c68:	0000cccc 	.word	0x0000cccc
 8008c6c:	00005555 	.word	0x00005555
 8008c70:	0000aaaa 	.word	0x0000aaaa

08008c74 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b082      	sub	sp, #8
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	4a03      	ldr	r2, [pc, #12]	; (8008c90 <HAL_IWDG_Refresh+0x1c>)
 8008c82:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008c84:	2300      	movs	r3, #0
}
 8008c86:	0018      	movs	r0, r3
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	b002      	add	sp, #8
 8008c8c:	bd80      	pop	{r7, pc}
 8008c8e:	46c0      	nop			; (mov r8, r8)
 8008c90:	0000aaaa 	.word	0x0000aaaa

08008c94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b088      	sub	sp, #32
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d102      	bne.n	8008ca8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	f000 fb76 	bl	8009394 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	2201      	movs	r2, #1
 8008cae:	4013      	ands	r3, r2
 8008cb0:	d100      	bne.n	8008cb4 <HAL_RCC_OscConfig+0x20>
 8008cb2:	e08e      	b.n	8008dd2 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8008cb4:	4bc5      	ldr	r3, [pc, #788]	; (8008fcc <HAL_RCC_OscConfig+0x338>)
 8008cb6:	685b      	ldr	r3, [r3, #4]
 8008cb8:	220c      	movs	r2, #12
 8008cba:	4013      	ands	r3, r2
 8008cbc:	2b04      	cmp	r3, #4
 8008cbe:	d00e      	beq.n	8008cde <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008cc0:	4bc2      	ldr	r3, [pc, #776]	; (8008fcc <HAL_RCC_OscConfig+0x338>)
 8008cc2:	685b      	ldr	r3, [r3, #4]
 8008cc4:	220c      	movs	r2, #12
 8008cc6:	4013      	ands	r3, r2
 8008cc8:	2b08      	cmp	r3, #8
 8008cca:	d117      	bne.n	8008cfc <HAL_RCC_OscConfig+0x68>
 8008ccc:	4bbf      	ldr	r3, [pc, #764]	; (8008fcc <HAL_RCC_OscConfig+0x338>)
 8008cce:	685a      	ldr	r2, [r3, #4]
 8008cd0:	23c0      	movs	r3, #192	; 0xc0
 8008cd2:	025b      	lsls	r3, r3, #9
 8008cd4:	401a      	ands	r2, r3
 8008cd6:	2380      	movs	r3, #128	; 0x80
 8008cd8:	025b      	lsls	r3, r3, #9
 8008cda:	429a      	cmp	r2, r3
 8008cdc:	d10e      	bne.n	8008cfc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008cde:	4bbb      	ldr	r3, [pc, #748]	; (8008fcc <HAL_RCC_OscConfig+0x338>)
 8008ce0:	681a      	ldr	r2, [r3, #0]
 8008ce2:	2380      	movs	r3, #128	; 0x80
 8008ce4:	029b      	lsls	r3, r3, #10
 8008ce6:	4013      	ands	r3, r2
 8008ce8:	d100      	bne.n	8008cec <HAL_RCC_OscConfig+0x58>
 8008cea:	e071      	b.n	8008dd0 <HAL_RCC_OscConfig+0x13c>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	685b      	ldr	r3, [r3, #4]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d000      	beq.n	8008cf6 <HAL_RCC_OscConfig+0x62>
 8008cf4:	e06c      	b.n	8008dd0 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	f000 fb4c 	bl	8009394 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	685b      	ldr	r3, [r3, #4]
 8008d00:	2b01      	cmp	r3, #1
 8008d02:	d107      	bne.n	8008d14 <HAL_RCC_OscConfig+0x80>
 8008d04:	4bb1      	ldr	r3, [pc, #708]	; (8008fcc <HAL_RCC_OscConfig+0x338>)
 8008d06:	681a      	ldr	r2, [r3, #0]
 8008d08:	4bb0      	ldr	r3, [pc, #704]	; (8008fcc <HAL_RCC_OscConfig+0x338>)
 8008d0a:	2180      	movs	r1, #128	; 0x80
 8008d0c:	0249      	lsls	r1, r1, #9
 8008d0e:	430a      	orrs	r2, r1
 8008d10:	601a      	str	r2, [r3, #0]
 8008d12:	e02f      	b.n	8008d74 <HAL_RCC_OscConfig+0xe0>
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	685b      	ldr	r3, [r3, #4]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d10c      	bne.n	8008d36 <HAL_RCC_OscConfig+0xa2>
 8008d1c:	4bab      	ldr	r3, [pc, #684]	; (8008fcc <HAL_RCC_OscConfig+0x338>)
 8008d1e:	681a      	ldr	r2, [r3, #0]
 8008d20:	4baa      	ldr	r3, [pc, #680]	; (8008fcc <HAL_RCC_OscConfig+0x338>)
 8008d22:	49ab      	ldr	r1, [pc, #684]	; (8008fd0 <HAL_RCC_OscConfig+0x33c>)
 8008d24:	400a      	ands	r2, r1
 8008d26:	601a      	str	r2, [r3, #0]
 8008d28:	4ba8      	ldr	r3, [pc, #672]	; (8008fcc <HAL_RCC_OscConfig+0x338>)
 8008d2a:	681a      	ldr	r2, [r3, #0]
 8008d2c:	4ba7      	ldr	r3, [pc, #668]	; (8008fcc <HAL_RCC_OscConfig+0x338>)
 8008d2e:	49a9      	ldr	r1, [pc, #676]	; (8008fd4 <HAL_RCC_OscConfig+0x340>)
 8008d30:	400a      	ands	r2, r1
 8008d32:	601a      	str	r2, [r3, #0]
 8008d34:	e01e      	b.n	8008d74 <HAL_RCC_OscConfig+0xe0>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	685b      	ldr	r3, [r3, #4]
 8008d3a:	2b05      	cmp	r3, #5
 8008d3c:	d10e      	bne.n	8008d5c <HAL_RCC_OscConfig+0xc8>
 8008d3e:	4ba3      	ldr	r3, [pc, #652]	; (8008fcc <HAL_RCC_OscConfig+0x338>)
 8008d40:	681a      	ldr	r2, [r3, #0]
 8008d42:	4ba2      	ldr	r3, [pc, #648]	; (8008fcc <HAL_RCC_OscConfig+0x338>)
 8008d44:	2180      	movs	r1, #128	; 0x80
 8008d46:	02c9      	lsls	r1, r1, #11
 8008d48:	430a      	orrs	r2, r1
 8008d4a:	601a      	str	r2, [r3, #0]
 8008d4c:	4b9f      	ldr	r3, [pc, #636]	; (8008fcc <HAL_RCC_OscConfig+0x338>)
 8008d4e:	681a      	ldr	r2, [r3, #0]
 8008d50:	4b9e      	ldr	r3, [pc, #632]	; (8008fcc <HAL_RCC_OscConfig+0x338>)
 8008d52:	2180      	movs	r1, #128	; 0x80
 8008d54:	0249      	lsls	r1, r1, #9
 8008d56:	430a      	orrs	r2, r1
 8008d58:	601a      	str	r2, [r3, #0]
 8008d5a:	e00b      	b.n	8008d74 <HAL_RCC_OscConfig+0xe0>
 8008d5c:	4b9b      	ldr	r3, [pc, #620]	; (8008fcc <HAL_RCC_OscConfig+0x338>)
 8008d5e:	681a      	ldr	r2, [r3, #0]
 8008d60:	4b9a      	ldr	r3, [pc, #616]	; (8008fcc <HAL_RCC_OscConfig+0x338>)
 8008d62:	499b      	ldr	r1, [pc, #620]	; (8008fd0 <HAL_RCC_OscConfig+0x33c>)
 8008d64:	400a      	ands	r2, r1
 8008d66:	601a      	str	r2, [r3, #0]
 8008d68:	4b98      	ldr	r3, [pc, #608]	; (8008fcc <HAL_RCC_OscConfig+0x338>)
 8008d6a:	681a      	ldr	r2, [r3, #0]
 8008d6c:	4b97      	ldr	r3, [pc, #604]	; (8008fcc <HAL_RCC_OscConfig+0x338>)
 8008d6e:	4999      	ldr	r1, [pc, #612]	; (8008fd4 <HAL_RCC_OscConfig+0x340>)
 8008d70:	400a      	ands	r2, r1
 8008d72:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	685b      	ldr	r3, [r3, #4]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d014      	beq.n	8008da6 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d7c:	f7fe fca0 	bl	80076c0 <HAL_GetTick>
 8008d80:	0003      	movs	r3, r0
 8008d82:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008d84:	e008      	b.n	8008d98 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008d86:	f7fe fc9b 	bl	80076c0 <HAL_GetTick>
 8008d8a:	0002      	movs	r2, r0
 8008d8c:	69bb      	ldr	r3, [r7, #24]
 8008d8e:	1ad3      	subs	r3, r2, r3
 8008d90:	2b64      	cmp	r3, #100	; 0x64
 8008d92:	d901      	bls.n	8008d98 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8008d94:	2303      	movs	r3, #3
 8008d96:	e2fd      	b.n	8009394 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008d98:	4b8c      	ldr	r3, [pc, #560]	; (8008fcc <HAL_RCC_OscConfig+0x338>)
 8008d9a:	681a      	ldr	r2, [r3, #0]
 8008d9c:	2380      	movs	r3, #128	; 0x80
 8008d9e:	029b      	lsls	r3, r3, #10
 8008da0:	4013      	ands	r3, r2
 8008da2:	d0f0      	beq.n	8008d86 <HAL_RCC_OscConfig+0xf2>
 8008da4:	e015      	b.n	8008dd2 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008da6:	f7fe fc8b 	bl	80076c0 <HAL_GetTick>
 8008daa:	0003      	movs	r3, r0
 8008dac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008dae:	e008      	b.n	8008dc2 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008db0:	f7fe fc86 	bl	80076c0 <HAL_GetTick>
 8008db4:	0002      	movs	r2, r0
 8008db6:	69bb      	ldr	r3, [r7, #24]
 8008db8:	1ad3      	subs	r3, r2, r3
 8008dba:	2b64      	cmp	r3, #100	; 0x64
 8008dbc:	d901      	bls.n	8008dc2 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8008dbe:	2303      	movs	r3, #3
 8008dc0:	e2e8      	b.n	8009394 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008dc2:	4b82      	ldr	r3, [pc, #520]	; (8008fcc <HAL_RCC_OscConfig+0x338>)
 8008dc4:	681a      	ldr	r2, [r3, #0]
 8008dc6:	2380      	movs	r3, #128	; 0x80
 8008dc8:	029b      	lsls	r3, r3, #10
 8008dca:	4013      	ands	r3, r2
 8008dcc:	d1f0      	bne.n	8008db0 <HAL_RCC_OscConfig+0x11c>
 8008dce:	e000      	b.n	8008dd2 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008dd0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	2202      	movs	r2, #2
 8008dd8:	4013      	ands	r3, r2
 8008dda:	d100      	bne.n	8008dde <HAL_RCC_OscConfig+0x14a>
 8008ddc:	e06c      	b.n	8008eb8 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8008dde:	4b7b      	ldr	r3, [pc, #492]	; (8008fcc <HAL_RCC_OscConfig+0x338>)
 8008de0:	685b      	ldr	r3, [r3, #4]
 8008de2:	220c      	movs	r2, #12
 8008de4:	4013      	ands	r3, r2
 8008de6:	d00e      	beq.n	8008e06 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8008de8:	4b78      	ldr	r3, [pc, #480]	; (8008fcc <HAL_RCC_OscConfig+0x338>)
 8008dea:	685b      	ldr	r3, [r3, #4]
 8008dec:	220c      	movs	r2, #12
 8008dee:	4013      	ands	r3, r2
 8008df0:	2b08      	cmp	r3, #8
 8008df2:	d11f      	bne.n	8008e34 <HAL_RCC_OscConfig+0x1a0>
 8008df4:	4b75      	ldr	r3, [pc, #468]	; (8008fcc <HAL_RCC_OscConfig+0x338>)
 8008df6:	685a      	ldr	r2, [r3, #4]
 8008df8:	23c0      	movs	r3, #192	; 0xc0
 8008dfa:	025b      	lsls	r3, r3, #9
 8008dfc:	401a      	ands	r2, r3
 8008dfe:	2380      	movs	r3, #128	; 0x80
 8008e00:	021b      	lsls	r3, r3, #8
 8008e02:	429a      	cmp	r2, r3
 8008e04:	d116      	bne.n	8008e34 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008e06:	4b71      	ldr	r3, [pc, #452]	; (8008fcc <HAL_RCC_OscConfig+0x338>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	2202      	movs	r2, #2
 8008e0c:	4013      	ands	r3, r2
 8008e0e:	d005      	beq.n	8008e1c <HAL_RCC_OscConfig+0x188>
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	68db      	ldr	r3, [r3, #12]
 8008e14:	2b01      	cmp	r3, #1
 8008e16:	d001      	beq.n	8008e1c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8008e18:	2301      	movs	r3, #1
 8008e1a:	e2bb      	b.n	8009394 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008e1c:	4b6b      	ldr	r3, [pc, #428]	; (8008fcc <HAL_RCC_OscConfig+0x338>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	22f8      	movs	r2, #248	; 0xf8
 8008e22:	4393      	bics	r3, r2
 8008e24:	0019      	movs	r1, r3
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	691b      	ldr	r3, [r3, #16]
 8008e2a:	00da      	lsls	r2, r3, #3
 8008e2c:	4b67      	ldr	r3, [pc, #412]	; (8008fcc <HAL_RCC_OscConfig+0x338>)
 8008e2e:	430a      	orrs	r2, r1
 8008e30:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008e32:	e041      	b.n	8008eb8 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	68db      	ldr	r3, [r3, #12]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d024      	beq.n	8008e86 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008e3c:	4b63      	ldr	r3, [pc, #396]	; (8008fcc <HAL_RCC_OscConfig+0x338>)
 8008e3e:	681a      	ldr	r2, [r3, #0]
 8008e40:	4b62      	ldr	r3, [pc, #392]	; (8008fcc <HAL_RCC_OscConfig+0x338>)
 8008e42:	2101      	movs	r1, #1
 8008e44:	430a      	orrs	r2, r1
 8008e46:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e48:	f7fe fc3a 	bl	80076c0 <HAL_GetTick>
 8008e4c:	0003      	movs	r3, r0
 8008e4e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008e50:	e008      	b.n	8008e64 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008e52:	f7fe fc35 	bl	80076c0 <HAL_GetTick>
 8008e56:	0002      	movs	r2, r0
 8008e58:	69bb      	ldr	r3, [r7, #24]
 8008e5a:	1ad3      	subs	r3, r2, r3
 8008e5c:	2b02      	cmp	r3, #2
 8008e5e:	d901      	bls.n	8008e64 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8008e60:	2303      	movs	r3, #3
 8008e62:	e297      	b.n	8009394 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008e64:	4b59      	ldr	r3, [pc, #356]	; (8008fcc <HAL_RCC_OscConfig+0x338>)
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	2202      	movs	r2, #2
 8008e6a:	4013      	ands	r3, r2
 8008e6c:	d0f1      	beq.n	8008e52 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008e6e:	4b57      	ldr	r3, [pc, #348]	; (8008fcc <HAL_RCC_OscConfig+0x338>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	22f8      	movs	r2, #248	; 0xf8
 8008e74:	4393      	bics	r3, r2
 8008e76:	0019      	movs	r1, r3
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	691b      	ldr	r3, [r3, #16]
 8008e7c:	00da      	lsls	r2, r3, #3
 8008e7e:	4b53      	ldr	r3, [pc, #332]	; (8008fcc <HAL_RCC_OscConfig+0x338>)
 8008e80:	430a      	orrs	r2, r1
 8008e82:	601a      	str	r2, [r3, #0]
 8008e84:	e018      	b.n	8008eb8 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008e86:	4b51      	ldr	r3, [pc, #324]	; (8008fcc <HAL_RCC_OscConfig+0x338>)
 8008e88:	681a      	ldr	r2, [r3, #0]
 8008e8a:	4b50      	ldr	r3, [pc, #320]	; (8008fcc <HAL_RCC_OscConfig+0x338>)
 8008e8c:	2101      	movs	r1, #1
 8008e8e:	438a      	bics	r2, r1
 8008e90:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e92:	f7fe fc15 	bl	80076c0 <HAL_GetTick>
 8008e96:	0003      	movs	r3, r0
 8008e98:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008e9a:	e008      	b.n	8008eae <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008e9c:	f7fe fc10 	bl	80076c0 <HAL_GetTick>
 8008ea0:	0002      	movs	r2, r0
 8008ea2:	69bb      	ldr	r3, [r7, #24]
 8008ea4:	1ad3      	subs	r3, r2, r3
 8008ea6:	2b02      	cmp	r3, #2
 8008ea8:	d901      	bls.n	8008eae <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8008eaa:	2303      	movs	r3, #3
 8008eac:	e272      	b.n	8009394 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008eae:	4b47      	ldr	r3, [pc, #284]	; (8008fcc <HAL_RCC_OscConfig+0x338>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	2202      	movs	r2, #2
 8008eb4:	4013      	ands	r3, r2
 8008eb6:	d1f1      	bne.n	8008e9c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	2208      	movs	r2, #8
 8008ebe:	4013      	ands	r3, r2
 8008ec0:	d036      	beq.n	8008f30 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	69db      	ldr	r3, [r3, #28]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d019      	beq.n	8008efe <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008eca:	4b40      	ldr	r3, [pc, #256]	; (8008fcc <HAL_RCC_OscConfig+0x338>)
 8008ecc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008ece:	4b3f      	ldr	r3, [pc, #252]	; (8008fcc <HAL_RCC_OscConfig+0x338>)
 8008ed0:	2101      	movs	r1, #1
 8008ed2:	430a      	orrs	r2, r1
 8008ed4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008ed6:	f7fe fbf3 	bl	80076c0 <HAL_GetTick>
 8008eda:	0003      	movs	r3, r0
 8008edc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008ede:	e008      	b.n	8008ef2 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008ee0:	f7fe fbee 	bl	80076c0 <HAL_GetTick>
 8008ee4:	0002      	movs	r2, r0
 8008ee6:	69bb      	ldr	r3, [r7, #24]
 8008ee8:	1ad3      	subs	r3, r2, r3
 8008eea:	2b02      	cmp	r3, #2
 8008eec:	d901      	bls.n	8008ef2 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8008eee:	2303      	movs	r3, #3
 8008ef0:	e250      	b.n	8009394 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008ef2:	4b36      	ldr	r3, [pc, #216]	; (8008fcc <HAL_RCC_OscConfig+0x338>)
 8008ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ef6:	2202      	movs	r2, #2
 8008ef8:	4013      	ands	r3, r2
 8008efa:	d0f1      	beq.n	8008ee0 <HAL_RCC_OscConfig+0x24c>
 8008efc:	e018      	b.n	8008f30 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008efe:	4b33      	ldr	r3, [pc, #204]	; (8008fcc <HAL_RCC_OscConfig+0x338>)
 8008f00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008f02:	4b32      	ldr	r3, [pc, #200]	; (8008fcc <HAL_RCC_OscConfig+0x338>)
 8008f04:	2101      	movs	r1, #1
 8008f06:	438a      	bics	r2, r1
 8008f08:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008f0a:	f7fe fbd9 	bl	80076c0 <HAL_GetTick>
 8008f0e:	0003      	movs	r3, r0
 8008f10:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008f12:	e008      	b.n	8008f26 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008f14:	f7fe fbd4 	bl	80076c0 <HAL_GetTick>
 8008f18:	0002      	movs	r2, r0
 8008f1a:	69bb      	ldr	r3, [r7, #24]
 8008f1c:	1ad3      	subs	r3, r2, r3
 8008f1e:	2b02      	cmp	r3, #2
 8008f20:	d901      	bls.n	8008f26 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8008f22:	2303      	movs	r3, #3
 8008f24:	e236      	b.n	8009394 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008f26:	4b29      	ldr	r3, [pc, #164]	; (8008fcc <HAL_RCC_OscConfig+0x338>)
 8008f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f2a:	2202      	movs	r2, #2
 8008f2c:	4013      	ands	r3, r2
 8008f2e:	d1f1      	bne.n	8008f14 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	2204      	movs	r2, #4
 8008f36:	4013      	ands	r3, r2
 8008f38:	d100      	bne.n	8008f3c <HAL_RCC_OscConfig+0x2a8>
 8008f3a:	e0b5      	b.n	80090a8 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008f3c:	201f      	movs	r0, #31
 8008f3e:	183b      	adds	r3, r7, r0
 8008f40:	2200      	movs	r2, #0
 8008f42:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008f44:	4b21      	ldr	r3, [pc, #132]	; (8008fcc <HAL_RCC_OscConfig+0x338>)
 8008f46:	69da      	ldr	r2, [r3, #28]
 8008f48:	2380      	movs	r3, #128	; 0x80
 8008f4a:	055b      	lsls	r3, r3, #21
 8008f4c:	4013      	ands	r3, r2
 8008f4e:	d110      	bne.n	8008f72 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008f50:	4b1e      	ldr	r3, [pc, #120]	; (8008fcc <HAL_RCC_OscConfig+0x338>)
 8008f52:	69da      	ldr	r2, [r3, #28]
 8008f54:	4b1d      	ldr	r3, [pc, #116]	; (8008fcc <HAL_RCC_OscConfig+0x338>)
 8008f56:	2180      	movs	r1, #128	; 0x80
 8008f58:	0549      	lsls	r1, r1, #21
 8008f5a:	430a      	orrs	r2, r1
 8008f5c:	61da      	str	r2, [r3, #28]
 8008f5e:	4b1b      	ldr	r3, [pc, #108]	; (8008fcc <HAL_RCC_OscConfig+0x338>)
 8008f60:	69da      	ldr	r2, [r3, #28]
 8008f62:	2380      	movs	r3, #128	; 0x80
 8008f64:	055b      	lsls	r3, r3, #21
 8008f66:	4013      	ands	r3, r2
 8008f68:	60fb      	str	r3, [r7, #12]
 8008f6a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008f6c:	183b      	adds	r3, r7, r0
 8008f6e:	2201      	movs	r2, #1
 8008f70:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008f72:	4b19      	ldr	r3, [pc, #100]	; (8008fd8 <HAL_RCC_OscConfig+0x344>)
 8008f74:	681a      	ldr	r2, [r3, #0]
 8008f76:	2380      	movs	r3, #128	; 0x80
 8008f78:	005b      	lsls	r3, r3, #1
 8008f7a:	4013      	ands	r3, r2
 8008f7c:	d11a      	bne.n	8008fb4 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008f7e:	4b16      	ldr	r3, [pc, #88]	; (8008fd8 <HAL_RCC_OscConfig+0x344>)
 8008f80:	681a      	ldr	r2, [r3, #0]
 8008f82:	4b15      	ldr	r3, [pc, #84]	; (8008fd8 <HAL_RCC_OscConfig+0x344>)
 8008f84:	2180      	movs	r1, #128	; 0x80
 8008f86:	0049      	lsls	r1, r1, #1
 8008f88:	430a      	orrs	r2, r1
 8008f8a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008f8c:	f7fe fb98 	bl	80076c0 <HAL_GetTick>
 8008f90:	0003      	movs	r3, r0
 8008f92:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008f94:	e008      	b.n	8008fa8 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008f96:	f7fe fb93 	bl	80076c0 <HAL_GetTick>
 8008f9a:	0002      	movs	r2, r0
 8008f9c:	69bb      	ldr	r3, [r7, #24]
 8008f9e:	1ad3      	subs	r3, r2, r3
 8008fa0:	2b64      	cmp	r3, #100	; 0x64
 8008fa2:	d901      	bls.n	8008fa8 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8008fa4:	2303      	movs	r3, #3
 8008fa6:	e1f5      	b.n	8009394 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008fa8:	4b0b      	ldr	r3, [pc, #44]	; (8008fd8 <HAL_RCC_OscConfig+0x344>)
 8008faa:	681a      	ldr	r2, [r3, #0]
 8008fac:	2380      	movs	r3, #128	; 0x80
 8008fae:	005b      	lsls	r3, r3, #1
 8008fb0:	4013      	ands	r3, r2
 8008fb2:	d0f0      	beq.n	8008f96 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	689b      	ldr	r3, [r3, #8]
 8008fb8:	2b01      	cmp	r3, #1
 8008fba:	d10f      	bne.n	8008fdc <HAL_RCC_OscConfig+0x348>
 8008fbc:	4b03      	ldr	r3, [pc, #12]	; (8008fcc <HAL_RCC_OscConfig+0x338>)
 8008fbe:	6a1a      	ldr	r2, [r3, #32]
 8008fc0:	4b02      	ldr	r3, [pc, #8]	; (8008fcc <HAL_RCC_OscConfig+0x338>)
 8008fc2:	2101      	movs	r1, #1
 8008fc4:	430a      	orrs	r2, r1
 8008fc6:	621a      	str	r2, [r3, #32]
 8008fc8:	e036      	b.n	8009038 <HAL_RCC_OscConfig+0x3a4>
 8008fca:	46c0      	nop			; (mov r8, r8)
 8008fcc:	40021000 	.word	0x40021000
 8008fd0:	fffeffff 	.word	0xfffeffff
 8008fd4:	fffbffff 	.word	0xfffbffff
 8008fd8:	40007000 	.word	0x40007000
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	689b      	ldr	r3, [r3, #8]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d10c      	bne.n	8008ffe <HAL_RCC_OscConfig+0x36a>
 8008fe4:	4bca      	ldr	r3, [pc, #808]	; (8009310 <HAL_RCC_OscConfig+0x67c>)
 8008fe6:	6a1a      	ldr	r2, [r3, #32]
 8008fe8:	4bc9      	ldr	r3, [pc, #804]	; (8009310 <HAL_RCC_OscConfig+0x67c>)
 8008fea:	2101      	movs	r1, #1
 8008fec:	438a      	bics	r2, r1
 8008fee:	621a      	str	r2, [r3, #32]
 8008ff0:	4bc7      	ldr	r3, [pc, #796]	; (8009310 <HAL_RCC_OscConfig+0x67c>)
 8008ff2:	6a1a      	ldr	r2, [r3, #32]
 8008ff4:	4bc6      	ldr	r3, [pc, #792]	; (8009310 <HAL_RCC_OscConfig+0x67c>)
 8008ff6:	2104      	movs	r1, #4
 8008ff8:	438a      	bics	r2, r1
 8008ffa:	621a      	str	r2, [r3, #32]
 8008ffc:	e01c      	b.n	8009038 <HAL_RCC_OscConfig+0x3a4>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	689b      	ldr	r3, [r3, #8]
 8009002:	2b05      	cmp	r3, #5
 8009004:	d10c      	bne.n	8009020 <HAL_RCC_OscConfig+0x38c>
 8009006:	4bc2      	ldr	r3, [pc, #776]	; (8009310 <HAL_RCC_OscConfig+0x67c>)
 8009008:	6a1a      	ldr	r2, [r3, #32]
 800900a:	4bc1      	ldr	r3, [pc, #772]	; (8009310 <HAL_RCC_OscConfig+0x67c>)
 800900c:	2104      	movs	r1, #4
 800900e:	430a      	orrs	r2, r1
 8009010:	621a      	str	r2, [r3, #32]
 8009012:	4bbf      	ldr	r3, [pc, #764]	; (8009310 <HAL_RCC_OscConfig+0x67c>)
 8009014:	6a1a      	ldr	r2, [r3, #32]
 8009016:	4bbe      	ldr	r3, [pc, #760]	; (8009310 <HAL_RCC_OscConfig+0x67c>)
 8009018:	2101      	movs	r1, #1
 800901a:	430a      	orrs	r2, r1
 800901c:	621a      	str	r2, [r3, #32]
 800901e:	e00b      	b.n	8009038 <HAL_RCC_OscConfig+0x3a4>
 8009020:	4bbb      	ldr	r3, [pc, #748]	; (8009310 <HAL_RCC_OscConfig+0x67c>)
 8009022:	6a1a      	ldr	r2, [r3, #32]
 8009024:	4bba      	ldr	r3, [pc, #744]	; (8009310 <HAL_RCC_OscConfig+0x67c>)
 8009026:	2101      	movs	r1, #1
 8009028:	438a      	bics	r2, r1
 800902a:	621a      	str	r2, [r3, #32]
 800902c:	4bb8      	ldr	r3, [pc, #736]	; (8009310 <HAL_RCC_OscConfig+0x67c>)
 800902e:	6a1a      	ldr	r2, [r3, #32]
 8009030:	4bb7      	ldr	r3, [pc, #732]	; (8009310 <HAL_RCC_OscConfig+0x67c>)
 8009032:	2104      	movs	r1, #4
 8009034:	438a      	bics	r2, r1
 8009036:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	689b      	ldr	r3, [r3, #8]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d014      	beq.n	800906a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009040:	f7fe fb3e 	bl	80076c0 <HAL_GetTick>
 8009044:	0003      	movs	r3, r0
 8009046:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009048:	e009      	b.n	800905e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800904a:	f7fe fb39 	bl	80076c0 <HAL_GetTick>
 800904e:	0002      	movs	r2, r0
 8009050:	69bb      	ldr	r3, [r7, #24]
 8009052:	1ad3      	subs	r3, r2, r3
 8009054:	4aaf      	ldr	r2, [pc, #700]	; (8009314 <HAL_RCC_OscConfig+0x680>)
 8009056:	4293      	cmp	r3, r2
 8009058:	d901      	bls.n	800905e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800905a:	2303      	movs	r3, #3
 800905c:	e19a      	b.n	8009394 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800905e:	4bac      	ldr	r3, [pc, #688]	; (8009310 <HAL_RCC_OscConfig+0x67c>)
 8009060:	6a1b      	ldr	r3, [r3, #32]
 8009062:	2202      	movs	r2, #2
 8009064:	4013      	ands	r3, r2
 8009066:	d0f0      	beq.n	800904a <HAL_RCC_OscConfig+0x3b6>
 8009068:	e013      	b.n	8009092 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800906a:	f7fe fb29 	bl	80076c0 <HAL_GetTick>
 800906e:	0003      	movs	r3, r0
 8009070:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009072:	e009      	b.n	8009088 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009074:	f7fe fb24 	bl	80076c0 <HAL_GetTick>
 8009078:	0002      	movs	r2, r0
 800907a:	69bb      	ldr	r3, [r7, #24]
 800907c:	1ad3      	subs	r3, r2, r3
 800907e:	4aa5      	ldr	r2, [pc, #660]	; (8009314 <HAL_RCC_OscConfig+0x680>)
 8009080:	4293      	cmp	r3, r2
 8009082:	d901      	bls.n	8009088 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8009084:	2303      	movs	r3, #3
 8009086:	e185      	b.n	8009394 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009088:	4ba1      	ldr	r3, [pc, #644]	; (8009310 <HAL_RCC_OscConfig+0x67c>)
 800908a:	6a1b      	ldr	r3, [r3, #32]
 800908c:	2202      	movs	r2, #2
 800908e:	4013      	ands	r3, r2
 8009090:	d1f0      	bne.n	8009074 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8009092:	231f      	movs	r3, #31
 8009094:	18fb      	adds	r3, r7, r3
 8009096:	781b      	ldrb	r3, [r3, #0]
 8009098:	2b01      	cmp	r3, #1
 800909a:	d105      	bne.n	80090a8 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800909c:	4b9c      	ldr	r3, [pc, #624]	; (8009310 <HAL_RCC_OscConfig+0x67c>)
 800909e:	69da      	ldr	r2, [r3, #28]
 80090a0:	4b9b      	ldr	r3, [pc, #620]	; (8009310 <HAL_RCC_OscConfig+0x67c>)
 80090a2:	499d      	ldr	r1, [pc, #628]	; (8009318 <HAL_RCC_OscConfig+0x684>)
 80090a4:	400a      	ands	r2, r1
 80090a6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	2210      	movs	r2, #16
 80090ae:	4013      	ands	r3, r2
 80090b0:	d063      	beq.n	800917a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	695b      	ldr	r3, [r3, #20]
 80090b6:	2b01      	cmp	r3, #1
 80090b8:	d12a      	bne.n	8009110 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80090ba:	4b95      	ldr	r3, [pc, #596]	; (8009310 <HAL_RCC_OscConfig+0x67c>)
 80090bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80090be:	4b94      	ldr	r3, [pc, #592]	; (8009310 <HAL_RCC_OscConfig+0x67c>)
 80090c0:	2104      	movs	r1, #4
 80090c2:	430a      	orrs	r2, r1
 80090c4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80090c6:	4b92      	ldr	r3, [pc, #584]	; (8009310 <HAL_RCC_OscConfig+0x67c>)
 80090c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80090ca:	4b91      	ldr	r3, [pc, #580]	; (8009310 <HAL_RCC_OscConfig+0x67c>)
 80090cc:	2101      	movs	r1, #1
 80090ce:	430a      	orrs	r2, r1
 80090d0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80090d2:	f7fe faf5 	bl	80076c0 <HAL_GetTick>
 80090d6:	0003      	movs	r3, r0
 80090d8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80090da:	e008      	b.n	80090ee <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80090dc:	f7fe faf0 	bl	80076c0 <HAL_GetTick>
 80090e0:	0002      	movs	r2, r0
 80090e2:	69bb      	ldr	r3, [r7, #24]
 80090e4:	1ad3      	subs	r3, r2, r3
 80090e6:	2b02      	cmp	r3, #2
 80090e8:	d901      	bls.n	80090ee <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80090ea:	2303      	movs	r3, #3
 80090ec:	e152      	b.n	8009394 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80090ee:	4b88      	ldr	r3, [pc, #544]	; (8009310 <HAL_RCC_OscConfig+0x67c>)
 80090f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090f2:	2202      	movs	r2, #2
 80090f4:	4013      	ands	r3, r2
 80090f6:	d0f1      	beq.n	80090dc <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80090f8:	4b85      	ldr	r3, [pc, #532]	; (8009310 <HAL_RCC_OscConfig+0x67c>)
 80090fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090fc:	22f8      	movs	r2, #248	; 0xf8
 80090fe:	4393      	bics	r3, r2
 8009100:	0019      	movs	r1, r3
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	699b      	ldr	r3, [r3, #24]
 8009106:	00da      	lsls	r2, r3, #3
 8009108:	4b81      	ldr	r3, [pc, #516]	; (8009310 <HAL_RCC_OscConfig+0x67c>)
 800910a:	430a      	orrs	r2, r1
 800910c:	635a      	str	r2, [r3, #52]	; 0x34
 800910e:	e034      	b.n	800917a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	695b      	ldr	r3, [r3, #20]
 8009114:	3305      	adds	r3, #5
 8009116:	d111      	bne.n	800913c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8009118:	4b7d      	ldr	r3, [pc, #500]	; (8009310 <HAL_RCC_OscConfig+0x67c>)
 800911a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800911c:	4b7c      	ldr	r3, [pc, #496]	; (8009310 <HAL_RCC_OscConfig+0x67c>)
 800911e:	2104      	movs	r1, #4
 8009120:	438a      	bics	r2, r1
 8009122:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8009124:	4b7a      	ldr	r3, [pc, #488]	; (8009310 <HAL_RCC_OscConfig+0x67c>)
 8009126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009128:	22f8      	movs	r2, #248	; 0xf8
 800912a:	4393      	bics	r3, r2
 800912c:	0019      	movs	r1, r3
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	699b      	ldr	r3, [r3, #24]
 8009132:	00da      	lsls	r2, r3, #3
 8009134:	4b76      	ldr	r3, [pc, #472]	; (8009310 <HAL_RCC_OscConfig+0x67c>)
 8009136:	430a      	orrs	r2, r1
 8009138:	635a      	str	r2, [r3, #52]	; 0x34
 800913a:	e01e      	b.n	800917a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800913c:	4b74      	ldr	r3, [pc, #464]	; (8009310 <HAL_RCC_OscConfig+0x67c>)
 800913e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009140:	4b73      	ldr	r3, [pc, #460]	; (8009310 <HAL_RCC_OscConfig+0x67c>)
 8009142:	2104      	movs	r1, #4
 8009144:	430a      	orrs	r2, r1
 8009146:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8009148:	4b71      	ldr	r3, [pc, #452]	; (8009310 <HAL_RCC_OscConfig+0x67c>)
 800914a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800914c:	4b70      	ldr	r3, [pc, #448]	; (8009310 <HAL_RCC_OscConfig+0x67c>)
 800914e:	2101      	movs	r1, #1
 8009150:	438a      	bics	r2, r1
 8009152:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009154:	f7fe fab4 	bl	80076c0 <HAL_GetTick>
 8009158:	0003      	movs	r3, r0
 800915a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800915c:	e008      	b.n	8009170 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800915e:	f7fe faaf 	bl	80076c0 <HAL_GetTick>
 8009162:	0002      	movs	r2, r0
 8009164:	69bb      	ldr	r3, [r7, #24]
 8009166:	1ad3      	subs	r3, r2, r3
 8009168:	2b02      	cmp	r3, #2
 800916a:	d901      	bls.n	8009170 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 800916c:	2303      	movs	r3, #3
 800916e:	e111      	b.n	8009394 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8009170:	4b67      	ldr	r3, [pc, #412]	; (8009310 <HAL_RCC_OscConfig+0x67c>)
 8009172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009174:	2202      	movs	r2, #2
 8009176:	4013      	ands	r3, r2
 8009178:	d1f1      	bne.n	800915e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	2220      	movs	r2, #32
 8009180:	4013      	ands	r3, r2
 8009182:	d05c      	beq.n	800923e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8009184:	4b62      	ldr	r3, [pc, #392]	; (8009310 <HAL_RCC_OscConfig+0x67c>)
 8009186:	685b      	ldr	r3, [r3, #4]
 8009188:	220c      	movs	r2, #12
 800918a:	4013      	ands	r3, r2
 800918c:	2b0c      	cmp	r3, #12
 800918e:	d00e      	beq.n	80091ae <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8009190:	4b5f      	ldr	r3, [pc, #380]	; (8009310 <HAL_RCC_OscConfig+0x67c>)
 8009192:	685b      	ldr	r3, [r3, #4]
 8009194:	220c      	movs	r2, #12
 8009196:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8009198:	2b08      	cmp	r3, #8
 800919a:	d114      	bne.n	80091c6 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800919c:	4b5c      	ldr	r3, [pc, #368]	; (8009310 <HAL_RCC_OscConfig+0x67c>)
 800919e:	685a      	ldr	r2, [r3, #4]
 80091a0:	23c0      	movs	r3, #192	; 0xc0
 80091a2:	025b      	lsls	r3, r3, #9
 80091a4:	401a      	ands	r2, r3
 80091a6:	23c0      	movs	r3, #192	; 0xc0
 80091a8:	025b      	lsls	r3, r3, #9
 80091aa:	429a      	cmp	r2, r3
 80091ac:	d10b      	bne.n	80091c6 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80091ae:	4b58      	ldr	r3, [pc, #352]	; (8009310 <HAL_RCC_OscConfig+0x67c>)
 80091b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80091b2:	2380      	movs	r3, #128	; 0x80
 80091b4:	029b      	lsls	r3, r3, #10
 80091b6:	4013      	ands	r3, r2
 80091b8:	d040      	beq.n	800923c <HAL_RCC_OscConfig+0x5a8>
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6a1b      	ldr	r3, [r3, #32]
 80091be:	2b01      	cmp	r3, #1
 80091c0:	d03c      	beq.n	800923c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80091c2:	2301      	movs	r3, #1
 80091c4:	e0e6      	b.n	8009394 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6a1b      	ldr	r3, [r3, #32]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d01b      	beq.n	8009206 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80091ce:	4b50      	ldr	r3, [pc, #320]	; (8009310 <HAL_RCC_OscConfig+0x67c>)
 80091d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80091d2:	4b4f      	ldr	r3, [pc, #316]	; (8009310 <HAL_RCC_OscConfig+0x67c>)
 80091d4:	2180      	movs	r1, #128	; 0x80
 80091d6:	0249      	lsls	r1, r1, #9
 80091d8:	430a      	orrs	r2, r1
 80091da:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80091dc:	f7fe fa70 	bl	80076c0 <HAL_GetTick>
 80091e0:	0003      	movs	r3, r0
 80091e2:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80091e4:	e008      	b.n	80091f8 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80091e6:	f7fe fa6b 	bl	80076c0 <HAL_GetTick>
 80091ea:	0002      	movs	r2, r0
 80091ec:	69bb      	ldr	r3, [r7, #24]
 80091ee:	1ad3      	subs	r3, r2, r3
 80091f0:	2b02      	cmp	r3, #2
 80091f2:	d901      	bls.n	80091f8 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80091f4:	2303      	movs	r3, #3
 80091f6:	e0cd      	b.n	8009394 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80091f8:	4b45      	ldr	r3, [pc, #276]	; (8009310 <HAL_RCC_OscConfig+0x67c>)
 80091fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80091fc:	2380      	movs	r3, #128	; 0x80
 80091fe:	029b      	lsls	r3, r3, #10
 8009200:	4013      	ands	r3, r2
 8009202:	d0f0      	beq.n	80091e6 <HAL_RCC_OscConfig+0x552>
 8009204:	e01b      	b.n	800923e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8009206:	4b42      	ldr	r3, [pc, #264]	; (8009310 <HAL_RCC_OscConfig+0x67c>)
 8009208:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800920a:	4b41      	ldr	r3, [pc, #260]	; (8009310 <HAL_RCC_OscConfig+0x67c>)
 800920c:	4943      	ldr	r1, [pc, #268]	; (800931c <HAL_RCC_OscConfig+0x688>)
 800920e:	400a      	ands	r2, r1
 8009210:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009212:	f7fe fa55 	bl	80076c0 <HAL_GetTick>
 8009216:	0003      	movs	r3, r0
 8009218:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800921a:	e008      	b.n	800922e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800921c:	f7fe fa50 	bl	80076c0 <HAL_GetTick>
 8009220:	0002      	movs	r2, r0
 8009222:	69bb      	ldr	r3, [r7, #24]
 8009224:	1ad3      	subs	r3, r2, r3
 8009226:	2b02      	cmp	r3, #2
 8009228:	d901      	bls.n	800922e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800922a:	2303      	movs	r3, #3
 800922c:	e0b2      	b.n	8009394 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800922e:	4b38      	ldr	r3, [pc, #224]	; (8009310 <HAL_RCC_OscConfig+0x67c>)
 8009230:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009232:	2380      	movs	r3, #128	; 0x80
 8009234:	029b      	lsls	r3, r3, #10
 8009236:	4013      	ands	r3, r2
 8009238:	d1f0      	bne.n	800921c <HAL_RCC_OscConfig+0x588>
 800923a:	e000      	b.n	800923e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800923c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009242:	2b00      	cmp	r3, #0
 8009244:	d100      	bne.n	8009248 <HAL_RCC_OscConfig+0x5b4>
 8009246:	e0a4      	b.n	8009392 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009248:	4b31      	ldr	r3, [pc, #196]	; (8009310 <HAL_RCC_OscConfig+0x67c>)
 800924a:	685b      	ldr	r3, [r3, #4]
 800924c:	220c      	movs	r2, #12
 800924e:	4013      	ands	r3, r2
 8009250:	2b08      	cmp	r3, #8
 8009252:	d100      	bne.n	8009256 <HAL_RCC_OscConfig+0x5c2>
 8009254:	e078      	b.n	8009348 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800925a:	2b02      	cmp	r3, #2
 800925c:	d14c      	bne.n	80092f8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800925e:	4b2c      	ldr	r3, [pc, #176]	; (8009310 <HAL_RCC_OscConfig+0x67c>)
 8009260:	681a      	ldr	r2, [r3, #0]
 8009262:	4b2b      	ldr	r3, [pc, #172]	; (8009310 <HAL_RCC_OscConfig+0x67c>)
 8009264:	492e      	ldr	r1, [pc, #184]	; (8009320 <HAL_RCC_OscConfig+0x68c>)
 8009266:	400a      	ands	r2, r1
 8009268:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800926a:	f7fe fa29 	bl	80076c0 <HAL_GetTick>
 800926e:	0003      	movs	r3, r0
 8009270:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009272:	e008      	b.n	8009286 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009274:	f7fe fa24 	bl	80076c0 <HAL_GetTick>
 8009278:	0002      	movs	r2, r0
 800927a:	69bb      	ldr	r3, [r7, #24]
 800927c:	1ad3      	subs	r3, r2, r3
 800927e:	2b02      	cmp	r3, #2
 8009280:	d901      	bls.n	8009286 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8009282:	2303      	movs	r3, #3
 8009284:	e086      	b.n	8009394 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009286:	4b22      	ldr	r3, [pc, #136]	; (8009310 <HAL_RCC_OscConfig+0x67c>)
 8009288:	681a      	ldr	r2, [r3, #0]
 800928a:	2380      	movs	r3, #128	; 0x80
 800928c:	049b      	lsls	r3, r3, #18
 800928e:	4013      	ands	r3, r2
 8009290:	d1f0      	bne.n	8009274 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009292:	4b1f      	ldr	r3, [pc, #124]	; (8009310 <HAL_RCC_OscConfig+0x67c>)
 8009294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009296:	220f      	movs	r2, #15
 8009298:	4393      	bics	r3, r2
 800929a:	0019      	movs	r1, r3
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80092a0:	4b1b      	ldr	r3, [pc, #108]	; (8009310 <HAL_RCC_OscConfig+0x67c>)
 80092a2:	430a      	orrs	r2, r1
 80092a4:	62da      	str	r2, [r3, #44]	; 0x2c
 80092a6:	4b1a      	ldr	r3, [pc, #104]	; (8009310 <HAL_RCC_OscConfig+0x67c>)
 80092a8:	685b      	ldr	r3, [r3, #4]
 80092aa:	4a1e      	ldr	r2, [pc, #120]	; (8009324 <HAL_RCC_OscConfig+0x690>)
 80092ac:	4013      	ands	r3, r2
 80092ae:	0019      	movs	r1, r3
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092b8:	431a      	orrs	r2, r3
 80092ba:	4b15      	ldr	r3, [pc, #84]	; (8009310 <HAL_RCC_OscConfig+0x67c>)
 80092bc:	430a      	orrs	r2, r1
 80092be:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80092c0:	4b13      	ldr	r3, [pc, #76]	; (8009310 <HAL_RCC_OscConfig+0x67c>)
 80092c2:	681a      	ldr	r2, [r3, #0]
 80092c4:	4b12      	ldr	r3, [pc, #72]	; (8009310 <HAL_RCC_OscConfig+0x67c>)
 80092c6:	2180      	movs	r1, #128	; 0x80
 80092c8:	0449      	lsls	r1, r1, #17
 80092ca:	430a      	orrs	r2, r1
 80092cc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80092ce:	f7fe f9f7 	bl	80076c0 <HAL_GetTick>
 80092d2:	0003      	movs	r3, r0
 80092d4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80092d6:	e008      	b.n	80092ea <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80092d8:	f7fe f9f2 	bl	80076c0 <HAL_GetTick>
 80092dc:	0002      	movs	r2, r0
 80092de:	69bb      	ldr	r3, [r7, #24]
 80092e0:	1ad3      	subs	r3, r2, r3
 80092e2:	2b02      	cmp	r3, #2
 80092e4:	d901      	bls.n	80092ea <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80092e6:	2303      	movs	r3, #3
 80092e8:	e054      	b.n	8009394 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80092ea:	4b09      	ldr	r3, [pc, #36]	; (8009310 <HAL_RCC_OscConfig+0x67c>)
 80092ec:	681a      	ldr	r2, [r3, #0]
 80092ee:	2380      	movs	r3, #128	; 0x80
 80092f0:	049b      	lsls	r3, r3, #18
 80092f2:	4013      	ands	r3, r2
 80092f4:	d0f0      	beq.n	80092d8 <HAL_RCC_OscConfig+0x644>
 80092f6:	e04c      	b.n	8009392 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80092f8:	4b05      	ldr	r3, [pc, #20]	; (8009310 <HAL_RCC_OscConfig+0x67c>)
 80092fa:	681a      	ldr	r2, [r3, #0]
 80092fc:	4b04      	ldr	r3, [pc, #16]	; (8009310 <HAL_RCC_OscConfig+0x67c>)
 80092fe:	4908      	ldr	r1, [pc, #32]	; (8009320 <HAL_RCC_OscConfig+0x68c>)
 8009300:	400a      	ands	r2, r1
 8009302:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009304:	f7fe f9dc 	bl	80076c0 <HAL_GetTick>
 8009308:	0003      	movs	r3, r0
 800930a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800930c:	e015      	b.n	800933a <HAL_RCC_OscConfig+0x6a6>
 800930e:	46c0      	nop			; (mov r8, r8)
 8009310:	40021000 	.word	0x40021000
 8009314:	00001388 	.word	0x00001388
 8009318:	efffffff 	.word	0xefffffff
 800931c:	fffeffff 	.word	0xfffeffff
 8009320:	feffffff 	.word	0xfeffffff
 8009324:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009328:	f7fe f9ca 	bl	80076c0 <HAL_GetTick>
 800932c:	0002      	movs	r2, r0
 800932e:	69bb      	ldr	r3, [r7, #24]
 8009330:	1ad3      	subs	r3, r2, r3
 8009332:	2b02      	cmp	r3, #2
 8009334:	d901      	bls.n	800933a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8009336:	2303      	movs	r3, #3
 8009338:	e02c      	b.n	8009394 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800933a:	4b18      	ldr	r3, [pc, #96]	; (800939c <HAL_RCC_OscConfig+0x708>)
 800933c:	681a      	ldr	r2, [r3, #0]
 800933e:	2380      	movs	r3, #128	; 0x80
 8009340:	049b      	lsls	r3, r3, #18
 8009342:	4013      	ands	r3, r2
 8009344:	d1f0      	bne.n	8009328 <HAL_RCC_OscConfig+0x694>
 8009346:	e024      	b.n	8009392 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800934c:	2b01      	cmp	r3, #1
 800934e:	d101      	bne.n	8009354 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8009350:	2301      	movs	r3, #1
 8009352:	e01f      	b.n	8009394 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8009354:	4b11      	ldr	r3, [pc, #68]	; (800939c <HAL_RCC_OscConfig+0x708>)
 8009356:	685b      	ldr	r3, [r3, #4]
 8009358:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800935a:	4b10      	ldr	r3, [pc, #64]	; (800939c <HAL_RCC_OscConfig+0x708>)
 800935c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800935e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8009360:	697a      	ldr	r2, [r7, #20]
 8009362:	23c0      	movs	r3, #192	; 0xc0
 8009364:	025b      	lsls	r3, r3, #9
 8009366:	401a      	ands	r2, r3
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800936c:	429a      	cmp	r2, r3
 800936e:	d10e      	bne.n	800938e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8009370:	693b      	ldr	r3, [r7, #16]
 8009372:	220f      	movs	r2, #15
 8009374:	401a      	ands	r2, r3
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800937a:	429a      	cmp	r2, r3
 800937c:	d107      	bne.n	800938e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800937e:	697a      	ldr	r2, [r7, #20]
 8009380:	23f0      	movs	r3, #240	; 0xf0
 8009382:	039b      	lsls	r3, r3, #14
 8009384:	401a      	ands	r2, r3
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800938a:	429a      	cmp	r2, r3
 800938c:	d001      	beq.n	8009392 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800938e:	2301      	movs	r3, #1
 8009390:	e000      	b.n	8009394 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8009392:	2300      	movs	r3, #0
}
 8009394:	0018      	movs	r0, r3
 8009396:	46bd      	mov	sp, r7
 8009398:	b008      	add	sp, #32
 800939a:	bd80      	pop	{r7, pc}
 800939c:	40021000 	.word	0x40021000

080093a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b084      	sub	sp, #16
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
 80093a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d101      	bne.n	80093b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80093b0:	2301      	movs	r3, #1
 80093b2:	e0bf      	b.n	8009534 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80093b4:	4b61      	ldr	r3, [pc, #388]	; (800953c <HAL_RCC_ClockConfig+0x19c>)
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	2201      	movs	r2, #1
 80093ba:	4013      	ands	r3, r2
 80093bc:	683a      	ldr	r2, [r7, #0]
 80093be:	429a      	cmp	r2, r3
 80093c0:	d911      	bls.n	80093e6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80093c2:	4b5e      	ldr	r3, [pc, #376]	; (800953c <HAL_RCC_ClockConfig+0x19c>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	2201      	movs	r2, #1
 80093c8:	4393      	bics	r3, r2
 80093ca:	0019      	movs	r1, r3
 80093cc:	4b5b      	ldr	r3, [pc, #364]	; (800953c <HAL_RCC_ClockConfig+0x19c>)
 80093ce:	683a      	ldr	r2, [r7, #0]
 80093d0:	430a      	orrs	r2, r1
 80093d2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80093d4:	4b59      	ldr	r3, [pc, #356]	; (800953c <HAL_RCC_ClockConfig+0x19c>)
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	2201      	movs	r2, #1
 80093da:	4013      	ands	r3, r2
 80093dc:	683a      	ldr	r2, [r7, #0]
 80093de:	429a      	cmp	r2, r3
 80093e0:	d001      	beq.n	80093e6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80093e2:	2301      	movs	r3, #1
 80093e4:	e0a6      	b.n	8009534 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	2202      	movs	r2, #2
 80093ec:	4013      	ands	r3, r2
 80093ee:	d015      	beq.n	800941c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	2204      	movs	r2, #4
 80093f6:	4013      	ands	r3, r2
 80093f8:	d006      	beq.n	8009408 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80093fa:	4b51      	ldr	r3, [pc, #324]	; (8009540 <HAL_RCC_ClockConfig+0x1a0>)
 80093fc:	685a      	ldr	r2, [r3, #4]
 80093fe:	4b50      	ldr	r3, [pc, #320]	; (8009540 <HAL_RCC_ClockConfig+0x1a0>)
 8009400:	21e0      	movs	r1, #224	; 0xe0
 8009402:	00c9      	lsls	r1, r1, #3
 8009404:	430a      	orrs	r2, r1
 8009406:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009408:	4b4d      	ldr	r3, [pc, #308]	; (8009540 <HAL_RCC_ClockConfig+0x1a0>)
 800940a:	685b      	ldr	r3, [r3, #4]
 800940c:	22f0      	movs	r2, #240	; 0xf0
 800940e:	4393      	bics	r3, r2
 8009410:	0019      	movs	r1, r3
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	689a      	ldr	r2, [r3, #8]
 8009416:	4b4a      	ldr	r3, [pc, #296]	; (8009540 <HAL_RCC_ClockConfig+0x1a0>)
 8009418:	430a      	orrs	r2, r1
 800941a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	2201      	movs	r2, #1
 8009422:	4013      	ands	r3, r2
 8009424:	d04c      	beq.n	80094c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	685b      	ldr	r3, [r3, #4]
 800942a:	2b01      	cmp	r3, #1
 800942c:	d107      	bne.n	800943e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800942e:	4b44      	ldr	r3, [pc, #272]	; (8009540 <HAL_RCC_ClockConfig+0x1a0>)
 8009430:	681a      	ldr	r2, [r3, #0]
 8009432:	2380      	movs	r3, #128	; 0x80
 8009434:	029b      	lsls	r3, r3, #10
 8009436:	4013      	ands	r3, r2
 8009438:	d120      	bne.n	800947c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800943a:	2301      	movs	r3, #1
 800943c:	e07a      	b.n	8009534 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	685b      	ldr	r3, [r3, #4]
 8009442:	2b02      	cmp	r3, #2
 8009444:	d107      	bne.n	8009456 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009446:	4b3e      	ldr	r3, [pc, #248]	; (8009540 <HAL_RCC_ClockConfig+0x1a0>)
 8009448:	681a      	ldr	r2, [r3, #0]
 800944a:	2380      	movs	r3, #128	; 0x80
 800944c:	049b      	lsls	r3, r3, #18
 800944e:	4013      	ands	r3, r2
 8009450:	d114      	bne.n	800947c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8009452:	2301      	movs	r3, #1
 8009454:	e06e      	b.n	8009534 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	685b      	ldr	r3, [r3, #4]
 800945a:	2b03      	cmp	r3, #3
 800945c:	d107      	bne.n	800946e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800945e:	4b38      	ldr	r3, [pc, #224]	; (8009540 <HAL_RCC_ClockConfig+0x1a0>)
 8009460:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009462:	2380      	movs	r3, #128	; 0x80
 8009464:	029b      	lsls	r3, r3, #10
 8009466:	4013      	ands	r3, r2
 8009468:	d108      	bne.n	800947c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800946a:	2301      	movs	r3, #1
 800946c:	e062      	b.n	8009534 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800946e:	4b34      	ldr	r3, [pc, #208]	; (8009540 <HAL_RCC_ClockConfig+0x1a0>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	2202      	movs	r2, #2
 8009474:	4013      	ands	r3, r2
 8009476:	d101      	bne.n	800947c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8009478:	2301      	movs	r3, #1
 800947a:	e05b      	b.n	8009534 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800947c:	4b30      	ldr	r3, [pc, #192]	; (8009540 <HAL_RCC_ClockConfig+0x1a0>)
 800947e:	685b      	ldr	r3, [r3, #4]
 8009480:	2203      	movs	r2, #3
 8009482:	4393      	bics	r3, r2
 8009484:	0019      	movs	r1, r3
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	685a      	ldr	r2, [r3, #4]
 800948a:	4b2d      	ldr	r3, [pc, #180]	; (8009540 <HAL_RCC_ClockConfig+0x1a0>)
 800948c:	430a      	orrs	r2, r1
 800948e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009490:	f7fe f916 	bl	80076c0 <HAL_GetTick>
 8009494:	0003      	movs	r3, r0
 8009496:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009498:	e009      	b.n	80094ae <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800949a:	f7fe f911 	bl	80076c0 <HAL_GetTick>
 800949e:	0002      	movs	r2, r0
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	1ad3      	subs	r3, r2, r3
 80094a4:	4a27      	ldr	r2, [pc, #156]	; (8009544 <HAL_RCC_ClockConfig+0x1a4>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d901      	bls.n	80094ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80094aa:	2303      	movs	r3, #3
 80094ac:	e042      	b.n	8009534 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80094ae:	4b24      	ldr	r3, [pc, #144]	; (8009540 <HAL_RCC_ClockConfig+0x1a0>)
 80094b0:	685b      	ldr	r3, [r3, #4]
 80094b2:	220c      	movs	r2, #12
 80094b4:	401a      	ands	r2, r3
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	685b      	ldr	r3, [r3, #4]
 80094ba:	009b      	lsls	r3, r3, #2
 80094bc:	429a      	cmp	r2, r3
 80094be:	d1ec      	bne.n	800949a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80094c0:	4b1e      	ldr	r3, [pc, #120]	; (800953c <HAL_RCC_ClockConfig+0x19c>)
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	2201      	movs	r2, #1
 80094c6:	4013      	ands	r3, r2
 80094c8:	683a      	ldr	r2, [r7, #0]
 80094ca:	429a      	cmp	r2, r3
 80094cc:	d211      	bcs.n	80094f2 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80094ce:	4b1b      	ldr	r3, [pc, #108]	; (800953c <HAL_RCC_ClockConfig+0x19c>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	2201      	movs	r2, #1
 80094d4:	4393      	bics	r3, r2
 80094d6:	0019      	movs	r1, r3
 80094d8:	4b18      	ldr	r3, [pc, #96]	; (800953c <HAL_RCC_ClockConfig+0x19c>)
 80094da:	683a      	ldr	r2, [r7, #0]
 80094dc:	430a      	orrs	r2, r1
 80094de:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80094e0:	4b16      	ldr	r3, [pc, #88]	; (800953c <HAL_RCC_ClockConfig+0x19c>)
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	2201      	movs	r2, #1
 80094e6:	4013      	ands	r3, r2
 80094e8:	683a      	ldr	r2, [r7, #0]
 80094ea:	429a      	cmp	r2, r3
 80094ec:	d001      	beq.n	80094f2 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80094ee:	2301      	movs	r3, #1
 80094f0:	e020      	b.n	8009534 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	2204      	movs	r2, #4
 80094f8:	4013      	ands	r3, r2
 80094fa:	d009      	beq.n	8009510 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80094fc:	4b10      	ldr	r3, [pc, #64]	; (8009540 <HAL_RCC_ClockConfig+0x1a0>)
 80094fe:	685b      	ldr	r3, [r3, #4]
 8009500:	4a11      	ldr	r2, [pc, #68]	; (8009548 <HAL_RCC_ClockConfig+0x1a8>)
 8009502:	4013      	ands	r3, r2
 8009504:	0019      	movs	r1, r3
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	68da      	ldr	r2, [r3, #12]
 800950a:	4b0d      	ldr	r3, [pc, #52]	; (8009540 <HAL_RCC_ClockConfig+0x1a0>)
 800950c:	430a      	orrs	r2, r1
 800950e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8009510:	f000 f820 	bl	8009554 <HAL_RCC_GetSysClockFreq>
 8009514:	0001      	movs	r1, r0
 8009516:	4b0a      	ldr	r3, [pc, #40]	; (8009540 <HAL_RCC_ClockConfig+0x1a0>)
 8009518:	685b      	ldr	r3, [r3, #4]
 800951a:	091b      	lsrs	r3, r3, #4
 800951c:	220f      	movs	r2, #15
 800951e:	4013      	ands	r3, r2
 8009520:	4a0a      	ldr	r2, [pc, #40]	; (800954c <HAL_RCC_ClockConfig+0x1ac>)
 8009522:	5cd3      	ldrb	r3, [r2, r3]
 8009524:	000a      	movs	r2, r1
 8009526:	40da      	lsrs	r2, r3
 8009528:	4b09      	ldr	r3, [pc, #36]	; (8009550 <HAL_RCC_ClockConfig+0x1b0>)
 800952a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800952c:	2000      	movs	r0, #0
 800952e:	f7fe f881 	bl	8007634 <HAL_InitTick>
  
  return HAL_OK;
 8009532:	2300      	movs	r3, #0
}
 8009534:	0018      	movs	r0, r3
 8009536:	46bd      	mov	sp, r7
 8009538:	b004      	add	sp, #16
 800953a:	bd80      	pop	{r7, pc}
 800953c:	40022000 	.word	0x40022000
 8009540:	40021000 	.word	0x40021000
 8009544:	00001388 	.word	0x00001388
 8009548:	fffff8ff 	.word	0xfffff8ff
 800954c:	08015a48 	.word	0x08015a48
 8009550:	20000020 	.word	0x20000020

08009554 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b086      	sub	sp, #24
 8009558:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800955a:	2300      	movs	r3, #0
 800955c:	60fb      	str	r3, [r7, #12]
 800955e:	2300      	movs	r3, #0
 8009560:	60bb      	str	r3, [r7, #8]
 8009562:	2300      	movs	r3, #0
 8009564:	617b      	str	r3, [r7, #20]
 8009566:	2300      	movs	r3, #0
 8009568:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800956a:	2300      	movs	r3, #0
 800956c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800956e:	4b2d      	ldr	r3, [pc, #180]	; (8009624 <HAL_RCC_GetSysClockFreq+0xd0>)
 8009570:	685b      	ldr	r3, [r3, #4]
 8009572:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	220c      	movs	r2, #12
 8009578:	4013      	ands	r3, r2
 800957a:	2b0c      	cmp	r3, #12
 800957c:	d046      	beq.n	800960c <HAL_RCC_GetSysClockFreq+0xb8>
 800957e:	d848      	bhi.n	8009612 <HAL_RCC_GetSysClockFreq+0xbe>
 8009580:	2b04      	cmp	r3, #4
 8009582:	d002      	beq.n	800958a <HAL_RCC_GetSysClockFreq+0x36>
 8009584:	2b08      	cmp	r3, #8
 8009586:	d003      	beq.n	8009590 <HAL_RCC_GetSysClockFreq+0x3c>
 8009588:	e043      	b.n	8009612 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800958a:	4b27      	ldr	r3, [pc, #156]	; (8009628 <HAL_RCC_GetSysClockFreq+0xd4>)
 800958c:	613b      	str	r3, [r7, #16]
      break;
 800958e:	e043      	b.n	8009618 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	0c9b      	lsrs	r3, r3, #18
 8009594:	220f      	movs	r2, #15
 8009596:	4013      	ands	r3, r2
 8009598:	4a24      	ldr	r2, [pc, #144]	; (800962c <HAL_RCC_GetSysClockFreq+0xd8>)
 800959a:	5cd3      	ldrb	r3, [r2, r3]
 800959c:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800959e:	4b21      	ldr	r3, [pc, #132]	; (8009624 <HAL_RCC_GetSysClockFreq+0xd0>)
 80095a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095a2:	220f      	movs	r2, #15
 80095a4:	4013      	ands	r3, r2
 80095a6:	4a22      	ldr	r2, [pc, #136]	; (8009630 <HAL_RCC_GetSysClockFreq+0xdc>)
 80095a8:	5cd3      	ldrb	r3, [r2, r3]
 80095aa:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80095ac:	68fa      	ldr	r2, [r7, #12]
 80095ae:	23c0      	movs	r3, #192	; 0xc0
 80095b0:	025b      	lsls	r3, r3, #9
 80095b2:	401a      	ands	r2, r3
 80095b4:	2380      	movs	r3, #128	; 0x80
 80095b6:	025b      	lsls	r3, r3, #9
 80095b8:	429a      	cmp	r2, r3
 80095ba:	d109      	bne.n	80095d0 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80095bc:	68b9      	ldr	r1, [r7, #8]
 80095be:	481a      	ldr	r0, [pc, #104]	; (8009628 <HAL_RCC_GetSysClockFreq+0xd4>)
 80095c0:	f7f9 fd64 	bl	800308c <__udivsi3>
 80095c4:	0003      	movs	r3, r0
 80095c6:	001a      	movs	r2, r3
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	4353      	muls	r3, r2
 80095cc:	617b      	str	r3, [r7, #20]
 80095ce:	e01a      	b.n	8009606 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80095d0:	68fa      	ldr	r2, [r7, #12]
 80095d2:	23c0      	movs	r3, #192	; 0xc0
 80095d4:	025b      	lsls	r3, r3, #9
 80095d6:	401a      	ands	r2, r3
 80095d8:	23c0      	movs	r3, #192	; 0xc0
 80095da:	025b      	lsls	r3, r3, #9
 80095dc:	429a      	cmp	r2, r3
 80095de:	d109      	bne.n	80095f4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80095e0:	68b9      	ldr	r1, [r7, #8]
 80095e2:	4814      	ldr	r0, [pc, #80]	; (8009634 <HAL_RCC_GetSysClockFreq+0xe0>)
 80095e4:	f7f9 fd52 	bl	800308c <__udivsi3>
 80095e8:	0003      	movs	r3, r0
 80095ea:	001a      	movs	r2, r3
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	4353      	muls	r3, r2
 80095f0:	617b      	str	r3, [r7, #20]
 80095f2:	e008      	b.n	8009606 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80095f4:	68b9      	ldr	r1, [r7, #8]
 80095f6:	480c      	ldr	r0, [pc, #48]	; (8009628 <HAL_RCC_GetSysClockFreq+0xd4>)
 80095f8:	f7f9 fd48 	bl	800308c <__udivsi3>
 80095fc:	0003      	movs	r3, r0
 80095fe:	001a      	movs	r2, r3
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	4353      	muls	r3, r2
 8009604:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8009606:	697b      	ldr	r3, [r7, #20]
 8009608:	613b      	str	r3, [r7, #16]
      break;
 800960a:	e005      	b.n	8009618 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800960c:	4b09      	ldr	r3, [pc, #36]	; (8009634 <HAL_RCC_GetSysClockFreq+0xe0>)
 800960e:	613b      	str	r3, [r7, #16]
      break;
 8009610:	e002      	b.n	8009618 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8009612:	4b05      	ldr	r3, [pc, #20]	; (8009628 <HAL_RCC_GetSysClockFreq+0xd4>)
 8009614:	613b      	str	r3, [r7, #16]
      break;
 8009616:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8009618:	693b      	ldr	r3, [r7, #16]
}
 800961a:	0018      	movs	r0, r3
 800961c:	46bd      	mov	sp, r7
 800961e:	b006      	add	sp, #24
 8009620:	bd80      	pop	{r7, pc}
 8009622:	46c0      	nop			; (mov r8, r8)
 8009624:	40021000 	.word	0x40021000
 8009628:	007a1200 	.word	0x007a1200
 800962c:	08015a60 	.word	0x08015a60
 8009630:	08015a70 	.word	0x08015a70
 8009634:	02dc6c00 	.word	0x02dc6c00

08009638 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800963c:	4b02      	ldr	r3, [pc, #8]	; (8009648 <HAL_RCC_GetHCLKFreq+0x10>)
 800963e:	681b      	ldr	r3, [r3, #0]
}
 8009640:	0018      	movs	r0, r3
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}
 8009646:	46c0      	nop			; (mov r8, r8)
 8009648:	20000020 	.word	0x20000020

0800964c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8009650:	f7ff fff2 	bl	8009638 <HAL_RCC_GetHCLKFreq>
 8009654:	0001      	movs	r1, r0
 8009656:	4b06      	ldr	r3, [pc, #24]	; (8009670 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009658:	685b      	ldr	r3, [r3, #4]
 800965a:	0a1b      	lsrs	r3, r3, #8
 800965c:	2207      	movs	r2, #7
 800965e:	4013      	ands	r3, r2
 8009660:	4a04      	ldr	r2, [pc, #16]	; (8009674 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009662:	5cd3      	ldrb	r3, [r2, r3]
 8009664:	40d9      	lsrs	r1, r3
 8009666:	000b      	movs	r3, r1
}    
 8009668:	0018      	movs	r0, r3
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}
 800966e:	46c0      	nop			; (mov r8, r8)
 8009670:	40021000 	.word	0x40021000
 8009674:	08015a58 	.word	0x08015a58

08009678 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b086      	sub	sp, #24
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009680:	2300      	movs	r3, #0
 8009682:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8009684:	2300      	movs	r3, #0
 8009686:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681a      	ldr	r2, [r3, #0]
 800968c:	2380      	movs	r3, #128	; 0x80
 800968e:	025b      	lsls	r3, r3, #9
 8009690:	4013      	ands	r3, r2
 8009692:	d100      	bne.n	8009696 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8009694:	e08e      	b.n	80097b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8009696:	2017      	movs	r0, #23
 8009698:	183b      	adds	r3, r7, r0
 800969a:	2200      	movs	r2, #0
 800969c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800969e:	4b6e      	ldr	r3, [pc, #440]	; (8009858 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80096a0:	69da      	ldr	r2, [r3, #28]
 80096a2:	2380      	movs	r3, #128	; 0x80
 80096a4:	055b      	lsls	r3, r3, #21
 80096a6:	4013      	ands	r3, r2
 80096a8:	d110      	bne.n	80096cc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80096aa:	4b6b      	ldr	r3, [pc, #428]	; (8009858 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80096ac:	69da      	ldr	r2, [r3, #28]
 80096ae:	4b6a      	ldr	r3, [pc, #424]	; (8009858 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80096b0:	2180      	movs	r1, #128	; 0x80
 80096b2:	0549      	lsls	r1, r1, #21
 80096b4:	430a      	orrs	r2, r1
 80096b6:	61da      	str	r2, [r3, #28]
 80096b8:	4b67      	ldr	r3, [pc, #412]	; (8009858 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80096ba:	69da      	ldr	r2, [r3, #28]
 80096bc:	2380      	movs	r3, #128	; 0x80
 80096be:	055b      	lsls	r3, r3, #21
 80096c0:	4013      	ands	r3, r2
 80096c2:	60bb      	str	r3, [r7, #8]
 80096c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80096c6:	183b      	adds	r3, r7, r0
 80096c8:	2201      	movs	r2, #1
 80096ca:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80096cc:	4b63      	ldr	r3, [pc, #396]	; (800985c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80096ce:	681a      	ldr	r2, [r3, #0]
 80096d0:	2380      	movs	r3, #128	; 0x80
 80096d2:	005b      	lsls	r3, r3, #1
 80096d4:	4013      	ands	r3, r2
 80096d6:	d11a      	bne.n	800970e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80096d8:	4b60      	ldr	r3, [pc, #384]	; (800985c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80096da:	681a      	ldr	r2, [r3, #0]
 80096dc:	4b5f      	ldr	r3, [pc, #380]	; (800985c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80096de:	2180      	movs	r1, #128	; 0x80
 80096e0:	0049      	lsls	r1, r1, #1
 80096e2:	430a      	orrs	r2, r1
 80096e4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80096e6:	f7fd ffeb 	bl	80076c0 <HAL_GetTick>
 80096ea:	0003      	movs	r3, r0
 80096ec:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80096ee:	e008      	b.n	8009702 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80096f0:	f7fd ffe6 	bl	80076c0 <HAL_GetTick>
 80096f4:	0002      	movs	r2, r0
 80096f6:	693b      	ldr	r3, [r7, #16]
 80096f8:	1ad3      	subs	r3, r2, r3
 80096fa:	2b64      	cmp	r3, #100	; 0x64
 80096fc:	d901      	bls.n	8009702 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80096fe:	2303      	movs	r3, #3
 8009700:	e0a6      	b.n	8009850 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009702:	4b56      	ldr	r3, [pc, #344]	; (800985c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8009704:	681a      	ldr	r2, [r3, #0]
 8009706:	2380      	movs	r3, #128	; 0x80
 8009708:	005b      	lsls	r3, r3, #1
 800970a:	4013      	ands	r3, r2
 800970c:	d0f0      	beq.n	80096f0 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800970e:	4b52      	ldr	r3, [pc, #328]	; (8009858 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009710:	6a1a      	ldr	r2, [r3, #32]
 8009712:	23c0      	movs	r3, #192	; 0xc0
 8009714:	009b      	lsls	r3, r3, #2
 8009716:	4013      	ands	r3, r2
 8009718:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d034      	beq.n	800978a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	685a      	ldr	r2, [r3, #4]
 8009724:	23c0      	movs	r3, #192	; 0xc0
 8009726:	009b      	lsls	r3, r3, #2
 8009728:	4013      	ands	r3, r2
 800972a:	68fa      	ldr	r2, [r7, #12]
 800972c:	429a      	cmp	r2, r3
 800972e:	d02c      	beq.n	800978a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009730:	4b49      	ldr	r3, [pc, #292]	; (8009858 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009732:	6a1b      	ldr	r3, [r3, #32]
 8009734:	4a4a      	ldr	r2, [pc, #296]	; (8009860 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8009736:	4013      	ands	r3, r2
 8009738:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800973a:	4b47      	ldr	r3, [pc, #284]	; (8009858 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800973c:	6a1a      	ldr	r2, [r3, #32]
 800973e:	4b46      	ldr	r3, [pc, #280]	; (8009858 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009740:	2180      	movs	r1, #128	; 0x80
 8009742:	0249      	lsls	r1, r1, #9
 8009744:	430a      	orrs	r2, r1
 8009746:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009748:	4b43      	ldr	r3, [pc, #268]	; (8009858 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800974a:	6a1a      	ldr	r2, [r3, #32]
 800974c:	4b42      	ldr	r3, [pc, #264]	; (8009858 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800974e:	4945      	ldr	r1, [pc, #276]	; (8009864 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8009750:	400a      	ands	r2, r1
 8009752:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8009754:	4b40      	ldr	r3, [pc, #256]	; (8009858 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009756:	68fa      	ldr	r2, [r7, #12]
 8009758:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	2201      	movs	r2, #1
 800975e:	4013      	ands	r3, r2
 8009760:	d013      	beq.n	800978a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009762:	f7fd ffad 	bl	80076c0 <HAL_GetTick>
 8009766:	0003      	movs	r3, r0
 8009768:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800976a:	e009      	b.n	8009780 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800976c:	f7fd ffa8 	bl	80076c0 <HAL_GetTick>
 8009770:	0002      	movs	r2, r0
 8009772:	693b      	ldr	r3, [r7, #16]
 8009774:	1ad3      	subs	r3, r2, r3
 8009776:	4a3c      	ldr	r2, [pc, #240]	; (8009868 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8009778:	4293      	cmp	r3, r2
 800977a:	d901      	bls.n	8009780 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800977c:	2303      	movs	r3, #3
 800977e:	e067      	b.n	8009850 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009780:	4b35      	ldr	r3, [pc, #212]	; (8009858 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009782:	6a1b      	ldr	r3, [r3, #32]
 8009784:	2202      	movs	r2, #2
 8009786:	4013      	ands	r3, r2
 8009788:	d0f0      	beq.n	800976c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800978a:	4b33      	ldr	r3, [pc, #204]	; (8009858 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800978c:	6a1b      	ldr	r3, [r3, #32]
 800978e:	4a34      	ldr	r2, [pc, #208]	; (8009860 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8009790:	4013      	ands	r3, r2
 8009792:	0019      	movs	r1, r3
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	685a      	ldr	r2, [r3, #4]
 8009798:	4b2f      	ldr	r3, [pc, #188]	; (8009858 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800979a:	430a      	orrs	r2, r1
 800979c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800979e:	2317      	movs	r3, #23
 80097a0:	18fb      	adds	r3, r7, r3
 80097a2:	781b      	ldrb	r3, [r3, #0]
 80097a4:	2b01      	cmp	r3, #1
 80097a6:	d105      	bne.n	80097b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80097a8:	4b2b      	ldr	r3, [pc, #172]	; (8009858 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80097aa:	69da      	ldr	r2, [r3, #28]
 80097ac:	4b2a      	ldr	r3, [pc, #168]	; (8009858 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80097ae:	492f      	ldr	r1, [pc, #188]	; (800986c <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80097b0:	400a      	ands	r2, r1
 80097b2:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	2201      	movs	r2, #1
 80097ba:	4013      	ands	r3, r2
 80097bc:	d009      	beq.n	80097d2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80097be:	4b26      	ldr	r3, [pc, #152]	; (8009858 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80097c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097c2:	2203      	movs	r2, #3
 80097c4:	4393      	bics	r3, r2
 80097c6:	0019      	movs	r1, r3
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	689a      	ldr	r2, [r3, #8]
 80097cc:	4b22      	ldr	r3, [pc, #136]	; (8009858 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80097ce:	430a      	orrs	r2, r1
 80097d0:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	2202      	movs	r2, #2
 80097d8:	4013      	ands	r3, r2
 80097da:	d009      	beq.n	80097f0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80097dc:	4b1e      	ldr	r3, [pc, #120]	; (8009858 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80097de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097e0:	4a23      	ldr	r2, [pc, #140]	; (8009870 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80097e2:	4013      	ands	r3, r2
 80097e4:	0019      	movs	r1, r3
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	68da      	ldr	r2, [r3, #12]
 80097ea:	4b1b      	ldr	r3, [pc, #108]	; (8009858 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80097ec:	430a      	orrs	r2, r1
 80097ee:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681a      	ldr	r2, [r3, #0]
 80097f4:	2380      	movs	r3, #128	; 0x80
 80097f6:	02db      	lsls	r3, r3, #11
 80097f8:	4013      	ands	r3, r2
 80097fa:	d009      	beq.n	8009810 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80097fc:	4b16      	ldr	r3, [pc, #88]	; (8009858 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80097fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009800:	4a1c      	ldr	r2, [pc, #112]	; (8009874 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8009802:	4013      	ands	r3, r2
 8009804:	0019      	movs	r1, r3
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	691a      	ldr	r2, [r3, #16]
 800980a:	4b13      	ldr	r3, [pc, #76]	; (8009858 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800980c:	430a      	orrs	r2, r1
 800980e:	631a      	str	r2, [r3, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	2220      	movs	r2, #32
 8009816:	4013      	ands	r3, r2
 8009818:	d009      	beq.n	800982e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800981a:	4b0f      	ldr	r3, [pc, #60]	; (8009858 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800981c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800981e:	2210      	movs	r2, #16
 8009820:	4393      	bics	r3, r2
 8009822:	0019      	movs	r1, r3
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	695a      	ldr	r2, [r3, #20]
 8009828:	4b0b      	ldr	r3, [pc, #44]	; (8009858 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800982a:	430a      	orrs	r2, r1
 800982c:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681a      	ldr	r2, [r3, #0]
 8009832:	2380      	movs	r3, #128	; 0x80
 8009834:	00db      	lsls	r3, r3, #3
 8009836:	4013      	ands	r3, r2
 8009838:	d009      	beq.n	800984e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800983a:	4b07      	ldr	r3, [pc, #28]	; (8009858 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800983c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800983e:	2240      	movs	r2, #64	; 0x40
 8009840:	4393      	bics	r3, r2
 8009842:	0019      	movs	r1, r3
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	699a      	ldr	r2, [r3, #24]
 8009848:	4b03      	ldr	r3, [pc, #12]	; (8009858 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800984a:	430a      	orrs	r2, r1
 800984c:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800984e:	2300      	movs	r3, #0
}
 8009850:	0018      	movs	r0, r3
 8009852:	46bd      	mov	sp, r7
 8009854:	b006      	add	sp, #24
 8009856:	bd80      	pop	{r7, pc}
 8009858:	40021000 	.word	0x40021000
 800985c:	40007000 	.word	0x40007000
 8009860:	fffffcff 	.word	0xfffffcff
 8009864:	fffeffff 	.word	0xfffeffff
 8009868:	00001388 	.word	0x00001388
 800986c:	efffffff 	.word	0xefffffff
 8009870:	fffcffff 	.word	0xfffcffff
 8009874:	fff3ffff 	.word	0xfff3ffff

08009878 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b082      	sub	sp, #8
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d101      	bne.n	800988a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009886:	2301      	movs	r3, #1
 8009888:	e044      	b.n	8009914 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800988e:	2b00      	cmp	r3, #0
 8009890:	d107      	bne.n	80098a2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2278      	movs	r2, #120	; 0x78
 8009896:	2100      	movs	r1, #0
 8009898:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	0018      	movs	r0, r3
 800989e:	f7fd fe2b 	bl	80074f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2224      	movs	r2, #36	; 0x24
 80098a6:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	681a      	ldr	r2, [r3, #0]
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	2101      	movs	r1, #1
 80098b4:	438a      	bics	r2, r1
 80098b6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	0018      	movs	r0, r3
 80098bc:	f000 f8d0 	bl	8009a60 <UART_SetConfig>
 80098c0:	0003      	movs	r3, r0
 80098c2:	2b01      	cmp	r3, #1
 80098c4:	d101      	bne.n	80098ca <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80098c6:	2301      	movs	r3, #1
 80098c8:	e024      	b.n	8009914 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d003      	beq.n	80098da <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	0018      	movs	r0, r3
 80098d6:	f000 faab 	bl	8009e30 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	685a      	ldr	r2, [r3, #4]
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	490d      	ldr	r1, [pc, #52]	; (800991c <HAL_UART_Init+0xa4>)
 80098e6:	400a      	ands	r2, r1
 80098e8:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	689a      	ldr	r2, [r3, #8]
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	212a      	movs	r1, #42	; 0x2a
 80098f6:	438a      	bics	r2, r1
 80098f8:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	681a      	ldr	r2, [r3, #0]
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	2101      	movs	r1, #1
 8009906:	430a      	orrs	r2, r1
 8009908:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	0018      	movs	r0, r3
 800990e:	f000 fb43 	bl	8009f98 <UART_CheckIdleState>
 8009912:	0003      	movs	r3, r0
}
 8009914:	0018      	movs	r0, r3
 8009916:	46bd      	mov	sp, r7
 8009918:	b002      	add	sp, #8
 800991a:	bd80      	pop	{r7, pc}
 800991c:	ffffb7ff 	.word	0xffffb7ff

08009920 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b08a      	sub	sp, #40	; 0x28
 8009924:	af02      	add	r7, sp, #8
 8009926:	60f8      	str	r0, [r7, #12]
 8009928:	60b9      	str	r1, [r7, #8]
 800992a:	603b      	str	r3, [r7, #0]
 800992c:	1dbb      	adds	r3, r7, #6
 800992e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009934:	2b20      	cmp	r3, #32
 8009936:	d000      	beq.n	800993a <HAL_UART_Transmit+0x1a>
 8009938:	e08d      	b.n	8009a56 <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 800993a:	68bb      	ldr	r3, [r7, #8]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d003      	beq.n	8009948 <HAL_UART_Transmit+0x28>
 8009940:	1dbb      	adds	r3, r7, #6
 8009942:	881b      	ldrh	r3, [r3, #0]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d101      	bne.n	800994c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8009948:	2301      	movs	r3, #1
 800994a:	e085      	b.n	8009a58 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	689a      	ldr	r2, [r3, #8]
 8009950:	2380      	movs	r3, #128	; 0x80
 8009952:	015b      	lsls	r3, r3, #5
 8009954:	429a      	cmp	r2, r3
 8009956:	d109      	bne.n	800996c <HAL_UART_Transmit+0x4c>
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	691b      	ldr	r3, [r3, #16]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d105      	bne.n	800996c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8009960:	68bb      	ldr	r3, [r7, #8]
 8009962:	2201      	movs	r2, #1
 8009964:	4013      	ands	r3, r2
 8009966:	d001      	beq.n	800996c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8009968:	2301      	movs	r3, #1
 800996a:	e075      	b.n	8009a58 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	2284      	movs	r2, #132	; 0x84
 8009970:	2100      	movs	r1, #0
 8009972:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	2221      	movs	r2, #33	; 0x21
 8009978:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800997a:	f7fd fea1 	bl	80076c0 <HAL_GetTick>
 800997e:	0003      	movs	r3, r0
 8009980:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	1dba      	adds	r2, r7, #6
 8009986:	2150      	movs	r1, #80	; 0x50
 8009988:	8812      	ldrh	r2, [r2, #0]
 800998a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	1dba      	adds	r2, r7, #6
 8009990:	2152      	movs	r1, #82	; 0x52
 8009992:	8812      	ldrh	r2, [r2, #0]
 8009994:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	689a      	ldr	r2, [r3, #8]
 800999a:	2380      	movs	r3, #128	; 0x80
 800999c:	015b      	lsls	r3, r3, #5
 800999e:	429a      	cmp	r2, r3
 80099a0:	d108      	bne.n	80099b4 <HAL_UART_Transmit+0x94>
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	691b      	ldr	r3, [r3, #16]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d104      	bne.n	80099b4 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80099aa:	2300      	movs	r3, #0
 80099ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80099ae:	68bb      	ldr	r3, [r7, #8]
 80099b0:	61bb      	str	r3, [r7, #24]
 80099b2:	e003      	b.n	80099bc <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80099b4:	68bb      	ldr	r3, [r7, #8]
 80099b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80099b8:	2300      	movs	r3, #0
 80099ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80099bc:	e030      	b.n	8009a20 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80099be:	697a      	ldr	r2, [r7, #20]
 80099c0:	68f8      	ldr	r0, [r7, #12]
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	9300      	str	r3, [sp, #0]
 80099c6:	0013      	movs	r3, r2
 80099c8:	2200      	movs	r2, #0
 80099ca:	2180      	movs	r1, #128	; 0x80
 80099cc:	f000 fb8c 	bl	800a0e8 <UART_WaitOnFlagUntilTimeout>
 80099d0:	1e03      	subs	r3, r0, #0
 80099d2:	d004      	beq.n	80099de <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	2220      	movs	r2, #32
 80099d8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80099da:	2303      	movs	r3, #3
 80099dc:	e03c      	b.n	8009a58 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 80099de:	69fb      	ldr	r3, [r7, #28]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d10b      	bne.n	80099fc <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80099e4:	69bb      	ldr	r3, [r7, #24]
 80099e6:	881a      	ldrh	r2, [r3, #0]
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	05d2      	lsls	r2, r2, #23
 80099ee:	0dd2      	lsrs	r2, r2, #23
 80099f0:	b292      	uxth	r2, r2
 80099f2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80099f4:	69bb      	ldr	r3, [r7, #24]
 80099f6:	3302      	adds	r3, #2
 80099f8:	61bb      	str	r3, [r7, #24]
 80099fa:	e008      	b.n	8009a0e <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80099fc:	69fb      	ldr	r3, [r7, #28]
 80099fe:	781a      	ldrb	r2, [r3, #0]
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	b292      	uxth	r2, r2
 8009a06:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009a08:	69fb      	ldr	r3, [r7, #28]
 8009a0a:	3301      	adds	r3, #1
 8009a0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	2252      	movs	r2, #82	; 0x52
 8009a12:	5a9b      	ldrh	r3, [r3, r2]
 8009a14:	b29b      	uxth	r3, r3
 8009a16:	3b01      	subs	r3, #1
 8009a18:	b299      	uxth	r1, r3
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	2252      	movs	r2, #82	; 0x52
 8009a1e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	2252      	movs	r2, #82	; 0x52
 8009a24:	5a9b      	ldrh	r3, [r3, r2]
 8009a26:	b29b      	uxth	r3, r3
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d1c8      	bne.n	80099be <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009a2c:	697a      	ldr	r2, [r7, #20]
 8009a2e:	68f8      	ldr	r0, [r7, #12]
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	9300      	str	r3, [sp, #0]
 8009a34:	0013      	movs	r3, r2
 8009a36:	2200      	movs	r2, #0
 8009a38:	2140      	movs	r1, #64	; 0x40
 8009a3a:	f000 fb55 	bl	800a0e8 <UART_WaitOnFlagUntilTimeout>
 8009a3e:	1e03      	subs	r3, r0, #0
 8009a40:	d004      	beq.n	8009a4c <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	2220      	movs	r2, #32
 8009a46:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8009a48:	2303      	movs	r3, #3
 8009a4a:	e005      	b.n	8009a58 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	2220      	movs	r2, #32
 8009a50:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8009a52:	2300      	movs	r3, #0
 8009a54:	e000      	b.n	8009a58 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 8009a56:	2302      	movs	r3, #2
  }
}
 8009a58:	0018      	movs	r0, r3
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	b008      	add	sp, #32
 8009a5e:	bd80      	pop	{r7, pc}

08009a60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b088      	sub	sp, #32
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009a68:	231e      	movs	r3, #30
 8009a6a:	18fb      	adds	r3, r7, r3
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	689a      	ldr	r2, [r3, #8]
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	691b      	ldr	r3, [r3, #16]
 8009a78:	431a      	orrs	r2, r3
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	695b      	ldr	r3, [r3, #20]
 8009a7e:	431a      	orrs	r2, r3
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	69db      	ldr	r3, [r3, #28]
 8009a84:	4313      	orrs	r3, r2
 8009a86:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	4abe      	ldr	r2, [pc, #760]	; (8009d88 <UART_SetConfig+0x328>)
 8009a90:	4013      	ands	r3, r2
 8009a92:	0019      	movs	r1, r3
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	697a      	ldr	r2, [r7, #20]
 8009a9a:	430a      	orrs	r2, r1
 8009a9c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	685b      	ldr	r3, [r3, #4]
 8009aa4:	4ab9      	ldr	r2, [pc, #740]	; (8009d8c <UART_SetConfig+0x32c>)
 8009aa6:	4013      	ands	r3, r2
 8009aa8:	0019      	movs	r1, r3
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	68da      	ldr	r2, [r3, #12]
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	430a      	orrs	r2, r1
 8009ab4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	699b      	ldr	r3, [r3, #24]
 8009aba:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	6a1b      	ldr	r3, [r3, #32]
 8009ac0:	697a      	ldr	r2, [r7, #20]
 8009ac2:	4313      	orrs	r3, r2
 8009ac4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	689b      	ldr	r3, [r3, #8]
 8009acc:	4ab0      	ldr	r2, [pc, #704]	; (8009d90 <UART_SetConfig+0x330>)
 8009ace:	4013      	ands	r3, r2
 8009ad0:	0019      	movs	r1, r3
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	697a      	ldr	r2, [r7, #20]
 8009ad8:	430a      	orrs	r2, r1
 8009ada:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	4aac      	ldr	r2, [pc, #688]	; (8009d94 <UART_SetConfig+0x334>)
 8009ae2:	4293      	cmp	r3, r2
 8009ae4:	d127      	bne.n	8009b36 <UART_SetConfig+0xd6>
 8009ae6:	4bac      	ldr	r3, [pc, #688]	; (8009d98 <UART_SetConfig+0x338>)
 8009ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009aea:	2203      	movs	r2, #3
 8009aec:	4013      	ands	r3, r2
 8009aee:	2b03      	cmp	r3, #3
 8009af0:	d00d      	beq.n	8009b0e <UART_SetConfig+0xae>
 8009af2:	d81b      	bhi.n	8009b2c <UART_SetConfig+0xcc>
 8009af4:	2b02      	cmp	r3, #2
 8009af6:	d014      	beq.n	8009b22 <UART_SetConfig+0xc2>
 8009af8:	d818      	bhi.n	8009b2c <UART_SetConfig+0xcc>
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d002      	beq.n	8009b04 <UART_SetConfig+0xa4>
 8009afe:	2b01      	cmp	r3, #1
 8009b00:	d00a      	beq.n	8009b18 <UART_SetConfig+0xb8>
 8009b02:	e013      	b.n	8009b2c <UART_SetConfig+0xcc>
 8009b04:	231f      	movs	r3, #31
 8009b06:	18fb      	adds	r3, r7, r3
 8009b08:	2200      	movs	r2, #0
 8009b0a:	701a      	strb	r2, [r3, #0]
 8009b0c:	e0bd      	b.n	8009c8a <UART_SetConfig+0x22a>
 8009b0e:	231f      	movs	r3, #31
 8009b10:	18fb      	adds	r3, r7, r3
 8009b12:	2202      	movs	r2, #2
 8009b14:	701a      	strb	r2, [r3, #0]
 8009b16:	e0b8      	b.n	8009c8a <UART_SetConfig+0x22a>
 8009b18:	231f      	movs	r3, #31
 8009b1a:	18fb      	adds	r3, r7, r3
 8009b1c:	2204      	movs	r2, #4
 8009b1e:	701a      	strb	r2, [r3, #0]
 8009b20:	e0b3      	b.n	8009c8a <UART_SetConfig+0x22a>
 8009b22:	231f      	movs	r3, #31
 8009b24:	18fb      	adds	r3, r7, r3
 8009b26:	2208      	movs	r2, #8
 8009b28:	701a      	strb	r2, [r3, #0]
 8009b2a:	e0ae      	b.n	8009c8a <UART_SetConfig+0x22a>
 8009b2c:	231f      	movs	r3, #31
 8009b2e:	18fb      	adds	r3, r7, r3
 8009b30:	2210      	movs	r2, #16
 8009b32:	701a      	strb	r2, [r3, #0]
 8009b34:	e0a9      	b.n	8009c8a <UART_SetConfig+0x22a>
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	4a98      	ldr	r2, [pc, #608]	; (8009d9c <UART_SetConfig+0x33c>)
 8009b3c:	4293      	cmp	r3, r2
 8009b3e:	d134      	bne.n	8009baa <UART_SetConfig+0x14a>
 8009b40:	4b95      	ldr	r3, [pc, #596]	; (8009d98 <UART_SetConfig+0x338>)
 8009b42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009b44:	23c0      	movs	r3, #192	; 0xc0
 8009b46:	029b      	lsls	r3, r3, #10
 8009b48:	4013      	ands	r3, r2
 8009b4a:	22c0      	movs	r2, #192	; 0xc0
 8009b4c:	0292      	lsls	r2, r2, #10
 8009b4e:	4293      	cmp	r3, r2
 8009b50:	d017      	beq.n	8009b82 <UART_SetConfig+0x122>
 8009b52:	22c0      	movs	r2, #192	; 0xc0
 8009b54:	0292      	lsls	r2, r2, #10
 8009b56:	4293      	cmp	r3, r2
 8009b58:	d822      	bhi.n	8009ba0 <UART_SetConfig+0x140>
 8009b5a:	2280      	movs	r2, #128	; 0x80
 8009b5c:	0292      	lsls	r2, r2, #10
 8009b5e:	4293      	cmp	r3, r2
 8009b60:	d019      	beq.n	8009b96 <UART_SetConfig+0x136>
 8009b62:	2280      	movs	r2, #128	; 0x80
 8009b64:	0292      	lsls	r2, r2, #10
 8009b66:	4293      	cmp	r3, r2
 8009b68:	d81a      	bhi.n	8009ba0 <UART_SetConfig+0x140>
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d004      	beq.n	8009b78 <UART_SetConfig+0x118>
 8009b6e:	2280      	movs	r2, #128	; 0x80
 8009b70:	0252      	lsls	r2, r2, #9
 8009b72:	4293      	cmp	r3, r2
 8009b74:	d00a      	beq.n	8009b8c <UART_SetConfig+0x12c>
 8009b76:	e013      	b.n	8009ba0 <UART_SetConfig+0x140>
 8009b78:	231f      	movs	r3, #31
 8009b7a:	18fb      	adds	r3, r7, r3
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	701a      	strb	r2, [r3, #0]
 8009b80:	e083      	b.n	8009c8a <UART_SetConfig+0x22a>
 8009b82:	231f      	movs	r3, #31
 8009b84:	18fb      	adds	r3, r7, r3
 8009b86:	2202      	movs	r2, #2
 8009b88:	701a      	strb	r2, [r3, #0]
 8009b8a:	e07e      	b.n	8009c8a <UART_SetConfig+0x22a>
 8009b8c:	231f      	movs	r3, #31
 8009b8e:	18fb      	adds	r3, r7, r3
 8009b90:	2204      	movs	r2, #4
 8009b92:	701a      	strb	r2, [r3, #0]
 8009b94:	e079      	b.n	8009c8a <UART_SetConfig+0x22a>
 8009b96:	231f      	movs	r3, #31
 8009b98:	18fb      	adds	r3, r7, r3
 8009b9a:	2208      	movs	r2, #8
 8009b9c:	701a      	strb	r2, [r3, #0]
 8009b9e:	e074      	b.n	8009c8a <UART_SetConfig+0x22a>
 8009ba0:	231f      	movs	r3, #31
 8009ba2:	18fb      	adds	r3, r7, r3
 8009ba4:	2210      	movs	r2, #16
 8009ba6:	701a      	strb	r2, [r3, #0]
 8009ba8:	e06f      	b.n	8009c8a <UART_SetConfig+0x22a>
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	4a7c      	ldr	r2, [pc, #496]	; (8009da0 <UART_SetConfig+0x340>)
 8009bb0:	4293      	cmp	r3, r2
 8009bb2:	d134      	bne.n	8009c1e <UART_SetConfig+0x1be>
 8009bb4:	4b78      	ldr	r3, [pc, #480]	; (8009d98 <UART_SetConfig+0x338>)
 8009bb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009bb8:	23c0      	movs	r3, #192	; 0xc0
 8009bba:	031b      	lsls	r3, r3, #12
 8009bbc:	4013      	ands	r3, r2
 8009bbe:	22c0      	movs	r2, #192	; 0xc0
 8009bc0:	0312      	lsls	r2, r2, #12
 8009bc2:	4293      	cmp	r3, r2
 8009bc4:	d017      	beq.n	8009bf6 <UART_SetConfig+0x196>
 8009bc6:	22c0      	movs	r2, #192	; 0xc0
 8009bc8:	0312      	lsls	r2, r2, #12
 8009bca:	4293      	cmp	r3, r2
 8009bcc:	d822      	bhi.n	8009c14 <UART_SetConfig+0x1b4>
 8009bce:	2280      	movs	r2, #128	; 0x80
 8009bd0:	0312      	lsls	r2, r2, #12
 8009bd2:	4293      	cmp	r3, r2
 8009bd4:	d019      	beq.n	8009c0a <UART_SetConfig+0x1aa>
 8009bd6:	2280      	movs	r2, #128	; 0x80
 8009bd8:	0312      	lsls	r2, r2, #12
 8009bda:	4293      	cmp	r3, r2
 8009bdc:	d81a      	bhi.n	8009c14 <UART_SetConfig+0x1b4>
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d004      	beq.n	8009bec <UART_SetConfig+0x18c>
 8009be2:	2280      	movs	r2, #128	; 0x80
 8009be4:	02d2      	lsls	r2, r2, #11
 8009be6:	4293      	cmp	r3, r2
 8009be8:	d00a      	beq.n	8009c00 <UART_SetConfig+0x1a0>
 8009bea:	e013      	b.n	8009c14 <UART_SetConfig+0x1b4>
 8009bec:	231f      	movs	r3, #31
 8009bee:	18fb      	adds	r3, r7, r3
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	701a      	strb	r2, [r3, #0]
 8009bf4:	e049      	b.n	8009c8a <UART_SetConfig+0x22a>
 8009bf6:	231f      	movs	r3, #31
 8009bf8:	18fb      	adds	r3, r7, r3
 8009bfa:	2202      	movs	r2, #2
 8009bfc:	701a      	strb	r2, [r3, #0]
 8009bfe:	e044      	b.n	8009c8a <UART_SetConfig+0x22a>
 8009c00:	231f      	movs	r3, #31
 8009c02:	18fb      	adds	r3, r7, r3
 8009c04:	2204      	movs	r2, #4
 8009c06:	701a      	strb	r2, [r3, #0]
 8009c08:	e03f      	b.n	8009c8a <UART_SetConfig+0x22a>
 8009c0a:	231f      	movs	r3, #31
 8009c0c:	18fb      	adds	r3, r7, r3
 8009c0e:	2208      	movs	r2, #8
 8009c10:	701a      	strb	r2, [r3, #0]
 8009c12:	e03a      	b.n	8009c8a <UART_SetConfig+0x22a>
 8009c14:	231f      	movs	r3, #31
 8009c16:	18fb      	adds	r3, r7, r3
 8009c18:	2210      	movs	r2, #16
 8009c1a:	701a      	strb	r2, [r3, #0]
 8009c1c:	e035      	b.n	8009c8a <UART_SetConfig+0x22a>
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	4a60      	ldr	r2, [pc, #384]	; (8009da4 <UART_SetConfig+0x344>)
 8009c24:	4293      	cmp	r3, r2
 8009c26:	d104      	bne.n	8009c32 <UART_SetConfig+0x1d2>
 8009c28:	231f      	movs	r3, #31
 8009c2a:	18fb      	adds	r3, r7, r3
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	701a      	strb	r2, [r3, #0]
 8009c30:	e02b      	b.n	8009c8a <UART_SetConfig+0x22a>
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	4a5c      	ldr	r2, [pc, #368]	; (8009da8 <UART_SetConfig+0x348>)
 8009c38:	4293      	cmp	r3, r2
 8009c3a:	d104      	bne.n	8009c46 <UART_SetConfig+0x1e6>
 8009c3c:	231f      	movs	r3, #31
 8009c3e:	18fb      	adds	r3, r7, r3
 8009c40:	2200      	movs	r2, #0
 8009c42:	701a      	strb	r2, [r3, #0]
 8009c44:	e021      	b.n	8009c8a <UART_SetConfig+0x22a>
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	4a58      	ldr	r2, [pc, #352]	; (8009dac <UART_SetConfig+0x34c>)
 8009c4c:	4293      	cmp	r3, r2
 8009c4e:	d104      	bne.n	8009c5a <UART_SetConfig+0x1fa>
 8009c50:	231f      	movs	r3, #31
 8009c52:	18fb      	adds	r3, r7, r3
 8009c54:	2200      	movs	r2, #0
 8009c56:	701a      	strb	r2, [r3, #0]
 8009c58:	e017      	b.n	8009c8a <UART_SetConfig+0x22a>
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	4a54      	ldr	r2, [pc, #336]	; (8009db0 <UART_SetConfig+0x350>)
 8009c60:	4293      	cmp	r3, r2
 8009c62:	d104      	bne.n	8009c6e <UART_SetConfig+0x20e>
 8009c64:	231f      	movs	r3, #31
 8009c66:	18fb      	adds	r3, r7, r3
 8009c68:	2200      	movs	r2, #0
 8009c6a:	701a      	strb	r2, [r3, #0]
 8009c6c:	e00d      	b.n	8009c8a <UART_SetConfig+0x22a>
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	4a50      	ldr	r2, [pc, #320]	; (8009db4 <UART_SetConfig+0x354>)
 8009c74:	4293      	cmp	r3, r2
 8009c76:	d104      	bne.n	8009c82 <UART_SetConfig+0x222>
 8009c78:	231f      	movs	r3, #31
 8009c7a:	18fb      	adds	r3, r7, r3
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	701a      	strb	r2, [r3, #0]
 8009c80:	e003      	b.n	8009c8a <UART_SetConfig+0x22a>
 8009c82:	231f      	movs	r3, #31
 8009c84:	18fb      	adds	r3, r7, r3
 8009c86:	2210      	movs	r2, #16
 8009c88:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	69da      	ldr	r2, [r3, #28]
 8009c8e:	2380      	movs	r3, #128	; 0x80
 8009c90:	021b      	lsls	r3, r3, #8
 8009c92:	429a      	cmp	r2, r3
 8009c94:	d15c      	bne.n	8009d50 <UART_SetConfig+0x2f0>
  {
    switch (clocksource)
 8009c96:	231f      	movs	r3, #31
 8009c98:	18fb      	adds	r3, r7, r3
 8009c9a:	781b      	ldrb	r3, [r3, #0]
 8009c9c:	2b08      	cmp	r3, #8
 8009c9e:	d015      	beq.n	8009ccc <UART_SetConfig+0x26c>
 8009ca0:	dc18      	bgt.n	8009cd4 <UART_SetConfig+0x274>
 8009ca2:	2b04      	cmp	r3, #4
 8009ca4:	d00d      	beq.n	8009cc2 <UART_SetConfig+0x262>
 8009ca6:	dc15      	bgt.n	8009cd4 <UART_SetConfig+0x274>
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d002      	beq.n	8009cb2 <UART_SetConfig+0x252>
 8009cac:	2b02      	cmp	r3, #2
 8009cae:	d005      	beq.n	8009cbc <UART_SetConfig+0x25c>
 8009cb0:	e010      	b.n	8009cd4 <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009cb2:	f7ff fccb 	bl	800964c <HAL_RCC_GetPCLK1Freq>
 8009cb6:	0003      	movs	r3, r0
 8009cb8:	61bb      	str	r3, [r7, #24]
        break;
 8009cba:	e012      	b.n	8009ce2 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009cbc:	4b3e      	ldr	r3, [pc, #248]	; (8009db8 <UART_SetConfig+0x358>)
 8009cbe:	61bb      	str	r3, [r7, #24]
        break;
 8009cc0:	e00f      	b.n	8009ce2 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009cc2:	f7ff fc47 	bl	8009554 <HAL_RCC_GetSysClockFreq>
 8009cc6:	0003      	movs	r3, r0
 8009cc8:	61bb      	str	r3, [r7, #24]
        break;
 8009cca:	e00a      	b.n	8009ce2 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009ccc:	2380      	movs	r3, #128	; 0x80
 8009cce:	021b      	lsls	r3, r3, #8
 8009cd0:	61bb      	str	r3, [r7, #24]
        break;
 8009cd2:	e006      	b.n	8009ce2 <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009cd8:	231e      	movs	r3, #30
 8009cda:	18fb      	adds	r3, r7, r3
 8009cdc:	2201      	movs	r2, #1
 8009cde:	701a      	strb	r2, [r3, #0]
        break;
 8009ce0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009ce2:	69bb      	ldr	r3, [r7, #24]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d100      	bne.n	8009cea <UART_SetConfig+0x28a>
 8009ce8:	e095      	b.n	8009e16 <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009cea:	69bb      	ldr	r3, [r7, #24]
 8009cec:	005a      	lsls	r2, r3, #1
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	685b      	ldr	r3, [r3, #4]
 8009cf2:	085b      	lsrs	r3, r3, #1
 8009cf4:	18d2      	adds	r2, r2, r3
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	685b      	ldr	r3, [r3, #4]
 8009cfa:	0019      	movs	r1, r3
 8009cfc:	0010      	movs	r0, r2
 8009cfe:	f7f9 f9c5 	bl	800308c <__udivsi3>
 8009d02:	0003      	movs	r3, r0
 8009d04:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009d06:	693b      	ldr	r3, [r7, #16]
 8009d08:	2b0f      	cmp	r3, #15
 8009d0a:	d91c      	bls.n	8009d46 <UART_SetConfig+0x2e6>
 8009d0c:	693a      	ldr	r2, [r7, #16]
 8009d0e:	2380      	movs	r3, #128	; 0x80
 8009d10:	025b      	lsls	r3, r3, #9
 8009d12:	429a      	cmp	r2, r3
 8009d14:	d217      	bcs.n	8009d46 <UART_SetConfig+0x2e6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009d16:	693b      	ldr	r3, [r7, #16]
 8009d18:	b29a      	uxth	r2, r3
 8009d1a:	200e      	movs	r0, #14
 8009d1c:	183b      	adds	r3, r7, r0
 8009d1e:	210f      	movs	r1, #15
 8009d20:	438a      	bics	r2, r1
 8009d22:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009d24:	693b      	ldr	r3, [r7, #16]
 8009d26:	085b      	lsrs	r3, r3, #1
 8009d28:	b29b      	uxth	r3, r3
 8009d2a:	2207      	movs	r2, #7
 8009d2c:	4013      	ands	r3, r2
 8009d2e:	b299      	uxth	r1, r3
 8009d30:	183b      	adds	r3, r7, r0
 8009d32:	183a      	adds	r2, r7, r0
 8009d34:	8812      	ldrh	r2, [r2, #0]
 8009d36:	430a      	orrs	r2, r1
 8009d38:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	183a      	adds	r2, r7, r0
 8009d40:	8812      	ldrh	r2, [r2, #0]
 8009d42:	60da      	str	r2, [r3, #12]
 8009d44:	e067      	b.n	8009e16 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8009d46:	231e      	movs	r3, #30
 8009d48:	18fb      	adds	r3, r7, r3
 8009d4a:	2201      	movs	r2, #1
 8009d4c:	701a      	strb	r2, [r3, #0]
 8009d4e:	e062      	b.n	8009e16 <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009d50:	231f      	movs	r3, #31
 8009d52:	18fb      	adds	r3, r7, r3
 8009d54:	781b      	ldrb	r3, [r3, #0]
 8009d56:	2b08      	cmp	r3, #8
 8009d58:	d030      	beq.n	8009dbc <UART_SetConfig+0x35c>
 8009d5a:	dc33      	bgt.n	8009dc4 <UART_SetConfig+0x364>
 8009d5c:	2b04      	cmp	r3, #4
 8009d5e:	d00d      	beq.n	8009d7c <UART_SetConfig+0x31c>
 8009d60:	dc30      	bgt.n	8009dc4 <UART_SetConfig+0x364>
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d002      	beq.n	8009d6c <UART_SetConfig+0x30c>
 8009d66:	2b02      	cmp	r3, #2
 8009d68:	d005      	beq.n	8009d76 <UART_SetConfig+0x316>
 8009d6a:	e02b      	b.n	8009dc4 <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009d6c:	f7ff fc6e 	bl	800964c <HAL_RCC_GetPCLK1Freq>
 8009d70:	0003      	movs	r3, r0
 8009d72:	61bb      	str	r3, [r7, #24]
        break;
 8009d74:	e02d      	b.n	8009dd2 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009d76:	4b10      	ldr	r3, [pc, #64]	; (8009db8 <UART_SetConfig+0x358>)
 8009d78:	61bb      	str	r3, [r7, #24]
        break;
 8009d7a:	e02a      	b.n	8009dd2 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009d7c:	f7ff fbea 	bl	8009554 <HAL_RCC_GetSysClockFreq>
 8009d80:	0003      	movs	r3, r0
 8009d82:	61bb      	str	r3, [r7, #24]
        break;
 8009d84:	e025      	b.n	8009dd2 <UART_SetConfig+0x372>
 8009d86:	46c0      	nop			; (mov r8, r8)
 8009d88:	efff69f3 	.word	0xefff69f3
 8009d8c:	ffffcfff 	.word	0xffffcfff
 8009d90:	fffff4ff 	.word	0xfffff4ff
 8009d94:	40013800 	.word	0x40013800
 8009d98:	40021000 	.word	0x40021000
 8009d9c:	40004400 	.word	0x40004400
 8009da0:	40004800 	.word	0x40004800
 8009da4:	40004c00 	.word	0x40004c00
 8009da8:	40005000 	.word	0x40005000
 8009dac:	40011400 	.word	0x40011400
 8009db0:	40011800 	.word	0x40011800
 8009db4:	40011c00 	.word	0x40011c00
 8009db8:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009dbc:	2380      	movs	r3, #128	; 0x80
 8009dbe:	021b      	lsls	r3, r3, #8
 8009dc0:	61bb      	str	r3, [r7, #24]
        break;
 8009dc2:	e006      	b.n	8009dd2 <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009dc8:	231e      	movs	r3, #30
 8009dca:	18fb      	adds	r3, r7, r3
 8009dcc:	2201      	movs	r2, #1
 8009dce:	701a      	strb	r2, [r3, #0]
        break;
 8009dd0:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8009dd2:	69bb      	ldr	r3, [r7, #24]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d01e      	beq.n	8009e16 <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	685b      	ldr	r3, [r3, #4]
 8009ddc:	085a      	lsrs	r2, r3, #1
 8009dde:	69bb      	ldr	r3, [r7, #24]
 8009de0:	18d2      	adds	r2, r2, r3
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	685b      	ldr	r3, [r3, #4]
 8009de6:	0019      	movs	r1, r3
 8009de8:	0010      	movs	r0, r2
 8009dea:	f7f9 f94f 	bl	800308c <__udivsi3>
 8009dee:	0003      	movs	r3, r0
 8009df0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009df2:	693b      	ldr	r3, [r7, #16]
 8009df4:	2b0f      	cmp	r3, #15
 8009df6:	d90a      	bls.n	8009e0e <UART_SetConfig+0x3ae>
 8009df8:	693a      	ldr	r2, [r7, #16]
 8009dfa:	2380      	movs	r3, #128	; 0x80
 8009dfc:	025b      	lsls	r3, r3, #9
 8009dfe:	429a      	cmp	r2, r3
 8009e00:	d205      	bcs.n	8009e0e <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009e02:	693b      	ldr	r3, [r7, #16]
 8009e04:	b29a      	uxth	r2, r3
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	60da      	str	r2, [r3, #12]
 8009e0c:	e003      	b.n	8009e16 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8009e0e:	231e      	movs	r3, #30
 8009e10:	18fb      	adds	r3, r7, r3
 8009e12:	2201      	movs	r2, #1
 8009e14:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2200      	movs	r2, #0
 8009e1a:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2200      	movs	r2, #0
 8009e20:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8009e22:	231e      	movs	r3, #30
 8009e24:	18fb      	adds	r3, r7, r3
 8009e26:	781b      	ldrb	r3, [r3, #0]
}
 8009e28:	0018      	movs	r0, r3
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	b008      	add	sp, #32
 8009e2e:	bd80      	pop	{r7, pc}

08009e30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b082      	sub	sp, #8
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e3c:	2201      	movs	r2, #1
 8009e3e:	4013      	ands	r3, r2
 8009e40:	d00b      	beq.n	8009e5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	685b      	ldr	r3, [r3, #4]
 8009e48:	4a4a      	ldr	r2, [pc, #296]	; (8009f74 <UART_AdvFeatureConfig+0x144>)
 8009e4a:	4013      	ands	r3, r2
 8009e4c:	0019      	movs	r1, r3
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	430a      	orrs	r2, r1
 8009e58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e5e:	2202      	movs	r2, #2
 8009e60:	4013      	ands	r3, r2
 8009e62:	d00b      	beq.n	8009e7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	685b      	ldr	r3, [r3, #4]
 8009e6a:	4a43      	ldr	r2, [pc, #268]	; (8009f78 <UART_AdvFeatureConfig+0x148>)
 8009e6c:	4013      	ands	r3, r2
 8009e6e:	0019      	movs	r1, r3
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	430a      	orrs	r2, r1
 8009e7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e80:	2204      	movs	r2, #4
 8009e82:	4013      	ands	r3, r2
 8009e84:	d00b      	beq.n	8009e9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	685b      	ldr	r3, [r3, #4]
 8009e8c:	4a3b      	ldr	r2, [pc, #236]	; (8009f7c <UART_AdvFeatureConfig+0x14c>)
 8009e8e:	4013      	ands	r3, r2
 8009e90:	0019      	movs	r1, r3
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	430a      	orrs	r2, r1
 8009e9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ea2:	2208      	movs	r2, #8
 8009ea4:	4013      	ands	r3, r2
 8009ea6:	d00b      	beq.n	8009ec0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	685b      	ldr	r3, [r3, #4]
 8009eae:	4a34      	ldr	r2, [pc, #208]	; (8009f80 <UART_AdvFeatureConfig+0x150>)
 8009eb0:	4013      	ands	r3, r2
 8009eb2:	0019      	movs	r1, r3
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	430a      	orrs	r2, r1
 8009ebe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ec4:	2210      	movs	r2, #16
 8009ec6:	4013      	ands	r3, r2
 8009ec8:	d00b      	beq.n	8009ee2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	689b      	ldr	r3, [r3, #8]
 8009ed0:	4a2c      	ldr	r2, [pc, #176]	; (8009f84 <UART_AdvFeatureConfig+0x154>)
 8009ed2:	4013      	ands	r3, r2
 8009ed4:	0019      	movs	r1, r3
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	430a      	orrs	r2, r1
 8009ee0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ee6:	2220      	movs	r2, #32
 8009ee8:	4013      	ands	r3, r2
 8009eea:	d00b      	beq.n	8009f04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	689b      	ldr	r3, [r3, #8]
 8009ef2:	4a25      	ldr	r2, [pc, #148]	; (8009f88 <UART_AdvFeatureConfig+0x158>)
 8009ef4:	4013      	ands	r3, r2
 8009ef6:	0019      	movs	r1, r3
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	430a      	orrs	r2, r1
 8009f02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f08:	2240      	movs	r2, #64	; 0x40
 8009f0a:	4013      	ands	r3, r2
 8009f0c:	d01d      	beq.n	8009f4a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	685b      	ldr	r3, [r3, #4]
 8009f14:	4a1d      	ldr	r2, [pc, #116]	; (8009f8c <UART_AdvFeatureConfig+0x15c>)
 8009f16:	4013      	ands	r3, r2
 8009f18:	0019      	movs	r1, r3
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	430a      	orrs	r2, r1
 8009f24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009f2a:	2380      	movs	r3, #128	; 0x80
 8009f2c:	035b      	lsls	r3, r3, #13
 8009f2e:	429a      	cmp	r2, r3
 8009f30:	d10b      	bne.n	8009f4a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	685b      	ldr	r3, [r3, #4]
 8009f38:	4a15      	ldr	r2, [pc, #84]	; (8009f90 <UART_AdvFeatureConfig+0x160>)
 8009f3a:	4013      	ands	r3, r2
 8009f3c:	0019      	movs	r1, r3
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	430a      	orrs	r2, r1
 8009f48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f4e:	2280      	movs	r2, #128	; 0x80
 8009f50:	4013      	ands	r3, r2
 8009f52:	d00b      	beq.n	8009f6c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	685b      	ldr	r3, [r3, #4]
 8009f5a:	4a0e      	ldr	r2, [pc, #56]	; (8009f94 <UART_AdvFeatureConfig+0x164>)
 8009f5c:	4013      	ands	r3, r2
 8009f5e:	0019      	movs	r1, r3
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	430a      	orrs	r2, r1
 8009f6a:	605a      	str	r2, [r3, #4]
  }
}
 8009f6c:	46c0      	nop			; (mov r8, r8)
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	b002      	add	sp, #8
 8009f72:	bd80      	pop	{r7, pc}
 8009f74:	fffdffff 	.word	0xfffdffff
 8009f78:	fffeffff 	.word	0xfffeffff
 8009f7c:	fffbffff 	.word	0xfffbffff
 8009f80:	ffff7fff 	.word	0xffff7fff
 8009f84:	ffffefff 	.word	0xffffefff
 8009f88:	ffffdfff 	.word	0xffffdfff
 8009f8c:	ffefffff 	.word	0xffefffff
 8009f90:	ff9fffff 	.word	0xff9fffff
 8009f94:	fff7ffff 	.word	0xfff7ffff

08009f98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b092      	sub	sp, #72	; 0x48
 8009f9c:	af02      	add	r7, sp, #8
 8009f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2284      	movs	r2, #132	; 0x84
 8009fa4:	2100      	movs	r1, #0
 8009fa6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009fa8:	f7fd fb8a 	bl	80076c0 <HAL_GetTick>
 8009fac:	0003      	movs	r3, r0
 8009fae:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	2208      	movs	r2, #8
 8009fb8:	4013      	ands	r3, r2
 8009fba:	2b08      	cmp	r3, #8
 8009fbc:	d12c      	bne.n	800a018 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009fbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fc0:	2280      	movs	r2, #128	; 0x80
 8009fc2:	0391      	lsls	r1, r2, #14
 8009fc4:	6878      	ldr	r0, [r7, #4]
 8009fc6:	4a46      	ldr	r2, [pc, #280]	; (800a0e0 <UART_CheckIdleState+0x148>)
 8009fc8:	9200      	str	r2, [sp, #0]
 8009fca:	2200      	movs	r2, #0
 8009fcc:	f000 f88c 	bl	800a0e8 <UART_WaitOnFlagUntilTimeout>
 8009fd0:	1e03      	subs	r3, r0, #0
 8009fd2:	d021      	beq.n	800a018 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009fd4:	f3ef 8310 	mrs	r3, PRIMASK
 8009fd8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8009fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8009fdc:	63bb      	str	r3, [r7, #56]	; 0x38
 8009fde:	2301      	movs	r3, #1
 8009fe0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fe4:	f383 8810 	msr	PRIMASK, r3
}
 8009fe8:	46c0      	nop			; (mov r8, r8)
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	681a      	ldr	r2, [r3, #0]
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	2180      	movs	r1, #128	; 0x80
 8009ff6:	438a      	bics	r2, r1
 8009ff8:	601a      	str	r2, [r3, #0]
 8009ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a000:	f383 8810 	msr	PRIMASK, r3
}
 800a004:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2220      	movs	r2, #32
 800a00a:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2278      	movs	r2, #120	; 0x78
 800a010:	2100      	movs	r1, #0
 800a012:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a014:	2303      	movs	r3, #3
 800a016:	e05f      	b.n	800a0d8 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	2204      	movs	r2, #4
 800a020:	4013      	ands	r3, r2
 800a022:	2b04      	cmp	r3, #4
 800a024:	d146      	bne.n	800a0b4 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a026:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a028:	2280      	movs	r2, #128	; 0x80
 800a02a:	03d1      	lsls	r1, r2, #15
 800a02c:	6878      	ldr	r0, [r7, #4]
 800a02e:	4a2c      	ldr	r2, [pc, #176]	; (800a0e0 <UART_CheckIdleState+0x148>)
 800a030:	9200      	str	r2, [sp, #0]
 800a032:	2200      	movs	r2, #0
 800a034:	f000 f858 	bl	800a0e8 <UART_WaitOnFlagUntilTimeout>
 800a038:	1e03      	subs	r3, r0, #0
 800a03a:	d03b      	beq.n	800a0b4 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a03c:	f3ef 8310 	mrs	r3, PRIMASK
 800a040:	60fb      	str	r3, [r7, #12]
  return(result);
 800a042:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a044:	637b      	str	r3, [r7, #52]	; 0x34
 800a046:	2301      	movs	r3, #1
 800a048:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a04a:	693b      	ldr	r3, [r7, #16]
 800a04c:	f383 8810 	msr	PRIMASK, r3
}
 800a050:	46c0      	nop			; (mov r8, r8)
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	681a      	ldr	r2, [r3, #0]
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	4921      	ldr	r1, [pc, #132]	; (800a0e4 <UART_CheckIdleState+0x14c>)
 800a05e:	400a      	ands	r2, r1
 800a060:	601a      	str	r2, [r3, #0]
 800a062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a064:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a066:	697b      	ldr	r3, [r7, #20]
 800a068:	f383 8810 	msr	PRIMASK, r3
}
 800a06c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a06e:	f3ef 8310 	mrs	r3, PRIMASK
 800a072:	61bb      	str	r3, [r7, #24]
  return(result);
 800a074:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a076:	633b      	str	r3, [r7, #48]	; 0x30
 800a078:	2301      	movs	r3, #1
 800a07a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a07c:	69fb      	ldr	r3, [r7, #28]
 800a07e:	f383 8810 	msr	PRIMASK, r3
}
 800a082:	46c0      	nop			; (mov r8, r8)
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	689a      	ldr	r2, [r3, #8]
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	2101      	movs	r1, #1
 800a090:	438a      	bics	r2, r1
 800a092:	609a      	str	r2, [r3, #8]
 800a094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a096:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a098:	6a3b      	ldr	r3, [r7, #32]
 800a09a:	f383 8810 	msr	PRIMASK, r3
}
 800a09e:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2280      	movs	r2, #128	; 0x80
 800a0a4:	2120      	movs	r1, #32
 800a0a6:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2278      	movs	r2, #120	; 0x78
 800a0ac:	2100      	movs	r1, #0
 800a0ae:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a0b0:	2303      	movs	r3, #3
 800a0b2:	e011      	b.n	800a0d8 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2220      	movs	r2, #32
 800a0b8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2280      	movs	r2, #128	; 0x80
 800a0be:	2120      	movs	r1, #32
 800a0c0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	2278      	movs	r2, #120	; 0x78
 800a0d2:	2100      	movs	r1, #0
 800a0d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a0d6:	2300      	movs	r3, #0
}
 800a0d8:	0018      	movs	r0, r3
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	b010      	add	sp, #64	; 0x40
 800a0de:	bd80      	pop	{r7, pc}
 800a0e0:	01ffffff 	.word	0x01ffffff
 800a0e4:	fffffedf 	.word	0xfffffedf

0800a0e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b084      	sub	sp, #16
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	60f8      	str	r0, [r7, #12]
 800a0f0:	60b9      	str	r1, [r7, #8]
 800a0f2:	603b      	str	r3, [r7, #0]
 800a0f4:	1dfb      	adds	r3, r7, #7
 800a0f6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a0f8:	e04b      	b.n	800a192 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a0fa:	69bb      	ldr	r3, [r7, #24]
 800a0fc:	3301      	adds	r3, #1
 800a0fe:	d048      	beq.n	800a192 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a100:	f7fd fade 	bl	80076c0 <HAL_GetTick>
 800a104:	0002      	movs	r2, r0
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	1ad3      	subs	r3, r2, r3
 800a10a:	69ba      	ldr	r2, [r7, #24]
 800a10c:	429a      	cmp	r2, r3
 800a10e:	d302      	bcc.n	800a116 <UART_WaitOnFlagUntilTimeout+0x2e>
 800a110:	69bb      	ldr	r3, [r7, #24]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d101      	bne.n	800a11a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800a116:	2303      	movs	r3, #3
 800a118:	e04b      	b.n	800a1b2 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	2204      	movs	r2, #4
 800a122:	4013      	ands	r3, r2
 800a124:	d035      	beq.n	800a192 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	69db      	ldr	r3, [r3, #28]
 800a12c:	2208      	movs	r2, #8
 800a12e:	4013      	ands	r3, r2
 800a130:	2b08      	cmp	r3, #8
 800a132:	d111      	bne.n	800a158 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	2208      	movs	r2, #8
 800a13a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	0018      	movs	r0, r3
 800a140:	f000 f83c 	bl	800a1bc <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	2284      	movs	r2, #132	; 0x84
 800a148:	2108      	movs	r1, #8
 800a14a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	2278      	movs	r2, #120	; 0x78
 800a150:	2100      	movs	r1, #0
 800a152:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 800a154:	2301      	movs	r3, #1
 800a156:	e02c      	b.n	800a1b2 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	69da      	ldr	r2, [r3, #28]
 800a15e:	2380      	movs	r3, #128	; 0x80
 800a160:	011b      	lsls	r3, r3, #4
 800a162:	401a      	ands	r2, r3
 800a164:	2380      	movs	r3, #128	; 0x80
 800a166:	011b      	lsls	r3, r3, #4
 800a168:	429a      	cmp	r2, r3
 800a16a:	d112      	bne.n	800a192 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	2280      	movs	r2, #128	; 0x80
 800a172:	0112      	lsls	r2, r2, #4
 800a174:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	0018      	movs	r0, r3
 800a17a:	f000 f81f 	bl	800a1bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	2284      	movs	r2, #132	; 0x84
 800a182:	2120      	movs	r1, #32
 800a184:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	2278      	movs	r2, #120	; 0x78
 800a18a:	2100      	movs	r1, #0
 800a18c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800a18e:	2303      	movs	r3, #3
 800a190:	e00f      	b.n	800a1b2 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	69db      	ldr	r3, [r3, #28]
 800a198:	68ba      	ldr	r2, [r7, #8]
 800a19a:	4013      	ands	r3, r2
 800a19c:	68ba      	ldr	r2, [r7, #8]
 800a19e:	1ad3      	subs	r3, r2, r3
 800a1a0:	425a      	negs	r2, r3
 800a1a2:	4153      	adcs	r3, r2
 800a1a4:	b2db      	uxtb	r3, r3
 800a1a6:	001a      	movs	r2, r3
 800a1a8:	1dfb      	adds	r3, r7, #7
 800a1aa:	781b      	ldrb	r3, [r3, #0]
 800a1ac:	429a      	cmp	r2, r3
 800a1ae:	d0a4      	beq.n	800a0fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a1b0:	2300      	movs	r3, #0
}
 800a1b2:	0018      	movs	r0, r3
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	b004      	add	sp, #16
 800a1b8:	bd80      	pop	{r7, pc}
	...

0800a1bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b08e      	sub	sp, #56	; 0x38
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a1c4:	f3ef 8310 	mrs	r3, PRIMASK
 800a1c8:	617b      	str	r3, [r7, #20]
  return(result);
 800a1ca:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a1cc:	637b      	str	r3, [r7, #52]	; 0x34
 800a1ce:	2301      	movs	r3, #1
 800a1d0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a1d2:	69bb      	ldr	r3, [r7, #24]
 800a1d4:	f383 8810 	msr	PRIMASK, r3
}
 800a1d8:	46c0      	nop			; (mov r8, r8)
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	681a      	ldr	r2, [r3, #0]
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	4926      	ldr	r1, [pc, #152]	; (800a280 <UART_EndRxTransfer+0xc4>)
 800a1e6:	400a      	ands	r2, r1
 800a1e8:	601a      	str	r2, [r3, #0]
 800a1ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1ec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a1ee:	69fb      	ldr	r3, [r7, #28]
 800a1f0:	f383 8810 	msr	PRIMASK, r3
}
 800a1f4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a1f6:	f3ef 8310 	mrs	r3, PRIMASK
 800a1fa:	623b      	str	r3, [r7, #32]
  return(result);
 800a1fc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1fe:	633b      	str	r3, [r7, #48]	; 0x30
 800a200:	2301      	movs	r3, #1
 800a202:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a206:	f383 8810 	msr	PRIMASK, r3
}
 800a20a:	46c0      	nop			; (mov r8, r8)
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	689a      	ldr	r2, [r3, #8]
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	2101      	movs	r1, #1
 800a218:	438a      	bics	r2, r1
 800a21a:	609a      	str	r2, [r3, #8]
 800a21c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a21e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a222:	f383 8810 	msr	PRIMASK, r3
}
 800a226:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a22c:	2b01      	cmp	r3, #1
 800a22e:	d118      	bne.n	800a262 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a230:	f3ef 8310 	mrs	r3, PRIMASK
 800a234:	60bb      	str	r3, [r7, #8]
  return(result);
 800a236:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a238:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a23a:	2301      	movs	r3, #1
 800a23c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	f383 8810 	msr	PRIMASK, r3
}
 800a244:	46c0      	nop			; (mov r8, r8)
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	681a      	ldr	r2, [r3, #0]
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	2110      	movs	r1, #16
 800a252:	438a      	bics	r2, r1
 800a254:	601a      	str	r2, [r3, #0]
 800a256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a258:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a25a:	693b      	ldr	r3, [r7, #16]
 800a25c:	f383 8810 	msr	PRIMASK, r3
}
 800a260:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2280      	movs	r2, #128	; 0x80
 800a266:	2120      	movs	r1, #32
 800a268:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	2200      	movs	r2, #0
 800a26e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2200      	movs	r2, #0
 800a274:	669a      	str	r2, [r3, #104]	; 0x68
}
 800a276:	46c0      	nop			; (mov r8, r8)
 800a278:	46bd      	mov	sp, r7
 800a27a:	b00e      	add	sp, #56	; 0x38
 800a27c:	bd80      	pop	{r7, pc}
 800a27e:	46c0      	nop			; (mov r8, r8)
 800a280:	fffffedf 	.word	0xfffffedf

0800a284 <inv_db_load_func>:
}
#endif

/** This function receives the data that was stored in non-volatile memory between power off */
static inv_error_t inv_db_load_func(const unsigned char *data)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b082      	sub	sp, #8
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
    memcpy(&inv_data_builder.save, data, sizeof(inv_data_builder.save));
 800a28c:	6879      	ldr	r1, [r7, #4]
 800a28e:	4b12      	ldr	r3, [pc, #72]	; (800a2d8 <inv_db_load_func+0x54>)
 800a290:	2248      	movs	r2, #72	; 0x48
 800a292:	0018      	movs	r0, r3
 800a294:	f007 feda 	bl	801204c <memcpy>
    // copy in the saved accuracy in the actual sensors accuracy
    sensors.gyro.accuracy = inv_data_builder.save.gyro_accuracy;
 800a298:	4a10      	ldr	r2, [pc, #64]	; (800a2dc <inv_db_load_func+0x58>)
 800a29a:	2398      	movs	r3, #152	; 0x98
 800a29c:	005b      	lsls	r3, r3, #1
 800a29e:	58d2      	ldr	r2, [r2, r3]
 800a2a0:	4b0f      	ldr	r3, [pc, #60]	; (800a2e0 <inv_db_load_func+0x5c>)
 800a2a2:	635a      	str	r2, [r3, #52]	; 0x34
    sensors.accel.accuracy = inv_data_builder.save.accel_accuracy;
 800a2a4:	4a0d      	ldr	r2, [pc, #52]	; (800a2dc <inv_db_load_func+0x58>)
 800a2a6:	239a      	movs	r3, #154	; 0x9a
 800a2a8:	005b      	lsls	r3, r3, #1
 800a2aa:	58d2      	ldr	r2, [r2, r3]
 800a2ac:	4b0c      	ldr	r3, [pc, #48]	; (800a2e0 <inv_db_load_func+0x5c>)
 800a2ae:	679a      	str	r2, [r3, #120]	; 0x78
    sensors.compass.accuracy = inv_data_builder.save.compass_accuracy;
 800a2b0:	4a0a      	ldr	r2, [pc, #40]	; (800a2dc <inv_db_load_func+0x58>)
 800a2b2:	239c      	movs	r3, #156	; 0x9c
 800a2b4:	005b      	lsls	r3, r3, #1
 800a2b6:	58d2      	ldr	r2, [r2, r3]
 800a2b8:	4b09      	ldr	r3, [pc, #36]	; (800a2e0 <inv_db_load_func+0x5c>)
 800a2ba:	21bc      	movs	r1, #188	; 0xbc
 800a2bc:	505a      	str	r2, [r3, r1]
    // TODO
    if (sensors.compass.accuracy == 3) {
 800a2be:	4b08      	ldr	r3, [pc, #32]	; (800a2e0 <inv_db_load_func+0x5c>)
 800a2c0:	22bc      	movs	r2, #188	; 0xbc
 800a2c2:	589b      	ldr	r3, [r3, r2]
 800a2c4:	2b03      	cmp	r3, #3
 800a2c6:	d102      	bne.n	800a2ce <inv_db_load_func+0x4a>
        inv_set_compass_bias_found(1);
 800a2c8:	2001      	movs	r0, #1
 800a2ca:	f005 fa25 	bl	800f718 <inv_set_compass_bias_found>
    }
    return INV_SUCCESS;
 800a2ce:	2300      	movs	r3, #0
}
 800a2d0:	0018      	movs	r0, r3
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	b002      	add	sp, #8
 800a2d6:	bd80      	pop	{r7, pc}
 800a2d8:	200007c4 	.word	0x200007c4
 800a2dc:	200006d0 	.word	0x200006d0
 800a2e0:	20000810 	.word	0x20000810

0800a2e4 <inv_db_save_func>:

/** This function returns the data to be stored in non-volatile memory between power off */
static inv_error_t inv_db_save_func(unsigned char *data)
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b082      	sub	sp, #8
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
    memcpy(data, &inv_data_builder.save, sizeof(inv_data_builder.save));
 800a2ec:	4905      	ldr	r1, [pc, #20]	; (800a304 <inv_db_save_func+0x20>)
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	2248      	movs	r2, #72	; 0x48
 800a2f2:	0018      	movs	r0, r3
 800a2f4:	f007 feaa 	bl	801204c <memcpy>
    return INV_SUCCESS;
 800a2f8:	2300      	movs	r3, #0
}
 800a2fa:	0018      	movs	r0, r3
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	b002      	add	sp, #8
 800a300:	bd80      	pop	{r7, pc}
 800a302:	46c0      	nop			; (mov r8, r8)
 800a304:	200007c4 	.word	0x200007c4

0800a308 <inv_init_data_builder>:

/** Initialize the data builder
*/
inv_error_t inv_init_data_builder(void)
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	af00      	add	r7, sp, #0
    /* TODO: Hardcode temperature scale/offset here. */
    memset(&inv_data_builder, 0, sizeof(inv_data_builder));
 800a30c:	23a0      	movs	r3, #160	; 0xa0
 800a30e:	005a      	lsls	r2, r3, #1
 800a310:	4b0b      	ldr	r3, [pc, #44]	; (800a340 <inv_init_data_builder+0x38>)
 800a312:	2100      	movs	r1, #0
 800a314:	0018      	movs	r0, r3
 800a316:	f007 fe06 	bl	8011f26 <memset>
    memset(&sensors, 0, sizeof(sensors));
 800a31a:	23cc      	movs	r3, #204	; 0xcc
 800a31c:	005a      	lsls	r2, r3, #1
 800a31e:	4b09      	ldr	r3, [pc, #36]	; (800a344 <inv_init_data_builder+0x3c>)
 800a320:	2100      	movs	r1, #0
 800a322:	0018      	movs	r0, r3
 800a324:	f007 fdff 	bl	8011f26 <memset>

    // disable the soft iron transform process
    inv_reset_compass_soft_iron_matrix();
 800a328:	f000 fd8c 	bl	800ae44 <inv_reset_compass_soft_iron_matrix>

    return inv_register_load_store(inv_db_load_func, inv_db_save_func,
 800a32c:	4b06      	ldr	r3, [pc, #24]	; (800a348 <inv_init_data_builder+0x40>)
 800a32e:	4907      	ldr	r1, [pc, #28]	; (800a34c <inv_init_data_builder+0x44>)
 800a330:	4807      	ldr	r0, [pc, #28]	; (800a350 <inv_init_data_builder+0x48>)
 800a332:	2248      	movs	r2, #72	; 0x48
 800a334:	f005 fada 	bl	800f8ec <inv_register_load_store>
 800a338:	0003      	movs	r3, r0
                                   sizeof(inv_data_builder.save),
                                   INV_DB_SAVE_KEY);
}
 800a33a:	0018      	movs	r0, r3
 800a33c:	46bd      	mov	sp, r7
 800a33e:	bd80      	pop	{r7, pc}
 800a340:	200006d0 	.word	0x200006d0
 800a344:	20000810 	.word	0x20000810
 800a348:	0000d093 	.word	0x0000d093
 800a34c:	0800a2e5 	.word	0x0800a2e5
 800a350:	0800a285 	.word	0x0800a285

0800a354 <set_sensor_orientation_and_scale>:
* @param[in] sensitivity A Scale factor to convert from hardware units to
*            standard units (dps, uT, g).
*/
void set_sensor_orientation_and_scale(struct inv_single_sensor_t *sensor,
                                 int orientation, long sensitivity)
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b084      	sub	sp, #16
 800a358:	af00      	add	r7, sp, #0
 800a35a:	60f8      	str	r0, [r7, #12]
 800a35c:	60b9      	str	r1, [r7, #8]
 800a35e:	607a      	str	r2, [r7, #4]
    sensor->sensitivity = sensitivity;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	687a      	ldr	r2, [r7, #4]
 800a364:	625a      	str	r2, [r3, #36]	; 0x24
    sensor->orientation = orientation;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	68ba      	ldr	r2, [r7, #8]
 800a36a:	601a      	str	r2, [r3, #0]
}
 800a36c:	46c0      	nop			; (mov r8, r8)
 800a36e:	46bd      	mov	sp, r7
 800a370:	b004      	add	sp, #16
 800a372:	bd80      	pop	{r7, pc}

0800a374 <inv_set_gyro_orientation_and_scale>:
* @param[in] sensitivity A scale factor to convert device units to degrees per second scaled by 2^16
*            such that degrees_per_second  = device_units * sensitivity / 2^30. Typically
*            it works out to be the maximum rate * 2^15.
*/
void inv_set_gyro_orientation_and_scale(int orientation, long sensitivity)
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b082      	sub	sp, #8
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
 800a37c:	6039      	str	r1, [r7, #0]
        fwrite(&type, sizeof(type), 1, inv_data_builder.file);
        fwrite(&orientation, sizeof(orientation), 1, inv_data_builder.file);
        fwrite(&sensitivity, sizeof(sensitivity), 1, inv_data_builder.file);
    }
#endif
    set_sensor_orientation_and_scale(&sensors.gyro, orientation,
 800a37e:	683a      	ldr	r2, [r7, #0]
 800a380:	6879      	ldr	r1, [r7, #4]
 800a382:	4b04      	ldr	r3, [pc, #16]	; (800a394 <inv_set_gyro_orientation_and_scale+0x20>)
 800a384:	0018      	movs	r0, r3
 800a386:	f7ff ffe5 	bl	800a354 <set_sensor_orientation_and_scale>
                                     sensitivity);
}
 800a38a:	46c0      	nop			; (mov r8, r8)
 800a38c:	46bd      	mov	sp, r7
 800a38e:	b002      	add	sp, #8
 800a390:	bd80      	pop	{r7, pc}
 800a392:	46c0      	nop			; (mov r8, r8)
 800a394:	20000810 	.word	0x20000810

0800a398 <inv_set_gyro_sample_rate>:

/** Set Gyro Sample rate in micro seconds.
* @param[in] sample_rate_us Set Gyro Sample rate in us
*/
void inv_set_gyro_sample_rate(long sample_rate_us)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b082      	sub	sp, #8
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
        int type = PLAYBACK_DBG_TYPE_G_SAMPLE_RATE;
        fwrite(&type, sizeof(type), 1, inv_data_builder.file);
        fwrite(&sample_rate_us, sizeof(sample_rate_us), 1, inv_data_builder.file);
    }
#endif
    sensors.gyro.sample_rate_us = sample_rate_us;
 800a3a0:	4b0e      	ldr	r3, [pc, #56]	; (800a3dc <inv_set_gyro_sample_rate+0x44>)
 800a3a2:	687a      	ldr	r2, [r7, #4]
 800a3a4:	629a      	str	r2, [r3, #40]	; 0x28
    sensors.gyro.sample_rate_ms = sample_rate_us / 1000;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	22fa      	movs	r2, #250	; 0xfa
 800a3aa:	0091      	lsls	r1, r2, #2
 800a3ac:	0018      	movs	r0, r3
 800a3ae:	f7f8 fef7 	bl	80031a0 <__divsi3>
 800a3b2:	0003      	movs	r3, r0
 800a3b4:	001a      	movs	r2, r3
 800a3b6:	4b09      	ldr	r3, [pc, #36]	; (800a3dc <inv_set_gyro_sample_rate+0x44>)
 800a3b8:	62da      	str	r2, [r3, #44]	; 0x2c
    if (sensors.gyro.bandwidth == 0) {
 800a3ba:	4b08      	ldr	r3, [pc, #32]	; (800a3dc <inv_set_gyro_sample_rate+0x44>)
 800a3bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d107      	bne.n	800a3d2 <inv_set_gyro_sample_rate+0x3a>
        sensors.gyro.bandwidth = (int)(1000000L / sample_rate_us);
 800a3c2:	6879      	ldr	r1, [r7, #4]
 800a3c4:	4806      	ldr	r0, [pc, #24]	; (800a3e0 <inv_set_gyro_sample_rate+0x48>)
 800a3c6:	f7f8 feeb 	bl	80031a0 <__divsi3>
 800a3ca:	0003      	movs	r3, r0
 800a3cc:	001a      	movs	r2, r3
 800a3ce:	4b03      	ldr	r3, [pc, #12]	; (800a3dc <inv_set_gyro_sample_rate+0x44>)
 800a3d0:	641a      	str	r2, [r3, #64]	; 0x40
    }
}
 800a3d2:	46c0      	nop			; (mov r8, r8)
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	b002      	add	sp, #8
 800a3d8:	bd80      	pop	{r7, pc}
 800a3da:	46c0      	nop			; (mov r8, r8)
 800a3dc:	20000810 	.word	0x20000810
 800a3e0:	000f4240 	.word	0x000f4240

0800a3e4 <inv_set_accel_sample_rate>:

/** Set Accel Sample rate in micro seconds.
* @param[in] sample_rate_us Set Accel Sample rate in us
*/
void inv_set_accel_sample_rate(long sample_rate_us)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b082      	sub	sp, #8
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
        int type = PLAYBACK_DBG_TYPE_A_SAMPLE_RATE;
        fwrite(&type, sizeof(type), 1, inv_data_builder.file);
        fwrite(&sample_rate_us, sizeof(sample_rate_us), 1, inv_data_builder.file);
    }
#endif
    sensors.accel.sample_rate_us = sample_rate_us;
 800a3ec:	4b0f      	ldr	r3, [pc, #60]	; (800a42c <inv_set_accel_sample_rate+0x48>)
 800a3ee:	687a      	ldr	r2, [r7, #4]
 800a3f0:	66da      	str	r2, [r3, #108]	; 0x6c
    sensors.accel.sample_rate_ms = sample_rate_us / 1000;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	22fa      	movs	r2, #250	; 0xfa
 800a3f6:	0091      	lsls	r1, r2, #2
 800a3f8:	0018      	movs	r0, r3
 800a3fa:	f7f8 fed1 	bl	80031a0 <__divsi3>
 800a3fe:	0003      	movs	r3, r0
 800a400:	001a      	movs	r2, r3
 800a402:	4b0a      	ldr	r3, [pc, #40]	; (800a42c <inv_set_accel_sample_rate+0x48>)
 800a404:	671a      	str	r2, [r3, #112]	; 0x70
    if (sensors.accel.bandwidth == 0) {
 800a406:	4b09      	ldr	r3, [pc, #36]	; (800a42c <inv_set_accel_sample_rate+0x48>)
 800a408:	2284      	movs	r2, #132	; 0x84
 800a40a:	589b      	ldr	r3, [r3, r2]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d108      	bne.n	800a422 <inv_set_accel_sample_rate+0x3e>
        sensors.accel.bandwidth = (int)(1000000L / sample_rate_us);
 800a410:	6879      	ldr	r1, [r7, #4]
 800a412:	4807      	ldr	r0, [pc, #28]	; (800a430 <inv_set_accel_sample_rate+0x4c>)
 800a414:	f7f8 fec4 	bl	80031a0 <__divsi3>
 800a418:	0003      	movs	r3, r0
 800a41a:	0019      	movs	r1, r3
 800a41c:	4b03      	ldr	r3, [pc, #12]	; (800a42c <inv_set_accel_sample_rate+0x48>)
 800a41e:	2284      	movs	r2, #132	; 0x84
 800a420:	5099      	str	r1, [r3, r2]
    }
}
 800a422:	46c0      	nop			; (mov r8, r8)
 800a424:	46bd      	mov	sp, r7
 800a426:	b002      	add	sp, #8
 800a428:	bd80      	pop	{r7, pc}
 800a42a:	46c0      	nop			; (mov r8, r8)
 800a42c:	20000810 	.word	0x20000810
 800a430:	000f4240 	.word	0x000f4240

0800a434 <inv_get_compass_on>:

/** Helper function stating whether the compass is on or off.
 * @return TRUE if compass if on, 0 if compass if off
*/
int inv_get_compass_on()
{
 800a434:	b580      	push	{r7, lr}
 800a436:	af00      	add	r7, sp, #0
    return (sensors.compass.status & INV_SENSOR_ON) == INV_SENSOR_ON;
 800a438:	4b05      	ldr	r3, [pc, #20]	; (800a450 <inv_get_compass_on+0x1c>)
 800a43a:	22b8      	movs	r2, #184	; 0xb8
 800a43c:	589a      	ldr	r2, [r3, r2]
 800a43e:	2380      	movs	r3, #128	; 0x80
 800a440:	005b      	lsls	r3, r3, #1
 800a442:	4013      	ands	r3, r2
 800a444:	1e5a      	subs	r2, r3, #1
 800a446:	4193      	sbcs	r3, r2
 800a448:	b2db      	uxtb	r3, r3
}
 800a44a:	0018      	movs	r0, r3
 800a44c:	46bd      	mov	sp, r7
 800a44e:	bd80      	pop	{r7, pc}
 800a450:	20000810 	.word	0x20000810

0800a454 <inv_get_gyro_on>:

/** Helper function stating whether the gyro is on or off.
 * @return TRUE if gyro if on, 0 if gyro if off
*/
int inv_get_gyro_on()
{
 800a454:	b580      	push	{r7, lr}
 800a456:	af00      	add	r7, sp, #0
    return (sensors.gyro.status & INV_SENSOR_ON) == INV_SENSOR_ON;
 800a458:	4b05      	ldr	r3, [pc, #20]	; (800a470 <inv_get_gyro_on+0x1c>)
 800a45a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a45c:	2380      	movs	r3, #128	; 0x80
 800a45e:	005b      	lsls	r3, r3, #1
 800a460:	4013      	ands	r3, r2
 800a462:	1e5a      	subs	r2, r3, #1
 800a464:	4193      	sbcs	r3, r2
 800a466:	b2db      	uxtb	r3, r3
}
 800a468:	0018      	movs	r0, r3
 800a46a:	46bd      	mov	sp, r7
 800a46c:	bd80      	pop	{r7, pc}
 800a46e:	46c0      	nop			; (mov r8, r8)
 800a470:	20000810 	.word	0x20000810

0800a474 <inv_get_accel_on>:

/** Helper function stating whether the acceleromter is on or off.
 * @return TRUE if accel if on, 0 if accel if off
*/
int inv_get_accel_on()
{
 800a474:	b580      	push	{r7, lr}
 800a476:	af00      	add	r7, sp, #0
    return (sensors.accel.status & INV_SENSOR_ON) == INV_SENSOR_ON;
 800a478:	4b05      	ldr	r3, [pc, #20]	; (800a490 <inv_get_accel_on+0x1c>)
 800a47a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800a47c:	2380      	movs	r3, #128	; 0x80
 800a47e:	005b      	lsls	r3, r3, #1
 800a480:	4013      	ands	r3, r2
 800a482:	1e5a      	subs	r2, r3, #1
 800a484:	4193      	sbcs	r3, r2
 800a486:	b2db      	uxtb	r3, r3
}
 800a488:	0018      	movs	r0, r3
 800a48a:	46bd      	mov	sp, r7
 800a48c:	bd80      	pop	{r7, pc}
 800a48e:	46c0      	nop			; (mov r8, r8)
 800a490:	20000810 	.word	0x20000810

0800a494 <inv_get_last_timestamp>:
/** Get last timestamp across all 3 sensors that are on.
* This find out which timestamp has the largest value for sensors that are on.
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
inv_time_t inv_get_last_timestamp()
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b082      	sub	sp, #8
 800a498:	af00      	add	r7, sp, #0
    inv_time_t timestamp = 0;
 800a49a:	2300      	movs	r3, #0
 800a49c:	607b      	str	r3, [r7, #4]
    if (sensors.accel.status & INV_SENSOR_ON) {
 800a49e:	4b20      	ldr	r3, [pc, #128]	; (800a520 <inv_get_last_timestamp+0x8c>)
 800a4a0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800a4a2:	2380      	movs	r3, #128	; 0x80
 800a4a4:	005b      	lsls	r3, r3, #1
 800a4a6:	4013      	ands	r3, r2
 800a4a8:	d002      	beq.n	800a4b0 <inv_get_last_timestamp+0x1c>
        timestamp = sensors.accel.timestamp;
 800a4aa:	4b1d      	ldr	r3, [pc, #116]	; (800a520 <inv_get_last_timestamp+0x8c>)
 800a4ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a4ae:	607b      	str	r3, [r7, #4]
    }
    if (sensors.gyro.status & INV_SENSOR_ON) {
 800a4b0:	4b1b      	ldr	r3, [pc, #108]	; (800a520 <inv_get_last_timestamp+0x8c>)
 800a4b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a4b4:	2380      	movs	r3, #128	; 0x80
 800a4b6:	005b      	lsls	r3, r3, #1
 800a4b8:	4013      	ands	r3, r2
 800a4ba:	d007      	beq.n	800a4cc <inv_get_last_timestamp+0x38>
        if (timestamp < sensors.gyro.timestamp) {
 800a4bc:	4b18      	ldr	r3, [pc, #96]	; (800a520 <inv_get_last_timestamp+0x8c>)
 800a4be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4c0:	687a      	ldr	r2, [r7, #4]
 800a4c2:	429a      	cmp	r2, r3
 800a4c4:	d202      	bcs.n	800a4cc <inv_get_last_timestamp+0x38>
            timestamp = sensors.gyro.timestamp;
 800a4c6:	4b16      	ldr	r3, [pc, #88]	; (800a520 <inv_get_last_timestamp+0x8c>)
 800a4c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4ca:	607b      	str	r3, [r7, #4]
        }
    }
    if (sensors.compass.status & INV_SENSOR_ON) {
 800a4cc:	4b14      	ldr	r3, [pc, #80]	; (800a520 <inv_get_last_timestamp+0x8c>)
 800a4ce:	22b8      	movs	r2, #184	; 0xb8
 800a4d0:	589a      	ldr	r2, [r3, r2]
 800a4d2:	2380      	movs	r3, #128	; 0x80
 800a4d4:	005b      	lsls	r3, r3, #1
 800a4d6:	4013      	ands	r3, r2
 800a4d8:	d009      	beq.n	800a4ee <inv_get_last_timestamp+0x5a>
        if (timestamp < sensors.compass.timestamp) {
 800a4da:	4b11      	ldr	r3, [pc, #68]	; (800a520 <inv_get_last_timestamp+0x8c>)
 800a4dc:	22c0      	movs	r2, #192	; 0xc0
 800a4de:	589b      	ldr	r3, [r3, r2]
 800a4e0:	687a      	ldr	r2, [r7, #4]
 800a4e2:	429a      	cmp	r2, r3
 800a4e4:	d203      	bcs.n	800a4ee <inv_get_last_timestamp+0x5a>
            timestamp = sensors.compass.timestamp;
 800a4e6:	4b0e      	ldr	r3, [pc, #56]	; (800a520 <inv_get_last_timestamp+0x8c>)
 800a4e8:	22c0      	movs	r2, #192	; 0xc0
 800a4ea:	589b      	ldr	r3, [r3, r2]
 800a4ec:	607b      	str	r3, [r7, #4]
        }
    }
    if (sensors.temp.status & INV_SENSOR_ON) {
 800a4ee:	4b0c      	ldr	r3, [pc, #48]	; (800a520 <inv_get_last_timestamp+0x8c>)
 800a4f0:	22fc      	movs	r2, #252	; 0xfc
 800a4f2:	589a      	ldr	r2, [r3, r2]
 800a4f4:	2380      	movs	r3, #128	; 0x80
 800a4f6:	005b      	lsls	r3, r3, #1
 800a4f8:	4013      	ands	r3, r2
 800a4fa:	d00b      	beq.n	800a514 <inv_get_last_timestamp+0x80>
        if (timestamp < sensors.temp.timestamp)
 800a4fc:	4a08      	ldr	r2, [pc, #32]	; (800a520 <inv_get_last_timestamp+0x8c>)
 800a4fe:	2382      	movs	r3, #130	; 0x82
 800a500:	005b      	lsls	r3, r3, #1
 800a502:	58d3      	ldr	r3, [r2, r3]
 800a504:	687a      	ldr	r2, [r7, #4]
 800a506:	429a      	cmp	r2, r3
 800a508:	d204      	bcs.n	800a514 <inv_get_last_timestamp+0x80>
            timestamp = sensors.temp.timestamp;
 800a50a:	4a05      	ldr	r2, [pc, #20]	; (800a520 <inv_get_last_timestamp+0x8c>)
 800a50c:	2382      	movs	r3, #130	; 0x82
 800a50e:	005b      	lsls	r3, r3, #1
 800a510:	58d3      	ldr	r3, [r2, r3]
 800a512:	607b      	str	r3, [r7, #4]
    }
    return timestamp;
 800a514:	687b      	ldr	r3, [r7, #4]
}
 800a516:	0018      	movs	r0, r3
 800a518:	46bd      	mov	sp, r7
 800a51a:	b002      	add	sp, #8
 800a51c:	bd80      	pop	{r7, pc}
 800a51e:	46c0      	nop			; (mov r8, r8)
 800a520:	20000810 	.word	0x20000810

0800a524 <inv_set_accel_orientation_and_scale>:
* @param[in] sensitivity A scale factor to convert device units to g's
*            such that g's = device_units * sensitivity / 2^30. Typically
*            it works out to be the maximum g_value * 2^15.
*/
void inv_set_accel_orientation_and_scale(int orientation, long sensitivity)
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b082      	sub	sp, #8
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
 800a52c:	6039      	str	r1, [r7, #0]
        fwrite(&type, sizeof(type), 1, inv_data_builder.file);
        fwrite(&orientation, sizeof(orientation), 1, inv_data_builder.file);
        fwrite(&sensitivity, sizeof(sensitivity), 1, inv_data_builder.file);
    }
#endif
    set_sensor_orientation_and_scale(&sensors.accel, orientation,
 800a52e:	683a      	ldr	r2, [r7, #0]
 800a530:	6879      	ldr	r1, [r7, #4]
 800a532:	4b04      	ldr	r3, [pc, #16]	; (800a544 <inv_set_accel_orientation_and_scale+0x20>)
 800a534:	0018      	movs	r0, r3
 800a536:	f7ff ff0d 	bl	800a354 <set_sensor_orientation_and_scale>
                                     sensitivity);
}
 800a53a:	46c0      	nop			; (mov r8, r8)
 800a53c:	46bd      	mov	sp, r7
 800a53e:	b002      	add	sp, #8
 800a540:	bd80      	pop	{r7, pc}
 800a542:	46c0      	nop			; (mov r8, r8)
 800a544:	20000854 	.word	0x20000854

0800a548 <inv_apply_calibration>:
* @param[in,out] sensor structure to modify
* @param[in] bias bias in the mounting frame, in hardware units scaled by
*                 2^16. Length 3.
*/
void inv_apply_calibration(struct inv_single_sensor_t *sensor, const long *bias)
{
 800a548:	b590      	push	{r4, r7, lr}
 800a54a:	b087      	sub	sp, #28
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
 800a550:	6039      	str	r1, [r7, #0]
    long raw32[3];

    // Convert raw to calibrated
    raw32[0] = (long)sensor->raw[0] << 15;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	2204      	movs	r2, #4
 800a556:	5e9b      	ldrsh	r3, [r3, r2]
 800a558:	03da      	lsls	r2, r3, #15
 800a55a:	240c      	movs	r4, #12
 800a55c:	193b      	adds	r3, r7, r4
 800a55e:	601a      	str	r2, [r3, #0]
    raw32[1] = (long)sensor->raw[1] << 15;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2206      	movs	r2, #6
 800a564:	5e9b      	ldrsh	r3, [r3, r2]
 800a566:	03da      	lsls	r2, r3, #15
 800a568:	193b      	adds	r3, r7, r4
 800a56a:	605a      	str	r2, [r3, #4]
    raw32[2] = (long)sensor->raw[2] << 15;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2208      	movs	r2, #8
 800a570:	5e9b      	ldrsh	r3, [r3, r2]
 800a572:	03da      	lsls	r2, r3, #15
 800a574:	193b      	adds	r3, r7, r4
 800a576:	609a      	str	r2, [r3, #8]

    inv_convert_to_body_with_scale(sensor->orientation, sensor->sensitivity << 1, raw32, sensor->raw_scaled);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	b298      	uxth	r0, r3
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a582:	0059      	lsls	r1, r3, #1
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	330c      	adds	r3, #12
 800a588:	193a      	adds	r2, r7, r4
 800a58a:	f004 fe0c 	bl	800f1a6 <inv_convert_to_body_with_scale>

    raw32[0] -= bias[0] >> 1;
 800a58e:	193b      	adds	r3, r7, r4
 800a590:	681a      	ldr	r2, [r3, #0]
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	105b      	asrs	r3, r3, #1
 800a598:	1ad2      	subs	r2, r2, r3
 800a59a:	193b      	adds	r3, r7, r4
 800a59c:	601a      	str	r2, [r3, #0]
    raw32[1] -= bias[1] >> 1;
 800a59e:	193b      	adds	r3, r7, r4
 800a5a0:	685a      	ldr	r2, [r3, #4]
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	3304      	adds	r3, #4
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	105b      	asrs	r3, r3, #1
 800a5aa:	1ad2      	subs	r2, r2, r3
 800a5ac:	193b      	adds	r3, r7, r4
 800a5ae:	605a      	str	r2, [r3, #4]
    raw32[2] -= bias[2] >> 1;
 800a5b0:	193b      	adds	r3, r7, r4
 800a5b2:	689a      	ldr	r2, [r3, #8]
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	3308      	adds	r3, #8
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	105b      	asrs	r3, r3, #1
 800a5bc:	1ad2      	subs	r2, r2, r3
 800a5be:	193b      	adds	r3, r7, r4
 800a5c0:	609a      	str	r2, [r3, #8]

    inv_convert_to_body_with_scale(sensor->orientation, sensor->sensitivity << 1, raw32, sensor->calibrated);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	b298      	uxth	r0, r3
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5cc:	0059      	lsls	r1, r3, #1
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	3318      	adds	r3, #24
 800a5d2:	193a      	adds	r2, r7, r4
 800a5d4:	f004 fde7 	bl	800f1a6 <inv_convert_to_body_with_scale>

    sensor->status |= INV_CALIBRATED;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5dc:	2220      	movs	r2, #32
 800a5de:	431a      	orrs	r2, r3
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a5e4:	46c0      	nop			; (mov r8, r8)
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	b007      	add	sp, #28
 800a5ea:	bd90      	pop	{r4, r7, pc}

0800a5ec <inv_set_compass_disturbance>:

/** Set the state of a compass disturbance
* @param[in] dist 1=disturbance, 0=no disturbance
*/
void inv_set_compass_disturbance(int dist)
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b082      	sub	sp, #8
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
    inv_data_builder.compass_disturbance = dist;
 800a5f4:	4a04      	ldr	r2, [pc, #16]	; (800a608 <inv_set_compass_disturbance+0x1c>)
 800a5f6:	239e      	movs	r3, #158	; 0x9e
 800a5f8:	005b      	lsls	r3, r3, #1
 800a5fa:	6879      	ldr	r1, [r7, #4]
 800a5fc:	50d1      	str	r1, [r2, r3]
}
 800a5fe:	46c0      	nop			; (mov r8, r8)
 800a600:	46bd      	mov	sp, r7
 800a602:	b002      	add	sp, #8
 800a604:	bd80      	pop	{r7, pc}
 800a606:	46c0      	nop			; (mov r8, r8)
 800a608:	200006d0 	.word	0x200006d0

0800a60c <inv_set_accel_bias>:
/** Sets the accel bias.
* @param[in] bias Accel bias, length 3. In HW units scaled by 2^16 in body frame
* @param[in] accuracy Accuracy rating from 0 to 3, with 3 being most accurate.
*/
void inv_set_accel_bias(const long *bias, int accuracy)
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b082      	sub	sp, #8
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
 800a614:	6039      	str	r1, [r7, #0]
    if (bias) {
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d013      	beq.n	800a644 <inv_set_accel_bias+0x38>
        if (memcmp(inv_data_builder.save.accel_bias, bias, sizeof(inv_data_builder.save.accel_bias))) {
 800a61c:	6879      	ldr	r1, [r7, #4]
 800a61e:	4b12      	ldr	r3, [pc, #72]	; (800a668 <inv_set_accel_bias+0x5c>)
 800a620:	220c      	movs	r2, #12
 800a622:	0018      	movs	r0, r3
 800a624:	f007 fc5e 	bl	8011ee4 <memcmp>
 800a628:	1e03      	subs	r3, r0, #0
 800a62a:	d00b      	beq.n	800a644 <inv_set_accel_bias+0x38>
            memcpy(inv_data_builder.save.accel_bias, bias, sizeof(inv_data_builder.save.accel_bias));
 800a62c:	6879      	ldr	r1, [r7, #4]
 800a62e:	4b0e      	ldr	r3, [pc, #56]	; (800a668 <inv_set_accel_bias+0x5c>)
 800a630:	220c      	movs	r2, #12
 800a632:	0018      	movs	r0, r3
 800a634:	f007 fd0a 	bl	801204c <memcpy>
            inv_apply_calibration(&sensors.accel, inv_data_builder.save.accel_bias);
 800a638:	4a0b      	ldr	r2, [pc, #44]	; (800a668 <inv_set_accel_bias+0x5c>)
 800a63a:	4b0c      	ldr	r3, [pc, #48]	; (800a66c <inv_set_accel_bias+0x60>)
 800a63c:	0011      	movs	r1, r2
 800a63e:	0018      	movs	r0, r3
 800a640:	f7ff ff82 	bl	800a548 <inv_apply_calibration>
        }
    }
    sensors.accel.accuracy = accuracy;
 800a644:	4b0a      	ldr	r3, [pc, #40]	; (800a670 <inv_set_accel_bias+0x64>)
 800a646:	683a      	ldr	r2, [r7, #0]
 800a648:	679a      	str	r2, [r3, #120]	; 0x78
    inv_data_builder.save.accel_accuracy = accuracy;
 800a64a:	4a0a      	ldr	r2, [pc, #40]	; (800a674 <inv_set_accel_bias+0x68>)
 800a64c:	239a      	movs	r3, #154	; 0x9a
 800a64e:	005b      	lsls	r3, r3, #1
 800a650:	6839      	ldr	r1, [r7, #0]
 800a652:	50d1      	str	r1, [r2, r3]
    inv_set_message(INV_MSG_NEW_AB_EVENT, INV_MSG_NEW_AB_EVENT, 0);
 800a654:	2200      	movs	r2, #0
 800a656:	2110      	movs	r1, #16
 800a658:	2010      	movs	r0, #16
 800a65a:	f003 fe9f 	bl	800e39c <inv_set_message>
}
 800a65e:	46c0      	nop			; (mov r8, r8)
 800a660:	46bd      	mov	sp, r7
 800a662:	b002      	add	sp, #8
 800a664:	bd80      	pop	{r7, pc}
 800a666:	46c0      	nop			; (mov r8, r8)
 800a668:	200007e4 	.word	0x200007e4
 800a66c:	20000854 	.word	0x20000854
 800a670:	20000810 	.word	0x20000810
 800a674:	200006d0 	.word	0x200006d0

0800a678 <inv_set_gyro_bias>:
* @param[in] bias Gyro bias in hardware units scaled by 2^16. In chip mounting frame.
*            Length 3.
* @param[in] accuracy Accuracy of bias. 0 = least accurate, 3 = most accurate.
*/
void inv_set_gyro_bias(const long *bias, int accuracy)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b082      	sub	sp, #8
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
 800a680:	6039      	str	r1, [r7, #0]
    if (bias != NULL) {
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d013      	beq.n	800a6b0 <inv_set_gyro_bias+0x38>
        if (memcmp(inv_data_builder.save.gyro_bias, bias, sizeof(inv_data_builder.save.gyro_bias))) {
 800a688:	6879      	ldr	r1, [r7, #4]
 800a68a:	4b1e      	ldr	r3, [pc, #120]	; (800a704 <inv_set_gyro_bias+0x8c>)
 800a68c:	220c      	movs	r2, #12
 800a68e:	0018      	movs	r0, r3
 800a690:	f007 fc28 	bl	8011ee4 <memcmp>
 800a694:	1e03      	subs	r3, r0, #0
 800a696:	d00b      	beq.n	800a6b0 <inv_set_gyro_bias+0x38>
            memcpy(inv_data_builder.save.gyro_bias, bias, sizeof(inv_data_builder.save.gyro_bias));
 800a698:	6879      	ldr	r1, [r7, #4]
 800a69a:	4b1a      	ldr	r3, [pc, #104]	; (800a704 <inv_set_gyro_bias+0x8c>)
 800a69c:	220c      	movs	r2, #12
 800a69e:	0018      	movs	r0, r3
 800a6a0:	f007 fcd4 	bl	801204c <memcpy>
            inv_apply_calibration(&sensors.gyro, inv_data_builder.save.gyro_bias);
 800a6a4:	4a17      	ldr	r2, [pc, #92]	; (800a704 <inv_set_gyro_bias+0x8c>)
 800a6a6:	4b18      	ldr	r3, [pc, #96]	; (800a708 <inv_set_gyro_bias+0x90>)
 800a6a8:	0011      	movs	r1, r2
 800a6aa:	0018      	movs	r0, r3
 800a6ac:	f7ff ff4c 	bl	800a548 <inv_apply_calibration>
        }
    }
    sensors.gyro.accuracy = accuracy;
 800a6b0:	4b15      	ldr	r3, [pc, #84]	; (800a708 <inv_set_gyro_bias+0x90>)
 800a6b2:	683a      	ldr	r2, [r7, #0]
 800a6b4:	635a      	str	r2, [r3, #52]	; 0x34
    inv_data_builder.save.gyro_accuracy = accuracy;
 800a6b6:	4a15      	ldr	r2, [pc, #84]	; (800a70c <inv_set_gyro_bias+0x94>)
 800a6b8:	2398      	movs	r3, #152	; 0x98
 800a6ba:	005b      	lsls	r3, r3, #1
 800a6bc:	6839      	ldr	r1, [r7, #0]
 800a6be:	50d1      	str	r1, [r2, r3]

    /* TODO: What should we do if there's no temperature data? */
    if (sensors.temp.calibrated[0])
 800a6c0:	4b11      	ldr	r3, [pc, #68]	; (800a708 <inv_set_gyro_bias+0x90>)
 800a6c2:	22e4      	movs	r2, #228	; 0xe4
 800a6c4:	589b      	ldr	r3, [r3, r2]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d007      	beq.n	800a6da <inv_set_gyro_bias+0x62>
        inv_data_builder.save.gyro_temp = sensors.temp.calibrated[0];
 800a6ca:	4b0f      	ldr	r3, [pc, #60]	; (800a708 <inv_set_gyro_bias+0x90>)
 800a6cc:	22e4      	movs	r2, #228	; 0xe4
 800a6ce:	5899      	ldr	r1, [r3, r2]
 800a6d0:	4a0e      	ldr	r2, [pc, #56]	; (800a70c <inv_set_gyro_bias+0x94>)
 800a6d2:	2386      	movs	r3, #134	; 0x86
 800a6d4:	005b      	lsls	r3, r3, #1
 800a6d6:	50d1      	str	r1, [r2, r3]
 800a6d8:	e005      	b.n	800a6e6 <inv_set_gyro_bias+0x6e>
    else
        /* Set to 27 deg C for now until we've got a better solution. */
        inv_data_builder.save.gyro_temp = 1769472L;
 800a6da:	4a0c      	ldr	r2, [pc, #48]	; (800a70c <inv_set_gyro_bias+0x94>)
 800a6dc:	2386      	movs	r3, #134	; 0x86
 800a6de:	005b      	lsls	r3, r3, #1
 800a6e0:	21d8      	movs	r1, #216	; 0xd8
 800a6e2:	0349      	lsls	r1, r1, #13
 800a6e4:	50d1      	str	r1, [r2, r3]
    inv_set_message(INV_MSG_NEW_GB_EVENT, INV_MSG_NEW_GB_EVENT, 0);
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	2104      	movs	r1, #4
 800a6ea:	2004      	movs	r0, #4
 800a6ec:	f003 fe56 	bl	800e39c <inv_set_message>

    /* TODO: this flag works around the synchronization problem seen with using
       the user-exposed message layer to signal the temperature compensation
       module that gyro biases were set.
       A better, cleaner method is certainly needed. */
    inv_data_builder.save.gyro_bias_tc_set = true;
 800a6f0:	4a06      	ldr	r2, [pc, #24]	; (800a70c <inv_set_gyro_bias+0x94>)
 800a6f2:	2388      	movs	r3, #136	; 0x88
 800a6f4:	005b      	lsls	r3, r3, #1
 800a6f6:	2101      	movs	r1, #1
 800a6f8:	50d1      	str	r1, [r2, r3]
}
 800a6fa:	46c0      	nop			; (mov r8, r8)
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	b002      	add	sp, #8
 800a700:	bd80      	pop	{r7, pc}
 800a702:	46c0      	nop			; (mov r8, r8)
 800a704:	200007d0 	.word	0x200007d0
 800a708:	20000810 	.word	0x20000810
 800a70c:	200006d0 	.word	0x200006d0

0800a710 <inv_get_gyro_bias_tc_set>:
 *          The flag clear automatically after is read.
 *  @return true if the flag was set, indicating gyro biases were set.
 *          false if the flag was not set.
 */
int inv_get_gyro_bias_tc_set(void)
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b082      	sub	sp, #8
 800a714:	af00      	add	r7, sp, #0
    int flag = (inv_data_builder.save.gyro_bias_tc_set == true);
 800a716:	4a09      	ldr	r2, [pc, #36]	; (800a73c <inv_get_gyro_bias_tc_set+0x2c>)
 800a718:	2388      	movs	r3, #136	; 0x88
 800a71a:	005b      	lsls	r3, r3, #1
 800a71c:	58d3      	ldr	r3, [r2, r3]
 800a71e:	3b01      	subs	r3, #1
 800a720:	425a      	negs	r2, r3
 800a722:	4153      	adcs	r3, r2
 800a724:	b2db      	uxtb	r3, r3
 800a726:	607b      	str	r3, [r7, #4]
    inv_data_builder.save.gyro_bias_tc_set = false;
 800a728:	4a04      	ldr	r2, [pc, #16]	; (800a73c <inv_get_gyro_bias_tc_set+0x2c>)
 800a72a:	2388      	movs	r3, #136	; 0x88
 800a72c:	005b      	lsls	r3, r3, #1
 800a72e:	2100      	movs	r1, #0
 800a730:	50d1      	str	r1, [r2, r3]
    return flag;
 800a732:	687b      	ldr	r3, [r7, #4]
}
 800a734:	0018      	movs	r0, r3
 800a736:	46bd      	mov	sp, r7
 800a738:	b002      	add	sp, #8
 800a73a:	bd80      	pop	{r7, pc}
 800a73c:	200006d0 	.word	0x200006d0

0800a740 <inv_get_gyro_bias>:
 *              Length 3.
 *  @param[in] temp
 *              Tempearature in degrees C.
 */
void inv_get_gyro_bias(long *bias, long *temp)
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b082      	sub	sp, #8
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
 800a748:	6039      	str	r1, [r7, #0]
    if (bias != NULL)
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d005      	beq.n	800a75c <inv_get_gyro_bias+0x1c>
        memcpy(bias, inv_data_builder.save.gyro_bias,
 800a750:	4909      	ldr	r1, [pc, #36]	; (800a778 <inv_get_gyro_bias+0x38>)
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	220c      	movs	r2, #12
 800a756:	0018      	movs	r0, r3
 800a758:	f007 fc78 	bl	801204c <memcpy>
               sizeof(inv_data_builder.save.gyro_bias));
    if (temp != NULL)
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d005      	beq.n	800a76e <inv_get_gyro_bias+0x2e>
        temp[0] = inv_data_builder.save.gyro_temp;
 800a762:	4a06      	ldr	r2, [pc, #24]	; (800a77c <inv_get_gyro_bias+0x3c>)
 800a764:	2386      	movs	r3, #134	; 0x86
 800a766:	005b      	lsls	r3, r3, #1
 800a768:	58d2      	ldr	r2, [r2, r3]
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	601a      	str	r2, [r3, #0]
}
 800a76e:	46c0      	nop			; (mov r8, r8)
 800a770:	46bd      	mov	sp, r7
 800a772:	b002      	add	sp, #8
 800a774:	bd80      	pop	{r7, pc}
 800a776:	46c0      	nop			; (mov r8, r8)
 800a778:	200007d0 	.word	0x200007d0
 800a77c:	200006d0 	.word	0x200006d0

0800a780 <inv_build_accel>:
 *  @param[in]  timestamp 
 *              Monotonic time stamp, for Android it's in nanoseconds.
 *  @return     Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_build_accel(const long *accel, int status, inv_time_t timestamp)
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b084      	sub	sp, #16
 800a784:	af00      	add	r7, sp, #0
 800a786:	60f8      	str	r0, [r7, #12]
 800a788:	60b9      	str	r1, [r7, #8]
 800a78a:	607a      	str	r2, [r7, #4]
        fwrite(accel, sizeof(accel[0]), 3, inv_data_builder.file);
        fwrite(&timestamp, sizeof(timestamp), 1, inv_data_builder.file);
    }
#endif

    if ((status & INV_CALIBRATED) == 0) {
 800a78c:	68bb      	ldr	r3, [r7, #8]
 800a78e:	2220      	movs	r2, #32
 800a790:	4013      	ands	r3, r2
 800a792:	d120      	bne.n	800a7d6 <inv_build_accel+0x56>
        sensors.accel.raw[0] = (short)accel[0];
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	b219      	sxth	r1, r3
 800a79a:	4b29      	ldr	r3, [pc, #164]	; (800a840 <inv_build_accel+0xc0>)
 800a79c:	2248      	movs	r2, #72	; 0x48
 800a79e:	5299      	strh	r1, [r3, r2]
        sensors.accel.raw[1] = (short)accel[1];
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	3304      	adds	r3, #4
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	b219      	sxth	r1, r3
 800a7a8:	4b25      	ldr	r3, [pc, #148]	; (800a840 <inv_build_accel+0xc0>)
 800a7aa:	224a      	movs	r2, #74	; 0x4a
 800a7ac:	5299      	strh	r1, [r3, r2]
        sensors.accel.raw[2] = (short)accel[2];
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	3308      	adds	r3, #8
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	b219      	sxth	r1, r3
 800a7b6:	4b22      	ldr	r3, [pc, #136]	; (800a840 <inv_build_accel+0xc0>)
 800a7b8:	224c      	movs	r2, #76	; 0x4c
 800a7ba:	5299      	strh	r1, [r3, r2]
        sensors.accel.status |= INV_RAW_DATA;
 800a7bc:	4b20      	ldr	r3, [pc, #128]	; (800a840 <inv_build_accel+0xc0>)
 800a7be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a7c0:	2280      	movs	r2, #128	; 0x80
 800a7c2:	431a      	orrs	r2, r3
 800a7c4:	4b1e      	ldr	r3, [pc, #120]	; (800a840 <inv_build_accel+0xc0>)
 800a7c6:	675a      	str	r2, [r3, #116]	; 0x74
        inv_apply_calibration(&sensors.accel, inv_data_builder.save.accel_bias);
 800a7c8:	4a1e      	ldr	r2, [pc, #120]	; (800a844 <inv_build_accel+0xc4>)
 800a7ca:	4b1f      	ldr	r3, [pc, #124]	; (800a848 <inv_build_accel+0xc8>)
 800a7cc:	0011      	movs	r1, r2
 800a7ce:	0018      	movs	r0, r3
 800a7d0:	f7ff feba 	bl	800a548 <inv_apply_calibration>
 800a7d4:	e020      	b.n	800a818 <inv_build_accel+0x98>
    } else {
        sensors.accel.calibrated[0] = accel[0];
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	681a      	ldr	r2, [r3, #0]
 800a7da:	4b19      	ldr	r3, [pc, #100]	; (800a840 <inv_build_accel+0xc0>)
 800a7dc:	65da      	str	r2, [r3, #92]	; 0x5c
        sensors.accel.calibrated[1] = accel[1];
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	3304      	adds	r3, #4
 800a7e2:	681a      	ldr	r2, [r3, #0]
 800a7e4:	4b16      	ldr	r3, [pc, #88]	; (800a840 <inv_build_accel+0xc0>)
 800a7e6:	661a      	str	r2, [r3, #96]	; 0x60
        sensors.accel.calibrated[2] = accel[2];
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	3308      	adds	r3, #8
 800a7ec:	681a      	ldr	r2, [r3, #0]
 800a7ee:	4b14      	ldr	r3, [pc, #80]	; (800a840 <inv_build_accel+0xc0>)
 800a7f0:	665a      	str	r2, [r3, #100]	; 0x64
        sensors.accel.status |= INV_CALIBRATED;
 800a7f2:	4b13      	ldr	r3, [pc, #76]	; (800a840 <inv_build_accel+0xc0>)
 800a7f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a7f6:	2220      	movs	r2, #32
 800a7f8:	431a      	orrs	r2, r3
 800a7fa:	4b11      	ldr	r3, [pc, #68]	; (800a840 <inv_build_accel+0xc0>)
 800a7fc:	675a      	str	r2, [r3, #116]	; 0x74
        sensors.accel.accuracy = status & 3;
 800a7fe:	68bb      	ldr	r3, [r7, #8]
 800a800:	2203      	movs	r2, #3
 800a802:	401a      	ands	r2, r3
 800a804:	4b0e      	ldr	r3, [pc, #56]	; (800a840 <inv_build_accel+0xc0>)
 800a806:	679a      	str	r2, [r3, #120]	; 0x78
        inv_data_builder.save.accel_accuracy = status & 3;
 800a808:	68bb      	ldr	r3, [r7, #8]
 800a80a:	2203      	movs	r2, #3
 800a80c:	4013      	ands	r3, r2
 800a80e:	0019      	movs	r1, r3
 800a810:	4a0e      	ldr	r2, [pc, #56]	; (800a84c <inv_build_accel+0xcc>)
 800a812:	239a      	movs	r3, #154	; 0x9a
 800a814:	005b      	lsls	r3, r3, #1
 800a816:	50d1      	str	r1, [r2, r3]
    }
    sensors.accel.status |= INV_NEW_DATA | INV_SENSOR_ON;
 800a818:	4b09      	ldr	r3, [pc, #36]	; (800a840 <inv_build_accel+0xc0>)
 800a81a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a81c:	22a0      	movs	r2, #160	; 0xa0
 800a81e:	0052      	lsls	r2, r2, #1
 800a820:	431a      	orrs	r2, r3
 800a822:	4b07      	ldr	r3, [pc, #28]	; (800a840 <inv_build_accel+0xc0>)
 800a824:	675a      	str	r2, [r3, #116]	; 0x74
    sensors.accel.timestamp_prev = sensors.accel.timestamp;
 800a826:	4b06      	ldr	r3, [pc, #24]	; (800a840 <inv_build_accel+0xc0>)
 800a828:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800a82a:	4b05      	ldr	r3, [pc, #20]	; (800a840 <inv_build_accel+0xc0>)
 800a82c:	2180      	movs	r1, #128	; 0x80
 800a82e:	505a      	str	r2, [r3, r1]
    sensors.accel.timestamp = timestamp;
 800a830:	4b03      	ldr	r3, [pc, #12]	; (800a840 <inv_build_accel+0xc0>)
 800a832:	687a      	ldr	r2, [r7, #4]
 800a834:	67da      	str	r2, [r3, #124]	; 0x7c

    return INV_SUCCESS;
 800a836:	2300      	movs	r3, #0
}
 800a838:	0018      	movs	r0, r3
 800a83a:	46bd      	mov	sp, r7
 800a83c:	b004      	add	sp, #16
 800a83e:	bd80      	pop	{r7, pc}
 800a840:	20000810 	.word	0x20000810
 800a844:	200007e4 	.word	0x200007e4
 800a848:	20000854 	.word	0x20000854
 800a84c:	200006d0 	.word	0x200006d0

0800a850 <inv_build_gyro>:
* @param[in] timestamp Monotonic time stamp, for Android it's in nanoseconds.
* @param[out] executed Set to 1 if data processing was done.
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
inv_error_t inv_build_gyro(const short *gyro, inv_time_t timestamp)
{
 800a850:	b580      	push	{r7, lr}
 800a852:	b082      	sub	sp, #8
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
 800a858:	6039      	str	r1, [r7, #0]
        fwrite(gyro, sizeof(gyro[0]), 3, inv_data_builder.file);
        fwrite(&timestamp, sizeof(timestamp), 1, inv_data_builder.file);
    }
#endif

    memcpy(sensors.gyro.raw, gyro, 3 * sizeof(short));
 800a85a:	6879      	ldr	r1, [r7, #4]
 800a85c:	4b0e      	ldr	r3, [pc, #56]	; (800a898 <inv_build_gyro+0x48>)
 800a85e:	2206      	movs	r2, #6
 800a860:	0018      	movs	r0, r3
 800a862:	f007 fbf3 	bl	801204c <memcpy>
    sensors.gyro.status |= INV_NEW_DATA | INV_RAW_DATA | INV_SENSOR_ON;
 800a866:	4b0d      	ldr	r3, [pc, #52]	; (800a89c <inv_build_gyro+0x4c>)
 800a868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a86a:	22e0      	movs	r2, #224	; 0xe0
 800a86c:	0052      	lsls	r2, r2, #1
 800a86e:	431a      	orrs	r2, r3
 800a870:	4b0a      	ldr	r3, [pc, #40]	; (800a89c <inv_build_gyro+0x4c>)
 800a872:	631a      	str	r2, [r3, #48]	; 0x30
    sensors.gyro.timestamp_prev = sensors.gyro.timestamp;
 800a874:	4b09      	ldr	r3, [pc, #36]	; (800a89c <inv_build_gyro+0x4c>)
 800a876:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a878:	4b08      	ldr	r3, [pc, #32]	; (800a89c <inv_build_gyro+0x4c>)
 800a87a:	63da      	str	r2, [r3, #60]	; 0x3c
    sensors.gyro.timestamp = timestamp;
 800a87c:	4b07      	ldr	r3, [pc, #28]	; (800a89c <inv_build_gyro+0x4c>)
 800a87e:	683a      	ldr	r2, [r7, #0]
 800a880:	639a      	str	r2, [r3, #56]	; 0x38
    inv_apply_calibration(&sensors.gyro, inv_data_builder.save.gyro_bias);
 800a882:	4a07      	ldr	r2, [pc, #28]	; (800a8a0 <inv_build_gyro+0x50>)
 800a884:	4b05      	ldr	r3, [pc, #20]	; (800a89c <inv_build_gyro+0x4c>)
 800a886:	0011      	movs	r1, r2
 800a888:	0018      	movs	r0, r3
 800a88a:	f7ff fe5d 	bl	800a548 <inv_apply_calibration>

    return INV_SUCCESS;
 800a88e:	2300      	movs	r3, #0
}
 800a890:	0018      	movs	r0, r3
 800a892:	46bd      	mov	sp, r7
 800a894:	b002      	add	sp, #8
 800a896:	bd80      	pop	{r7, pc}
 800a898:	20000814 	.word	0x20000814
 800a89c:	20000810 	.word	0x20000810
 800a8a0:	200007d0 	.word	0x200007d0

0800a8a4 <inv_build_temp>:
 *  @param[in]  timestamp   Monotonic time stamp; for Android it's in
 *                          nanoseconds.
* @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_build_temp(const long temp, inv_time_t timestamp)
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b082      	sub	sp, #8
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
 800a8ac:	6039      	str	r1, [r7, #0]
        fwrite(&type, sizeof(type), 1, inv_data_builder.file);
        fwrite(&temp, sizeof(temp), 1, inv_data_builder.file);
        fwrite(&timestamp, sizeof(timestamp), 1, inv_data_builder.file);
    }
#endif
    sensors.temp.calibrated[0] = temp;
 800a8ae:	4b0f      	ldr	r3, [pc, #60]	; (800a8ec <inv_build_temp+0x48>)
 800a8b0:	21e4      	movs	r1, #228	; 0xe4
 800a8b2:	687a      	ldr	r2, [r7, #4]
 800a8b4:	505a      	str	r2, [r3, r1]
    sensors.temp.status |= INV_NEW_DATA | INV_RAW_DATA | INV_SENSOR_ON;
 800a8b6:	4b0d      	ldr	r3, [pc, #52]	; (800a8ec <inv_build_temp+0x48>)
 800a8b8:	22fc      	movs	r2, #252	; 0xfc
 800a8ba:	589b      	ldr	r3, [r3, r2]
 800a8bc:	22e0      	movs	r2, #224	; 0xe0
 800a8be:	0052      	lsls	r2, r2, #1
 800a8c0:	431a      	orrs	r2, r3
 800a8c2:	4b0a      	ldr	r3, [pc, #40]	; (800a8ec <inv_build_temp+0x48>)
 800a8c4:	21fc      	movs	r1, #252	; 0xfc
 800a8c6:	505a      	str	r2, [r3, r1]
    sensors.temp.timestamp_prev = sensors.temp.timestamp;
 800a8c8:	4a08      	ldr	r2, [pc, #32]	; (800a8ec <inv_build_temp+0x48>)
 800a8ca:	2382      	movs	r3, #130	; 0x82
 800a8cc:	005b      	lsls	r3, r3, #1
 800a8ce:	58d1      	ldr	r1, [r2, r3]
 800a8d0:	4a06      	ldr	r2, [pc, #24]	; (800a8ec <inv_build_temp+0x48>)
 800a8d2:	2384      	movs	r3, #132	; 0x84
 800a8d4:	005b      	lsls	r3, r3, #1
 800a8d6:	50d1      	str	r1, [r2, r3]
    sensors.temp.timestamp = timestamp;
 800a8d8:	4a04      	ldr	r2, [pc, #16]	; (800a8ec <inv_build_temp+0x48>)
 800a8da:	2382      	movs	r3, #130	; 0x82
 800a8dc:	005b      	lsls	r3, r3, #1
 800a8de:	6839      	ldr	r1, [r7, #0]
 800a8e0:	50d1      	str	r1, [r2, r3]
    /* TODO: Apply scale, remove offset. */

    return INV_SUCCESS;
 800a8e2:	2300      	movs	r3, #0
}
 800a8e4:	0018      	movs	r0, r3
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	b002      	add	sp, #8
 800a8ea:	bd80      	pop	{r7, pc}
 800a8ec:	20000810 	.word	0x20000810

0800a8f0 <inv_build_quat>:
*                         nanoseconds.
* @param[out] executed Set to 1 if data processing was done.
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
inv_error_t inv_build_quat(const long *quat, int status, inv_time_t timestamp)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b084      	sub	sp, #16
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	60f8      	str	r0, [r7, #12]
 800a8f8:	60b9      	str	r1, [r7, #8]
 800a8fa:	607a      	str	r2, [r7, #4]
        fwrite(quat, sizeof(quat[0]), 4, inv_data_builder.file);
        fwrite(&timestamp, sizeof(timestamp), 1, inv_data_builder.file);
    }
#endif
    
    memcpy(sensors.quat.raw, quat, sizeof(sensors.quat.raw));
 800a8fc:	68f9      	ldr	r1, [r7, #12]
 800a8fe:	4b14      	ldr	r3, [pc, #80]	; (800a950 <inv_build_quat+0x60>)
 800a900:	2210      	movs	r2, #16
 800a902:	0018      	movs	r0, r3
 800a904:	f007 fba2 	bl	801204c <memcpy>
    sensors.quat.timestamp = timestamp;
 800a908:	4a12      	ldr	r2, [pc, #72]	; (800a954 <inv_build_quat+0x64>)
 800a90a:	2392      	movs	r3, #146	; 0x92
 800a90c:	005b      	lsls	r3, r3, #1
 800a90e:	6879      	ldr	r1, [r7, #4]
 800a910:	50d1      	str	r1, [r2, r3]
    sensors.quat.status |= INV_NEW_DATA | INV_RAW_DATA | INV_SENSOR_ON;
 800a912:	4a10      	ldr	r2, [pc, #64]	; (800a954 <inv_build_quat+0x64>)
 800a914:	2390      	movs	r3, #144	; 0x90
 800a916:	005b      	lsls	r3, r3, #1
 800a918:	58d3      	ldr	r3, [r2, r3]
 800a91a:	22e0      	movs	r2, #224	; 0xe0
 800a91c:	0052      	lsls	r2, r2, #1
 800a91e:	431a      	orrs	r2, r3
 800a920:	0011      	movs	r1, r2
 800a922:	4a0c      	ldr	r2, [pc, #48]	; (800a954 <inv_build_quat+0x64>)
 800a924:	2390      	movs	r3, #144	; 0x90
 800a926:	005b      	lsls	r3, r3, #1
 800a928:	50d1      	str	r1, [r2, r3]
    sensors.quat.status |= (INV_BIAS_APPLIED & status);
 800a92a:	4a0a      	ldr	r2, [pc, #40]	; (800a954 <inv_build_quat+0x64>)
 800a92c:	2390      	movs	r3, #144	; 0x90
 800a92e:	005b      	lsls	r3, r3, #1
 800a930:	58d2      	ldr	r2, [r2, r3]
 800a932:	68b9      	ldr	r1, [r7, #8]
 800a934:	2380      	movs	r3, #128	; 0x80
 800a936:	009b      	lsls	r3, r3, #2
 800a938:	400b      	ands	r3, r1
 800a93a:	431a      	orrs	r2, r3
 800a93c:	0011      	movs	r1, r2
 800a93e:	4a05      	ldr	r2, [pc, #20]	; (800a954 <inv_build_quat+0x64>)
 800a940:	2390      	movs	r3, #144	; 0x90
 800a942:	005b      	lsls	r3, r3, #1
 800a944:	50d1      	str	r1, [r2, r3]

    return INV_SUCCESS;
 800a946:	2300      	movs	r3, #0
}
 800a948:	0018      	movs	r0, r3
 800a94a:	46bd      	mov	sp, r7
 800a94c:	b004      	add	sp, #16
 800a94e:	bd80      	pop	{r7, pc}
 800a950:	20000920 	.word	0x20000920
 800a954:	20000810 	.word	0x20000810

0800a958 <inv_accel_was_turned_off>:

/** This should be called when the accel has been turned off. This is so
* that we will know if the data is contiguous.
*/
void inv_accel_was_turned_off()
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	af00      	add	r7, sp, #0
    sensors.accel.status = 0;
 800a95c:	4b02      	ldr	r3, [pc, #8]	; (800a968 <inv_accel_was_turned_off+0x10>)
 800a95e:	2200      	movs	r2, #0
 800a960:	675a      	str	r2, [r3, #116]	; 0x74
}
 800a962:	46c0      	nop			; (mov r8, r8)
 800a964:	46bd      	mov	sp, r7
 800a966:	bd80      	pop	{r7, pc}
 800a968:	20000810 	.word	0x20000810

0800a96c <inv_gyro_was_turned_off>:

/** This should be called when the gyro has been turned off. This is so
* that we will know if the data is contiguous.
*/
void inv_gyro_was_turned_off()
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	af00      	add	r7, sp, #0
    sensors.gyro.status = 0;
 800a970:	4b02      	ldr	r3, [pc, #8]	; (800a97c <inv_gyro_was_turned_off+0x10>)
 800a972:	2200      	movs	r2, #0
 800a974:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a976:	46c0      	nop			; (mov r8, r8)
 800a978:	46bd      	mov	sp, r7
 800a97a:	bd80      	pop	{r7, pc}
 800a97c:	20000810 	.word	0x20000810

0800a980 <inv_register_data_cb>:
*            callback would be generated if there was new magnetomer data OR new accel data.
*/
inv_error_t inv_register_data_cb(
    inv_error_t (*func)(struct inv_sensor_cal_t *data),
    int priority, int sensor_type)
{
 800a980:	b590      	push	{r4, r7, lr}
 800a982:	b089      	sub	sp, #36	; 0x24
 800a984:	af00      	add	r7, sp, #0
 800a986:	60f8      	str	r0, [r7, #12]
 800a988:	60b9      	str	r1, [r7, #8]
 800a98a:	607a      	str	r2, [r7, #4]
    inv_error_t result = INV_SUCCESS;
 800a98c:	2300      	movs	r3, #0
 800a98e:	61fb      	str	r3, [r7, #28]
    int kk, nn;

    // Make sure we haven't registered this function already
    // Or used the same priority
    for (kk = 0; kk < inv_data_builder.num_cb; ++kk) {
 800a990:	2300      	movs	r3, #0
 800a992:	61bb      	str	r3, [r7, #24]
 800a994:	e01c      	b.n	800a9d0 <inv_register_data_cb+0x50>
        if ((inv_data_builder.process[kk].func == func) ||
 800a996:	494c      	ldr	r1, [pc, #304]	; (800aac8 <inv_register_data_cb+0x148>)
 800a998:	69ba      	ldr	r2, [r7, #24]
 800a99a:	0013      	movs	r3, r2
 800a99c:	005b      	lsls	r3, r3, #1
 800a99e:	189b      	adds	r3, r3, r2
 800a9a0:	009b      	lsls	r3, r3, #2
 800a9a2:	18cb      	adds	r3, r1, r3
 800a9a4:	3304      	adds	r3, #4
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	68fa      	ldr	r2, [r7, #12]
 800a9aa:	429a      	cmp	r2, r3
 800a9ac:	d00b      	beq.n	800a9c6 <inv_register_data_cb+0x46>
                (inv_data_builder.process[kk].priority == priority)) {
 800a9ae:	4946      	ldr	r1, [pc, #280]	; (800aac8 <inv_register_data_cb+0x148>)
 800a9b0:	69ba      	ldr	r2, [r7, #24]
 800a9b2:	0013      	movs	r3, r2
 800a9b4:	005b      	lsls	r3, r3, #1
 800a9b6:	189b      	adds	r3, r3, r2
 800a9b8:	009b      	lsls	r3, r3, #2
 800a9ba:	18cb      	adds	r3, r1, r3
 800a9bc:	3308      	adds	r3, #8
 800a9be:	681b      	ldr	r3, [r3, #0]
        if ((inv_data_builder.process[kk].func == func) ||
 800a9c0:	68ba      	ldr	r2, [r7, #8]
 800a9c2:	429a      	cmp	r2, r3
 800a9c4:	d101      	bne.n	800a9ca <inv_register_data_cb+0x4a>
            return INV_ERROR_INVALID_PARAMETER;    //fixme give a warning
 800a9c6:	2316      	movs	r3, #22
 800a9c8:	e079      	b.n	800aabe <inv_register_data_cb+0x13e>
    for (kk = 0; kk < inv_data_builder.num_cb; ++kk) {
 800a9ca:	69bb      	ldr	r3, [r7, #24]
 800a9cc:	3301      	adds	r3, #1
 800a9ce:	61bb      	str	r3, [r7, #24]
 800a9d0:	4b3d      	ldr	r3, [pc, #244]	; (800aac8 <inv_register_data_cb+0x148>)
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	69ba      	ldr	r2, [r7, #24]
 800a9d6:	429a      	cmp	r2, r3
 800a9d8:	dbdd      	blt.n	800a996 <inv_register_data_cb+0x16>
        }
    }

    // Make sure we have not filled up our number of allowable callbacks
    if (inv_data_builder.num_cb <= INV_MAX_DATA_CB - 1) {
 800a9da:	4b3b      	ldr	r3, [pc, #236]	; (800aac8 <inv_register_data_cb+0x148>)
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	2b13      	cmp	r3, #19
 800a9e0:	dc64      	bgt.n	800aaac <inv_register_data_cb+0x12c>
        kk = 0;
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	61bb      	str	r3, [r7, #24]
        if (inv_data_builder.num_cb != 0) {
 800a9e6:	4b38      	ldr	r3, [pc, #224]	; (800aac8 <inv_register_data_cb+0x148>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d03a      	beq.n	800aa64 <inv_register_data_cb+0xe4>
            // set kk to be where this new callback goes in the array
            while ((kk < inv_data_builder.num_cb) &&
 800a9ee:	e002      	b.n	800a9f6 <inv_register_data_cb+0x76>
                    (inv_data_builder.process[kk].priority < priority)) {
                kk++;
 800a9f0:	69bb      	ldr	r3, [r7, #24]
 800a9f2:	3301      	adds	r3, #1
 800a9f4:	61bb      	str	r3, [r7, #24]
            while ((kk < inv_data_builder.num_cb) &&
 800a9f6:	4b34      	ldr	r3, [pc, #208]	; (800aac8 <inv_register_data_cb+0x148>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	69ba      	ldr	r2, [r7, #24]
 800a9fc:	429a      	cmp	r2, r3
 800a9fe:	da0b      	bge.n	800aa18 <inv_register_data_cb+0x98>
                    (inv_data_builder.process[kk].priority < priority)) {
 800aa00:	4931      	ldr	r1, [pc, #196]	; (800aac8 <inv_register_data_cb+0x148>)
 800aa02:	69ba      	ldr	r2, [r7, #24]
 800aa04:	0013      	movs	r3, r2
 800aa06:	005b      	lsls	r3, r3, #1
 800aa08:	189b      	adds	r3, r3, r2
 800aa0a:	009b      	lsls	r3, r3, #2
 800aa0c:	18cb      	adds	r3, r1, r3
 800aa0e:	3308      	adds	r3, #8
 800aa10:	681b      	ldr	r3, [r3, #0]
            while ((kk < inv_data_builder.num_cb) &&
 800aa12:	68ba      	ldr	r2, [r7, #8]
 800aa14:	429a      	cmp	r2, r3
 800aa16:	dceb      	bgt.n	800a9f0 <inv_register_data_cb+0x70>
            }
            if (kk != inv_data_builder.num_cb) {
 800aa18:	4b2b      	ldr	r3, [pc, #172]	; (800aac8 <inv_register_data_cb+0x148>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	69ba      	ldr	r2, [r7, #24]
 800aa1e:	429a      	cmp	r2, r3
 800aa20:	d020      	beq.n	800aa64 <inv_register_data_cb+0xe4>
                // We need to move the others
                for (nn = inv_data_builder.num_cb; nn > kk; --nn) {
 800aa22:	4b29      	ldr	r3, [pc, #164]	; (800aac8 <inv_register_data_cb+0x148>)
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	617b      	str	r3, [r7, #20]
 800aa28:	e018      	b.n	800aa5c <inv_register_data_cb+0xdc>
                    inv_data_builder.process[nn] =
                        inv_data_builder.process[nn - 1];
 800aa2a:	697b      	ldr	r3, [r7, #20]
 800aa2c:	1e5a      	subs	r2, r3, #1
                    inv_data_builder.process[nn] =
 800aa2e:	4826      	ldr	r0, [pc, #152]	; (800aac8 <inv_register_data_cb+0x148>)
 800aa30:	6979      	ldr	r1, [r7, #20]
 800aa32:	000b      	movs	r3, r1
 800aa34:	005b      	lsls	r3, r3, #1
 800aa36:	185b      	adds	r3, r3, r1
 800aa38:	009b      	lsls	r3, r3, #2
 800aa3a:	2104      	movs	r1, #4
 800aa3c:	18c3      	adds	r3, r0, r3
 800aa3e:	1858      	adds	r0, r3, r1
 800aa40:	4921      	ldr	r1, [pc, #132]	; (800aac8 <inv_register_data_cb+0x148>)
 800aa42:	0013      	movs	r3, r2
 800aa44:	005b      	lsls	r3, r3, #1
 800aa46:	189b      	adds	r3, r3, r2
 800aa48:	009b      	lsls	r3, r3, #2
 800aa4a:	2204      	movs	r2, #4
 800aa4c:	18cb      	adds	r3, r1, r3
 800aa4e:	189a      	adds	r2, r3, r2
 800aa50:	0003      	movs	r3, r0
 800aa52:	ca13      	ldmia	r2!, {r0, r1, r4}
 800aa54:	c313      	stmia	r3!, {r0, r1, r4}
                for (nn = inv_data_builder.num_cb; nn > kk; --nn) {
 800aa56:	697b      	ldr	r3, [r7, #20]
 800aa58:	3b01      	subs	r3, #1
 800aa5a:	617b      	str	r3, [r7, #20]
 800aa5c:	697a      	ldr	r2, [r7, #20]
 800aa5e:	69bb      	ldr	r3, [r7, #24]
 800aa60:	429a      	cmp	r2, r3
 800aa62:	dce2      	bgt.n	800aa2a <inv_register_data_cb+0xaa>
                }
            }
        }
        // Add new callback
        inv_data_builder.process[kk].func = func;
 800aa64:	4918      	ldr	r1, [pc, #96]	; (800aac8 <inv_register_data_cb+0x148>)
 800aa66:	69ba      	ldr	r2, [r7, #24]
 800aa68:	0013      	movs	r3, r2
 800aa6a:	005b      	lsls	r3, r3, #1
 800aa6c:	189b      	adds	r3, r3, r2
 800aa6e:	009b      	lsls	r3, r3, #2
 800aa70:	18cb      	adds	r3, r1, r3
 800aa72:	3304      	adds	r3, #4
 800aa74:	68fa      	ldr	r2, [r7, #12]
 800aa76:	601a      	str	r2, [r3, #0]
        inv_data_builder.process[kk].priority = priority;
 800aa78:	4913      	ldr	r1, [pc, #76]	; (800aac8 <inv_register_data_cb+0x148>)
 800aa7a:	69ba      	ldr	r2, [r7, #24]
 800aa7c:	0013      	movs	r3, r2
 800aa7e:	005b      	lsls	r3, r3, #1
 800aa80:	189b      	adds	r3, r3, r2
 800aa82:	009b      	lsls	r3, r3, #2
 800aa84:	18cb      	adds	r3, r1, r3
 800aa86:	3308      	adds	r3, #8
 800aa88:	68ba      	ldr	r2, [r7, #8]
 800aa8a:	601a      	str	r2, [r3, #0]
        inv_data_builder.process[kk].data_required = sensor_type;
 800aa8c:	490e      	ldr	r1, [pc, #56]	; (800aac8 <inv_register_data_cb+0x148>)
 800aa8e:	69ba      	ldr	r2, [r7, #24]
 800aa90:	0013      	movs	r3, r2
 800aa92:	005b      	lsls	r3, r3, #1
 800aa94:	189b      	adds	r3, r3, r2
 800aa96:	009b      	lsls	r3, r3, #2
 800aa98:	18cb      	adds	r3, r1, r3
 800aa9a:	330c      	adds	r3, #12
 800aa9c:	687a      	ldr	r2, [r7, #4]
 800aa9e:	601a      	str	r2, [r3, #0]
        inv_data_builder.num_cb++;
 800aaa0:	4b09      	ldr	r3, [pc, #36]	; (800aac8 <inv_register_data_cb+0x148>)
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	1c5a      	adds	r2, r3, #1
 800aaa6:	4b08      	ldr	r3, [pc, #32]	; (800aac8 <inv_register_data_cb+0x148>)
 800aaa8:	601a      	str	r2, [r3, #0]
 800aaaa:	e007      	b.n	800aabc <inv_register_data_cb+0x13c>
    } else {
        MPL_LOGE("Unable to add feature callback as too many were already registered\n");
 800aaac:	4a07      	ldr	r2, [pc, #28]	; (800aacc <inv_register_data_cb+0x14c>)
 800aaae:	4b08      	ldr	r3, [pc, #32]	; (800aad0 <inv_register_data_cb+0x150>)
 800aab0:	0019      	movs	r1, r3
 800aab2:	2006      	movs	r0, #6
 800aab4:	f003 fbb4 	bl	800e220 <_MLPrintLog>
        result = INV_ERROR_MEMORY_EXAUSTED;
 800aab8:	230c      	movs	r3, #12
 800aaba:	61fb      	str	r3, [r7, #28]
    }

    return result;
 800aabc:	69fb      	ldr	r3, [r7, #28]
}
 800aabe:	0018      	movs	r0, r3
 800aac0:	46bd      	mov	sp, r7
 800aac2:	b009      	add	sp, #36	; 0x24
 800aac4:	bd90      	pop	{r4, r7, pc}
 800aac6:	46c0      	nop			; (mov r8, r8)
 800aac8:	200006d0 	.word	0x200006d0
 800aacc:	080158b0 	.word	0x080158b0
 800aad0:	080158f4 	.word	0x080158f4

0800aad4 <inv_unregister_data_cb>:
*            INV_ACCEL_NEW | INV_MAG_NEW, a
*            callback would be generated if there was new magnetomer data OR new accel data.
*/
inv_error_t inv_unregister_data_cb(
    inv_error_t (*func)(struct inv_sensor_cal_t *data))
{
 800aad4:	b590      	push	{r4, r7, lr}
 800aad6:	b085      	sub	sp, #20
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
    int kk, nn;

    for (kk = 0; kk < inv_data_builder.num_cb; ++kk) {
 800aadc:	2300      	movs	r3, #0
 800aade:	60fb      	str	r3, [r7, #12]
 800aae0:	e037      	b.n	800ab52 <inv_unregister_data_cb+0x7e>
        if (inv_data_builder.process[kk].func == func) {
 800aae2:	4921      	ldr	r1, [pc, #132]	; (800ab68 <inv_unregister_data_cb+0x94>)
 800aae4:	68fa      	ldr	r2, [r7, #12]
 800aae6:	0013      	movs	r3, r2
 800aae8:	005b      	lsls	r3, r3, #1
 800aaea:	189b      	adds	r3, r3, r2
 800aaec:	009b      	lsls	r3, r3, #2
 800aaee:	18cb      	adds	r3, r1, r3
 800aaf0:	3304      	adds	r3, #4
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	687a      	ldr	r2, [r7, #4]
 800aaf6:	429a      	cmp	r2, r3
 800aaf8:	d128      	bne.n	800ab4c <inv_unregister_data_cb+0x78>
            // Delete this callback
            for (nn = kk + 1; nn < inv_data_builder.num_cb; ++nn) {
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	3301      	adds	r3, #1
 800aafe:	60bb      	str	r3, [r7, #8]
 800ab00:	e018      	b.n	800ab34 <inv_unregister_data_cb+0x60>
                inv_data_builder.process[nn - 1] =
 800ab02:	68bb      	ldr	r3, [r7, #8]
 800ab04:	1e5a      	subs	r2, r3, #1
 800ab06:	4918      	ldr	r1, [pc, #96]	; (800ab68 <inv_unregister_data_cb+0x94>)
 800ab08:	0013      	movs	r3, r2
 800ab0a:	005b      	lsls	r3, r3, #1
 800ab0c:	189b      	adds	r3, r3, r2
 800ab0e:	009b      	lsls	r3, r3, #2
 800ab10:	2204      	movs	r2, #4
 800ab12:	18cb      	adds	r3, r1, r3
 800ab14:	1898      	adds	r0, r3, r2
 800ab16:	4914      	ldr	r1, [pc, #80]	; (800ab68 <inv_unregister_data_cb+0x94>)
 800ab18:	68ba      	ldr	r2, [r7, #8]
 800ab1a:	0013      	movs	r3, r2
 800ab1c:	005b      	lsls	r3, r3, #1
 800ab1e:	189b      	adds	r3, r3, r2
 800ab20:	009b      	lsls	r3, r3, #2
 800ab22:	2204      	movs	r2, #4
 800ab24:	18cb      	adds	r3, r1, r3
 800ab26:	189a      	adds	r2, r3, r2
 800ab28:	0003      	movs	r3, r0
 800ab2a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800ab2c:	c313      	stmia	r3!, {r0, r1, r4}
            for (nn = kk + 1; nn < inv_data_builder.num_cb; ++nn) {
 800ab2e:	68bb      	ldr	r3, [r7, #8]
 800ab30:	3301      	adds	r3, #1
 800ab32:	60bb      	str	r3, [r7, #8]
 800ab34:	4b0c      	ldr	r3, [pc, #48]	; (800ab68 <inv_unregister_data_cb+0x94>)
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	68ba      	ldr	r2, [r7, #8]
 800ab3a:	429a      	cmp	r2, r3
 800ab3c:	dbe1      	blt.n	800ab02 <inv_unregister_data_cb+0x2e>
                    inv_data_builder.process[nn];
            }
            inv_data_builder.num_cb--;
 800ab3e:	4b0a      	ldr	r3, [pc, #40]	; (800ab68 <inv_unregister_data_cb+0x94>)
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	1e5a      	subs	r2, r3, #1
 800ab44:	4b08      	ldr	r3, [pc, #32]	; (800ab68 <inv_unregister_data_cb+0x94>)
 800ab46:	601a      	str	r2, [r3, #0]
            return INV_SUCCESS;
 800ab48:	2300      	movs	r3, #0
 800ab4a:	e008      	b.n	800ab5e <inv_unregister_data_cb+0x8a>
    for (kk = 0; kk < inv_data_builder.num_cb; ++kk) {
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	3301      	adds	r3, #1
 800ab50:	60fb      	str	r3, [r7, #12]
 800ab52:	4b05      	ldr	r3, [pc, #20]	; (800ab68 <inv_unregister_data_cb+0x94>)
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	68fa      	ldr	r2, [r7, #12]
 800ab58:	429a      	cmp	r2, r3
 800ab5a:	dbc2      	blt.n	800aae2 <inv_unregister_data_cb+0xe>
        }
    }

    return INV_SUCCESS;    // We did not find the callback
 800ab5c:	2300      	movs	r3, #0
}
 800ab5e:	0018      	movs	r0, r3
 800ab60:	46bd      	mov	sp, r7
 800ab62:	b005      	add	sp, #20
 800ab64:	bd90      	pop	{r4, r7, pc}
 800ab66:	46c0      	nop			; (mov r8, r8)
 800ab68:	200006d0 	.word	0x200006d0

0800ab6c <inv_execute_on_data>:
* It will process the data it has received and update all the internal states
* and features that have been turned on.
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
inv_error_t inv_execute_on_data(void)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b084      	sub	sp, #16
 800ab70:	af00      	add	r7, sp, #0
        int type = PLAYBACK_DBG_TYPE_EXECUTE;
        fwrite(&type, sizeof(type), 1, inv_data_builder.file);
    }
#endif
    // Determine what new data we have
    mode = 0;
 800ab72:	2300      	movs	r3, #0
 800ab74:	607b      	str	r3, [r7, #4]
    if (sensors.gyro.status & INV_NEW_DATA)
 800ab76:	4b33      	ldr	r3, [pc, #204]	; (800ac44 <inv_execute_on_data+0xd8>)
 800ab78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab7a:	2240      	movs	r2, #64	; 0x40
 800ab7c:	4013      	ands	r3, r2
 800ab7e:	d003      	beq.n	800ab88 <inv_execute_on_data+0x1c>
        mode |= INV_GYRO_NEW;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	2202      	movs	r2, #2
 800ab84:	4313      	orrs	r3, r2
 800ab86:	607b      	str	r3, [r7, #4]
    if (sensors.accel.status & INV_NEW_DATA)
 800ab88:	4b2e      	ldr	r3, [pc, #184]	; (800ac44 <inv_execute_on_data+0xd8>)
 800ab8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab8c:	2240      	movs	r2, #64	; 0x40
 800ab8e:	4013      	ands	r3, r2
 800ab90:	d003      	beq.n	800ab9a <inv_execute_on_data+0x2e>
        mode |= INV_ACCEL_NEW;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	2201      	movs	r2, #1
 800ab96:	4313      	orrs	r3, r2
 800ab98:	607b      	str	r3, [r7, #4]
    if (sensors.compass.status & INV_NEW_DATA)
 800ab9a:	4b2a      	ldr	r3, [pc, #168]	; (800ac44 <inv_execute_on_data+0xd8>)
 800ab9c:	22b8      	movs	r2, #184	; 0xb8
 800ab9e:	589b      	ldr	r3, [r3, r2]
 800aba0:	2240      	movs	r2, #64	; 0x40
 800aba2:	4013      	ands	r3, r2
 800aba4:	d003      	beq.n	800abae <inv_execute_on_data+0x42>
        mode |= INV_MAG_NEW;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	2204      	movs	r2, #4
 800abaa:	4313      	orrs	r3, r2
 800abac:	607b      	str	r3, [r7, #4]
    if (sensors.temp.status & INV_NEW_DATA)
 800abae:	4b25      	ldr	r3, [pc, #148]	; (800ac44 <inv_execute_on_data+0xd8>)
 800abb0:	22fc      	movs	r2, #252	; 0xfc
 800abb2:	589b      	ldr	r3, [r3, r2]
 800abb4:	2240      	movs	r2, #64	; 0x40
 800abb6:	4013      	ands	r3, r2
 800abb8:	d003      	beq.n	800abc2 <inv_execute_on_data+0x56>
        mode |= INV_TEMP_NEW;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	2208      	movs	r2, #8
 800abbe:	4313      	orrs	r3, r2
 800abc0:	607b      	str	r3, [r7, #4]
    if (sensors.quat.status & INV_NEW_DATA)
 800abc2:	4a20      	ldr	r2, [pc, #128]	; (800ac44 <inv_execute_on_data+0xd8>)
 800abc4:	2390      	movs	r3, #144	; 0x90
 800abc6:	005b      	lsls	r3, r3, #1
 800abc8:	58d3      	ldr	r3, [r2, r3]
 800abca:	2240      	movs	r2, #64	; 0x40
 800abcc:	4013      	ands	r3, r2
 800abce:	d003      	beq.n	800abd8 <inv_execute_on_data+0x6c>
        mode |= INV_QUAT_NEW;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	2210      	movs	r2, #16
 800abd4:	4313      	orrs	r3, r2
 800abd6:	607b      	str	r3, [r7, #4]

    first_error = INV_SUCCESS;
 800abd8:	2300      	movs	r3, #0
 800abda:	60fb      	str	r3, [r7, #12]

    for (kk = 0; kk < inv_data_builder.num_cb; ++kk) {
 800abdc:	2300      	movs	r3, #0
 800abde:	60bb      	str	r3, [r7, #8]
 800abe0:	e024      	b.n	800ac2c <inv_execute_on_data+0xc0>
        if (mode & inv_data_builder.process[kk].data_required) {
 800abe2:	4919      	ldr	r1, [pc, #100]	; (800ac48 <inv_execute_on_data+0xdc>)
 800abe4:	68ba      	ldr	r2, [r7, #8]
 800abe6:	0013      	movs	r3, r2
 800abe8:	005b      	lsls	r3, r3, #1
 800abea:	189b      	adds	r3, r3, r2
 800abec:	009b      	lsls	r3, r3, #2
 800abee:	18cb      	adds	r3, r1, r3
 800abf0:	330c      	adds	r3, #12
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	687a      	ldr	r2, [r7, #4]
 800abf6:	4013      	ands	r3, r2
 800abf8:	d015      	beq.n	800ac26 <inv_execute_on_data+0xba>
            result = inv_data_builder.process[kk].func(&sensors);
 800abfa:	4913      	ldr	r1, [pc, #76]	; (800ac48 <inv_execute_on_data+0xdc>)
 800abfc:	68ba      	ldr	r2, [r7, #8]
 800abfe:	0013      	movs	r3, r2
 800ac00:	005b      	lsls	r3, r3, #1
 800ac02:	189b      	adds	r3, r3, r2
 800ac04:	009b      	lsls	r3, r3, #2
 800ac06:	18cb      	adds	r3, r1, r3
 800ac08:	3304      	adds	r3, #4
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	4a0d      	ldr	r2, [pc, #52]	; (800ac44 <inv_execute_on_data+0xd8>)
 800ac0e:	0010      	movs	r0, r2
 800ac10:	4798      	blx	r3
 800ac12:	0003      	movs	r3, r0
 800ac14:	603b      	str	r3, [r7, #0]
            if (result && !first_error) {
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d004      	beq.n	800ac26 <inv_execute_on_data+0xba>
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d101      	bne.n	800ac26 <inv_execute_on_data+0xba>
                first_error = result;
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	60fb      	str	r3, [r7, #12]
    for (kk = 0; kk < inv_data_builder.num_cb; ++kk) {
 800ac26:	68bb      	ldr	r3, [r7, #8]
 800ac28:	3301      	adds	r3, #1
 800ac2a:	60bb      	str	r3, [r7, #8]
 800ac2c:	4b06      	ldr	r3, [pc, #24]	; (800ac48 <inv_execute_on_data+0xdc>)
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	68ba      	ldr	r2, [r7, #8]
 800ac32:	429a      	cmp	r2, r3
 800ac34:	dbd5      	blt.n	800abe2 <inv_execute_on_data+0x76>
            }
        }
    }

    inv_set_contiguous();
 800ac36:	f000 f809 	bl	800ac4c <inv_set_contiguous>

    return first_error;
 800ac3a:	68fb      	ldr	r3, [r7, #12]
}
 800ac3c:	0018      	movs	r0, r3
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	b004      	add	sp, #16
 800ac42:	bd80      	pop	{r7, pc}
 800ac44:	20000810 	.word	0x20000810
 800ac48:	200006d0 	.word	0x200006d0

0800ac4c <inv_set_contiguous>:

/** Cleans up status bits after running all the callbacks. It sets the contiguous flag.
*
*/
static void inv_set_contiguous(void)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b082      	sub	sp, #8
 800ac50:	af00      	add	r7, sp, #0
    inv_time_t current_time = 0;
 800ac52:	2300      	movs	r3, #0
 800ac54:	607b      	str	r3, [r7, #4]
    if (sensors.gyro.status & INV_NEW_DATA) {
 800ac56:	4b4b      	ldr	r3, [pc, #300]	; (800ad84 <inv_set_contiguous+0x138>)
 800ac58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac5a:	2240      	movs	r2, #64	; 0x40
 800ac5c:	4013      	ands	r3, r2
 800ac5e:	d008      	beq.n	800ac72 <inv_set_contiguous+0x26>
        sensors.gyro.status |= INV_CONTIGUOUS;
 800ac60:	4b48      	ldr	r3, [pc, #288]	; (800ad84 <inv_set_contiguous+0x138>)
 800ac62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac64:	2210      	movs	r2, #16
 800ac66:	431a      	orrs	r2, r3
 800ac68:	4b46      	ldr	r3, [pc, #280]	; (800ad84 <inv_set_contiguous+0x138>)
 800ac6a:	631a      	str	r2, [r3, #48]	; 0x30
        current_time = sensors.gyro.timestamp;
 800ac6c:	4b45      	ldr	r3, [pc, #276]	; (800ad84 <inv_set_contiguous+0x138>)
 800ac6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac70:	607b      	str	r3, [r7, #4]
    }
    if (sensors.accel.status & INV_NEW_DATA) {
 800ac72:	4b44      	ldr	r3, [pc, #272]	; (800ad84 <inv_set_contiguous+0x138>)
 800ac74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac76:	2240      	movs	r2, #64	; 0x40
 800ac78:	4013      	ands	r3, r2
 800ac7a:	d00c      	beq.n	800ac96 <inv_set_contiguous+0x4a>
        sensors.accel.status |= INV_CONTIGUOUS;
 800ac7c:	4b41      	ldr	r3, [pc, #260]	; (800ad84 <inv_set_contiguous+0x138>)
 800ac7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac80:	2210      	movs	r2, #16
 800ac82:	431a      	orrs	r2, r3
 800ac84:	4b3f      	ldr	r3, [pc, #252]	; (800ad84 <inv_set_contiguous+0x138>)
 800ac86:	675a      	str	r2, [r3, #116]	; 0x74
        current_time = MAX(current_time, sensors.accel.timestamp);
 800ac88:	4b3e      	ldr	r3, [pc, #248]	; (800ad84 <inv_set_contiguous+0x138>)
 800ac8a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	4293      	cmp	r3, r2
 800ac90:	d200      	bcs.n	800ac94 <inv_set_contiguous+0x48>
 800ac92:	0013      	movs	r3, r2
 800ac94:	607b      	str	r3, [r7, #4]
    }
    if (sensors.compass.status & INV_NEW_DATA) {
 800ac96:	4b3b      	ldr	r3, [pc, #236]	; (800ad84 <inv_set_contiguous+0x138>)
 800ac98:	22b8      	movs	r2, #184	; 0xb8
 800ac9a:	589b      	ldr	r3, [r3, r2]
 800ac9c:	2240      	movs	r2, #64	; 0x40
 800ac9e:	4013      	ands	r3, r2
 800aca0:	d00f      	beq.n	800acc2 <inv_set_contiguous+0x76>
        sensors.compass.status |= INV_CONTIGUOUS;
 800aca2:	4b38      	ldr	r3, [pc, #224]	; (800ad84 <inv_set_contiguous+0x138>)
 800aca4:	22b8      	movs	r2, #184	; 0xb8
 800aca6:	589b      	ldr	r3, [r3, r2]
 800aca8:	2210      	movs	r2, #16
 800acaa:	431a      	orrs	r2, r3
 800acac:	4b35      	ldr	r3, [pc, #212]	; (800ad84 <inv_set_contiguous+0x138>)
 800acae:	21b8      	movs	r1, #184	; 0xb8
 800acb0:	505a      	str	r2, [r3, r1]
        current_time = MAX(current_time, sensors.compass.timestamp);
 800acb2:	4b34      	ldr	r3, [pc, #208]	; (800ad84 <inv_set_contiguous+0x138>)
 800acb4:	22c0      	movs	r2, #192	; 0xc0
 800acb6:	589a      	ldr	r2, [r3, r2]
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	4293      	cmp	r3, r2
 800acbc:	d200      	bcs.n	800acc0 <inv_set_contiguous+0x74>
 800acbe:	0013      	movs	r3, r2
 800acc0:	607b      	str	r3, [r7, #4]
    }
    if (sensors.temp.status & INV_NEW_DATA) {
 800acc2:	4b30      	ldr	r3, [pc, #192]	; (800ad84 <inv_set_contiguous+0x138>)
 800acc4:	22fc      	movs	r2, #252	; 0xfc
 800acc6:	589b      	ldr	r3, [r3, r2]
 800acc8:	2240      	movs	r2, #64	; 0x40
 800acca:	4013      	ands	r3, r2
 800accc:	d010      	beq.n	800acf0 <inv_set_contiguous+0xa4>
        sensors.temp.status |= INV_CONTIGUOUS;
 800acce:	4b2d      	ldr	r3, [pc, #180]	; (800ad84 <inv_set_contiguous+0x138>)
 800acd0:	22fc      	movs	r2, #252	; 0xfc
 800acd2:	589b      	ldr	r3, [r3, r2]
 800acd4:	2210      	movs	r2, #16
 800acd6:	431a      	orrs	r2, r3
 800acd8:	4b2a      	ldr	r3, [pc, #168]	; (800ad84 <inv_set_contiguous+0x138>)
 800acda:	21fc      	movs	r1, #252	; 0xfc
 800acdc:	505a      	str	r2, [r3, r1]
        current_time = MAX(current_time, sensors.temp.timestamp);
 800acde:	4a29      	ldr	r2, [pc, #164]	; (800ad84 <inv_set_contiguous+0x138>)
 800ace0:	2382      	movs	r3, #130	; 0x82
 800ace2:	005b      	lsls	r3, r3, #1
 800ace4:	58d2      	ldr	r2, [r2, r3]
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	4293      	cmp	r3, r2
 800acea:	d200      	bcs.n	800acee <inv_set_contiguous+0xa2>
 800acec:	0013      	movs	r3, r2
 800acee:	607b      	str	r3, [r7, #4]
    }
    if (sensors.quat.status & INV_NEW_DATA) {
 800acf0:	4a24      	ldr	r2, [pc, #144]	; (800ad84 <inv_set_contiguous+0x138>)
 800acf2:	2390      	movs	r3, #144	; 0x90
 800acf4:	005b      	lsls	r3, r3, #1
 800acf6:	58d3      	ldr	r3, [r2, r3]
 800acf8:	2240      	movs	r2, #64	; 0x40
 800acfa:	4013      	ands	r3, r2
 800acfc:	d013      	beq.n	800ad26 <inv_set_contiguous+0xda>
        sensors.quat.status |= INV_CONTIGUOUS;
 800acfe:	4a21      	ldr	r2, [pc, #132]	; (800ad84 <inv_set_contiguous+0x138>)
 800ad00:	2390      	movs	r3, #144	; 0x90
 800ad02:	005b      	lsls	r3, r3, #1
 800ad04:	58d3      	ldr	r3, [r2, r3]
 800ad06:	2210      	movs	r2, #16
 800ad08:	431a      	orrs	r2, r3
 800ad0a:	0011      	movs	r1, r2
 800ad0c:	4a1d      	ldr	r2, [pc, #116]	; (800ad84 <inv_set_contiguous+0x138>)
 800ad0e:	2390      	movs	r3, #144	; 0x90
 800ad10:	005b      	lsls	r3, r3, #1
 800ad12:	50d1      	str	r1, [r2, r3]
        current_time = MAX(current_time, sensors.quat.timestamp);
 800ad14:	4a1b      	ldr	r2, [pc, #108]	; (800ad84 <inv_set_contiguous+0x138>)
 800ad16:	2392      	movs	r3, #146	; 0x92
 800ad18:	005b      	lsls	r3, r3, #1
 800ad1a:	58d2      	ldr	r2, [r2, r3]
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	4293      	cmp	r3, r2
 800ad20:	d200      	bcs.n	800ad24 <inv_set_contiguous+0xd8>
 800ad22:	0013      	movs	r3, r2
 800ad24:	607b      	str	r3, [r7, #4]
    if (inv_delta_time_ms(current_time, sensors.temp.timestamp) >= 2000)
        inv_temperature_was_turned_off();
#endif

    /* clear bits */
    sensors.gyro.status &= ~INV_NEW_DATA;
 800ad26:	4b17      	ldr	r3, [pc, #92]	; (800ad84 <inv_set_contiguous+0x138>)
 800ad28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad2a:	2240      	movs	r2, #64	; 0x40
 800ad2c:	4393      	bics	r3, r2
 800ad2e:	001a      	movs	r2, r3
 800ad30:	4b14      	ldr	r3, [pc, #80]	; (800ad84 <inv_set_contiguous+0x138>)
 800ad32:	631a      	str	r2, [r3, #48]	; 0x30
    sensors.accel.status &= ~INV_NEW_DATA;
 800ad34:	4b13      	ldr	r3, [pc, #76]	; (800ad84 <inv_set_contiguous+0x138>)
 800ad36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ad38:	2240      	movs	r2, #64	; 0x40
 800ad3a:	4393      	bics	r3, r2
 800ad3c:	001a      	movs	r2, r3
 800ad3e:	4b11      	ldr	r3, [pc, #68]	; (800ad84 <inv_set_contiguous+0x138>)
 800ad40:	675a      	str	r2, [r3, #116]	; 0x74
    sensors.compass.status &= ~INV_NEW_DATA;
 800ad42:	4b10      	ldr	r3, [pc, #64]	; (800ad84 <inv_set_contiguous+0x138>)
 800ad44:	22b8      	movs	r2, #184	; 0xb8
 800ad46:	589b      	ldr	r3, [r3, r2]
 800ad48:	2240      	movs	r2, #64	; 0x40
 800ad4a:	4393      	bics	r3, r2
 800ad4c:	001a      	movs	r2, r3
 800ad4e:	4b0d      	ldr	r3, [pc, #52]	; (800ad84 <inv_set_contiguous+0x138>)
 800ad50:	21b8      	movs	r1, #184	; 0xb8
 800ad52:	505a      	str	r2, [r3, r1]
    sensors.temp.status &= ~INV_NEW_DATA;
 800ad54:	4b0b      	ldr	r3, [pc, #44]	; (800ad84 <inv_set_contiguous+0x138>)
 800ad56:	22fc      	movs	r2, #252	; 0xfc
 800ad58:	589b      	ldr	r3, [r3, r2]
 800ad5a:	2240      	movs	r2, #64	; 0x40
 800ad5c:	4393      	bics	r3, r2
 800ad5e:	001a      	movs	r2, r3
 800ad60:	4b08      	ldr	r3, [pc, #32]	; (800ad84 <inv_set_contiguous+0x138>)
 800ad62:	21fc      	movs	r1, #252	; 0xfc
 800ad64:	505a      	str	r2, [r3, r1]
    sensors.quat.status &= ~INV_NEW_DATA;
 800ad66:	4a07      	ldr	r2, [pc, #28]	; (800ad84 <inv_set_contiguous+0x138>)
 800ad68:	2390      	movs	r3, #144	; 0x90
 800ad6a:	005b      	lsls	r3, r3, #1
 800ad6c:	58d3      	ldr	r3, [r2, r3]
 800ad6e:	2240      	movs	r2, #64	; 0x40
 800ad70:	4393      	bics	r3, r2
 800ad72:	0019      	movs	r1, r3
 800ad74:	4a03      	ldr	r2, [pc, #12]	; (800ad84 <inv_set_contiguous+0x138>)
 800ad76:	2390      	movs	r3, #144	; 0x90
 800ad78:	005b      	lsls	r3, r3, #1
 800ad7a:	50d1      	str	r1, [r2, r3]
}
 800ad7c:	46c0      	nop			; (mov r8, r8)
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	b002      	add	sp, #8
 800ad82:	bd80      	pop	{r7, pc}
 800ad84:	20000810 	.word	0x20000810

0800ad88 <inv_get_accel_set>:
 * @param[out] data Accel Data where 1g = 2^16
 * @param[out] accuracy Accuracy 0 being not accurate, and 3 being most accurate.
 * @param[out] timestamp The timestamp of the data sample.
*/
void inv_get_accel_set(long *data, int8_t *accuracy, inv_time_t *timestamp)
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b084      	sub	sp, #16
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	60f8      	str	r0, [r7, #12]
 800ad90:	60b9      	str	r1, [r7, #8]
 800ad92:	607a      	str	r2, [r7, #4]
    if (data != NULL) {
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d005      	beq.n	800ada6 <inv_get_accel_set+0x1e>
        memcpy(data, sensors.accel.calibrated, sizeof(sensors.accel.calibrated));
 800ad9a:	490c      	ldr	r1, [pc, #48]	; (800adcc <inv_get_accel_set+0x44>)
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	220c      	movs	r2, #12
 800ada0:	0018      	movs	r0, r3
 800ada2:	f007 f953 	bl	801204c <memcpy>
    }
    if (timestamp != NULL) {
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d003      	beq.n	800adb4 <inv_get_accel_set+0x2c>
        *timestamp = sensors.accel.timestamp;
 800adac:	4b08      	ldr	r3, [pc, #32]	; (800add0 <inv_get_accel_set+0x48>)
 800adae:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	601a      	str	r2, [r3, #0]
    }
    if (accuracy != NULL) {
 800adb4:	68bb      	ldr	r3, [r7, #8]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d004      	beq.n	800adc4 <inv_get_accel_set+0x3c>
        *accuracy = sensors.accel.accuracy;
 800adba:	4b05      	ldr	r3, [pc, #20]	; (800add0 <inv_get_accel_set+0x48>)
 800adbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800adbe:	b25a      	sxtb	r2, r3
 800adc0:	68bb      	ldr	r3, [r7, #8]
 800adc2:	701a      	strb	r2, [r3, #0]
    }
}
 800adc4:	46c0      	nop			; (mov r8, r8)
 800adc6:	46bd      	mov	sp, r7
 800adc8:	b004      	add	sp, #16
 800adca:	bd80      	pop	{r7, pc}
 800adcc:	2000086c 	.word	0x2000086c
 800add0:	20000810 	.word	0x20000810

0800add4 <inv_get_gyro>:

/** Get's latest gyro data.
* @param[out] gyro Gyro Data, Length 3. 1 dps = 2^16.
*/
void inv_get_gyro(long *gyro)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b082      	sub	sp, #8
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
    memcpy(gyro, sensors.gyro.calibrated, sizeof(sensors.gyro.calibrated));
 800addc:	4904      	ldr	r1, [pc, #16]	; (800adf0 <inv_get_gyro+0x1c>)
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	220c      	movs	r2, #12
 800ade2:	0018      	movs	r0, r3
 800ade4:	f007 f932 	bl	801204c <memcpy>
}
 800ade8:	46c0      	nop			; (mov r8, r8)
 800adea:	46bd      	mov	sp, r7
 800adec:	b002      	add	sp, #8
 800adee:	bd80      	pop	{r7, pc}
 800adf0:	20000828 	.word	0x20000828

0800adf4 <inv_get_gyro_accuracy>:

/** Returns accuracy of gyro.
 * @return Accuracy of gyro with 0 being not accurate, and 3 being most accurate.
*/
int inv_get_gyro_accuracy(void)
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	af00      	add	r7, sp, #0
    return sensors.gyro.accuracy;
 800adf8:	4b02      	ldr	r3, [pc, #8]	; (800ae04 <inv_get_gyro_accuracy+0x10>)
 800adfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 800adfc:	0018      	movs	r0, r3
 800adfe:	46bd      	mov	sp, r7
 800ae00:	bd80      	pop	{r7, pc}
 800ae02:	46c0      	nop			; (mov r8, r8)
 800ae04:	20000810 	.word	0x20000810

0800ae08 <inv_get_mag_accuracy>:

/** Returns accuracy of compass.
 * @return Accuracy of compass with 0 being not accurate, and 3 being most accurate.
*/
int inv_get_mag_accuracy(void)
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	af00      	add	r7, sp, #0
    if (inv_data_builder.compass_disturbance)
 800ae0c:	4a06      	ldr	r2, [pc, #24]	; (800ae28 <inv_get_mag_accuracy+0x20>)
 800ae0e:	239e      	movs	r3, #158	; 0x9e
 800ae10:	005b      	lsls	r3, r3, #1
 800ae12:	58d3      	ldr	r3, [r2, r3]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d001      	beq.n	800ae1c <inv_get_mag_accuracy+0x14>
        return 0;
 800ae18:	2300      	movs	r3, #0
 800ae1a:	e002      	b.n	800ae22 <inv_get_mag_accuracy+0x1a>
    return sensors.compass.accuracy;
 800ae1c:	4b03      	ldr	r3, [pc, #12]	; (800ae2c <inv_get_mag_accuracy+0x24>)
 800ae1e:	22bc      	movs	r2, #188	; 0xbc
 800ae20:	589b      	ldr	r3, [r3, r2]
}
 800ae22:	0018      	movs	r0, r3
 800ae24:	46bd      	mov	sp, r7
 800ae26:	bd80      	pop	{r7, pc}
 800ae28:	200006d0 	.word	0x200006d0
 800ae2c:	20000810 	.word	0x20000810

0800ae30 <inv_get_accel_accuracy>:

/** Returns accuracy of accel.
 * @return Accuracy of accel with 0 being not accurate, and 3 being most accurate.
*/
int inv_get_accel_accuracy(void)
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	af00      	add	r7, sp, #0
    return sensors.accel.accuracy;
 800ae34:	4b02      	ldr	r3, [pc, #8]	; (800ae40 <inv_get_accel_accuracy+0x10>)
 800ae36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
}
 800ae38:	0018      	movs	r0, r3
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	bd80      	pop	{r7, pc}
 800ae3e:	46c0      	nop			; (mov r8, r8)
 800ae40:	20000810 	.word	0x20000810

0800ae44 <inv_reset_compass_soft_iron_matrix>:
}

/** This subroutine resets the the soft iron transformation to unity matrix and
 * disable the soft iron transformation process by default.
*/
void inv_reset_compass_soft_iron_matrix(void)  {
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b082      	sub	sp, #8
 800ae48:	af00      	add	r7, sp, #0
    int i;
    for (i=0; i<9; i++) {
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	607b      	str	r3, [r7, #4]
 800ae4e:	e00a      	b.n	800ae66 <inv_reset_compass_soft_iron_matrix+0x22>
        sensors.soft_iron.matrix_f[i] = 0.0f;
 800ae50:	4a1a      	ldr	r2, [pc, #104]	; (800aebc <inv_reset_compass_soft_iron_matrix+0x78>)
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	335a      	adds	r3, #90	; 0x5a
 800ae56:	009b      	lsls	r3, r3, #2
 800ae58:	18d3      	adds	r3, r2, r3
 800ae5a:	3304      	adds	r3, #4
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	601a      	str	r2, [r3, #0]
    for (i=0; i<9; i++) {
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	3301      	adds	r3, #1
 800ae64:	607b      	str	r3, [r7, #4]
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	2b08      	cmp	r3, #8
 800ae6a:	ddf1      	ble.n	800ae50 <inv_reset_compass_soft_iron_matrix+0xc>
    }

    memset(&sensors.soft_iron.matrix_d,0,sizeof(sensors.soft_iron.matrix_d));
 800ae6c:	4b14      	ldr	r3, [pc, #80]	; (800aec0 <inv_reset_compass_soft_iron_matrix+0x7c>)
 800ae6e:	2224      	movs	r2, #36	; 0x24
 800ae70:	2100      	movs	r1, #0
 800ae72:	0018      	movs	r0, r3
 800ae74:	f007 f857 	bl	8011f26 <memset>

    for (i=0; i<3; i++)  {
 800ae78:	2300      	movs	r3, #0
 800ae7a:	607b      	str	r3, [r7, #4]
 800ae7c:	e014      	b.n	800aea8 <inv_reset_compass_soft_iron_matrix+0x64>
        // set the floating point matrix
        sensors.soft_iron.matrix_f[i*4] = 1.0;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	009b      	lsls	r3, r3, #2
 800ae82:	4a0e      	ldr	r2, [pc, #56]	; (800aebc <inv_reset_compass_soft_iron_matrix+0x78>)
 800ae84:	335a      	adds	r3, #90	; 0x5a
 800ae86:	009b      	lsls	r3, r3, #2
 800ae88:	18d3      	adds	r3, r2, r3
 800ae8a:	3304      	adds	r3, #4
 800ae8c:	22fe      	movs	r2, #254	; 0xfe
 800ae8e:	0592      	lsls	r2, r2, #22
 800ae90:	601a      	str	r2, [r3, #0]
        // set the fixed point matrix
        sensors.soft_iron.matrix_d[i*4] = ROT_MATRIX_SCALE_LONG;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	009a      	lsls	r2, r3, #2
 800ae96:	4b09      	ldr	r3, [pc, #36]	; (800aebc <inv_reset_compass_soft_iron_matrix+0x78>)
 800ae98:	3252      	adds	r2, #82	; 0x52
 800ae9a:	0092      	lsls	r2, r2, #2
 800ae9c:	2180      	movs	r1, #128	; 0x80
 800ae9e:	05c9      	lsls	r1, r1, #23
 800aea0:	50d1      	str	r1, [r2, r3]
    for (i=0; i<3; i++)  {
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	3301      	adds	r3, #1
 800aea6:	607b      	str	r3, [r7, #4]
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2b02      	cmp	r3, #2
 800aeac:	dde7      	ble.n	800ae7e <inv_reset_compass_soft_iron_matrix+0x3a>
    }

    inv_disable_compass_soft_iron_matrix();
 800aeae:	f000 f809 	bl	800aec4 <inv_disable_compass_soft_iron_matrix>
}
 800aeb2:	46c0      	nop			; (mov r8, r8)
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	b002      	add	sp, #8
 800aeb8:	bd80      	pop	{r7, pc}
 800aeba:	46c0      	nop			; (mov r8, r8)
 800aebc:	20000810 	.word	0x20000810
 800aec0:	20000958 	.word	0x20000958

0800aec4 <inv_disable_compass_soft_iron_matrix>:
    sensors.soft_iron.enable = 1;
}

/** This subroutine disables the the soft iron transformation process.
*/
void inv_disable_compass_soft_iron_matrix(void)   {
 800aec4:	b580      	push	{r7, lr}
 800aec6:	af00      	add	r7, sp, #0
    sensors.soft_iron.enable = 0;
 800aec8:	4a03      	ldr	r2, [pc, #12]	; (800aed8 <inv_disable_compass_soft_iron_matrix+0x14>)
 800aeca:	23c8      	movs	r3, #200	; 0xc8
 800aecc:	005b      	lsls	r3, r3, #1
 800aece:	2100      	movs	r1, #0
 800aed0:	50d1      	str	r1, [r2, r3]
}
 800aed2:	46c0      	nop			; (mov r8, r8)
 800aed4:	46bd      	mov	sp, r7
 800aed6:	bd80      	pop	{r7, pc}
 800aed8:	20000810 	.word	0x20000810

0800aedc <inv_get_sensor_type_quat>:
 *                          to 3 (most accurate).
 *  @param[out] timestamp   The time in milliseconds when this sensor was read.
 *  @return     1 if data was updated. 
 */
int inv_get_sensor_type_quat(long *data, int8_t *accuracy, inv_time_t *timestamp)
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b084      	sub	sp, #16
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	60f8      	str	r0, [r7, #12]
 800aee4:	60b9      	str	r1, [r7, #8]
 800aee6:	607a      	str	r2, [r7, #4]
    memcpy(data, eMPL_out.quat, sizeof(eMPL_out.quat));
 800aee8:	490a      	ldr	r1, [pc, #40]	; (800af14 <inv_get_sensor_type_quat+0x38>)
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	2210      	movs	r2, #16
 800aeee:	0018      	movs	r0, r3
 800aef0:	f007 f8ac 	bl	801204c <memcpy>
    accuracy[0] = eMPL_out.quat_accuracy;
 800aef4:	4b07      	ldr	r3, [pc, #28]	; (800af14 <inv_get_sensor_type_quat+0x38>)
 800aef6:	691b      	ldr	r3, [r3, #16]
 800aef8:	b25a      	sxtb	r2, r3
 800aefa:	68bb      	ldr	r3, [r7, #8]
 800aefc:	701a      	strb	r2, [r3, #0]
    timestamp[0] = eMPL_out.nine_axis_timestamp;
 800aefe:	4b05      	ldr	r3, [pc, #20]	; (800af14 <inv_get_sensor_type_quat+0x38>)
 800af00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	601a      	str	r2, [r3, #0]
    return eMPL_out.nine_axis_status;
 800af06:	4b03      	ldr	r3, [pc, #12]	; (800af14 <inv_get_sensor_type_quat+0x38>)
 800af08:	6a1b      	ldr	r3, [r3, #32]
}
 800af0a:	0018      	movs	r0, r3
 800af0c:	46bd      	mov	sp, r7
 800af0e:	b004      	add	sp, #16
 800af10:	bd80      	pop	{r7, pc}
 800af12:	46c0      	nop			; (mov r8, r8)
 800af14:	200009a8 	.word	0x200009a8

0800af18 <inv_generate_eMPL_outputs>:
    return eMPL_out.nine_axis_status;
}

static inv_error_t inv_generate_eMPL_outputs
    (struct inv_sensor_cal_t *sensor_cal)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b084      	sub	sp, #16
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
    int use_sensor;
    long sr = 1000;
 800af20:	23fa      	movs	r3, #250	; 0xfa
 800af22:	009b      	lsls	r3, r3, #2
 800af24:	60bb      	str	r3, [r7, #8]
    inv_get_quaternion_set(eMPL_out.quat, &eMPL_out.quat_accuracy, &eMPL_out.nine_axis_timestamp);
 800af26:	4a4f      	ldr	r2, [pc, #316]	; (800b064 <inv_generate_eMPL_outputs+0x14c>)
 800af28:	494f      	ldr	r1, [pc, #316]	; (800b068 <inv_generate_eMPL_outputs+0x150>)
 800af2a:	4b50      	ldr	r3, [pc, #320]	; (800b06c <inv_generate_eMPL_outputs+0x154>)
 800af2c:	0018      	movs	r0, r3
 800af2e:	f004 fb4f 	bl	800f5d0 <inv_get_quaternion_set>
    eMPL_out.gyro_status = sensor_cal->gyro.status;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800af36:	4b4d      	ldr	r3, [pc, #308]	; (800b06c <inv_generate_eMPL_outputs+0x154>)
 800af38:	615a      	str	r2, [r3, #20]
    eMPL_out.accel_status = sensor_cal->accel.status;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800af3e:	4b4b      	ldr	r3, [pc, #300]	; (800b06c <inv_generate_eMPL_outputs+0x154>)
 800af40:	619a      	str	r2, [r3, #24]
    eMPL_out.compass_status = sensor_cal->compass.status;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	22b8      	movs	r2, #184	; 0xb8
 800af46:	589a      	ldr	r2, [r3, r2]
 800af48:	4b48      	ldr	r3, [pc, #288]	; (800b06c <inv_generate_eMPL_outputs+0x154>)
 800af4a:	61da      	str	r2, [r3, #28]
    
    /* Find the highest sample rate and tie sensor fusion timestamps to that one. */
    if (sensor_cal->gyro.status & INV_SENSOR_ON) {
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800af50:	2380      	movs	r3, #128	; 0x80
 800af52:	005b      	lsls	r3, r3, #1
 800af54:	4013      	ands	r3, r2
 800af56:	d004      	beq.n	800af62 <inv_generate_eMPL_outputs+0x4a>
        sr = sensor_cal->gyro.sample_rate_ms;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af5c:	60bb      	str	r3, [r7, #8]
        use_sensor = 0;
 800af5e:	2300      	movs	r3, #0
 800af60:	60fb      	str	r3, [r7, #12]
    }
    if ((sensor_cal->accel.status & INV_SENSOR_ON) && (sr > sensor_cal->accel.sample_rate_ms)) {
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800af66:	2380      	movs	r3, #128	; 0x80
 800af68:	005b      	lsls	r3, r3, #1
 800af6a:	4013      	ands	r3, r2
 800af6c:	d009      	beq.n	800af82 <inv_generate_eMPL_outputs+0x6a>
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af72:	68ba      	ldr	r2, [r7, #8]
 800af74:	429a      	cmp	r2, r3
 800af76:	dd04      	ble.n	800af82 <inv_generate_eMPL_outputs+0x6a>
        sr = sensor_cal->accel.sample_rate_ms;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af7c:	60bb      	str	r3, [r7, #8]
        use_sensor = 1;
 800af7e:	2301      	movs	r3, #1
 800af80:	60fb      	str	r3, [r7, #12]
    }
    if ((sensor_cal->compass.status & INV_SENSOR_ON) && (sr > sensor_cal->compass.sample_rate_ms)) {
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	22b8      	movs	r2, #184	; 0xb8
 800af86:	589a      	ldr	r2, [r3, r2]
 800af88:	2380      	movs	r3, #128	; 0x80
 800af8a:	005b      	lsls	r3, r3, #1
 800af8c:	4013      	ands	r3, r2
 800af8e:	d00b      	beq.n	800afa8 <inv_generate_eMPL_outputs+0x90>
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	22b4      	movs	r2, #180	; 0xb4
 800af94:	589b      	ldr	r3, [r3, r2]
 800af96:	68ba      	ldr	r2, [r7, #8]
 800af98:	429a      	cmp	r2, r3
 800af9a:	dd05      	ble.n	800afa8 <inv_generate_eMPL_outputs+0x90>
        sr = sensor_cal->compass.sample_rate_ms;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	22b4      	movs	r2, #180	; 0xb4
 800afa0:	589b      	ldr	r3, [r3, r2]
 800afa2:	60bb      	str	r3, [r7, #8]
        use_sensor = 2;
 800afa4:	2302      	movs	r3, #2
 800afa6:	60fb      	str	r3, [r7, #12]
    }
    if ((sensor_cal->quat.status & INV_SENSOR_ON) && (sr > sensor_cal->quat.sample_rate_ms)) {
 800afa8:	687a      	ldr	r2, [r7, #4]
 800afaa:	2390      	movs	r3, #144	; 0x90
 800afac:	005b      	lsls	r3, r3, #1
 800afae:	58d2      	ldr	r2, [r2, r3]
 800afb0:	2380      	movs	r3, #128	; 0x80
 800afb2:	005b      	lsls	r3, r3, #1
 800afb4:	4013      	ands	r3, r2
 800afb6:	d00d      	beq.n	800afd4 <inv_generate_eMPL_outputs+0xbc>
 800afb8:	687a      	ldr	r2, [r7, #4]
 800afba:	2396      	movs	r3, #150	; 0x96
 800afbc:	005b      	lsls	r3, r3, #1
 800afbe:	58d3      	ldr	r3, [r2, r3]
 800afc0:	68ba      	ldr	r2, [r7, #8]
 800afc2:	429a      	cmp	r2, r3
 800afc4:	dd06      	ble.n	800afd4 <inv_generate_eMPL_outputs+0xbc>
        sr = sensor_cal->quat.sample_rate_ms;
 800afc6:	687a      	ldr	r2, [r7, #4]
 800afc8:	2396      	movs	r3, #150	; 0x96
 800afca:	005b      	lsls	r3, r3, #1
 800afcc:	58d3      	ldr	r3, [r2, r3]
 800afce:	60bb      	str	r3, [r7, #8]
        use_sensor = 3;
 800afd0:	2303      	movs	r3, #3
 800afd2:	60fb      	str	r3, [r7, #12]
    }

    switch (use_sensor) {
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	2b03      	cmp	r3, #3
 800afd8:	d02e      	beq.n	800b038 <inv_generate_eMPL_outputs+0x120>
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	2b03      	cmp	r3, #3
 800afde:	dc05      	bgt.n	800afec <inv_generate_eMPL_outputs+0xd4>
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	2b01      	cmp	r3, #1
 800afe4:	d00e      	beq.n	800b004 <inv_generate_eMPL_outputs+0xec>
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	2b02      	cmp	r3, #2
 800afea:	d017      	beq.n	800b01c <inv_generate_eMPL_outputs+0x104>
    default:
    case 0:
        eMPL_out.nine_axis_status = (sensor_cal->gyro.status & INV_NEW_DATA) ? 1 : 0;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aff0:	119b      	asrs	r3, r3, #6
 800aff2:	2201      	movs	r2, #1
 800aff4:	401a      	ands	r2, r3
 800aff6:	4b1d      	ldr	r3, [pc, #116]	; (800b06c <inv_generate_eMPL_outputs+0x154>)
 800aff8:	621a      	str	r2, [r3, #32]
        eMPL_out.nine_axis_timestamp = sensor_cal->gyro.timestamp;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800affe:	4b1b      	ldr	r3, [pc, #108]	; (800b06c <inv_generate_eMPL_outputs+0x154>)
 800b000:	625a      	str	r2, [r3, #36]	; 0x24
        break;
 800b002:	e029      	b.n	800b058 <inv_generate_eMPL_outputs+0x140>
    case 1:
        eMPL_out.nine_axis_status = (sensor_cal->accel.status & INV_NEW_DATA) ? 1 : 0;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b008:	119b      	asrs	r3, r3, #6
 800b00a:	2201      	movs	r2, #1
 800b00c:	401a      	ands	r2, r3
 800b00e:	4b17      	ldr	r3, [pc, #92]	; (800b06c <inv_generate_eMPL_outputs+0x154>)
 800b010:	621a      	str	r2, [r3, #32]
        eMPL_out.nine_axis_timestamp = sensor_cal->accel.timestamp;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800b016:	4b15      	ldr	r3, [pc, #84]	; (800b06c <inv_generate_eMPL_outputs+0x154>)
 800b018:	625a      	str	r2, [r3, #36]	; 0x24
        break;
 800b01a:	e01d      	b.n	800b058 <inv_generate_eMPL_outputs+0x140>
    case 2:
        eMPL_out.nine_axis_status = (sensor_cal->compass.status & INV_NEW_DATA) ? 1 : 0;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	22b8      	movs	r2, #184	; 0xb8
 800b020:	589b      	ldr	r3, [r3, r2]
 800b022:	119b      	asrs	r3, r3, #6
 800b024:	2201      	movs	r2, #1
 800b026:	401a      	ands	r2, r3
 800b028:	4b10      	ldr	r3, [pc, #64]	; (800b06c <inv_generate_eMPL_outputs+0x154>)
 800b02a:	621a      	str	r2, [r3, #32]
        eMPL_out.nine_axis_timestamp = sensor_cal->compass.timestamp;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	22c0      	movs	r2, #192	; 0xc0
 800b030:	589a      	ldr	r2, [r3, r2]
 800b032:	4b0e      	ldr	r3, [pc, #56]	; (800b06c <inv_generate_eMPL_outputs+0x154>)
 800b034:	625a      	str	r2, [r3, #36]	; 0x24
        break;
 800b036:	e00f      	b.n	800b058 <inv_generate_eMPL_outputs+0x140>
    case 3:
        eMPL_out.nine_axis_status = (sensor_cal->quat.status & INV_NEW_DATA) ? 1 : 0;
 800b038:	687a      	ldr	r2, [r7, #4]
 800b03a:	2390      	movs	r3, #144	; 0x90
 800b03c:	005b      	lsls	r3, r3, #1
 800b03e:	58d3      	ldr	r3, [r2, r3]
 800b040:	119b      	asrs	r3, r3, #6
 800b042:	2201      	movs	r2, #1
 800b044:	401a      	ands	r2, r3
 800b046:	4b09      	ldr	r3, [pc, #36]	; (800b06c <inv_generate_eMPL_outputs+0x154>)
 800b048:	621a      	str	r2, [r3, #32]
        eMPL_out.nine_axis_timestamp = sensor_cal->quat.timestamp;
 800b04a:	687a      	ldr	r2, [r7, #4]
 800b04c:	2392      	movs	r3, #146	; 0x92
 800b04e:	005b      	lsls	r3, r3, #1
 800b050:	58d2      	ldr	r2, [r2, r3]
 800b052:	4b06      	ldr	r3, [pc, #24]	; (800b06c <inv_generate_eMPL_outputs+0x154>)
 800b054:	625a      	str	r2, [r3, #36]	; 0x24
        break;
 800b056:	46c0      	nop			; (mov r8, r8)
    }
    
    
    return INV_SUCCESS;
 800b058:	2300      	movs	r3, #0
}
 800b05a:	0018      	movs	r0, r3
 800b05c:	46bd      	mov	sp, r7
 800b05e:	b004      	add	sp, #16
 800b060:	bd80      	pop	{r7, pc}
 800b062:	46c0      	nop			; (mov r8, r8)
 800b064:	200009cc 	.word	0x200009cc
 800b068:	200009b8 	.word	0x200009b8
 800b06c:	200009a8 	.word	0x200009a8

0800b070 <inv_start_eMPL_outputs>:

static inv_error_t inv_start_eMPL_outputs(void)
{
 800b070:	b580      	push	{r7, lr}
 800b072:	af00      	add	r7, sp, #0
    return inv_register_data_cb(inv_generate_eMPL_outputs,
 800b074:	23e1      	movs	r3, #225	; 0xe1
 800b076:	0099      	lsls	r1, r3, #2
 800b078:	4b04      	ldr	r3, [pc, #16]	; (800b08c <inv_start_eMPL_outputs+0x1c>)
 800b07a:	2207      	movs	r2, #7
 800b07c:	0018      	movs	r0, r3
 800b07e:	f7ff fc7f 	bl	800a980 <inv_register_data_cb>
 800b082:	0003      	movs	r3, r0
        INV_PRIORITY_HAL_OUTPUTS, INV_GYRO_NEW | INV_ACCEL_NEW | INV_MAG_NEW);
}
 800b084:	0018      	movs	r0, r3
 800b086:	46bd      	mov	sp, r7
 800b088:	bd80      	pop	{r7, pc}
 800b08a:	46c0      	nop			; (mov r8, r8)
 800b08c:	0800af19 	.word	0x0800af19

0800b090 <inv_init_eMPL_outputs>:
{
    return inv_unregister_data_cb(inv_generate_eMPL_outputs);
}

static inv_error_t inv_init_eMPL_outputs(void)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	af00      	add	r7, sp, #0
    memset(&eMPL_out, 0, sizeof(eMPL_out));
 800b094:	4b04      	ldr	r3, [pc, #16]	; (800b0a8 <inv_init_eMPL_outputs+0x18>)
 800b096:	2228      	movs	r2, #40	; 0x28
 800b098:	2100      	movs	r1, #0
 800b09a:	0018      	movs	r0, r3
 800b09c:	f006 ff43 	bl	8011f26 <memset>
    return INV_SUCCESS;
 800b0a0:	2300      	movs	r3, #0
}
 800b0a2:	0018      	movs	r0, r3
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	bd80      	pop	{r7, pc}
 800b0a8:	200009a8 	.word	0x200009a8

0800b0ac <inv_enable_eMPL_outputs>:

/**
 *  @brief  Turns on creation and storage of HAL type results.
 */
inv_error_t inv_enable_eMPL_outputs(void)
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b082      	sub	sp, #8
 800b0b0:	af00      	add	r7, sp, #0
    inv_error_t result;
    result = inv_init_eMPL_outputs();
 800b0b2:	f7ff ffed 	bl	800b090 <inv_init_eMPL_outputs>
 800b0b6:	0003      	movs	r3, r0
 800b0b8:	607b      	str	r3, [r7, #4]
    if (result)
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d001      	beq.n	800b0c4 <inv_enable_eMPL_outputs+0x18>
        return result;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	e004      	b.n	800b0ce <inv_enable_eMPL_outputs+0x22>
    return inv_register_mpl_start_notification(inv_start_eMPL_outputs);
 800b0c4:	4b04      	ldr	r3, [pc, #16]	; (800b0d8 <inv_enable_eMPL_outputs+0x2c>)
 800b0c6:	0018      	movs	r0, r3
 800b0c8:	f004 fbb8 	bl	800f83c <inv_register_mpl_start_notification>
 800b0cc:	0003      	movs	r3, r0
}
 800b0ce:	0018      	movs	r0, r3
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	b002      	add	sp, #8
 800b0d4:	bd80      	pop	{r7, pc}
 800b0d6:	46c0      	nop			; (mov r8, r8)
 800b0d8:	0800b071 	.word	0x0800b071

0800b0dc <set_int_enable>:
 *  interrupt is used.
 *  @param[in]  enable      1 to enable interrupt.
 *  @return     0 if successful.
 */
static int set_int_enable(unsigned char enable)
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b084      	sub	sp, #16
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	0002      	movs	r2, r0
 800b0e4:	1dfb      	adds	r3, r7, #7
 800b0e6:	701a      	strb	r2, [r3, #0]
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
 800b0e8:	4b2f      	ldr	r3, [pc, #188]	; (800b1a8 <set_int_enable+0xcc>)
 800b0ea:	2224      	movs	r2, #36	; 0x24
 800b0ec:	5c9b      	ldrb	r3, [r3, r2]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d022      	beq.n	800b138 <set_int_enable+0x5c>
        if (enable)
 800b0f2:	1dfb      	adds	r3, r7, #7
 800b0f4:	781b      	ldrb	r3, [r3, #0]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d004      	beq.n	800b104 <set_int_enable+0x28>
            tmp = BIT_DMP_INT_EN;
 800b0fa:	230f      	movs	r3, #15
 800b0fc:	18fb      	adds	r3, r7, r3
 800b0fe:	2202      	movs	r2, #2
 800b100:	701a      	strb	r2, [r3, #0]
 800b102:	e003      	b.n	800b10c <set_int_enable+0x30>
        else
            tmp = 0x00;
 800b104:	230f      	movs	r3, #15
 800b106:	18fb      	adds	r3, r7, r3
 800b108:	2200      	movs	r2, #0
 800b10a:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 800b10c:	4b26      	ldr	r3, [pc, #152]	; (800b1a8 <set_int_enable+0xcc>)
 800b10e:	685b      	ldr	r3, [r3, #4]
 800b110:	7818      	ldrb	r0, [r3, #0]
 800b112:	4b25      	ldr	r3, [pc, #148]	; (800b1a8 <set_int_enable+0xcc>)
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	7c59      	ldrb	r1, [r3, #17]
 800b118:	230f      	movs	r3, #15
 800b11a:	18fb      	adds	r3, r7, r3
 800b11c:	2201      	movs	r2, #1
 800b11e:	f7fb fa55 	bl	80065cc <Sensors_I2C_WriteRegister>
 800b122:	1e03      	subs	r3, r0, #0
 800b124:	d002      	beq.n	800b12c <set_int_enable+0x50>
            return -1;
 800b126:	2301      	movs	r3, #1
 800b128:	425b      	negs	r3, r3
 800b12a:	e039      	b.n	800b1a0 <set_int_enable+0xc4>
        st.chip_cfg.int_enable = tmp;
 800b12c:	230f      	movs	r3, #15
 800b12e:	18fb      	adds	r3, r7, r3
 800b130:	781a      	ldrb	r2, [r3, #0]
 800b132:	4b1d      	ldr	r3, [pc, #116]	; (800b1a8 <set_int_enable+0xcc>)
 800b134:	745a      	strb	r2, [r3, #17]
 800b136:	e032      	b.n	800b19e <set_int_enable+0xc2>
    } else {
        if (!st.chip_cfg.sensors)
 800b138:	4b1b      	ldr	r3, [pc, #108]	; (800b1a8 <set_int_enable+0xcc>)
 800b13a:	7a9b      	ldrb	r3, [r3, #10]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d102      	bne.n	800b146 <set_int_enable+0x6a>
            return -1;
 800b140:	2301      	movs	r3, #1
 800b142:	425b      	negs	r3, r3
 800b144:	e02c      	b.n	800b1a0 <set_int_enable+0xc4>
        if (enable && st.chip_cfg.int_enable)
 800b146:	1dfb      	adds	r3, r7, #7
 800b148:	781b      	ldrb	r3, [r3, #0]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d005      	beq.n	800b15a <set_int_enable+0x7e>
 800b14e:	4b16      	ldr	r3, [pc, #88]	; (800b1a8 <set_int_enable+0xcc>)
 800b150:	7c5b      	ldrb	r3, [r3, #17]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d001      	beq.n	800b15a <set_int_enable+0x7e>
            return 0;
 800b156:	2300      	movs	r3, #0
 800b158:	e022      	b.n	800b1a0 <set_int_enable+0xc4>
        if (enable)
 800b15a:	1dfb      	adds	r3, r7, #7
 800b15c:	781b      	ldrb	r3, [r3, #0]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d004      	beq.n	800b16c <set_int_enable+0x90>
            tmp = BIT_DATA_RDY_EN;
 800b162:	230f      	movs	r3, #15
 800b164:	18fb      	adds	r3, r7, r3
 800b166:	2201      	movs	r2, #1
 800b168:	701a      	strb	r2, [r3, #0]
 800b16a:	e003      	b.n	800b174 <set_int_enable+0x98>
        else
            tmp = 0x00;
 800b16c:	230f      	movs	r3, #15
 800b16e:	18fb      	adds	r3, r7, r3
 800b170:	2200      	movs	r2, #0
 800b172:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 800b174:	4b0c      	ldr	r3, [pc, #48]	; (800b1a8 <set_int_enable+0xcc>)
 800b176:	685b      	ldr	r3, [r3, #4]
 800b178:	7818      	ldrb	r0, [r3, #0]
 800b17a:	4b0b      	ldr	r3, [pc, #44]	; (800b1a8 <set_int_enable+0xcc>)
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	7c59      	ldrb	r1, [r3, #17]
 800b180:	230f      	movs	r3, #15
 800b182:	18fb      	adds	r3, r7, r3
 800b184:	2201      	movs	r2, #1
 800b186:	f7fb fa21 	bl	80065cc <Sensors_I2C_WriteRegister>
 800b18a:	1e03      	subs	r3, r0, #0
 800b18c:	d002      	beq.n	800b194 <set_int_enable+0xb8>
            return -1;
 800b18e:	2301      	movs	r3, #1
 800b190:	425b      	negs	r3, r3
 800b192:	e005      	b.n	800b1a0 <set_int_enable+0xc4>
        st.chip_cfg.int_enable = tmp;
 800b194:	230f      	movs	r3, #15
 800b196:	18fb      	adds	r3, r7, r3
 800b198:	781a      	ldrb	r2, [r3, #0]
 800b19a:	4b03      	ldr	r3, [pc, #12]	; (800b1a8 <set_int_enable+0xcc>)
 800b19c:	745a      	strb	r2, [r3, #17]
    }
    return 0;
 800b19e:	2300      	movs	r3, #0
}
 800b1a0:	0018      	movs	r0, r3
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	b004      	add	sp, #16
 800b1a6:	bd80      	pop	{r7, pc}
 800b1a8:	2000002c 	.word	0x2000002c

0800b1ac <mpu_init>:
 *  Data ready interrupt: Disabled, active low, unlatched.
 *  @param[in]  int_param   Platform-specific parameters to interrupt API.
 *  @return     0 if successful.
 */
int mpu_init(struct int_param_s *int_param)
{
 800b1ac:	b590      	push	{r4, r7, lr}
 800b1ae:	b085      	sub	sp, #20
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
    unsigned char data[6];

    /* Reset device. */
    data[0] = BIT_RESET;
 800b1b4:	2408      	movs	r4, #8
 800b1b6:	193b      	adds	r3, r7, r4
 800b1b8:	2280      	movs	r2, #128	; 0x80
 800b1ba:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 800b1bc:	4b4c      	ldr	r3, [pc, #304]	; (800b2f0 <mpu_init+0x144>)
 800b1be:	685b      	ldr	r3, [r3, #4]
 800b1c0:	7818      	ldrb	r0, [r3, #0]
 800b1c2:	4b4b      	ldr	r3, [pc, #300]	; (800b2f0 <mpu_init+0x144>)
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	7d59      	ldrb	r1, [r3, #21]
 800b1c8:	193b      	adds	r3, r7, r4
 800b1ca:	2201      	movs	r2, #1
 800b1cc:	f7fb f9fe 	bl	80065cc <Sensors_I2C_WriteRegister>
 800b1d0:	1e03      	subs	r3, r0, #0
 800b1d2:	d002      	beq.n	800b1da <mpu_init+0x2e>
        return -1;
 800b1d4:	2301      	movs	r3, #1
 800b1d6:	425b      	negs	r3, r3
 800b1d8:	e086      	b.n	800b2e8 <mpu_init+0x13c>
    delay_ms(200);
 800b1da:	20c8      	movs	r0, #200	; 0xc8
 800b1dc:	f7fc fa7a 	bl	80076d4 <HAL_Delay>

    /* Wake up chip. */
    data[0] = 0x00;
 800b1e0:	2408      	movs	r4, #8
 800b1e2:	193b      	adds	r3, r7, r4
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 800b1e8:	4b41      	ldr	r3, [pc, #260]	; (800b2f0 <mpu_init+0x144>)
 800b1ea:	685b      	ldr	r3, [r3, #4]
 800b1ec:	7818      	ldrb	r0, [r3, #0]
 800b1ee:	4b40      	ldr	r3, [pc, #256]	; (800b2f0 <mpu_init+0x144>)
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	7d59      	ldrb	r1, [r3, #21]
 800b1f4:	193b      	adds	r3, r7, r4
 800b1f6:	2201      	movs	r2, #1
 800b1f8:	f7fb f9e8 	bl	80065cc <Sensors_I2C_WriteRegister>
 800b1fc:	1e03      	subs	r3, r0, #0
 800b1fe:	d002      	beq.n	800b206 <mpu_init+0x5a>
        return -1;
 800b200:	2301      	movs	r3, #1
 800b202:	425b      	negs	r3, r3
 800b204:	e070      	b.n	800b2e8 <mpu_init+0x13c>

   st.chip_cfg.accel_half = 0;
 800b206:	4b3a      	ldr	r3, [pc, #232]	; (800b2f0 <mpu_init+0x144>)
 800b208:	2200      	movs	r2, #0
 800b20a:	74da      	strb	r2, [r3, #19]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
        return -1;
#endif

    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.sensors = 0xFF;
 800b20c:	4b38      	ldr	r3, [pc, #224]	; (800b2f0 <mpu_init+0x144>)
 800b20e:	22ff      	movs	r2, #255	; 0xff
 800b210:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.gyro_fsr = 0xFF;
 800b212:	4b37      	ldr	r3, [pc, #220]	; (800b2f0 <mpu_init+0x144>)
 800b214:	22ff      	movs	r2, #255	; 0xff
 800b216:	721a      	strb	r2, [r3, #8]
    st.chip_cfg.accel_fsr = 0xFF;
 800b218:	4b35      	ldr	r3, [pc, #212]	; (800b2f0 <mpu_init+0x144>)
 800b21a:	22ff      	movs	r2, #255	; 0xff
 800b21c:	725a      	strb	r2, [r3, #9]
    st.chip_cfg.lpf = 0xFF;
 800b21e:	4b34      	ldr	r3, [pc, #208]	; (800b2f0 <mpu_init+0x144>)
 800b220:	22ff      	movs	r2, #255	; 0xff
 800b222:	72da      	strb	r2, [r3, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
 800b224:	4b32      	ldr	r3, [pc, #200]	; (800b2f0 <mpu_init+0x144>)
 800b226:	2201      	movs	r2, #1
 800b228:	4252      	negs	r2, r2
 800b22a:	81da      	strh	r2, [r3, #14]
    st.chip_cfg.fifo_enable = 0xFF;
 800b22c:	4b30      	ldr	r3, [pc, #192]	; (800b2f0 <mpu_init+0x144>)
 800b22e:	22ff      	movs	r2, #255	; 0xff
 800b230:	741a      	strb	r2, [r3, #16]
    st.chip_cfg.bypass_mode = 0xFF;
 800b232:	4b2f      	ldr	r3, [pc, #188]	; (800b2f0 <mpu_init+0x144>)
 800b234:	22ff      	movs	r2, #255	; 0xff
 800b236:	749a      	strb	r2, [r3, #18]
#ifdef AK89xx_SECONDARY
    st.chip_cfg.compass_sample_rate = 0xFFFF;
#endif
    /* mpu_set_sensors always preserves this setting. */
    st.chip_cfg.clk_src = INV_CLK_PLL;
 800b238:	4b2d      	ldr	r3, [pc, #180]	; (800b2f0 <mpu_init+0x144>)
 800b23a:	2201      	movs	r2, #1
 800b23c:	731a      	strb	r2, [r3, #12]
    /* Handled in next call to mpu_set_bypass. */
    st.chip_cfg.active_low_int = 1;
 800b23e:	4b2c      	ldr	r3, [pc, #176]	; (800b2f0 <mpu_init+0x144>)
 800b240:	2222      	movs	r2, #34	; 0x22
 800b242:	2101      	movs	r1, #1
 800b244:	5499      	strb	r1, [r3, r2]
    st.chip_cfg.latched_int = 0;
 800b246:	4b2a      	ldr	r3, [pc, #168]	; (800b2f0 <mpu_init+0x144>)
 800b248:	2223      	movs	r2, #35	; 0x23
 800b24a:	2100      	movs	r1, #0
 800b24c:	5499      	strb	r1, [r3, r2]
    st.chip_cfg.int_motion_only = 0;
 800b24e:	4b28      	ldr	r3, [pc, #160]	; (800b2f0 <mpu_init+0x144>)
 800b250:	2200      	movs	r2, #0
 800b252:	755a      	strb	r2, [r3, #21]
    st.chip_cfg.lp_accel_mode = 0;
 800b254:	4b26      	ldr	r3, [pc, #152]	; (800b2f0 <mpu_init+0x144>)
 800b256:	2200      	movs	r2, #0
 800b258:	751a      	strb	r2, [r3, #20]
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
 800b25a:	4b26      	ldr	r3, [pc, #152]	; (800b2f4 <mpu_init+0x148>)
 800b25c:	220c      	movs	r2, #12
 800b25e:	2100      	movs	r1, #0
 800b260:	0018      	movs	r0, r3
 800b262:	f006 fe60 	bl	8011f26 <memset>
    st.chip_cfg.dmp_on = 0;
 800b266:	4b22      	ldr	r3, [pc, #136]	; (800b2f0 <mpu_init+0x144>)
 800b268:	2224      	movs	r2, #36	; 0x24
 800b26a:	2100      	movs	r1, #0
 800b26c:	5499      	strb	r1, [r3, r2]
    st.chip_cfg.dmp_loaded = 0;
 800b26e:	4b20      	ldr	r3, [pc, #128]	; (800b2f0 <mpu_init+0x144>)
 800b270:	2225      	movs	r2, #37	; 0x25
 800b272:	2100      	movs	r1, #0
 800b274:	5499      	strb	r1, [r3, r2]
    st.chip_cfg.dmp_sample_rate = 0;
 800b276:	4b1e      	ldr	r3, [pc, #120]	; (800b2f0 <mpu_init+0x144>)
 800b278:	2200      	movs	r2, #0
 800b27a:	84da      	strh	r2, [r3, #38]	; 0x26

    if (mpu_set_gyro_fsr(2000))
 800b27c:	23fa      	movs	r3, #250	; 0xfa
 800b27e:	00db      	lsls	r3, r3, #3
 800b280:	0018      	movs	r0, r3
 800b282:	f000 fa69 	bl	800b758 <mpu_set_gyro_fsr>
 800b286:	1e03      	subs	r3, r0, #0
 800b288:	d002      	beq.n	800b290 <mpu_init+0xe4>
        return -1;
 800b28a:	2301      	movs	r3, #1
 800b28c:	425b      	negs	r3, r3
 800b28e:	e02b      	b.n	800b2e8 <mpu_init+0x13c>
    if (mpu_set_accel_fsr(2))
 800b290:	2002      	movs	r0, #2
 800b292:	f000 fafd 	bl	800b890 <mpu_set_accel_fsr>
 800b296:	1e03      	subs	r3, r0, #0
 800b298:	d002      	beq.n	800b2a0 <mpu_init+0xf4>
        return -1;
 800b29a:	2301      	movs	r3, #1
 800b29c:	425b      	negs	r3, r3
 800b29e:	e023      	b.n	800b2e8 <mpu_init+0x13c>
    if (mpu_set_lpf(42))
 800b2a0:	202a      	movs	r0, #42	; 0x2a
 800b2a2:	f000 fb81 	bl	800b9a8 <mpu_set_lpf>
 800b2a6:	1e03      	subs	r3, r0, #0
 800b2a8:	d002      	beq.n	800b2b0 <mpu_init+0x104>
        return -1;
 800b2aa:	2301      	movs	r3, #1
 800b2ac:	425b      	negs	r3, r3
 800b2ae:	e01b      	b.n	800b2e8 <mpu_init+0x13c>
    if (mpu_set_sample_rate(50))
 800b2b0:	2032      	movs	r0, #50	; 0x32
 800b2b2:	f000 fbf5 	bl	800baa0 <mpu_set_sample_rate>
 800b2b6:	1e03      	subs	r3, r0, #0
 800b2b8:	d002      	beq.n	800b2c0 <mpu_init+0x114>
        return -1;
 800b2ba:	2301      	movs	r3, #1
 800b2bc:	425b      	negs	r3, r3
 800b2be:	e013      	b.n	800b2e8 <mpu_init+0x13c>
    if (mpu_configure_fifo(0))
 800b2c0:	2000      	movs	r0, #0
 800b2c2:	f000 fce1 	bl	800bc88 <mpu_configure_fifo>
 800b2c6:	1e03      	subs	r3, r0, #0
 800b2c8:	d002      	beq.n	800b2d0 <mpu_init+0x124>
        return -1;
 800b2ca:	2301      	movs	r3, #1
 800b2cc:	425b      	negs	r3, r3
 800b2ce:	e00b      	b.n	800b2e8 <mpu_init+0x13c>
    setup_compass();
    if (mpu_set_compass_sample_rate(10))
        return -1;
#else
    /* Already disabled by setup_compass. */
    if (mpu_set_bypass(0))
 800b2d0:	2000      	movs	r0, #0
 800b2d2:	f000 fe65 	bl	800bfa0 <mpu_set_bypass>
 800b2d6:	1e03      	subs	r3, r0, #0
 800b2d8:	d002      	beq.n	800b2e0 <mpu_init+0x134>
        return -1;
 800b2da:	2301      	movs	r3, #1
 800b2dc:	425b      	negs	r3, r3
 800b2de:	e003      	b.n	800b2e8 <mpu_init+0x13c>
#endif

    mpu_set_sensors(0);
 800b2e0:	2000      	movs	r0, #0
 800b2e2:	f000 fd2d 	bl	800bd40 <mpu_set_sensors>
    return 0;
 800b2e6:	2300      	movs	r3, #0
}
 800b2e8:	0018      	movs	r0, r3
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	b005      	add	sp, #20
 800b2ee:	bd90      	pop	{r4, r7, pc}
 800b2f0:	2000002c 	.word	0x2000002c
 800b2f4:	20000042 	.word	0x20000042

0800b2f8 <mpu_lp_accel_mode>:
 *  @param[in]  rate        Minimum sampling rate, or zero to disable LP
 *                          accel mode.
 *  @return     0 if successful.
 */
int mpu_lp_accel_mode(unsigned short rate)
{
 800b2f8:	b590      	push	{r4, r7, lr}
 800b2fa:	b085      	sub	sp, #20
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	0002      	movs	r2, r0
 800b300:	1dbb      	adds	r3, r7, #6
 800b302:	801a      	strh	r2, [r3, #0]
    unsigned char tmp[2];

    if (rate > 40)
 800b304:	1dbb      	adds	r3, r7, #6
 800b306:	881b      	ldrh	r3, [r3, #0]
 800b308:	2b28      	cmp	r3, #40	; 0x28
 800b30a:	d902      	bls.n	800b312 <mpu_lp_accel_mode+0x1a>
        return -1;
 800b30c:	2301      	movs	r3, #1
 800b30e:	425b      	negs	r3, r3
 800b310:	e07a      	b.n	800b408 <mpu_lp_accel_mode+0x110>

    if (!rate) {
 800b312:	1dbb      	adds	r3, r7, #6
 800b314:	881b      	ldrh	r3, [r3, #0]
 800b316:	2b00      	cmp	r3, #0
 800b318:	d11d      	bne.n	800b356 <mpu_lp_accel_mode+0x5e>
        mpu_set_int_latched(0);
 800b31a:	2000      	movs	r0, #0
 800b31c:	f000 ff1a 	bl	800c154 <mpu_set_int_latched>
        tmp[0] = 0;
 800b320:	240c      	movs	r4, #12
 800b322:	193b      	adds	r3, r7, r4
 800b324:	2200      	movs	r2, #0
 800b326:	701a      	strb	r2, [r3, #0]
        tmp[1] = BIT_STBY_XYZG;
 800b328:	193b      	adds	r3, r7, r4
 800b32a:	2207      	movs	r2, #7
 800b32c:	705a      	strb	r2, [r3, #1]
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 800b32e:	4b38      	ldr	r3, [pc, #224]	; (800b410 <mpu_lp_accel_mode+0x118>)
 800b330:	685b      	ldr	r3, [r3, #4]
 800b332:	7818      	ldrb	r0, [r3, #0]
 800b334:	4b36      	ldr	r3, [pc, #216]	; (800b410 <mpu_lp_accel_mode+0x118>)
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	7d59      	ldrb	r1, [r3, #21]
 800b33a:	193b      	adds	r3, r7, r4
 800b33c:	2202      	movs	r2, #2
 800b33e:	f7fb f945 	bl	80065cc <Sensors_I2C_WriteRegister>
 800b342:	1e03      	subs	r3, r0, #0
 800b344:	d002      	beq.n	800b34c <mpu_lp_accel_mode+0x54>
            return -1;
 800b346:	2301      	movs	r3, #1
 800b348:	425b      	negs	r3, r3
 800b34a:	e05d      	b.n	800b408 <mpu_lp_accel_mode+0x110>
        st.chip_cfg.lp_accel_mode = 0;
 800b34c:	4b30      	ldr	r3, [pc, #192]	; (800b410 <mpu_lp_accel_mode+0x118>)
 800b34e:	2200      	movs	r2, #0
 800b350:	751a      	strb	r2, [r3, #20]
        return 0;
 800b352:	2300      	movs	r3, #0
 800b354:	e058      	b.n	800b408 <mpu_lp_accel_mode+0x110>
     * it gets a chance to deassert the interrupt pin; therefore, we shift this
     * responsibility over to the MCU.
     *
     * Any register read will clear the interrupt.
     */
    mpu_set_int_latched(1);
 800b356:	2001      	movs	r0, #1
 800b358:	f000 fefc 	bl	800c154 <mpu_set_int_latched>
#if defined MPU6050
    tmp[0] = BIT_LPA_CYCLE;
 800b35c:	210c      	movs	r1, #12
 800b35e:	187b      	adds	r3, r7, r1
 800b360:	2220      	movs	r2, #32
 800b362:	701a      	strb	r2, [r3, #0]
    if (rate == 1) {
 800b364:	1dbb      	adds	r3, r7, #6
 800b366:	881b      	ldrh	r3, [r3, #0]
 800b368:	2b01      	cmp	r3, #1
 800b36a:	d106      	bne.n	800b37a <mpu_lp_accel_mode+0x82>
        tmp[1] = INV_LPA_1_25HZ;
 800b36c:	187b      	adds	r3, r7, r1
 800b36e:	2200      	movs	r2, #0
 800b370:	705a      	strb	r2, [r3, #1]
        mpu_set_lpf(5);
 800b372:	2005      	movs	r0, #5
 800b374:	f000 fb18 	bl	800b9a8 <mpu_set_lpf>
 800b378:	e01e      	b.n	800b3b8 <mpu_lp_accel_mode+0xc0>
    } else if (rate <= 5) {
 800b37a:	1dbb      	adds	r3, r7, #6
 800b37c:	881b      	ldrh	r3, [r3, #0]
 800b37e:	2b05      	cmp	r3, #5
 800b380:	d807      	bhi.n	800b392 <mpu_lp_accel_mode+0x9a>
        tmp[1] = INV_LPA_5HZ;
 800b382:	230c      	movs	r3, #12
 800b384:	18fb      	adds	r3, r7, r3
 800b386:	2201      	movs	r2, #1
 800b388:	705a      	strb	r2, [r3, #1]
        mpu_set_lpf(5);
 800b38a:	2005      	movs	r0, #5
 800b38c:	f000 fb0c 	bl	800b9a8 <mpu_set_lpf>
 800b390:	e012      	b.n	800b3b8 <mpu_lp_accel_mode+0xc0>
    } else if (rate <= 20) {
 800b392:	1dbb      	adds	r3, r7, #6
 800b394:	881b      	ldrh	r3, [r3, #0]
 800b396:	2b14      	cmp	r3, #20
 800b398:	d807      	bhi.n	800b3aa <mpu_lp_accel_mode+0xb2>
        tmp[1] = INV_LPA_20HZ;
 800b39a:	230c      	movs	r3, #12
 800b39c:	18fb      	adds	r3, r7, r3
 800b39e:	2202      	movs	r2, #2
 800b3a0:	705a      	strb	r2, [r3, #1]
        mpu_set_lpf(10);
 800b3a2:	200a      	movs	r0, #10
 800b3a4:	f000 fb00 	bl	800b9a8 <mpu_set_lpf>
 800b3a8:	e006      	b.n	800b3b8 <mpu_lp_accel_mode+0xc0>
    } else {
        tmp[1] = INV_LPA_40HZ;
 800b3aa:	230c      	movs	r3, #12
 800b3ac:	18fb      	adds	r3, r7, r3
 800b3ae:	2203      	movs	r2, #3
 800b3b0:	705a      	strb	r2, [r3, #1]
        mpu_set_lpf(20);
 800b3b2:	2014      	movs	r0, #20
 800b3b4:	f000 faf8 	bl	800b9a8 <mpu_set_lpf>
    }
    tmp[1] = (tmp[1] << 6) | BIT_STBY_XYZG;
 800b3b8:	210c      	movs	r1, #12
 800b3ba:	187b      	adds	r3, r7, r1
 800b3bc:	785b      	ldrb	r3, [r3, #1]
 800b3be:	019b      	lsls	r3, r3, #6
 800b3c0:	b25b      	sxtb	r3, r3
 800b3c2:	2207      	movs	r2, #7
 800b3c4:	4313      	orrs	r3, r2
 800b3c6:	b25b      	sxtb	r3, r3
 800b3c8:	b2da      	uxtb	r2, r3
 800b3ca:	000c      	movs	r4, r1
 800b3cc:	187b      	adds	r3, r7, r1
 800b3ce:	705a      	strb	r2, [r3, #1]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 800b3d0:	4b0f      	ldr	r3, [pc, #60]	; (800b410 <mpu_lp_accel_mode+0x118>)
 800b3d2:	685b      	ldr	r3, [r3, #4]
 800b3d4:	7818      	ldrb	r0, [r3, #0]
 800b3d6:	4b0e      	ldr	r3, [pc, #56]	; (800b410 <mpu_lp_accel_mode+0x118>)
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	7d59      	ldrb	r1, [r3, #21]
 800b3dc:	193b      	adds	r3, r7, r4
 800b3de:	2202      	movs	r2, #2
 800b3e0:	f7fb f8f4 	bl	80065cc <Sensors_I2C_WriteRegister>
 800b3e4:	1e03      	subs	r3, r0, #0
 800b3e6:	d002      	beq.n	800b3ee <mpu_lp_accel_mode+0xf6>
        return -1;
 800b3e8:	2301      	movs	r3, #1
 800b3ea:	425b      	negs	r3, r3
 800b3ec:	e00c      	b.n	800b408 <mpu_lp_accel_mode+0x110>
        return -1;
    tmp[0] = BIT_LPA_CYCLE;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
        return -1;
#endif
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
 800b3ee:	4b08      	ldr	r3, [pc, #32]	; (800b410 <mpu_lp_accel_mode+0x118>)
 800b3f0:	2208      	movs	r2, #8
 800b3f2:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.clk_src = 0;
 800b3f4:	4b06      	ldr	r3, [pc, #24]	; (800b410 <mpu_lp_accel_mode+0x118>)
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	731a      	strb	r2, [r3, #12]
    st.chip_cfg.lp_accel_mode = 1;
 800b3fa:	4b05      	ldr	r3, [pc, #20]	; (800b410 <mpu_lp_accel_mode+0x118>)
 800b3fc:	2201      	movs	r2, #1
 800b3fe:	751a      	strb	r2, [r3, #20]
    mpu_configure_fifo(0);
 800b400:	2000      	movs	r0, #0
 800b402:	f000 fc41 	bl	800bc88 <mpu_configure_fifo>

    return 0;
 800b406:	2300      	movs	r3, #0
}
 800b408:	0018      	movs	r0, r3
 800b40a:	46bd      	mov	sp, r7
 800b40c:	b005      	add	sp, #20
 800b40e:	bd90      	pop	{r4, r7, pc}
 800b410:	2000002c 	.word	0x2000002c

0800b414 <mpu_get_temperature>:
 *  @param[out] data        Data in q16 format.
 *  @param[out] timestamp   Timestamp in milliseconds. Null if not needed.
 *  @return     0 if successful.
 */
int mpu_get_temperature(long *data, unsigned long *timestamp)
{
 800b414:	b590      	push	{r4, r7, lr}
 800b416:	b085      	sub	sp, #20
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
 800b41c:	6039      	str	r1, [r7, #0]
    unsigned char tmp[2];
    short raw;

    if (!(st.chip_cfg.sensors))
 800b41e:	4b31      	ldr	r3, [pc, #196]	; (800b4e4 <mpu_get_temperature+0xd0>)
 800b420:	7a9b      	ldrb	r3, [r3, #10]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d102      	bne.n	800b42c <mpu_get_temperature+0x18>
        return -1;
 800b426:	2301      	movs	r3, #1
 800b428:	425b      	negs	r3, r3
 800b42a:	e056      	b.n	800b4da <mpu_get_temperature+0xc6>

    if (i2c_read(st.hw->addr, st.reg->temp, 2, tmp))
 800b42c:	4b2d      	ldr	r3, [pc, #180]	; (800b4e4 <mpu_get_temperature+0xd0>)
 800b42e:	685b      	ldr	r3, [r3, #4]
 800b430:	7818      	ldrb	r0, [r3, #0]
 800b432:	4b2c      	ldr	r3, [pc, #176]	; (800b4e4 <mpu_get_temperature+0xd0>)
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	7c19      	ldrb	r1, [r3, #16]
 800b438:	230c      	movs	r3, #12
 800b43a:	18fb      	adds	r3, r7, r3
 800b43c:	2202      	movs	r2, #2
 800b43e:	f7fb f921 	bl	8006684 <Sensors_I2C_ReadRegister>
 800b442:	1e03      	subs	r3, r0, #0
 800b444:	d002      	beq.n	800b44c <mpu_get_temperature+0x38>
        return -1;
 800b446:	2301      	movs	r3, #1
 800b448:	425b      	negs	r3, r3
 800b44a:	e046      	b.n	800b4da <mpu_get_temperature+0xc6>
    raw = (tmp[0] << 8) | tmp[1];
 800b44c:	220c      	movs	r2, #12
 800b44e:	18bb      	adds	r3, r7, r2
 800b450:	781b      	ldrb	r3, [r3, #0]
 800b452:	021b      	lsls	r3, r3, #8
 800b454:	b219      	sxth	r1, r3
 800b456:	18bb      	adds	r3, r7, r2
 800b458:	785b      	ldrb	r3, [r3, #1]
 800b45a:	b21a      	sxth	r2, r3
 800b45c:	230e      	movs	r3, #14
 800b45e:	18fb      	adds	r3, r7, r3
 800b460:	430a      	orrs	r2, r1
 800b462:	801a      	strh	r2, [r3, #0]
    if (timestamp)
 800b464:	683b      	ldr	r3, [r7, #0]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d003      	beq.n	800b472 <mpu_get_temperature+0x5e>
        get_ms(timestamp);
 800b46a:	683b      	ldr	r3, [r7, #0]
 800b46c:	0018      	movs	r0, r3
 800b46e:	f7fb f965 	bl	800673c <get_tick_count>

    data[0] = (long)((35 + ((raw - (float)st.hw->temp_offset) / st.hw->temp_sens)) * 65536L);
 800b472:	230e      	movs	r3, #14
 800b474:	18fb      	adds	r3, r7, r3
 800b476:	2200      	movs	r2, #0
 800b478:	5e9b      	ldrsh	r3, [r3, r2]
 800b47a:	0018      	movs	r0, r3
 800b47c:	f7f8 ffe6 	bl	800444c <__aeabi_i2f>
 800b480:	1c04      	adds	r4, r0, #0
 800b482:	4b18      	ldr	r3, [pc, #96]	; (800b4e4 <mpu_get_temperature+0xd0>)
 800b484:	685b      	ldr	r3, [r3, #4]
 800b486:	2208      	movs	r2, #8
 800b488:	5e9b      	ldrsh	r3, [r3, r2]
 800b48a:	0018      	movs	r0, r3
 800b48c:	f7f8 ffde 	bl	800444c <__aeabi_i2f>
 800b490:	1c03      	adds	r3, r0, #0
 800b492:	1c19      	adds	r1, r3, #0
 800b494:	1c20      	adds	r0, r4, #0
 800b496:	f7f8 fe03 	bl	80040a0 <__aeabi_fsub>
 800b49a:	1c03      	adds	r3, r0, #0
 800b49c:	1c1c      	adds	r4, r3, #0
 800b49e:	4b11      	ldr	r3, [pc, #68]	; (800b4e4 <mpu_get_temperature+0xd0>)
 800b4a0:	685b      	ldr	r3, [r3, #4]
 800b4a2:	88db      	ldrh	r3, [r3, #6]
 800b4a4:	0018      	movs	r0, r3
 800b4a6:	f7f8 ffd1 	bl	800444c <__aeabi_i2f>
 800b4aa:	1c03      	adds	r3, r0, #0
 800b4ac:	1c19      	adds	r1, r3, #0
 800b4ae:	1c20      	adds	r0, r4, #0
 800b4b0:	f7f8 fade 	bl	8003a70 <__aeabi_fdiv>
 800b4b4:	1c03      	adds	r3, r0, #0
 800b4b6:	490c      	ldr	r1, [pc, #48]	; (800b4e8 <mpu_get_temperature+0xd4>)
 800b4b8:	1c18      	adds	r0, r3, #0
 800b4ba:	f7f8 f939 	bl	8003730 <__aeabi_fadd>
 800b4be:	1c03      	adds	r3, r0, #0
 800b4c0:	218f      	movs	r1, #143	; 0x8f
 800b4c2:	05c9      	lsls	r1, r1, #23
 800b4c4:	1c18      	adds	r0, r3, #0
 800b4c6:	f7f8 fc9d 	bl	8003e04 <__aeabi_fmul>
 800b4ca:	1c03      	adds	r3, r0, #0
 800b4cc:	1c18      	adds	r0, r3, #0
 800b4ce:	f7f8 ff9d 	bl	800440c <__aeabi_f2iz>
 800b4d2:	0002      	movs	r2, r0
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	601a      	str	r2, [r3, #0]
    return 0;
 800b4d8:	2300      	movs	r3, #0
}
 800b4da:	0018      	movs	r0, r3
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	b005      	add	sp, #20
 800b4e0:	bd90      	pop	{r4, r7, pc}
 800b4e2:	46c0      	nop			; (mov r8, r8)
 800b4e4:	2000002c 	.word	0x2000002c
 800b4e8:	420c0000 	.word	0x420c0000

0800b4ec <mpu_reset_fifo>:
/**
 *  @brief  Reset FIFO read/write pointers.
 *  @return 0 if successful.
 */
int mpu_reset_fifo(void)
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b082      	sub	sp, #8
 800b4f0:	af00      	add	r7, sp, #0
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 800b4f2:	4b7f      	ldr	r3, [pc, #508]	; (800b6f0 <mpu_reset_fifo+0x204>)
 800b4f4:	7a9b      	ldrb	r3, [r3, #10]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d102      	bne.n	800b500 <mpu_reset_fifo+0x14>
        return -1;
 800b4fa:	2301      	movs	r3, #1
 800b4fc:	425b      	negs	r3, r3
 800b4fe:	e0f3      	b.n	800b6e8 <mpu_reset_fifo+0x1fc>

    data = 0;
 800b500:	1dfb      	adds	r3, r7, #7
 800b502:	2200      	movs	r2, #0
 800b504:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 800b506:	4b7a      	ldr	r3, [pc, #488]	; (800b6f0 <mpu_reset_fifo+0x204>)
 800b508:	685b      	ldr	r3, [r3, #4]
 800b50a:	7818      	ldrb	r0, [r3, #0]
 800b50c:	4b78      	ldr	r3, [pc, #480]	; (800b6f0 <mpu_reset_fifo+0x204>)
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	7c59      	ldrb	r1, [r3, #17]
 800b512:	1dfb      	adds	r3, r7, #7
 800b514:	2201      	movs	r2, #1
 800b516:	f7fb f859 	bl	80065cc <Sensors_I2C_WriteRegister>
 800b51a:	1e03      	subs	r3, r0, #0
 800b51c:	d002      	beq.n	800b524 <mpu_reset_fifo+0x38>
        return -1;
 800b51e:	2301      	movs	r3, #1
 800b520:	425b      	negs	r3, r3
 800b522:	e0e1      	b.n	800b6e8 <mpu_reset_fifo+0x1fc>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 800b524:	4b72      	ldr	r3, [pc, #456]	; (800b6f0 <mpu_reset_fifo+0x204>)
 800b526:	685b      	ldr	r3, [r3, #4]
 800b528:	7818      	ldrb	r0, [r3, #0]
 800b52a:	4b71      	ldr	r3, [pc, #452]	; (800b6f0 <mpu_reset_fifo+0x204>)
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	7959      	ldrb	r1, [r3, #5]
 800b530:	1dfb      	adds	r3, r7, #7
 800b532:	2201      	movs	r2, #1
 800b534:	f7fb f84a 	bl	80065cc <Sensors_I2C_WriteRegister>
 800b538:	1e03      	subs	r3, r0, #0
 800b53a:	d002      	beq.n	800b542 <mpu_reset_fifo+0x56>
        return -1;
 800b53c:	2301      	movs	r3, #1
 800b53e:	425b      	negs	r3, r3
 800b540:	e0d2      	b.n	800b6e8 <mpu_reset_fifo+0x1fc>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 800b542:	4b6b      	ldr	r3, [pc, #428]	; (800b6f0 <mpu_reset_fifo+0x204>)
 800b544:	685b      	ldr	r3, [r3, #4]
 800b546:	7818      	ldrb	r0, [r3, #0]
 800b548:	4b69      	ldr	r3, [pc, #420]	; (800b6f0 <mpu_reset_fifo+0x204>)
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	7919      	ldrb	r1, [r3, #4]
 800b54e:	1dfb      	adds	r3, r7, #7
 800b550:	2201      	movs	r2, #1
 800b552:	f7fb f83b 	bl	80065cc <Sensors_I2C_WriteRegister>
 800b556:	1e03      	subs	r3, r0, #0
 800b558:	d002      	beq.n	800b560 <mpu_reset_fifo+0x74>
        return -1;
 800b55a:	2301      	movs	r3, #1
 800b55c:	425b      	negs	r3, r3
 800b55e:	e0c3      	b.n	800b6e8 <mpu_reset_fifo+0x1fc>

    if (st.chip_cfg.dmp_on) {
 800b560:	4b63      	ldr	r3, [pc, #396]	; (800b6f0 <mpu_reset_fifo+0x204>)
 800b562:	2224      	movs	r2, #36	; 0x24
 800b564:	5c9b      	ldrb	r3, [r3, r2]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d05f      	beq.n	800b62a <mpu_reset_fifo+0x13e>
        data = BIT_FIFO_RST | BIT_DMP_RST;
 800b56a:	1dfb      	adds	r3, r7, #7
 800b56c:	220c      	movs	r2, #12
 800b56e:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 800b570:	4b5f      	ldr	r3, [pc, #380]	; (800b6f0 <mpu_reset_fifo+0x204>)
 800b572:	685b      	ldr	r3, [r3, #4]
 800b574:	7818      	ldrb	r0, [r3, #0]
 800b576:	4b5e      	ldr	r3, [pc, #376]	; (800b6f0 <mpu_reset_fifo+0x204>)
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	7919      	ldrb	r1, [r3, #4]
 800b57c:	1dfb      	adds	r3, r7, #7
 800b57e:	2201      	movs	r2, #1
 800b580:	f7fb f824 	bl	80065cc <Sensors_I2C_WriteRegister>
 800b584:	1e03      	subs	r3, r0, #0
 800b586:	d002      	beq.n	800b58e <mpu_reset_fifo+0xa2>
            return -1;
 800b588:	2301      	movs	r3, #1
 800b58a:	425b      	negs	r3, r3
 800b58c:	e0ac      	b.n	800b6e8 <mpu_reset_fifo+0x1fc>
        delay_ms(50);
 800b58e:	2032      	movs	r0, #50	; 0x32
 800b590:	f7fc f8a0 	bl	80076d4 <HAL_Delay>
        data = BIT_DMP_EN | BIT_FIFO_EN;
 800b594:	1dfb      	adds	r3, r7, #7
 800b596:	22c0      	movs	r2, #192	; 0xc0
 800b598:	701a      	strb	r2, [r3, #0]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 800b59a:	4b55      	ldr	r3, [pc, #340]	; (800b6f0 <mpu_reset_fifo+0x204>)
 800b59c:	7a9b      	ldrb	r3, [r3, #10]
 800b59e:	001a      	movs	r2, r3
 800b5a0:	2301      	movs	r3, #1
 800b5a2:	4013      	ands	r3, r2
 800b5a4:	d006      	beq.n	800b5b4 <mpu_reset_fifo+0xc8>
            data |= BIT_AUX_IF_EN;
 800b5a6:	1dfb      	adds	r3, r7, #7
 800b5a8:	781b      	ldrb	r3, [r3, #0]
 800b5aa:	2220      	movs	r2, #32
 800b5ac:	4313      	orrs	r3, r2
 800b5ae:	b2da      	uxtb	r2, r3
 800b5b0:	1dfb      	adds	r3, r7, #7
 800b5b2:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 800b5b4:	4b4e      	ldr	r3, [pc, #312]	; (800b6f0 <mpu_reset_fifo+0x204>)
 800b5b6:	685b      	ldr	r3, [r3, #4]
 800b5b8:	7818      	ldrb	r0, [r3, #0]
 800b5ba:	4b4d      	ldr	r3, [pc, #308]	; (800b6f0 <mpu_reset_fifo+0x204>)
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	7919      	ldrb	r1, [r3, #4]
 800b5c0:	1dfb      	adds	r3, r7, #7
 800b5c2:	2201      	movs	r2, #1
 800b5c4:	f7fb f802 	bl	80065cc <Sensors_I2C_WriteRegister>
 800b5c8:	1e03      	subs	r3, r0, #0
 800b5ca:	d002      	beq.n	800b5d2 <mpu_reset_fifo+0xe6>
            return -1;
 800b5cc:	2301      	movs	r3, #1
 800b5ce:	425b      	negs	r3, r3
 800b5d0:	e08a      	b.n	800b6e8 <mpu_reset_fifo+0x1fc>
        if (st.chip_cfg.int_enable)
 800b5d2:	4b47      	ldr	r3, [pc, #284]	; (800b6f0 <mpu_reset_fifo+0x204>)
 800b5d4:	7c5b      	ldrb	r3, [r3, #17]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d003      	beq.n	800b5e2 <mpu_reset_fifo+0xf6>
            data = BIT_DMP_INT_EN;
 800b5da:	1dfb      	adds	r3, r7, #7
 800b5dc:	2202      	movs	r2, #2
 800b5de:	701a      	strb	r2, [r3, #0]
 800b5e0:	e002      	b.n	800b5e8 <mpu_reset_fifo+0xfc>
        else
            data = 0;
 800b5e2:	1dfb      	adds	r3, r7, #7
 800b5e4:	2200      	movs	r2, #0
 800b5e6:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 800b5e8:	4b41      	ldr	r3, [pc, #260]	; (800b6f0 <mpu_reset_fifo+0x204>)
 800b5ea:	685b      	ldr	r3, [r3, #4]
 800b5ec:	7818      	ldrb	r0, [r3, #0]
 800b5ee:	4b40      	ldr	r3, [pc, #256]	; (800b6f0 <mpu_reset_fifo+0x204>)
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	7c59      	ldrb	r1, [r3, #17]
 800b5f4:	1dfb      	adds	r3, r7, #7
 800b5f6:	2201      	movs	r2, #1
 800b5f8:	f7fa ffe8 	bl	80065cc <Sensors_I2C_WriteRegister>
 800b5fc:	1e03      	subs	r3, r0, #0
 800b5fe:	d002      	beq.n	800b606 <mpu_reset_fifo+0x11a>
            return -1;
 800b600:	2301      	movs	r3, #1
 800b602:	425b      	negs	r3, r3
 800b604:	e070      	b.n	800b6e8 <mpu_reset_fifo+0x1fc>
        data = 0;
 800b606:	1dfb      	adds	r3, r7, #7
 800b608:	2200      	movs	r2, #0
 800b60a:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 800b60c:	4b38      	ldr	r3, [pc, #224]	; (800b6f0 <mpu_reset_fifo+0x204>)
 800b60e:	685b      	ldr	r3, [r3, #4]
 800b610:	7818      	ldrb	r0, [r3, #0]
 800b612:	4b37      	ldr	r3, [pc, #220]	; (800b6f0 <mpu_reset_fifo+0x204>)
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	7959      	ldrb	r1, [r3, #5]
 800b618:	1dfb      	adds	r3, r7, #7
 800b61a:	2201      	movs	r2, #1
 800b61c:	f7fa ffd6 	bl	80065cc <Sensors_I2C_WriteRegister>
 800b620:	1e03      	subs	r3, r0, #0
 800b622:	d060      	beq.n	800b6e6 <mpu_reset_fifo+0x1fa>
            return -1;
 800b624:	2301      	movs	r3, #1
 800b626:	425b      	negs	r3, r3
 800b628:	e05e      	b.n	800b6e8 <mpu_reset_fifo+0x1fc>
    } else {
        data = BIT_FIFO_RST;
 800b62a:	1dfb      	adds	r3, r7, #7
 800b62c:	2204      	movs	r2, #4
 800b62e:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 800b630:	4b2f      	ldr	r3, [pc, #188]	; (800b6f0 <mpu_reset_fifo+0x204>)
 800b632:	685b      	ldr	r3, [r3, #4]
 800b634:	7818      	ldrb	r0, [r3, #0]
 800b636:	4b2e      	ldr	r3, [pc, #184]	; (800b6f0 <mpu_reset_fifo+0x204>)
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	7919      	ldrb	r1, [r3, #4]
 800b63c:	1dfb      	adds	r3, r7, #7
 800b63e:	2201      	movs	r2, #1
 800b640:	f7fa ffc4 	bl	80065cc <Sensors_I2C_WriteRegister>
 800b644:	1e03      	subs	r3, r0, #0
 800b646:	d002      	beq.n	800b64e <mpu_reset_fifo+0x162>
            return -1;
 800b648:	2301      	movs	r3, #1
 800b64a:	425b      	negs	r3, r3
 800b64c:	e04c      	b.n	800b6e8 <mpu_reset_fifo+0x1fc>
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
 800b64e:	4b28      	ldr	r3, [pc, #160]	; (800b6f0 <mpu_reset_fifo+0x204>)
 800b650:	7c9b      	ldrb	r3, [r3, #18]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d105      	bne.n	800b662 <mpu_reset_fifo+0x176>
 800b656:	4b26      	ldr	r3, [pc, #152]	; (800b6f0 <mpu_reset_fifo+0x204>)
 800b658:	7a9b      	ldrb	r3, [r3, #10]
 800b65a:	001a      	movs	r2, r3
 800b65c:	2301      	movs	r3, #1
 800b65e:	4013      	ands	r3, r2
 800b660:	d103      	bne.n	800b66a <mpu_reset_fifo+0x17e>
            data = BIT_FIFO_EN;
 800b662:	1dfb      	adds	r3, r7, #7
 800b664:	2240      	movs	r2, #64	; 0x40
 800b666:	701a      	strb	r2, [r3, #0]
 800b668:	e002      	b.n	800b670 <mpu_reset_fifo+0x184>
        else
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
 800b66a:	1dfb      	adds	r3, r7, #7
 800b66c:	2260      	movs	r2, #96	; 0x60
 800b66e:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 800b670:	4b1f      	ldr	r3, [pc, #124]	; (800b6f0 <mpu_reset_fifo+0x204>)
 800b672:	685b      	ldr	r3, [r3, #4]
 800b674:	7818      	ldrb	r0, [r3, #0]
 800b676:	4b1e      	ldr	r3, [pc, #120]	; (800b6f0 <mpu_reset_fifo+0x204>)
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	7919      	ldrb	r1, [r3, #4]
 800b67c:	1dfb      	adds	r3, r7, #7
 800b67e:	2201      	movs	r2, #1
 800b680:	f7fa ffa4 	bl	80065cc <Sensors_I2C_WriteRegister>
 800b684:	1e03      	subs	r3, r0, #0
 800b686:	d002      	beq.n	800b68e <mpu_reset_fifo+0x1a2>
            return -1;
 800b688:	2301      	movs	r3, #1
 800b68a:	425b      	negs	r3, r3
 800b68c:	e02c      	b.n	800b6e8 <mpu_reset_fifo+0x1fc>
        delay_ms(50);
 800b68e:	2032      	movs	r0, #50	; 0x32
 800b690:	f7fc f820 	bl	80076d4 <HAL_Delay>
        if (st.chip_cfg.int_enable)
 800b694:	4b16      	ldr	r3, [pc, #88]	; (800b6f0 <mpu_reset_fifo+0x204>)
 800b696:	7c5b      	ldrb	r3, [r3, #17]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d003      	beq.n	800b6a4 <mpu_reset_fifo+0x1b8>
            data = BIT_DATA_RDY_EN;
 800b69c:	1dfb      	adds	r3, r7, #7
 800b69e:	2201      	movs	r2, #1
 800b6a0:	701a      	strb	r2, [r3, #0]
 800b6a2:	e002      	b.n	800b6aa <mpu_reset_fifo+0x1be>
        else
            data = 0;
 800b6a4:	1dfb      	adds	r3, r7, #7
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 800b6aa:	4b11      	ldr	r3, [pc, #68]	; (800b6f0 <mpu_reset_fifo+0x204>)
 800b6ac:	685b      	ldr	r3, [r3, #4]
 800b6ae:	7818      	ldrb	r0, [r3, #0]
 800b6b0:	4b0f      	ldr	r3, [pc, #60]	; (800b6f0 <mpu_reset_fifo+0x204>)
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	7c59      	ldrb	r1, [r3, #17]
 800b6b6:	1dfb      	adds	r3, r7, #7
 800b6b8:	2201      	movs	r2, #1
 800b6ba:	f7fa ff87 	bl	80065cc <Sensors_I2C_WriteRegister>
 800b6be:	1e03      	subs	r3, r0, #0
 800b6c0:	d002      	beq.n	800b6c8 <mpu_reset_fifo+0x1dc>
            return -1;
 800b6c2:	2301      	movs	r3, #1
 800b6c4:	425b      	negs	r3, r3
 800b6c6:	e00f      	b.n	800b6e8 <mpu_reset_fifo+0x1fc>
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
 800b6c8:	4b09      	ldr	r3, [pc, #36]	; (800b6f0 <mpu_reset_fifo+0x204>)
 800b6ca:	685b      	ldr	r3, [r3, #4]
 800b6cc:	7818      	ldrb	r0, [r3, #0]
 800b6ce:	4b08      	ldr	r3, [pc, #32]	; (800b6f0 <mpu_reset_fifo+0x204>)
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	7959      	ldrb	r1, [r3, #5]
 800b6d4:	4b07      	ldr	r3, [pc, #28]	; (800b6f4 <mpu_reset_fifo+0x208>)
 800b6d6:	2201      	movs	r2, #1
 800b6d8:	f7fa ff78 	bl	80065cc <Sensors_I2C_WriteRegister>
 800b6dc:	1e03      	subs	r3, r0, #0
 800b6de:	d002      	beq.n	800b6e6 <mpu_reset_fifo+0x1fa>
            return -1;
 800b6e0:	2301      	movs	r3, #1
 800b6e2:	425b      	negs	r3, r3
 800b6e4:	e000      	b.n	800b6e8 <mpu_reset_fifo+0x1fc>
    }
    return 0;
 800b6e6:	2300      	movs	r3, #0
}
 800b6e8:	0018      	movs	r0, r3
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	b002      	add	sp, #8
 800b6ee:	bd80      	pop	{r7, pc}
 800b6f0:	2000002c 	.word	0x2000002c
 800b6f4:	2000003c 	.word	0x2000003c

0800b6f8 <mpu_get_gyro_fsr>:
 *  @brief      Get the gyro full-scale range.
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_gyro_fsr(unsigned short *fsr)
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b082      	sub	sp, #8
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.gyro_fsr) {
 800b700:	4b14      	ldr	r3, [pc, #80]	; (800b754 <mpu_get_gyro_fsr+0x5c>)
 800b702:	7a1b      	ldrb	r3, [r3, #8]
 800b704:	2b03      	cmp	r3, #3
 800b706:	d016      	beq.n	800b736 <mpu_get_gyro_fsr+0x3e>
 800b708:	dc1a      	bgt.n	800b740 <mpu_get_gyro_fsr+0x48>
 800b70a:	2b02      	cmp	r3, #2
 800b70c:	d00e      	beq.n	800b72c <mpu_get_gyro_fsr+0x34>
 800b70e:	dc17      	bgt.n	800b740 <mpu_get_gyro_fsr+0x48>
 800b710:	2b00      	cmp	r3, #0
 800b712:	d002      	beq.n	800b71a <mpu_get_gyro_fsr+0x22>
 800b714:	2b01      	cmp	r3, #1
 800b716:	d004      	beq.n	800b722 <mpu_get_gyro_fsr+0x2a>
 800b718:	e012      	b.n	800b740 <mpu_get_gyro_fsr+0x48>
    case INV_FSR_250DPS:
        fsr[0] = 250;
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	22fa      	movs	r2, #250	; 0xfa
 800b71e:	801a      	strh	r2, [r3, #0]
        break;
 800b720:	e012      	b.n	800b748 <mpu_get_gyro_fsr+0x50>
    case INV_FSR_500DPS:
        fsr[0] = 500;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	22fa      	movs	r2, #250	; 0xfa
 800b726:	0052      	lsls	r2, r2, #1
 800b728:	801a      	strh	r2, [r3, #0]
        break;
 800b72a:	e00d      	b.n	800b748 <mpu_get_gyro_fsr+0x50>
    case INV_FSR_1000DPS:
        fsr[0] = 1000;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	22fa      	movs	r2, #250	; 0xfa
 800b730:	0092      	lsls	r2, r2, #2
 800b732:	801a      	strh	r2, [r3, #0]
        break;
 800b734:	e008      	b.n	800b748 <mpu_get_gyro_fsr+0x50>
    case INV_FSR_2000DPS:
        fsr[0] = 2000;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	22fa      	movs	r2, #250	; 0xfa
 800b73a:	00d2      	lsls	r2, r2, #3
 800b73c:	801a      	strh	r2, [r3, #0]
        break;
 800b73e:	e003      	b.n	800b748 <mpu_get_gyro_fsr+0x50>
    default:
        fsr[0] = 0;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	2200      	movs	r2, #0
 800b744:	801a      	strh	r2, [r3, #0]
        break;
 800b746:	46c0      	nop			; (mov r8, r8)
    }
    return 0;
 800b748:	2300      	movs	r3, #0
}
 800b74a:	0018      	movs	r0, r3
 800b74c:	46bd      	mov	sp, r7
 800b74e:	b002      	add	sp, #8
 800b750:	bd80      	pop	{r7, pc}
 800b752:	46c0      	nop			; (mov r8, r8)
 800b754:	2000002c 	.word	0x2000002c

0800b758 <mpu_set_gyro_fsr>:
 *  @brief      Set the gyro full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_gyro_fsr(unsigned short fsr)
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b084      	sub	sp, #16
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	0002      	movs	r2, r0
 800b760:	1dbb      	adds	r3, r7, #6
 800b762:	801a      	strh	r2, [r3, #0]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 800b764:	4b2e      	ldr	r3, [pc, #184]	; (800b820 <mpu_set_gyro_fsr+0xc8>)
 800b766:	7a9b      	ldrb	r3, [r3, #10]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d102      	bne.n	800b772 <mpu_set_gyro_fsr+0x1a>
        return -1;
 800b76c:	2301      	movs	r3, #1
 800b76e:	425b      	negs	r3, r3
 800b770:	e052      	b.n	800b818 <mpu_set_gyro_fsr+0xc0>

    switch (fsr) {
 800b772:	1dbb      	adds	r3, r7, #6
 800b774:	881b      	ldrh	r3, [r3, #0]
 800b776:	22fa      	movs	r2, #250	; 0xfa
 800b778:	00d2      	lsls	r2, r2, #3
 800b77a:	4293      	cmp	r3, r2
 800b77c:	d021      	beq.n	800b7c2 <mpu_set_gyro_fsr+0x6a>
 800b77e:	22fa      	movs	r2, #250	; 0xfa
 800b780:	00d2      	lsls	r2, r2, #3
 800b782:	4293      	cmp	r3, r2
 800b784:	dc22      	bgt.n	800b7cc <mpu_set_gyro_fsr+0x74>
 800b786:	22fa      	movs	r2, #250	; 0xfa
 800b788:	0092      	lsls	r2, r2, #2
 800b78a:	4293      	cmp	r3, r2
 800b78c:	d014      	beq.n	800b7b8 <mpu_set_gyro_fsr+0x60>
 800b78e:	22fa      	movs	r2, #250	; 0xfa
 800b790:	0092      	lsls	r2, r2, #2
 800b792:	4293      	cmp	r3, r2
 800b794:	dc1a      	bgt.n	800b7cc <mpu_set_gyro_fsr+0x74>
 800b796:	2bfa      	cmp	r3, #250	; 0xfa
 800b798:	d004      	beq.n	800b7a4 <mpu_set_gyro_fsr+0x4c>
 800b79a:	22fa      	movs	r2, #250	; 0xfa
 800b79c:	0052      	lsls	r2, r2, #1
 800b79e:	4293      	cmp	r3, r2
 800b7a0:	d005      	beq.n	800b7ae <mpu_set_gyro_fsr+0x56>
 800b7a2:	e013      	b.n	800b7cc <mpu_set_gyro_fsr+0x74>
    case 250:
        data = INV_FSR_250DPS << 3;
 800b7a4:	230f      	movs	r3, #15
 800b7a6:	18fb      	adds	r3, r7, r3
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	701a      	strb	r2, [r3, #0]
        break;
 800b7ac:	e011      	b.n	800b7d2 <mpu_set_gyro_fsr+0x7a>
    case 500:
        data = INV_FSR_500DPS << 3;
 800b7ae:	230f      	movs	r3, #15
 800b7b0:	18fb      	adds	r3, r7, r3
 800b7b2:	2208      	movs	r2, #8
 800b7b4:	701a      	strb	r2, [r3, #0]
        break;
 800b7b6:	e00c      	b.n	800b7d2 <mpu_set_gyro_fsr+0x7a>
    case 1000:
        data = INV_FSR_1000DPS << 3;
 800b7b8:	230f      	movs	r3, #15
 800b7ba:	18fb      	adds	r3, r7, r3
 800b7bc:	2210      	movs	r2, #16
 800b7be:	701a      	strb	r2, [r3, #0]
        break;
 800b7c0:	e007      	b.n	800b7d2 <mpu_set_gyro_fsr+0x7a>
    case 2000:
        data = INV_FSR_2000DPS << 3;
 800b7c2:	230f      	movs	r3, #15
 800b7c4:	18fb      	adds	r3, r7, r3
 800b7c6:	2218      	movs	r2, #24
 800b7c8:	701a      	strb	r2, [r3, #0]
        break;
 800b7ca:	e002      	b.n	800b7d2 <mpu_set_gyro_fsr+0x7a>
    default:
        return -1;
 800b7cc:	2301      	movs	r3, #1
 800b7ce:	425b      	negs	r3, r3
 800b7d0:	e022      	b.n	800b818 <mpu_set_gyro_fsr+0xc0>
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
 800b7d2:	4b13      	ldr	r3, [pc, #76]	; (800b820 <mpu_set_gyro_fsr+0xc8>)
 800b7d4:	7a1a      	ldrb	r2, [r3, #8]
 800b7d6:	230f      	movs	r3, #15
 800b7d8:	18fb      	adds	r3, r7, r3
 800b7da:	781b      	ldrb	r3, [r3, #0]
 800b7dc:	08db      	lsrs	r3, r3, #3
 800b7de:	b2db      	uxtb	r3, r3
 800b7e0:	429a      	cmp	r2, r3
 800b7e2:	d101      	bne.n	800b7e8 <mpu_set_gyro_fsr+0x90>
        return 0;
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	e017      	b.n	800b818 <mpu_set_gyro_fsr+0xc0>
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
 800b7e8:	4b0d      	ldr	r3, [pc, #52]	; (800b820 <mpu_set_gyro_fsr+0xc8>)
 800b7ea:	685b      	ldr	r3, [r3, #4]
 800b7ec:	7818      	ldrb	r0, [r3, #0]
 800b7ee:	4b0c      	ldr	r3, [pc, #48]	; (800b820 <mpu_set_gyro_fsr+0xc8>)
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	7999      	ldrb	r1, [r3, #6]
 800b7f4:	230f      	movs	r3, #15
 800b7f6:	18fb      	adds	r3, r7, r3
 800b7f8:	2201      	movs	r2, #1
 800b7fa:	f7fa fee7 	bl	80065cc <Sensors_I2C_WriteRegister>
 800b7fe:	1e03      	subs	r3, r0, #0
 800b800:	d002      	beq.n	800b808 <mpu_set_gyro_fsr+0xb0>
        return -1;
 800b802:	2301      	movs	r3, #1
 800b804:	425b      	negs	r3, r3
 800b806:	e007      	b.n	800b818 <mpu_set_gyro_fsr+0xc0>
    st.chip_cfg.gyro_fsr = data >> 3;
 800b808:	230f      	movs	r3, #15
 800b80a:	18fb      	adds	r3, r7, r3
 800b80c:	781b      	ldrb	r3, [r3, #0]
 800b80e:	08db      	lsrs	r3, r3, #3
 800b810:	b2da      	uxtb	r2, r3
 800b812:	4b03      	ldr	r3, [pc, #12]	; (800b820 <mpu_set_gyro_fsr+0xc8>)
 800b814:	721a      	strb	r2, [r3, #8]
    return 0;
 800b816:	2300      	movs	r3, #0
}
 800b818:	0018      	movs	r0, r3
 800b81a:	46bd      	mov	sp, r7
 800b81c:	b004      	add	sp, #16
 800b81e:	bd80      	pop	{r7, pc}
 800b820:	2000002c 	.word	0x2000002c

0800b824 <mpu_get_accel_fsr>:
 *  @brief      Get the accel full-scale range.
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_accel_fsr(unsigned char *fsr)
{
 800b824:	b580      	push	{r7, lr}
 800b826:	b082      	sub	sp, #8
 800b828:	af00      	add	r7, sp, #0
 800b82a:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.accel_fsr) {
 800b82c:	4b17      	ldr	r3, [pc, #92]	; (800b88c <mpu_get_accel_fsr+0x68>)
 800b82e:	7a5b      	ldrb	r3, [r3, #9]
 800b830:	2b03      	cmp	r3, #3
 800b832:	d014      	beq.n	800b85e <mpu_get_accel_fsr+0x3a>
 800b834:	dc17      	bgt.n	800b866 <mpu_get_accel_fsr+0x42>
 800b836:	2b02      	cmp	r3, #2
 800b838:	d00d      	beq.n	800b856 <mpu_get_accel_fsr+0x32>
 800b83a:	dc14      	bgt.n	800b866 <mpu_get_accel_fsr+0x42>
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d002      	beq.n	800b846 <mpu_get_accel_fsr+0x22>
 800b840:	2b01      	cmp	r3, #1
 800b842:	d004      	beq.n	800b84e <mpu_get_accel_fsr+0x2a>
 800b844:	e00f      	b.n	800b866 <mpu_get_accel_fsr+0x42>
    case INV_FSR_2G:
        fsr[0] = 2;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	2202      	movs	r2, #2
 800b84a:	701a      	strb	r2, [r3, #0]
        break;
 800b84c:	e00e      	b.n	800b86c <mpu_get_accel_fsr+0x48>
    case INV_FSR_4G:
        fsr[0] = 4;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	2204      	movs	r2, #4
 800b852:	701a      	strb	r2, [r3, #0]
        break;
 800b854:	e00a      	b.n	800b86c <mpu_get_accel_fsr+0x48>
    case INV_FSR_8G:
        fsr[0] = 8;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	2208      	movs	r2, #8
 800b85a:	701a      	strb	r2, [r3, #0]
        break;
 800b85c:	e006      	b.n	800b86c <mpu_get_accel_fsr+0x48>
    case INV_FSR_16G:
        fsr[0] = 16;
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	2210      	movs	r2, #16
 800b862:	701a      	strb	r2, [r3, #0]
        break;
 800b864:	e002      	b.n	800b86c <mpu_get_accel_fsr+0x48>
    default:
        return -1;
 800b866:	2301      	movs	r3, #1
 800b868:	425b      	negs	r3, r3
 800b86a:	e00a      	b.n	800b882 <mpu_get_accel_fsr+0x5e>
    }
    if (st.chip_cfg.accel_half)
 800b86c:	4b07      	ldr	r3, [pc, #28]	; (800b88c <mpu_get_accel_fsr+0x68>)
 800b86e:	7cdb      	ldrb	r3, [r3, #19]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d005      	beq.n	800b880 <mpu_get_accel_fsr+0x5c>
        fsr[0] <<= 1;
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	781b      	ldrb	r3, [r3, #0]
 800b878:	18db      	adds	r3, r3, r3
 800b87a:	b2da      	uxtb	r2, r3
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	701a      	strb	r2, [r3, #0]
    return 0;
 800b880:	2300      	movs	r3, #0
}
 800b882:	0018      	movs	r0, r3
 800b884:	46bd      	mov	sp, r7
 800b886:	b002      	add	sp, #8
 800b888:	bd80      	pop	{r7, pc}
 800b88a:	46c0      	nop			; (mov r8, r8)
 800b88c:	2000002c 	.word	0x2000002c

0800b890 <mpu_set_accel_fsr>:
 *  @brief      Set the accel full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_accel_fsr(unsigned char fsr)
{
 800b890:	b580      	push	{r7, lr}
 800b892:	b084      	sub	sp, #16
 800b894:	af00      	add	r7, sp, #0
 800b896:	0002      	movs	r2, r0
 800b898:	1dfb      	adds	r3, r7, #7
 800b89a:	701a      	strb	r2, [r3, #0]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 800b89c:	4b28      	ldr	r3, [pc, #160]	; (800b940 <mpu_set_accel_fsr+0xb0>)
 800b89e:	7a9b      	ldrb	r3, [r3, #10]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d102      	bne.n	800b8aa <mpu_set_accel_fsr+0x1a>
        return -1;
 800b8a4:	2301      	movs	r3, #1
 800b8a6:	425b      	negs	r3, r3
 800b8a8:	e046      	b.n	800b938 <mpu_set_accel_fsr+0xa8>

    switch (fsr) {
 800b8aa:	1dfb      	adds	r3, r7, #7
 800b8ac:	781b      	ldrb	r3, [r3, #0]
 800b8ae:	2b10      	cmp	r3, #16
 800b8b0:	d017      	beq.n	800b8e2 <mpu_set_accel_fsr+0x52>
 800b8b2:	dc1b      	bgt.n	800b8ec <mpu_set_accel_fsr+0x5c>
 800b8b4:	2b08      	cmp	r3, #8
 800b8b6:	d00f      	beq.n	800b8d8 <mpu_set_accel_fsr+0x48>
 800b8b8:	dc18      	bgt.n	800b8ec <mpu_set_accel_fsr+0x5c>
 800b8ba:	2b02      	cmp	r3, #2
 800b8bc:	d002      	beq.n	800b8c4 <mpu_set_accel_fsr+0x34>
 800b8be:	2b04      	cmp	r3, #4
 800b8c0:	d005      	beq.n	800b8ce <mpu_set_accel_fsr+0x3e>
 800b8c2:	e013      	b.n	800b8ec <mpu_set_accel_fsr+0x5c>
    case 2:
        data = INV_FSR_2G << 3;
 800b8c4:	230f      	movs	r3, #15
 800b8c6:	18fb      	adds	r3, r7, r3
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	701a      	strb	r2, [r3, #0]
        break;
 800b8cc:	e011      	b.n	800b8f2 <mpu_set_accel_fsr+0x62>
    case 4:
        data = INV_FSR_4G << 3;
 800b8ce:	230f      	movs	r3, #15
 800b8d0:	18fb      	adds	r3, r7, r3
 800b8d2:	2208      	movs	r2, #8
 800b8d4:	701a      	strb	r2, [r3, #0]
        break;
 800b8d6:	e00c      	b.n	800b8f2 <mpu_set_accel_fsr+0x62>
    case 8:
        data = INV_FSR_8G << 3;
 800b8d8:	230f      	movs	r3, #15
 800b8da:	18fb      	adds	r3, r7, r3
 800b8dc:	2210      	movs	r2, #16
 800b8de:	701a      	strb	r2, [r3, #0]
        break;
 800b8e0:	e007      	b.n	800b8f2 <mpu_set_accel_fsr+0x62>
    case 16:
        data = INV_FSR_16G << 3;
 800b8e2:	230f      	movs	r3, #15
 800b8e4:	18fb      	adds	r3, r7, r3
 800b8e6:	2218      	movs	r2, #24
 800b8e8:	701a      	strb	r2, [r3, #0]
        break;
 800b8ea:	e002      	b.n	800b8f2 <mpu_set_accel_fsr+0x62>
    default:
        return -1;
 800b8ec:	2301      	movs	r3, #1
 800b8ee:	425b      	negs	r3, r3
 800b8f0:	e022      	b.n	800b938 <mpu_set_accel_fsr+0xa8>
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
 800b8f2:	4b13      	ldr	r3, [pc, #76]	; (800b940 <mpu_set_accel_fsr+0xb0>)
 800b8f4:	7a5a      	ldrb	r2, [r3, #9]
 800b8f6:	230f      	movs	r3, #15
 800b8f8:	18fb      	adds	r3, r7, r3
 800b8fa:	781b      	ldrb	r3, [r3, #0]
 800b8fc:	08db      	lsrs	r3, r3, #3
 800b8fe:	b2db      	uxtb	r3, r3
 800b900:	429a      	cmp	r2, r3
 800b902:	d101      	bne.n	800b908 <mpu_set_accel_fsr+0x78>
        return 0;
 800b904:	2300      	movs	r3, #0
 800b906:	e017      	b.n	800b938 <mpu_set_accel_fsr+0xa8>
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
 800b908:	4b0d      	ldr	r3, [pc, #52]	; (800b940 <mpu_set_accel_fsr+0xb0>)
 800b90a:	685b      	ldr	r3, [r3, #4]
 800b90c:	7818      	ldrb	r0, [r3, #0]
 800b90e:	4b0c      	ldr	r3, [pc, #48]	; (800b940 <mpu_set_accel_fsr+0xb0>)
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	79d9      	ldrb	r1, [r3, #7]
 800b914:	230f      	movs	r3, #15
 800b916:	18fb      	adds	r3, r7, r3
 800b918:	2201      	movs	r2, #1
 800b91a:	f7fa fe57 	bl	80065cc <Sensors_I2C_WriteRegister>
 800b91e:	1e03      	subs	r3, r0, #0
 800b920:	d002      	beq.n	800b928 <mpu_set_accel_fsr+0x98>
        return -1;
 800b922:	2301      	movs	r3, #1
 800b924:	425b      	negs	r3, r3
 800b926:	e007      	b.n	800b938 <mpu_set_accel_fsr+0xa8>
    st.chip_cfg.accel_fsr = data >> 3;
 800b928:	230f      	movs	r3, #15
 800b92a:	18fb      	adds	r3, r7, r3
 800b92c:	781b      	ldrb	r3, [r3, #0]
 800b92e:	08db      	lsrs	r3, r3, #3
 800b930:	b2da      	uxtb	r2, r3
 800b932:	4b03      	ldr	r3, [pc, #12]	; (800b940 <mpu_set_accel_fsr+0xb0>)
 800b934:	725a      	strb	r2, [r3, #9]
    return 0;
 800b936:	2300      	movs	r3, #0
}
 800b938:	0018      	movs	r0, r3
 800b93a:	46bd      	mov	sp, r7
 800b93c:	b004      	add	sp, #16
 800b93e:	bd80      	pop	{r7, pc}
 800b940:	2000002c 	.word	0x2000002c

0800b944 <mpu_get_lpf>:
 *  @brief      Get the current DLPF setting.
 *  @param[out] lpf Current LPF setting.
 *  0 if successful.
 */
int mpu_get_lpf(unsigned short *lpf)
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b082      	sub	sp, #8
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.lpf) {
 800b94c:	4b14      	ldr	r3, [pc, #80]	; (800b9a0 <mpu_get_lpf+0x5c>)
 800b94e:	7adb      	ldrb	r3, [r3, #11]
 800b950:	2b06      	cmp	r3, #6
 800b952:	d81c      	bhi.n	800b98e <mpu_get_lpf+0x4a>
 800b954:	009a      	lsls	r2, r3, #2
 800b956:	4b13      	ldr	r3, [pc, #76]	; (800b9a4 <mpu_get_lpf+0x60>)
 800b958:	18d3      	adds	r3, r2, r3
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	469f      	mov	pc, r3
    case INV_FILTER_188HZ:
        lpf[0] = 188;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	22bc      	movs	r2, #188	; 0xbc
 800b962:	801a      	strh	r2, [r3, #0]
        break;
 800b964:	e017      	b.n	800b996 <mpu_get_lpf+0x52>
    case INV_FILTER_98HZ:
        lpf[0] = 98;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	2262      	movs	r2, #98	; 0x62
 800b96a:	801a      	strh	r2, [r3, #0]
        break;
 800b96c:	e013      	b.n	800b996 <mpu_get_lpf+0x52>
    case INV_FILTER_42HZ:
        lpf[0] = 42;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	222a      	movs	r2, #42	; 0x2a
 800b972:	801a      	strh	r2, [r3, #0]
        break;
 800b974:	e00f      	b.n	800b996 <mpu_get_lpf+0x52>
    case INV_FILTER_20HZ:
        lpf[0] = 20;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	2214      	movs	r2, #20
 800b97a:	801a      	strh	r2, [r3, #0]
        break;
 800b97c:	e00b      	b.n	800b996 <mpu_get_lpf+0x52>
    case INV_FILTER_10HZ:
        lpf[0] = 10;
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	220a      	movs	r2, #10
 800b982:	801a      	strh	r2, [r3, #0]
        break;
 800b984:	e007      	b.n	800b996 <mpu_get_lpf+0x52>
    case INV_FILTER_5HZ:
        lpf[0] = 5;
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	2205      	movs	r2, #5
 800b98a:	801a      	strh	r2, [r3, #0]
        break;
 800b98c:	e003      	b.n	800b996 <mpu_get_lpf+0x52>
    case INV_FILTER_256HZ_NOLPF2:
    case INV_FILTER_2100HZ_NOLPF:
    default:
        lpf[0] = 0;
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	2200      	movs	r2, #0
 800b992:	801a      	strh	r2, [r3, #0]
        break;
 800b994:	46c0      	nop			; (mov r8, r8)
    }
    return 0;
 800b996:	2300      	movs	r3, #0
}
 800b998:	0018      	movs	r0, r3
 800b99a:	46bd      	mov	sp, r7
 800b99c:	b002      	add	sp, #8
 800b99e:	bd80      	pop	{r7, pc}
 800b9a0:	2000002c 	.word	0x2000002c
 800b9a4:	08015ad4 	.word	0x08015ad4

0800b9a8 <mpu_set_lpf>:
 *  The following LPF settings are supported: 188, 98, 42, 20, 10, 5.
 *  @param[in]  lpf Desired LPF setting.
 *  @return     0 if successful.
 */
int mpu_set_lpf(unsigned short lpf)
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b084      	sub	sp, #16
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	0002      	movs	r2, r0
 800b9b0:	1dbb      	adds	r3, r7, #6
 800b9b2:	801a      	strh	r2, [r3, #0]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 800b9b4:	4b2d      	ldr	r3, [pc, #180]	; (800ba6c <mpu_set_lpf+0xc4>)
 800b9b6:	7a9b      	ldrb	r3, [r3, #10]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d102      	bne.n	800b9c2 <mpu_set_lpf+0x1a>
        return -1;
 800b9bc:	2301      	movs	r3, #1
 800b9be:	425b      	negs	r3, r3
 800b9c0:	e04f      	b.n	800ba62 <mpu_set_lpf+0xba>

    if (lpf >= 188)
 800b9c2:	1dbb      	adds	r3, r7, #6
 800b9c4:	881b      	ldrh	r3, [r3, #0]
 800b9c6:	2bbb      	cmp	r3, #187	; 0xbb
 800b9c8:	d904      	bls.n	800b9d4 <mpu_set_lpf+0x2c>
        data = INV_FILTER_188HZ;
 800b9ca:	230f      	movs	r3, #15
 800b9cc:	18fb      	adds	r3, r7, r3
 800b9ce:	2201      	movs	r2, #1
 800b9d0:	701a      	strb	r2, [r3, #0]
 800b9d2:	e027      	b.n	800ba24 <mpu_set_lpf+0x7c>
    else if (lpf >= 98)
 800b9d4:	1dbb      	adds	r3, r7, #6
 800b9d6:	881b      	ldrh	r3, [r3, #0]
 800b9d8:	2b61      	cmp	r3, #97	; 0x61
 800b9da:	d904      	bls.n	800b9e6 <mpu_set_lpf+0x3e>
        data = INV_FILTER_98HZ;
 800b9dc:	230f      	movs	r3, #15
 800b9de:	18fb      	adds	r3, r7, r3
 800b9e0:	2202      	movs	r2, #2
 800b9e2:	701a      	strb	r2, [r3, #0]
 800b9e4:	e01e      	b.n	800ba24 <mpu_set_lpf+0x7c>
    else if (lpf >= 42)
 800b9e6:	1dbb      	adds	r3, r7, #6
 800b9e8:	881b      	ldrh	r3, [r3, #0]
 800b9ea:	2b29      	cmp	r3, #41	; 0x29
 800b9ec:	d904      	bls.n	800b9f8 <mpu_set_lpf+0x50>
        data = INV_FILTER_42HZ;
 800b9ee:	230f      	movs	r3, #15
 800b9f0:	18fb      	adds	r3, r7, r3
 800b9f2:	2203      	movs	r2, #3
 800b9f4:	701a      	strb	r2, [r3, #0]
 800b9f6:	e015      	b.n	800ba24 <mpu_set_lpf+0x7c>
    else if (lpf >= 20)
 800b9f8:	1dbb      	adds	r3, r7, #6
 800b9fa:	881b      	ldrh	r3, [r3, #0]
 800b9fc:	2b13      	cmp	r3, #19
 800b9fe:	d904      	bls.n	800ba0a <mpu_set_lpf+0x62>
        data = INV_FILTER_20HZ;
 800ba00:	230f      	movs	r3, #15
 800ba02:	18fb      	adds	r3, r7, r3
 800ba04:	2204      	movs	r2, #4
 800ba06:	701a      	strb	r2, [r3, #0]
 800ba08:	e00c      	b.n	800ba24 <mpu_set_lpf+0x7c>
    else if (lpf >= 10)
 800ba0a:	1dbb      	adds	r3, r7, #6
 800ba0c:	881b      	ldrh	r3, [r3, #0]
 800ba0e:	2b09      	cmp	r3, #9
 800ba10:	d904      	bls.n	800ba1c <mpu_set_lpf+0x74>
        data = INV_FILTER_10HZ;
 800ba12:	230f      	movs	r3, #15
 800ba14:	18fb      	adds	r3, r7, r3
 800ba16:	2205      	movs	r2, #5
 800ba18:	701a      	strb	r2, [r3, #0]
 800ba1a:	e003      	b.n	800ba24 <mpu_set_lpf+0x7c>
    else
        data = INV_FILTER_5HZ;
 800ba1c:	230f      	movs	r3, #15
 800ba1e:	18fb      	adds	r3, r7, r3
 800ba20:	2206      	movs	r2, #6
 800ba22:	701a      	strb	r2, [r3, #0]

    if (st.chip_cfg.lpf == data)
 800ba24:	4b11      	ldr	r3, [pc, #68]	; (800ba6c <mpu_set_lpf+0xc4>)
 800ba26:	7ada      	ldrb	r2, [r3, #11]
 800ba28:	230f      	movs	r3, #15
 800ba2a:	18fb      	adds	r3, r7, r3
 800ba2c:	781b      	ldrb	r3, [r3, #0]
 800ba2e:	429a      	cmp	r2, r3
 800ba30:	d101      	bne.n	800ba36 <mpu_set_lpf+0x8e>
        return 0;
 800ba32:	2300      	movs	r3, #0
 800ba34:	e015      	b.n	800ba62 <mpu_set_lpf+0xba>
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
 800ba36:	4b0d      	ldr	r3, [pc, #52]	; (800ba6c <mpu_set_lpf+0xc4>)
 800ba38:	685b      	ldr	r3, [r3, #4]
 800ba3a:	7818      	ldrb	r0, [r3, #0]
 800ba3c:	4b0b      	ldr	r3, [pc, #44]	; (800ba6c <mpu_set_lpf+0xc4>)
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	7899      	ldrb	r1, [r3, #2]
 800ba42:	230f      	movs	r3, #15
 800ba44:	18fb      	adds	r3, r7, r3
 800ba46:	2201      	movs	r2, #1
 800ba48:	f7fa fdc0 	bl	80065cc <Sensors_I2C_WriteRegister>
 800ba4c:	1e03      	subs	r3, r0, #0
 800ba4e:	d002      	beq.n	800ba56 <mpu_set_lpf+0xae>
        return -1;
 800ba50:	2301      	movs	r3, #1
 800ba52:	425b      	negs	r3, r3
 800ba54:	e005      	b.n	800ba62 <mpu_set_lpf+0xba>
    st.chip_cfg.lpf = data;
 800ba56:	230f      	movs	r3, #15
 800ba58:	18fb      	adds	r3, r7, r3
 800ba5a:	781a      	ldrb	r2, [r3, #0]
 800ba5c:	4b03      	ldr	r3, [pc, #12]	; (800ba6c <mpu_set_lpf+0xc4>)
 800ba5e:	72da      	strb	r2, [r3, #11]
    return 0;
 800ba60:	2300      	movs	r3, #0
}
 800ba62:	0018      	movs	r0, r3
 800ba64:	46bd      	mov	sp, r7
 800ba66:	b004      	add	sp, #16
 800ba68:	bd80      	pop	{r7, pc}
 800ba6a:	46c0      	nop			; (mov r8, r8)
 800ba6c:	2000002c 	.word	0x2000002c

0800ba70 <mpu_get_sample_rate>:
 *  @brief      Get sampling rate.
 *  @param[out] rate    Current sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_get_sample_rate(unsigned short *rate)
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b082      	sub	sp, #8
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	6078      	str	r0, [r7, #4]
    if (st.chip_cfg.dmp_on)
 800ba78:	4b08      	ldr	r3, [pc, #32]	; (800ba9c <mpu_get_sample_rate+0x2c>)
 800ba7a:	2224      	movs	r2, #36	; 0x24
 800ba7c:	5c9b      	ldrb	r3, [r3, r2]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d002      	beq.n	800ba88 <mpu_get_sample_rate+0x18>
        return -1;
 800ba82:	2301      	movs	r3, #1
 800ba84:	425b      	negs	r3, r3
 800ba86:	e004      	b.n	800ba92 <mpu_get_sample_rate+0x22>
    else
        rate[0] = st.chip_cfg.sample_rate;
 800ba88:	4b04      	ldr	r3, [pc, #16]	; (800ba9c <mpu_get_sample_rate+0x2c>)
 800ba8a:	89da      	ldrh	r2, [r3, #14]
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	801a      	strh	r2, [r3, #0]
    return 0;
 800ba90:	2300      	movs	r3, #0
}
 800ba92:	0018      	movs	r0, r3
 800ba94:	46bd      	mov	sp, r7
 800ba96:	b002      	add	sp, #8
 800ba98:	bd80      	pop	{r7, pc}
 800ba9a:	46c0      	nop			; (mov r8, r8)
 800ba9c:	2000002c 	.word	0x2000002c

0800baa0 <mpu_set_sample_rate>:
 *  Sampling rate must be between 4Hz and 1kHz.
 *  @param[in]  rate    Desired sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_sample_rate(unsigned short rate)
{
 800baa0:	b590      	push	{r4, r7, lr}
 800baa2:	b085      	sub	sp, #20
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	0002      	movs	r2, r0
 800baa8:	1dbb      	adds	r3, r7, #6
 800baaa:	801a      	strh	r2, [r3, #0]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 800baac:	4b36      	ldr	r3, [pc, #216]	; (800bb88 <mpu_set_sample_rate+0xe8>)
 800baae:	7a9b      	ldrb	r3, [r3, #10]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d102      	bne.n	800baba <mpu_set_sample_rate+0x1a>
        return -1;
 800bab4:	2301      	movs	r3, #1
 800bab6:	425b      	negs	r3, r3
 800bab8:	e061      	b.n	800bb7e <mpu_set_sample_rate+0xde>

    if (st.chip_cfg.dmp_on)
 800baba:	4b33      	ldr	r3, [pc, #204]	; (800bb88 <mpu_set_sample_rate+0xe8>)
 800babc:	2224      	movs	r2, #36	; 0x24
 800babe:	5c9b      	ldrb	r3, [r3, r2]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d002      	beq.n	800baca <mpu_set_sample_rate+0x2a>
        return -1;
 800bac4:	2301      	movs	r3, #1
 800bac6:	425b      	negs	r3, r3
 800bac8:	e059      	b.n	800bb7e <mpu_set_sample_rate+0xde>
    else {
        if (st.chip_cfg.lp_accel_mode) {
 800baca:	4b2f      	ldr	r3, [pc, #188]	; (800bb88 <mpu_set_sample_rate+0xe8>)
 800bacc:	7d1b      	ldrb	r3, [r3, #20]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d011      	beq.n	800baf6 <mpu_set_sample_rate+0x56>
            if (rate && (rate <= 40)) {
 800bad2:	1dbb      	adds	r3, r7, #6
 800bad4:	881b      	ldrh	r3, [r3, #0]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d00a      	beq.n	800baf0 <mpu_set_sample_rate+0x50>
 800bada:	1dbb      	adds	r3, r7, #6
 800badc:	881b      	ldrh	r3, [r3, #0]
 800bade:	2b28      	cmp	r3, #40	; 0x28
 800bae0:	d806      	bhi.n	800baf0 <mpu_set_sample_rate+0x50>
                /* Just stay in low-power accel mode. */
                mpu_lp_accel_mode(rate);
 800bae2:	1dbb      	adds	r3, r7, #6
 800bae4:	881b      	ldrh	r3, [r3, #0]
 800bae6:	0018      	movs	r0, r3
 800bae8:	f7ff fc06 	bl	800b2f8 <mpu_lp_accel_mode>
                return 0;
 800baec:	2300      	movs	r3, #0
 800baee:	e046      	b.n	800bb7e <mpu_set_sample_rate+0xde>
            }
            /* Requested rate exceeds the allowed frequencies in LP accel mode,
             * switch back to full-power mode.
             */
            mpu_lp_accel_mode(0);
 800baf0:	2000      	movs	r0, #0
 800baf2:	f7ff fc01 	bl	800b2f8 <mpu_lp_accel_mode>
        }
        if (rate < 4)
 800baf6:	1dbb      	adds	r3, r7, #6
 800baf8:	881b      	ldrh	r3, [r3, #0]
 800bafa:	2b03      	cmp	r3, #3
 800bafc:	d803      	bhi.n	800bb06 <mpu_set_sample_rate+0x66>
            rate = 4;
 800bafe:	1dbb      	adds	r3, r7, #6
 800bb00:	2204      	movs	r2, #4
 800bb02:	801a      	strh	r2, [r3, #0]
 800bb04:	e009      	b.n	800bb1a <mpu_set_sample_rate+0x7a>
        else if (rate > 1000)
 800bb06:	1dbb      	adds	r3, r7, #6
 800bb08:	881a      	ldrh	r2, [r3, #0]
 800bb0a:	23fa      	movs	r3, #250	; 0xfa
 800bb0c:	009b      	lsls	r3, r3, #2
 800bb0e:	429a      	cmp	r2, r3
 800bb10:	d903      	bls.n	800bb1a <mpu_set_sample_rate+0x7a>
            rate = 1000;
 800bb12:	1dbb      	adds	r3, r7, #6
 800bb14:	22fa      	movs	r2, #250	; 0xfa
 800bb16:	0092      	lsls	r2, r2, #2
 800bb18:	801a      	strh	r2, [r3, #0]

        data = 1000 / rate - 1;
 800bb1a:	1dbb      	adds	r3, r7, #6
 800bb1c:	881b      	ldrh	r3, [r3, #0]
 800bb1e:	0019      	movs	r1, r3
 800bb20:	23fa      	movs	r3, #250	; 0xfa
 800bb22:	0098      	lsls	r0, r3, #2
 800bb24:	f7f7 fb3c 	bl	80031a0 <__divsi3>
 800bb28:	0003      	movs	r3, r0
 800bb2a:	b2db      	uxtb	r3, r3
 800bb2c:	3b01      	subs	r3, #1
 800bb2e:	b2da      	uxtb	r2, r3
 800bb30:	240f      	movs	r4, #15
 800bb32:	193b      	adds	r3, r7, r4
 800bb34:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
 800bb36:	4b14      	ldr	r3, [pc, #80]	; (800bb88 <mpu_set_sample_rate+0xe8>)
 800bb38:	685b      	ldr	r3, [r3, #4]
 800bb3a:	7818      	ldrb	r0, [r3, #0]
 800bb3c:	4b12      	ldr	r3, [pc, #72]	; (800bb88 <mpu_set_sample_rate+0xe8>)
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	7859      	ldrb	r1, [r3, #1]
 800bb42:	193b      	adds	r3, r7, r4
 800bb44:	2201      	movs	r2, #1
 800bb46:	f7fa fd41 	bl	80065cc <Sensors_I2C_WriteRegister>
 800bb4a:	1e03      	subs	r3, r0, #0
 800bb4c:	d002      	beq.n	800bb54 <mpu_set_sample_rate+0xb4>
            return -1;
 800bb4e:	2301      	movs	r3, #1
 800bb50:	425b      	negs	r3, r3
 800bb52:	e014      	b.n	800bb7e <mpu_set_sample_rate+0xde>

        st.chip_cfg.sample_rate = 1000 / (1 + data);
 800bb54:	230f      	movs	r3, #15
 800bb56:	18fb      	adds	r3, r7, r3
 800bb58:	781b      	ldrb	r3, [r3, #0]
 800bb5a:	3301      	adds	r3, #1
 800bb5c:	0019      	movs	r1, r3
 800bb5e:	23fa      	movs	r3, #250	; 0xfa
 800bb60:	0098      	lsls	r0, r3, #2
 800bb62:	f7f7 fb1d 	bl	80031a0 <__divsi3>
 800bb66:	0003      	movs	r3, r0
 800bb68:	b29a      	uxth	r2, r3
 800bb6a:	4b07      	ldr	r3, [pc, #28]	; (800bb88 <mpu_set_sample_rate+0xe8>)
 800bb6c:	81da      	strh	r2, [r3, #14]
#ifdef AK89xx_SECONDARY
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
#endif

        /* Automatically set LPF to 1/2 sampling rate. */
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
 800bb6e:	4b06      	ldr	r3, [pc, #24]	; (800bb88 <mpu_set_sample_rate+0xe8>)
 800bb70:	89db      	ldrh	r3, [r3, #14]
 800bb72:	085b      	lsrs	r3, r3, #1
 800bb74:	b29b      	uxth	r3, r3
 800bb76:	0018      	movs	r0, r3
 800bb78:	f7ff ff16 	bl	800b9a8 <mpu_set_lpf>
        return 0;
 800bb7c:	2300      	movs	r3, #0
    }
}
 800bb7e:	0018      	movs	r0, r3
 800bb80:	46bd      	mov	sp, r7
 800bb82:	b005      	add	sp, #20
 800bb84:	bd90      	pop	{r4, r7, pc}
 800bb86:	46c0      	nop			; (mov r8, r8)
 800bb88:	2000002c 	.word	0x2000002c

0800bb8c <mpu_get_gyro_sens>:
 *  @brief      Get gyro sensitivity scale factor.
 *  @param[out] sens    Conversion from hardware units to dps.
 *  @return     0 if successful.
 */
int mpu_get_gyro_sens(float *sens)
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b082      	sub	sp, #8
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.gyro_fsr) {
 800bb94:	4b12      	ldr	r3, [pc, #72]	; (800bbe0 <mpu_get_gyro_sens+0x54>)
 800bb96:	7a1b      	ldrb	r3, [r3, #8]
 800bb98:	2b03      	cmp	r3, #3
 800bb9a:	d014      	beq.n	800bbc6 <mpu_get_gyro_sens+0x3a>
 800bb9c:	dc17      	bgt.n	800bbce <mpu_get_gyro_sens+0x42>
 800bb9e:	2b02      	cmp	r3, #2
 800bba0:	d00d      	beq.n	800bbbe <mpu_get_gyro_sens+0x32>
 800bba2:	dc14      	bgt.n	800bbce <mpu_get_gyro_sens+0x42>
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d002      	beq.n	800bbae <mpu_get_gyro_sens+0x22>
 800bba8:	2b01      	cmp	r3, #1
 800bbaa:	d004      	beq.n	800bbb6 <mpu_get_gyro_sens+0x2a>
 800bbac:	e00f      	b.n	800bbce <mpu_get_gyro_sens+0x42>
    case INV_FSR_250DPS:
        sens[0] = 131.f;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	4a0c      	ldr	r2, [pc, #48]	; (800bbe4 <mpu_get_gyro_sens+0x58>)
 800bbb2:	601a      	str	r2, [r3, #0]
        break;
 800bbb4:	e00e      	b.n	800bbd4 <mpu_get_gyro_sens+0x48>
    case INV_FSR_500DPS:
        sens[0] = 65.5f;
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	4a0b      	ldr	r2, [pc, #44]	; (800bbe8 <mpu_get_gyro_sens+0x5c>)
 800bbba:	601a      	str	r2, [r3, #0]
        break;
 800bbbc:	e00a      	b.n	800bbd4 <mpu_get_gyro_sens+0x48>
    case INV_FSR_1000DPS:
        sens[0] = 32.8f;
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	4a0a      	ldr	r2, [pc, #40]	; (800bbec <mpu_get_gyro_sens+0x60>)
 800bbc2:	601a      	str	r2, [r3, #0]
        break;
 800bbc4:	e006      	b.n	800bbd4 <mpu_get_gyro_sens+0x48>
    case INV_FSR_2000DPS:
        sens[0] = 16.4f;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	4a09      	ldr	r2, [pc, #36]	; (800bbf0 <mpu_get_gyro_sens+0x64>)
 800bbca:	601a      	str	r2, [r3, #0]
        break;
 800bbcc:	e002      	b.n	800bbd4 <mpu_get_gyro_sens+0x48>
    default:
        return -1;
 800bbce:	2301      	movs	r3, #1
 800bbd0:	425b      	negs	r3, r3
 800bbd2:	e000      	b.n	800bbd6 <mpu_get_gyro_sens+0x4a>
    }
    return 0;
 800bbd4:	2300      	movs	r3, #0
}
 800bbd6:	0018      	movs	r0, r3
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	b002      	add	sp, #8
 800bbdc:	bd80      	pop	{r7, pc}
 800bbde:	46c0      	nop			; (mov r8, r8)
 800bbe0:	2000002c 	.word	0x2000002c
 800bbe4:	43030000 	.word	0x43030000
 800bbe8:	42830000 	.word	0x42830000
 800bbec:	42033333 	.word	0x42033333
 800bbf0:	41833333 	.word	0x41833333

0800bbf4 <mpu_get_accel_sens>:
 *  @brief      Get accel sensitivity scale factor.
 *  @param[out] sens    Conversion from hardware units to g's.
 *  @return     0 if successful.
 */
int mpu_get_accel_sens(unsigned short *sens)
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b082      	sub	sp, #8
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.accel_fsr) {
 800bbfc:	4b19      	ldr	r3, [pc, #100]	; (800bc64 <mpu_get_accel_sens+0x70>)
 800bbfe:	7a5b      	ldrb	r3, [r3, #9]
 800bc00:	2b03      	cmp	r3, #3
 800bc02:	d017      	beq.n	800bc34 <mpu_get_accel_sens+0x40>
 800bc04:	dc1b      	bgt.n	800bc3e <mpu_get_accel_sens+0x4a>
 800bc06:	2b02      	cmp	r3, #2
 800bc08:	d00f      	beq.n	800bc2a <mpu_get_accel_sens+0x36>
 800bc0a:	dc18      	bgt.n	800bc3e <mpu_get_accel_sens+0x4a>
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d002      	beq.n	800bc16 <mpu_get_accel_sens+0x22>
 800bc10:	2b01      	cmp	r3, #1
 800bc12:	d005      	beq.n	800bc20 <mpu_get_accel_sens+0x2c>
 800bc14:	e013      	b.n	800bc3e <mpu_get_accel_sens+0x4a>
    case INV_FSR_2G:
        sens[0] = 16384;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	2280      	movs	r2, #128	; 0x80
 800bc1a:	01d2      	lsls	r2, r2, #7
 800bc1c:	801a      	strh	r2, [r3, #0]
        break;
 800bc1e:	e011      	b.n	800bc44 <mpu_get_accel_sens+0x50>
    case INV_FSR_4G:
        sens[0] = 8192;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	2280      	movs	r2, #128	; 0x80
 800bc24:	0192      	lsls	r2, r2, #6
 800bc26:	801a      	strh	r2, [r3, #0]
        break;
 800bc28:	e00c      	b.n	800bc44 <mpu_get_accel_sens+0x50>
    case INV_FSR_8G:
        sens[0] = 4096;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	2280      	movs	r2, #128	; 0x80
 800bc2e:	0152      	lsls	r2, r2, #5
 800bc30:	801a      	strh	r2, [r3, #0]
        break;
 800bc32:	e007      	b.n	800bc44 <mpu_get_accel_sens+0x50>
    case INV_FSR_16G:
        sens[0] = 2048;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2280      	movs	r2, #128	; 0x80
 800bc38:	0112      	lsls	r2, r2, #4
 800bc3a:	801a      	strh	r2, [r3, #0]
        break;
 800bc3c:	e002      	b.n	800bc44 <mpu_get_accel_sens+0x50>
    default:
        return -1;
 800bc3e:	2301      	movs	r3, #1
 800bc40:	425b      	negs	r3, r3
 800bc42:	e00a      	b.n	800bc5a <mpu_get_accel_sens+0x66>
    }
    if (st.chip_cfg.accel_half)
 800bc44:	4b07      	ldr	r3, [pc, #28]	; (800bc64 <mpu_get_accel_sens+0x70>)
 800bc46:	7cdb      	ldrb	r3, [r3, #19]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d005      	beq.n	800bc58 <mpu_get_accel_sens+0x64>
        sens[0] >>= 1;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	881b      	ldrh	r3, [r3, #0]
 800bc50:	085b      	lsrs	r3, r3, #1
 800bc52:	b29a      	uxth	r2, r3
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	801a      	strh	r2, [r3, #0]
    return 0;
 800bc58:	2300      	movs	r3, #0
}
 800bc5a:	0018      	movs	r0, r3
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	b002      	add	sp, #8
 800bc60:	bd80      	pop	{r7, pc}
 800bc62:	46c0      	nop			; (mov r8, r8)
 800bc64:	2000002c 	.word	0x2000002c

0800bc68 <mpu_get_fifo_config>:
 *  \n INV_XYZ_ACCEL
 *  @param[out] sensors Mask of sensors in FIFO.
 *  @return     0 if successful.
 */
int mpu_get_fifo_config(unsigned char *sensors)
{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b082      	sub	sp, #8
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
    sensors[0] = st.chip_cfg.fifo_enable;
 800bc70:	4b04      	ldr	r3, [pc, #16]	; (800bc84 <mpu_get_fifo_config+0x1c>)
 800bc72:	7c1a      	ldrb	r2, [r3, #16]
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	701a      	strb	r2, [r3, #0]
    return 0;
 800bc78:	2300      	movs	r3, #0
}
 800bc7a:	0018      	movs	r0, r3
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	b002      	add	sp, #8
 800bc80:	bd80      	pop	{r7, pc}
 800bc82:	46c0      	nop			; (mov r8, r8)
 800bc84:	2000002c 	.word	0x2000002c

0800bc88 <mpu_configure_fifo>:
 *  \n INV_XYZ_ACCEL
 *  @param[in]  sensors Mask of sensors to push to FIFO.
 *  @return     0 if successful.
 */
int mpu_configure_fifo(unsigned char sensors)
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b084      	sub	sp, #16
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	0002      	movs	r2, r0
 800bc90:	1dfb      	adds	r3, r7, #7
 800bc92:	701a      	strb	r2, [r3, #0]
    unsigned char prev;
    int result = 0;
 800bc94:	2300      	movs	r3, #0
 800bc96:	60fb      	str	r3, [r7, #12]

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;
 800bc98:	1dfb      	adds	r3, r7, #7
 800bc9a:	1dfa      	adds	r2, r7, #7
 800bc9c:	7812      	ldrb	r2, [r2, #0]
 800bc9e:	2101      	movs	r1, #1
 800bca0:	438a      	bics	r2, r1
 800bca2:	701a      	strb	r2, [r3, #0]

    if (st.chip_cfg.dmp_on)
 800bca4:	4b25      	ldr	r3, [pc, #148]	; (800bd3c <mpu_configure_fifo+0xb4>)
 800bca6:	2224      	movs	r2, #36	; 0x24
 800bca8:	5c9b      	ldrb	r3, [r3, r2]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d001      	beq.n	800bcb2 <mpu_configure_fifo+0x2a>
        return 0;
 800bcae:	2300      	movs	r3, #0
 800bcb0:	e03f      	b.n	800bd32 <mpu_configure_fifo+0xaa>
    else {
        if (!(st.chip_cfg.sensors))
 800bcb2:	4b22      	ldr	r3, [pc, #136]	; (800bd3c <mpu_configure_fifo+0xb4>)
 800bcb4:	7a9b      	ldrb	r3, [r3, #10]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d102      	bne.n	800bcc0 <mpu_configure_fifo+0x38>
            return -1;
 800bcba:	2301      	movs	r3, #1
 800bcbc:	425b      	negs	r3, r3
 800bcbe:	e038      	b.n	800bd32 <mpu_configure_fifo+0xaa>
        prev = st.chip_cfg.fifo_enable;
 800bcc0:	230b      	movs	r3, #11
 800bcc2:	18fb      	adds	r3, r7, r3
 800bcc4:	4a1d      	ldr	r2, [pc, #116]	; (800bd3c <mpu_configure_fifo+0xb4>)
 800bcc6:	7c12      	ldrb	r2, [r2, #16]
 800bcc8:	701a      	strb	r2, [r3, #0]
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
 800bcca:	4b1c      	ldr	r3, [pc, #112]	; (800bd3c <mpu_configure_fifo+0xb4>)
 800bccc:	7a9b      	ldrb	r3, [r3, #10]
 800bcce:	1dfa      	adds	r2, r7, #7
 800bcd0:	7812      	ldrb	r2, [r2, #0]
 800bcd2:	4013      	ands	r3, r2
 800bcd4:	b2da      	uxtb	r2, r3
 800bcd6:	4b19      	ldr	r3, [pc, #100]	; (800bd3c <mpu_configure_fifo+0xb4>)
 800bcd8:	741a      	strb	r2, [r3, #16]
        if (st.chip_cfg.fifo_enable != sensors)
 800bcda:	4b18      	ldr	r3, [pc, #96]	; (800bd3c <mpu_configure_fifo+0xb4>)
 800bcdc:	7c1b      	ldrb	r3, [r3, #16]
 800bcde:	1dfa      	adds	r2, r7, #7
 800bce0:	7812      	ldrb	r2, [r2, #0]
 800bce2:	429a      	cmp	r2, r3
 800bce4:	d003      	beq.n	800bcee <mpu_configure_fifo+0x66>
            /* You're not getting what you asked for. Some sensors are
             * asleep.
             */
            result = -1;
 800bce6:	2301      	movs	r3, #1
 800bce8:	425b      	negs	r3, r3
 800bcea:	60fb      	str	r3, [r7, #12]
 800bcec:	e001      	b.n	800bcf2 <mpu_configure_fifo+0x6a>
        else
            result = 0;
 800bcee:	2300      	movs	r3, #0
 800bcf0:	60fb      	str	r3, [r7, #12]
        if (sensors || st.chip_cfg.lp_accel_mode)
 800bcf2:	1dfb      	adds	r3, r7, #7
 800bcf4:	781b      	ldrb	r3, [r3, #0]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d103      	bne.n	800bd02 <mpu_configure_fifo+0x7a>
 800bcfa:	4b10      	ldr	r3, [pc, #64]	; (800bd3c <mpu_configure_fifo+0xb4>)
 800bcfc:	7d1b      	ldrb	r3, [r3, #20]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d003      	beq.n	800bd0a <mpu_configure_fifo+0x82>
            set_int_enable(1);
 800bd02:	2001      	movs	r0, #1
 800bd04:	f7ff f9ea 	bl	800b0dc <set_int_enable>
 800bd08:	e002      	b.n	800bd10 <mpu_configure_fifo+0x88>
        else
            set_int_enable(0);
 800bd0a:	2000      	movs	r0, #0
 800bd0c:	f7ff f9e6 	bl	800b0dc <set_int_enable>
        if (sensors) {
 800bd10:	1dfb      	adds	r3, r7, #7
 800bd12:	781b      	ldrb	r3, [r3, #0]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d00b      	beq.n	800bd30 <mpu_configure_fifo+0xa8>
            if (mpu_reset_fifo()) {
 800bd18:	f7ff fbe8 	bl	800b4ec <mpu_reset_fifo>
 800bd1c:	1e03      	subs	r3, r0, #0
 800bd1e:	d007      	beq.n	800bd30 <mpu_configure_fifo+0xa8>
                st.chip_cfg.fifo_enable = prev;
 800bd20:	4b06      	ldr	r3, [pc, #24]	; (800bd3c <mpu_configure_fifo+0xb4>)
 800bd22:	220b      	movs	r2, #11
 800bd24:	18ba      	adds	r2, r7, r2
 800bd26:	7812      	ldrb	r2, [r2, #0]
 800bd28:	741a      	strb	r2, [r3, #16]
                return -1;
 800bd2a:	2301      	movs	r3, #1
 800bd2c:	425b      	negs	r3, r3
 800bd2e:	e000      	b.n	800bd32 <mpu_configure_fifo+0xaa>
            }
        }
    }

    return result;
 800bd30:	68fb      	ldr	r3, [r7, #12]
}
 800bd32:	0018      	movs	r0, r3
 800bd34:	46bd      	mov	sp, r7
 800bd36:	b004      	add	sp, #16
 800bd38:	bd80      	pop	{r7, pc}
 800bd3a:	46c0      	nop			; (mov r8, r8)
 800bd3c:	2000002c 	.word	0x2000002c

0800bd40 <mpu_set_sensors>:
 *  \n INV_XYZ_COMPASS
 *  @param[in]  sensors    Mask of sensors to wake.
 *  @return     0 if successful.
 */
int mpu_set_sensors(unsigned char sensors)
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b084      	sub	sp, #16
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	0002      	movs	r2, r0
 800bd48:	1dfb      	adds	r3, r7, #7
 800bd4a:	701a      	strb	r2, [r3, #0]
    unsigned char data;
#ifdef AK89xx_SECONDARY
    unsigned char user_ctrl;
#endif

    if (sensors & INV_XYZ_GYRO)
 800bd4c:	1dfb      	adds	r3, r7, #7
 800bd4e:	781b      	ldrb	r3, [r3, #0]
 800bd50:	2270      	movs	r2, #112	; 0x70
 800bd52:	4013      	ands	r3, r2
 800bd54:	d004      	beq.n	800bd60 <mpu_set_sensors+0x20>
        data = INV_CLK_PLL;
 800bd56:	230f      	movs	r3, #15
 800bd58:	18fb      	adds	r3, r7, r3
 800bd5a:	2201      	movs	r2, #1
 800bd5c:	701a      	strb	r2, [r3, #0]
 800bd5e:	e00c      	b.n	800bd7a <mpu_set_sensors+0x3a>
    else if (sensors)
 800bd60:	1dfb      	adds	r3, r7, #7
 800bd62:	781b      	ldrb	r3, [r3, #0]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d004      	beq.n	800bd72 <mpu_set_sensors+0x32>
        data = 0;
 800bd68:	230f      	movs	r3, #15
 800bd6a:	18fb      	adds	r3, r7, r3
 800bd6c:	2200      	movs	r2, #0
 800bd6e:	701a      	strb	r2, [r3, #0]
 800bd70:	e003      	b.n	800bd7a <mpu_set_sensors+0x3a>
    else
        data = BIT_SLEEP;
 800bd72:	230f      	movs	r3, #15
 800bd74:	18fb      	adds	r3, r7, r3
 800bd76:	2240      	movs	r2, #64	; 0x40
 800bd78:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
 800bd7a:	4b3f      	ldr	r3, [pc, #252]	; (800be78 <mpu_set_sensors+0x138>)
 800bd7c:	685b      	ldr	r3, [r3, #4]
 800bd7e:	7818      	ldrb	r0, [r3, #0]
 800bd80:	4b3d      	ldr	r3, [pc, #244]	; (800be78 <mpu_set_sensors+0x138>)
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	7d59      	ldrb	r1, [r3, #21]
 800bd86:	230f      	movs	r3, #15
 800bd88:	18fb      	adds	r3, r7, r3
 800bd8a:	2201      	movs	r2, #1
 800bd8c:	f7fa fc1e 	bl	80065cc <Sensors_I2C_WriteRegister>
 800bd90:	1e03      	subs	r3, r0, #0
 800bd92:	d005      	beq.n	800bda0 <mpu_set_sensors+0x60>
        st.chip_cfg.sensors = 0;
 800bd94:	4b38      	ldr	r3, [pc, #224]	; (800be78 <mpu_set_sensors+0x138>)
 800bd96:	2200      	movs	r2, #0
 800bd98:	729a      	strb	r2, [r3, #10]
        return -1;
 800bd9a:	2301      	movs	r3, #1
 800bd9c:	425b      	negs	r3, r3
 800bd9e:	e066      	b.n	800be6e <mpu_set_sensors+0x12e>
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
 800bda0:	210f      	movs	r1, #15
 800bda2:	187b      	adds	r3, r7, r1
 800bda4:	781b      	ldrb	r3, [r3, #0]
 800bda6:	2240      	movs	r2, #64	; 0x40
 800bda8:	4393      	bics	r3, r2
 800bdaa:	b2da      	uxtb	r2, r3
 800bdac:	4b32      	ldr	r3, [pc, #200]	; (800be78 <mpu_set_sensors+0x138>)
 800bdae:	731a      	strb	r2, [r3, #12]

    data = 0;
 800bdb0:	187b      	adds	r3, r7, r1
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	701a      	strb	r2, [r3, #0]
    if (!(sensors & INV_X_GYRO))
 800bdb6:	1dfb      	adds	r3, r7, #7
 800bdb8:	781b      	ldrb	r3, [r3, #0]
 800bdba:	2240      	movs	r2, #64	; 0x40
 800bdbc:	4013      	ands	r3, r2
 800bdbe:	d106      	bne.n	800bdce <mpu_set_sensors+0x8e>
        data |= BIT_STBY_XG;
 800bdc0:	187b      	adds	r3, r7, r1
 800bdc2:	781b      	ldrb	r3, [r3, #0]
 800bdc4:	2204      	movs	r2, #4
 800bdc6:	4313      	orrs	r3, r2
 800bdc8:	b2da      	uxtb	r2, r3
 800bdca:	187b      	adds	r3, r7, r1
 800bdcc:	701a      	strb	r2, [r3, #0]
    if (!(sensors & INV_Y_GYRO))
 800bdce:	1dfb      	adds	r3, r7, #7
 800bdd0:	781b      	ldrb	r3, [r3, #0]
 800bdd2:	2220      	movs	r2, #32
 800bdd4:	4013      	ands	r3, r2
 800bdd6:	d107      	bne.n	800bde8 <mpu_set_sensors+0xa8>
        data |= BIT_STBY_YG;
 800bdd8:	210f      	movs	r1, #15
 800bdda:	187b      	adds	r3, r7, r1
 800bddc:	781b      	ldrb	r3, [r3, #0]
 800bdde:	2202      	movs	r2, #2
 800bde0:	4313      	orrs	r3, r2
 800bde2:	b2da      	uxtb	r2, r3
 800bde4:	187b      	adds	r3, r7, r1
 800bde6:	701a      	strb	r2, [r3, #0]
    if (!(sensors & INV_Z_GYRO))
 800bde8:	1dfb      	adds	r3, r7, #7
 800bdea:	781b      	ldrb	r3, [r3, #0]
 800bdec:	2210      	movs	r2, #16
 800bdee:	4013      	ands	r3, r2
 800bdf0:	d107      	bne.n	800be02 <mpu_set_sensors+0xc2>
        data |= BIT_STBY_ZG;
 800bdf2:	210f      	movs	r1, #15
 800bdf4:	187b      	adds	r3, r7, r1
 800bdf6:	781b      	ldrb	r3, [r3, #0]
 800bdf8:	2201      	movs	r2, #1
 800bdfa:	4313      	orrs	r3, r2
 800bdfc:	b2da      	uxtb	r2, r3
 800bdfe:	187b      	adds	r3, r7, r1
 800be00:	701a      	strb	r2, [r3, #0]
    if (!(sensors & INV_XYZ_ACCEL))
 800be02:	1dfb      	adds	r3, r7, #7
 800be04:	781b      	ldrb	r3, [r3, #0]
 800be06:	2208      	movs	r2, #8
 800be08:	4013      	ands	r3, r2
 800be0a:	d107      	bne.n	800be1c <mpu_set_sensors+0xdc>
        data |= BIT_STBY_XYZA;
 800be0c:	210f      	movs	r1, #15
 800be0e:	187b      	adds	r3, r7, r1
 800be10:	781b      	ldrb	r3, [r3, #0]
 800be12:	2238      	movs	r2, #56	; 0x38
 800be14:	4313      	orrs	r3, r2
 800be16:	b2da      	uxtb	r2, r3
 800be18:	187b      	adds	r3, r7, r1
 800be1a:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
 800be1c:	4b16      	ldr	r3, [pc, #88]	; (800be78 <mpu_set_sensors+0x138>)
 800be1e:	685b      	ldr	r3, [r3, #4]
 800be20:	7818      	ldrb	r0, [r3, #0]
 800be22:	4b15      	ldr	r3, [pc, #84]	; (800be78 <mpu_set_sensors+0x138>)
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	7d99      	ldrb	r1, [r3, #22]
 800be28:	230f      	movs	r3, #15
 800be2a:	18fb      	adds	r3, r7, r3
 800be2c:	2201      	movs	r2, #1
 800be2e:	f7fa fbcd 	bl	80065cc <Sensors_I2C_WriteRegister>
 800be32:	1e03      	subs	r3, r0, #0
 800be34:	d005      	beq.n	800be42 <mpu_set_sensors+0x102>
        st.chip_cfg.sensors = 0;
 800be36:	4b10      	ldr	r3, [pc, #64]	; (800be78 <mpu_set_sensors+0x138>)
 800be38:	2200      	movs	r2, #0
 800be3a:	729a      	strb	r2, [r3, #10]
        return -1;
 800be3c:	2301      	movs	r3, #1
 800be3e:	425b      	negs	r3, r3
 800be40:	e015      	b.n	800be6e <mpu_set_sensors+0x12e>
    }

    if (sensors && (sensors != INV_XYZ_ACCEL))
 800be42:	1dfb      	adds	r3, r7, #7
 800be44:	781b      	ldrb	r3, [r3, #0]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d006      	beq.n	800be58 <mpu_set_sensors+0x118>
 800be4a:	1dfb      	adds	r3, r7, #7
 800be4c:	781b      	ldrb	r3, [r3, #0]
 800be4e:	2b08      	cmp	r3, #8
 800be50:	d002      	beq.n	800be58 <mpu_set_sensors+0x118>
        /* Latched interrupts only used in LP accel mode. */
        mpu_set_int_latched(0);
 800be52:	2000      	movs	r0, #0
 800be54:	f000 f97e 	bl	800c154 <mpu_set_int_latched>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
        return -1;
#endif
#endif

    st.chip_cfg.sensors = sensors;
 800be58:	4b07      	ldr	r3, [pc, #28]	; (800be78 <mpu_set_sensors+0x138>)
 800be5a:	1dfa      	adds	r2, r7, #7
 800be5c:	7812      	ldrb	r2, [r2, #0]
 800be5e:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.lp_accel_mode = 0;
 800be60:	4b05      	ldr	r3, [pc, #20]	; (800be78 <mpu_set_sensors+0x138>)
 800be62:	2200      	movs	r2, #0
 800be64:	751a      	strb	r2, [r3, #20]
    delay_ms(50);
 800be66:	2032      	movs	r0, #50	; 0x32
 800be68:	f7fb fc34 	bl	80076d4 <HAL_Delay>
    return 0;
 800be6c:	2300      	movs	r3, #0
}
 800be6e:	0018      	movs	r0, r3
 800be70:	46bd      	mov	sp, r7
 800be72:	b004      	add	sp, #16
 800be74:	bd80      	pop	{r7, pc}
 800be76:	46c0      	nop			; (mov r8, r8)
 800be78:	2000002c 	.word	0x2000002c

0800be7c <mpu_read_fifo_stream>:
 *  @param[in]  data    FIFO packet.
 *  @param[in]  more    Number of remaining packets.
 */
int mpu_read_fifo_stream(unsigned short length, unsigned char *data,
    unsigned char *more)
{
 800be7c:	b590      	push	{r4, r7, lr}
 800be7e:	b087      	sub	sp, #28
 800be80:	af00      	add	r7, sp, #0
 800be82:	60b9      	str	r1, [r7, #8]
 800be84:	607a      	str	r2, [r7, #4]
 800be86:	230e      	movs	r3, #14
 800be88:	18fb      	adds	r3, r7, r3
 800be8a:	1c02      	adds	r2, r0, #0
 800be8c:	801a      	strh	r2, [r3, #0]
    unsigned char tmp[2];
    unsigned short fifo_count;
    if (!st.chip_cfg.dmp_on)
 800be8e:	4b43      	ldr	r3, [pc, #268]	; (800bf9c <mpu_read_fifo_stream+0x120>)
 800be90:	2224      	movs	r2, #36	; 0x24
 800be92:	5c9b      	ldrb	r3, [r3, r2]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d102      	bne.n	800be9e <mpu_read_fifo_stream+0x22>
        return -1;
 800be98:	2301      	movs	r3, #1
 800be9a:	425b      	negs	r3, r3
 800be9c:	e07a      	b.n	800bf94 <mpu_read_fifo_stream+0x118>
    if (!st.chip_cfg.sensors)
 800be9e:	4b3f      	ldr	r3, [pc, #252]	; (800bf9c <mpu_read_fifo_stream+0x120>)
 800bea0:	7a9b      	ldrb	r3, [r3, #10]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d102      	bne.n	800beac <mpu_read_fifo_stream+0x30>
        return -1;
 800bea6:	2301      	movs	r3, #1
 800bea8:	425b      	negs	r3, r3
 800beaa:	e073      	b.n	800bf94 <mpu_read_fifo_stream+0x118>

    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, tmp))
 800beac:	4b3b      	ldr	r3, [pc, #236]	; (800bf9c <mpu_read_fifo_stream+0x120>)
 800beae:	685b      	ldr	r3, [r3, #4]
 800beb0:	7818      	ldrb	r0, [r3, #0]
 800beb2:	4b3a      	ldr	r3, [pc, #232]	; (800bf9c <mpu_read_fifo_stream+0x120>)
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	7b19      	ldrb	r1, [r3, #12]
 800beb8:	2314      	movs	r3, #20
 800beba:	18fb      	adds	r3, r7, r3
 800bebc:	2202      	movs	r2, #2
 800bebe:	f7fa fbe1 	bl	8006684 <Sensors_I2C_ReadRegister>
 800bec2:	1e03      	subs	r3, r0, #0
 800bec4:	d002      	beq.n	800becc <mpu_read_fifo_stream+0x50>
        return -1;
 800bec6:	2301      	movs	r3, #1
 800bec8:	425b      	negs	r3, r3
 800beca:	e063      	b.n	800bf94 <mpu_read_fifo_stream+0x118>
    fifo_count = (tmp[0] << 8) | tmp[1];
 800becc:	2114      	movs	r1, #20
 800bece:	187b      	adds	r3, r7, r1
 800bed0:	781b      	ldrb	r3, [r3, #0]
 800bed2:	021b      	lsls	r3, r3, #8
 800bed4:	b21a      	sxth	r2, r3
 800bed6:	187b      	adds	r3, r7, r1
 800bed8:	785b      	ldrb	r3, [r3, #1]
 800beda:	b21b      	sxth	r3, r3
 800bedc:	4313      	orrs	r3, r2
 800bede:	b21a      	sxth	r2, r3
 800bee0:	2116      	movs	r1, #22
 800bee2:	187b      	adds	r3, r7, r1
 800bee4:	801a      	strh	r2, [r3, #0]
    if (fifo_count < length) {
 800bee6:	187a      	adds	r2, r7, r1
 800bee8:	230e      	movs	r3, #14
 800beea:	18fb      	adds	r3, r7, r3
 800beec:	8812      	ldrh	r2, [r2, #0]
 800beee:	881b      	ldrh	r3, [r3, #0]
 800bef0:	429a      	cmp	r2, r3
 800bef2:	d205      	bcs.n	800bf00 <mpu_read_fifo_stream+0x84>
        more[0] = 0;
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	2200      	movs	r2, #0
 800bef8:	701a      	strb	r2, [r3, #0]
        return -1;
 800befa:	2301      	movs	r3, #1
 800befc:	425b      	negs	r3, r3
 800befe:	e049      	b.n	800bf94 <mpu_read_fifo_stream+0x118>
    }
    if (fifo_count > (st.hw->max_fifo >> 1)) {
 800bf00:	4b26      	ldr	r3, [pc, #152]	; (800bf9c <mpu_read_fifo_stream+0x120>)
 800bf02:	685b      	ldr	r3, [r3, #4]
 800bf04:	885b      	ldrh	r3, [r3, #2]
 800bf06:	085b      	lsrs	r3, r3, #1
 800bf08:	b29b      	uxth	r3, r3
 800bf0a:	2216      	movs	r2, #22
 800bf0c:	18ba      	adds	r2, r7, r2
 800bf0e:	8812      	ldrh	r2, [r2, #0]
 800bf10:	429a      	cmp	r2, r3
 800bf12:	d91b      	bls.n	800bf4c <mpu_read_fifo_stream+0xd0>
        /* FIFO is 50% full, better check overflow bit. */
        if (i2c_read(st.hw->addr, st.reg->int_status, 1, tmp))
 800bf14:	4b21      	ldr	r3, [pc, #132]	; (800bf9c <mpu_read_fifo_stream+0x120>)
 800bf16:	685b      	ldr	r3, [r3, #4]
 800bf18:	7818      	ldrb	r0, [r3, #0]
 800bf1a:	4b20      	ldr	r3, [pc, #128]	; (800bf9c <mpu_read_fifo_stream+0x120>)
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	7cd9      	ldrb	r1, [r3, #19]
 800bf20:	2314      	movs	r3, #20
 800bf22:	18fb      	adds	r3, r7, r3
 800bf24:	2201      	movs	r2, #1
 800bf26:	f7fa fbad 	bl	8006684 <Sensors_I2C_ReadRegister>
 800bf2a:	1e03      	subs	r3, r0, #0
 800bf2c:	d002      	beq.n	800bf34 <mpu_read_fifo_stream+0xb8>
            return -1;
 800bf2e:	2301      	movs	r3, #1
 800bf30:	425b      	negs	r3, r3
 800bf32:	e02f      	b.n	800bf94 <mpu_read_fifo_stream+0x118>
        if (tmp[0] & BIT_FIFO_OVERFLOW) {
 800bf34:	2314      	movs	r3, #20
 800bf36:	18fb      	adds	r3, r7, r3
 800bf38:	781b      	ldrb	r3, [r3, #0]
 800bf3a:	001a      	movs	r2, r3
 800bf3c:	2310      	movs	r3, #16
 800bf3e:	4013      	ands	r3, r2
 800bf40:	d004      	beq.n	800bf4c <mpu_read_fifo_stream+0xd0>
            mpu_reset_fifo();
 800bf42:	f7ff fad3 	bl	800b4ec <mpu_reset_fifo>
            return -2;
 800bf46:	2302      	movs	r3, #2
 800bf48:	425b      	negs	r3, r3
 800bf4a:	e023      	b.n	800bf94 <mpu_read_fifo_stream+0x118>
        }
    }

    if (i2c_read(st.hw->addr, st.reg->fifo_r_w, length, data))
 800bf4c:	4b13      	ldr	r3, [pc, #76]	; (800bf9c <mpu_read_fifo_stream+0x120>)
 800bf4e:	685b      	ldr	r3, [r3, #4]
 800bf50:	7818      	ldrb	r0, [r3, #0]
 800bf52:	4b12      	ldr	r3, [pc, #72]	; (800bf9c <mpu_read_fifo_stream+0x120>)
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	7b59      	ldrb	r1, [r3, #13]
 800bf58:	68bc      	ldr	r4, [r7, #8]
 800bf5a:	230e      	movs	r3, #14
 800bf5c:	18fb      	adds	r3, r7, r3
 800bf5e:	881a      	ldrh	r2, [r3, #0]
 800bf60:	0023      	movs	r3, r4
 800bf62:	f7fa fb8f 	bl	8006684 <Sensors_I2C_ReadRegister>
 800bf66:	1e03      	subs	r3, r0, #0
 800bf68:	d002      	beq.n	800bf70 <mpu_read_fifo_stream+0xf4>
        return -1;
 800bf6a:	2301      	movs	r3, #1
 800bf6c:	425b      	negs	r3, r3
 800bf6e:	e011      	b.n	800bf94 <mpu_read_fifo_stream+0x118>
    more[0] = fifo_count / length - 1;
 800bf70:	2316      	movs	r3, #22
 800bf72:	18fa      	adds	r2, r7, r3
 800bf74:	230e      	movs	r3, #14
 800bf76:	18fb      	adds	r3, r7, r3
 800bf78:	8812      	ldrh	r2, [r2, #0]
 800bf7a:	881b      	ldrh	r3, [r3, #0]
 800bf7c:	0019      	movs	r1, r3
 800bf7e:	0010      	movs	r0, r2
 800bf80:	f7f7 f884 	bl	800308c <__udivsi3>
 800bf84:	0003      	movs	r3, r0
 800bf86:	b29b      	uxth	r3, r3
 800bf88:	b2db      	uxtb	r3, r3
 800bf8a:	3b01      	subs	r3, #1
 800bf8c:	b2da      	uxtb	r2, r3
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	701a      	strb	r2, [r3, #0]
    return 0;
 800bf92:	2300      	movs	r3, #0
}
 800bf94:	0018      	movs	r0, r3
 800bf96:	46bd      	mov	sp, r7
 800bf98:	b007      	add	sp, #28
 800bf9a:	bd90      	pop	{r4, r7, pc}
 800bf9c:	2000002c 	.word	0x2000002c

0800bfa0 <mpu_set_bypass>:
 *  @brief      Set device to bypass mode.
 *  @param[in]  bypass_on   1 to enable bypass mode.
 *  @return     0 if successful.
 */
int mpu_set_bypass(unsigned char bypass_on)
{
 800bfa0:	b590      	push	{r4, r7, lr}
 800bfa2:	b085      	sub	sp, #20
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	0002      	movs	r2, r0
 800bfa8:	1dfb      	adds	r3, r7, #7
 800bfaa:	701a      	strb	r2, [r3, #0]
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
 800bfac:	4b68      	ldr	r3, [pc, #416]	; (800c150 <mpu_set_bypass+0x1b0>)
 800bfae:	7c9b      	ldrb	r3, [r3, #18]
 800bfb0:	1dfa      	adds	r2, r7, #7
 800bfb2:	7812      	ldrb	r2, [r2, #0]
 800bfb4:	429a      	cmp	r2, r3
 800bfb6:	d101      	bne.n	800bfbc <mpu_set_bypass+0x1c>
        return 0;
 800bfb8:	2300      	movs	r3, #0
 800bfba:	e0c5      	b.n	800c148 <mpu_set_bypass+0x1a8>

    if (bypass_on) {
 800bfbc:	1dfb      	adds	r3, r7, #7
 800bfbe:	781b      	ldrb	r3, [r3, #0]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d057      	beq.n	800c074 <mpu_set_bypass+0xd4>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 800bfc4:	4b62      	ldr	r3, [pc, #392]	; (800c150 <mpu_set_bypass+0x1b0>)
 800bfc6:	685b      	ldr	r3, [r3, #4]
 800bfc8:	7818      	ldrb	r0, [r3, #0]
 800bfca:	4b61      	ldr	r3, [pc, #388]	; (800c150 <mpu_set_bypass+0x1b0>)
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	7919      	ldrb	r1, [r3, #4]
 800bfd0:	230f      	movs	r3, #15
 800bfd2:	18fb      	adds	r3, r7, r3
 800bfd4:	2201      	movs	r2, #1
 800bfd6:	f7fa fb55 	bl	8006684 <Sensors_I2C_ReadRegister>
 800bfda:	1e03      	subs	r3, r0, #0
 800bfdc:	d002      	beq.n	800bfe4 <mpu_set_bypass+0x44>
            return -1;
 800bfde:	2301      	movs	r3, #1
 800bfe0:	425b      	negs	r3, r3
 800bfe2:	e0b1      	b.n	800c148 <mpu_set_bypass+0x1a8>
        tmp &= ~BIT_AUX_IF_EN;
 800bfe4:	240f      	movs	r4, #15
 800bfe6:	193b      	adds	r3, r7, r4
 800bfe8:	781b      	ldrb	r3, [r3, #0]
 800bfea:	2220      	movs	r2, #32
 800bfec:	4393      	bics	r3, r2
 800bfee:	b2da      	uxtb	r2, r3
 800bff0:	193b      	adds	r3, r7, r4
 800bff2:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 800bff4:	4b56      	ldr	r3, [pc, #344]	; (800c150 <mpu_set_bypass+0x1b0>)
 800bff6:	685b      	ldr	r3, [r3, #4]
 800bff8:	7818      	ldrb	r0, [r3, #0]
 800bffa:	4b55      	ldr	r3, [pc, #340]	; (800c150 <mpu_set_bypass+0x1b0>)
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	7919      	ldrb	r1, [r3, #4]
 800c000:	193b      	adds	r3, r7, r4
 800c002:	2201      	movs	r2, #1
 800c004:	f7fa fae2 	bl	80065cc <Sensors_I2C_WriteRegister>
 800c008:	1e03      	subs	r3, r0, #0
 800c00a:	d002      	beq.n	800c012 <mpu_set_bypass+0x72>
            return -1;
 800c00c:	2301      	movs	r3, #1
 800c00e:	425b      	negs	r3, r3
 800c010:	e09a      	b.n	800c148 <mpu_set_bypass+0x1a8>
        delay_ms(3);
 800c012:	2003      	movs	r0, #3
 800c014:	f7fb fb5e 	bl	80076d4 <HAL_Delay>
        tmp = BIT_BYPASS_EN;
 800c018:	210f      	movs	r1, #15
 800c01a:	187b      	adds	r3, r7, r1
 800c01c:	2202      	movs	r2, #2
 800c01e:	701a      	strb	r2, [r3, #0]
        if (st.chip_cfg.active_low_int)
 800c020:	4b4b      	ldr	r3, [pc, #300]	; (800c150 <mpu_set_bypass+0x1b0>)
 800c022:	2222      	movs	r2, #34	; 0x22
 800c024:	5c9b      	ldrb	r3, [r3, r2]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d007      	beq.n	800c03a <mpu_set_bypass+0x9a>
            tmp |= BIT_ACTL;
 800c02a:	187b      	adds	r3, r7, r1
 800c02c:	781b      	ldrb	r3, [r3, #0]
 800c02e:	2280      	movs	r2, #128	; 0x80
 800c030:	4252      	negs	r2, r2
 800c032:	4313      	orrs	r3, r2
 800c034:	b2da      	uxtb	r2, r3
 800c036:	187b      	adds	r3, r7, r1
 800c038:	701a      	strb	r2, [r3, #0]
        if (st.chip_cfg.latched_int)
 800c03a:	4b45      	ldr	r3, [pc, #276]	; (800c150 <mpu_set_bypass+0x1b0>)
 800c03c:	2223      	movs	r2, #35	; 0x23
 800c03e:	5c9b      	ldrb	r3, [r3, r2]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d007      	beq.n	800c054 <mpu_set_bypass+0xb4>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 800c044:	210f      	movs	r1, #15
 800c046:	187b      	adds	r3, r7, r1
 800c048:	781b      	ldrb	r3, [r3, #0]
 800c04a:	2230      	movs	r2, #48	; 0x30
 800c04c:	4313      	orrs	r3, r2
 800c04e:	b2da      	uxtb	r2, r3
 800c050:	187b      	adds	r3, r7, r1
 800c052:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 800c054:	4b3e      	ldr	r3, [pc, #248]	; (800c150 <mpu_set_bypass+0x1b0>)
 800c056:	685b      	ldr	r3, [r3, #4]
 800c058:	7818      	ldrb	r0, [r3, #0]
 800c05a:	4b3d      	ldr	r3, [pc, #244]	; (800c150 <mpu_set_bypass+0x1b0>)
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	7dd9      	ldrb	r1, [r3, #23]
 800c060:	230f      	movs	r3, #15
 800c062:	18fb      	adds	r3, r7, r3
 800c064:	2201      	movs	r2, #1
 800c066:	f7fa fab1 	bl	80065cc <Sensors_I2C_WriteRegister>
 800c06a:	1e03      	subs	r3, r0, #0
 800c06c:	d067      	beq.n	800c13e <mpu_set_bypass+0x19e>
            return -1;
 800c06e:	2301      	movs	r3, #1
 800c070:	425b      	negs	r3, r3
 800c072:	e069      	b.n	800c148 <mpu_set_bypass+0x1a8>
    } else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 800c074:	4b36      	ldr	r3, [pc, #216]	; (800c150 <mpu_set_bypass+0x1b0>)
 800c076:	685b      	ldr	r3, [r3, #4]
 800c078:	7818      	ldrb	r0, [r3, #0]
 800c07a:	4b35      	ldr	r3, [pc, #212]	; (800c150 <mpu_set_bypass+0x1b0>)
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	7919      	ldrb	r1, [r3, #4]
 800c080:	230f      	movs	r3, #15
 800c082:	18fb      	adds	r3, r7, r3
 800c084:	2201      	movs	r2, #1
 800c086:	f7fa fafd 	bl	8006684 <Sensors_I2C_ReadRegister>
 800c08a:	1e03      	subs	r3, r0, #0
 800c08c:	d002      	beq.n	800c094 <mpu_set_bypass+0xf4>
            return -1;
 800c08e:	2301      	movs	r3, #1
 800c090:	425b      	negs	r3, r3
 800c092:	e059      	b.n	800c148 <mpu_set_bypass+0x1a8>
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 800c094:	4b2e      	ldr	r3, [pc, #184]	; (800c150 <mpu_set_bypass+0x1b0>)
 800c096:	7a9b      	ldrb	r3, [r3, #10]
 800c098:	001a      	movs	r2, r3
 800c09a:	2301      	movs	r3, #1
 800c09c:	4013      	ands	r3, r2
 800c09e:	d008      	beq.n	800c0b2 <mpu_set_bypass+0x112>
            tmp |= BIT_AUX_IF_EN;
 800c0a0:	210f      	movs	r1, #15
 800c0a2:	187b      	adds	r3, r7, r1
 800c0a4:	781b      	ldrb	r3, [r3, #0]
 800c0a6:	2220      	movs	r2, #32
 800c0a8:	4313      	orrs	r3, r2
 800c0aa:	b2da      	uxtb	r2, r3
 800c0ac:	187b      	adds	r3, r7, r1
 800c0ae:	701a      	strb	r2, [r3, #0]
 800c0b0:	e007      	b.n	800c0c2 <mpu_set_bypass+0x122>
        else
            tmp &= ~BIT_AUX_IF_EN;
 800c0b2:	210f      	movs	r1, #15
 800c0b4:	187b      	adds	r3, r7, r1
 800c0b6:	781b      	ldrb	r3, [r3, #0]
 800c0b8:	2220      	movs	r2, #32
 800c0ba:	4393      	bics	r3, r2
 800c0bc:	b2da      	uxtb	r2, r3
 800c0be:	187b      	adds	r3, r7, r1
 800c0c0:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 800c0c2:	4b23      	ldr	r3, [pc, #140]	; (800c150 <mpu_set_bypass+0x1b0>)
 800c0c4:	685b      	ldr	r3, [r3, #4]
 800c0c6:	7818      	ldrb	r0, [r3, #0]
 800c0c8:	4b21      	ldr	r3, [pc, #132]	; (800c150 <mpu_set_bypass+0x1b0>)
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	7919      	ldrb	r1, [r3, #4]
 800c0ce:	230f      	movs	r3, #15
 800c0d0:	18fb      	adds	r3, r7, r3
 800c0d2:	2201      	movs	r2, #1
 800c0d4:	f7fa fa7a 	bl	80065cc <Sensors_I2C_WriteRegister>
 800c0d8:	1e03      	subs	r3, r0, #0
 800c0da:	d002      	beq.n	800c0e2 <mpu_set_bypass+0x142>
            return -1;
 800c0dc:	2301      	movs	r3, #1
 800c0de:	425b      	negs	r3, r3
 800c0e0:	e032      	b.n	800c148 <mpu_set_bypass+0x1a8>
        delay_ms(3);
 800c0e2:	2003      	movs	r0, #3
 800c0e4:	f7fb faf6 	bl	80076d4 <HAL_Delay>
        if (st.chip_cfg.active_low_int)
 800c0e8:	4b19      	ldr	r3, [pc, #100]	; (800c150 <mpu_set_bypass+0x1b0>)
 800c0ea:	2222      	movs	r2, #34	; 0x22
 800c0ec:	5c9b      	ldrb	r3, [r3, r2]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d004      	beq.n	800c0fc <mpu_set_bypass+0x15c>
            tmp = BIT_ACTL;
 800c0f2:	230f      	movs	r3, #15
 800c0f4:	18fb      	adds	r3, r7, r3
 800c0f6:	2280      	movs	r2, #128	; 0x80
 800c0f8:	701a      	strb	r2, [r3, #0]
 800c0fa:	e003      	b.n	800c104 <mpu_set_bypass+0x164>
        else
            tmp = 0;
 800c0fc:	230f      	movs	r3, #15
 800c0fe:	18fb      	adds	r3, r7, r3
 800c100:	2200      	movs	r2, #0
 800c102:	701a      	strb	r2, [r3, #0]
        if (st.chip_cfg.latched_int)
 800c104:	4b12      	ldr	r3, [pc, #72]	; (800c150 <mpu_set_bypass+0x1b0>)
 800c106:	2223      	movs	r2, #35	; 0x23
 800c108:	5c9b      	ldrb	r3, [r3, r2]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d007      	beq.n	800c11e <mpu_set_bypass+0x17e>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 800c10e:	210f      	movs	r1, #15
 800c110:	187b      	adds	r3, r7, r1
 800c112:	781b      	ldrb	r3, [r3, #0]
 800c114:	2230      	movs	r2, #48	; 0x30
 800c116:	4313      	orrs	r3, r2
 800c118:	b2da      	uxtb	r2, r3
 800c11a:	187b      	adds	r3, r7, r1
 800c11c:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 800c11e:	4b0c      	ldr	r3, [pc, #48]	; (800c150 <mpu_set_bypass+0x1b0>)
 800c120:	685b      	ldr	r3, [r3, #4]
 800c122:	7818      	ldrb	r0, [r3, #0]
 800c124:	4b0a      	ldr	r3, [pc, #40]	; (800c150 <mpu_set_bypass+0x1b0>)
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	7dd9      	ldrb	r1, [r3, #23]
 800c12a:	230f      	movs	r3, #15
 800c12c:	18fb      	adds	r3, r7, r3
 800c12e:	2201      	movs	r2, #1
 800c130:	f7fa fa4c 	bl	80065cc <Sensors_I2C_WriteRegister>
 800c134:	1e03      	subs	r3, r0, #0
 800c136:	d002      	beq.n	800c13e <mpu_set_bypass+0x19e>
            return -1;
 800c138:	2301      	movs	r3, #1
 800c13a:	425b      	negs	r3, r3
 800c13c:	e004      	b.n	800c148 <mpu_set_bypass+0x1a8>
    }
    st.chip_cfg.bypass_mode = bypass_on;
 800c13e:	4b04      	ldr	r3, [pc, #16]	; (800c150 <mpu_set_bypass+0x1b0>)
 800c140:	1dfa      	adds	r2, r7, #7
 800c142:	7812      	ldrb	r2, [r2, #0]
 800c144:	749a      	strb	r2, [r3, #18]
    return 0;
 800c146:	2300      	movs	r3, #0
}
 800c148:	0018      	movs	r0, r3
 800c14a:	46bd      	mov	sp, r7
 800c14c:	b005      	add	sp, #20
 800c14e:	bd90      	pop	{r4, r7, pc}
 800c150:	2000002c 	.word	0x2000002c

0800c154 <mpu_set_int_latched>:
 *  Any MPU register will clear the interrupt.
 *  @param[in]  enable  1 to enable, 0 to disable.
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
 800c154:	b580      	push	{r7, lr}
 800c156:	b084      	sub	sp, #16
 800c158:	af00      	add	r7, sp, #0
 800c15a:	0002      	movs	r2, r0
 800c15c:	1dfb      	adds	r3, r7, #7
 800c15e:	701a      	strb	r2, [r3, #0]
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
 800c160:	4b24      	ldr	r3, [pc, #144]	; (800c1f4 <mpu_set_int_latched+0xa0>)
 800c162:	2223      	movs	r2, #35	; 0x23
 800c164:	5c9b      	ldrb	r3, [r3, r2]
 800c166:	1dfa      	adds	r2, r7, #7
 800c168:	7812      	ldrb	r2, [r2, #0]
 800c16a:	429a      	cmp	r2, r3
 800c16c:	d101      	bne.n	800c172 <mpu_set_int_latched+0x1e>
        return 0;
 800c16e:	2300      	movs	r3, #0
 800c170:	e03c      	b.n	800c1ec <mpu_set_int_latched+0x98>

    if (enable)
 800c172:	1dfb      	adds	r3, r7, #7
 800c174:	781b      	ldrb	r3, [r3, #0]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d004      	beq.n	800c184 <mpu_set_int_latched+0x30>
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
 800c17a:	230f      	movs	r3, #15
 800c17c:	18fb      	adds	r3, r7, r3
 800c17e:	2230      	movs	r2, #48	; 0x30
 800c180:	701a      	strb	r2, [r3, #0]
 800c182:	e003      	b.n	800c18c <mpu_set_int_latched+0x38>
    else
        tmp = 0;
 800c184:	230f      	movs	r3, #15
 800c186:	18fb      	adds	r3, r7, r3
 800c188:	2200      	movs	r2, #0
 800c18a:	701a      	strb	r2, [r3, #0]
    if (st.chip_cfg.bypass_mode)
 800c18c:	4b19      	ldr	r3, [pc, #100]	; (800c1f4 <mpu_set_int_latched+0xa0>)
 800c18e:	7c9b      	ldrb	r3, [r3, #18]
 800c190:	2b00      	cmp	r3, #0
 800c192:	d007      	beq.n	800c1a4 <mpu_set_int_latched+0x50>
        tmp |= BIT_BYPASS_EN;
 800c194:	210f      	movs	r1, #15
 800c196:	187b      	adds	r3, r7, r1
 800c198:	781b      	ldrb	r3, [r3, #0]
 800c19a:	2202      	movs	r2, #2
 800c19c:	4313      	orrs	r3, r2
 800c19e:	b2da      	uxtb	r2, r3
 800c1a0:	187b      	adds	r3, r7, r1
 800c1a2:	701a      	strb	r2, [r3, #0]
    if (st.chip_cfg.active_low_int)
 800c1a4:	4b13      	ldr	r3, [pc, #76]	; (800c1f4 <mpu_set_int_latched+0xa0>)
 800c1a6:	2222      	movs	r2, #34	; 0x22
 800c1a8:	5c9b      	ldrb	r3, [r3, r2]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d008      	beq.n	800c1c0 <mpu_set_int_latched+0x6c>
        tmp |= BIT_ACTL;
 800c1ae:	210f      	movs	r1, #15
 800c1b0:	187b      	adds	r3, r7, r1
 800c1b2:	781b      	ldrb	r3, [r3, #0]
 800c1b4:	2280      	movs	r2, #128	; 0x80
 800c1b6:	4252      	negs	r2, r2
 800c1b8:	4313      	orrs	r3, r2
 800c1ba:	b2da      	uxtb	r2, r3
 800c1bc:	187b      	adds	r3, r7, r1
 800c1be:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 800c1c0:	4b0c      	ldr	r3, [pc, #48]	; (800c1f4 <mpu_set_int_latched+0xa0>)
 800c1c2:	685b      	ldr	r3, [r3, #4]
 800c1c4:	7818      	ldrb	r0, [r3, #0]
 800c1c6:	4b0b      	ldr	r3, [pc, #44]	; (800c1f4 <mpu_set_int_latched+0xa0>)
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	7dd9      	ldrb	r1, [r3, #23]
 800c1cc:	230f      	movs	r3, #15
 800c1ce:	18fb      	adds	r3, r7, r3
 800c1d0:	2201      	movs	r2, #1
 800c1d2:	f7fa f9fb 	bl	80065cc <Sensors_I2C_WriteRegister>
 800c1d6:	1e03      	subs	r3, r0, #0
 800c1d8:	d002      	beq.n	800c1e0 <mpu_set_int_latched+0x8c>
        return -1;
 800c1da:	2301      	movs	r3, #1
 800c1dc:	425b      	negs	r3, r3
 800c1de:	e005      	b.n	800c1ec <mpu_set_int_latched+0x98>
    st.chip_cfg.latched_int = enable;
 800c1e0:	4b04      	ldr	r3, [pc, #16]	; (800c1f4 <mpu_set_int_latched+0xa0>)
 800c1e2:	1dfa      	adds	r2, r7, #7
 800c1e4:	2123      	movs	r1, #35	; 0x23
 800c1e6:	7812      	ldrb	r2, [r2, #0]
 800c1e8:	545a      	strb	r2, [r3, r1]
    return 0;
 800c1ea:	2300      	movs	r3, #0
}
 800c1ec:	0018      	movs	r0, r3
 800c1ee:	46bd      	mov	sp, r7
 800c1f0:	b004      	add	sp, #16
 800c1f2:	bd80      	pop	{r7, pc}
 800c1f4:	2000002c 	.word	0x2000002c

0800c1f8 <get_accel_prod_shift>:

#ifdef MPU6050
static int get_accel_prod_shift(float *st_shift)
{
 800c1f8:	b590      	push	{r4, r7, lr}
 800c1fa:	b087      	sub	sp, #28
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	6078      	str	r0, [r7, #4]
    unsigned char tmp[4], shift_code[3], ii;

    if (i2c_read(st.hw->addr, 0x0D, 4, tmp))
 800c200:	4b49      	ldr	r3, [pc, #292]	; (800c328 <get_accel_prod_shift+0x130>)
 800c202:	685b      	ldr	r3, [r3, #4]
 800c204:	7818      	ldrb	r0, [r3, #0]
 800c206:	2310      	movs	r3, #16
 800c208:	18fb      	adds	r3, r7, r3
 800c20a:	2204      	movs	r2, #4
 800c20c:	210d      	movs	r1, #13
 800c20e:	f7fa fa39 	bl	8006684 <Sensors_I2C_ReadRegister>
 800c212:	1e03      	subs	r3, r0, #0
 800c214:	d001      	beq.n	800c21a <get_accel_prod_shift+0x22>
        return 0x07;
 800c216:	2307      	movs	r3, #7
 800c218:	e082      	b.n	800c320 <get_accel_prod_shift+0x128>

    shift_code[0] = ((tmp[0] & 0xE0) >> 3) | ((tmp[3] & 0x30) >> 4);
 800c21a:	2010      	movs	r0, #16
 800c21c:	183b      	adds	r3, r7, r0
 800c21e:	781b      	ldrb	r3, [r3, #0]
 800c220:	10db      	asrs	r3, r3, #3
 800c222:	b25b      	sxtb	r3, r3
 800c224:	221c      	movs	r2, #28
 800c226:	4013      	ands	r3, r2
 800c228:	b25a      	sxtb	r2, r3
 800c22a:	183b      	adds	r3, r7, r0
 800c22c:	78db      	ldrb	r3, [r3, #3]
 800c22e:	111b      	asrs	r3, r3, #4
 800c230:	b25b      	sxtb	r3, r3
 800c232:	2103      	movs	r1, #3
 800c234:	400b      	ands	r3, r1
 800c236:	b25b      	sxtb	r3, r3
 800c238:	4313      	orrs	r3, r2
 800c23a:	b25b      	sxtb	r3, r3
 800c23c:	b2da      	uxtb	r2, r3
 800c23e:	240c      	movs	r4, #12
 800c240:	193b      	adds	r3, r7, r4
 800c242:	701a      	strb	r2, [r3, #0]
    shift_code[1] = ((tmp[1] & 0xE0) >> 3) | ((tmp[3] & 0x0C) >> 2);
 800c244:	183b      	adds	r3, r7, r0
 800c246:	785b      	ldrb	r3, [r3, #1]
 800c248:	10db      	asrs	r3, r3, #3
 800c24a:	b25b      	sxtb	r3, r3
 800c24c:	221c      	movs	r2, #28
 800c24e:	4013      	ands	r3, r2
 800c250:	b25a      	sxtb	r2, r3
 800c252:	183b      	adds	r3, r7, r0
 800c254:	78db      	ldrb	r3, [r3, #3]
 800c256:	109b      	asrs	r3, r3, #2
 800c258:	b25b      	sxtb	r3, r3
 800c25a:	2103      	movs	r1, #3
 800c25c:	400b      	ands	r3, r1
 800c25e:	b25b      	sxtb	r3, r3
 800c260:	4313      	orrs	r3, r2
 800c262:	b25b      	sxtb	r3, r3
 800c264:	b2da      	uxtb	r2, r3
 800c266:	193b      	adds	r3, r7, r4
 800c268:	705a      	strb	r2, [r3, #1]
    shift_code[2] = ((tmp[2] & 0xE0) >> 3) | (tmp[3] & 0x03);
 800c26a:	183b      	adds	r3, r7, r0
 800c26c:	789b      	ldrb	r3, [r3, #2]
 800c26e:	10db      	asrs	r3, r3, #3
 800c270:	b25b      	sxtb	r3, r3
 800c272:	221c      	movs	r2, #28
 800c274:	4013      	ands	r3, r2
 800c276:	b25a      	sxtb	r2, r3
 800c278:	183b      	adds	r3, r7, r0
 800c27a:	78db      	ldrb	r3, [r3, #3]
 800c27c:	b25b      	sxtb	r3, r3
 800c27e:	2103      	movs	r1, #3
 800c280:	400b      	ands	r3, r1
 800c282:	b25b      	sxtb	r3, r3
 800c284:	4313      	orrs	r3, r2
 800c286:	b25b      	sxtb	r3, r3
 800c288:	b2da      	uxtb	r2, r3
 800c28a:	193b      	adds	r3, r7, r4
 800c28c:	709a      	strb	r2, [r3, #2]
    for (ii = 0; ii < 3; ii++) {
 800c28e:	2317      	movs	r3, #23
 800c290:	18fb      	adds	r3, r7, r3
 800c292:	2200      	movs	r2, #0
 800c294:	701a      	strb	r2, [r3, #0]
 800c296:	e03d      	b.n	800c314 <get_accel_prod_shift+0x11c>
        if (!shift_code[ii]) {
 800c298:	2117      	movs	r1, #23
 800c29a:	187b      	adds	r3, r7, r1
 800c29c:	781b      	ldrb	r3, [r3, #0]
 800c29e:	220c      	movs	r2, #12
 800c2a0:	18ba      	adds	r2, r7, r2
 800c2a2:	5cd3      	ldrb	r3, [r2, r3]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d107      	bne.n	800c2b8 <get_accel_prod_shift+0xc0>
            st_shift[ii] = 0.f;
 800c2a8:	187b      	adds	r3, r7, r1
 800c2aa:	781b      	ldrb	r3, [r3, #0]
 800c2ac:	009b      	lsls	r3, r3, #2
 800c2ae:	687a      	ldr	r2, [r7, #4]
 800c2b0:	18d3      	adds	r3, r2, r3
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	601a      	str	r2, [r3, #0]
            continue;
 800c2b6:	e027      	b.n	800c308 <get_accel_prod_shift+0x110>
        }
        /* Equivalent to..
         * st_shift[ii] = 0.34f * powf(0.92f/0.34f, (shift_code[ii]-1) / 30.f)
         */
        st_shift[ii] = 0.34f;
 800c2b8:	2317      	movs	r3, #23
 800c2ba:	18fb      	adds	r3, r7, r3
 800c2bc:	781b      	ldrb	r3, [r3, #0]
 800c2be:	009b      	lsls	r3, r3, #2
 800c2c0:	687a      	ldr	r2, [r7, #4]
 800c2c2:	18d3      	adds	r3, r2, r3
 800c2c4:	4a19      	ldr	r2, [pc, #100]	; (800c32c <get_accel_prod_shift+0x134>)
 800c2c6:	601a      	str	r2, [r3, #0]
        while (--shift_code[ii])
 800c2c8:	e010      	b.n	800c2ec <get_accel_prod_shift+0xf4>
            st_shift[ii] *= 1.034f;
 800c2ca:	2117      	movs	r1, #23
 800c2cc:	187b      	adds	r3, r7, r1
 800c2ce:	781b      	ldrb	r3, [r3, #0]
 800c2d0:	009b      	lsls	r3, r3, #2
 800c2d2:	687a      	ldr	r2, [r7, #4]
 800c2d4:	18d3      	adds	r3, r2, r3
 800c2d6:	6818      	ldr	r0, [r3, #0]
 800c2d8:	187b      	adds	r3, r7, r1
 800c2da:	781b      	ldrb	r3, [r3, #0]
 800c2dc:	009b      	lsls	r3, r3, #2
 800c2de:	687a      	ldr	r2, [r7, #4]
 800c2e0:	18d4      	adds	r4, r2, r3
 800c2e2:	4913      	ldr	r1, [pc, #76]	; (800c330 <get_accel_prod_shift+0x138>)
 800c2e4:	f7f7 fd8e 	bl	8003e04 <__aeabi_fmul>
 800c2e8:	1c03      	adds	r3, r0, #0
 800c2ea:	6023      	str	r3, [r4, #0]
        while (--shift_code[ii])
 800c2ec:	2317      	movs	r3, #23
 800c2ee:	18fb      	adds	r3, r7, r3
 800c2f0:	781b      	ldrb	r3, [r3, #0]
 800c2f2:	200c      	movs	r0, #12
 800c2f4:	183a      	adds	r2, r7, r0
 800c2f6:	5cd2      	ldrb	r2, [r2, r3]
 800c2f8:	3a01      	subs	r2, #1
 800c2fa:	b2d1      	uxtb	r1, r2
 800c2fc:	183a      	adds	r2, r7, r0
 800c2fe:	54d1      	strb	r1, [r2, r3]
 800c300:	183a      	adds	r2, r7, r0
 800c302:	5cd3      	ldrb	r3, [r2, r3]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d1e0      	bne.n	800c2ca <get_accel_prod_shift+0xd2>
    for (ii = 0; ii < 3; ii++) {
 800c308:	2117      	movs	r1, #23
 800c30a:	187b      	adds	r3, r7, r1
 800c30c:	781a      	ldrb	r2, [r3, #0]
 800c30e:	187b      	adds	r3, r7, r1
 800c310:	3201      	adds	r2, #1
 800c312:	701a      	strb	r2, [r3, #0]
 800c314:	2317      	movs	r3, #23
 800c316:	18fb      	adds	r3, r7, r3
 800c318:	781b      	ldrb	r3, [r3, #0]
 800c31a:	2b02      	cmp	r3, #2
 800c31c:	d9bc      	bls.n	800c298 <get_accel_prod_shift+0xa0>
    }
    return 0;
 800c31e:	2300      	movs	r3, #0
}
 800c320:	0018      	movs	r0, r3
 800c322:	46bd      	mov	sp, r7
 800c324:	b007      	add	sp, #28
 800c326:	bd90      	pop	{r4, r7, pc}
 800c328:	2000002c 	.word	0x2000002c
 800c32c:	3eae147b 	.word	0x3eae147b
 800c330:	3f845a1d 	.word	0x3f845a1d

0800c334 <accel_self_test>:

static int accel_self_test(long *bias_regular, long *bias_st)
{
 800c334:	b590      	push	{r4, r7, lr}
 800c336:	b08b      	sub	sp, #44	; 0x2c
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
 800c33c:	6039      	str	r1, [r7, #0]
    int jj, result = 0;
 800c33e:	2300      	movs	r3, #0
 800c340:	623b      	str	r3, [r7, #32]
    float st_shift[3], st_shift_cust, st_shift_var;

    get_accel_prod_shift(st_shift);
 800c342:	230c      	movs	r3, #12
 800c344:	18fb      	adds	r3, r7, r3
 800c346:	0018      	movs	r0, r3
 800c348:	f7ff ff56 	bl	800c1f8 <get_accel_prod_shift>
    for(jj = 0; jj < 3; jj++) {
 800c34c:	2300      	movs	r3, #0
 800c34e:	627b      	str	r3, [r7, #36]	; 0x24
 800c350:	e05d      	b.n	800c40e <accel_self_test+0xda>
        st_shift_cust = labs(bias_regular[jj] - bias_st[jj]) / 65536.f;
 800c352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c354:	009b      	lsls	r3, r3, #2
 800c356:	687a      	ldr	r2, [r7, #4]
 800c358:	18d3      	adds	r3, r2, r3
 800c35a:	681a      	ldr	r2, [r3, #0]
 800c35c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c35e:	009b      	lsls	r3, r3, #2
 800c360:	6839      	ldr	r1, [r7, #0]
 800c362:	18cb      	adds	r3, r1, r3
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	1ad3      	subs	r3, r2, r3
 800c368:	17da      	asrs	r2, r3, #31
 800c36a:	189b      	adds	r3, r3, r2
 800c36c:	4053      	eors	r3, r2
 800c36e:	0018      	movs	r0, r3
 800c370:	f7f8 f86c 	bl	800444c <__aeabi_i2f>
 800c374:	1c03      	adds	r3, r0, #0
 800c376:	218f      	movs	r1, #143	; 0x8f
 800c378:	05c9      	lsls	r1, r1, #23
 800c37a:	1c18      	adds	r0, r3, #0
 800c37c:	f7f7 fb78 	bl	8003a70 <__aeabi_fdiv>
 800c380:	1c03      	adds	r3, r0, #0
 800c382:	61fb      	str	r3, [r7, #28]
        if (st_shift[jj]) {
 800c384:	240c      	movs	r4, #12
 800c386:	193b      	adds	r3, r7, r4
 800c388:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c38a:	0092      	lsls	r2, r2, #2
 800c38c:	58d3      	ldr	r3, [r2, r3]
 800c38e:	2100      	movs	r1, #0
 800c390:	1c18      	adds	r0, r3, #0
 800c392:	f7f7 f83b 	bl	800340c <__aeabi_fcmpeq>
 800c396:	1e03      	subs	r3, r0, #0
 800c398:	d121      	bne.n	800c3de <accel_self_test+0xaa>
            st_shift_var = st_shift_cust / st_shift[jj] - 1.f;
 800c39a:	193b      	adds	r3, r7, r4
 800c39c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c39e:	0092      	lsls	r2, r2, #2
 800c3a0:	58d3      	ldr	r3, [r2, r3]
 800c3a2:	1c19      	adds	r1, r3, #0
 800c3a4:	69f8      	ldr	r0, [r7, #28]
 800c3a6:	f7f7 fb63 	bl	8003a70 <__aeabi_fdiv>
 800c3aa:	1c03      	adds	r3, r0, #0
 800c3ac:	21fe      	movs	r1, #254	; 0xfe
 800c3ae:	0589      	lsls	r1, r1, #22
 800c3b0:	1c18      	adds	r0, r3, #0
 800c3b2:	f7f7 fe75 	bl	80040a0 <__aeabi_fsub>
 800c3b6:	1c03      	adds	r3, r0, #0
 800c3b8:	61bb      	str	r3, [r7, #24]
            if (fabs(st_shift_var) > test.max_accel_var)
 800c3ba:	69bb      	ldr	r3, [r7, #24]
 800c3bc:	005b      	lsls	r3, r3, #1
 800c3be:	085b      	lsrs	r3, r3, #1
 800c3c0:	4a17      	ldr	r2, [pc, #92]	; (800c420 <accel_self_test+0xec>)
 800c3c2:	1c11      	adds	r1, r2, #0
 800c3c4:	1c18      	adds	r0, r3, #0
 800c3c6:	f7f7 f83b 	bl	8003440 <__aeabi_fcmpgt>
 800c3ca:	1e03      	subs	r3, r0, #0
 800c3cc:	d01c      	beq.n	800c408 <accel_self_test+0xd4>
                result |= 1 << jj;
 800c3ce:	2201      	movs	r2, #1
 800c3d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3d2:	409a      	lsls	r2, r3
 800c3d4:	0013      	movs	r3, r2
 800c3d6:	6a3a      	ldr	r2, [r7, #32]
 800c3d8:	4313      	orrs	r3, r2
 800c3da:	623b      	str	r3, [r7, #32]
 800c3dc:	e014      	b.n	800c408 <accel_self_test+0xd4>
        } else if ((st_shift_cust < test.min_g) ||
 800c3de:	4b11      	ldr	r3, [pc, #68]	; (800c424 <accel_self_test+0xf0>)
 800c3e0:	1c19      	adds	r1, r3, #0
 800c3e2:	69f8      	ldr	r0, [r7, #28]
 800c3e4:	f7f7 f818 	bl	8003418 <__aeabi_fcmplt>
 800c3e8:	1e03      	subs	r3, r0, #0
 800c3ea:	d106      	bne.n	800c3fa <accel_self_test+0xc6>
            (st_shift_cust > test.max_g))
 800c3ec:	4b0e      	ldr	r3, [pc, #56]	; (800c428 <accel_self_test+0xf4>)
        } else if ((st_shift_cust < test.min_g) ||
 800c3ee:	1c19      	adds	r1, r3, #0
 800c3f0:	69f8      	ldr	r0, [r7, #28]
 800c3f2:	f7f7 f825 	bl	8003440 <__aeabi_fcmpgt>
 800c3f6:	1e03      	subs	r3, r0, #0
 800c3f8:	d006      	beq.n	800c408 <accel_self_test+0xd4>
            result |= 1 << jj;
 800c3fa:	2201      	movs	r2, #1
 800c3fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3fe:	409a      	lsls	r2, r3
 800c400:	0013      	movs	r3, r2
 800c402:	6a3a      	ldr	r2, [r7, #32]
 800c404:	4313      	orrs	r3, r2
 800c406:	623b      	str	r3, [r7, #32]
    for(jj = 0; jj < 3; jj++) {
 800c408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c40a:	3301      	adds	r3, #1
 800c40c:	627b      	str	r3, [r7, #36]	; 0x24
 800c40e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c410:	2b02      	cmp	r3, #2
 800c412:	dd9e      	ble.n	800c352 <accel_self_test+0x1e>
    }

    return result;
 800c414:	6a3b      	ldr	r3, [r7, #32]
}
 800c416:	0018      	movs	r0, r3
 800c418:	46bd      	mov	sp, r7
 800c41a:	b00b      	add	sp, #44	; 0x2c
 800c41c:	bd90      	pop	{r4, r7, pc}
 800c41e:	46c0      	nop			; (mov r8, r8)
 800c420:	3e0f5c29 	.word	0x3e0f5c29
 800c424:	3e99999a 	.word	0x3e99999a
 800c428:	3f733333 	.word	0x3f733333

0800c42c <gyro_self_test>:

static int gyro_self_test(long *bias_regular, long *bias_st)
{
 800c42c:	b580      	push	{r7, lr}
 800c42e:	b088      	sub	sp, #32
 800c430:	af00      	add	r7, sp, #0
 800c432:	6078      	str	r0, [r7, #4]
 800c434:	6039      	str	r1, [r7, #0]
    int jj, result = 0;
 800c436:	2300      	movs	r3, #0
 800c438:	61bb      	str	r3, [r7, #24]
    unsigned char tmp[3];
    float st_shift, st_shift_cust, st_shift_var;

    if (i2c_read(st.hw->addr, 0x0D, 3, tmp))
 800c43a:	4b54      	ldr	r3, [pc, #336]	; (800c58c <gyro_self_test+0x160>)
 800c43c:	685b      	ldr	r3, [r3, #4]
 800c43e:	7818      	ldrb	r0, [r3, #0]
 800c440:	2308      	movs	r3, #8
 800c442:	18fb      	adds	r3, r7, r3
 800c444:	2203      	movs	r2, #3
 800c446:	210d      	movs	r1, #13
 800c448:	f7fa f91c 	bl	8006684 <Sensors_I2C_ReadRegister>
 800c44c:	1e03      	subs	r3, r0, #0
 800c44e:	d001      	beq.n	800c454 <gyro_self_test+0x28>
        return 0x07;
 800c450:	2307      	movs	r3, #7
 800c452:	e097      	b.n	800c584 <gyro_self_test+0x158>

    tmp[0] &= 0x1F;
 800c454:	2108      	movs	r1, #8
 800c456:	187b      	adds	r3, r7, r1
 800c458:	781b      	ldrb	r3, [r3, #0]
 800c45a:	221f      	movs	r2, #31
 800c45c:	4013      	ands	r3, r2
 800c45e:	b2da      	uxtb	r2, r3
 800c460:	187b      	adds	r3, r7, r1
 800c462:	701a      	strb	r2, [r3, #0]
    tmp[1] &= 0x1F;
 800c464:	187b      	adds	r3, r7, r1
 800c466:	785b      	ldrb	r3, [r3, #1]
 800c468:	221f      	movs	r2, #31
 800c46a:	4013      	ands	r3, r2
 800c46c:	b2da      	uxtb	r2, r3
 800c46e:	187b      	adds	r3, r7, r1
 800c470:	705a      	strb	r2, [r3, #1]
    tmp[2] &= 0x1F;
 800c472:	187b      	adds	r3, r7, r1
 800c474:	789b      	ldrb	r3, [r3, #2]
 800c476:	221f      	movs	r2, #31
 800c478:	4013      	ands	r3, r2
 800c47a:	b2da      	uxtb	r2, r3
 800c47c:	187b      	adds	r3, r7, r1
 800c47e:	709a      	strb	r2, [r3, #2]

    for (jj = 0; jj < 3; jj++) {
 800c480:	2300      	movs	r3, #0
 800c482:	61fb      	str	r3, [r7, #28]
 800c484:	e079      	b.n	800c57a <gyro_self_test+0x14e>
        st_shift_cust = labs(bias_regular[jj] - bias_st[jj]) / 65536.f;
 800c486:	69fb      	ldr	r3, [r7, #28]
 800c488:	009b      	lsls	r3, r3, #2
 800c48a:	687a      	ldr	r2, [r7, #4]
 800c48c:	18d3      	adds	r3, r2, r3
 800c48e:	681a      	ldr	r2, [r3, #0]
 800c490:	69fb      	ldr	r3, [r7, #28]
 800c492:	009b      	lsls	r3, r3, #2
 800c494:	6839      	ldr	r1, [r7, #0]
 800c496:	18cb      	adds	r3, r1, r3
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	1ad3      	subs	r3, r2, r3
 800c49c:	17da      	asrs	r2, r3, #31
 800c49e:	189b      	adds	r3, r3, r2
 800c4a0:	4053      	eors	r3, r2
 800c4a2:	0018      	movs	r0, r3
 800c4a4:	f7f7 ffd2 	bl	800444c <__aeabi_i2f>
 800c4a8:	1c03      	adds	r3, r0, #0
 800c4aa:	218f      	movs	r1, #143	; 0x8f
 800c4ac:	05c9      	lsls	r1, r1, #23
 800c4ae:	1c18      	adds	r0, r3, #0
 800c4b0:	f7f7 fade 	bl	8003a70 <__aeabi_fdiv>
 800c4b4:	1c03      	adds	r3, r0, #0
 800c4b6:	613b      	str	r3, [r7, #16]
        if (tmp[jj]) {
 800c4b8:	2308      	movs	r3, #8
 800c4ba:	18fa      	adds	r2, r7, r3
 800c4bc:	69fb      	ldr	r3, [r7, #28]
 800c4be:	18d3      	adds	r3, r2, r3
 800c4c0:	781b      	ldrb	r3, [r3, #0]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d041      	beq.n	800c54a <gyro_self_test+0x11e>
            st_shift = 3275.f / test.gyro_sens;
 800c4c6:	2383      	movs	r3, #131	; 0x83
 800c4c8:	0018      	movs	r0, r3
 800c4ca:	f7f8 f811 	bl	80044f0 <__aeabi_ui2f>
 800c4ce:	1c03      	adds	r3, r0, #0
 800c4d0:	1c19      	adds	r1, r3, #0
 800c4d2:	482f      	ldr	r0, [pc, #188]	; (800c590 <gyro_self_test+0x164>)
 800c4d4:	f7f7 facc 	bl	8003a70 <__aeabi_fdiv>
 800c4d8:	1c03      	adds	r3, r0, #0
 800c4da:	617b      	str	r3, [r7, #20]
            while (--tmp[jj])
 800c4dc:	e005      	b.n	800c4ea <gyro_self_test+0xbe>
                st_shift *= 1.046f;
 800c4de:	492d      	ldr	r1, [pc, #180]	; (800c594 <gyro_self_test+0x168>)
 800c4e0:	6978      	ldr	r0, [r7, #20]
 800c4e2:	f7f7 fc8f 	bl	8003e04 <__aeabi_fmul>
 800c4e6:	1c03      	adds	r3, r0, #0
 800c4e8:	617b      	str	r3, [r7, #20]
            while (--tmp[jj])
 800c4ea:	2008      	movs	r0, #8
 800c4ec:	183a      	adds	r2, r7, r0
 800c4ee:	69fb      	ldr	r3, [r7, #28]
 800c4f0:	18d3      	adds	r3, r2, r3
 800c4f2:	781b      	ldrb	r3, [r3, #0]
 800c4f4:	3b01      	subs	r3, #1
 800c4f6:	b2d9      	uxtb	r1, r3
 800c4f8:	183a      	adds	r2, r7, r0
 800c4fa:	69fb      	ldr	r3, [r7, #28]
 800c4fc:	18d3      	adds	r3, r2, r3
 800c4fe:	1c0a      	adds	r2, r1, #0
 800c500:	701a      	strb	r2, [r3, #0]
 800c502:	183a      	adds	r2, r7, r0
 800c504:	69fb      	ldr	r3, [r7, #28]
 800c506:	18d3      	adds	r3, r2, r3
 800c508:	781b      	ldrb	r3, [r3, #0]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d1e7      	bne.n	800c4de <gyro_self_test+0xb2>
            st_shift_var = st_shift_cust / st_shift - 1.f;
 800c50e:	6979      	ldr	r1, [r7, #20]
 800c510:	6938      	ldr	r0, [r7, #16]
 800c512:	f7f7 faad 	bl	8003a70 <__aeabi_fdiv>
 800c516:	1c03      	adds	r3, r0, #0
 800c518:	21fe      	movs	r1, #254	; 0xfe
 800c51a:	0589      	lsls	r1, r1, #22
 800c51c:	1c18      	adds	r0, r3, #0
 800c51e:	f7f7 fdbf 	bl	80040a0 <__aeabi_fsub>
 800c522:	1c03      	adds	r3, r0, #0
 800c524:	60fb      	str	r3, [r7, #12]
            if (fabs(st_shift_var) > test.max_gyro_var)
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	005b      	lsls	r3, r3, #1
 800c52a:	085b      	lsrs	r3, r3, #1
 800c52c:	4a1a      	ldr	r2, [pc, #104]	; (800c598 <gyro_self_test+0x16c>)
 800c52e:	1c11      	adds	r1, r2, #0
 800c530:	1c18      	adds	r0, r3, #0
 800c532:	f7f6 ff85 	bl	8003440 <__aeabi_fcmpgt>
 800c536:	1e03      	subs	r3, r0, #0
 800c538:	d01c      	beq.n	800c574 <gyro_self_test+0x148>
                result |= 1 << jj;
 800c53a:	2201      	movs	r2, #1
 800c53c:	69fb      	ldr	r3, [r7, #28]
 800c53e:	409a      	lsls	r2, r3
 800c540:	0013      	movs	r3, r2
 800c542:	69ba      	ldr	r2, [r7, #24]
 800c544:	4313      	orrs	r3, r2
 800c546:	61bb      	str	r3, [r7, #24]
 800c548:	e014      	b.n	800c574 <gyro_self_test+0x148>
        } else if ((st_shift_cust < test.min_dps) ||
 800c54a:	4b14      	ldr	r3, [pc, #80]	; (800c59c <gyro_self_test+0x170>)
 800c54c:	1c19      	adds	r1, r3, #0
 800c54e:	6938      	ldr	r0, [r7, #16]
 800c550:	f7f6 ff62 	bl	8003418 <__aeabi_fcmplt>
 800c554:	1e03      	subs	r3, r0, #0
 800c556:	d106      	bne.n	800c566 <gyro_self_test+0x13a>
            (st_shift_cust > test.max_dps))
 800c558:	4b11      	ldr	r3, [pc, #68]	; (800c5a0 <gyro_self_test+0x174>)
        } else if ((st_shift_cust < test.min_dps) ||
 800c55a:	1c19      	adds	r1, r3, #0
 800c55c:	6938      	ldr	r0, [r7, #16]
 800c55e:	f7f6 ff6f 	bl	8003440 <__aeabi_fcmpgt>
 800c562:	1e03      	subs	r3, r0, #0
 800c564:	d006      	beq.n	800c574 <gyro_self_test+0x148>
            result |= 1 << jj;
 800c566:	2201      	movs	r2, #1
 800c568:	69fb      	ldr	r3, [r7, #28]
 800c56a:	409a      	lsls	r2, r3
 800c56c:	0013      	movs	r3, r2
 800c56e:	69ba      	ldr	r2, [r7, #24]
 800c570:	4313      	orrs	r3, r2
 800c572:	61bb      	str	r3, [r7, #24]
    for (jj = 0; jj < 3; jj++) {
 800c574:	69fb      	ldr	r3, [r7, #28]
 800c576:	3301      	adds	r3, #1
 800c578:	61fb      	str	r3, [r7, #28]
 800c57a:	69fb      	ldr	r3, [r7, #28]
 800c57c:	2b02      	cmp	r3, #2
 800c57e:	dc00      	bgt.n	800c582 <gyro_self_test+0x156>
 800c580:	e781      	b.n	800c486 <gyro_self_test+0x5a>
    }
    return result;
 800c582:	69bb      	ldr	r3, [r7, #24]
}
 800c584:	0018      	movs	r0, r3
 800c586:	46bd      	mov	sp, r7
 800c588:	b008      	add	sp, #32
 800c58a:	bd80      	pop	{r7, pc}
 800c58c:	2000002c 	.word	0x2000002c
 800c590:	454cb000 	.word	0x454cb000
 800c594:	3f85e354 	.word	0x3f85e354
 800c598:	3e0f5c29 	.word	0x3e0f5c29
 800c59c:	41200000 	.word	0x41200000
 800c5a0:	42d20000 	.word	0x42d20000

0800c5a4 <get_st_biases>:
    return result;
}
#endif

static int get_st_biases(long *gyro, long *accel, unsigned char hw_test)
{
 800c5a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c5a6:	b0bd      	sub	sp, #244	; 0xf4
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	23c4      	movs	r3, #196	; 0xc4
 800c5ac:	18fb      	adds	r3, r7, r3
 800c5ae:	6018      	str	r0, [r3, #0]
 800c5b0:	23c0      	movs	r3, #192	; 0xc0
 800c5b2:	18fb      	adds	r3, r7, r3
 800c5b4:	6019      	str	r1, [r3, #0]
 800c5b6:	0013      	movs	r3, r2
 800c5b8:	22bf      	movs	r2, #191	; 0xbf
 800c5ba:	18ba      	adds	r2, r7, r2
 800c5bc:	7013      	strb	r3, [r2, #0]
    unsigned char data[MAX_PACKET_LENGTH];
    unsigned char packet_count, ii;
    unsigned short fifo_count;

    data[0] = 0x01;
 800c5be:	2624      	movs	r6, #36	; 0x24
 800c5c0:	21b8      	movs	r1, #184	; 0xb8
 800c5c2:	1873      	adds	r3, r6, r1
 800c5c4:	19da      	adds	r2, r3, r7
 800c5c6:	2301      	movs	r3, #1
 800c5c8:	7013      	strb	r3, [r2, #0]
    data[1] = 0;
 800c5ca:	1872      	adds	r2, r6, r1
 800c5cc:	19d2      	adds	r2, r2, r7
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	7053      	strb	r3, [r2, #1]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, data))
 800c5d2:	4bbe      	ldr	r3, [pc, #760]	; (800c8cc <get_st_biases+0x328>)
 800c5d4:	685b      	ldr	r3, [r3, #4]
 800c5d6:	7818      	ldrb	r0, [r3, #0]
 800c5d8:	4bbc      	ldr	r3, [pc, #752]	; (800c8cc <get_st_biases+0x328>)
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	7d59      	ldrb	r1, [r3, #21]
 800c5de:	23b8      	movs	r3, #184	; 0xb8
 800c5e0:	18f3      	adds	r3, r6, r3
 800c5e2:	19db      	adds	r3, r3, r7
 800c5e4:	2202      	movs	r2, #2
 800c5e6:	f7f9 fff1 	bl	80065cc <Sensors_I2C_WriteRegister>
 800c5ea:	1e03      	subs	r3, r0, #0
 800c5ec:	d003      	beq.n	800c5f6 <get_st_biases+0x52>
        return -1;
 800c5ee:	2301      	movs	r3, #1
 800c5f0:	425b      	negs	r3, r3
 800c5f2:	f000 fbfc 	bl	800cdee <get_st_biases+0x84a>
    delay_ms(200);
 800c5f6:	20c8      	movs	r0, #200	; 0xc8
 800c5f8:	f7fb f86c 	bl	80076d4 <HAL_Delay>
    data[0] = 0;
 800c5fc:	2624      	movs	r6, #36	; 0x24
 800c5fe:	23b8      	movs	r3, #184	; 0xb8
 800c600:	18f2      	adds	r2, r6, r3
 800c602:	19d2      	adds	r2, r2, r7
 800c604:	2300      	movs	r3, #0
 800c606:	7013      	strb	r3, [r2, #0]
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, data))
 800c608:	4bb0      	ldr	r3, [pc, #704]	; (800c8cc <get_st_biases+0x328>)
 800c60a:	685b      	ldr	r3, [r3, #4]
 800c60c:	7818      	ldrb	r0, [r3, #0]
 800c60e:	4baf      	ldr	r3, [pc, #700]	; (800c8cc <get_st_biases+0x328>)
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	7c59      	ldrb	r1, [r3, #17]
 800c614:	23b8      	movs	r3, #184	; 0xb8
 800c616:	18f3      	adds	r3, r6, r3
 800c618:	19db      	adds	r3, r3, r7
 800c61a:	2201      	movs	r2, #1
 800c61c:	f7f9 ffd6 	bl	80065cc <Sensors_I2C_WriteRegister>
 800c620:	1e03      	subs	r3, r0, #0
 800c622:	d003      	beq.n	800c62c <get_st_biases+0x88>
        return -1;
 800c624:	2301      	movs	r3, #1
 800c626:	425b      	negs	r3, r3
 800c628:	f000 fbe1 	bl	800cdee <get_st_biases+0x84a>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
 800c62c:	4ba7      	ldr	r3, [pc, #668]	; (800c8cc <get_st_biases+0x328>)
 800c62e:	685b      	ldr	r3, [r3, #4]
 800c630:	7818      	ldrb	r0, [r3, #0]
 800c632:	4ba6      	ldr	r3, [pc, #664]	; (800c8cc <get_st_biases+0x328>)
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	7959      	ldrb	r1, [r3, #5]
 800c638:	2324      	movs	r3, #36	; 0x24
 800c63a:	22b8      	movs	r2, #184	; 0xb8
 800c63c:	189b      	adds	r3, r3, r2
 800c63e:	19db      	adds	r3, r3, r7
 800c640:	2201      	movs	r2, #1
 800c642:	f7f9 ffc3 	bl	80065cc <Sensors_I2C_WriteRegister>
 800c646:	1e03      	subs	r3, r0, #0
 800c648:	d003      	beq.n	800c652 <get_st_biases+0xae>
        return -1;
 800c64a:	2301      	movs	r3, #1
 800c64c:	425b      	negs	r3, r3
 800c64e:	f000 fbce 	bl	800cdee <get_st_biases+0x84a>
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 800c652:	4b9e      	ldr	r3, [pc, #632]	; (800c8cc <get_st_biases+0x328>)
 800c654:	685b      	ldr	r3, [r3, #4]
 800c656:	7818      	ldrb	r0, [r3, #0]
 800c658:	4b9c      	ldr	r3, [pc, #624]	; (800c8cc <get_st_biases+0x328>)
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	7d59      	ldrb	r1, [r3, #21]
 800c65e:	2324      	movs	r3, #36	; 0x24
 800c660:	22b8      	movs	r2, #184	; 0xb8
 800c662:	189b      	adds	r3, r3, r2
 800c664:	19db      	adds	r3, r3, r7
 800c666:	2201      	movs	r2, #1
 800c668:	f7f9 ffb0 	bl	80065cc <Sensors_I2C_WriteRegister>
 800c66c:	1e03      	subs	r3, r0, #0
 800c66e:	d003      	beq.n	800c678 <get_st_biases+0xd4>
        return -1;
 800c670:	2301      	movs	r3, #1
 800c672:	425b      	negs	r3, r3
 800c674:	f000 fbbb 	bl	800cdee <get_st_biases+0x84a>
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
 800c678:	4b94      	ldr	r3, [pc, #592]	; (800c8cc <get_st_biases+0x328>)
 800c67a:	685b      	ldr	r3, [r3, #4]
 800c67c:	7818      	ldrb	r0, [r3, #0]
 800c67e:	4b93      	ldr	r3, [pc, #588]	; (800c8cc <get_st_biases+0x328>)
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	7e99      	ldrb	r1, [r3, #26]
 800c684:	2324      	movs	r3, #36	; 0x24
 800c686:	22b8      	movs	r2, #184	; 0xb8
 800c688:	189b      	adds	r3, r3, r2
 800c68a:	19db      	adds	r3, r3, r7
 800c68c:	2201      	movs	r2, #1
 800c68e:	f7f9 ff9d 	bl	80065cc <Sensors_I2C_WriteRegister>
 800c692:	1e03      	subs	r3, r0, #0
 800c694:	d003      	beq.n	800c69e <get_st_biases+0xfa>
        return -1;
 800c696:	2301      	movs	r3, #1
 800c698:	425b      	negs	r3, r3
 800c69a:	f000 fba8 	bl	800cdee <get_st_biases+0x84a>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, data))
 800c69e:	4b8b      	ldr	r3, [pc, #556]	; (800c8cc <get_st_biases+0x328>)
 800c6a0:	685b      	ldr	r3, [r3, #4]
 800c6a2:	7818      	ldrb	r0, [r3, #0]
 800c6a4:	4b89      	ldr	r3, [pc, #548]	; (800c8cc <get_st_biases+0x328>)
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	7919      	ldrb	r1, [r3, #4]
 800c6aa:	2324      	movs	r3, #36	; 0x24
 800c6ac:	22b8      	movs	r2, #184	; 0xb8
 800c6ae:	189b      	adds	r3, r3, r2
 800c6b0:	19db      	adds	r3, r3, r7
 800c6b2:	2201      	movs	r2, #1
 800c6b4:	f7f9 ff8a 	bl	80065cc <Sensors_I2C_WriteRegister>
 800c6b8:	1e03      	subs	r3, r0, #0
 800c6ba:	d002      	beq.n	800c6c2 <get_st_biases+0x11e>
        return -1;
 800c6bc:	2301      	movs	r3, #1
 800c6be:	425b      	negs	r3, r3
 800c6c0:	e395      	b.n	800cdee <get_st_biases+0x84a>
    data[0] = BIT_FIFO_RST | BIT_DMP_RST;
 800c6c2:	2624      	movs	r6, #36	; 0x24
 800c6c4:	23b8      	movs	r3, #184	; 0xb8
 800c6c6:	18f2      	adds	r2, r6, r3
 800c6c8:	19d2      	adds	r2, r2, r7
 800c6ca:	230c      	movs	r3, #12
 800c6cc:	7013      	strb	r3, [r2, #0]
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, data))
 800c6ce:	4b7f      	ldr	r3, [pc, #508]	; (800c8cc <get_st_biases+0x328>)
 800c6d0:	685b      	ldr	r3, [r3, #4]
 800c6d2:	7818      	ldrb	r0, [r3, #0]
 800c6d4:	4b7d      	ldr	r3, [pc, #500]	; (800c8cc <get_st_biases+0x328>)
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	7919      	ldrb	r1, [r3, #4]
 800c6da:	23b8      	movs	r3, #184	; 0xb8
 800c6dc:	18f3      	adds	r3, r6, r3
 800c6de:	19db      	adds	r3, r3, r7
 800c6e0:	2201      	movs	r2, #1
 800c6e2:	f7f9 ff73 	bl	80065cc <Sensors_I2C_WriteRegister>
 800c6e6:	1e03      	subs	r3, r0, #0
 800c6e8:	d002      	beq.n	800c6f0 <get_st_biases+0x14c>
        return -1;
 800c6ea:	2301      	movs	r3, #1
 800c6ec:	425b      	negs	r3, r3
 800c6ee:	e37e      	b.n	800cdee <get_st_biases+0x84a>
    delay_ms(15);
 800c6f0:	200f      	movs	r0, #15
 800c6f2:	f7fa ffef 	bl	80076d4 <HAL_Delay>
    data[0] = st.test->reg_lpf;
 800c6f6:	4b75      	ldr	r3, [pc, #468]	; (800c8cc <get_st_biases+0x328>)
 800c6f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6fa:	7a5b      	ldrb	r3, [r3, #9]
 800c6fc:	2624      	movs	r6, #36	; 0x24
 800c6fe:	22b8      	movs	r2, #184	; 0xb8
 800c700:	18b1      	adds	r1, r6, r2
 800c702:	19ca      	adds	r2, r1, r7
 800c704:	7013      	strb	r3, [r2, #0]
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, data))
 800c706:	4b71      	ldr	r3, [pc, #452]	; (800c8cc <get_st_biases+0x328>)
 800c708:	685b      	ldr	r3, [r3, #4]
 800c70a:	7818      	ldrb	r0, [r3, #0]
 800c70c:	4b6f      	ldr	r3, [pc, #444]	; (800c8cc <get_st_biases+0x328>)
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	7899      	ldrb	r1, [r3, #2]
 800c712:	23b8      	movs	r3, #184	; 0xb8
 800c714:	18f3      	adds	r3, r6, r3
 800c716:	19db      	adds	r3, r3, r7
 800c718:	2201      	movs	r2, #1
 800c71a:	f7f9 ff57 	bl	80065cc <Sensors_I2C_WriteRegister>
 800c71e:	1e03      	subs	r3, r0, #0
 800c720:	d002      	beq.n	800c728 <get_st_biases+0x184>
        return -1;
 800c722:	2301      	movs	r3, #1
 800c724:	425b      	negs	r3, r3
 800c726:	e362      	b.n	800cdee <get_st_biases+0x84a>
    data[0] = st.test->reg_rate_div;
 800c728:	4b68      	ldr	r3, [pc, #416]	; (800c8cc <get_st_biases+0x328>)
 800c72a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c72c:	7a1b      	ldrb	r3, [r3, #8]
 800c72e:	2624      	movs	r6, #36	; 0x24
 800c730:	22b8      	movs	r2, #184	; 0xb8
 800c732:	18b1      	adds	r1, r6, r2
 800c734:	19ca      	adds	r2, r1, r7
 800c736:	7013      	strb	r3, [r2, #0]
    if (i2c_write(st.hw->addr, st.reg->rate_div, 1, data))
 800c738:	4b64      	ldr	r3, [pc, #400]	; (800c8cc <get_st_biases+0x328>)
 800c73a:	685b      	ldr	r3, [r3, #4]
 800c73c:	7818      	ldrb	r0, [r3, #0]
 800c73e:	4b63      	ldr	r3, [pc, #396]	; (800c8cc <get_st_biases+0x328>)
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	7859      	ldrb	r1, [r3, #1]
 800c744:	23b8      	movs	r3, #184	; 0xb8
 800c746:	18f3      	adds	r3, r6, r3
 800c748:	19db      	adds	r3, r3, r7
 800c74a:	2201      	movs	r2, #1
 800c74c:	f7f9 ff3e 	bl	80065cc <Sensors_I2C_WriteRegister>
 800c750:	1e03      	subs	r3, r0, #0
 800c752:	d002      	beq.n	800c75a <get_st_biases+0x1b6>
        return -1;
 800c754:	2301      	movs	r3, #1
 800c756:	425b      	negs	r3, r3
 800c758:	e349      	b.n	800cdee <get_st_biases+0x84a>
    if (hw_test)
 800c75a:	23bf      	movs	r3, #191	; 0xbf
 800c75c:	18fb      	adds	r3, r7, r3
 800c75e:	781b      	ldrb	r3, [r3, #0]
 800c760:	2b00      	cmp	r3, #0
 800c762:	d00c      	beq.n	800c77e <get_st_biases+0x1da>
        data[0] = st.test->reg_gyro_fsr | 0xE0;
 800c764:	4b59      	ldr	r3, [pc, #356]	; (800c8cc <get_st_biases+0x328>)
 800c766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c768:	7a9a      	ldrb	r2, [r3, #10]
 800c76a:	2320      	movs	r3, #32
 800c76c:	425b      	negs	r3, r3
 800c76e:	4313      	orrs	r3, r2
 800c770:	b2db      	uxtb	r3, r3
 800c772:	2224      	movs	r2, #36	; 0x24
 800c774:	21b8      	movs	r1, #184	; 0xb8
 800c776:	1852      	adds	r2, r2, r1
 800c778:	19d2      	adds	r2, r2, r7
 800c77a:	7013      	strb	r3, [r2, #0]
 800c77c:	e007      	b.n	800c78e <get_st_biases+0x1ea>
    else
        data[0] = st.test->reg_gyro_fsr;
 800c77e:	4b53      	ldr	r3, [pc, #332]	; (800c8cc <get_st_biases+0x328>)
 800c780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c782:	7a9b      	ldrb	r3, [r3, #10]
 800c784:	2224      	movs	r2, #36	; 0x24
 800c786:	21b8      	movs	r1, #184	; 0xb8
 800c788:	1852      	adds	r2, r2, r1
 800c78a:	19d2      	adds	r2, r2, r7
 800c78c:	7013      	strb	r3, [r2, #0]
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, data))
 800c78e:	4b4f      	ldr	r3, [pc, #316]	; (800c8cc <get_st_biases+0x328>)
 800c790:	685b      	ldr	r3, [r3, #4]
 800c792:	7818      	ldrb	r0, [r3, #0]
 800c794:	4b4d      	ldr	r3, [pc, #308]	; (800c8cc <get_st_biases+0x328>)
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	7999      	ldrb	r1, [r3, #6]
 800c79a:	2324      	movs	r3, #36	; 0x24
 800c79c:	22b8      	movs	r2, #184	; 0xb8
 800c79e:	189b      	adds	r3, r3, r2
 800c7a0:	19db      	adds	r3, r3, r7
 800c7a2:	2201      	movs	r2, #1
 800c7a4:	f7f9 ff12 	bl	80065cc <Sensors_I2C_WriteRegister>
 800c7a8:	1e03      	subs	r3, r0, #0
 800c7aa:	d002      	beq.n	800c7b2 <get_st_biases+0x20e>
        return -1;
 800c7ac:	2301      	movs	r3, #1
 800c7ae:	425b      	negs	r3, r3
 800c7b0:	e31d      	b.n	800cdee <get_st_biases+0x84a>

    if (hw_test)
 800c7b2:	23bf      	movs	r3, #191	; 0xbf
 800c7b4:	18fb      	adds	r3, r7, r3
 800c7b6:	781b      	ldrb	r3, [r3, #0]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d00c      	beq.n	800c7d6 <get_st_biases+0x232>
        data[0] = st.test->reg_accel_fsr | 0xE0;
 800c7bc:	4b43      	ldr	r3, [pc, #268]	; (800c8cc <get_st_biases+0x328>)
 800c7be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7c0:	7ada      	ldrb	r2, [r3, #11]
 800c7c2:	2320      	movs	r3, #32
 800c7c4:	425b      	negs	r3, r3
 800c7c6:	4313      	orrs	r3, r2
 800c7c8:	b2db      	uxtb	r3, r3
 800c7ca:	2224      	movs	r2, #36	; 0x24
 800c7cc:	21b8      	movs	r1, #184	; 0xb8
 800c7ce:	1852      	adds	r2, r2, r1
 800c7d0:	19d2      	adds	r2, r2, r7
 800c7d2:	7013      	strb	r3, [r2, #0]
 800c7d4:	e005      	b.n	800c7e2 <get_st_biases+0x23e>
    else
        data[0] = test.reg_accel_fsr;
 800c7d6:	2318      	movs	r3, #24
 800c7d8:	2224      	movs	r2, #36	; 0x24
 800c7da:	21b8      	movs	r1, #184	; 0xb8
 800c7dc:	1852      	adds	r2, r2, r1
 800c7de:	19d2      	adds	r2, r2, r7
 800c7e0:	7013      	strb	r3, [r2, #0]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, data))
 800c7e2:	4b3a      	ldr	r3, [pc, #232]	; (800c8cc <get_st_biases+0x328>)
 800c7e4:	685b      	ldr	r3, [r3, #4]
 800c7e6:	7818      	ldrb	r0, [r3, #0]
 800c7e8:	4b38      	ldr	r3, [pc, #224]	; (800c8cc <get_st_biases+0x328>)
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	79d9      	ldrb	r1, [r3, #7]
 800c7ee:	2324      	movs	r3, #36	; 0x24
 800c7f0:	22b8      	movs	r2, #184	; 0xb8
 800c7f2:	189b      	adds	r3, r3, r2
 800c7f4:	19db      	adds	r3, r3, r7
 800c7f6:	2201      	movs	r2, #1
 800c7f8:	f7f9 fee8 	bl	80065cc <Sensors_I2C_WriteRegister>
 800c7fc:	1e03      	subs	r3, r0, #0
 800c7fe:	d002      	beq.n	800c806 <get_st_biases+0x262>
        return -1;
 800c800:	2301      	movs	r3, #1
 800c802:	425b      	negs	r3, r3
 800c804:	e2f3      	b.n	800cdee <get_st_biases+0x84a>
    if (hw_test)
 800c806:	23bf      	movs	r3, #191	; 0xbf
 800c808:	18fb      	adds	r3, r7, r3
 800c80a:	781b      	ldrb	r3, [r3, #0]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d002      	beq.n	800c816 <get_st_biases+0x272>
        delay_ms(200);
 800c810:	20c8      	movs	r0, #200	; 0xc8
 800c812:	f7fa ff5f 	bl	80076d4 <HAL_Delay>

    /* Fill FIFO for test.wait_ms milliseconds. */
    data[0] = BIT_FIFO_EN;
 800c816:	2624      	movs	r6, #36	; 0x24
 800c818:	23b8      	movs	r3, #184	; 0xb8
 800c81a:	18f2      	adds	r2, r6, r3
 800c81c:	19d2      	adds	r2, r2, r7
 800c81e:	2340      	movs	r3, #64	; 0x40
 800c820:	7013      	strb	r3, [r2, #0]
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, data))
 800c822:	4b2a      	ldr	r3, [pc, #168]	; (800c8cc <get_st_biases+0x328>)
 800c824:	685b      	ldr	r3, [r3, #4]
 800c826:	7818      	ldrb	r0, [r3, #0]
 800c828:	4b28      	ldr	r3, [pc, #160]	; (800c8cc <get_st_biases+0x328>)
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	7919      	ldrb	r1, [r3, #4]
 800c82e:	23b8      	movs	r3, #184	; 0xb8
 800c830:	18f3      	adds	r3, r6, r3
 800c832:	19db      	adds	r3, r3, r7
 800c834:	2201      	movs	r2, #1
 800c836:	f7f9 fec9 	bl	80065cc <Sensors_I2C_WriteRegister>
 800c83a:	1e03      	subs	r3, r0, #0
 800c83c:	d002      	beq.n	800c844 <get_st_biases+0x2a0>
        return -1;
 800c83e:	2301      	movs	r3, #1
 800c840:	425b      	negs	r3, r3
 800c842:	e2d4      	b.n	800cdee <get_st_biases+0x84a>

    data[0] = INV_XYZ_GYRO | INV_XYZ_ACCEL;
 800c844:	2624      	movs	r6, #36	; 0x24
 800c846:	23b8      	movs	r3, #184	; 0xb8
 800c848:	18f2      	adds	r2, r6, r3
 800c84a:	19d2      	adds	r2, r2, r7
 800c84c:	2378      	movs	r3, #120	; 0x78
 800c84e:	7013      	strb	r3, [r2, #0]
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
 800c850:	4b1e      	ldr	r3, [pc, #120]	; (800c8cc <get_st_biases+0x328>)
 800c852:	685b      	ldr	r3, [r3, #4]
 800c854:	7818      	ldrb	r0, [r3, #0]
 800c856:	4b1d      	ldr	r3, [pc, #116]	; (800c8cc <get_st_biases+0x328>)
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	7959      	ldrb	r1, [r3, #5]
 800c85c:	23b8      	movs	r3, #184	; 0xb8
 800c85e:	18f3      	adds	r3, r6, r3
 800c860:	19db      	adds	r3, r3, r7
 800c862:	2201      	movs	r2, #1
 800c864:	f7f9 feb2 	bl	80065cc <Sensors_I2C_WriteRegister>
 800c868:	1e03      	subs	r3, r0, #0
 800c86a:	d002      	beq.n	800c872 <get_st_biases+0x2ce>
        return -1;
 800c86c:	2301      	movs	r3, #1
 800c86e:	425b      	negs	r3, r3
 800c870:	e2bd      	b.n	800cdee <get_st_biases+0x84a>
    delay_ms(test.wait_ms);
 800c872:	2332      	movs	r3, #50	; 0x32
 800c874:	0018      	movs	r0, r3
 800c876:	f7fa ff2d 	bl	80076d4 <HAL_Delay>
    data[0] = 0;
 800c87a:	2624      	movs	r6, #36	; 0x24
 800c87c:	23b8      	movs	r3, #184	; 0xb8
 800c87e:	18f2      	adds	r2, r6, r3
 800c880:	19d2      	adds	r2, r2, r7
 800c882:	2300      	movs	r3, #0
 800c884:	7013      	strb	r3, [r2, #0]
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
 800c886:	4b11      	ldr	r3, [pc, #68]	; (800c8cc <get_st_biases+0x328>)
 800c888:	685b      	ldr	r3, [r3, #4]
 800c88a:	7818      	ldrb	r0, [r3, #0]
 800c88c:	4b0f      	ldr	r3, [pc, #60]	; (800c8cc <get_st_biases+0x328>)
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	7959      	ldrb	r1, [r3, #5]
 800c892:	23b8      	movs	r3, #184	; 0xb8
 800c894:	18f3      	adds	r3, r6, r3
 800c896:	19db      	adds	r3, r3, r7
 800c898:	2201      	movs	r2, #1
 800c89a:	f7f9 fe97 	bl	80065cc <Sensors_I2C_WriteRegister>
 800c89e:	1e03      	subs	r3, r0, #0
 800c8a0:	d002      	beq.n	800c8a8 <get_st_biases+0x304>
        return -1;
 800c8a2:	2301      	movs	r3, #1
 800c8a4:	425b      	negs	r3, r3
 800c8a6:	e2a2      	b.n	800cdee <get_st_biases+0x84a>

    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, data))
 800c8a8:	4b08      	ldr	r3, [pc, #32]	; (800c8cc <get_st_biases+0x328>)
 800c8aa:	685b      	ldr	r3, [r3, #4]
 800c8ac:	7818      	ldrb	r0, [r3, #0]
 800c8ae:	4b07      	ldr	r3, [pc, #28]	; (800c8cc <get_st_biases+0x328>)
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	7b19      	ldrb	r1, [r3, #12]
 800c8b4:	2324      	movs	r3, #36	; 0x24
 800c8b6:	22b8      	movs	r2, #184	; 0xb8
 800c8b8:	189b      	adds	r3, r3, r2
 800c8ba:	19db      	adds	r3, r3, r7
 800c8bc:	2202      	movs	r2, #2
 800c8be:	f7f9 fee1 	bl	8006684 <Sensors_I2C_ReadRegister>
 800c8c2:	1e03      	subs	r3, r0, #0
 800c8c4:	d004      	beq.n	800c8d0 <get_st_biases+0x32c>
        return -1;
 800c8c6:	2301      	movs	r3, #1
 800c8c8:	425b      	negs	r3, r3
 800c8ca:	e290      	b.n	800cdee <get_st_biases+0x84a>
 800c8cc:	2000002c 	.word	0x2000002c

    fifo_count = (data[0] << 8) | data[1];
 800c8d0:	2124      	movs	r1, #36	; 0x24
 800c8d2:	20b8      	movs	r0, #184	; 0xb8
 800c8d4:	180b      	adds	r3, r1, r0
 800c8d6:	19db      	adds	r3, r3, r7
 800c8d8:	781b      	ldrb	r3, [r3, #0]
 800c8da:	021b      	lsls	r3, r3, #8
 800c8dc:	b21a      	sxth	r2, r3
 800c8de:	180b      	adds	r3, r1, r0
 800c8e0:	19db      	adds	r3, r3, r7
 800c8e2:	785b      	ldrb	r3, [r3, #1]
 800c8e4:	b21b      	sxth	r3, r3
 800c8e6:	4313      	orrs	r3, r2
 800c8e8:	b21b      	sxth	r3, r3
 800c8ea:	2134      	movs	r1, #52	; 0x34
 800c8ec:	180a      	adds	r2, r1, r0
 800c8ee:	19d2      	adds	r2, r2, r7
 800c8f0:	8013      	strh	r3, [r2, #0]
    packet_count = fifo_count / MAX_PACKET_LENGTH;
 800c8f2:	0006      	movs	r6, r0
 800c8f4:	180b      	adds	r3, r1, r0
 800c8f6:	19db      	adds	r3, r3, r7
 800c8f8:	881b      	ldrh	r3, [r3, #0]
 800c8fa:	210c      	movs	r1, #12
 800c8fc:	0018      	movs	r0, r3
 800c8fe:	f7f6 fbc5 	bl	800308c <__udivsi3>
 800c902:	0003      	movs	r3, r0
 800c904:	b29b      	uxth	r3, r3
 800c906:	2233      	movs	r2, #51	; 0x33
 800c908:	0030      	movs	r0, r6
 800c90a:	1812      	adds	r2, r2, r0
 800c90c:	19d2      	adds	r2, r2, r7
 800c90e:	7013      	strb	r3, [r2, #0]
    gyro[0] = gyro[1] = gyro[2] = 0;
 800c910:	26c4      	movs	r6, #196	; 0xc4
 800c912:	19bb      	adds	r3, r7, r6
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	3308      	adds	r3, #8
 800c918:	0019      	movs	r1, r3
 800c91a:	2300      	movs	r3, #0
 800c91c:	600b      	str	r3, [r1, #0]
 800c91e:	19bb      	adds	r3, r7, r6
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	1d1a      	adds	r2, r3, #4
 800c924:	680b      	ldr	r3, [r1, #0]
 800c926:	6013      	str	r3, [r2, #0]
 800c928:	6812      	ldr	r2, [r2, #0]
 800c92a:	19bb      	adds	r3, r7, r6
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	601a      	str	r2, [r3, #0]
    accel[0] = accel[1] = accel[2] = 0;
 800c930:	26c0      	movs	r6, #192	; 0xc0
 800c932:	19bb      	adds	r3, r7, r6
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	3308      	adds	r3, #8
 800c938:	0019      	movs	r1, r3
 800c93a:	2300      	movs	r3, #0
 800c93c:	600b      	str	r3, [r1, #0]
 800c93e:	19bb      	adds	r3, r7, r6
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	1d1a      	adds	r2, r3, #4
 800c944:	680b      	ldr	r3, [r1, #0]
 800c946:	6013      	str	r3, [r2, #0]
 800c948:	6812      	ldr	r2, [r2, #0]
 800c94a:	19bb      	adds	r3, r7, r6
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	601a      	str	r2, [r3, #0]

    for (ii = 0; ii < packet_count; ii++) {
 800c950:	2337      	movs	r3, #55	; 0x37
 800c952:	181b      	adds	r3, r3, r0
 800c954:	19da      	adds	r2, r3, r7
 800c956:	2300      	movs	r3, #0
 800c958:	7013      	strb	r3, [r2, #0]
 800c95a:	e0d7      	b.n	800cb0c <get_st_biases+0x568>
        short accel_cur[3], gyro_cur[3];
        if (i2c_read(st.hw->addr, st.reg->fifo_r_w, MAX_PACKET_LENGTH, data))
 800c95c:	4b08      	ldr	r3, [pc, #32]	; (800c980 <get_st_biases+0x3dc>)
 800c95e:	685b      	ldr	r3, [r3, #4]
 800c960:	7818      	ldrb	r0, [r3, #0]
 800c962:	4b07      	ldr	r3, [pc, #28]	; (800c980 <get_st_biases+0x3dc>)
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	7b59      	ldrb	r1, [r3, #13]
 800c968:	2324      	movs	r3, #36	; 0x24
 800c96a:	22b8      	movs	r2, #184	; 0xb8
 800c96c:	189b      	adds	r3, r3, r2
 800c96e:	19db      	adds	r3, r3, r7
 800c970:	220c      	movs	r2, #12
 800c972:	f7f9 fe87 	bl	8006684 <Sensors_I2C_ReadRegister>
 800c976:	1e03      	subs	r3, r0, #0
 800c978:	d004      	beq.n	800c984 <get_st_biases+0x3e0>
            return -1;
 800c97a:	2301      	movs	r3, #1
 800c97c:	425b      	negs	r3, r3
 800c97e:	e236      	b.n	800cdee <get_st_biases+0x84a>
 800c980:	2000002c 	.word	0x2000002c
        accel_cur[0] = ((short)data[0] << 8) | data[1];
 800c984:	2624      	movs	r6, #36	; 0x24
 800c986:	20b8      	movs	r0, #184	; 0xb8
 800c988:	1833      	adds	r3, r6, r0
 800c98a:	19db      	adds	r3, r3, r7
 800c98c:	781b      	ldrb	r3, [r3, #0]
 800c98e:	021b      	lsls	r3, r3, #8
 800c990:	b21a      	sxth	r2, r3
 800c992:	1833      	adds	r3, r6, r0
 800c994:	19db      	adds	r3, r3, r7
 800c996:	785b      	ldrb	r3, [r3, #1]
 800c998:	b21b      	sxth	r3, r3
 800c99a:	4313      	orrs	r3, r2
 800c99c:	b21b      	sxth	r3, r3
 800c99e:	211c      	movs	r1, #28
 800c9a0:	180a      	adds	r2, r1, r0
 800c9a2:	19d2      	adds	r2, r2, r7
 800c9a4:	8013      	strh	r3, [r2, #0]
        accel_cur[1] = ((short)data[2] << 8) | data[3];
 800c9a6:	1833      	adds	r3, r6, r0
 800c9a8:	19db      	adds	r3, r3, r7
 800c9aa:	789b      	ldrb	r3, [r3, #2]
 800c9ac:	021b      	lsls	r3, r3, #8
 800c9ae:	b21a      	sxth	r2, r3
 800c9b0:	1833      	adds	r3, r6, r0
 800c9b2:	19db      	adds	r3, r3, r7
 800c9b4:	78db      	ldrb	r3, [r3, #3]
 800c9b6:	b21b      	sxth	r3, r3
 800c9b8:	4313      	orrs	r3, r2
 800c9ba:	b21b      	sxth	r3, r3
 800c9bc:	180a      	adds	r2, r1, r0
 800c9be:	19d2      	adds	r2, r2, r7
 800c9c0:	8053      	strh	r3, [r2, #2]
        accel_cur[2] = ((short)data[4] << 8) | data[5];
 800c9c2:	1833      	adds	r3, r6, r0
 800c9c4:	19db      	adds	r3, r3, r7
 800c9c6:	791b      	ldrb	r3, [r3, #4]
 800c9c8:	021b      	lsls	r3, r3, #8
 800c9ca:	b21a      	sxth	r2, r3
 800c9cc:	1833      	adds	r3, r6, r0
 800c9ce:	19db      	adds	r3, r3, r7
 800c9d0:	795b      	ldrb	r3, [r3, #5]
 800c9d2:	b21b      	sxth	r3, r3
 800c9d4:	4313      	orrs	r3, r2
 800c9d6:	b21b      	sxth	r3, r3
 800c9d8:	180a      	adds	r2, r1, r0
 800c9da:	19d2      	adds	r2, r2, r7
 800c9dc:	8093      	strh	r3, [r2, #4]
        accel[0] += (long)accel_cur[0];
 800c9de:	23c0      	movs	r3, #192	; 0xc0
 800c9e0:	18fa      	adds	r2, r7, r3
 800c9e2:	6813      	ldr	r3, [r2, #0]
 800c9e4:	681a      	ldr	r2, [r3, #0]
 800c9e6:	180b      	adds	r3, r1, r0
 800c9e8:	19db      	adds	r3, r3, r7
 800c9ea:	2000      	movs	r0, #0
 800c9ec:	5e1b      	ldrsh	r3, [r3, r0]
 800c9ee:	18d2      	adds	r2, r2, r3
 800c9f0:	20c0      	movs	r0, #192	; 0xc0
 800c9f2:	183b      	adds	r3, r7, r0
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	601a      	str	r2, [r3, #0]
        accel[1] += (long)accel_cur[1];
 800c9f8:	0002      	movs	r2, r0
 800c9fa:	18bb      	adds	r3, r7, r2
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	3304      	adds	r3, #4
 800ca00:	6818      	ldr	r0, [r3, #0]
 800ca02:	23b8      	movs	r3, #184	; 0xb8
 800ca04:	18c9      	adds	r1, r1, r3
 800ca06:	19cb      	adds	r3, r1, r7
 800ca08:	2202      	movs	r2, #2
 800ca0a:	5e9b      	ldrsh	r3, [r3, r2]
 800ca0c:	0019      	movs	r1, r3
 800ca0e:	22c0      	movs	r2, #192	; 0xc0
 800ca10:	18bb      	adds	r3, r7, r2
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	1d1a      	adds	r2, r3, #4
 800ca16:	1843      	adds	r3, r0, r1
 800ca18:	6013      	str	r3, [r2, #0]
        accel[2] += (long)accel_cur[2];
 800ca1a:	22c0      	movs	r2, #192	; 0xc0
 800ca1c:	18b9      	adds	r1, r7, r2
 800ca1e:	680b      	ldr	r3, [r1, #0]
 800ca20:	3308      	adds	r3, #8
 800ca22:	6818      	ldr	r0, [r3, #0]
 800ca24:	211c      	movs	r1, #28
 800ca26:	23b8      	movs	r3, #184	; 0xb8
 800ca28:	18c9      	adds	r1, r1, r3
 800ca2a:	19cb      	adds	r3, r1, r7
 800ca2c:	2204      	movs	r2, #4
 800ca2e:	5e9b      	ldrsh	r3, [r3, r2]
 800ca30:	0019      	movs	r1, r3
 800ca32:	22c0      	movs	r2, #192	; 0xc0
 800ca34:	18ba      	adds	r2, r7, r2
 800ca36:	6813      	ldr	r3, [r2, #0]
 800ca38:	3308      	adds	r3, #8
 800ca3a:	001a      	movs	r2, r3
 800ca3c:	1843      	adds	r3, r0, r1
 800ca3e:	6013      	str	r3, [r2, #0]
        gyro_cur[0] = (((short)data[6] << 8) | data[7]);
 800ca40:	0031      	movs	r1, r6
 800ca42:	26b8      	movs	r6, #184	; 0xb8
 800ca44:	198b      	adds	r3, r1, r6
 800ca46:	19db      	adds	r3, r3, r7
 800ca48:	799b      	ldrb	r3, [r3, #6]
 800ca4a:	021b      	lsls	r3, r3, #8
 800ca4c:	b21a      	sxth	r2, r3
 800ca4e:	198b      	adds	r3, r1, r6
 800ca50:	19db      	adds	r3, r3, r7
 800ca52:	79db      	ldrb	r3, [r3, #7]
 800ca54:	b21b      	sxth	r3, r3
 800ca56:	4313      	orrs	r3, r2
 800ca58:	b21b      	sxth	r3, r3
 800ca5a:	2014      	movs	r0, #20
 800ca5c:	1982      	adds	r2, r0, r6
 800ca5e:	19d2      	adds	r2, r2, r7
 800ca60:	8013      	strh	r3, [r2, #0]
        gyro_cur[1] = (((short)data[8] << 8) | data[9]);
 800ca62:	198b      	adds	r3, r1, r6
 800ca64:	19db      	adds	r3, r3, r7
 800ca66:	7a1b      	ldrb	r3, [r3, #8]
 800ca68:	021b      	lsls	r3, r3, #8
 800ca6a:	b21a      	sxth	r2, r3
 800ca6c:	198b      	adds	r3, r1, r6
 800ca6e:	19db      	adds	r3, r3, r7
 800ca70:	7a5b      	ldrb	r3, [r3, #9]
 800ca72:	b21b      	sxth	r3, r3
 800ca74:	4313      	orrs	r3, r2
 800ca76:	b21b      	sxth	r3, r3
 800ca78:	1982      	adds	r2, r0, r6
 800ca7a:	19d2      	adds	r2, r2, r7
 800ca7c:	8053      	strh	r3, [r2, #2]
        gyro_cur[2] = (((short)data[10] << 8) | data[11]);
 800ca7e:	198b      	adds	r3, r1, r6
 800ca80:	19db      	adds	r3, r3, r7
 800ca82:	7a9b      	ldrb	r3, [r3, #10]
 800ca84:	021b      	lsls	r3, r3, #8
 800ca86:	b21a      	sxth	r2, r3
 800ca88:	198b      	adds	r3, r1, r6
 800ca8a:	19db      	adds	r3, r3, r7
 800ca8c:	7adb      	ldrb	r3, [r3, #11]
 800ca8e:	b21b      	sxth	r3, r3
 800ca90:	4313      	orrs	r3, r2
 800ca92:	b21b      	sxth	r3, r3
 800ca94:	0006      	movs	r6, r0
 800ca96:	21b8      	movs	r1, #184	; 0xb8
 800ca98:	1872      	adds	r2, r6, r1
 800ca9a:	19d2      	adds	r2, r2, r7
 800ca9c:	8093      	strh	r3, [r2, #4]
        gyro[0] += (long)gyro_cur[0];
 800ca9e:	20c4      	movs	r0, #196	; 0xc4
 800caa0:	183b      	adds	r3, r7, r0
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	681a      	ldr	r2, [r3, #0]
 800caa6:	1873      	adds	r3, r6, r1
 800caa8:	19db      	adds	r3, r3, r7
 800caaa:	2100      	movs	r1, #0
 800caac:	5e5b      	ldrsh	r3, [r3, r1]
 800caae:	18d2      	adds	r2, r2, r3
 800cab0:	183b      	adds	r3, r7, r0
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	601a      	str	r2, [r3, #0]
        gyro[1] += (long)gyro_cur[1];
 800cab6:	183a      	adds	r2, r7, r0
 800cab8:	6813      	ldr	r3, [r2, #0]
 800caba:	3304      	adds	r3, #4
 800cabc:	6818      	ldr	r0, [r3, #0]
 800cabe:	21b8      	movs	r1, #184	; 0xb8
 800cac0:	1872      	adds	r2, r6, r1
 800cac2:	19d3      	adds	r3, r2, r7
 800cac4:	2202      	movs	r2, #2
 800cac6:	5e9b      	ldrsh	r3, [r3, r2]
 800cac8:	0019      	movs	r1, r3
 800caca:	23c4      	movs	r3, #196	; 0xc4
 800cacc:	18fa      	adds	r2, r7, r3
 800cace:	6813      	ldr	r3, [r2, #0]
 800cad0:	1d1a      	adds	r2, r3, #4
 800cad2:	1843      	adds	r3, r0, r1
 800cad4:	6013      	str	r3, [r2, #0]
        gyro[2] += (long)gyro_cur[2];
 800cad6:	23c4      	movs	r3, #196	; 0xc4
 800cad8:	18fa      	adds	r2, r7, r3
 800cada:	6813      	ldr	r3, [r2, #0]
 800cadc:	3308      	adds	r3, #8
 800cade:	6818      	ldr	r0, [r3, #0]
 800cae0:	21b8      	movs	r1, #184	; 0xb8
 800cae2:	1872      	adds	r2, r6, r1
 800cae4:	19d3      	adds	r3, r2, r7
 800cae6:	2204      	movs	r2, #4
 800cae8:	5e9b      	ldrsh	r3, [r3, r2]
 800caea:	0019      	movs	r1, r3
 800caec:	23c4      	movs	r3, #196	; 0xc4
 800caee:	18fb      	adds	r3, r7, r3
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	3308      	adds	r3, #8
 800caf4:	001a      	movs	r2, r3
 800caf6:	1843      	adds	r3, r0, r1
 800caf8:	6013      	str	r3, [r2, #0]
    for (ii = 0; ii < packet_count; ii++) {
 800cafa:	2237      	movs	r2, #55	; 0x37
 800cafc:	21b8      	movs	r1, #184	; 0xb8
 800cafe:	1853      	adds	r3, r2, r1
 800cb00:	19db      	adds	r3, r3, r7
 800cb02:	781b      	ldrb	r3, [r3, #0]
 800cb04:	1852      	adds	r2, r2, r1
 800cb06:	19d2      	adds	r2, r2, r7
 800cb08:	3301      	adds	r3, #1
 800cb0a:	7013      	strb	r3, [r2, #0]
 800cb0c:	2337      	movs	r3, #55	; 0x37
 800cb0e:	21b8      	movs	r1, #184	; 0xb8
 800cb10:	185b      	adds	r3, r3, r1
 800cb12:	19da      	adds	r2, r3, r7
 800cb14:	2633      	movs	r6, #51	; 0x33
 800cb16:	1873      	adds	r3, r6, r1
 800cb18:	19db      	adds	r3, r3, r7
 800cb1a:	7812      	ldrb	r2, [r2, #0]
 800cb1c:	781b      	ldrb	r3, [r3, #0]
 800cb1e:	429a      	cmp	r2, r3
 800cb20:	d200      	bcs.n	800cb24 <get_st_biases+0x580>
 800cb22:	e71b      	b.n	800c95c <get_st_biases+0x3b8>
            packet_count);
        /* Don't remove gravity! */
        accel[2] -= 65536L;
    }
#else
    gyro[0] = (long)(((long long)gyro[0]<<16) / test.gyro_sens / packet_count);
 800cb24:	23c4      	movs	r3, #196	; 0xc4
 800cb26:	18fa      	adds	r2, r7, r3
 800cb28:	6813      	ldr	r3, [r2, #0]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	22b0      	movs	r2, #176	; 0xb0
 800cb2e:	18b8      	adds	r0, r7, r2
 800cb30:	6003      	str	r3, [r0, #0]
 800cb32:	17db      	asrs	r3, r3, #31
 800cb34:	20b4      	movs	r0, #180	; 0xb4
 800cb36:	1838      	adds	r0, r7, r0
 800cb38:	6003      	str	r3, [r0, #0]
 800cb3a:	18ba      	adds	r2, r7, r2
 800cb3c:	6853      	ldr	r3, [r2, #4]
 800cb3e:	6812      	ldr	r2, [r2, #0]
 800cb40:	0011      	movs	r1, r2
 800cb42:	140d      	asrs	r5, r1, #16
 800cb44:	0013      	movs	r3, r2
 800cb46:	041c      	lsls	r4, r3, #16
 800cb48:	2383      	movs	r3, #131	; 0x83
 800cb4a:	22a8      	movs	r2, #168	; 0xa8
 800cb4c:	18b8      	adds	r0, r7, r2
 800cb4e:	6003      	str	r3, [r0, #0]
 800cb50:	2300      	movs	r3, #0
 800cb52:	20ac      	movs	r0, #172	; 0xac
 800cb54:	1838      	adds	r0, r7, r0
 800cb56:	6003      	str	r3, [r0, #0]
 800cb58:	18ba      	adds	r2, r7, r2
 800cb5a:	6853      	ldr	r3, [r2, #4]
 800cb5c:	6812      	ldr	r2, [r2, #0]
 800cb5e:	0020      	movs	r0, r4
 800cb60:	0029      	movs	r1, r5
 800cb62:	f7f6 fc81 	bl	8003468 <__aeabi_ldivmod>
 800cb66:	0002      	movs	r2, r0
 800cb68:	000b      	movs	r3, r1
 800cb6a:	0010      	movs	r0, r2
 800cb6c:	0019      	movs	r1, r3
 800cb6e:	0035      	movs	r5, r6
 800cb70:	26b8      	movs	r6, #184	; 0xb8
 800cb72:	19aa      	adds	r2, r5, r6
 800cb74:	19d3      	adds	r3, r2, r7
 800cb76:	781b      	ldrb	r3, [r3, #0]
 800cb78:	b2db      	uxtb	r3, r3
 800cb7a:	22a0      	movs	r2, #160	; 0xa0
 800cb7c:	18bc      	adds	r4, r7, r2
 800cb7e:	6023      	str	r3, [r4, #0]
 800cb80:	2300      	movs	r3, #0
 800cb82:	24a4      	movs	r4, #164	; 0xa4
 800cb84:	193c      	adds	r4, r7, r4
 800cb86:	6023      	str	r3, [r4, #0]
 800cb88:	18ba      	adds	r2, r7, r2
 800cb8a:	6853      	ldr	r3, [r2, #4]
 800cb8c:	6812      	ldr	r2, [r2, #0]
 800cb8e:	f7f6 fc6b 	bl	8003468 <__aeabi_ldivmod>
 800cb92:	0002      	movs	r2, r0
 800cb94:	000b      	movs	r3, r1
 800cb96:	24c4      	movs	r4, #196	; 0xc4
 800cb98:	193b      	adds	r3, r7, r4
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	601a      	str	r2, [r3, #0]
    gyro[1] = (long)(((long long)gyro[1]<<16) / test.gyro_sens / packet_count);
 800cb9e:	193b      	adds	r3, r7, r4
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	3304      	adds	r3, #4
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	2298      	movs	r2, #152	; 0x98
 800cba8:	18b9      	adds	r1, r7, r2
 800cbaa:	600b      	str	r3, [r1, #0]
 800cbac:	17db      	asrs	r3, r3, #31
 800cbae:	219c      	movs	r1, #156	; 0x9c
 800cbb0:	1879      	adds	r1, r7, r1
 800cbb2:	600b      	str	r3, [r1, #0]
 800cbb4:	18bb      	adds	r3, r7, r2
 800cbb6:	685c      	ldr	r4, [r3, #4]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	001a      	movs	r2, r3
 800cbbc:	1412      	asrs	r2, r2, #16
 800cbbe:	2194      	movs	r1, #148	; 0x94
 800cbc0:	1879      	adds	r1, r7, r1
 800cbc2:	600a      	str	r2, [r1, #0]
 800cbc4:	041b      	lsls	r3, r3, #16
 800cbc6:	2190      	movs	r1, #144	; 0x90
 800cbc8:	187a      	adds	r2, r7, r1
 800cbca:	6013      	str	r3, [r2, #0]
 800cbcc:	2383      	movs	r3, #131	; 0x83
 800cbce:	2288      	movs	r2, #136	; 0x88
 800cbd0:	18b8      	adds	r0, r7, r2
 800cbd2:	6003      	str	r3, [r0, #0]
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	208c      	movs	r0, #140	; 0x8c
 800cbd8:	1838      	adds	r0, r7, r0
 800cbda:	6003      	str	r3, [r0, #0]
 800cbdc:	18bb      	adds	r3, r7, r2
 800cbde:	681a      	ldr	r2, [r3, #0]
 800cbe0:	685b      	ldr	r3, [r3, #4]
 800cbe2:	1879      	adds	r1, r7, r1
 800cbe4:	6808      	ldr	r0, [r1, #0]
 800cbe6:	6849      	ldr	r1, [r1, #4]
 800cbe8:	f7f6 fc3e 	bl	8003468 <__aeabi_ldivmod>
 800cbec:	0002      	movs	r2, r0
 800cbee:	000b      	movs	r3, r1
 800cbf0:	0010      	movs	r0, r2
 800cbf2:	0019      	movs	r1, r3
 800cbf4:	19ab      	adds	r3, r5, r6
 800cbf6:	19db      	adds	r3, r3, r7
 800cbf8:	781b      	ldrb	r3, [r3, #0]
 800cbfa:	b2db      	uxtb	r3, r3
 800cbfc:	2280      	movs	r2, #128	; 0x80
 800cbfe:	18bc      	adds	r4, r7, r2
 800cc00:	6023      	str	r3, [r4, #0]
 800cc02:	2300      	movs	r3, #0
 800cc04:	2484      	movs	r4, #132	; 0x84
 800cc06:	193c      	adds	r4, r7, r4
 800cc08:	6023      	str	r3, [r4, #0]
 800cc0a:	18bb      	adds	r3, r7, r2
 800cc0c:	681a      	ldr	r2, [r3, #0]
 800cc0e:	685b      	ldr	r3, [r3, #4]
 800cc10:	f7f6 fc2a 	bl	8003468 <__aeabi_ldivmod>
 800cc14:	0002      	movs	r2, r0
 800cc16:	000b      	movs	r3, r1
 800cc18:	0010      	movs	r0, r2
 800cc1a:	0019      	movs	r1, r3
 800cc1c:	24c4      	movs	r4, #196	; 0xc4
 800cc1e:	193b      	adds	r3, r7, r4
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	3304      	adds	r3, #4
 800cc24:	0002      	movs	r2, r0
 800cc26:	601a      	str	r2, [r3, #0]
    gyro[2] = (long)(((long long)gyro[2]<<16) / test.gyro_sens / packet_count);
 800cc28:	193b      	adds	r3, r7, r4
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	3308      	adds	r3, #8
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	67bb      	str	r3, [r7, #120]	; 0x78
 800cc32:	17db      	asrs	r3, r3, #31
 800cc34:	67fb      	str	r3, [r7, #124]	; 0x7c
 800cc36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cc38:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 800cc3a:	001a      	movs	r2, r3
 800cc3c:	1412      	asrs	r2, r2, #16
 800cc3e:	677a      	str	r2, [r7, #116]	; 0x74
 800cc40:	041b      	lsls	r3, r3, #16
 800cc42:	673b      	str	r3, [r7, #112]	; 0x70
 800cc44:	2383      	movs	r3, #131	; 0x83
 800cc46:	66bb      	str	r3, [r7, #104]	; 0x68
 800cc48:	2300      	movs	r3, #0
 800cc4a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cc4c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cc4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc50:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800cc52:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800cc54:	f7f6 fc08 	bl	8003468 <__aeabi_ldivmod>
 800cc58:	0002      	movs	r2, r0
 800cc5a:	000b      	movs	r3, r1
 800cc5c:	0010      	movs	r0, r2
 800cc5e:	0019      	movs	r1, r3
 800cc60:	19aa      	adds	r2, r5, r6
 800cc62:	19d3      	adds	r3, r2, r7
 800cc64:	781b      	ldrb	r3, [r3, #0]
 800cc66:	b2db      	uxtb	r3, r3
 800cc68:	663b      	str	r3, [r7, #96]	; 0x60
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	667b      	str	r3, [r7, #100]	; 0x64
 800cc6e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cc70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cc72:	f7f6 fbf9 	bl	8003468 <__aeabi_ldivmod>
 800cc76:	0002      	movs	r2, r0
 800cc78:	000b      	movs	r3, r1
 800cc7a:	0010      	movs	r0, r2
 800cc7c:	0019      	movs	r1, r3
 800cc7e:	24c4      	movs	r4, #196	; 0xc4
 800cc80:	193a      	adds	r2, r7, r4
 800cc82:	6813      	ldr	r3, [r2, #0]
 800cc84:	3308      	adds	r3, #8
 800cc86:	0002      	movs	r2, r0
 800cc88:	601a      	str	r2, [r3, #0]
    accel[0] = (long)(((long long)accel[0]<<16) / test.accel_sens /
 800cc8a:	26c0      	movs	r6, #192	; 0xc0
 800cc8c:	19ba      	adds	r2, r7, r6
 800cc8e:	6813      	ldr	r3, [r2, #0]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	65bb      	str	r3, [r7, #88]	; 0x58
 800cc94:	17db      	asrs	r3, r3, #31
 800cc96:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cc98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cc9a:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 800cc9c:	001a      	movs	r2, r3
 800cc9e:	1412      	asrs	r2, r2, #16
 800cca0:	657a      	str	r2, [r7, #84]	; 0x54
 800cca2:	041b      	lsls	r3, r3, #16
 800cca4:	653b      	str	r3, [r7, #80]	; 0x50
 800cca6:	2380      	movs	r3, #128	; 0x80
 800cca8:	011b      	lsls	r3, r3, #4
 800ccaa:	64bb      	str	r3, [r7, #72]	; 0x48
 800ccac:	2300      	movs	r3, #0
 800ccae:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ccb0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ccb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ccb4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800ccb6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ccb8:	f7f6 fbd6 	bl	8003468 <__aeabi_ldivmod>
 800ccbc:	0002      	movs	r2, r0
 800ccbe:	000b      	movs	r3, r1
 800ccc0:	0010      	movs	r0, r2
 800ccc2:	0019      	movs	r1, r3
 800ccc4:	23b8      	movs	r3, #184	; 0xb8
 800ccc6:	18ea      	adds	r2, r5, r3
 800ccc8:	19d3      	adds	r3, r2, r7
 800ccca:	781b      	ldrb	r3, [r3, #0]
 800cccc:	b2db      	uxtb	r3, r3
 800ccce:	643b      	str	r3, [r7, #64]	; 0x40
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	647b      	str	r3, [r7, #68]	; 0x44
 800ccd4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ccd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ccd8:	f7f6 fbc6 	bl	8003468 <__aeabi_ldivmod>
 800ccdc:	0002      	movs	r2, r0
 800ccde:	000b      	movs	r3, r1
 800cce0:	19b9      	adds	r1, r7, r6
 800cce2:	680b      	ldr	r3, [r1, #0]
 800cce4:	601a      	str	r2, [r3, #0]
        packet_count);
    accel[1] = (long)(((long long)accel[1]<<16) / test.accel_sens /
 800cce6:	19ba      	adds	r2, r7, r6
 800cce8:	6813      	ldr	r3, [r2, #0]
 800ccea:	3304      	adds	r3, #4
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	63bb      	str	r3, [r7, #56]	; 0x38
 800ccf0:	17db      	asrs	r3, r3, #31
 800ccf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ccf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccf6:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 800ccf8:	001a      	movs	r2, r3
 800ccfa:	1412      	asrs	r2, r2, #16
 800ccfc:	637a      	str	r2, [r7, #52]	; 0x34
 800ccfe:	041b      	lsls	r3, r3, #16
 800cd00:	633b      	str	r3, [r7, #48]	; 0x30
 800cd02:	2380      	movs	r3, #128	; 0x80
 800cd04:	011b      	lsls	r3, r3, #4
 800cd06:	62bb      	str	r3, [r7, #40]	; 0x28
 800cd08:	2300      	movs	r3, #0
 800cd0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cd0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cd0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cd12:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800cd14:	f7f6 fba8 	bl	8003468 <__aeabi_ldivmod>
 800cd18:	0002      	movs	r2, r0
 800cd1a:	000b      	movs	r3, r1
 800cd1c:	0010      	movs	r0, r2
 800cd1e:	0019      	movs	r1, r3
 800cd20:	23b8      	movs	r3, #184	; 0xb8
 800cd22:	18ea      	adds	r2, r5, r3
 800cd24:	19d3      	adds	r3, r2, r7
 800cd26:	781b      	ldrb	r3, [r3, #0]
 800cd28:	b2db      	uxtb	r3, r3
 800cd2a:	623b      	str	r3, [r7, #32]
 800cd2c:	2300      	movs	r3, #0
 800cd2e:	627b      	str	r3, [r7, #36]	; 0x24
 800cd30:	6a3a      	ldr	r2, [r7, #32]
 800cd32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd34:	f7f6 fb98 	bl	8003468 <__aeabi_ldivmod>
 800cd38:	0002      	movs	r2, r0
 800cd3a:	000b      	movs	r3, r1
 800cd3c:	0010      	movs	r0, r2
 800cd3e:	0019      	movs	r1, r3
 800cd40:	19ba      	adds	r2, r7, r6
 800cd42:	6813      	ldr	r3, [r2, #0]
 800cd44:	3304      	adds	r3, #4
 800cd46:	0002      	movs	r2, r0
 800cd48:	601a      	str	r2, [r3, #0]
        packet_count);
    accel[2] = (long)(((long long)accel[2]<<16) / test.accel_sens /
 800cd4a:	19ba      	adds	r2, r7, r6
 800cd4c:	6813      	ldr	r3, [r2, #0]
 800cd4e:	3308      	adds	r3, #8
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	61bb      	str	r3, [r7, #24]
 800cd54:	17db      	asrs	r3, r3, #31
 800cd56:	61fb      	str	r3, [r7, #28]
 800cd58:	69bb      	ldr	r3, [r7, #24]
 800cd5a:	69fc      	ldr	r4, [r7, #28]
 800cd5c:	001a      	movs	r2, r3
 800cd5e:	1412      	asrs	r2, r2, #16
 800cd60:	617a      	str	r2, [r7, #20]
 800cd62:	041b      	lsls	r3, r3, #16
 800cd64:	613b      	str	r3, [r7, #16]
 800cd66:	2380      	movs	r3, #128	; 0x80
 800cd68:	011b      	lsls	r3, r3, #4
 800cd6a:	60bb      	str	r3, [r7, #8]
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	60fb      	str	r3, [r7, #12]
 800cd70:	68ba      	ldr	r2, [r7, #8]
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	6938      	ldr	r0, [r7, #16]
 800cd76:	6979      	ldr	r1, [r7, #20]
 800cd78:	f7f6 fb76 	bl	8003468 <__aeabi_ldivmod>
 800cd7c:	0002      	movs	r2, r0
 800cd7e:	000b      	movs	r3, r1
 800cd80:	0010      	movs	r0, r2
 800cd82:	0019      	movs	r1, r3
 800cd84:	23b8      	movs	r3, #184	; 0xb8
 800cd86:	18eb      	adds	r3, r5, r3
 800cd88:	19db      	adds	r3, r3, r7
 800cd8a:	781b      	ldrb	r3, [r3, #0]
 800cd8c:	b2db      	uxtb	r3, r3
 800cd8e:	603b      	str	r3, [r7, #0]
 800cd90:	2300      	movs	r3, #0
 800cd92:	607b      	str	r3, [r7, #4]
 800cd94:	683a      	ldr	r2, [r7, #0]
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	f7f6 fb66 	bl	8003468 <__aeabi_ldivmod>
 800cd9c:	0002      	movs	r2, r0
 800cd9e:	000b      	movs	r3, r1
 800cda0:	0010      	movs	r0, r2
 800cda2:	0019      	movs	r1, r3
 800cda4:	19bb      	adds	r3, r7, r6
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	3308      	adds	r3, #8
 800cdaa:	0002      	movs	r2, r0
 800cdac:	601a      	str	r2, [r3, #0]
        packet_count);
    /* Don't remove gravity! */
    if (accel[2] > 0L)
 800cdae:	19bb      	adds	r3, r7, r6
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	3308      	adds	r3, #8
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	dd0b      	ble.n	800cdd2 <get_st_biases+0x82e>
        accel[2] -= 65536L;
 800cdba:	19bb      	adds	r3, r7, r6
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	3308      	adds	r3, #8
 800cdc0:	681a      	ldr	r2, [r3, #0]
 800cdc2:	19bb      	adds	r3, r7, r6
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	3308      	adds	r3, #8
 800cdc8:	490b      	ldr	r1, [pc, #44]	; (800cdf8 <get_st_biases+0x854>)
 800cdca:	468c      	mov	ip, r1
 800cdcc:	4462      	add	r2, ip
 800cdce:	601a      	str	r2, [r3, #0]
 800cdd0:	e00c      	b.n	800cdec <get_st_biases+0x848>
    else
        accel[2] += 65536L;
 800cdd2:	21c0      	movs	r1, #192	; 0xc0
 800cdd4:	187b      	adds	r3, r7, r1
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	3308      	adds	r3, #8
 800cdda:	681a      	ldr	r2, [r3, #0]
 800cddc:	187b      	adds	r3, r7, r1
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	3308      	adds	r3, #8
 800cde2:	2180      	movs	r1, #128	; 0x80
 800cde4:	0249      	lsls	r1, r1, #9
 800cde6:	468c      	mov	ip, r1
 800cde8:	4462      	add	r2, ip
 800cdea:	601a      	str	r2, [r3, #0]
#endif

    return 0;
 800cdec:	2300      	movs	r3, #0
}
 800cdee:	0018      	movs	r0, r3
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	b03d      	add	sp, #244	; 0xf4
 800cdf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cdf6:	46c0      	nop			; (mov r8, r8)
 800cdf8:	ffff0000 	.word	0xffff0000

0800cdfc <mpu_run_self_test>:
 *  @param[out] gyro        Gyro biases in q16 format.
 *  @param[out] accel       Accel biases (if applicable) in q16 format.
 *  @return     Result mask (see above).
 */
int mpu_run_self_test(long *gyro, long *accel)
{
 800cdfc:	b580      	push	{r7, lr}
 800cdfe:	b08e      	sub	sp, #56	; 0x38
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	6078      	str	r0, [r7, #4]
 800ce04:	6039      	str	r1, [r7, #0]
#ifdef MPU6050
    const unsigned char tries = 5;
 800ce06:	232e      	movs	r3, #46	; 0x2e
 800ce08:	18fb      	adds	r3, r7, r3
 800ce0a:	2205      	movs	r2, #5
 800ce0c:	701a      	strb	r2, [r3, #0]
    int result;
    unsigned char accel_fsr, fifo_sensors, sensors_on;
    unsigned short gyro_fsr, sample_rate, lpf;
    unsigned char dmp_was_on;

    if (st.chip_cfg.dmp_on) {
 800ce0e:	4b71      	ldr	r3, [pc, #452]	; (800cfd4 <mpu_run_self_test+0x1d8>)
 800ce10:	2224      	movs	r2, #36	; 0x24
 800ce12:	5c9b      	ldrb	r3, [r3, r2]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d007      	beq.n	800ce28 <mpu_run_self_test+0x2c>
        mpu_set_dmp_state(0);
 800ce18:	2000      	movs	r0, #0
 800ce1a:	f000 fa33 	bl	800d284 <mpu_set_dmp_state>
        dmp_was_on = 1;
 800ce1e:	232f      	movs	r3, #47	; 0x2f
 800ce20:	18fb      	adds	r3, r7, r3
 800ce22:	2201      	movs	r2, #1
 800ce24:	701a      	strb	r2, [r3, #0]
 800ce26:	e003      	b.n	800ce30 <mpu_run_self_test+0x34>
    } else
        dmp_was_on = 0;
 800ce28:	232f      	movs	r3, #47	; 0x2f
 800ce2a:	18fb      	adds	r3, r7, r3
 800ce2c:	2200      	movs	r2, #0
 800ce2e:	701a      	strb	r2, [r3, #0]

    /* Get initial settings. */
    mpu_get_gyro_fsr(&gyro_fsr);
 800ce30:	230c      	movs	r3, #12
 800ce32:	18fb      	adds	r3, r7, r3
 800ce34:	0018      	movs	r0, r3
 800ce36:	f7fe fc5f 	bl	800b6f8 <mpu_get_gyro_fsr>
    mpu_get_accel_fsr(&accel_fsr);
 800ce3a:	230f      	movs	r3, #15
 800ce3c:	18fb      	adds	r3, r7, r3
 800ce3e:	0018      	movs	r0, r3
 800ce40:	f7fe fcf0 	bl	800b824 <mpu_get_accel_fsr>
    mpu_get_lpf(&lpf);
 800ce44:	2308      	movs	r3, #8
 800ce46:	18fb      	adds	r3, r7, r3
 800ce48:	0018      	movs	r0, r3
 800ce4a:	f7fe fd7b 	bl	800b944 <mpu_get_lpf>
    mpu_get_sample_rate(&sample_rate);
 800ce4e:	230a      	movs	r3, #10
 800ce50:	18fb      	adds	r3, r7, r3
 800ce52:	0018      	movs	r0, r3
 800ce54:	f7fe fe0c 	bl	800ba70 <mpu_get_sample_rate>
    sensors_on = st.chip_cfg.sensors;
 800ce58:	232d      	movs	r3, #45	; 0x2d
 800ce5a:	18fb      	adds	r3, r7, r3
 800ce5c:	4a5d      	ldr	r2, [pc, #372]	; (800cfd4 <mpu_run_self_test+0x1d8>)
 800ce5e:	7a92      	ldrb	r2, [r2, #10]
 800ce60:	701a      	strb	r2, [r3, #0]
    mpu_get_fifo_config(&fifo_sensors);
 800ce62:	230e      	movs	r3, #14
 800ce64:	18fb      	adds	r3, r7, r3
 800ce66:	0018      	movs	r0, r3
 800ce68:	f7fe fefe 	bl	800bc68 <mpu_get_fifo_config>

    /* For older chips, the self-test will be different. */
#if defined MPU6050
    for (ii = 0; ii < tries; ii++)
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	637b      	str	r3, [r7, #52]	; 0x34
 800ce70:	e00a      	b.n	800ce88 <mpu_run_self_test+0x8c>
        if (!get_st_biases(gyro, accel, 0))
 800ce72:	6839      	ldr	r1, [r7, #0]
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	2200      	movs	r2, #0
 800ce78:	0018      	movs	r0, r3
 800ce7a:	f7ff fb93 	bl	800c5a4 <get_st_biases>
 800ce7e:	1e03      	subs	r3, r0, #0
 800ce80:	d009      	beq.n	800ce96 <mpu_run_self_test+0x9a>
    for (ii = 0; ii < tries; ii++)
 800ce82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce84:	3301      	adds	r3, #1
 800ce86:	637b      	str	r3, [r7, #52]	; 0x34
 800ce88:	232e      	movs	r3, #46	; 0x2e
 800ce8a:	18fb      	adds	r3, r7, r3
 800ce8c:	781b      	ldrb	r3, [r3, #0]
 800ce8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ce90:	429a      	cmp	r2, r3
 800ce92:	dbee      	blt.n	800ce72 <mpu_run_self_test+0x76>
 800ce94:	e000      	b.n	800ce98 <mpu_run_self_test+0x9c>
            break;
 800ce96:	46c0      	nop			; (mov r8, r8)
    if (ii == tries) {
 800ce98:	232e      	movs	r3, #46	; 0x2e
 800ce9a:	18fb      	adds	r3, r7, r3
 800ce9c:	781b      	ldrb	r3, [r3, #0]
 800ce9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cea0:	429a      	cmp	r2, r3
 800cea2:	d102      	bne.n	800ceaa <mpu_run_self_test+0xae>
        /* If we reach this point, we most likely encountered an I2C error.
         * We'll just report an error for all three sensors.
         */
        result = 0;
 800cea4:	2300      	movs	r3, #0
 800cea6:	633b      	str	r3, [r7, #48]	; 0x30
        goto restore;
 800cea8:	e04d      	b.n	800cf46 <mpu_run_self_test+0x14a>
    }
    for (ii = 0; ii < tries; ii++)
 800ceaa:	2300      	movs	r3, #0
 800ceac:	637b      	str	r3, [r7, #52]	; 0x34
 800ceae:	e00c      	b.n	800ceca <mpu_run_self_test+0xce>
        if (!get_st_biases(gyro_st, accel_st, 1))
 800ceb0:	2310      	movs	r3, #16
 800ceb2:	18f9      	adds	r1, r7, r3
 800ceb4:	231c      	movs	r3, #28
 800ceb6:	18fb      	adds	r3, r7, r3
 800ceb8:	2201      	movs	r2, #1
 800ceba:	0018      	movs	r0, r3
 800cebc:	f7ff fb72 	bl	800c5a4 <get_st_biases>
 800cec0:	1e03      	subs	r3, r0, #0
 800cec2:	d009      	beq.n	800ced8 <mpu_run_self_test+0xdc>
    for (ii = 0; ii < tries; ii++)
 800cec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cec6:	3301      	adds	r3, #1
 800cec8:	637b      	str	r3, [r7, #52]	; 0x34
 800ceca:	232e      	movs	r3, #46	; 0x2e
 800cecc:	18fb      	adds	r3, r7, r3
 800cece:	781b      	ldrb	r3, [r3, #0]
 800ced0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ced2:	429a      	cmp	r2, r3
 800ced4:	dbec      	blt.n	800ceb0 <mpu_run_self_test+0xb4>
 800ced6:	e000      	b.n	800ceda <mpu_run_self_test+0xde>
            break;
 800ced8:	46c0      	nop			; (mov r8, r8)
    if (ii == tries) {
 800ceda:	232e      	movs	r3, #46	; 0x2e
 800cedc:	18fb      	adds	r3, r7, r3
 800cede:	781b      	ldrb	r3, [r3, #0]
 800cee0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cee2:	429a      	cmp	r2, r3
 800cee4:	d102      	bne.n	800ceec <mpu_run_self_test+0xf0>
        /* Again, probably an I2C error. */
        result = 0;
 800cee6:	2300      	movs	r3, #0
 800cee8:	633b      	str	r3, [r7, #48]	; 0x30
        goto restore;
 800ceea:	e02c      	b.n	800cf46 <mpu_run_self_test+0x14a>
    }
    accel_result = accel_self_test(accel, accel_st);
 800ceec:	2310      	movs	r3, #16
 800ceee:	18fa      	adds	r2, r7, r3
 800cef0:	683b      	ldr	r3, [r7, #0]
 800cef2:	0011      	movs	r1, r2
 800cef4:	0018      	movs	r0, r3
 800cef6:	f7ff fa1d 	bl	800c334 <accel_self_test>
 800cefa:	0002      	movs	r2, r0
 800cefc:	232c      	movs	r3, #44	; 0x2c
 800cefe:	18fb      	adds	r3, r7, r3
 800cf00:	701a      	strb	r2, [r3, #0]
    gyro_result = gyro_self_test(gyro, gyro_st);
 800cf02:	231c      	movs	r3, #28
 800cf04:	18fa      	adds	r2, r7, r3
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	0011      	movs	r1, r2
 800cf0a:	0018      	movs	r0, r3
 800cf0c:	f7ff fa8e 	bl	800c42c <gyro_self_test>
 800cf10:	0002      	movs	r2, r0
 800cf12:	212b      	movs	r1, #43	; 0x2b
 800cf14:	187b      	adds	r3, r7, r1
 800cf16:	701a      	strb	r2, [r3, #0]

    result = 0;
 800cf18:	2300      	movs	r3, #0
 800cf1a:	633b      	str	r3, [r7, #48]	; 0x30
    if (!gyro_result)
 800cf1c:	187b      	adds	r3, r7, r1
 800cf1e:	781b      	ldrb	r3, [r3, #0]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d103      	bne.n	800cf2c <mpu_run_self_test+0x130>
        result |= 0x01;
 800cf24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf26:	2201      	movs	r2, #1
 800cf28:	4313      	orrs	r3, r2
 800cf2a:	633b      	str	r3, [r7, #48]	; 0x30
    if (!accel_result)
 800cf2c:	232c      	movs	r3, #44	; 0x2c
 800cf2e:	18fb      	adds	r3, r7, r3
 800cf30:	781b      	ldrb	r3, [r3, #0]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d103      	bne.n	800cf3e <mpu_run_self_test+0x142>
        result |= 0x02;
 800cf36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf38:	2202      	movs	r2, #2
 800cf3a:	4313      	orrs	r3, r2
 800cf3c:	633b      	str	r3, [r7, #48]	; 0x30
#ifdef AK89xx_SECONDARY
    compass_result = compass_self_test();
    if (!compass_result)
        result |= 0x04;
#else
        result |= 0x04;
 800cf3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf40:	2204      	movs	r2, #4
 800cf42:	4313      	orrs	r3, r2
 800cf44:	633b      	str	r3, [r7, #48]	; 0x30
     */
    get_st_biases(gyro, accel, 0);
    result = 0x7;
#endif
    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.gyro_fsr = 0xFF;
 800cf46:	4b23      	ldr	r3, [pc, #140]	; (800cfd4 <mpu_run_self_test+0x1d8>)
 800cf48:	22ff      	movs	r2, #255	; 0xff
 800cf4a:	721a      	strb	r2, [r3, #8]
    st.chip_cfg.accel_fsr = 0xFF;
 800cf4c:	4b21      	ldr	r3, [pc, #132]	; (800cfd4 <mpu_run_self_test+0x1d8>)
 800cf4e:	22ff      	movs	r2, #255	; 0xff
 800cf50:	725a      	strb	r2, [r3, #9]
    st.chip_cfg.lpf = 0xFF;
 800cf52:	4b20      	ldr	r3, [pc, #128]	; (800cfd4 <mpu_run_self_test+0x1d8>)
 800cf54:	22ff      	movs	r2, #255	; 0xff
 800cf56:	72da      	strb	r2, [r3, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
 800cf58:	4b1e      	ldr	r3, [pc, #120]	; (800cfd4 <mpu_run_self_test+0x1d8>)
 800cf5a:	2201      	movs	r2, #1
 800cf5c:	4252      	negs	r2, r2
 800cf5e:	81da      	strh	r2, [r3, #14]
    st.chip_cfg.sensors = 0xFF;
 800cf60:	4b1c      	ldr	r3, [pc, #112]	; (800cfd4 <mpu_run_self_test+0x1d8>)
 800cf62:	22ff      	movs	r2, #255	; 0xff
 800cf64:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.fifo_enable = 0xFF;
 800cf66:	4b1b      	ldr	r3, [pc, #108]	; (800cfd4 <mpu_run_self_test+0x1d8>)
 800cf68:	22ff      	movs	r2, #255	; 0xff
 800cf6a:	741a      	strb	r2, [r3, #16]
    st.chip_cfg.clk_src = INV_CLK_PLL;
 800cf6c:	4b19      	ldr	r3, [pc, #100]	; (800cfd4 <mpu_run_self_test+0x1d8>)
 800cf6e:	2201      	movs	r2, #1
 800cf70:	731a      	strb	r2, [r3, #12]
    mpu_set_gyro_fsr(gyro_fsr);
 800cf72:	230c      	movs	r3, #12
 800cf74:	18fb      	adds	r3, r7, r3
 800cf76:	881b      	ldrh	r3, [r3, #0]
 800cf78:	0018      	movs	r0, r3
 800cf7a:	f7fe fbed 	bl	800b758 <mpu_set_gyro_fsr>
    mpu_set_accel_fsr(accel_fsr);
 800cf7e:	230f      	movs	r3, #15
 800cf80:	18fb      	adds	r3, r7, r3
 800cf82:	781b      	ldrb	r3, [r3, #0]
 800cf84:	0018      	movs	r0, r3
 800cf86:	f7fe fc83 	bl	800b890 <mpu_set_accel_fsr>
    mpu_set_lpf(lpf);
 800cf8a:	2308      	movs	r3, #8
 800cf8c:	18fb      	adds	r3, r7, r3
 800cf8e:	881b      	ldrh	r3, [r3, #0]
 800cf90:	0018      	movs	r0, r3
 800cf92:	f7fe fd09 	bl	800b9a8 <mpu_set_lpf>
    mpu_set_sample_rate(sample_rate);
 800cf96:	230a      	movs	r3, #10
 800cf98:	18fb      	adds	r3, r7, r3
 800cf9a:	881b      	ldrh	r3, [r3, #0]
 800cf9c:	0018      	movs	r0, r3
 800cf9e:	f7fe fd7f 	bl	800baa0 <mpu_set_sample_rate>
    mpu_set_sensors(sensors_on);
 800cfa2:	232d      	movs	r3, #45	; 0x2d
 800cfa4:	18fb      	adds	r3, r7, r3
 800cfa6:	781b      	ldrb	r3, [r3, #0]
 800cfa8:	0018      	movs	r0, r3
 800cfaa:	f7fe fec9 	bl	800bd40 <mpu_set_sensors>
    mpu_configure_fifo(fifo_sensors);
 800cfae:	230e      	movs	r3, #14
 800cfb0:	18fb      	adds	r3, r7, r3
 800cfb2:	781b      	ldrb	r3, [r3, #0]
 800cfb4:	0018      	movs	r0, r3
 800cfb6:	f7fe fe67 	bl	800bc88 <mpu_configure_fifo>

    if (dmp_was_on)
 800cfba:	232f      	movs	r3, #47	; 0x2f
 800cfbc:	18fb      	adds	r3, r7, r3
 800cfbe:	781b      	ldrb	r3, [r3, #0]
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d002      	beq.n	800cfca <mpu_run_self_test+0x1ce>
        mpu_set_dmp_state(1);
 800cfc4:	2001      	movs	r0, #1
 800cfc6:	f000 f95d 	bl	800d284 <mpu_set_dmp_state>

    return result;
 800cfca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800cfcc:	0018      	movs	r0, r3
 800cfce:	46bd      	mov	sp, r7
 800cfd0:	b00e      	add	sp, #56	; 0x38
 800cfd2:	bd80      	pop	{r7, pc}
 800cfd4:	2000002c 	.word	0x2000002c

0800cfd8 <mpu_write_mem>:
 *  @param[in]  data        Bytes to write to memory.
 *  @return     0 if successful.
 */
int mpu_write_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
 800cfd8:	b590      	push	{r4, r7, lr}
 800cfda:	b085      	sub	sp, #20
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	603a      	str	r2, [r7, #0]
 800cfe0:	1dbb      	adds	r3, r7, #6
 800cfe2:	1c02      	adds	r2, r0, #0
 800cfe4:	801a      	strh	r2, [r3, #0]
 800cfe6:	1d3b      	adds	r3, r7, #4
 800cfe8:	1c0a      	adds	r2, r1, #0
 800cfea:	801a      	strh	r2, [r3, #0]
    unsigned char tmp[2];

    if (!data)
 800cfec:	683b      	ldr	r3, [r7, #0]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d102      	bne.n	800cff8 <mpu_write_mem+0x20>
        return -1;
 800cff2:	2301      	movs	r3, #1
 800cff4:	425b      	negs	r3, r3
 800cff6:	e043      	b.n	800d080 <mpu_write_mem+0xa8>
    if (!st.chip_cfg.sensors)
 800cff8:	4b23      	ldr	r3, [pc, #140]	; (800d088 <mpu_write_mem+0xb0>)
 800cffa:	7a9b      	ldrb	r3, [r3, #10]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d102      	bne.n	800d006 <mpu_write_mem+0x2e>
        return -1;
 800d000:	2301      	movs	r3, #1
 800d002:	425b      	negs	r3, r3
 800d004:	e03c      	b.n	800d080 <mpu_write_mem+0xa8>

    tmp[0] = (unsigned char)(mem_addr >> 8);
 800d006:	1dbb      	adds	r3, r7, #6
 800d008:	881b      	ldrh	r3, [r3, #0]
 800d00a:	0a1b      	lsrs	r3, r3, #8
 800d00c:	b29b      	uxth	r3, r3
 800d00e:	b2da      	uxtb	r2, r3
 800d010:	210c      	movs	r1, #12
 800d012:	187b      	adds	r3, r7, r1
 800d014:	701a      	strb	r2, [r3, #0]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 800d016:	1dbb      	adds	r3, r7, #6
 800d018:	881b      	ldrh	r3, [r3, #0]
 800d01a:	b2da      	uxtb	r2, r3
 800d01c:	187b      	adds	r3, r7, r1
 800d01e:	705a      	strb	r2, [r3, #1]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
 800d020:	187b      	adds	r3, r7, r1
 800d022:	785b      	ldrb	r3, [r3, #1]
 800d024:	001a      	movs	r2, r3
 800d026:	1d3b      	adds	r3, r7, #4
 800d028:	881b      	ldrh	r3, [r3, #0]
 800d02a:	18d2      	adds	r2, r2, r3
 800d02c:	4b16      	ldr	r3, [pc, #88]	; (800d088 <mpu_write_mem+0xb0>)
 800d02e:	685b      	ldr	r3, [r3, #4]
 800d030:	895b      	ldrh	r3, [r3, #10]
 800d032:	429a      	cmp	r2, r3
 800d034:	dd02      	ble.n	800d03c <mpu_write_mem+0x64>
        return -1;
 800d036:	2301      	movs	r3, #1
 800d038:	425b      	negs	r3, r3
 800d03a:	e021      	b.n	800d080 <mpu_write_mem+0xa8>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 800d03c:	4b12      	ldr	r3, [pc, #72]	; (800d088 <mpu_write_mem+0xb0>)
 800d03e:	685b      	ldr	r3, [r3, #4]
 800d040:	7818      	ldrb	r0, [r3, #0]
 800d042:	4b11      	ldr	r3, [pc, #68]	; (800d088 <mpu_write_mem+0xb0>)
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	7ed9      	ldrb	r1, [r3, #27]
 800d048:	230c      	movs	r3, #12
 800d04a:	18fb      	adds	r3, r7, r3
 800d04c:	2202      	movs	r2, #2
 800d04e:	f7f9 fabd 	bl	80065cc <Sensors_I2C_WriteRegister>
 800d052:	1e03      	subs	r3, r0, #0
 800d054:	d002      	beq.n	800d05c <mpu_write_mem+0x84>
        return -1;
 800d056:	2301      	movs	r3, #1
 800d058:	425b      	negs	r3, r3
 800d05a:	e011      	b.n	800d080 <mpu_write_mem+0xa8>
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
 800d05c:	4b0a      	ldr	r3, [pc, #40]	; (800d088 <mpu_write_mem+0xb0>)
 800d05e:	685b      	ldr	r3, [r3, #4]
 800d060:	7818      	ldrb	r0, [r3, #0]
 800d062:	4b09      	ldr	r3, [pc, #36]	; (800d088 <mpu_write_mem+0xb0>)
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	7e19      	ldrb	r1, [r3, #24]
 800d068:	683c      	ldr	r4, [r7, #0]
 800d06a:	1d3b      	adds	r3, r7, #4
 800d06c:	881a      	ldrh	r2, [r3, #0]
 800d06e:	0023      	movs	r3, r4
 800d070:	f7f9 faac 	bl	80065cc <Sensors_I2C_WriteRegister>
 800d074:	1e03      	subs	r3, r0, #0
 800d076:	d002      	beq.n	800d07e <mpu_write_mem+0xa6>
        return -1;
 800d078:	2301      	movs	r3, #1
 800d07a:	425b      	negs	r3, r3
 800d07c:	e000      	b.n	800d080 <mpu_write_mem+0xa8>
    return 0;
 800d07e:	2300      	movs	r3, #0
}
 800d080:	0018      	movs	r0, r3
 800d082:	46bd      	mov	sp, r7
 800d084:	b005      	add	sp, #20
 800d086:	bd90      	pop	{r4, r7, pc}
 800d088:	2000002c 	.word	0x2000002c

0800d08c <mpu_read_mem>:
 *  @param[out] data        Bytes read from memory.
 *  @return     0 if successful.
 */
int mpu_read_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
 800d08c:	b590      	push	{r4, r7, lr}
 800d08e:	b085      	sub	sp, #20
 800d090:	af00      	add	r7, sp, #0
 800d092:	603a      	str	r2, [r7, #0]
 800d094:	1dbb      	adds	r3, r7, #6
 800d096:	1c02      	adds	r2, r0, #0
 800d098:	801a      	strh	r2, [r3, #0]
 800d09a:	1d3b      	adds	r3, r7, #4
 800d09c:	1c0a      	adds	r2, r1, #0
 800d09e:	801a      	strh	r2, [r3, #0]
    unsigned char tmp[2];

    if (!data)
 800d0a0:	683b      	ldr	r3, [r7, #0]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d102      	bne.n	800d0ac <mpu_read_mem+0x20>
        return -1;
 800d0a6:	2301      	movs	r3, #1
 800d0a8:	425b      	negs	r3, r3
 800d0aa:	e043      	b.n	800d134 <mpu_read_mem+0xa8>
    if (!st.chip_cfg.sensors)
 800d0ac:	4b23      	ldr	r3, [pc, #140]	; (800d13c <mpu_read_mem+0xb0>)
 800d0ae:	7a9b      	ldrb	r3, [r3, #10]
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d102      	bne.n	800d0ba <mpu_read_mem+0x2e>
        return -1;
 800d0b4:	2301      	movs	r3, #1
 800d0b6:	425b      	negs	r3, r3
 800d0b8:	e03c      	b.n	800d134 <mpu_read_mem+0xa8>

    tmp[0] = (unsigned char)(mem_addr >> 8);
 800d0ba:	1dbb      	adds	r3, r7, #6
 800d0bc:	881b      	ldrh	r3, [r3, #0]
 800d0be:	0a1b      	lsrs	r3, r3, #8
 800d0c0:	b29b      	uxth	r3, r3
 800d0c2:	b2da      	uxtb	r2, r3
 800d0c4:	210c      	movs	r1, #12
 800d0c6:	187b      	adds	r3, r7, r1
 800d0c8:	701a      	strb	r2, [r3, #0]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 800d0ca:	1dbb      	adds	r3, r7, #6
 800d0cc:	881b      	ldrh	r3, [r3, #0]
 800d0ce:	b2da      	uxtb	r2, r3
 800d0d0:	187b      	adds	r3, r7, r1
 800d0d2:	705a      	strb	r2, [r3, #1]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
 800d0d4:	187b      	adds	r3, r7, r1
 800d0d6:	785b      	ldrb	r3, [r3, #1]
 800d0d8:	001a      	movs	r2, r3
 800d0da:	1d3b      	adds	r3, r7, #4
 800d0dc:	881b      	ldrh	r3, [r3, #0]
 800d0de:	18d2      	adds	r2, r2, r3
 800d0e0:	4b16      	ldr	r3, [pc, #88]	; (800d13c <mpu_read_mem+0xb0>)
 800d0e2:	685b      	ldr	r3, [r3, #4]
 800d0e4:	895b      	ldrh	r3, [r3, #10]
 800d0e6:	429a      	cmp	r2, r3
 800d0e8:	dd02      	ble.n	800d0f0 <mpu_read_mem+0x64>
        return -1;
 800d0ea:	2301      	movs	r3, #1
 800d0ec:	425b      	negs	r3, r3
 800d0ee:	e021      	b.n	800d134 <mpu_read_mem+0xa8>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 800d0f0:	4b12      	ldr	r3, [pc, #72]	; (800d13c <mpu_read_mem+0xb0>)
 800d0f2:	685b      	ldr	r3, [r3, #4]
 800d0f4:	7818      	ldrb	r0, [r3, #0]
 800d0f6:	4b11      	ldr	r3, [pc, #68]	; (800d13c <mpu_read_mem+0xb0>)
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	7ed9      	ldrb	r1, [r3, #27]
 800d0fc:	230c      	movs	r3, #12
 800d0fe:	18fb      	adds	r3, r7, r3
 800d100:	2202      	movs	r2, #2
 800d102:	f7f9 fa63 	bl	80065cc <Sensors_I2C_WriteRegister>
 800d106:	1e03      	subs	r3, r0, #0
 800d108:	d002      	beq.n	800d110 <mpu_read_mem+0x84>
        return -1;
 800d10a:	2301      	movs	r3, #1
 800d10c:	425b      	negs	r3, r3
 800d10e:	e011      	b.n	800d134 <mpu_read_mem+0xa8>
    if (i2c_read(st.hw->addr, st.reg->mem_r_w, length, data))
 800d110:	4b0a      	ldr	r3, [pc, #40]	; (800d13c <mpu_read_mem+0xb0>)
 800d112:	685b      	ldr	r3, [r3, #4]
 800d114:	7818      	ldrb	r0, [r3, #0]
 800d116:	4b09      	ldr	r3, [pc, #36]	; (800d13c <mpu_read_mem+0xb0>)
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	7e19      	ldrb	r1, [r3, #24]
 800d11c:	683c      	ldr	r4, [r7, #0]
 800d11e:	1d3b      	adds	r3, r7, #4
 800d120:	881a      	ldrh	r2, [r3, #0]
 800d122:	0023      	movs	r3, r4
 800d124:	f7f9 faae 	bl	8006684 <Sensors_I2C_ReadRegister>
 800d128:	1e03      	subs	r3, r0, #0
 800d12a:	d002      	beq.n	800d132 <mpu_read_mem+0xa6>
        return -1;
 800d12c:	2301      	movs	r3, #1
 800d12e:	425b      	negs	r3, r3
 800d130:	e000      	b.n	800d134 <mpu_read_mem+0xa8>
    return 0;
 800d132:	2300      	movs	r3, #0
}
 800d134:	0018      	movs	r0, r3
 800d136:	46bd      	mov	sp, r7
 800d138:	b005      	add	sp, #20
 800d13a:	bd90      	pop	{r4, r7, pc}
 800d13c:	2000002c 	.word	0x2000002c

0800d140 <mpu_load_firmware>:
 *  @param[in]  sample_rate Fixed sampling rate used when DMP is enabled.
 *  @return     0 if successful.
 */
int mpu_load_firmware(unsigned short length, const unsigned char *firmware,
    unsigned short start_addr, unsigned short sample_rate)
{
 800d140:	b590      	push	{r4, r7, lr}
 800d142:	b08b      	sub	sp, #44	; 0x2c
 800d144:	af00      	add	r7, sp, #0
 800d146:	0004      	movs	r4, r0
 800d148:	60b9      	str	r1, [r7, #8]
 800d14a:	0010      	movs	r0, r2
 800d14c:	0019      	movs	r1, r3
 800d14e:	230e      	movs	r3, #14
 800d150:	18fb      	adds	r3, r7, r3
 800d152:	1c22      	adds	r2, r4, #0
 800d154:	801a      	strh	r2, [r3, #0]
 800d156:	230c      	movs	r3, #12
 800d158:	18fb      	adds	r3, r7, r3
 800d15a:	1c02      	adds	r2, r0, #0
 800d15c:	801a      	strh	r2, [r3, #0]
 800d15e:	1dbb      	adds	r3, r7, #6
 800d160:	1c0a      	adds	r2, r1, #0
 800d162:	801a      	strh	r2, [r3, #0]
    unsigned short this_write;
    /* Must divide evenly into st.hw->bank_size to avoid bank crossings. */
#define LOAD_CHUNK  (16)
    unsigned char cur[LOAD_CHUNK], tmp[2];

    if (st.chip_cfg.dmp_loaded)
 800d164:	4b46      	ldr	r3, [pc, #280]	; (800d280 <mpu_load_firmware+0x140>)
 800d166:	2225      	movs	r2, #37	; 0x25
 800d168:	5c9b      	ldrb	r3, [r3, r2]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d002      	beq.n	800d174 <mpu_load_firmware+0x34>
        /* DMP should only be loaded once. */
        return -1;
 800d16e:	2301      	movs	r3, #1
 800d170:	425b      	negs	r3, r3
 800d172:	e081      	b.n	800d278 <mpu_load_firmware+0x138>

    if (!firmware)
 800d174:	68bb      	ldr	r3, [r7, #8]
 800d176:	2b00      	cmp	r3, #0
 800d178:	d102      	bne.n	800d180 <mpu_load_firmware+0x40>
        return -1;
 800d17a:	2301      	movs	r3, #1
 800d17c:	425b      	negs	r3, r3
 800d17e:	e07b      	b.n	800d278 <mpu_load_firmware+0x138>
    for (ii = 0; ii < length; ii += this_write) {
 800d180:	2326      	movs	r3, #38	; 0x26
 800d182:	18fb      	adds	r3, r7, r3
 800d184:	2200      	movs	r2, #0
 800d186:	801a      	strh	r2, [r3, #0]
 800d188:	e048      	b.n	800d21c <mpu_load_firmware+0xdc>
        this_write = min(LOAD_CHUNK, length - ii);
 800d18a:	230e      	movs	r3, #14
 800d18c:	18fb      	adds	r3, r7, r3
 800d18e:	881a      	ldrh	r2, [r3, #0]
 800d190:	2326      	movs	r3, #38	; 0x26
 800d192:	18fb      	adds	r3, r7, r3
 800d194:	881b      	ldrh	r3, [r3, #0]
 800d196:	1ad3      	subs	r3, r2, r3
 800d198:	2b10      	cmp	r3, #16
 800d19a:	dd00      	ble.n	800d19e <mpu_load_firmware+0x5e>
 800d19c:	2310      	movs	r3, #16
 800d19e:	2124      	movs	r1, #36	; 0x24
 800d1a0:	187a      	adds	r2, r7, r1
 800d1a2:	8013      	strh	r3, [r2, #0]
        if (mpu_write_mem(ii, this_write, (unsigned char*)&firmware[ii]))
 800d1a4:	2026      	movs	r0, #38	; 0x26
 800d1a6:	183b      	adds	r3, r7, r0
 800d1a8:	881b      	ldrh	r3, [r3, #0]
 800d1aa:	68ba      	ldr	r2, [r7, #8]
 800d1ac:	18d2      	adds	r2, r2, r3
 800d1ae:	187b      	adds	r3, r7, r1
 800d1b0:	8819      	ldrh	r1, [r3, #0]
 800d1b2:	183b      	adds	r3, r7, r0
 800d1b4:	881b      	ldrh	r3, [r3, #0]
 800d1b6:	0018      	movs	r0, r3
 800d1b8:	f7ff ff0e 	bl	800cfd8 <mpu_write_mem>
 800d1bc:	1e03      	subs	r3, r0, #0
 800d1be:	d002      	beq.n	800d1c6 <mpu_load_firmware+0x86>
            return -1;
 800d1c0:	2301      	movs	r3, #1
 800d1c2:	425b      	negs	r3, r3
 800d1c4:	e058      	b.n	800d278 <mpu_load_firmware+0x138>
        if (mpu_read_mem(ii, this_write, cur))
 800d1c6:	2314      	movs	r3, #20
 800d1c8:	18fa      	adds	r2, r7, r3
 800d1ca:	2324      	movs	r3, #36	; 0x24
 800d1cc:	18fb      	adds	r3, r7, r3
 800d1ce:	8819      	ldrh	r1, [r3, #0]
 800d1d0:	2326      	movs	r3, #38	; 0x26
 800d1d2:	18fb      	adds	r3, r7, r3
 800d1d4:	881b      	ldrh	r3, [r3, #0]
 800d1d6:	0018      	movs	r0, r3
 800d1d8:	f7ff ff58 	bl	800d08c <mpu_read_mem>
 800d1dc:	1e03      	subs	r3, r0, #0
 800d1de:	d002      	beq.n	800d1e6 <mpu_load_firmware+0xa6>
            return -1;
 800d1e0:	2301      	movs	r3, #1
 800d1e2:	425b      	negs	r3, r3
 800d1e4:	e048      	b.n	800d278 <mpu_load_firmware+0x138>
        if (memcmp(firmware+ii, cur, this_write))
 800d1e6:	2326      	movs	r3, #38	; 0x26
 800d1e8:	18fb      	adds	r3, r7, r3
 800d1ea:	881b      	ldrh	r3, [r3, #0]
 800d1ec:	68ba      	ldr	r2, [r7, #8]
 800d1ee:	18d0      	adds	r0, r2, r3
 800d1f0:	2324      	movs	r3, #36	; 0x24
 800d1f2:	18fb      	adds	r3, r7, r3
 800d1f4:	881a      	ldrh	r2, [r3, #0]
 800d1f6:	2314      	movs	r3, #20
 800d1f8:	18fb      	adds	r3, r7, r3
 800d1fa:	0019      	movs	r1, r3
 800d1fc:	f004 fe72 	bl	8011ee4 <memcmp>
 800d200:	1e03      	subs	r3, r0, #0
 800d202:	d002      	beq.n	800d20a <mpu_load_firmware+0xca>
            return -2;
 800d204:	2302      	movs	r3, #2
 800d206:	425b      	negs	r3, r3
 800d208:	e036      	b.n	800d278 <mpu_load_firmware+0x138>
    for (ii = 0; ii < length; ii += this_write) {
 800d20a:	2226      	movs	r2, #38	; 0x26
 800d20c:	18bb      	adds	r3, r7, r2
 800d20e:	18b9      	adds	r1, r7, r2
 800d210:	2224      	movs	r2, #36	; 0x24
 800d212:	18ba      	adds	r2, r7, r2
 800d214:	8809      	ldrh	r1, [r1, #0]
 800d216:	8812      	ldrh	r2, [r2, #0]
 800d218:	188a      	adds	r2, r1, r2
 800d21a:	801a      	strh	r2, [r3, #0]
 800d21c:	2326      	movs	r3, #38	; 0x26
 800d21e:	18fa      	adds	r2, r7, r3
 800d220:	230e      	movs	r3, #14
 800d222:	18fb      	adds	r3, r7, r3
 800d224:	8812      	ldrh	r2, [r2, #0]
 800d226:	881b      	ldrh	r3, [r3, #0]
 800d228:	429a      	cmp	r2, r3
 800d22a:	d3ae      	bcc.n	800d18a <mpu_load_firmware+0x4a>
    }

    /* Set program start address. */
    tmp[0] = start_addr >> 8;
 800d22c:	210c      	movs	r1, #12
 800d22e:	187b      	adds	r3, r7, r1
 800d230:	881b      	ldrh	r3, [r3, #0]
 800d232:	0a1b      	lsrs	r3, r3, #8
 800d234:	b29b      	uxth	r3, r3
 800d236:	b2da      	uxtb	r2, r3
 800d238:	2410      	movs	r4, #16
 800d23a:	193b      	adds	r3, r7, r4
 800d23c:	701a      	strb	r2, [r3, #0]
    tmp[1] = start_addr & 0xFF;
 800d23e:	187b      	adds	r3, r7, r1
 800d240:	881b      	ldrh	r3, [r3, #0]
 800d242:	b2da      	uxtb	r2, r3
 800d244:	193b      	adds	r3, r7, r4
 800d246:	705a      	strb	r2, [r3, #1]
    if (i2c_write(st.hw->addr, st.reg->prgm_start_h, 2, tmp))
 800d248:	4b0d      	ldr	r3, [pc, #52]	; (800d280 <mpu_load_firmware+0x140>)
 800d24a:	685b      	ldr	r3, [r3, #4]
 800d24c:	7818      	ldrb	r0, [r3, #0]
 800d24e:	4b0c      	ldr	r3, [pc, #48]	; (800d280 <mpu_load_firmware+0x140>)
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	7f59      	ldrb	r1, [r3, #29]
 800d254:	193b      	adds	r3, r7, r4
 800d256:	2202      	movs	r2, #2
 800d258:	f7f9 f9b8 	bl	80065cc <Sensors_I2C_WriteRegister>
 800d25c:	1e03      	subs	r3, r0, #0
 800d25e:	d002      	beq.n	800d266 <mpu_load_firmware+0x126>
        return -1;
 800d260:	2301      	movs	r3, #1
 800d262:	425b      	negs	r3, r3
 800d264:	e008      	b.n	800d278 <mpu_load_firmware+0x138>

    st.chip_cfg.dmp_loaded = 1;
 800d266:	4b06      	ldr	r3, [pc, #24]	; (800d280 <mpu_load_firmware+0x140>)
 800d268:	2225      	movs	r2, #37	; 0x25
 800d26a:	2101      	movs	r1, #1
 800d26c:	5499      	strb	r1, [r3, r2]
    st.chip_cfg.dmp_sample_rate = sample_rate;
 800d26e:	4b04      	ldr	r3, [pc, #16]	; (800d280 <mpu_load_firmware+0x140>)
 800d270:	1dba      	adds	r2, r7, #6
 800d272:	8812      	ldrh	r2, [r2, #0]
 800d274:	84da      	strh	r2, [r3, #38]	; 0x26
    return 0;
 800d276:	2300      	movs	r3, #0
}
 800d278:	0018      	movs	r0, r3
 800d27a:	46bd      	mov	sp, r7
 800d27c:	b00b      	add	sp, #44	; 0x2c
 800d27e:	bd90      	pop	{r4, r7, pc}
 800d280:	2000002c 	.word	0x2000002c

0800d284 <mpu_set_dmp_state>:
 *  @brief      Enable/disable DMP support.
 *  @param[in]  enable  1 to turn on the DMP.
 *  @return     0 if successful.
 */
int mpu_set_dmp_state(unsigned char enable)
{
 800d284:	b580      	push	{r7, lr}
 800d286:	b084      	sub	sp, #16
 800d288:	af00      	add	r7, sp, #0
 800d28a:	0002      	movs	r2, r0
 800d28c:	1dfb      	adds	r3, r7, #7
 800d28e:	701a      	strb	r2, [r3, #0]
    unsigned char tmp;
    if (st.chip_cfg.dmp_on == enable)
 800d290:	4b28      	ldr	r3, [pc, #160]	; (800d334 <mpu_set_dmp_state+0xb0>)
 800d292:	2224      	movs	r2, #36	; 0x24
 800d294:	5c9b      	ldrb	r3, [r3, r2]
 800d296:	1dfa      	adds	r2, r7, #7
 800d298:	7812      	ldrb	r2, [r2, #0]
 800d29a:	429a      	cmp	r2, r3
 800d29c:	d101      	bne.n	800d2a2 <mpu_set_dmp_state+0x1e>
        return 0;
 800d29e:	2300      	movs	r3, #0
 800d2a0:	e043      	b.n	800d32a <mpu_set_dmp_state+0xa6>

    if (enable) {
 800d2a2:	1dfb      	adds	r3, r7, #7
 800d2a4:	781b      	ldrb	r3, [r3, #0]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d028      	beq.n	800d2fc <mpu_set_dmp_state+0x78>
        if (!st.chip_cfg.dmp_loaded)
 800d2aa:	4b22      	ldr	r3, [pc, #136]	; (800d334 <mpu_set_dmp_state+0xb0>)
 800d2ac:	2225      	movs	r2, #37	; 0x25
 800d2ae:	5c9b      	ldrb	r3, [r3, r2]
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d102      	bne.n	800d2ba <mpu_set_dmp_state+0x36>
            return -1;
 800d2b4:	2301      	movs	r3, #1
 800d2b6:	425b      	negs	r3, r3
 800d2b8:	e037      	b.n	800d32a <mpu_set_dmp_state+0xa6>
        /* Disable data ready interrupt. */
        set_int_enable(0);
 800d2ba:	2000      	movs	r0, #0
 800d2bc:	f7fd ff0e 	bl	800b0dc <set_int_enable>
        /* Disable bypass mode. */
        mpu_set_bypass(0);
 800d2c0:	2000      	movs	r0, #0
 800d2c2:	f7fe fe6d 	bl	800bfa0 <mpu_set_bypass>
        /* Keep constant sample rate, FIFO rate controlled by DMP. */
        mpu_set_sample_rate(st.chip_cfg.dmp_sample_rate);
 800d2c6:	4b1b      	ldr	r3, [pc, #108]	; (800d334 <mpu_set_dmp_state+0xb0>)
 800d2c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d2ca:	0018      	movs	r0, r3
 800d2cc:	f7fe fbe8 	bl	800baa0 <mpu_set_sample_rate>
        /* Remove FIFO elements. */
        tmp = 0;
 800d2d0:	210f      	movs	r1, #15
 800d2d2:	187b      	adds	r3, r7, r1
 800d2d4:	2200      	movs	r2, #0
 800d2d6:	701a      	strb	r2, [r3, #0]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 800d2d8:	4b16      	ldr	r3, [pc, #88]	; (800d334 <mpu_set_dmp_state+0xb0>)
 800d2da:	685b      	ldr	r3, [r3, #4]
 800d2dc:	7818      	ldrb	r0, [r3, #0]
 800d2de:	187b      	adds	r3, r7, r1
 800d2e0:	2201      	movs	r2, #1
 800d2e2:	2123      	movs	r1, #35	; 0x23
 800d2e4:	f7f9 f972 	bl	80065cc <Sensors_I2C_WriteRegister>
        st.chip_cfg.dmp_on = 1;
 800d2e8:	4b12      	ldr	r3, [pc, #72]	; (800d334 <mpu_set_dmp_state+0xb0>)
 800d2ea:	2224      	movs	r2, #36	; 0x24
 800d2ec:	2101      	movs	r1, #1
 800d2ee:	5499      	strb	r1, [r3, r2]
        /* Enable DMP interrupt. */
        set_int_enable(1);
 800d2f0:	2001      	movs	r0, #1
 800d2f2:	f7fd fef3 	bl	800b0dc <set_int_enable>
        mpu_reset_fifo();
 800d2f6:	f7fe f8f9 	bl	800b4ec <mpu_reset_fifo>
 800d2fa:	e015      	b.n	800d328 <mpu_set_dmp_state+0xa4>
    } else {
        /* Disable DMP interrupt. */
        set_int_enable(0);
 800d2fc:	2000      	movs	r0, #0
 800d2fe:	f7fd feed 	bl	800b0dc <set_int_enable>
        /* Restore FIFO settings. */
        tmp = st.chip_cfg.fifo_enable;
 800d302:	4b0c      	ldr	r3, [pc, #48]	; (800d334 <mpu_set_dmp_state+0xb0>)
 800d304:	7c1a      	ldrb	r2, [r3, #16]
 800d306:	210f      	movs	r1, #15
 800d308:	187b      	adds	r3, r7, r1
 800d30a:	701a      	strb	r2, [r3, #0]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 800d30c:	4b09      	ldr	r3, [pc, #36]	; (800d334 <mpu_set_dmp_state+0xb0>)
 800d30e:	685b      	ldr	r3, [r3, #4]
 800d310:	7818      	ldrb	r0, [r3, #0]
 800d312:	187b      	adds	r3, r7, r1
 800d314:	2201      	movs	r2, #1
 800d316:	2123      	movs	r1, #35	; 0x23
 800d318:	f7f9 f958 	bl	80065cc <Sensors_I2C_WriteRegister>
        st.chip_cfg.dmp_on = 0;
 800d31c:	4b05      	ldr	r3, [pc, #20]	; (800d334 <mpu_set_dmp_state+0xb0>)
 800d31e:	2224      	movs	r2, #36	; 0x24
 800d320:	2100      	movs	r1, #0
 800d322:	5499      	strb	r1, [r3, r2]
        mpu_reset_fifo();
 800d324:	f7fe f8e2 	bl	800b4ec <mpu_reset_fifo>
    }
    return 0;
 800d328:	2300      	movs	r3, #0
}
 800d32a:	0018      	movs	r0, r3
 800d32c:	46bd      	mov	sp, r7
 800d32e:	b004      	add	sp, #16
 800d330:	bd80      	pop	{r7, pc}
 800d332:	46c0      	nop			; (mov r8, r8)
 800d334:	2000002c 	.word	0x2000002c

0800d338 <dmp_load_motion_driver_firmware>:
/**
 *  @brief  Load the DMP with this image.
 *  @return 0 if successful.
 */
int dmp_load_motion_driver_firmware(void)
{
 800d338:	b580      	push	{r7, lr}
 800d33a:	af00      	add	r7, sp, #0
    return mpu_load_firmware(DMP_CODE_SIZE, dmp_memory, sStartAddress,
 800d33c:	2380      	movs	r3, #128	; 0x80
 800d33e:	00da      	lsls	r2, r3, #3
 800d340:	4904      	ldr	r1, [pc, #16]	; (800d354 <dmp_load_motion_driver_firmware+0x1c>)
 800d342:	4805      	ldr	r0, [pc, #20]	; (800d358 <dmp_load_motion_driver_firmware+0x20>)
 800d344:	23c8      	movs	r3, #200	; 0xc8
 800d346:	f7ff fefb 	bl	800d140 <mpu_load_firmware>
 800d34a:	0003      	movs	r3, r0
        DMP_SAMPLE_RATE);
}
 800d34c:	0018      	movs	r0, r3
 800d34e:	46bd      	mov	sp, r7
 800d350:	bd80      	pop	{r7, pc}
 800d352:	46c0      	nop			; (mov r8, r8)
 800d354:	08015af0 	.word	0x08015af0
 800d358:	00000bf6 	.word	0x00000bf6

0800d35c <dmp_set_orientation>:
 *  @e inv_orientation_matrix_to_scalar.
 *  @param[in]  orient  Gyro and accel orientation in body frame.
 *  @return     0 if successful.
 */
int dmp_set_orientation(unsigned short orient)
{
 800d35c:	b5b0      	push	{r4, r5, r7, lr}
 800d35e:	b088      	sub	sp, #32
 800d360:	af00      	add	r7, sp, #0
 800d362:	0002      	movs	r2, r0
 800d364:	1dbb      	adds	r3, r7, #6
 800d366:	801a      	strh	r2, [r3, #0]
    unsigned char gyro_regs[3], accel_regs[3];
    const unsigned char gyro_axes[3] = {DINA4C, DINACD, DINA6C};
 800d368:	2014      	movs	r0, #20
 800d36a:	183b      	adds	r3, r7, r0
 800d36c:	4a70      	ldr	r2, [pc, #448]	; (800d530 <dmp_set_orientation+0x1d4>)
 800d36e:	8811      	ldrh	r1, [r2, #0]
 800d370:	8019      	strh	r1, [r3, #0]
 800d372:	7892      	ldrb	r2, [r2, #2]
 800d374:	709a      	strb	r2, [r3, #2]
    const unsigned char accel_axes[3] = {DINA0C, DINAC9, DINA2C};
 800d376:	2410      	movs	r4, #16
 800d378:	193b      	adds	r3, r7, r4
 800d37a:	4a6e      	ldr	r2, [pc, #440]	; (800d534 <dmp_set_orientation+0x1d8>)
 800d37c:	8811      	ldrh	r1, [r2, #0]
 800d37e:	8019      	strh	r1, [r3, #0]
 800d380:	7892      	ldrb	r2, [r2, #2]
 800d382:	709a      	strb	r2, [r3, #2]
    const unsigned char gyro_sign[3] = {DINA36, DINA56, DINA76};
 800d384:	230c      	movs	r3, #12
 800d386:	18fb      	adds	r3, r7, r3
 800d388:	4a6b      	ldr	r2, [pc, #428]	; (800d538 <dmp_set_orientation+0x1dc>)
 800d38a:	8811      	ldrh	r1, [r2, #0]
 800d38c:	8019      	strh	r1, [r3, #0]
 800d38e:	7892      	ldrb	r2, [r2, #2]
 800d390:	709a      	strb	r2, [r3, #2]
    const unsigned char accel_sign[3] = {DINA26, DINA46, DINA66};
 800d392:	2308      	movs	r3, #8
 800d394:	18fb      	adds	r3, r7, r3
 800d396:	4a69      	ldr	r2, [pc, #420]	; (800d53c <dmp_set_orientation+0x1e0>)
 800d398:	8811      	ldrh	r1, [r2, #0]
 800d39a:	8019      	strh	r1, [r3, #0]
 800d39c:	7892      	ldrb	r2, [r2, #2]
 800d39e:	709a      	strb	r2, [r3, #2]

    gyro_regs[0] = gyro_axes[orient & 3];
 800d3a0:	1dbb      	adds	r3, r7, #6
 800d3a2:	881b      	ldrh	r3, [r3, #0]
 800d3a4:	2203      	movs	r2, #3
 800d3a6:	4013      	ands	r3, r2
 800d3a8:	183a      	adds	r2, r7, r0
 800d3aa:	5cd2      	ldrb	r2, [r2, r3]
 800d3ac:	211c      	movs	r1, #28
 800d3ae:	187b      	adds	r3, r7, r1
 800d3b0:	701a      	strb	r2, [r3, #0]
    gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
 800d3b2:	1dbb      	adds	r3, r7, #6
 800d3b4:	881b      	ldrh	r3, [r3, #0]
 800d3b6:	08db      	lsrs	r3, r3, #3
 800d3b8:	b29b      	uxth	r3, r3
 800d3ba:	001a      	movs	r2, r3
 800d3bc:	2303      	movs	r3, #3
 800d3be:	4013      	ands	r3, r2
 800d3c0:	183a      	adds	r2, r7, r0
 800d3c2:	5cd2      	ldrb	r2, [r2, r3]
 800d3c4:	187b      	adds	r3, r7, r1
 800d3c6:	705a      	strb	r2, [r3, #1]
    gyro_regs[2] = gyro_axes[(orient >> 6) & 3];
 800d3c8:	1dbb      	adds	r3, r7, #6
 800d3ca:	881b      	ldrh	r3, [r3, #0]
 800d3cc:	099b      	lsrs	r3, r3, #6
 800d3ce:	b29b      	uxth	r3, r3
 800d3d0:	001a      	movs	r2, r3
 800d3d2:	2303      	movs	r3, #3
 800d3d4:	4013      	ands	r3, r2
 800d3d6:	183a      	adds	r2, r7, r0
 800d3d8:	5cd2      	ldrb	r2, [r2, r3]
 800d3da:	187b      	adds	r3, r7, r1
 800d3dc:	709a      	strb	r2, [r3, #2]
    accel_regs[0] = accel_axes[orient & 3];
 800d3de:	1dbb      	adds	r3, r7, #6
 800d3e0:	881b      	ldrh	r3, [r3, #0]
 800d3e2:	2203      	movs	r2, #3
 800d3e4:	4013      	ands	r3, r2
 800d3e6:	193a      	adds	r2, r7, r4
 800d3e8:	5cd2      	ldrb	r2, [r2, r3]
 800d3ea:	2018      	movs	r0, #24
 800d3ec:	183b      	adds	r3, r7, r0
 800d3ee:	701a      	strb	r2, [r3, #0]
    accel_regs[1] = accel_axes[(orient >> 3) & 3];
 800d3f0:	1dbb      	adds	r3, r7, #6
 800d3f2:	881b      	ldrh	r3, [r3, #0]
 800d3f4:	08db      	lsrs	r3, r3, #3
 800d3f6:	b29b      	uxth	r3, r3
 800d3f8:	001a      	movs	r2, r3
 800d3fa:	2303      	movs	r3, #3
 800d3fc:	4013      	ands	r3, r2
 800d3fe:	193a      	adds	r2, r7, r4
 800d400:	5cd2      	ldrb	r2, [r2, r3]
 800d402:	183b      	adds	r3, r7, r0
 800d404:	705a      	strb	r2, [r3, #1]
    accel_regs[2] = accel_axes[(orient >> 6) & 3];
 800d406:	1dbb      	adds	r3, r7, #6
 800d408:	881b      	ldrh	r3, [r3, #0]
 800d40a:	099b      	lsrs	r3, r3, #6
 800d40c:	b29b      	uxth	r3, r3
 800d40e:	001a      	movs	r2, r3
 800d410:	2303      	movs	r3, #3
 800d412:	4013      	ands	r3, r2
 800d414:	193a      	adds	r2, r7, r4
 800d416:	5cd2      	ldrb	r2, [r2, r3]
 800d418:	183b      	adds	r3, r7, r0
 800d41a:	709a      	strb	r2, [r3, #2]

    /* Chip-to-body, axes only. */
    if (mpu_write_mem(FCFG_1, 3, gyro_regs))
 800d41c:	187b      	adds	r3, r7, r1
 800d41e:	4848      	ldr	r0, [pc, #288]	; (800d540 <dmp_set_orientation+0x1e4>)
 800d420:	001a      	movs	r2, r3
 800d422:	2103      	movs	r1, #3
 800d424:	f7ff fdd8 	bl	800cfd8 <mpu_write_mem>
 800d428:	1e03      	subs	r3, r0, #0
 800d42a:	d002      	beq.n	800d432 <dmp_set_orientation+0xd6>
        return -1;
 800d42c:	2301      	movs	r3, #1
 800d42e:	425b      	negs	r3, r3
 800d430:	e079      	b.n	800d526 <dmp_set_orientation+0x1ca>
    if (mpu_write_mem(FCFG_2, 3, accel_regs))
 800d432:	2318      	movs	r3, #24
 800d434:	18fb      	adds	r3, r7, r3
 800d436:	4843      	ldr	r0, [pc, #268]	; (800d544 <dmp_set_orientation+0x1e8>)
 800d438:	001a      	movs	r2, r3
 800d43a:	2103      	movs	r1, #3
 800d43c:	f7ff fdcc 	bl	800cfd8 <mpu_write_mem>
 800d440:	1e03      	subs	r3, r0, #0
 800d442:	d002      	beq.n	800d44a <dmp_set_orientation+0xee>
        return -1;
 800d444:	2301      	movs	r3, #1
 800d446:	425b      	negs	r3, r3
 800d448:	e06d      	b.n	800d526 <dmp_set_orientation+0x1ca>

    memcpy(gyro_regs, gyro_sign, 3);
 800d44a:	241c      	movs	r4, #28
 800d44c:	193b      	adds	r3, r7, r4
 800d44e:	220c      	movs	r2, #12
 800d450:	18ba      	adds	r2, r7, r2
 800d452:	8811      	ldrh	r1, [r2, #0]
 800d454:	8019      	strh	r1, [r3, #0]
 800d456:	7892      	ldrb	r2, [r2, #2]
 800d458:	709a      	strb	r2, [r3, #2]
    memcpy(accel_regs, accel_sign, 3);
 800d45a:	2518      	movs	r5, #24
 800d45c:	197a      	adds	r2, r7, r5
 800d45e:	2308      	movs	r3, #8
 800d460:	18fb      	adds	r3, r7, r3
 800d462:	0010      	movs	r0, r2
 800d464:	0019      	movs	r1, r3
 800d466:	2303      	movs	r3, #3
 800d468:	001a      	movs	r2, r3
 800d46a:	f004 fdef 	bl	801204c <memcpy>
    if (orient & 4) {
 800d46e:	1dbb      	adds	r3, r7, #6
 800d470:	881b      	ldrh	r3, [r3, #0]
 800d472:	2204      	movs	r2, #4
 800d474:	4013      	ands	r3, r2
 800d476:	d00d      	beq.n	800d494 <dmp_set_orientation+0x138>
        gyro_regs[0] |= 1;
 800d478:	193b      	adds	r3, r7, r4
 800d47a:	781b      	ldrb	r3, [r3, #0]
 800d47c:	2201      	movs	r2, #1
 800d47e:	4313      	orrs	r3, r2
 800d480:	b2da      	uxtb	r2, r3
 800d482:	193b      	adds	r3, r7, r4
 800d484:	701a      	strb	r2, [r3, #0]
        accel_regs[0] |= 1;
 800d486:	197b      	adds	r3, r7, r5
 800d488:	781b      	ldrb	r3, [r3, #0]
 800d48a:	2201      	movs	r2, #1
 800d48c:	4313      	orrs	r3, r2
 800d48e:	b2da      	uxtb	r2, r3
 800d490:	197b      	adds	r3, r7, r5
 800d492:	701a      	strb	r2, [r3, #0]
    }
    if (orient & 0x20) {
 800d494:	1dbb      	adds	r3, r7, #6
 800d496:	881b      	ldrh	r3, [r3, #0]
 800d498:	2220      	movs	r2, #32
 800d49a:	4013      	ands	r3, r2
 800d49c:	d00f      	beq.n	800d4be <dmp_set_orientation+0x162>
        gyro_regs[1] |= 1;
 800d49e:	211c      	movs	r1, #28
 800d4a0:	187b      	adds	r3, r7, r1
 800d4a2:	785b      	ldrb	r3, [r3, #1]
 800d4a4:	2201      	movs	r2, #1
 800d4a6:	4313      	orrs	r3, r2
 800d4a8:	b2da      	uxtb	r2, r3
 800d4aa:	187b      	adds	r3, r7, r1
 800d4ac:	705a      	strb	r2, [r3, #1]
        accel_regs[1] |= 1;
 800d4ae:	2118      	movs	r1, #24
 800d4b0:	187b      	adds	r3, r7, r1
 800d4b2:	785b      	ldrb	r3, [r3, #1]
 800d4b4:	2201      	movs	r2, #1
 800d4b6:	4313      	orrs	r3, r2
 800d4b8:	b2da      	uxtb	r2, r3
 800d4ba:	187b      	adds	r3, r7, r1
 800d4bc:	705a      	strb	r2, [r3, #1]
    }
    if (orient & 0x100) {
 800d4be:	1dbb      	adds	r3, r7, #6
 800d4c0:	881a      	ldrh	r2, [r3, #0]
 800d4c2:	2380      	movs	r3, #128	; 0x80
 800d4c4:	005b      	lsls	r3, r3, #1
 800d4c6:	4013      	ands	r3, r2
 800d4c8:	d00f      	beq.n	800d4ea <dmp_set_orientation+0x18e>
        gyro_regs[2] |= 1;
 800d4ca:	211c      	movs	r1, #28
 800d4cc:	187b      	adds	r3, r7, r1
 800d4ce:	789b      	ldrb	r3, [r3, #2]
 800d4d0:	2201      	movs	r2, #1
 800d4d2:	4313      	orrs	r3, r2
 800d4d4:	b2da      	uxtb	r2, r3
 800d4d6:	187b      	adds	r3, r7, r1
 800d4d8:	709a      	strb	r2, [r3, #2]
        accel_regs[2] |= 1;
 800d4da:	2118      	movs	r1, #24
 800d4dc:	187b      	adds	r3, r7, r1
 800d4de:	789b      	ldrb	r3, [r3, #2]
 800d4e0:	2201      	movs	r2, #1
 800d4e2:	4313      	orrs	r3, r2
 800d4e4:	b2da      	uxtb	r2, r3
 800d4e6:	187b      	adds	r3, r7, r1
 800d4e8:	709a      	strb	r2, [r3, #2]
    }

    /* Chip-to-body, sign only. */
    if (mpu_write_mem(FCFG_3, 3, gyro_regs))
 800d4ea:	231c      	movs	r3, #28
 800d4ec:	18fa      	adds	r2, r7, r3
 800d4ee:	2388      	movs	r3, #136	; 0x88
 800d4f0:	00db      	lsls	r3, r3, #3
 800d4f2:	2103      	movs	r1, #3
 800d4f4:	0018      	movs	r0, r3
 800d4f6:	f7ff fd6f 	bl	800cfd8 <mpu_write_mem>
 800d4fa:	1e03      	subs	r3, r0, #0
 800d4fc:	d002      	beq.n	800d504 <dmp_set_orientation+0x1a8>
        return -1;
 800d4fe:	2301      	movs	r3, #1
 800d500:	425b      	negs	r3, r3
 800d502:	e010      	b.n	800d526 <dmp_set_orientation+0x1ca>
    if (mpu_write_mem(FCFG_7, 3, accel_regs))
 800d504:	2318      	movs	r3, #24
 800d506:	18fb      	adds	r3, r7, r3
 800d508:	480f      	ldr	r0, [pc, #60]	; (800d548 <dmp_set_orientation+0x1ec>)
 800d50a:	001a      	movs	r2, r3
 800d50c:	2103      	movs	r1, #3
 800d50e:	f7ff fd63 	bl	800cfd8 <mpu_write_mem>
 800d512:	1e03      	subs	r3, r0, #0
 800d514:	d002      	beq.n	800d51c <dmp_set_orientation+0x1c0>
        return -1;
 800d516:	2301      	movs	r3, #1
 800d518:	425b      	negs	r3, r3
 800d51a:	e004      	b.n	800d526 <dmp_set_orientation+0x1ca>
    dmp.orient = orient;
 800d51c:	4b0b      	ldr	r3, [pc, #44]	; (800d54c <dmp_set_orientation+0x1f0>)
 800d51e:	1dba      	adds	r2, r7, #6
 800d520:	8812      	ldrh	r2, [r2, #0]
 800d522:	811a      	strh	r2, [r3, #8]
    return 0;
 800d524:	2300      	movs	r3, #0
}
 800d526:	0018      	movs	r0, r3
 800d528:	46bd      	mov	sp, r7
 800d52a:	b008      	add	sp, #32
 800d52c:	bdb0      	pop	{r4, r5, r7, pc}
 800d52e:	46c0      	nop			; (mov r8, r8)
 800d530:	080158f8 	.word	0x080158f8
 800d534:	080158fc 	.word	0x080158fc
 800d538:	08015900 	.word	0x08015900
 800d53c:	08015904 	.word	0x08015904
 800d540:	00000426 	.word	0x00000426
 800d544:	0000042a 	.word	0x0000042a
 800d548:	00000431 	.word	0x00000431
 800d54c:	200009d0 	.word	0x200009d0

0800d550 <dmp_set_fifo_rate>:
 *  Only used when DMP is on.
 *  @param[in]  rate    Desired fifo rate (Hz).
 *  @return     0 if successful.
 */
int dmp_set_fifo_rate(unsigned short rate)
{
 800d550:	b590      	push	{r4, r7, lr}
 800d552:	b089      	sub	sp, #36	; 0x24
 800d554:	af00      	add	r7, sp, #0
 800d556:	0002      	movs	r2, r0
 800d558:	1dbb      	adds	r3, r7, #6
 800d55a:	801a      	strh	r2, [r3, #0]
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
 800d55c:	2310      	movs	r3, #16
 800d55e:	18fb      	adds	r3, r7, r3
 800d560:	4a21      	ldr	r2, [pc, #132]	; (800d5e8 <dmp_set_fifo_rate+0x98>)
 800d562:	ca13      	ldmia	r2!, {r0, r1, r4}
 800d564:	c313      	stmia	r3!, {r0, r1, r4}
        0xc4, DINAAA, DINAF1, DINADF, DINADF, 0xBB, 0xAF, DINADF, DINADF};
    unsigned short div;
    unsigned char tmp[8];

    if (rate > DMP_SAMPLE_RATE)
 800d566:	1dbb      	adds	r3, r7, #6
 800d568:	881b      	ldrh	r3, [r3, #0]
 800d56a:	2bc8      	cmp	r3, #200	; 0xc8
 800d56c:	d902      	bls.n	800d574 <dmp_set_fifo_rate+0x24>
        return -1;
 800d56e:	2301      	movs	r3, #1
 800d570:	425b      	negs	r3, r3
 800d572:	e034      	b.n	800d5de <dmp_set_fifo_rate+0x8e>
    div = DMP_SAMPLE_RATE / rate - 1;
 800d574:	1dbb      	adds	r3, r7, #6
 800d576:	881b      	ldrh	r3, [r3, #0]
 800d578:	0019      	movs	r1, r3
 800d57a:	20c8      	movs	r0, #200	; 0xc8
 800d57c:	f7f5 fe10 	bl	80031a0 <__divsi3>
 800d580:	0003      	movs	r3, r0
 800d582:	b29a      	uxth	r2, r3
 800d584:	211e      	movs	r1, #30
 800d586:	187b      	adds	r3, r7, r1
 800d588:	3a01      	subs	r2, #1
 800d58a:	801a      	strh	r2, [r3, #0]
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
 800d58c:	187b      	adds	r3, r7, r1
 800d58e:	881b      	ldrh	r3, [r3, #0]
 800d590:	0a1b      	lsrs	r3, r3, #8
 800d592:	b29b      	uxth	r3, r3
 800d594:	b2da      	uxtb	r2, r3
 800d596:	2008      	movs	r0, #8
 800d598:	183b      	adds	r3, r7, r0
 800d59a:	701a      	strb	r2, [r3, #0]
    tmp[1] = (unsigned char)(div & 0xFF);
 800d59c:	187b      	adds	r3, r7, r1
 800d59e:	881b      	ldrh	r3, [r3, #0]
 800d5a0:	b2da      	uxtb	r2, r3
 800d5a2:	183b      	adds	r3, r7, r0
 800d5a4:	705a      	strb	r2, [r3, #1]
    if (mpu_write_mem(D_0_22, 2, tmp))
 800d5a6:	183b      	adds	r3, r7, r0
 800d5a8:	4810      	ldr	r0, [pc, #64]	; (800d5ec <dmp_set_fifo_rate+0x9c>)
 800d5aa:	001a      	movs	r2, r3
 800d5ac:	2102      	movs	r1, #2
 800d5ae:	f7ff fd13 	bl	800cfd8 <mpu_write_mem>
 800d5b2:	1e03      	subs	r3, r0, #0
 800d5b4:	d002      	beq.n	800d5bc <dmp_set_fifo_rate+0x6c>
        return -1;
 800d5b6:	2301      	movs	r3, #1
 800d5b8:	425b      	negs	r3, r3
 800d5ba:	e010      	b.n	800d5de <dmp_set_fifo_rate+0x8e>
    if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
 800d5bc:	2310      	movs	r3, #16
 800d5be:	18fb      	adds	r3, r7, r3
 800d5c0:	480b      	ldr	r0, [pc, #44]	; (800d5f0 <dmp_set_fifo_rate+0xa0>)
 800d5c2:	001a      	movs	r2, r3
 800d5c4:	210c      	movs	r1, #12
 800d5c6:	f7ff fd07 	bl	800cfd8 <mpu_write_mem>
 800d5ca:	1e03      	subs	r3, r0, #0
 800d5cc:	d002      	beq.n	800d5d4 <dmp_set_fifo_rate+0x84>
        return -1;
 800d5ce:	2301      	movs	r3, #1
 800d5d0:	425b      	negs	r3, r3
 800d5d2:	e004      	b.n	800d5de <dmp_set_fifo_rate+0x8e>

    dmp.fifo_rate = rate;
 800d5d4:	4b07      	ldr	r3, [pc, #28]	; (800d5f4 <dmp_set_fifo_rate+0xa4>)
 800d5d6:	1dba      	adds	r2, r7, #6
 800d5d8:	8812      	ldrh	r2, [r2, #0]
 800d5da:	819a      	strh	r2, [r3, #12]
    return 0;
 800d5dc:	2300      	movs	r3, #0
}
 800d5de:	0018      	movs	r0, r3
 800d5e0:	46bd      	mov	sp, r7
 800d5e2:	b009      	add	sp, #36	; 0x24
 800d5e4:	bd90      	pop	{r4, r7, pc}
 800d5e6:	46c0      	nop			; (mov r8, r8)
 800d5e8:	08015908 	.word	0x08015908
 800d5ec:	00000216 	.word	0x00000216
 800d5f0:	00000ac1 	.word	0x00000ac1
 800d5f4:	200009d0 	.word	0x200009d0

0800d5f8 <dmp_set_tap_thresh>:
 *  @param[in]  axis    1, 2, and 4 for XYZ accel, respectively.
 *  @param[in]  thresh  Tap threshold, in mg/ms.
 *  @return     0 if successful.
 */
int dmp_set_tap_thresh(unsigned char axis, unsigned short thresh)
{
 800d5f8:	b590      	push	{r4, r7, lr}
 800d5fa:	b087      	sub	sp, #28
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	0002      	movs	r2, r0
 800d600:	1dfb      	adds	r3, r7, #7
 800d602:	701a      	strb	r2, [r3, #0]
 800d604:	1d3b      	adds	r3, r7, #4
 800d606:	1c0a      	adds	r2, r1, #0
 800d608:	801a      	strh	r2, [r3, #0]
    unsigned char tmp[4], accel_fsr;
    float scaled_thresh;
    unsigned short dmp_thresh, dmp_thresh_2;
    if (!(axis & TAP_XYZ) || thresh > 1600)
 800d60a:	1dfb      	adds	r3, r7, #7
 800d60c:	781b      	ldrb	r3, [r3, #0]
 800d60e:	2207      	movs	r2, #7
 800d610:	4013      	ands	r3, r2
 800d612:	d005      	beq.n	800d620 <dmp_set_tap_thresh+0x28>
 800d614:	1d3b      	adds	r3, r7, #4
 800d616:	881a      	ldrh	r2, [r3, #0]
 800d618:	23c8      	movs	r3, #200	; 0xc8
 800d61a:	00db      	lsls	r3, r3, #3
 800d61c:	429a      	cmp	r2, r3
 800d61e:	d902      	bls.n	800d626 <dmp_set_tap_thresh+0x2e>
        return -1;
 800d620:	2301      	movs	r3, #1
 800d622:	425b      	negs	r3, r3
 800d624:	e103      	b.n	800d82e <dmp_set_tap_thresh+0x236>

    scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;
 800d626:	1d3b      	adds	r3, r7, #4
 800d628:	881b      	ldrh	r3, [r3, #0]
 800d62a:	0018      	movs	r0, r3
 800d62c:	f7f6 ff60 	bl	80044f0 <__aeabi_ui2f>
 800d630:	1c03      	adds	r3, r0, #0
 800d632:	4981      	ldr	r1, [pc, #516]	; (800d838 <dmp_set_tap_thresh+0x240>)
 800d634:	1c18      	adds	r0, r3, #0
 800d636:	f7f6 fa1b 	bl	8003a70 <__aeabi_fdiv>
 800d63a:	1c03      	adds	r3, r0, #0
 800d63c:	613b      	str	r3, [r7, #16]

    mpu_get_accel_fsr(&accel_fsr);
 800d63e:	240b      	movs	r4, #11
 800d640:	193b      	adds	r3, r7, r4
 800d642:	0018      	movs	r0, r3
 800d644:	f7fe f8ee 	bl	800b824 <mpu_get_accel_fsr>
    switch (accel_fsr) {
 800d648:	193b      	adds	r3, r7, r4
 800d64a:	781b      	ldrb	r3, [r3, #0]
 800d64c:	2b10      	cmp	r3, #16
 800d64e:	d056      	beq.n	800d6fe <dmp_set_tap_thresh+0x106>
 800d650:	dc6f      	bgt.n	800d732 <dmp_set_tap_thresh+0x13a>
 800d652:	2b08      	cmp	r3, #8
 800d654:	d039      	beq.n	800d6ca <dmp_set_tap_thresh+0xd2>
 800d656:	dc6c      	bgt.n	800d732 <dmp_set_tap_thresh+0x13a>
 800d658:	2b02      	cmp	r3, #2
 800d65a:	d002      	beq.n	800d662 <dmp_set_tap_thresh+0x6a>
 800d65c:	2b04      	cmp	r3, #4
 800d65e:	d01a      	beq.n	800d696 <dmp_set_tap_thresh+0x9e>
 800d660:	e067      	b.n	800d732 <dmp_set_tap_thresh+0x13a>
    case 2:
        dmp_thresh = (unsigned short)(scaled_thresh * 16384);
 800d662:	218d      	movs	r1, #141	; 0x8d
 800d664:	05c9      	lsls	r1, r1, #23
 800d666:	6938      	ldr	r0, [r7, #16]
 800d668:	f7f6 fbcc 	bl	8003e04 <__aeabi_fmul>
 800d66c:	1c03      	adds	r3, r0, #0
 800d66e:	2216      	movs	r2, #22
 800d670:	18bc      	adds	r4, r7, r2
 800d672:	1c18      	adds	r0, r3, #0
 800d674:	f7f5 ff4a 	bl	800350c <__aeabi_f2uiz>
 800d678:	0003      	movs	r3, r0
 800d67a:	8023      	strh	r3, [r4, #0]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
 800d67c:	496f      	ldr	r1, [pc, #444]	; (800d83c <dmp_set_tap_thresh+0x244>)
 800d67e:	6938      	ldr	r0, [r7, #16]
 800d680:	f7f6 fbc0 	bl	8003e04 <__aeabi_fmul>
 800d684:	1c03      	adds	r3, r0, #0
 800d686:	2214      	movs	r2, #20
 800d688:	18bc      	adds	r4, r7, r2
 800d68a:	1c18      	adds	r0, r3, #0
 800d68c:	f7f5 ff3e 	bl	800350c <__aeabi_f2uiz>
 800d690:	0003      	movs	r3, r0
 800d692:	8023      	strh	r3, [r4, #0]
        break;
 800d694:	e050      	b.n	800d738 <dmp_set_tap_thresh+0x140>
    case 4:
        dmp_thresh = (unsigned short)(scaled_thresh * 8192);
 800d696:	218c      	movs	r1, #140	; 0x8c
 800d698:	05c9      	lsls	r1, r1, #23
 800d69a:	6938      	ldr	r0, [r7, #16]
 800d69c:	f7f6 fbb2 	bl	8003e04 <__aeabi_fmul>
 800d6a0:	1c03      	adds	r3, r0, #0
 800d6a2:	2216      	movs	r2, #22
 800d6a4:	18bc      	adds	r4, r7, r2
 800d6a6:	1c18      	adds	r0, r3, #0
 800d6a8:	f7f5 ff30 	bl	800350c <__aeabi_f2uiz>
 800d6ac:	0003      	movs	r3, r0
 800d6ae:	8023      	strh	r3, [r4, #0]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
 800d6b0:	4963      	ldr	r1, [pc, #396]	; (800d840 <dmp_set_tap_thresh+0x248>)
 800d6b2:	6938      	ldr	r0, [r7, #16]
 800d6b4:	f7f6 fba6 	bl	8003e04 <__aeabi_fmul>
 800d6b8:	1c03      	adds	r3, r0, #0
 800d6ba:	2214      	movs	r2, #20
 800d6bc:	18bc      	adds	r4, r7, r2
 800d6be:	1c18      	adds	r0, r3, #0
 800d6c0:	f7f5 ff24 	bl	800350c <__aeabi_f2uiz>
 800d6c4:	0003      	movs	r3, r0
 800d6c6:	8023      	strh	r3, [r4, #0]
        break;
 800d6c8:	e036      	b.n	800d738 <dmp_set_tap_thresh+0x140>
    case 8:
        dmp_thresh = (unsigned short)(scaled_thresh * 4096);
 800d6ca:	218b      	movs	r1, #139	; 0x8b
 800d6cc:	05c9      	lsls	r1, r1, #23
 800d6ce:	6938      	ldr	r0, [r7, #16]
 800d6d0:	f7f6 fb98 	bl	8003e04 <__aeabi_fmul>
 800d6d4:	1c03      	adds	r3, r0, #0
 800d6d6:	2216      	movs	r2, #22
 800d6d8:	18bc      	adds	r4, r7, r2
 800d6da:	1c18      	adds	r0, r3, #0
 800d6dc:	f7f5 ff16 	bl	800350c <__aeabi_f2uiz>
 800d6e0:	0003      	movs	r3, r0
 800d6e2:	8023      	strh	r3, [r4, #0]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
 800d6e4:	4957      	ldr	r1, [pc, #348]	; (800d844 <dmp_set_tap_thresh+0x24c>)
 800d6e6:	6938      	ldr	r0, [r7, #16]
 800d6e8:	f7f6 fb8c 	bl	8003e04 <__aeabi_fmul>
 800d6ec:	1c03      	adds	r3, r0, #0
 800d6ee:	2214      	movs	r2, #20
 800d6f0:	18bc      	adds	r4, r7, r2
 800d6f2:	1c18      	adds	r0, r3, #0
 800d6f4:	f7f5 ff0a 	bl	800350c <__aeabi_f2uiz>
 800d6f8:	0003      	movs	r3, r0
 800d6fa:	8023      	strh	r3, [r4, #0]
        break;
 800d6fc:	e01c      	b.n	800d738 <dmp_set_tap_thresh+0x140>
    case 16:
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
 800d6fe:	218a      	movs	r1, #138	; 0x8a
 800d700:	05c9      	lsls	r1, r1, #23
 800d702:	6938      	ldr	r0, [r7, #16]
 800d704:	f7f6 fb7e 	bl	8003e04 <__aeabi_fmul>
 800d708:	1c03      	adds	r3, r0, #0
 800d70a:	2216      	movs	r2, #22
 800d70c:	18bc      	adds	r4, r7, r2
 800d70e:	1c18      	adds	r0, r3, #0
 800d710:	f7f5 fefc 	bl	800350c <__aeabi_f2uiz>
 800d714:	0003      	movs	r3, r0
 800d716:	8023      	strh	r3, [r4, #0]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
 800d718:	494b      	ldr	r1, [pc, #300]	; (800d848 <dmp_set_tap_thresh+0x250>)
 800d71a:	6938      	ldr	r0, [r7, #16]
 800d71c:	f7f6 fb72 	bl	8003e04 <__aeabi_fmul>
 800d720:	1c03      	adds	r3, r0, #0
 800d722:	2214      	movs	r2, #20
 800d724:	18bc      	adds	r4, r7, r2
 800d726:	1c18      	adds	r0, r3, #0
 800d728:	f7f5 fef0 	bl	800350c <__aeabi_f2uiz>
 800d72c:	0003      	movs	r3, r0
 800d72e:	8023      	strh	r3, [r4, #0]
        break;
 800d730:	e002      	b.n	800d738 <dmp_set_tap_thresh+0x140>
    default:
        return -1;
 800d732:	2301      	movs	r3, #1
 800d734:	425b      	negs	r3, r3
 800d736:	e07a      	b.n	800d82e <dmp_set_tap_thresh+0x236>
    }
    tmp[0] = (unsigned char)(dmp_thresh >> 8);
 800d738:	2016      	movs	r0, #22
 800d73a:	183b      	adds	r3, r7, r0
 800d73c:	881b      	ldrh	r3, [r3, #0]
 800d73e:	0a1b      	lsrs	r3, r3, #8
 800d740:	b29b      	uxth	r3, r3
 800d742:	b2da      	uxtb	r2, r3
 800d744:	210c      	movs	r1, #12
 800d746:	187b      	adds	r3, r7, r1
 800d748:	701a      	strb	r2, [r3, #0]
    tmp[1] = (unsigned char)(dmp_thresh & 0xFF);
 800d74a:	183b      	adds	r3, r7, r0
 800d74c:	881b      	ldrh	r3, [r3, #0]
 800d74e:	b2da      	uxtb	r2, r3
 800d750:	187b      	adds	r3, r7, r1
 800d752:	705a      	strb	r2, [r3, #1]
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
 800d754:	2014      	movs	r0, #20
 800d756:	183b      	adds	r3, r7, r0
 800d758:	881b      	ldrh	r3, [r3, #0]
 800d75a:	0a1b      	lsrs	r3, r3, #8
 800d75c:	b29b      	uxth	r3, r3
 800d75e:	b2da      	uxtb	r2, r3
 800d760:	187b      	adds	r3, r7, r1
 800d762:	709a      	strb	r2, [r3, #2]
    tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);
 800d764:	183b      	adds	r3, r7, r0
 800d766:	881b      	ldrh	r3, [r3, #0]
 800d768:	b2da      	uxtb	r2, r3
 800d76a:	187b      	adds	r3, r7, r1
 800d76c:	70da      	strb	r2, [r3, #3]

    if (axis & TAP_X) {
 800d76e:	1dfb      	adds	r3, r7, #7
 800d770:	781b      	ldrb	r3, [r3, #0]
 800d772:	2201      	movs	r2, #1
 800d774:	4013      	ands	r3, r2
 800d776:	d019      	beq.n	800d7ac <dmp_set_tap_thresh+0x1b4>
        if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
 800d778:	187a      	adds	r2, r7, r1
 800d77a:	23ea      	movs	r3, #234	; 0xea
 800d77c:	005b      	lsls	r3, r3, #1
 800d77e:	2102      	movs	r1, #2
 800d780:	0018      	movs	r0, r3
 800d782:	f7ff fc29 	bl	800cfd8 <mpu_write_mem>
 800d786:	1e03      	subs	r3, r0, #0
 800d788:	d002      	beq.n	800d790 <dmp_set_tap_thresh+0x198>
            return -1;
 800d78a:	2301      	movs	r3, #1
 800d78c:	425b      	negs	r3, r3
 800d78e:	e04e      	b.n	800d82e <dmp_set_tap_thresh+0x236>
        if (mpu_write_mem(D_1_36, 2, tmp+2))
 800d790:	230c      	movs	r3, #12
 800d792:	18fb      	adds	r3, r7, r3
 800d794:	3302      	adds	r3, #2
 800d796:	2292      	movs	r2, #146	; 0x92
 800d798:	0050      	lsls	r0, r2, #1
 800d79a:	001a      	movs	r2, r3
 800d79c:	2102      	movs	r1, #2
 800d79e:	f7ff fc1b 	bl	800cfd8 <mpu_write_mem>
 800d7a2:	1e03      	subs	r3, r0, #0
 800d7a4:	d002      	beq.n	800d7ac <dmp_set_tap_thresh+0x1b4>
            return -1;
 800d7a6:	2301      	movs	r3, #1
 800d7a8:	425b      	negs	r3, r3
 800d7aa:	e040      	b.n	800d82e <dmp_set_tap_thresh+0x236>
    }
    if (axis & TAP_Y) {
 800d7ac:	1dfb      	adds	r3, r7, #7
 800d7ae:	781b      	ldrb	r3, [r3, #0]
 800d7b0:	2202      	movs	r2, #2
 800d7b2:	4013      	ands	r3, r2
 800d7b4:	d01a      	beq.n	800d7ec <dmp_set_tap_thresh+0x1f4>
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
 800d7b6:	230c      	movs	r3, #12
 800d7b8:	18fa      	adds	r2, r7, r3
 800d7ba:	23ec      	movs	r3, #236	; 0xec
 800d7bc:	005b      	lsls	r3, r3, #1
 800d7be:	2102      	movs	r1, #2
 800d7c0:	0018      	movs	r0, r3
 800d7c2:	f7ff fc09 	bl	800cfd8 <mpu_write_mem>
 800d7c6:	1e03      	subs	r3, r0, #0
 800d7c8:	d002      	beq.n	800d7d0 <dmp_set_tap_thresh+0x1d8>
            return -1;
 800d7ca:	2301      	movs	r3, #1
 800d7cc:	425b      	negs	r3, r3
 800d7ce:	e02e      	b.n	800d82e <dmp_set_tap_thresh+0x236>
        if (mpu_write_mem(D_1_40, 2, tmp+2))
 800d7d0:	230c      	movs	r3, #12
 800d7d2:	18fb      	adds	r3, r7, r3
 800d7d4:	3302      	adds	r3, #2
 800d7d6:	2294      	movs	r2, #148	; 0x94
 800d7d8:	0050      	lsls	r0, r2, #1
 800d7da:	001a      	movs	r2, r3
 800d7dc:	2102      	movs	r1, #2
 800d7de:	f7ff fbfb 	bl	800cfd8 <mpu_write_mem>
 800d7e2:	1e03      	subs	r3, r0, #0
 800d7e4:	d002      	beq.n	800d7ec <dmp_set_tap_thresh+0x1f4>
            return -1;
 800d7e6:	2301      	movs	r3, #1
 800d7e8:	425b      	negs	r3, r3
 800d7ea:	e020      	b.n	800d82e <dmp_set_tap_thresh+0x236>
    }
    if (axis & TAP_Z) {
 800d7ec:	1dfb      	adds	r3, r7, #7
 800d7ee:	781b      	ldrb	r3, [r3, #0]
 800d7f0:	2204      	movs	r2, #4
 800d7f2:	4013      	ands	r3, r2
 800d7f4:	d01a      	beq.n	800d82c <dmp_set_tap_thresh+0x234>
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
 800d7f6:	230c      	movs	r3, #12
 800d7f8:	18fa      	adds	r2, r7, r3
 800d7fa:	23ee      	movs	r3, #238	; 0xee
 800d7fc:	005b      	lsls	r3, r3, #1
 800d7fe:	2102      	movs	r1, #2
 800d800:	0018      	movs	r0, r3
 800d802:	f7ff fbe9 	bl	800cfd8 <mpu_write_mem>
 800d806:	1e03      	subs	r3, r0, #0
 800d808:	d002      	beq.n	800d810 <dmp_set_tap_thresh+0x218>
            return -1;
 800d80a:	2301      	movs	r3, #1
 800d80c:	425b      	negs	r3, r3
 800d80e:	e00e      	b.n	800d82e <dmp_set_tap_thresh+0x236>
        if (mpu_write_mem(D_1_44, 2, tmp+2))
 800d810:	230c      	movs	r3, #12
 800d812:	18fb      	adds	r3, r7, r3
 800d814:	3302      	adds	r3, #2
 800d816:	2296      	movs	r2, #150	; 0x96
 800d818:	0050      	lsls	r0, r2, #1
 800d81a:	001a      	movs	r2, r3
 800d81c:	2102      	movs	r1, #2
 800d81e:	f7ff fbdb 	bl	800cfd8 <mpu_write_mem>
 800d822:	1e03      	subs	r3, r0, #0
 800d824:	d002      	beq.n	800d82c <dmp_set_tap_thresh+0x234>
            return -1;
 800d826:	2301      	movs	r3, #1
 800d828:	425b      	negs	r3, r3
 800d82a:	e000      	b.n	800d82e <dmp_set_tap_thresh+0x236>
    }
    return 0;
 800d82c:	2300      	movs	r3, #0
}
 800d82e:	0018      	movs	r0, r3
 800d830:	46bd      	mov	sp, r7
 800d832:	b007      	add	sp, #28
 800d834:	bd90      	pop	{r4, r7, pc}
 800d836:	46c0      	nop			; (mov r8, r8)
 800d838:	43480000 	.word	0x43480000
 800d83c:	46400000 	.word	0x46400000
 800d840:	45c00000 	.word	0x45c00000
 800d844:	45400000 	.word	0x45400000
 800d848:	44c00000 	.word	0x44c00000

0800d84c <dmp_set_tap_axes>:
 *  @brief      Set which axes will register a tap.
 *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
 *  @return     0 if successful.
 */
int dmp_set_tap_axes(unsigned char axis)
{
 800d84c:	b580      	push	{r7, lr}
 800d84e:	b084      	sub	sp, #16
 800d850:	af00      	add	r7, sp, #0
 800d852:	0002      	movs	r2, r0
 800d854:	1dfb      	adds	r3, r7, #7
 800d856:	701a      	strb	r2, [r3, #0]
    unsigned char tmp = 0;
 800d858:	210f      	movs	r1, #15
 800d85a:	187b      	adds	r3, r7, r1
 800d85c:	2200      	movs	r2, #0
 800d85e:	701a      	strb	r2, [r3, #0]

    if (axis & TAP_X)
 800d860:	1dfb      	adds	r3, r7, #7
 800d862:	781b      	ldrb	r3, [r3, #0]
 800d864:	2201      	movs	r2, #1
 800d866:	4013      	ands	r3, r2
 800d868:	d006      	beq.n	800d878 <dmp_set_tap_axes+0x2c>
        tmp |= 0x30;
 800d86a:	187b      	adds	r3, r7, r1
 800d86c:	781b      	ldrb	r3, [r3, #0]
 800d86e:	2230      	movs	r2, #48	; 0x30
 800d870:	4313      	orrs	r3, r2
 800d872:	b2da      	uxtb	r2, r3
 800d874:	187b      	adds	r3, r7, r1
 800d876:	701a      	strb	r2, [r3, #0]
    if (axis & TAP_Y)
 800d878:	1dfb      	adds	r3, r7, #7
 800d87a:	781b      	ldrb	r3, [r3, #0]
 800d87c:	2202      	movs	r2, #2
 800d87e:	4013      	ands	r3, r2
 800d880:	d007      	beq.n	800d892 <dmp_set_tap_axes+0x46>
        tmp |= 0x0C;
 800d882:	210f      	movs	r1, #15
 800d884:	187b      	adds	r3, r7, r1
 800d886:	781b      	ldrb	r3, [r3, #0]
 800d888:	220c      	movs	r2, #12
 800d88a:	4313      	orrs	r3, r2
 800d88c:	b2da      	uxtb	r2, r3
 800d88e:	187b      	adds	r3, r7, r1
 800d890:	701a      	strb	r2, [r3, #0]
    if (axis & TAP_Z)
 800d892:	1dfb      	adds	r3, r7, #7
 800d894:	781b      	ldrb	r3, [r3, #0]
 800d896:	2204      	movs	r2, #4
 800d898:	4013      	ands	r3, r2
 800d89a:	d007      	beq.n	800d8ac <dmp_set_tap_axes+0x60>
        tmp |= 0x03;
 800d89c:	210f      	movs	r1, #15
 800d89e:	187b      	adds	r3, r7, r1
 800d8a0:	781b      	ldrb	r3, [r3, #0]
 800d8a2:	2203      	movs	r2, #3
 800d8a4:	4313      	orrs	r3, r2
 800d8a6:	b2da      	uxtb	r2, r3
 800d8a8:	187b      	adds	r3, r7, r1
 800d8aa:	701a      	strb	r2, [r3, #0]
    return mpu_write_mem(D_1_72, 1, &tmp);
 800d8ac:	230f      	movs	r3, #15
 800d8ae:	18fa      	adds	r2, r7, r3
 800d8b0:	23a4      	movs	r3, #164	; 0xa4
 800d8b2:	005b      	lsls	r3, r3, #1
 800d8b4:	2101      	movs	r1, #1
 800d8b6:	0018      	movs	r0, r3
 800d8b8:	f7ff fb8e 	bl	800cfd8 <mpu_write_mem>
 800d8bc:	0003      	movs	r3, r0
}
 800d8be:	0018      	movs	r0, r3
 800d8c0:	46bd      	mov	sp, r7
 800d8c2:	b004      	add	sp, #16
 800d8c4:	bd80      	pop	{r7, pc}

0800d8c6 <dmp_set_tap_count>:
 *  @brief      Set minimum number of taps needed for an interrupt.
 *  @param[in]  min_taps    Minimum consecutive taps (1-4).
 *  @return     0 if successful.
 */
int dmp_set_tap_count(unsigned char min_taps)
{
 800d8c6:	b580      	push	{r7, lr}
 800d8c8:	b084      	sub	sp, #16
 800d8ca:	af00      	add	r7, sp, #0
 800d8cc:	0002      	movs	r2, r0
 800d8ce:	1dfb      	adds	r3, r7, #7
 800d8d0:	701a      	strb	r2, [r3, #0]
    unsigned char tmp;

    if (min_taps < 1)
 800d8d2:	1dfb      	adds	r3, r7, #7
 800d8d4:	781b      	ldrb	r3, [r3, #0]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d103      	bne.n	800d8e2 <dmp_set_tap_count+0x1c>
        min_taps = 1;
 800d8da:	1dfb      	adds	r3, r7, #7
 800d8dc:	2201      	movs	r2, #1
 800d8de:	701a      	strb	r2, [r3, #0]
 800d8e0:	e006      	b.n	800d8f0 <dmp_set_tap_count+0x2a>
    else if (min_taps > 4)
 800d8e2:	1dfb      	adds	r3, r7, #7
 800d8e4:	781b      	ldrb	r3, [r3, #0]
 800d8e6:	2b04      	cmp	r3, #4
 800d8e8:	d902      	bls.n	800d8f0 <dmp_set_tap_count+0x2a>
        min_taps = 4;
 800d8ea:	1dfb      	adds	r3, r7, #7
 800d8ec:	2204      	movs	r2, #4
 800d8ee:	701a      	strb	r2, [r3, #0]

    tmp = min_taps - 1;
 800d8f0:	1dfb      	adds	r3, r7, #7
 800d8f2:	781b      	ldrb	r3, [r3, #0]
 800d8f4:	3b01      	subs	r3, #1
 800d8f6:	b2da      	uxtb	r2, r3
 800d8f8:	210f      	movs	r1, #15
 800d8fa:	187b      	adds	r3, r7, r1
 800d8fc:	701a      	strb	r2, [r3, #0]
    return mpu_write_mem(D_1_79, 1, &tmp);
 800d8fe:	187a      	adds	r2, r7, r1
 800d900:	2350      	movs	r3, #80	; 0x50
 800d902:	33ff      	adds	r3, #255	; 0xff
 800d904:	2101      	movs	r1, #1
 800d906:	0018      	movs	r0, r3
 800d908:	f7ff fb66 	bl	800cfd8 <mpu_write_mem>
 800d90c:	0003      	movs	r3, r0
}
 800d90e:	0018      	movs	r0, r3
 800d910:	46bd      	mov	sp, r7
 800d912:	b004      	add	sp, #16
 800d914:	bd80      	pop	{r7, pc}

0800d916 <dmp_set_tap_time>:
 *  @brief      Set length between valid taps.
 *  @param[in]  time    Milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time(unsigned short time)
{
 800d916:	b5b0      	push	{r4, r5, r7, lr}
 800d918:	b084      	sub	sp, #16
 800d91a:	af00      	add	r7, sp, #0
 800d91c:	0002      	movs	r2, r0
 800d91e:	1dbb      	adds	r3, r7, #6
 800d920:	801a      	strh	r2, [r3, #0]
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
 800d922:	250e      	movs	r5, #14
 800d924:	197c      	adds	r4, r7, r5
 800d926:	1dbb      	adds	r3, r7, #6
 800d928:	881b      	ldrh	r3, [r3, #0]
 800d92a:	2105      	movs	r1, #5
 800d92c:	0018      	movs	r0, r3
 800d92e:	f7f5 fbad 	bl	800308c <__udivsi3>
 800d932:	0003      	movs	r3, r0
 800d934:	8023      	strh	r3, [r4, #0]
    tmp[0] = (unsigned char)(dmp_time >> 8);
 800d936:	0029      	movs	r1, r5
 800d938:	187b      	adds	r3, r7, r1
 800d93a:	881b      	ldrh	r3, [r3, #0]
 800d93c:	0a1b      	lsrs	r3, r3, #8
 800d93e:	b29b      	uxth	r3, r3
 800d940:	b2da      	uxtb	r2, r3
 800d942:	200c      	movs	r0, #12
 800d944:	183b      	adds	r3, r7, r0
 800d946:	701a      	strb	r2, [r3, #0]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
 800d948:	187b      	adds	r3, r7, r1
 800d94a:	881b      	ldrh	r3, [r3, #0]
 800d94c:	b2da      	uxtb	r2, r3
 800d94e:	183b      	adds	r3, r7, r0
 800d950:	705a      	strb	r2, [r3, #1]
    return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
 800d952:	183a      	adds	r2, r7, r0
 800d954:	23ef      	movs	r3, #239	; 0xef
 800d956:	005b      	lsls	r3, r3, #1
 800d958:	2102      	movs	r1, #2
 800d95a:	0018      	movs	r0, r3
 800d95c:	f7ff fb3c 	bl	800cfd8 <mpu_write_mem>
 800d960:	0003      	movs	r3, r0
}
 800d962:	0018      	movs	r0, r3
 800d964:	46bd      	mov	sp, r7
 800d966:	b004      	add	sp, #16
 800d968:	bdb0      	pop	{r4, r5, r7, pc}

0800d96a <dmp_set_tap_time_multi>:
 *  @brief      Set max time between taps to register as a multi-tap.
 *  @param[in]  time    Max milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time_multi(unsigned short time)
{
 800d96a:	b5b0      	push	{r4, r5, r7, lr}
 800d96c:	b084      	sub	sp, #16
 800d96e:	af00      	add	r7, sp, #0
 800d970:	0002      	movs	r2, r0
 800d972:	1dbb      	adds	r3, r7, #6
 800d974:	801a      	strh	r2, [r3, #0]
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
 800d976:	250e      	movs	r5, #14
 800d978:	197c      	adds	r4, r7, r5
 800d97a:	1dbb      	adds	r3, r7, #6
 800d97c:	881b      	ldrh	r3, [r3, #0]
 800d97e:	2105      	movs	r1, #5
 800d980:	0018      	movs	r0, r3
 800d982:	f7f5 fb83 	bl	800308c <__udivsi3>
 800d986:	0003      	movs	r3, r0
 800d988:	8023      	strh	r3, [r4, #0]
    tmp[0] = (unsigned char)(dmp_time >> 8);
 800d98a:	0029      	movs	r1, r5
 800d98c:	187b      	adds	r3, r7, r1
 800d98e:	881b      	ldrh	r3, [r3, #0]
 800d990:	0a1b      	lsrs	r3, r3, #8
 800d992:	b29b      	uxth	r3, r3
 800d994:	b2da      	uxtb	r2, r3
 800d996:	200c      	movs	r0, #12
 800d998:	183b      	adds	r3, r7, r0
 800d99a:	701a      	strb	r2, [r3, #0]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
 800d99c:	187b      	adds	r3, r7, r1
 800d99e:	881b      	ldrh	r3, [r3, #0]
 800d9a0:	b2da      	uxtb	r2, r3
 800d9a2:	183b      	adds	r3, r7, r0
 800d9a4:	705a      	strb	r2, [r3, #1]
    return mpu_write_mem(D_1_218, 2, tmp);
 800d9a6:	183a      	adds	r2, r7, r0
 800d9a8:	23ed      	movs	r3, #237	; 0xed
 800d9aa:	005b      	lsls	r3, r3, #1
 800d9ac:	2102      	movs	r1, #2
 800d9ae:	0018      	movs	r0, r3
 800d9b0:	f7ff fb12 	bl	800cfd8 <mpu_write_mem>
 800d9b4:	0003      	movs	r3, r0
}
 800d9b6:	0018      	movs	r0, r3
 800d9b8:	46bd      	mov	sp, r7
 800d9ba:	b004      	add	sp, #16
 800d9bc:	bdb0      	pop	{r4, r5, r7, pc}

0800d9be <dmp_set_shake_reject_thresh>:
 *  @param[in]  sf      Gyro scale factor.
 *  @param[in]  thresh  Gyro threshold in dps.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_thresh(long sf, unsigned short thresh)
{
 800d9be:	b580      	push	{r7, lr}
 800d9c0:	b084      	sub	sp, #16
 800d9c2:	af00      	add	r7, sp, #0
 800d9c4:	6078      	str	r0, [r7, #4]
 800d9c6:	000a      	movs	r2, r1
 800d9c8:	1cbb      	adds	r3, r7, #2
 800d9ca:	801a      	strh	r2, [r3, #0]
    unsigned char tmp[4];
    long thresh_scaled = sf / 1000 * thresh;
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	22fa      	movs	r2, #250	; 0xfa
 800d9d0:	0091      	lsls	r1, r2, #2
 800d9d2:	0018      	movs	r0, r3
 800d9d4:	f7f5 fbe4 	bl	80031a0 <__divsi3>
 800d9d8:	0003      	movs	r3, r0
 800d9da:	001a      	movs	r2, r3
 800d9dc:	1cbb      	adds	r3, r7, #2
 800d9de:	881b      	ldrh	r3, [r3, #0]
 800d9e0:	4353      	muls	r3, r2
 800d9e2:	60fb      	str	r3, [r7, #12]
    tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	161b      	asrs	r3, r3, #24
 800d9e8:	b2da      	uxtb	r2, r3
 800d9ea:	2108      	movs	r1, #8
 800d9ec:	187b      	adds	r3, r7, r1
 800d9ee:	701a      	strb	r2, [r3, #0]
    tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	141b      	asrs	r3, r3, #16
 800d9f4:	b2da      	uxtb	r2, r3
 800d9f6:	187b      	adds	r3, r7, r1
 800d9f8:	705a      	strb	r2, [r3, #1]
    tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	121b      	asrs	r3, r3, #8
 800d9fe:	b2da      	uxtb	r2, r3
 800da00:	187b      	adds	r3, r7, r1
 800da02:	709a      	strb	r2, [r3, #2]
    tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	b2da      	uxtb	r2, r3
 800da08:	187b      	adds	r3, r7, r1
 800da0a:	70da      	strb	r2, [r3, #3]
    return mpu_write_mem(D_1_92, 4, tmp);
 800da0c:	187a      	adds	r2, r7, r1
 800da0e:	23ae      	movs	r3, #174	; 0xae
 800da10:	005b      	lsls	r3, r3, #1
 800da12:	2104      	movs	r1, #4
 800da14:	0018      	movs	r0, r3
 800da16:	f7ff fadf 	bl	800cfd8 <mpu_write_mem>
 800da1a:	0003      	movs	r3, r0
}
 800da1c:	0018      	movs	r0, r3
 800da1e:	46bd      	mov	sp, r7
 800da20:	b004      	add	sp, #16
 800da22:	bd80      	pop	{r7, pc}

0800da24 <dmp_set_shake_reject_time>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_time(unsigned short time)
{
 800da24:	b590      	push	{r4, r7, lr}
 800da26:	b085      	sub	sp, #20
 800da28:	af00      	add	r7, sp, #0
 800da2a:	0002      	movs	r2, r0
 800da2c:	1dbb      	adds	r3, r7, #6
 800da2e:	801a      	strh	r2, [r3, #0]
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
 800da30:	1dbc      	adds	r4, r7, #6
 800da32:	1dbb      	adds	r3, r7, #6
 800da34:	881b      	ldrh	r3, [r3, #0]
 800da36:	2105      	movs	r1, #5
 800da38:	0018      	movs	r0, r3
 800da3a:	f7f5 fb27 	bl	800308c <__udivsi3>
 800da3e:	0003      	movs	r3, r0
 800da40:	8023      	strh	r3, [r4, #0]
    tmp[0] = time >> 8;
 800da42:	1dbb      	adds	r3, r7, #6
 800da44:	881b      	ldrh	r3, [r3, #0]
 800da46:	0a1b      	lsrs	r3, r3, #8
 800da48:	b29b      	uxth	r3, r3
 800da4a:	b2da      	uxtb	r2, r3
 800da4c:	210c      	movs	r1, #12
 800da4e:	187b      	adds	r3, r7, r1
 800da50:	701a      	strb	r2, [r3, #0]
    tmp[1] = time & 0xFF;
 800da52:	1dbb      	adds	r3, r7, #6
 800da54:	881b      	ldrh	r3, [r3, #0]
 800da56:	b2da      	uxtb	r2, r3
 800da58:	187b      	adds	r3, r7, r1
 800da5a:	705a      	strb	r2, [r3, #1]
    return mpu_write_mem(D_1_90,2,tmp);
 800da5c:	187a      	adds	r2, r7, r1
 800da5e:	23ad      	movs	r3, #173	; 0xad
 800da60:	005b      	lsls	r3, r3, #1
 800da62:	2102      	movs	r1, #2
 800da64:	0018      	movs	r0, r3
 800da66:	f7ff fab7 	bl	800cfd8 <mpu_write_mem>
 800da6a:	0003      	movs	r3, r0
}
 800da6c:	0018      	movs	r0, r3
 800da6e:	46bd      	mov	sp, r7
 800da70:	b005      	add	sp, #20
 800da72:	bd90      	pop	{r4, r7, pc}

0800da74 <dmp_set_shake_reject_timeout>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_timeout(unsigned short time)
{
 800da74:	b590      	push	{r4, r7, lr}
 800da76:	b085      	sub	sp, #20
 800da78:	af00      	add	r7, sp, #0
 800da7a:	0002      	movs	r2, r0
 800da7c:	1dbb      	adds	r3, r7, #6
 800da7e:	801a      	strh	r2, [r3, #0]
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
 800da80:	1dbc      	adds	r4, r7, #6
 800da82:	1dbb      	adds	r3, r7, #6
 800da84:	881b      	ldrh	r3, [r3, #0]
 800da86:	2105      	movs	r1, #5
 800da88:	0018      	movs	r0, r3
 800da8a:	f7f5 faff 	bl	800308c <__udivsi3>
 800da8e:	0003      	movs	r3, r0
 800da90:	8023      	strh	r3, [r4, #0]
    tmp[0] = time >> 8;
 800da92:	1dbb      	adds	r3, r7, #6
 800da94:	881b      	ldrh	r3, [r3, #0]
 800da96:	0a1b      	lsrs	r3, r3, #8
 800da98:	b29b      	uxth	r3, r3
 800da9a:	b2da      	uxtb	r2, r3
 800da9c:	210c      	movs	r1, #12
 800da9e:	187b      	adds	r3, r7, r1
 800daa0:	701a      	strb	r2, [r3, #0]
    tmp[1] = time & 0xFF;
 800daa2:	1dbb      	adds	r3, r7, #6
 800daa4:	881b      	ldrh	r3, [r3, #0]
 800daa6:	b2da      	uxtb	r2, r3
 800daa8:	187b      	adds	r3, r7, r1
 800daaa:	705a      	strb	r2, [r3, #1]
    return mpu_write_mem(D_1_88,2,tmp);
 800daac:	187a      	adds	r2, r7, r1
 800daae:	23ac      	movs	r3, #172	; 0xac
 800dab0:	005b      	lsls	r3, r3, #1
 800dab2:	2102      	movs	r1, #2
 800dab4:	0018      	movs	r0, r3
 800dab6:	f7ff fa8f 	bl	800cfd8 <mpu_write_mem>
 800daba:	0003      	movs	r3, r0
}
 800dabc:	0018      	movs	r0, r3
 800dabe:	46bd      	mov	sp, r7
 800dac0:	b005      	add	sp, #20
 800dac2:	bd90      	pop	{r4, r7, pc}

0800dac4 <dmp_enable_feature>:
 *  mutually exclusive.
 *  @param[in]  mask    Mask of features to enable.
 *  @return     0 if successful.
 */
int dmp_enable_feature(unsigned short mask)
{
 800dac4:	b590      	push	{r4, r7, lr}
 800dac6:	b087      	sub	sp, #28
 800dac8:	af00      	add	r7, sp, #0
 800daca:	0002      	movs	r2, r0
 800dacc:	1dbb      	adds	r3, r7, #6
 800dace:	801a      	strh	r2, [r3, #0]

    /* TODO: All of these settings can probably be integrated into the default
     * DMP image.
     */
    /* Set integration scale factor. */
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
 800dad0:	210c      	movs	r1, #12
 800dad2:	187b      	adds	r3, r7, r1
 800dad4:	2202      	movs	r2, #2
 800dad6:	701a      	strb	r2, [r3, #0]
    tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
 800dad8:	187b      	adds	r3, r7, r1
 800dada:	22ca      	movs	r2, #202	; 0xca
 800dadc:	705a      	strb	r2, [r3, #1]
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
 800dade:	187b      	adds	r3, r7, r1
 800dae0:	22e3      	movs	r2, #227	; 0xe3
 800dae2:	709a      	strb	r2, [r3, #2]
    tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
 800dae4:	187b      	adds	r3, r7, r1
 800dae6:	2209      	movs	r2, #9
 800dae8:	70da      	strb	r2, [r3, #3]
    mpu_write_mem(D_0_104, 4, tmp);
 800daea:	000c      	movs	r4, r1
 800daec:	187b      	adds	r3, r7, r1
 800daee:	001a      	movs	r2, r3
 800daf0:	2104      	movs	r1, #4
 800daf2:	2068      	movs	r0, #104	; 0x68
 800daf4:	f7ff fa70 	bl	800cfd8 <mpu_write_mem>

    /* Send sensor data to the FIFO. */
    tmp[0] = 0xA3;
 800daf8:	0021      	movs	r1, r4
 800dafa:	187b      	adds	r3, r7, r1
 800dafc:	22a3      	movs	r2, #163	; 0xa3
 800dafe:	701a      	strb	r2, [r3, #0]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 800db00:	1dbb      	adds	r3, r7, #6
 800db02:	881b      	ldrh	r3, [r3, #0]
 800db04:	2240      	movs	r2, #64	; 0x40
 800db06:	4013      	ands	r3, r2
 800db08:	d009      	beq.n	800db1e <dmp_enable_feature+0x5a>
        tmp[1] = 0xC0;
 800db0a:	187b      	adds	r3, r7, r1
 800db0c:	22c0      	movs	r2, #192	; 0xc0
 800db0e:	705a      	strb	r2, [r3, #1]
        tmp[2] = 0xC8;
 800db10:	187b      	adds	r3, r7, r1
 800db12:	22c8      	movs	r2, #200	; 0xc8
 800db14:	709a      	strb	r2, [r3, #2]
        tmp[3] = 0xC2;
 800db16:	187b      	adds	r3, r7, r1
 800db18:	22c2      	movs	r2, #194	; 0xc2
 800db1a:	70da      	strb	r2, [r3, #3]
 800db1c:	e009      	b.n	800db32 <dmp_enable_feature+0x6e>
    } else {
        tmp[1] = 0xA3;
 800db1e:	210c      	movs	r1, #12
 800db20:	187b      	adds	r3, r7, r1
 800db22:	22a3      	movs	r2, #163	; 0xa3
 800db24:	705a      	strb	r2, [r3, #1]
        tmp[2] = 0xA3;
 800db26:	187b      	adds	r3, r7, r1
 800db28:	22a3      	movs	r2, #163	; 0xa3
 800db2a:	709a      	strb	r2, [r3, #2]
        tmp[3] = 0xA3;
 800db2c:	187b      	adds	r3, r7, r1
 800db2e:	22a3      	movs	r2, #163	; 0xa3
 800db30:	70da      	strb	r2, [r3, #3]
    }
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 800db32:	1dbb      	adds	r3, r7, #6
 800db34:	881a      	ldrh	r2, [r3, #0]
 800db36:	23c0      	movs	r3, #192	; 0xc0
 800db38:	005b      	lsls	r3, r3, #1
 800db3a:	4013      	ands	r3, r2
 800db3c:	d00a      	beq.n	800db54 <dmp_enable_feature+0x90>
        tmp[4] = 0xC4;
 800db3e:	210c      	movs	r1, #12
 800db40:	187b      	adds	r3, r7, r1
 800db42:	22c4      	movs	r2, #196	; 0xc4
 800db44:	711a      	strb	r2, [r3, #4]
        tmp[5] = 0xCC;
 800db46:	187b      	adds	r3, r7, r1
 800db48:	22cc      	movs	r2, #204	; 0xcc
 800db4a:	715a      	strb	r2, [r3, #5]
        tmp[6] = 0xC6;
 800db4c:	187b      	adds	r3, r7, r1
 800db4e:	22c6      	movs	r2, #198	; 0xc6
 800db50:	719a      	strb	r2, [r3, #6]
 800db52:	e009      	b.n	800db68 <dmp_enable_feature+0xa4>
    } else {
        tmp[4] = 0xA3;
 800db54:	210c      	movs	r1, #12
 800db56:	187b      	adds	r3, r7, r1
 800db58:	22a3      	movs	r2, #163	; 0xa3
 800db5a:	711a      	strb	r2, [r3, #4]
        tmp[5] = 0xA3;
 800db5c:	187b      	adds	r3, r7, r1
 800db5e:	22a3      	movs	r2, #163	; 0xa3
 800db60:	715a      	strb	r2, [r3, #5]
        tmp[6] = 0xA3;
 800db62:	187b      	adds	r3, r7, r1
 800db64:	22a3      	movs	r2, #163	; 0xa3
 800db66:	719a      	strb	r2, [r3, #6]
    }
    tmp[7] = 0xA3;
 800db68:	240c      	movs	r4, #12
 800db6a:	193b      	adds	r3, r7, r4
 800db6c:	22a3      	movs	r2, #163	; 0xa3
 800db6e:	71da      	strb	r2, [r3, #7]
    tmp[8] = 0xA3;
 800db70:	193b      	adds	r3, r7, r4
 800db72:	22a3      	movs	r2, #163	; 0xa3
 800db74:	721a      	strb	r2, [r3, #8]
    tmp[9] = 0xA3;
 800db76:	193b      	adds	r3, r7, r4
 800db78:	22a3      	movs	r2, #163	; 0xa3
 800db7a:	725a      	strb	r2, [r3, #9]
    mpu_write_mem(CFG_15,10,tmp);
 800db7c:	193b      	adds	r3, r7, r4
 800db7e:	487b      	ldr	r0, [pc, #492]	; (800dd6c <dmp_enable_feature+0x2a8>)
 800db80:	001a      	movs	r2, r3
 800db82:	210a      	movs	r1, #10
 800db84:	f7ff fa28 	bl	800cfd8 <mpu_write_mem>

    /* Send gesture data to the FIFO. */
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 800db88:	1dbb      	adds	r3, r7, #6
 800db8a:	881b      	ldrh	r3, [r3, #0]
 800db8c:	2203      	movs	r2, #3
 800db8e:	4013      	ands	r3, r2
 800db90:	d003      	beq.n	800db9a <dmp_enable_feature+0xd6>
        tmp[0] = DINA20;
 800db92:	193b      	adds	r3, r7, r4
 800db94:	2220      	movs	r2, #32
 800db96:	701a      	strb	r2, [r3, #0]
 800db98:	e003      	b.n	800dba2 <dmp_enable_feature+0xde>
    else
        tmp[0] = 0xD8;
 800db9a:	230c      	movs	r3, #12
 800db9c:	18fb      	adds	r3, r7, r3
 800db9e:	22d8      	movs	r2, #216	; 0xd8
 800dba0:	701a      	strb	r2, [r3, #0]
    mpu_write_mem(CFG_27,1,tmp);
 800dba2:	230c      	movs	r3, #12
 800dba4:	18fb      	adds	r3, r7, r3
 800dba6:	4872      	ldr	r0, [pc, #456]	; (800dd70 <dmp_enable_feature+0x2ac>)
 800dba8:	001a      	movs	r2, r3
 800dbaa:	2101      	movs	r1, #1
 800dbac:	f7ff fa14 	bl	800cfd8 <mpu_write_mem>

    if (mask & DMP_FEATURE_GYRO_CAL)
 800dbb0:	1dbb      	adds	r3, r7, #6
 800dbb2:	881b      	ldrh	r3, [r3, #0]
 800dbb4:	2220      	movs	r2, #32
 800dbb6:	4013      	ands	r3, r2
 800dbb8:	d003      	beq.n	800dbc2 <dmp_enable_feature+0xfe>
        dmp_enable_gyro_cal(1);
 800dbba:	2001      	movs	r0, #1
 800dbbc:	f000 f8e2 	bl	800dd84 <dmp_enable_gyro_cal>
 800dbc0:	e002      	b.n	800dbc8 <dmp_enable_feature+0x104>
    else
        dmp_enable_gyro_cal(0);
 800dbc2:	2000      	movs	r0, #0
 800dbc4:	f000 f8de 	bl	800dd84 <dmp_enable_gyro_cal>

    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 800dbc8:	1dbb      	adds	r3, r7, #6
 800dbca:	881a      	ldrh	r2, [r3, #0]
 800dbcc:	23c0      	movs	r3, #192	; 0xc0
 800dbce:	005b      	lsls	r3, r3, #1
 800dbd0:	4013      	ands	r3, r2
 800dbd2:	d027      	beq.n	800dc24 <dmp_enable_feature+0x160>
        if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
 800dbd4:	1dbb      	adds	r3, r7, #6
 800dbd6:	881a      	ldrh	r2, [r3, #0]
 800dbd8:	2380      	movs	r3, #128	; 0x80
 800dbda:	005b      	lsls	r3, r3, #1
 800dbdc:	4013      	ands	r3, r2
 800dbde:	d00d      	beq.n	800dbfc <dmp_enable_feature+0x138>
            tmp[0] = 0xB2;
 800dbe0:	210c      	movs	r1, #12
 800dbe2:	187b      	adds	r3, r7, r1
 800dbe4:	22b2      	movs	r2, #178	; 0xb2
 800dbe6:	701a      	strb	r2, [r3, #0]
            tmp[1] = 0x8B;
 800dbe8:	187b      	adds	r3, r7, r1
 800dbea:	228b      	movs	r2, #139	; 0x8b
 800dbec:	705a      	strb	r2, [r3, #1]
            tmp[2] = 0xB6;
 800dbee:	187b      	adds	r3, r7, r1
 800dbf0:	22b6      	movs	r2, #182	; 0xb6
 800dbf2:	709a      	strb	r2, [r3, #2]
            tmp[3] = 0x9B;
 800dbf4:	187b      	adds	r3, r7, r1
 800dbf6:	229b      	movs	r2, #155	; 0x9b
 800dbf8:	70da      	strb	r2, [r3, #3]
 800dbfa:	e00c      	b.n	800dc16 <dmp_enable_feature+0x152>
        } else {
            tmp[0] = DINAC0;
 800dbfc:	210c      	movs	r1, #12
 800dbfe:	187b      	adds	r3, r7, r1
 800dc00:	22b0      	movs	r2, #176	; 0xb0
 800dc02:	701a      	strb	r2, [r3, #0]
            tmp[1] = DINA80;
 800dc04:	187b      	adds	r3, r7, r1
 800dc06:	2280      	movs	r2, #128	; 0x80
 800dc08:	705a      	strb	r2, [r3, #1]
            tmp[2] = DINAC2;
 800dc0a:	187b      	adds	r3, r7, r1
 800dc0c:	22b4      	movs	r2, #180	; 0xb4
 800dc0e:	709a      	strb	r2, [r3, #2]
            tmp[3] = DINA90;
 800dc10:	187b      	adds	r3, r7, r1
 800dc12:	2290      	movs	r2, #144	; 0x90
 800dc14:	70da      	strb	r2, [r3, #3]
        }
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
 800dc16:	230c      	movs	r3, #12
 800dc18:	18fb      	adds	r3, r7, r3
 800dc1a:	4856      	ldr	r0, [pc, #344]	; (800dd74 <dmp_enable_feature+0x2b0>)
 800dc1c:	001a      	movs	r2, r3
 800dc1e:	2104      	movs	r1, #4
 800dc20:	f7ff f9da 	bl	800cfd8 <mpu_write_mem>
    }

    if (mask & DMP_FEATURE_TAP) {
 800dc24:	1dbb      	adds	r3, r7, #6
 800dc26:	881b      	ldrh	r3, [r3, #0]
 800dc28:	2201      	movs	r2, #1
 800dc2a:	4013      	ands	r3, r2
 800dc2c:	d028      	beq.n	800dc80 <dmp_enable_feature+0x1bc>
        /* Enable tap. */
        tmp[0] = 0xF8;
 800dc2e:	210c      	movs	r1, #12
 800dc30:	187b      	adds	r3, r7, r1
 800dc32:	22f8      	movs	r2, #248	; 0xf8
 800dc34:	701a      	strb	r2, [r3, #0]
        mpu_write_mem(CFG_20, 1, tmp);
 800dc36:	187a      	adds	r2, r7, r1
 800dc38:	238b      	movs	r3, #139	; 0x8b
 800dc3a:	011b      	lsls	r3, r3, #4
 800dc3c:	2101      	movs	r1, #1
 800dc3e:	0018      	movs	r0, r3
 800dc40:	f7ff f9ca 	bl	800cfd8 <mpu_write_mem>
        dmp_set_tap_thresh(TAP_XYZ, 250);
 800dc44:	21fa      	movs	r1, #250	; 0xfa
 800dc46:	2007      	movs	r0, #7
 800dc48:	f7ff fcd6 	bl	800d5f8 <dmp_set_tap_thresh>
        dmp_set_tap_axes(TAP_XYZ);
 800dc4c:	2007      	movs	r0, #7
 800dc4e:	f7ff fdfd 	bl	800d84c <dmp_set_tap_axes>
        dmp_set_tap_count(1);
 800dc52:	2001      	movs	r0, #1
 800dc54:	f7ff fe37 	bl	800d8c6 <dmp_set_tap_count>
        dmp_set_tap_time(100);
 800dc58:	2064      	movs	r0, #100	; 0x64
 800dc5a:	f7ff fe5c 	bl	800d916 <dmp_set_tap_time>
        dmp_set_tap_time_multi(500);
 800dc5e:	23fa      	movs	r3, #250	; 0xfa
 800dc60:	005b      	lsls	r3, r3, #1
 800dc62:	0018      	movs	r0, r3
 800dc64:	f7ff fe81 	bl	800d96a <dmp_set_tap_time_multi>

        dmp_set_shake_reject_thresh(GYRO_SF, 200);
 800dc68:	4b43      	ldr	r3, [pc, #268]	; (800dd78 <dmp_enable_feature+0x2b4>)
 800dc6a:	21c8      	movs	r1, #200	; 0xc8
 800dc6c:	0018      	movs	r0, r3
 800dc6e:	f7ff fea6 	bl	800d9be <dmp_set_shake_reject_thresh>
        dmp_set_shake_reject_time(40);
 800dc72:	2028      	movs	r0, #40	; 0x28
 800dc74:	f7ff fed6 	bl	800da24 <dmp_set_shake_reject_time>
        dmp_set_shake_reject_timeout(10);
 800dc78:	200a      	movs	r0, #10
 800dc7a:	f7ff fefb 	bl	800da74 <dmp_set_shake_reject_timeout>
 800dc7e:	e00a      	b.n	800dc96 <dmp_enable_feature+0x1d2>
    } else {
        tmp[0] = 0xD8;
 800dc80:	210c      	movs	r1, #12
 800dc82:	187b      	adds	r3, r7, r1
 800dc84:	22d8      	movs	r2, #216	; 0xd8
 800dc86:	701a      	strb	r2, [r3, #0]
        mpu_write_mem(CFG_20, 1, tmp);
 800dc88:	187a      	adds	r2, r7, r1
 800dc8a:	238b      	movs	r3, #139	; 0x8b
 800dc8c:	011b      	lsls	r3, r3, #4
 800dc8e:	2101      	movs	r1, #1
 800dc90:	0018      	movs	r0, r3
 800dc92:	f7ff f9a1 	bl	800cfd8 <mpu_write_mem>
    }

    if (mask & DMP_FEATURE_ANDROID_ORIENT) {
 800dc96:	1dbb      	adds	r3, r7, #6
 800dc98:	881b      	ldrh	r3, [r3, #0]
 800dc9a:	2202      	movs	r2, #2
 800dc9c:	4013      	ands	r3, r2
 800dc9e:	d004      	beq.n	800dcaa <dmp_enable_feature+0x1e6>
        tmp[0] = 0xD9;
 800dca0:	230c      	movs	r3, #12
 800dca2:	18fb      	adds	r3, r7, r3
 800dca4:	22d9      	movs	r2, #217	; 0xd9
 800dca6:	701a      	strb	r2, [r3, #0]
 800dca8:	e003      	b.n	800dcb2 <dmp_enable_feature+0x1ee>
    } else
        tmp[0] = 0xD8;
 800dcaa:	230c      	movs	r3, #12
 800dcac:	18fb      	adds	r3, r7, r3
 800dcae:	22d8      	movs	r2, #216	; 0xd8
 800dcb0:	701a      	strb	r2, [r3, #0]
    mpu_write_mem(CFG_ANDROID_ORIENT_INT, 1, tmp);
 800dcb2:	230c      	movs	r3, #12
 800dcb4:	18fb      	adds	r3, r7, r3
 800dcb6:	4831      	ldr	r0, [pc, #196]	; (800dd7c <dmp_enable_feature+0x2b8>)
 800dcb8:	001a      	movs	r2, r3
 800dcba:	2101      	movs	r1, #1
 800dcbc:	f7ff f98c 	bl	800cfd8 <mpu_write_mem>

    if (mask & DMP_FEATURE_LP_QUAT)
 800dcc0:	1dbb      	adds	r3, r7, #6
 800dcc2:	881b      	ldrh	r3, [r3, #0]
 800dcc4:	2204      	movs	r2, #4
 800dcc6:	4013      	ands	r3, r2
 800dcc8:	d003      	beq.n	800dcd2 <dmp_enable_feature+0x20e>
        dmp_enable_lp_quat(1);
 800dcca:	2001      	movs	r0, #1
 800dccc:	f000 f88c 	bl	800dde8 <dmp_enable_lp_quat>
 800dcd0:	e002      	b.n	800dcd8 <dmp_enable_feature+0x214>
    else
        dmp_enable_lp_quat(0);
 800dcd2:	2000      	movs	r0, #0
 800dcd4:	f000 f888 	bl	800dde8 <dmp_enable_lp_quat>

    if (mask & DMP_FEATURE_6X_LP_QUAT)
 800dcd8:	1dbb      	adds	r3, r7, #6
 800dcda:	881b      	ldrh	r3, [r3, #0]
 800dcdc:	2210      	movs	r2, #16
 800dcde:	4013      	ands	r3, r2
 800dce0:	d003      	beq.n	800dcea <dmp_enable_feature+0x226>
        dmp_enable_6x_lp_quat(1);
 800dce2:	2001      	movs	r0, #1
 800dce4:	f000 f8b0 	bl	800de48 <dmp_enable_6x_lp_quat>
 800dce8:	e002      	b.n	800dcf0 <dmp_enable_feature+0x22c>
    else
        dmp_enable_6x_lp_quat(0);
 800dcea:	2000      	movs	r0, #0
 800dcec:	f000 f8ac 	bl	800de48 <dmp_enable_6x_lp_quat>

    /* Pedometer is always enabled. */
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
 800dcf0:	1dbb      	adds	r3, r7, #6
 800dcf2:	881b      	ldrh	r3, [r3, #0]
 800dcf4:	2208      	movs	r2, #8
 800dcf6:	4313      	orrs	r3, r2
 800dcf8:	b29a      	uxth	r2, r3
 800dcfa:	4b21      	ldr	r3, [pc, #132]	; (800dd80 <dmp_enable_feature+0x2bc>)
 800dcfc:	815a      	strh	r2, [r3, #10]
    mpu_reset_fifo();
 800dcfe:	f7fd fbf5 	bl	800b4ec <mpu_reset_fifo>

    dmp.packet_length = 0;
 800dd02:	4b1f      	ldr	r3, [pc, #124]	; (800dd80 <dmp_enable_feature+0x2bc>)
 800dd04:	2200      	movs	r2, #0
 800dd06:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
 800dd08:	1dbb      	adds	r3, r7, #6
 800dd0a:	881b      	ldrh	r3, [r3, #0]
 800dd0c:	2240      	movs	r2, #64	; 0x40
 800dd0e:	4013      	ands	r3, r2
 800dd10:	d005      	beq.n	800dd1e <dmp_enable_feature+0x25a>
        dmp.packet_length += 6;
 800dd12:	4b1b      	ldr	r3, [pc, #108]	; (800dd80 <dmp_enable_feature+0x2bc>)
 800dd14:	7b9b      	ldrb	r3, [r3, #14]
 800dd16:	3306      	adds	r3, #6
 800dd18:	b2da      	uxtb	r2, r3
 800dd1a:	4b19      	ldr	r3, [pc, #100]	; (800dd80 <dmp_enable_feature+0x2bc>)
 800dd1c:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_ANY_GYRO)
 800dd1e:	1dbb      	adds	r3, r7, #6
 800dd20:	881a      	ldrh	r2, [r3, #0]
 800dd22:	23c0      	movs	r3, #192	; 0xc0
 800dd24:	005b      	lsls	r3, r3, #1
 800dd26:	4013      	ands	r3, r2
 800dd28:	d005      	beq.n	800dd36 <dmp_enable_feature+0x272>
        dmp.packet_length += 6;
 800dd2a:	4b15      	ldr	r3, [pc, #84]	; (800dd80 <dmp_enable_feature+0x2bc>)
 800dd2c:	7b9b      	ldrb	r3, [r3, #14]
 800dd2e:	3306      	adds	r3, #6
 800dd30:	b2da      	uxtb	r2, r3
 800dd32:	4b13      	ldr	r3, [pc, #76]	; (800dd80 <dmp_enable_feature+0x2bc>)
 800dd34:	739a      	strb	r2, [r3, #14]
    if (mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT))
 800dd36:	1dbb      	adds	r3, r7, #6
 800dd38:	881b      	ldrh	r3, [r3, #0]
 800dd3a:	2214      	movs	r2, #20
 800dd3c:	4013      	ands	r3, r2
 800dd3e:	d005      	beq.n	800dd4c <dmp_enable_feature+0x288>
        dmp.packet_length += 16;
 800dd40:	4b0f      	ldr	r3, [pc, #60]	; (800dd80 <dmp_enable_feature+0x2bc>)
 800dd42:	7b9b      	ldrb	r3, [r3, #14]
 800dd44:	3310      	adds	r3, #16
 800dd46:	b2da      	uxtb	r2, r3
 800dd48:	4b0d      	ldr	r3, [pc, #52]	; (800dd80 <dmp_enable_feature+0x2bc>)
 800dd4a:	739a      	strb	r2, [r3, #14]
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 800dd4c:	1dbb      	adds	r3, r7, #6
 800dd4e:	881b      	ldrh	r3, [r3, #0]
 800dd50:	2203      	movs	r2, #3
 800dd52:	4013      	ands	r3, r2
 800dd54:	d005      	beq.n	800dd62 <dmp_enable_feature+0x29e>
        dmp.packet_length += 4;
 800dd56:	4b0a      	ldr	r3, [pc, #40]	; (800dd80 <dmp_enable_feature+0x2bc>)
 800dd58:	7b9b      	ldrb	r3, [r3, #14]
 800dd5a:	3304      	adds	r3, #4
 800dd5c:	b2da      	uxtb	r2, r3
 800dd5e:	4b08      	ldr	r3, [pc, #32]	; (800dd80 <dmp_enable_feature+0x2bc>)
 800dd60:	739a      	strb	r2, [r3, #14]

    return 0;
 800dd62:	2300      	movs	r3, #0
}
 800dd64:	0018      	movs	r0, r3
 800dd66:	46bd      	mov	sp, r7
 800dd68:	b007      	add	sp, #28
 800dd6a:	bd90      	pop	{r4, r7, pc}
 800dd6c:	00000aa7 	.word	0x00000aa7
 800dd70:	00000ab6 	.word	0x00000ab6
 800dd74:	00000aa2 	.word	0x00000aa2
 800dd78:	02cae309 	.word	0x02cae309
 800dd7c:	0000073d 	.word	0x0000073d
 800dd80:	200009d0 	.word	0x200009d0

0800dd84 <dmp_enable_gyro_cal>:
 *  subtracted from the gyro output.
 *  @param[in]  enable  1 to enable gyro calibration.
 *  @return     0 if successful.
 */
int dmp_enable_gyro_cal(unsigned char enable)
{
 800dd84:	b590      	push	{r4, r7, lr}
 800dd86:	b089      	sub	sp, #36	; 0x24
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	0002      	movs	r2, r0
 800dd8c:	1dfb      	adds	r3, r7, #7
 800dd8e:	701a      	strb	r2, [r3, #0]
    if (enable) {
 800dd90:	1dfb      	adds	r3, r7, #7
 800dd92:	781b      	ldrb	r3, [r3, #0]
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d00f      	beq.n	800ddb8 <dmp_enable_gyro_cal+0x34>
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
 800dd98:	2414      	movs	r4, #20
 800dd9a:	193b      	adds	r3, r7, r4
 800dd9c:	4a10      	ldr	r2, [pc, #64]	; (800dde0 <dmp_enable_gyro_cal+0x5c>)
 800dd9e:	ca03      	ldmia	r2!, {r0, r1}
 800dda0:	c303      	stmia	r3!, {r0, r1}
 800dda2:	7812      	ldrb	r2, [r2, #0]
 800dda4:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 800dda6:	193a      	adds	r2, r7, r4
 800dda8:	2397      	movs	r3, #151	; 0x97
 800ddaa:	00db      	lsls	r3, r3, #3
 800ddac:	2109      	movs	r1, #9
 800ddae:	0018      	movs	r0, r3
 800ddb0:	f7ff f912 	bl	800cfd8 <mpu_write_mem>
 800ddb4:	0003      	movs	r3, r0
 800ddb6:	e00e      	b.n	800ddd6 <dmp_enable_gyro_cal+0x52>
    } else {
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
 800ddb8:	2408      	movs	r4, #8
 800ddba:	193b      	adds	r3, r7, r4
 800ddbc:	4a09      	ldr	r2, [pc, #36]	; (800dde4 <dmp_enable_gyro_cal+0x60>)
 800ddbe:	ca03      	ldmia	r2!, {r0, r1}
 800ddc0:	c303      	stmia	r3!, {r0, r1}
 800ddc2:	7812      	ldrb	r2, [r2, #0]
 800ddc4:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 800ddc6:	193a      	adds	r2, r7, r4
 800ddc8:	2397      	movs	r3, #151	; 0x97
 800ddca:	00db      	lsls	r3, r3, #3
 800ddcc:	2109      	movs	r1, #9
 800ddce:	0018      	movs	r0, r3
 800ddd0:	f7ff f902 	bl	800cfd8 <mpu_write_mem>
 800ddd4:	0003      	movs	r3, r0
    }
}
 800ddd6:	0018      	movs	r0, r3
 800ddd8:	46bd      	mov	sp, r7
 800ddda:	b009      	add	sp, #36	; 0x24
 800dddc:	bd90      	pop	{r4, r7, pc}
 800ddde:	46c0      	nop			; (mov r8, r8)
 800dde0:	08015914 	.word	0x08015914
 800dde4:	08015920 	.word	0x08015920

0800dde8 <dmp_enable_lp_quat>:
 *  exclusive.
 *  @param[in]  enable  1 to enable 3-axis quaternion.
 *  @return     0 if successful.
 */
int dmp_enable_lp_quat(unsigned char enable)
{
 800dde8:	b580      	push	{r7, lr}
 800ddea:	b084      	sub	sp, #16
 800ddec:	af00      	add	r7, sp, #0
 800ddee:	0002      	movs	r2, r0
 800ddf0:	1dfb      	adds	r3, r7, #7
 800ddf2:	701a      	strb	r2, [r3, #0]
    unsigned char regs[4];
    if (enable) {
 800ddf4:	1dfb      	adds	r3, r7, #7
 800ddf6:	781b      	ldrb	r3, [r3, #0]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d00d      	beq.n	800de18 <dmp_enable_lp_quat+0x30>
        regs[0] = DINBC0;
 800ddfc:	210c      	movs	r1, #12
 800ddfe:	187b      	adds	r3, r7, r1
 800de00:	22c0      	movs	r2, #192	; 0xc0
 800de02:	701a      	strb	r2, [r3, #0]
        regs[1] = DINBC2;
 800de04:	187b      	adds	r3, r7, r1
 800de06:	22c2      	movs	r2, #194	; 0xc2
 800de08:	705a      	strb	r2, [r3, #1]
        regs[2] = DINBC4;
 800de0a:	187b      	adds	r3, r7, r1
 800de0c:	22c4      	movs	r2, #196	; 0xc4
 800de0e:	709a      	strb	r2, [r3, #2]
        regs[3] = DINBC6;
 800de10:	187b      	adds	r3, r7, r1
 800de12:	22c6      	movs	r2, #198	; 0xc6
 800de14:	70da      	strb	r2, [r3, #3]
 800de16:	e006      	b.n	800de26 <dmp_enable_lp_quat+0x3e>
    }
    else
        memset(regs, 0x8B, 4);
 800de18:	230c      	movs	r3, #12
 800de1a:	18fb      	adds	r3, r7, r3
 800de1c:	2204      	movs	r2, #4
 800de1e:	218b      	movs	r1, #139	; 0x8b
 800de20:	0018      	movs	r0, r3
 800de22:	f004 f880 	bl	8011f26 <memset>

    mpu_write_mem(CFG_LP_QUAT, 4, regs);
 800de26:	230c      	movs	r3, #12
 800de28:	18fb      	adds	r3, r7, r3
 800de2a:	4806      	ldr	r0, [pc, #24]	; (800de44 <dmp_enable_lp_quat+0x5c>)
 800de2c:	001a      	movs	r2, r3
 800de2e:	2104      	movs	r1, #4
 800de30:	f7ff f8d2 	bl	800cfd8 <mpu_write_mem>

    return mpu_reset_fifo();
 800de34:	f7fd fb5a 	bl	800b4ec <mpu_reset_fifo>
 800de38:	0003      	movs	r3, r0
}
 800de3a:	0018      	movs	r0, r3
 800de3c:	46bd      	mov	sp, r7
 800de3e:	b004      	add	sp, #16
 800de40:	bd80      	pop	{r7, pc}
 800de42:	46c0      	nop			; (mov r8, r8)
 800de44:	00000a98 	.word	0x00000a98

0800de48 <dmp_enable_6x_lp_quat>:
 *  exclusive.
 *  @param[in]   enable  1 to enable 6-axis quaternion.
 *  @return      0 if successful.
 */
int dmp_enable_6x_lp_quat(unsigned char enable)
{
 800de48:	b580      	push	{r7, lr}
 800de4a:	b084      	sub	sp, #16
 800de4c:	af00      	add	r7, sp, #0
 800de4e:	0002      	movs	r2, r0
 800de50:	1dfb      	adds	r3, r7, #7
 800de52:	701a      	strb	r2, [r3, #0]
    unsigned char regs[4];
    if (enable) {
 800de54:	1dfb      	adds	r3, r7, #7
 800de56:	781b      	ldrb	r3, [r3, #0]
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d00d      	beq.n	800de78 <dmp_enable_6x_lp_quat+0x30>
        regs[0] = DINA20;
 800de5c:	210c      	movs	r1, #12
 800de5e:	187b      	adds	r3, r7, r1
 800de60:	2220      	movs	r2, #32
 800de62:	701a      	strb	r2, [r3, #0]
        regs[1] = DINA28;
 800de64:	187b      	adds	r3, r7, r1
 800de66:	2228      	movs	r2, #40	; 0x28
 800de68:	705a      	strb	r2, [r3, #1]
        regs[2] = DINA30;
 800de6a:	187b      	adds	r3, r7, r1
 800de6c:	2230      	movs	r2, #48	; 0x30
 800de6e:	709a      	strb	r2, [r3, #2]
        regs[3] = DINA38;
 800de70:	187b      	adds	r3, r7, r1
 800de72:	2238      	movs	r2, #56	; 0x38
 800de74:	70da      	strb	r2, [r3, #3]
 800de76:	e006      	b.n	800de86 <dmp_enable_6x_lp_quat+0x3e>
    } else
        memset(regs, 0xA3, 4);
 800de78:	230c      	movs	r3, #12
 800de7a:	18fb      	adds	r3, r7, r3
 800de7c:	2204      	movs	r2, #4
 800de7e:	21a3      	movs	r1, #163	; 0xa3
 800de80:	0018      	movs	r0, r3
 800de82:	f004 f850 	bl	8011f26 <memset>

    mpu_write_mem(CFG_8, 4, regs);
 800de86:	230c      	movs	r3, #12
 800de88:	18fb      	adds	r3, r7, r3
 800de8a:	4806      	ldr	r0, [pc, #24]	; (800dea4 <dmp_enable_6x_lp_quat+0x5c>)
 800de8c:	001a      	movs	r2, r3
 800de8e:	2104      	movs	r1, #4
 800de90:	f7ff f8a2 	bl	800cfd8 <mpu_write_mem>

    return mpu_reset_fifo();
 800de94:	f7fd fb2a 	bl	800b4ec <mpu_reset_fifo>
 800de98:	0003      	movs	r3, r0
}
 800de9a:	0018      	movs	r0, r3
 800de9c:	46bd      	mov	sp, r7
 800de9e:	b004      	add	sp, #16
 800dea0:	bd80      	pop	{r7, pc}
 800dea2:	46c0      	nop			; (mov r8, r8)
 800dea4:	00000a9e 	.word	0x00000a9e

0800dea8 <decode_gesture>:
 *  @brief      Decode the four-byte gesture data and execute any callbacks.
 *  @param[in]  gesture Gesture data from DMP packet.
 *  @return     0 if successful.
 */
static int decode_gesture(unsigned char *gesture)
{
 800dea8:	b590      	push	{r4, r7, lr}
 800deaa:	b085      	sub	sp, #20
 800deac:	af00      	add	r7, sp, #0
 800deae:	6078      	str	r0, [r7, #4]
    unsigned char tap, android_orient;

    android_orient = gesture[3] & 0xC0;
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	3303      	adds	r3, #3
 800deb4:	781a      	ldrb	r2, [r3, #0]
 800deb6:	230f      	movs	r3, #15
 800deb8:	18fb      	adds	r3, r7, r3
 800deba:	213f      	movs	r1, #63	; 0x3f
 800debc:	438a      	bics	r2, r1
 800debe:	701a      	strb	r2, [r3, #0]
    tap = 0x3F & gesture[3];
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	3303      	adds	r3, #3
 800dec4:	781a      	ldrb	r2, [r3, #0]
 800dec6:	200e      	movs	r0, #14
 800dec8:	183b      	adds	r3, r7, r0
 800deca:	213f      	movs	r1, #63	; 0x3f
 800decc:	400a      	ands	r2, r1
 800dece:	701a      	strb	r2, [r3, #0]

    if (gesture[1] & INT_SRC_TAP) {
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	3301      	adds	r3, #1
 800ded4:	781b      	ldrb	r3, [r3, #0]
 800ded6:	001a      	movs	r2, r3
 800ded8:	2301      	movs	r3, #1
 800deda:	4013      	ands	r3, r2
 800dedc:	d01a      	beq.n	800df14 <decode_gesture+0x6c>
        unsigned char direction, count;
        direction = tap >> 3;
 800dede:	240d      	movs	r4, #13
 800dee0:	193b      	adds	r3, r7, r4
 800dee2:	183a      	adds	r2, r7, r0
 800dee4:	7812      	ldrb	r2, [r2, #0]
 800dee6:	08d2      	lsrs	r2, r2, #3
 800dee8:	701a      	strb	r2, [r3, #0]
        count = (tap % 8) + 1;
 800deea:	183b      	adds	r3, r7, r0
 800deec:	781b      	ldrb	r3, [r3, #0]
 800deee:	2207      	movs	r2, #7
 800def0:	4013      	ands	r3, r2
 800def2:	b2da      	uxtb	r2, r3
 800def4:	210c      	movs	r1, #12
 800def6:	187b      	adds	r3, r7, r1
 800def8:	3201      	adds	r2, #1
 800defa:	701a      	strb	r2, [r3, #0]
        if (dmp.tap_cb)
 800defc:	4b12      	ldr	r3, [pc, #72]	; (800df48 <decode_gesture+0xa0>)
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	2b00      	cmp	r3, #0
 800df02:	d007      	beq.n	800df14 <decode_gesture+0x6c>
            dmp.tap_cb(direction, count);
 800df04:	4b10      	ldr	r3, [pc, #64]	; (800df48 <decode_gesture+0xa0>)
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	187a      	adds	r2, r7, r1
 800df0a:	7811      	ldrb	r1, [r2, #0]
 800df0c:	193a      	adds	r2, r7, r4
 800df0e:	7812      	ldrb	r2, [r2, #0]
 800df10:	0010      	movs	r0, r2
 800df12:	4798      	blx	r3
    }

    if (gesture[1] & INT_SRC_ANDROID_ORIENT) {
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	3301      	adds	r3, #1
 800df18:	781b      	ldrb	r3, [r3, #0]
 800df1a:	001a      	movs	r2, r3
 800df1c:	2308      	movs	r3, #8
 800df1e:	4013      	ands	r3, r2
 800df20:	d00c      	beq.n	800df3c <decode_gesture+0x94>
        if (dmp.android_orient_cb)
 800df22:	4b09      	ldr	r3, [pc, #36]	; (800df48 <decode_gesture+0xa0>)
 800df24:	685b      	ldr	r3, [r3, #4]
 800df26:	2b00      	cmp	r3, #0
 800df28:	d008      	beq.n	800df3c <decode_gesture+0x94>
            dmp.android_orient_cb(android_orient >> 6);
 800df2a:	4b07      	ldr	r3, [pc, #28]	; (800df48 <decode_gesture+0xa0>)
 800df2c:	685b      	ldr	r3, [r3, #4]
 800df2e:	220f      	movs	r2, #15
 800df30:	18ba      	adds	r2, r7, r2
 800df32:	7812      	ldrb	r2, [r2, #0]
 800df34:	0992      	lsrs	r2, r2, #6
 800df36:	b2d2      	uxtb	r2, r2
 800df38:	0010      	movs	r0, r2
 800df3a:	4798      	blx	r3
    }

    return 0;
 800df3c:	2300      	movs	r3, #0
}
 800df3e:	0018      	movs	r0, r3
 800df40:	46bd      	mov	sp, r7
 800df42:	b005      	add	sp, #20
 800df44:	bd90      	pop	{r4, r7, pc}
 800df46:	46c0      	nop			; (mov r8, r8)
 800df48:	200009d0 	.word	0x200009d0

0800df4c <dmp_read_fifo>:
 *  @param[out] more        Number of remaining packets.
 *  @return     0 if successful.
 */
int dmp_read_fifo(short *gyro, short *accel, long *quat,
    unsigned long *timestamp, short *sensors, unsigned char *more)
{
 800df4c:	b590      	push	{r4, r7, lr}
 800df4e:	b093      	sub	sp, #76	; 0x4c
 800df50:	af00      	add	r7, sp, #0
 800df52:	60f8      	str	r0, [r7, #12]
 800df54:	60b9      	str	r1, [r7, #8]
 800df56:	607a      	str	r2, [r7, #4]
 800df58:	603b      	str	r3, [r7, #0]
    unsigned char fifo_data[MAX_PACKET_LENGTH];
    unsigned char ii = 0;
 800df5a:	2347      	movs	r3, #71	; 0x47
 800df5c:	18fb      	adds	r3, r7, r3
 800df5e:	2200      	movs	r2, #0
 800df60:	701a      	strb	r2, [r3, #0]

    /* TODO: sensors[0] only changes when dmp_enable_feature is called. We can
     * cache this value and save some cycles.
     */
    sensors[0] = 0;
 800df62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800df64:	2200      	movs	r2, #0
 800df66:	801a      	strh	r2, [r3, #0]

    /* Get a packet. */
    if (mpu_read_fifo_stream(dmp.packet_length, fifo_data, more))
 800df68:	4bac      	ldr	r3, [pc, #688]	; (800e21c <dmp_read_fifo+0x2d0>)
 800df6a:	7b9b      	ldrb	r3, [r3, #14]
 800df6c:	b29b      	uxth	r3, r3
 800df6e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800df70:	2120      	movs	r1, #32
 800df72:	1879      	adds	r1, r7, r1
 800df74:	0018      	movs	r0, r3
 800df76:	f7fd ff81 	bl	800be7c <mpu_read_fifo_stream>
 800df7a:	1e03      	subs	r3, r0, #0
 800df7c:	d002      	beq.n	800df84 <dmp_read_fifo+0x38>
        return -1;
 800df7e:	2301      	movs	r3, #1
 800df80:	425b      	negs	r3, r3
 800df82:	e147      	b.n	800e214 <dmp_read_fifo+0x2c8>

    /* Parse DMP packet. */
    if (dmp.feature_mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT)) {
 800df84:	4ba5      	ldr	r3, [pc, #660]	; (800e21c <dmp_read_fifo+0x2d0>)
 800df86:	895b      	ldrh	r3, [r3, #10]
 800df88:	001a      	movs	r2, r3
 800df8a:	2314      	movs	r3, #20
 800df8c:	4013      	ands	r3, r2
 800df8e:	d100      	bne.n	800df92 <dmp_read_fifo+0x46>
 800df90:	e099      	b.n	800e0c6 <dmp_read_fifo+0x17a>
#ifdef FIFO_CORRUPTION_CHECK
        long quat_q14[4], quat_mag_sq;
#endif
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 800df92:	2020      	movs	r0, #32
 800df94:	183b      	adds	r3, r7, r0
 800df96:	781b      	ldrb	r3, [r3, #0]
 800df98:	061a      	lsls	r2, r3, #24
 800df9a:	183b      	adds	r3, r7, r0
 800df9c:	785b      	ldrb	r3, [r3, #1]
 800df9e:	041b      	lsls	r3, r3, #16
 800dfa0:	431a      	orrs	r2, r3
            ((long)fifo_data[2] << 8) | fifo_data[3];
 800dfa2:	183b      	adds	r3, r7, r0
 800dfa4:	789b      	ldrb	r3, [r3, #2]
 800dfa6:	021b      	lsls	r3, r3, #8
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 800dfa8:	4313      	orrs	r3, r2
            ((long)fifo_data[2] << 8) | fifo_data[3];
 800dfaa:	183a      	adds	r2, r7, r0
 800dfac:	78d2      	ldrb	r2, [r2, #3]
 800dfae:	431a      	orrs	r2, r3
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	601a      	str	r2, [r3, #0]
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 800dfb4:	183b      	adds	r3, r7, r0
 800dfb6:	791b      	ldrb	r3, [r3, #4]
 800dfb8:	061a      	lsls	r2, r3, #24
 800dfba:	183b      	adds	r3, r7, r0
 800dfbc:	795b      	ldrb	r3, [r3, #5]
 800dfbe:	041b      	lsls	r3, r3, #16
 800dfc0:	431a      	orrs	r2, r3
            ((long)fifo_data[6] << 8) | fifo_data[7];
 800dfc2:	183b      	adds	r3, r7, r0
 800dfc4:	799b      	ldrb	r3, [r3, #6]
 800dfc6:	021b      	lsls	r3, r3, #8
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 800dfc8:	431a      	orrs	r2, r3
            ((long)fifo_data[6] << 8) | fifo_data[7];
 800dfca:	183b      	adds	r3, r7, r0
 800dfcc:	79db      	ldrb	r3, [r3, #7]
 800dfce:	0019      	movs	r1, r3
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	3304      	adds	r3, #4
            ((long)fifo_data[6] << 8) | fifo_data[7];
 800dfd4:	430a      	orrs	r2, r1
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 800dfd6:	601a      	str	r2, [r3, #0]
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 800dfd8:	183b      	adds	r3, r7, r0
 800dfda:	7a1b      	ldrb	r3, [r3, #8]
 800dfdc:	061a      	lsls	r2, r3, #24
 800dfde:	183b      	adds	r3, r7, r0
 800dfe0:	7a5b      	ldrb	r3, [r3, #9]
 800dfe2:	041b      	lsls	r3, r3, #16
 800dfe4:	431a      	orrs	r2, r3
            ((long)fifo_data[10] << 8) | fifo_data[11];
 800dfe6:	183b      	adds	r3, r7, r0
 800dfe8:	7a9b      	ldrb	r3, [r3, #10]
 800dfea:	021b      	lsls	r3, r3, #8
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 800dfec:	431a      	orrs	r2, r3
            ((long)fifo_data[10] << 8) | fifo_data[11];
 800dfee:	183b      	adds	r3, r7, r0
 800dff0:	7adb      	ldrb	r3, [r3, #11]
 800dff2:	0019      	movs	r1, r3
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	3308      	adds	r3, #8
            ((long)fifo_data[10] << 8) | fifo_data[11];
 800dff8:	430a      	orrs	r2, r1
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 800dffa:	601a      	str	r2, [r3, #0]
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 800dffc:	0001      	movs	r1, r0
 800dffe:	187b      	adds	r3, r7, r1
 800e000:	7b1b      	ldrb	r3, [r3, #12]
 800e002:	061a      	lsls	r2, r3, #24
 800e004:	187b      	adds	r3, r7, r1
 800e006:	7b5b      	ldrb	r3, [r3, #13]
 800e008:	041b      	lsls	r3, r3, #16
 800e00a:	431a      	orrs	r2, r3
            ((long)fifo_data[14] << 8) | fifo_data[15];
 800e00c:	187b      	adds	r3, r7, r1
 800e00e:	7b9b      	ldrb	r3, [r3, #14]
 800e010:	021b      	lsls	r3, r3, #8
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 800e012:	431a      	orrs	r2, r3
            ((long)fifo_data[14] << 8) | fifo_data[15];
 800e014:	187b      	adds	r3, r7, r1
 800e016:	7bdb      	ldrb	r3, [r3, #15]
 800e018:	0019      	movs	r1, r3
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	330c      	adds	r3, #12
            ((long)fifo_data[14] << 8) | fifo_data[15];
 800e01e:	430a      	orrs	r2, r1
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 800e020:	601a      	str	r2, [r3, #0]
        ii += 16;
 800e022:	2247      	movs	r2, #71	; 0x47
 800e024:	18bb      	adds	r3, r7, r2
 800e026:	18ba      	adds	r2, r7, r2
 800e028:	7812      	ldrb	r2, [r2, #0]
 800e02a:	3210      	adds	r2, #16
 800e02c:	701a      	strb	r2, [r3, #0]
         * the FIFO reads might become misaligned.
         *
         * Let's start by scaling down the quaternion data to avoid long long
         * math.
         */
        quat_q14[0] = quat[0] >> 16;
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	141a      	asrs	r2, r3, #16
 800e034:	2110      	movs	r1, #16
 800e036:	187b      	adds	r3, r7, r1
 800e038:	601a      	str	r2, [r3, #0]
        quat_q14[1] = quat[1] >> 16;
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	3304      	adds	r3, #4
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	141a      	asrs	r2, r3, #16
 800e042:	187b      	adds	r3, r7, r1
 800e044:	605a      	str	r2, [r3, #4]
        quat_q14[2] = quat[2] >> 16;
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	3308      	adds	r3, #8
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	141a      	asrs	r2, r3, #16
 800e04e:	187b      	adds	r3, r7, r1
 800e050:	609a      	str	r2, [r3, #8]
        quat_q14[3] = quat[3] >> 16;
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	330c      	adds	r3, #12
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	141a      	asrs	r2, r3, #16
 800e05a:	0008      	movs	r0, r1
 800e05c:	183b      	adds	r3, r7, r0
 800e05e:	60da      	str	r2, [r3, #12]
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 800e060:	183b      	adds	r3, r7, r0
 800e062:	681a      	ldr	r2, [r3, #0]
 800e064:	183b      	adds	r3, r7, r0
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	435a      	muls	r2, r3
 800e06a:	183b      	adds	r3, r7, r0
 800e06c:	6859      	ldr	r1, [r3, #4]
 800e06e:	183b      	adds	r3, r7, r0
 800e070:	685b      	ldr	r3, [r3, #4]
 800e072:	434b      	muls	r3, r1
 800e074:	18d2      	adds	r2, r2, r3
            quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
 800e076:	183b      	adds	r3, r7, r0
 800e078:	6899      	ldr	r1, [r3, #8]
 800e07a:	183b      	adds	r3, r7, r0
 800e07c:	689b      	ldr	r3, [r3, #8]
 800e07e:	434b      	muls	r3, r1
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 800e080:	18d2      	adds	r2, r2, r3
            quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
 800e082:	183b      	adds	r3, r7, r0
 800e084:	68d9      	ldr	r1, [r3, #12]
 800e086:	183b      	adds	r3, r7, r0
 800e088:	68db      	ldr	r3, [r3, #12]
 800e08a:	434b      	muls	r3, r1
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 800e08c:	18d3      	adds	r3, r2, r3
 800e08e:	643b      	str	r3, [r7, #64]	; 0x40
        if ((quat_mag_sq < QUAT_MAG_SQ_MIN) ||
 800e090:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e092:	23f0      	movs	r3, #240	; 0xf0
 800e094:	051b      	lsls	r3, r3, #20
 800e096:	429a      	cmp	r2, r3
 800e098:	db04      	blt.n	800e0a4 <dmp_read_fifo+0x158>
 800e09a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e09c:	2388      	movs	r3, #136	; 0x88
 800e09e:	055b      	lsls	r3, r3, #21
 800e0a0:	429a      	cmp	r2, r3
 800e0a2:	dd07      	ble.n	800e0b4 <dmp_read_fifo+0x168>
            (quat_mag_sq > QUAT_MAG_SQ_MAX)) {
            /* Quaternion is outside of the acceptable threshold. */
            mpu_reset_fifo();
 800e0a4:	f7fd fa22 	bl	800b4ec <mpu_reset_fifo>
            sensors[0] = 0;
 800e0a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e0aa:	2200      	movs	r2, #0
 800e0ac:	801a      	strh	r2, [r3, #0]
            return -1;
 800e0ae:	2301      	movs	r3, #1
 800e0b0:	425b      	negs	r3, r3
 800e0b2:	e0af      	b.n	800e214 <dmp_read_fifo+0x2c8>
        }
        sensors[0] |= INV_WXYZ_QUAT;
 800e0b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e0b6:	2200      	movs	r2, #0
 800e0b8:	5e9b      	ldrsh	r3, [r3, r2]
 800e0ba:	2280      	movs	r2, #128	; 0x80
 800e0bc:	0052      	lsls	r2, r2, #1
 800e0be:	4313      	orrs	r3, r2
 800e0c0:	b21a      	sxth	r2, r3
 800e0c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e0c4:	801a      	strh	r2, [r3, #0]
#endif
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 800e0c6:	4b55      	ldr	r3, [pc, #340]	; (800e21c <dmp_read_fifo+0x2d0>)
 800e0c8:	895b      	ldrh	r3, [r3, #10]
 800e0ca:	001a      	movs	r2, r3
 800e0cc:	2340      	movs	r3, #64	; 0x40
 800e0ce:	4013      	ands	r3, r2
 800e0d0:	d042      	beq.n	800e158 <dmp_read_fifo+0x20c>
        accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 800e0d2:	2047      	movs	r0, #71	; 0x47
 800e0d4:	183b      	adds	r3, r7, r0
 800e0d6:	781b      	ldrb	r3, [r3, #0]
 800e0d8:	2420      	movs	r4, #32
 800e0da:	193a      	adds	r2, r7, r4
 800e0dc:	5cd3      	ldrb	r3, [r2, r3]
 800e0de:	021b      	lsls	r3, r3, #8
 800e0e0:	b21a      	sxth	r2, r3
 800e0e2:	183b      	adds	r3, r7, r0
 800e0e4:	781b      	ldrb	r3, [r3, #0]
 800e0e6:	3301      	adds	r3, #1
 800e0e8:	1939      	adds	r1, r7, r4
 800e0ea:	5ccb      	ldrb	r3, [r1, r3]
 800e0ec:	b21b      	sxth	r3, r3
 800e0ee:	4313      	orrs	r3, r2
 800e0f0:	b21a      	sxth	r2, r3
 800e0f2:	68bb      	ldr	r3, [r7, #8]
 800e0f4:	801a      	strh	r2, [r3, #0]
        accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 800e0f6:	183b      	adds	r3, r7, r0
 800e0f8:	781b      	ldrb	r3, [r3, #0]
 800e0fa:	3302      	adds	r3, #2
 800e0fc:	193a      	adds	r2, r7, r4
 800e0fe:	5cd3      	ldrb	r3, [r2, r3]
 800e100:	021b      	lsls	r3, r3, #8
 800e102:	b219      	sxth	r1, r3
 800e104:	183b      	adds	r3, r7, r0
 800e106:	781b      	ldrb	r3, [r3, #0]
 800e108:	3303      	adds	r3, #3
 800e10a:	193a      	adds	r2, r7, r4
 800e10c:	5cd3      	ldrb	r3, [r2, r3]
 800e10e:	b21a      	sxth	r2, r3
 800e110:	68bb      	ldr	r3, [r7, #8]
 800e112:	3302      	adds	r3, #2
 800e114:	430a      	orrs	r2, r1
 800e116:	b212      	sxth	r2, r2
 800e118:	801a      	strh	r2, [r3, #0]
        accel[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 800e11a:	183b      	adds	r3, r7, r0
 800e11c:	781b      	ldrb	r3, [r3, #0]
 800e11e:	3304      	adds	r3, #4
 800e120:	193a      	adds	r2, r7, r4
 800e122:	5cd3      	ldrb	r3, [r2, r3]
 800e124:	021b      	lsls	r3, r3, #8
 800e126:	b219      	sxth	r1, r3
 800e128:	183b      	adds	r3, r7, r0
 800e12a:	781b      	ldrb	r3, [r3, #0]
 800e12c:	3305      	adds	r3, #5
 800e12e:	193a      	adds	r2, r7, r4
 800e130:	5cd3      	ldrb	r3, [r2, r3]
 800e132:	b21a      	sxth	r2, r3
 800e134:	68bb      	ldr	r3, [r7, #8]
 800e136:	3304      	adds	r3, #4
 800e138:	430a      	orrs	r2, r1
 800e13a:	b212      	sxth	r2, r2
 800e13c:	801a      	strh	r2, [r3, #0]
        ii += 6;
 800e13e:	183b      	adds	r3, r7, r0
 800e140:	183a      	adds	r2, r7, r0
 800e142:	7812      	ldrb	r2, [r2, #0]
 800e144:	3206      	adds	r2, #6
 800e146:	701a      	strb	r2, [r3, #0]
        sensors[0] |= INV_XYZ_ACCEL;
 800e148:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e14a:	2200      	movs	r2, #0
 800e14c:	5e9b      	ldrsh	r3, [r3, r2]
 800e14e:	2208      	movs	r2, #8
 800e150:	4313      	orrs	r3, r2
 800e152:	b21a      	sxth	r2, r3
 800e154:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e156:	801a      	strh	r2, [r3, #0]
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_ANY_GYRO) {
 800e158:	4b30      	ldr	r3, [pc, #192]	; (800e21c <dmp_read_fifo+0x2d0>)
 800e15a:	895b      	ldrh	r3, [r3, #10]
 800e15c:	001a      	movs	r2, r3
 800e15e:	23c0      	movs	r3, #192	; 0xc0
 800e160:	005b      	lsls	r3, r3, #1
 800e162:	4013      	ands	r3, r2
 800e164:	d042      	beq.n	800e1ec <dmp_read_fifo+0x2a0>
        gyro[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 800e166:	2047      	movs	r0, #71	; 0x47
 800e168:	183b      	adds	r3, r7, r0
 800e16a:	781b      	ldrb	r3, [r3, #0]
 800e16c:	2420      	movs	r4, #32
 800e16e:	193a      	adds	r2, r7, r4
 800e170:	5cd3      	ldrb	r3, [r2, r3]
 800e172:	021b      	lsls	r3, r3, #8
 800e174:	b21a      	sxth	r2, r3
 800e176:	183b      	adds	r3, r7, r0
 800e178:	781b      	ldrb	r3, [r3, #0]
 800e17a:	3301      	adds	r3, #1
 800e17c:	1939      	adds	r1, r7, r4
 800e17e:	5ccb      	ldrb	r3, [r1, r3]
 800e180:	b21b      	sxth	r3, r3
 800e182:	4313      	orrs	r3, r2
 800e184:	b21a      	sxth	r2, r3
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	801a      	strh	r2, [r3, #0]
        gyro[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 800e18a:	183b      	adds	r3, r7, r0
 800e18c:	781b      	ldrb	r3, [r3, #0]
 800e18e:	3302      	adds	r3, #2
 800e190:	193a      	adds	r2, r7, r4
 800e192:	5cd3      	ldrb	r3, [r2, r3]
 800e194:	021b      	lsls	r3, r3, #8
 800e196:	b219      	sxth	r1, r3
 800e198:	183b      	adds	r3, r7, r0
 800e19a:	781b      	ldrb	r3, [r3, #0]
 800e19c:	3303      	adds	r3, #3
 800e19e:	193a      	adds	r2, r7, r4
 800e1a0:	5cd3      	ldrb	r3, [r2, r3]
 800e1a2:	b21a      	sxth	r2, r3
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	3302      	adds	r3, #2
 800e1a8:	430a      	orrs	r2, r1
 800e1aa:	b212      	sxth	r2, r2
 800e1ac:	801a      	strh	r2, [r3, #0]
        gyro[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 800e1ae:	183b      	adds	r3, r7, r0
 800e1b0:	781b      	ldrb	r3, [r3, #0]
 800e1b2:	3304      	adds	r3, #4
 800e1b4:	193a      	adds	r2, r7, r4
 800e1b6:	5cd3      	ldrb	r3, [r2, r3]
 800e1b8:	021b      	lsls	r3, r3, #8
 800e1ba:	b219      	sxth	r1, r3
 800e1bc:	183b      	adds	r3, r7, r0
 800e1be:	781b      	ldrb	r3, [r3, #0]
 800e1c0:	3305      	adds	r3, #5
 800e1c2:	193a      	adds	r2, r7, r4
 800e1c4:	5cd3      	ldrb	r3, [r2, r3]
 800e1c6:	b21a      	sxth	r2, r3
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	3304      	adds	r3, #4
 800e1cc:	430a      	orrs	r2, r1
 800e1ce:	b212      	sxth	r2, r2
 800e1d0:	801a      	strh	r2, [r3, #0]
        ii += 6;
 800e1d2:	183b      	adds	r3, r7, r0
 800e1d4:	183a      	adds	r2, r7, r0
 800e1d6:	7812      	ldrb	r2, [r2, #0]
 800e1d8:	3206      	adds	r2, #6
 800e1da:	701a      	strb	r2, [r3, #0]
        sensors[0] |= INV_XYZ_GYRO;
 800e1dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e1de:	2200      	movs	r2, #0
 800e1e0:	5e9b      	ldrsh	r3, [r3, r2]
 800e1e2:	2270      	movs	r2, #112	; 0x70
 800e1e4:	4313      	orrs	r3, r2
 800e1e6:	b21a      	sxth	r2, r3
 800e1e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e1ea:	801a      	strh	r2, [r3, #0]
    }

    /* Gesture data is at the end of the DMP packet. Parse it and call
     * the gesture callbacks (if registered).
     */
    if (dmp.feature_mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 800e1ec:	4b0b      	ldr	r3, [pc, #44]	; (800e21c <dmp_read_fifo+0x2d0>)
 800e1ee:	895b      	ldrh	r3, [r3, #10]
 800e1f0:	001a      	movs	r2, r3
 800e1f2:	2303      	movs	r3, #3
 800e1f4:	4013      	ands	r3, r2
 800e1f6:	d008      	beq.n	800e20a <dmp_read_fifo+0x2be>
        decode_gesture(fifo_data + ii);
 800e1f8:	2347      	movs	r3, #71	; 0x47
 800e1fa:	18fb      	adds	r3, r7, r3
 800e1fc:	781b      	ldrb	r3, [r3, #0]
 800e1fe:	2220      	movs	r2, #32
 800e200:	18ba      	adds	r2, r7, r2
 800e202:	18d3      	adds	r3, r2, r3
 800e204:	0018      	movs	r0, r3
 800e206:	f7ff fe4f 	bl	800dea8 <decode_gesture>

    get_ms(timestamp);
 800e20a:	683b      	ldr	r3, [r7, #0]
 800e20c:	0018      	movs	r0, r3
 800e20e:	f7f8 fa95 	bl	800673c <get_tick_count>
    return 0;
 800e212:	2300      	movs	r3, #0
}
 800e214:	0018      	movs	r0, r3
 800e216:	46bd      	mov	sp, r7
 800e218:	b013      	add	sp, #76	; 0x4c
 800e21a:	bd90      	pop	{r4, r7, pc}
 800e21c:	200009d0 	.word	0x200009d0

0800e220 <_MLPrintLog>:
 *  @param[in]  fmt         String of text with optional format tags.
 *
 *  @return     0 if successful.
 */
int _MLPrintLog (int priority, const char* tag, const char* fmt, ...)
{
 800e220:	b40c      	push	{r2, r3}
 800e222:	b5b0      	push	{r4, r5, r7, lr}
 800e224:	b0ce      	sub	sp, #312	; 0x138
 800e226:	af00      	add	r7, sp, #0
 800e228:	6078      	str	r0, [r7, #4]
 800e22a:	6039      	str	r1, [r7, #0]
    va_list args;
    int length, ii, i;
    char buf[BUF_SIZE], out[PACKET_LENGTH], this_length;

    /* This can be modified to exit for unsupported priorities. */
    switch (priority) {
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	2b06      	cmp	r3, #6
 800e230:	dc03      	bgt.n	800e23a <_MLPrintLog+0x1a>
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	2b00      	cmp	r3, #0
 800e236:	da05      	bge.n	800e244 <_MLPrintLog+0x24>
 800e238:	e002      	b.n	800e240 <_MLPrintLog+0x20>
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	2b08      	cmp	r3, #8
 800e23e:	d001      	beq.n	800e244 <_MLPrintLog+0x24>
    case MPL_LOG_WARN:
    case MPL_LOG_ERROR:
    case MPL_LOG_SILENT:
        break;
    default:
        return 0;
 800e240:	2300      	movs	r3, #0
 800e242:	e0a1      	b.n	800e388 <_MLPrintLog+0x168>
        break;
 800e244:	46c0      	nop			; (mov r8, r8)
    }

    va_start(args, fmt);
 800e246:	23a2      	movs	r3, #162	; 0xa2
 800e248:	005b      	lsls	r3, r3, #1
 800e24a:	2008      	movs	r0, #8
 800e24c:	181b      	adds	r3, r3, r0
 800e24e:	19db      	adds	r3, r3, r7
 800e250:	2292      	movs	r2, #146	; 0x92
 800e252:	0052      	lsls	r2, r2, #1
 800e254:	18b9      	adds	r1, r7, r2
 800e256:	600b      	str	r3, [r1, #0]

    length = vsprintf(buf, fmt, args);
 800e258:	18bb      	adds	r3, r7, r2
 800e25a:	681a      	ldr	r2, [r3, #0]
 800e25c:	23a0      	movs	r3, #160	; 0xa0
 800e25e:	005b      	lsls	r3, r3, #1
 800e260:	181b      	adds	r3, r3, r0
 800e262:	19db      	adds	r3, r3, r7
 800e264:	6819      	ldr	r1, [r3, #0]
 800e266:	2324      	movs	r3, #36	; 0x24
 800e268:	18fb      	adds	r3, r7, r3
 800e26a:	0018      	movs	r0, r3
 800e26c:	f003 fd88 	bl	8011d80 <vsiprintf>
 800e270:	0003      	movs	r3, r0
 800e272:	2296      	movs	r2, #150	; 0x96
 800e274:	0052      	lsls	r2, r2, #1
 800e276:	18b9      	adds	r1, r7, r2
 800e278:	600b      	str	r3, [r1, #0]
    if (length <= 0) {
 800e27a:	18bb      	adds	r3, r7, r2
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	2b00      	cmp	r3, #0
 800e280:	dc02      	bgt.n	800e288 <_MLPrintLog+0x68>
        va_end(args);
        return length;
 800e282:	18bb      	adds	r3, r7, r2
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	e07f      	b.n	800e388 <_MLPrintLog+0x168>
    }

    memset(out, 0, PACKET_LENGTH);
 800e288:	230c      	movs	r3, #12
 800e28a:	18fb      	adds	r3, r7, r3
 800e28c:	2217      	movs	r2, #23
 800e28e:	2100      	movs	r1, #0
 800e290:	0018      	movs	r0, r3
 800e292:	f003 fe48 	bl	8011f26 <memset>
    out[0] = '$';
 800e296:	4b40      	ldr	r3, [pc, #256]	; (800e398 <_MLPrintLog+0x178>)
 800e298:	219c      	movs	r1, #156	; 0x9c
 800e29a:	0049      	lsls	r1, r1, #1
 800e29c:	185b      	adds	r3, r3, r1
 800e29e:	19db      	adds	r3, r3, r7
 800e2a0:	2224      	movs	r2, #36	; 0x24
 800e2a2:	701a      	strb	r2, [r3, #0]
    out[1] = PACKET_DEBUG;
 800e2a4:	4b3c      	ldr	r3, [pc, #240]	; (800e398 <_MLPrintLog+0x178>)
 800e2a6:	185b      	adds	r3, r3, r1
 800e2a8:	19db      	adds	r3, r3, r7
 800e2aa:	2201      	movs	r2, #1
 800e2ac:	705a      	strb	r2, [r3, #1]
    out[2] = priority;
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	b2da      	uxtb	r2, r3
 800e2b2:	4b39      	ldr	r3, [pc, #228]	; (800e398 <_MLPrintLog+0x178>)
 800e2b4:	185b      	adds	r3, r3, r1
 800e2b6:	19db      	adds	r3, r3, r7
 800e2b8:	709a      	strb	r2, [r3, #2]
    out[21] = '\r';
 800e2ba:	4b37      	ldr	r3, [pc, #220]	; (800e398 <_MLPrintLog+0x178>)
 800e2bc:	185b      	adds	r3, r3, r1
 800e2be:	19db      	adds	r3, r3, r7
 800e2c0:	220d      	movs	r2, #13
 800e2c2:	755a      	strb	r2, [r3, #21]
    out[22] = '\n';
 800e2c4:	4b34      	ldr	r3, [pc, #208]	; (800e398 <_MLPrintLog+0x178>)
 800e2c6:	185b      	adds	r3, r3, r1
 800e2c8:	19db      	adds	r3, r3, r7
 800e2ca:	220a      	movs	r2, #10
 800e2cc:	759a      	strb	r2, [r3, #22]
    for (ii = 0; ii < length; ii += (PACKET_LENGTH-5)) {
 800e2ce:	2300      	movs	r3, #0
 800e2d0:	229a      	movs	r2, #154	; 0x9a
 800e2d2:	0052      	lsls	r2, r2, #1
 800e2d4:	18ba      	adds	r2, r7, r2
 800e2d6:	6013      	str	r3, [r2, #0]
 800e2d8:	e04b      	b.n	800e372 <_MLPrintLog+0x152>
#define min(a,b) ((a < b) ? a : b)
        this_length = min(length-ii, PACKET_LENGTH-5);
 800e2da:	2396      	movs	r3, #150	; 0x96
 800e2dc:	005b      	lsls	r3, r3, #1
 800e2de:	18fb      	adds	r3, r7, r3
 800e2e0:	681a      	ldr	r2, [r3, #0]
 800e2e2:	239a      	movs	r3, #154	; 0x9a
 800e2e4:	005b      	lsls	r3, r3, #1
 800e2e6:	18fb      	adds	r3, r7, r3
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	1ad3      	subs	r3, r2, r3
 800e2ec:	2b12      	cmp	r3, #18
 800e2ee:	dd00      	ble.n	800e2f2 <_MLPrintLog+0xd2>
 800e2f0:	2312      	movs	r3, #18
 800e2f2:	242c      	movs	r4, #44	; 0x2c
 800e2f4:	34ff      	adds	r4, #255	; 0xff
 800e2f6:	193a      	adds	r2, r7, r4
 800e2f8:	7013      	strb	r3, [r2, #0]
        memset(out+3, 0, 18);
 800e2fa:	250c      	movs	r5, #12
 800e2fc:	197b      	adds	r3, r7, r5
 800e2fe:	3303      	adds	r3, #3
 800e300:	2212      	movs	r2, #18
 800e302:	2100      	movs	r1, #0
 800e304:	0018      	movs	r0, r3
 800e306:	f003 fe0e 	bl	8011f26 <memset>
        memcpy(out+3, buf+ii, this_length);
 800e30a:	197b      	adds	r3, r7, r5
 800e30c:	3303      	adds	r3, #3
 800e30e:	229a      	movs	r2, #154	; 0x9a
 800e310:	0052      	lsls	r2, r2, #1
 800e312:	18ba      	adds	r2, r7, r2
 800e314:	6812      	ldr	r2, [r2, #0]
 800e316:	2124      	movs	r1, #36	; 0x24
 800e318:	1879      	adds	r1, r7, r1
 800e31a:	1889      	adds	r1, r1, r2
 800e31c:	193a      	adds	r2, r7, r4
 800e31e:	7812      	ldrb	r2, [r2, #0]
 800e320:	0018      	movs	r0, r3
 800e322:	f003 fe93 	bl	801204c <memcpy>
        for (i=0; i<PACKET_LENGTH; i++) {
 800e326:	2300      	movs	r3, #0
 800e328:	2298      	movs	r2, #152	; 0x98
 800e32a:	0052      	lsls	r2, r2, #1
 800e32c:	18ba      	adds	r2, r7, r2
 800e32e:	6013      	str	r3, [r2, #0]
 800e330:	e012      	b.n	800e358 <_MLPrintLog+0x138>
        	__io_putchar(out[i]);
 800e332:	4b19      	ldr	r3, [pc, #100]	; (800e398 <_MLPrintLog+0x178>)
 800e334:	229c      	movs	r2, #156	; 0x9c
 800e336:	0052      	lsls	r2, r2, #1
 800e338:	189b      	adds	r3, r3, r2
 800e33a:	19da      	adds	r2, r3, r7
 800e33c:	2498      	movs	r4, #152	; 0x98
 800e33e:	0064      	lsls	r4, r4, #1
 800e340:	193b      	adds	r3, r7, r4
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	18d3      	adds	r3, r2, r3
 800e346:	781b      	ldrb	r3, [r3, #0]
 800e348:	0018      	movs	r0, r3
 800e34a:	f7f9 f921 	bl	8007590 <__io_putchar>
        for (i=0; i<PACKET_LENGTH; i++) {
 800e34e:	193b      	adds	r3, r7, r4
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	3301      	adds	r3, #1
 800e354:	193a      	adds	r2, r7, r4
 800e356:	6013      	str	r3, [r2, #0]
 800e358:	2398      	movs	r3, #152	; 0x98
 800e35a:	005b      	lsls	r3, r3, #1
 800e35c:	18fb      	adds	r3, r7, r3
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	2b16      	cmp	r3, #22
 800e362:	dde6      	ble.n	800e332 <_MLPrintLog+0x112>
    for (ii = 0; ii < length; ii += (PACKET_LENGTH-5)) {
 800e364:	229a      	movs	r2, #154	; 0x9a
 800e366:	0052      	lsls	r2, r2, #1
 800e368:	18bb      	adds	r3, r7, r2
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	3312      	adds	r3, #18
 800e36e:	18ba      	adds	r2, r7, r2
 800e370:	6013      	str	r3, [r2, #0]
 800e372:	239a      	movs	r3, #154	; 0x9a
 800e374:	005b      	lsls	r3, r3, #1
 800e376:	18fb      	adds	r3, r7, r3
 800e378:	681a      	ldr	r2, [r3, #0]
 800e37a:	2396      	movs	r3, #150	; 0x96
 800e37c:	005b      	lsls	r3, r3, #1
 800e37e:	18fb      	adds	r3, r7, r3
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	429a      	cmp	r2, r3
 800e384:	dba9      	blt.n	800e2da <_MLPrintLog+0xba>
    }
    

    va_end(args);

    return 0;
 800e386:	2300      	movs	r3, #0
}
 800e388:	0018      	movs	r0, r3
 800e38a:	46bd      	mov	sp, r7
 800e38c:	b04e      	add	sp, #312	; 0x138
 800e38e:	bcb0      	pop	{r4, r5, r7}
 800e390:	bc08      	pop	{r3}
 800e392:	b002      	add	sp, #8
 800e394:	4718      	bx	r3
 800e396:	46c0      	nop			; (mov r8, r8)
 800e398:	fffffed4 	.word	0xfffffed4

0800e39c <inv_set_message>:
*                  a motion or no motion message.
* @param[in] level Level of the messages. It starts at 0, and may increase
*            in the future to allow more messages if the bit storage runs out.
*/
void inv_set_message(long set, long clear, int level)
{
 800e39c:	b580      	push	{r7, lr}
 800e39e:	b084      	sub	sp, #16
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	60f8      	str	r0, [r7, #12]
 800e3a4:	60b9      	str	r1, [r7, #8]
 800e3a6:	607a      	str	r2, [r7, #4]
    if (level == 0) {
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d10c      	bne.n	800e3c8 <inv_set_message+0x2c>
        mh.message &= ~clear;
 800e3ae:	4b08      	ldr	r3, [pc, #32]	; (800e3d0 <inv_set_message+0x34>)
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	68ba      	ldr	r2, [r7, #8]
 800e3b4:	43d2      	mvns	r2, r2
 800e3b6:	401a      	ands	r2, r3
 800e3b8:	4b05      	ldr	r3, [pc, #20]	; (800e3d0 <inv_set_message+0x34>)
 800e3ba:	601a      	str	r2, [r3, #0]
        mh.message |= set;
 800e3bc:	4b04      	ldr	r3, [pc, #16]	; (800e3d0 <inv_set_message+0x34>)
 800e3be:	681a      	ldr	r2, [r3, #0]
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	431a      	orrs	r2, r3
 800e3c4:	4b02      	ldr	r3, [pc, #8]	; (800e3d0 <inv_set_message+0x34>)
 800e3c6:	601a      	str	r2, [r3, #0]
    }
}
 800e3c8:	46c0      	nop			; (mov r8, r8)
 800e3ca:	46bd      	mov	sp, r7
 800e3cc:	b004      	add	sp, #16
 800e3ce:	bd80      	pop	{r7, pc}
 800e3d0:	200009e0 	.word	0x200009e0

0800e3d4 <inv_q30_to_float>:
        float input;
        float output;
    }   inv_biquad_filter_t;

    static inline float inv_q30_to_float(long q30)
    {
 800e3d4:	b580      	push	{r7, lr}
 800e3d6:	b082      	sub	sp, #8
 800e3d8:	af00      	add	r7, sp, #0
 800e3da:	6078      	str	r0, [r7, #4]
        return (float) q30 / ((float)(1L << 30));
 800e3dc:	6878      	ldr	r0, [r7, #4]
 800e3de:	f7f6 f835 	bl	800444c <__aeabi_i2f>
 800e3e2:	1c03      	adds	r3, r0, #0
 800e3e4:	219d      	movs	r1, #157	; 0x9d
 800e3e6:	05c9      	lsls	r1, r1, #23
 800e3e8:	1c18      	adds	r0, r3, #0
 800e3ea:	f7f5 fb41 	bl	8003a70 <__aeabi_fdiv>
 800e3ee:	1c03      	adds	r3, r0, #0
    }
 800e3f0:	1c18      	adds	r0, r3, #0
 800e3f2:	46bd      	mov	sp, r7
 800e3f4:	b002      	add	sp, #8
 800e3f6:	bd80      	pop	{r7, pc}

0800e3f8 <inv_compass_angle>:
 * @param[in] grav Gravity Vector (Body Frame), length 3
 * @param[in] quat Quaternion, Length 4
 * @return Angle Cross Product makes after quaternion rotation.
 */
float inv_compass_angle(const long *compass, const long *grav, const long *quat)
{
 800e3f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e3fa:	b097      	sub	sp, #92	; 0x5c
 800e3fc:	af00      	add	r7, sp, #0
 800e3fe:	60f8      	str	r0, [r7, #12]
 800e400:	60b9      	str	r1, [r7, #8]
 800e402:	607a      	str	r2, [r7, #4]
    long cgcross[4], q1[4], q2[4], qi[4];
    float angW;

    // Compass cross Gravity
    cgcross[0] = 0L;
 800e404:	2544      	movs	r5, #68	; 0x44
 800e406:	197b      	adds	r3, r7, r5
 800e408:	2200      	movs	r2, #0
 800e40a:	601a      	str	r2, [r3, #0]
    cgcross[1] = inv_q30_mult(compass[1], grav[2]) - inv_q30_mult(compass[2], grav[1]);
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	3304      	adds	r3, #4
 800e410:	681a      	ldr	r2, [r3, #0]
 800e412:	68bb      	ldr	r3, [r7, #8]
 800e414:	3308      	adds	r3, #8
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	0019      	movs	r1, r3
 800e41a:	0010      	movs	r0, r2
 800e41c:	f000 f8bb 	bl	800e596 <inv_q30_mult>
 800e420:	0004      	movs	r4, r0
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	3308      	adds	r3, #8
 800e426:	681a      	ldr	r2, [r3, #0]
 800e428:	68bb      	ldr	r3, [r7, #8]
 800e42a:	3304      	adds	r3, #4
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	0019      	movs	r1, r3
 800e430:	0010      	movs	r0, r2
 800e432:	f000 f8b0 	bl	800e596 <inv_q30_mult>
 800e436:	0003      	movs	r3, r0
 800e438:	1ae2      	subs	r2, r4, r3
 800e43a:	197b      	adds	r3, r7, r5
 800e43c:	605a      	str	r2, [r3, #4]
    cgcross[2] = inv_q30_mult(compass[2], grav[0]) - inv_q30_mult(compass[0], grav[2]);
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	3308      	adds	r3, #8
 800e442:	681a      	ldr	r2, [r3, #0]
 800e444:	68bb      	ldr	r3, [r7, #8]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	0019      	movs	r1, r3
 800e44a:	0010      	movs	r0, r2
 800e44c:	f000 f8a3 	bl	800e596 <inv_q30_mult>
 800e450:	0004      	movs	r4, r0
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	681a      	ldr	r2, [r3, #0]
 800e456:	68bb      	ldr	r3, [r7, #8]
 800e458:	3308      	adds	r3, #8
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	0019      	movs	r1, r3
 800e45e:	0010      	movs	r0, r2
 800e460:	f000 f899 	bl	800e596 <inv_q30_mult>
 800e464:	0003      	movs	r3, r0
 800e466:	1ae2      	subs	r2, r4, r3
 800e468:	197b      	adds	r3, r7, r5
 800e46a:	609a      	str	r2, [r3, #8]
    cgcross[3] = inv_q30_mult(compass[0], grav[1]) - inv_q30_mult(compass[1], grav[0]);
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	681a      	ldr	r2, [r3, #0]
 800e470:	68bb      	ldr	r3, [r7, #8]
 800e472:	3304      	adds	r3, #4
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	0019      	movs	r1, r3
 800e478:	0010      	movs	r0, r2
 800e47a:	f000 f88c 	bl	800e596 <inv_q30_mult>
 800e47e:	0004      	movs	r4, r0
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	3304      	adds	r3, #4
 800e484:	681a      	ldr	r2, [r3, #0]
 800e486:	68bb      	ldr	r3, [r7, #8]
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	0019      	movs	r1, r3
 800e48c:	0010      	movs	r0, r2
 800e48e:	f000 f882 	bl	800e596 <inv_q30_mult>
 800e492:	0003      	movs	r3, r0
 800e494:	1ae2      	subs	r2, r4, r3
 800e496:	197b      	adds	r3, r7, r5
 800e498:	60da      	str	r2, [r3, #12]

    // Now convert cross product into world frame
    inv_q_mult(quat, cgcross, q1);
 800e49a:	2634      	movs	r6, #52	; 0x34
 800e49c:	19ba      	adds	r2, r7, r6
 800e49e:	1979      	adds	r1, r7, r5
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	0018      	movs	r0, r3
 800e4a4:	f000 f89a 	bl	800e5dc <inv_q_mult>
    inv_q_invert(quat, qi);
 800e4a8:	2514      	movs	r5, #20
 800e4aa:	197a      	adds	r2, r7, r5
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	0011      	movs	r1, r2
 800e4b0:	0018      	movs	r0, r3
 800e4b2:	f000 f98b 	bl	800e7cc <inv_q_invert>
    inv_q_mult(q1, qi, q2);
 800e4b6:	2424      	movs	r4, #36	; 0x24
 800e4b8:	193a      	adds	r2, r7, r4
 800e4ba:	1979      	adds	r1, r7, r5
 800e4bc:	19bb      	adds	r3, r7, r6
 800e4be:	0018      	movs	r0, r3
 800e4c0:	f000 f88c 	bl	800e5dc <inv_q_mult>

    // Protect against atan2 of 0,0
    if ((q2[2] == 0L) && (q2[1] == 0L))
 800e4c4:	193b      	adds	r3, r7, r4
 800e4c6:	689b      	ldr	r3, [r3, #8]
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d105      	bne.n	800e4d8 <inv_compass_angle+0xe0>
 800e4cc:	193b      	adds	r3, r7, r4
 800e4ce:	685b      	ldr	r3, [r3, #4]
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d101      	bne.n	800e4d8 <inv_compass_angle+0xe0>
        return 0.f;
 800e4d4:	2300      	movs	r3, #0
 800e4d6:	e016      	b.n	800e506 <inv_compass_angle+0x10e>

    // This is the unfiltered heading correction
    angW = -atan2f(inv_q30_to_float(q2[2]), inv_q30_to_float(q2[1]));
 800e4d8:	2524      	movs	r5, #36	; 0x24
 800e4da:	197b      	adds	r3, r7, r5
 800e4dc:	689b      	ldr	r3, [r3, #8]
 800e4de:	0018      	movs	r0, r3
 800e4e0:	f7ff ff78 	bl	800e3d4 <inv_q30_to_float>
 800e4e4:	1c04      	adds	r4, r0, #0
 800e4e6:	197b      	adds	r3, r7, r5
 800e4e8:	685b      	ldr	r3, [r3, #4]
 800e4ea:	0018      	movs	r0, r3
 800e4ec:	f7ff ff72 	bl	800e3d4 <inv_q30_to_float>
 800e4f0:	1c03      	adds	r3, r0, #0
 800e4f2:	1c19      	adds	r1, r3, #0
 800e4f4:	1c20      	adds	r0, r4, #0
 800e4f6:	f001 fa7b 	bl	800f9f0 <atan2f>
 800e4fa:	1c02      	adds	r2, r0, #0
 800e4fc:	2380      	movs	r3, #128	; 0x80
 800e4fe:	061b      	lsls	r3, r3, #24
 800e500:	4053      	eors	r3, r2
 800e502:	657b      	str	r3, [r7, #84]	; 0x54
    return angW;
 800e504:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
 800e506:	1c18      	adds	r0, r3, #0
 800e508:	46bd      	mov	sp, r7
 800e50a:	b017      	add	sp, #92	; 0x5c
 800e50c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e50e <inv_get_gyro_sum_of_sqr>:
 *          (1 degree per second)^2 = 2^6 = 2^GYRO_MAG_SQR_SHIFT.
 * @param[in] gyro Gyro data scaled with 1 dps = 2^16
 *  @return the computed magnitude squared output of the gyroscope.
 */
unsigned long inv_get_gyro_sum_of_sqr(const long *gyro)
{
 800e50e:	b580      	push	{r7, lr}
 800e510:	b086      	sub	sp, #24
 800e512:	af00      	add	r7, sp, #0
 800e514:	6078      	str	r0, [r7, #4]
    unsigned long gmag = 0;
 800e516:	2300      	movs	r3, #0
 800e518:	617b      	str	r3, [r7, #20]
    long temp;
    int kk;

    for (kk = 0; kk < 3; ++kk) {
 800e51a:	2300      	movs	r3, #0
 800e51c:	613b      	str	r3, [r7, #16]
 800e51e:	e00f      	b.n	800e540 <inv_get_gyro_sum_of_sqr+0x32>
        temp = gyro[kk] >> (16 - (GYRO_MAG_SQR_SHIFT / 2));
 800e520:	693b      	ldr	r3, [r7, #16]
 800e522:	009b      	lsls	r3, r3, #2
 800e524:	687a      	ldr	r2, [r7, #4]
 800e526:	18d3      	adds	r3, r2, r3
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	135b      	asrs	r3, r3, #13
 800e52c:	60fb      	str	r3, [r7, #12]
        gmag += temp * temp;
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	435b      	muls	r3, r3
 800e532:	001a      	movs	r2, r3
 800e534:	697b      	ldr	r3, [r7, #20]
 800e536:	189b      	adds	r3, r3, r2
 800e538:	617b      	str	r3, [r7, #20]
    for (kk = 0; kk < 3; ++kk) {
 800e53a:	693b      	ldr	r3, [r7, #16]
 800e53c:	3301      	adds	r3, #1
 800e53e:	613b      	str	r3, [r7, #16]
 800e540:	693b      	ldr	r3, [r7, #16]
 800e542:	2b02      	cmp	r3, #2
 800e544:	ddec      	ble.n	800e520 <inv_get_gyro_sum_of_sqr+0x12>
    }

    return gmag;
 800e546:	697b      	ldr	r3, [r7, #20]
}
 800e548:	0018      	movs	r0, r3
 800e54a:	46bd      	mov	sp, r7
 800e54c:	b006      	add	sp, #24
 800e54e:	bd80      	pop	{r7, pc}

0800e550 <inv_q29_mult>:
 * @param[in] a
 * @param[in] b
 * @return ((long long)a*b)>>29
*/
long inv_q29_mult(long a, long b)
{
 800e550:	b5b0      	push	{r4, r5, r7, lr}
 800e552:	b088      	sub	sp, #32
 800e554:	af00      	add	r7, sp, #0
 800e556:	60f8      	str	r0, [r7, #12]
 800e558:	60b9      	str	r1, [r7, #8]
    result = (long)((float)a * b / (1L << 29));
    return result;
#else
    long long temp;
    long result;
    temp = (long long)a * b;
 800e55a:	68f9      	ldr	r1, [r7, #12]
 800e55c:	6039      	str	r1, [r7, #0]
 800e55e:	17c9      	asrs	r1, r1, #31
 800e560:	6079      	str	r1, [r7, #4]
 800e562:	68b9      	ldr	r1, [r7, #8]
 800e564:	000a      	movs	r2, r1
 800e566:	17c9      	asrs	r1, r1, #31
 800e568:	000b      	movs	r3, r1
 800e56a:	6838      	ldr	r0, [r7, #0]
 800e56c:	6879      	ldr	r1, [r7, #4]
 800e56e:	f7f4 ff9f 	bl	80034b0 <__aeabi_lmul>
 800e572:	0002      	movs	r2, r0
 800e574:	000b      	movs	r3, r1
 800e576:	61ba      	str	r2, [r7, #24]
 800e578:	61fb      	str	r3, [r7, #28]
    result = (long)(temp >> 29);
 800e57a:	69fb      	ldr	r3, [r7, #28]
 800e57c:	00db      	lsls	r3, r3, #3
 800e57e:	69ba      	ldr	r2, [r7, #24]
 800e580:	0f54      	lsrs	r4, r2, #29
 800e582:	431c      	orrs	r4, r3
 800e584:	69fb      	ldr	r3, [r7, #28]
 800e586:	175d      	asrs	r5, r3, #29
 800e588:	0023      	movs	r3, r4
 800e58a:	617b      	str	r3, [r7, #20]
    return result;
 800e58c:	697b      	ldr	r3, [r7, #20]
#endif
}
 800e58e:	0018      	movs	r0, r3
 800e590:	46bd      	mov	sp, r7
 800e592:	b008      	add	sp, #32
 800e594:	bdb0      	pop	{r4, r5, r7, pc}

0800e596 <inv_q30_mult>:
 * @param[in] a
 * @param[in] b
 * @return ((long long)a*b)>>30
*/
long inv_q30_mult(long a, long b)
{
 800e596:	b5b0      	push	{r4, r5, r7, lr}
 800e598:	b088      	sub	sp, #32
 800e59a:	af00      	add	r7, sp, #0
 800e59c:	60f8      	str	r0, [r7, #12]
 800e59e:	60b9      	str	r1, [r7, #8]
    result = (long)((float)a * b / (1L << 30));
    return result;
#else
    long long temp;
    long result;
    temp = (long long)a * b;
 800e5a0:	68f9      	ldr	r1, [r7, #12]
 800e5a2:	6039      	str	r1, [r7, #0]
 800e5a4:	17c9      	asrs	r1, r1, #31
 800e5a6:	6079      	str	r1, [r7, #4]
 800e5a8:	68b9      	ldr	r1, [r7, #8]
 800e5aa:	000a      	movs	r2, r1
 800e5ac:	17c9      	asrs	r1, r1, #31
 800e5ae:	000b      	movs	r3, r1
 800e5b0:	6838      	ldr	r0, [r7, #0]
 800e5b2:	6879      	ldr	r1, [r7, #4]
 800e5b4:	f7f4 ff7c 	bl	80034b0 <__aeabi_lmul>
 800e5b8:	0002      	movs	r2, r0
 800e5ba:	000b      	movs	r3, r1
 800e5bc:	61ba      	str	r2, [r7, #24]
 800e5be:	61fb      	str	r3, [r7, #28]
    result = (long)(temp >> 30);
 800e5c0:	69fb      	ldr	r3, [r7, #28]
 800e5c2:	009b      	lsls	r3, r3, #2
 800e5c4:	69ba      	ldr	r2, [r7, #24]
 800e5c6:	0f94      	lsrs	r4, r2, #30
 800e5c8:	431c      	orrs	r4, r3
 800e5ca:	69fb      	ldr	r3, [r7, #28]
 800e5cc:	179d      	asrs	r5, r3, #30
 800e5ce:	0023      	movs	r3, r4
 800e5d0:	617b      	str	r3, [r7, #20]
    return result;
 800e5d2:	697b      	ldr	r3, [r7, #20]
#endif
}
 800e5d4:	0018      	movs	r0, r3
 800e5d6:	46bd      	mov	sp, r7
 800e5d8:	b008      	add	sp, #32
 800e5da:	bdb0      	pop	{r4, r5, r7, pc}

0800e5dc <inv_q_mult>:
*            to 2^30
* @param[out] qProd Product after quaternion multiply. Length 4.
*             1.0 scaled to 2^30.
*/
void inv_q_mult(const long *q1, const long *q2, long *qProd)
{
 800e5dc:	b590      	push	{r4, r7, lr}
 800e5de:	b085      	sub	sp, #20
 800e5e0:	af00      	add	r7, sp, #0
 800e5e2:	60f8      	str	r0, [r7, #12]
 800e5e4:	60b9      	str	r1, [r7, #8]
 800e5e6:	607a      	str	r2, [r7, #4]
    INVENSENSE_FUNC_START;
    qProd[0] = inv_q30_mult(q1[0], q2[0]) - inv_q30_mult(q1[1], q2[1]) -
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	681a      	ldr	r2, [r3, #0]
 800e5ec:	68bb      	ldr	r3, [r7, #8]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	0019      	movs	r1, r3
 800e5f2:	0010      	movs	r0, r2
 800e5f4:	f7ff ffcf 	bl	800e596 <inv_q30_mult>
 800e5f8:	0004      	movs	r4, r0
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	3304      	adds	r3, #4
 800e5fe:	681a      	ldr	r2, [r3, #0]
 800e600:	68bb      	ldr	r3, [r7, #8]
 800e602:	3304      	adds	r3, #4
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	0019      	movs	r1, r3
 800e608:	0010      	movs	r0, r2
 800e60a:	f7ff ffc4 	bl	800e596 <inv_q30_mult>
 800e60e:	0003      	movs	r3, r0
 800e610:	1ae4      	subs	r4, r4, r3
               inv_q30_mult(q1[2], q2[2]) - inv_q30_mult(q1[3], q2[3]);
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	3308      	adds	r3, #8
 800e616:	681a      	ldr	r2, [r3, #0]
 800e618:	68bb      	ldr	r3, [r7, #8]
 800e61a:	3308      	adds	r3, #8
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	0019      	movs	r1, r3
 800e620:	0010      	movs	r0, r2
 800e622:	f7ff ffb8 	bl	800e596 <inv_q30_mult>
 800e626:	0003      	movs	r3, r0
    qProd[0] = inv_q30_mult(q1[0], q2[0]) - inv_q30_mult(q1[1], q2[1]) -
 800e628:	1ae4      	subs	r4, r4, r3
               inv_q30_mult(q1[2], q2[2]) - inv_q30_mult(q1[3], q2[3]);
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	330c      	adds	r3, #12
 800e62e:	681a      	ldr	r2, [r3, #0]
 800e630:	68bb      	ldr	r3, [r7, #8]
 800e632:	330c      	adds	r3, #12
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	0019      	movs	r1, r3
 800e638:	0010      	movs	r0, r2
 800e63a:	f7ff ffac 	bl	800e596 <inv_q30_mult>
 800e63e:	0003      	movs	r3, r0
 800e640:	1ae2      	subs	r2, r4, r3
    qProd[0] = inv_q30_mult(q1[0], q2[0]) - inv_q30_mult(q1[1], q2[1]) -
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	601a      	str	r2, [r3, #0]

    qProd[1] = inv_q30_mult(q1[0], q2[1]) + inv_q30_mult(q1[1], q2[0]) +
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	681a      	ldr	r2, [r3, #0]
 800e64a:	68bb      	ldr	r3, [r7, #8]
 800e64c:	3304      	adds	r3, #4
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	0019      	movs	r1, r3
 800e652:	0010      	movs	r0, r2
 800e654:	f7ff ff9f 	bl	800e596 <inv_q30_mult>
 800e658:	0004      	movs	r4, r0
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	3304      	adds	r3, #4
 800e65e:	681a      	ldr	r2, [r3, #0]
 800e660:	68bb      	ldr	r3, [r7, #8]
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	0019      	movs	r1, r3
 800e666:	0010      	movs	r0, r2
 800e668:	f7ff ff95 	bl	800e596 <inv_q30_mult>
 800e66c:	0003      	movs	r3, r0
 800e66e:	18e4      	adds	r4, r4, r3
               inv_q30_mult(q1[2], q2[3]) - inv_q30_mult(q1[3], q2[2]);
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	3308      	adds	r3, #8
 800e674:	681a      	ldr	r2, [r3, #0]
 800e676:	68bb      	ldr	r3, [r7, #8]
 800e678:	330c      	adds	r3, #12
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	0019      	movs	r1, r3
 800e67e:	0010      	movs	r0, r2
 800e680:	f7ff ff89 	bl	800e596 <inv_q30_mult>
 800e684:	0003      	movs	r3, r0
    qProd[1] = inv_q30_mult(q1[0], q2[1]) + inv_q30_mult(q1[1], q2[0]) +
 800e686:	18e4      	adds	r4, r4, r3
               inv_q30_mult(q1[2], q2[3]) - inv_q30_mult(q1[3], q2[2]);
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	330c      	adds	r3, #12
 800e68c:	681a      	ldr	r2, [r3, #0]
 800e68e:	68bb      	ldr	r3, [r7, #8]
 800e690:	3308      	adds	r3, #8
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	0019      	movs	r1, r3
 800e696:	0010      	movs	r0, r2
 800e698:	f7ff ff7d 	bl	800e596 <inv_q30_mult>
 800e69c:	0002      	movs	r2, r0
    qProd[1] = inv_q30_mult(q1[0], q2[1]) + inv_q30_mult(q1[1], q2[0]) +
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	3304      	adds	r3, #4
               inv_q30_mult(q1[2], q2[3]) - inv_q30_mult(q1[3], q2[2]);
 800e6a2:	1aa2      	subs	r2, r4, r2
    qProd[1] = inv_q30_mult(q1[0], q2[1]) + inv_q30_mult(q1[1], q2[0]) +
 800e6a4:	601a      	str	r2, [r3, #0]

    qProd[2] = inv_q30_mult(q1[0], q2[2]) - inv_q30_mult(q1[1], q2[3]) +
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	681a      	ldr	r2, [r3, #0]
 800e6aa:	68bb      	ldr	r3, [r7, #8]
 800e6ac:	3308      	adds	r3, #8
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	0019      	movs	r1, r3
 800e6b2:	0010      	movs	r0, r2
 800e6b4:	f7ff ff6f 	bl	800e596 <inv_q30_mult>
 800e6b8:	0004      	movs	r4, r0
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	3304      	adds	r3, #4
 800e6be:	681a      	ldr	r2, [r3, #0]
 800e6c0:	68bb      	ldr	r3, [r7, #8]
 800e6c2:	330c      	adds	r3, #12
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	0019      	movs	r1, r3
 800e6c8:	0010      	movs	r0, r2
 800e6ca:	f7ff ff64 	bl	800e596 <inv_q30_mult>
 800e6ce:	0003      	movs	r3, r0
 800e6d0:	1ae4      	subs	r4, r4, r3
               inv_q30_mult(q1[2], q2[0]) + inv_q30_mult(q1[3], q2[1]);
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	3308      	adds	r3, #8
 800e6d6:	681a      	ldr	r2, [r3, #0]
 800e6d8:	68bb      	ldr	r3, [r7, #8]
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	0019      	movs	r1, r3
 800e6de:	0010      	movs	r0, r2
 800e6e0:	f7ff ff59 	bl	800e596 <inv_q30_mult>
 800e6e4:	0003      	movs	r3, r0
    qProd[2] = inv_q30_mult(q1[0], q2[2]) - inv_q30_mult(q1[1], q2[3]) +
 800e6e6:	18e4      	adds	r4, r4, r3
               inv_q30_mult(q1[2], q2[0]) + inv_q30_mult(q1[3], q2[1]);
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	330c      	adds	r3, #12
 800e6ec:	681a      	ldr	r2, [r3, #0]
 800e6ee:	68bb      	ldr	r3, [r7, #8]
 800e6f0:	3304      	adds	r3, #4
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	0019      	movs	r1, r3
 800e6f6:	0010      	movs	r0, r2
 800e6f8:	f7ff ff4d 	bl	800e596 <inv_q30_mult>
 800e6fc:	0002      	movs	r2, r0
    qProd[2] = inv_q30_mult(q1[0], q2[2]) - inv_q30_mult(q1[1], q2[3]) +
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	3308      	adds	r3, #8
               inv_q30_mult(q1[2], q2[0]) + inv_q30_mult(q1[3], q2[1]);
 800e702:	18a2      	adds	r2, r4, r2
    qProd[2] = inv_q30_mult(q1[0], q2[2]) - inv_q30_mult(q1[1], q2[3]) +
 800e704:	601a      	str	r2, [r3, #0]

    qProd[3] = inv_q30_mult(q1[0], q2[3]) + inv_q30_mult(q1[1], q2[2]) -
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	681a      	ldr	r2, [r3, #0]
 800e70a:	68bb      	ldr	r3, [r7, #8]
 800e70c:	330c      	adds	r3, #12
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	0019      	movs	r1, r3
 800e712:	0010      	movs	r0, r2
 800e714:	f7ff ff3f 	bl	800e596 <inv_q30_mult>
 800e718:	0004      	movs	r4, r0
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	3304      	adds	r3, #4
 800e71e:	681a      	ldr	r2, [r3, #0]
 800e720:	68bb      	ldr	r3, [r7, #8]
 800e722:	3308      	adds	r3, #8
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	0019      	movs	r1, r3
 800e728:	0010      	movs	r0, r2
 800e72a:	f7ff ff34 	bl	800e596 <inv_q30_mult>
 800e72e:	0003      	movs	r3, r0
 800e730:	18e4      	adds	r4, r4, r3
               inv_q30_mult(q1[2], q2[1]) + inv_q30_mult(q1[3], q2[0]);
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	3308      	adds	r3, #8
 800e736:	681a      	ldr	r2, [r3, #0]
 800e738:	68bb      	ldr	r3, [r7, #8]
 800e73a:	3304      	adds	r3, #4
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	0019      	movs	r1, r3
 800e740:	0010      	movs	r0, r2
 800e742:	f7ff ff28 	bl	800e596 <inv_q30_mult>
 800e746:	0003      	movs	r3, r0
    qProd[3] = inv_q30_mult(q1[0], q2[3]) + inv_q30_mult(q1[1], q2[2]) -
 800e748:	1ae4      	subs	r4, r4, r3
               inv_q30_mult(q1[2], q2[1]) + inv_q30_mult(q1[3], q2[0]);
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	330c      	adds	r3, #12
 800e74e:	681a      	ldr	r2, [r3, #0]
 800e750:	68bb      	ldr	r3, [r7, #8]
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	0019      	movs	r1, r3
 800e756:	0010      	movs	r0, r2
 800e758:	f7ff ff1d 	bl	800e596 <inv_q30_mult>
 800e75c:	0002      	movs	r2, r0
    qProd[3] = inv_q30_mult(q1[0], q2[3]) + inv_q30_mult(q1[1], q2[2]) -
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	330c      	adds	r3, #12
               inv_q30_mult(q1[2], q2[1]) + inv_q30_mult(q1[3], q2[0]);
 800e762:	18a2      	adds	r2, r4, r2
    qProd[3] = inv_q30_mult(q1[0], q2[3]) + inv_q30_mult(q1[1], q2[2]) -
 800e764:	601a      	str	r2, [r3, #0]
}
 800e766:	46c0      	nop			; (mov r8, r8)
 800e768:	46bd      	mov	sp, r7
 800e76a:	b005      	add	sp, #20
 800e76c:	bd90      	pop	{r4, r7, pc}

0800e76e <inv_q_add>:
*            to 2^30
* @param[out] qSum Sum after quaternion summation. Length 4.
*             1.0 scaled to 2^30.
*/
void inv_q_add(long *q1, long *q2, long *qSum)
{
 800e76e:	b580      	push	{r7, lr}
 800e770:	b084      	sub	sp, #16
 800e772:	af00      	add	r7, sp, #0
 800e774:	60f8      	str	r0, [r7, #12]
 800e776:	60b9      	str	r1, [r7, #8]
 800e778:	607a      	str	r2, [r7, #4]
    INVENSENSE_FUNC_START;
    qSum[0] = q1[0] + q2[0];
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	681a      	ldr	r2, [r3, #0]
 800e77e:	68bb      	ldr	r3, [r7, #8]
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	18d2      	adds	r2, r2, r3
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	601a      	str	r2, [r3, #0]
    qSum[1] = q1[1] + q2[1];
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	3304      	adds	r3, #4
 800e78c:	6819      	ldr	r1, [r3, #0]
 800e78e:	68bb      	ldr	r3, [r7, #8]
 800e790:	3304      	adds	r3, #4
 800e792:	681a      	ldr	r2, [r3, #0]
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	3304      	adds	r3, #4
 800e798:	188a      	adds	r2, r1, r2
 800e79a:	601a      	str	r2, [r3, #0]
    qSum[2] = q1[2] + q2[2];
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	3308      	adds	r3, #8
 800e7a0:	6819      	ldr	r1, [r3, #0]
 800e7a2:	68bb      	ldr	r3, [r7, #8]
 800e7a4:	3308      	adds	r3, #8
 800e7a6:	681a      	ldr	r2, [r3, #0]
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	3308      	adds	r3, #8
 800e7ac:	188a      	adds	r2, r1, r2
 800e7ae:	601a      	str	r2, [r3, #0]
    qSum[3] = q1[3] + q2[3];
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	330c      	adds	r3, #12
 800e7b4:	6819      	ldr	r1, [r3, #0]
 800e7b6:	68bb      	ldr	r3, [r7, #8]
 800e7b8:	330c      	adds	r3, #12
 800e7ba:	681a      	ldr	r2, [r3, #0]
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	330c      	adds	r3, #12
 800e7c0:	188a      	adds	r2, r1, r2
 800e7c2:	601a      	str	r2, [r3, #0]
}
 800e7c4:	46c0      	nop			; (mov r8, r8)
 800e7c6:	46bd      	mov	sp, r7
 800e7c8:	b004      	add	sp, #16
 800e7ca:	bd80      	pop	{r7, pc}

0800e7cc <inv_q_invert>:
    INVENSENSE_FUNC_START;
    inv_vector_normalize(q, 4);
}

void inv_q_invert(const long *q, long *qInverted)
{
 800e7cc:	b580      	push	{r7, lr}
 800e7ce:	b082      	sub	sp, #8
 800e7d0:	af00      	add	r7, sp, #0
 800e7d2:	6078      	str	r0, [r7, #4]
 800e7d4:	6039      	str	r1, [r7, #0]
    INVENSENSE_FUNC_START;
    qInverted[0] = q[0];
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	681a      	ldr	r2, [r3, #0]
 800e7da:	683b      	ldr	r3, [r7, #0]
 800e7dc:	601a      	str	r2, [r3, #0]
    qInverted[1] = -q[1];
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	3304      	adds	r3, #4
 800e7e2:	681a      	ldr	r2, [r3, #0]
 800e7e4:	683b      	ldr	r3, [r7, #0]
 800e7e6:	3304      	adds	r3, #4
 800e7e8:	4252      	negs	r2, r2
 800e7ea:	601a      	str	r2, [r3, #0]
    qInverted[2] = -q[2];
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	3308      	adds	r3, #8
 800e7f0:	681a      	ldr	r2, [r3, #0]
 800e7f2:	683b      	ldr	r3, [r7, #0]
 800e7f4:	3308      	adds	r3, #8
 800e7f6:	4252      	negs	r2, r2
 800e7f8:	601a      	str	r2, [r3, #0]
    qInverted[3] = -q[3];
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	330c      	adds	r3, #12
 800e7fe:	681a      	ldr	r2, [r3, #0]
 800e800:	683b      	ldr	r3, [r7, #0]
 800e802:	330c      	adds	r3, #12
 800e804:	4252      	negs	r2, r2
 800e806:	601a      	str	r2, [r3, #0]
}
 800e808:	46c0      	nop			; (mov r8, r8)
 800e80a:	46bd      	mov	sp, r7
 800e80c:	b002      	add	sp, #8
 800e80e:	bd80      	pop	{r7, pc}

0800e810 <inv_q_rotate>:
}

/** Rotates a 3-element vector by Rotation defined by Q
*/
void inv_q_rotate(const long *q, const long *in, long *out)
{
 800e810:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e812:	b095      	sub	sp, #84	; 0x54
 800e814:	af00      	add	r7, sp, #0
 800e816:	60f8      	str	r0, [r7, #12]
 800e818:	60b9      	str	r1, [r7, #8]
 800e81a:	607a      	str	r2, [r7, #4]
    long q_temp1[4], q_temp2[4];
    long in4[4], out4[4];

    // Fixme optimize
    in4[0] = 0;
 800e81c:	2420      	movs	r4, #32
 800e81e:	193b      	adds	r3, r7, r4
 800e820:	2200      	movs	r2, #0
 800e822:	601a      	str	r2, [r3, #0]
    memcpy(&in4[1], in, 3 * sizeof(long));
 800e824:	68b9      	ldr	r1, [r7, #8]
 800e826:	193b      	adds	r3, r7, r4
 800e828:	3304      	adds	r3, #4
 800e82a:	220c      	movs	r2, #12
 800e82c:	0018      	movs	r0, r3
 800e82e:	f003 fc0d 	bl	801204c <memcpy>
    inv_q_mult(q, in4, q_temp1);
 800e832:	2540      	movs	r5, #64	; 0x40
 800e834:	197a      	adds	r2, r7, r5
 800e836:	1939      	adds	r1, r7, r4
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	0018      	movs	r0, r3
 800e83c:	f7ff fece 	bl	800e5dc <inv_q_mult>
    inv_q_invert(q, q_temp2);
 800e840:	2430      	movs	r4, #48	; 0x30
 800e842:	193a      	adds	r2, r7, r4
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	0011      	movs	r1, r2
 800e848:	0018      	movs	r0, r3
 800e84a:	f7ff ffbf 	bl	800e7cc <inv_q_invert>
    inv_q_mult(q_temp1, q_temp2, out4);
 800e84e:	2610      	movs	r6, #16
 800e850:	19ba      	adds	r2, r7, r6
 800e852:	1939      	adds	r1, r7, r4
 800e854:	197b      	adds	r3, r7, r5
 800e856:	0018      	movs	r0, r3
 800e858:	f7ff fec0 	bl	800e5dc <inv_q_mult>
    memcpy(out, &out4[1], 3 * sizeof(long));
 800e85c:	19bb      	adds	r3, r7, r6
 800e85e:	1d19      	adds	r1, r3, #4
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	220c      	movs	r2, #12
 800e864:	0018      	movs	r0, r3
 800e866:	f003 fbf1 	bl	801204c <memcpy>
}
 800e86a:	46c0      	nop			; (mov r8, r8)
 800e86c:	46bd      	mov	sp, r7
 800e86e:	b015      	add	sp, #84	; 0x54
 800e870:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e872 <inv_q_multf>:

void inv_q_multf(const float *q1, const float *q2, float *qProd)
{
 800e872:	b5b0      	push	{r4, r5, r7, lr}
 800e874:	b084      	sub	sp, #16
 800e876:	af00      	add	r7, sp, #0
 800e878:	60f8      	str	r0, [r7, #12]
 800e87a:	60b9      	str	r1, [r7, #8]
 800e87c:	607a      	str	r2, [r7, #4]
    INVENSENSE_FUNC_START;
    qProd[0] =
        (q1[0] * q2[0] - q1[1] * q2[1] - q1[2] * q2[2] - q1[3] * q2[3]);
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	681a      	ldr	r2, [r3, #0]
 800e882:	68bb      	ldr	r3, [r7, #8]
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	1c19      	adds	r1, r3, #0
 800e888:	1c10      	adds	r0, r2, #0
 800e88a:	f7f5 fabb 	bl	8003e04 <__aeabi_fmul>
 800e88e:	1c03      	adds	r3, r0, #0
 800e890:	1c1c      	adds	r4, r3, #0
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	3304      	adds	r3, #4
 800e896:	681a      	ldr	r2, [r3, #0]
 800e898:	68bb      	ldr	r3, [r7, #8]
 800e89a:	3304      	adds	r3, #4
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	1c19      	adds	r1, r3, #0
 800e8a0:	1c10      	adds	r0, r2, #0
 800e8a2:	f7f5 faaf 	bl	8003e04 <__aeabi_fmul>
 800e8a6:	1c03      	adds	r3, r0, #0
 800e8a8:	1c19      	adds	r1, r3, #0
 800e8aa:	1c20      	adds	r0, r4, #0
 800e8ac:	f7f5 fbf8 	bl	80040a0 <__aeabi_fsub>
 800e8b0:	1c03      	adds	r3, r0, #0
 800e8b2:	1c1c      	adds	r4, r3, #0
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	3308      	adds	r3, #8
 800e8b8:	681a      	ldr	r2, [r3, #0]
 800e8ba:	68bb      	ldr	r3, [r7, #8]
 800e8bc:	3308      	adds	r3, #8
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	1c19      	adds	r1, r3, #0
 800e8c2:	1c10      	adds	r0, r2, #0
 800e8c4:	f7f5 fa9e 	bl	8003e04 <__aeabi_fmul>
 800e8c8:	1c03      	adds	r3, r0, #0
 800e8ca:	1c19      	adds	r1, r3, #0
 800e8cc:	1c20      	adds	r0, r4, #0
 800e8ce:	f7f5 fbe7 	bl	80040a0 <__aeabi_fsub>
 800e8d2:	1c03      	adds	r3, r0, #0
 800e8d4:	1c1c      	adds	r4, r3, #0
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	330c      	adds	r3, #12
 800e8da:	681a      	ldr	r2, [r3, #0]
 800e8dc:	68bb      	ldr	r3, [r7, #8]
 800e8de:	330c      	adds	r3, #12
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	1c19      	adds	r1, r3, #0
 800e8e4:	1c10      	adds	r0, r2, #0
 800e8e6:	f7f5 fa8d 	bl	8003e04 <__aeabi_fmul>
 800e8ea:	1c03      	adds	r3, r0, #0
 800e8ec:	1c19      	adds	r1, r3, #0
 800e8ee:	1c20      	adds	r0, r4, #0
 800e8f0:	f7f5 fbd6 	bl	80040a0 <__aeabi_fsub>
 800e8f4:	1c03      	adds	r3, r0, #0
 800e8f6:	1c1a      	adds	r2, r3, #0
    qProd[0] =
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	601a      	str	r2, [r3, #0]
    qProd[1] =
        (q1[0] * q2[1] + q1[1] * q2[0] + q1[2] * q2[3] - q1[3] * q2[2]);
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	681a      	ldr	r2, [r3, #0]
 800e900:	68bb      	ldr	r3, [r7, #8]
 800e902:	3304      	adds	r3, #4
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	1c19      	adds	r1, r3, #0
 800e908:	1c10      	adds	r0, r2, #0
 800e90a:	f7f5 fa7b 	bl	8003e04 <__aeabi_fmul>
 800e90e:	1c03      	adds	r3, r0, #0
 800e910:	1c1c      	adds	r4, r3, #0
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	3304      	adds	r3, #4
 800e916:	681a      	ldr	r2, [r3, #0]
 800e918:	68bb      	ldr	r3, [r7, #8]
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	1c19      	adds	r1, r3, #0
 800e91e:	1c10      	adds	r0, r2, #0
 800e920:	f7f5 fa70 	bl	8003e04 <__aeabi_fmul>
 800e924:	1c03      	adds	r3, r0, #0
 800e926:	1c19      	adds	r1, r3, #0
 800e928:	1c20      	adds	r0, r4, #0
 800e92a:	f7f4 ff01 	bl	8003730 <__aeabi_fadd>
 800e92e:	1c03      	adds	r3, r0, #0
 800e930:	1c1c      	adds	r4, r3, #0
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	3308      	adds	r3, #8
 800e936:	681a      	ldr	r2, [r3, #0]
 800e938:	68bb      	ldr	r3, [r7, #8]
 800e93a:	330c      	adds	r3, #12
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	1c19      	adds	r1, r3, #0
 800e940:	1c10      	adds	r0, r2, #0
 800e942:	f7f5 fa5f 	bl	8003e04 <__aeabi_fmul>
 800e946:	1c03      	adds	r3, r0, #0
 800e948:	1c19      	adds	r1, r3, #0
 800e94a:	1c20      	adds	r0, r4, #0
 800e94c:	f7f4 fef0 	bl	8003730 <__aeabi_fadd>
 800e950:	1c03      	adds	r3, r0, #0
 800e952:	1c1d      	adds	r5, r3, #0
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	330c      	adds	r3, #12
 800e958:	681a      	ldr	r2, [r3, #0]
 800e95a:	68bb      	ldr	r3, [r7, #8]
 800e95c:	3308      	adds	r3, #8
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	1c19      	adds	r1, r3, #0
 800e962:	1c10      	adds	r0, r2, #0
 800e964:	f7f5 fa4e 	bl	8003e04 <__aeabi_fmul>
 800e968:	1c03      	adds	r3, r0, #0
 800e96a:	1c1a      	adds	r2, r3, #0
    qProd[1] =
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	1d1c      	adds	r4, r3, #4
        (q1[0] * q2[1] + q1[1] * q2[0] + q1[2] * q2[3] - q1[3] * q2[2]);
 800e970:	1c11      	adds	r1, r2, #0
 800e972:	1c28      	adds	r0, r5, #0
 800e974:	f7f5 fb94 	bl	80040a0 <__aeabi_fsub>
 800e978:	1c03      	adds	r3, r0, #0
    qProd[1] =
 800e97a:	6023      	str	r3, [r4, #0]
    qProd[2] =
        (q1[0] * q2[2] - q1[1] * q2[3] + q1[2] * q2[0] + q1[3] * q2[1]);
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	681a      	ldr	r2, [r3, #0]
 800e980:	68bb      	ldr	r3, [r7, #8]
 800e982:	3308      	adds	r3, #8
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	1c19      	adds	r1, r3, #0
 800e988:	1c10      	adds	r0, r2, #0
 800e98a:	f7f5 fa3b 	bl	8003e04 <__aeabi_fmul>
 800e98e:	1c03      	adds	r3, r0, #0
 800e990:	1c1c      	adds	r4, r3, #0
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	3304      	adds	r3, #4
 800e996:	681a      	ldr	r2, [r3, #0]
 800e998:	68bb      	ldr	r3, [r7, #8]
 800e99a:	330c      	adds	r3, #12
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	1c19      	adds	r1, r3, #0
 800e9a0:	1c10      	adds	r0, r2, #0
 800e9a2:	f7f5 fa2f 	bl	8003e04 <__aeabi_fmul>
 800e9a6:	1c03      	adds	r3, r0, #0
 800e9a8:	1c19      	adds	r1, r3, #0
 800e9aa:	1c20      	adds	r0, r4, #0
 800e9ac:	f7f5 fb78 	bl	80040a0 <__aeabi_fsub>
 800e9b0:	1c03      	adds	r3, r0, #0
 800e9b2:	1c1c      	adds	r4, r3, #0
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	3308      	adds	r3, #8
 800e9b8:	681a      	ldr	r2, [r3, #0]
 800e9ba:	68bb      	ldr	r3, [r7, #8]
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	1c19      	adds	r1, r3, #0
 800e9c0:	1c10      	adds	r0, r2, #0
 800e9c2:	f7f5 fa1f 	bl	8003e04 <__aeabi_fmul>
 800e9c6:	1c03      	adds	r3, r0, #0
 800e9c8:	1c19      	adds	r1, r3, #0
 800e9ca:	1c20      	adds	r0, r4, #0
 800e9cc:	f7f4 feb0 	bl	8003730 <__aeabi_fadd>
 800e9d0:	1c03      	adds	r3, r0, #0
 800e9d2:	1c1d      	adds	r5, r3, #0
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	330c      	adds	r3, #12
 800e9d8:	681a      	ldr	r2, [r3, #0]
 800e9da:	68bb      	ldr	r3, [r7, #8]
 800e9dc:	3304      	adds	r3, #4
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	1c19      	adds	r1, r3, #0
 800e9e2:	1c10      	adds	r0, r2, #0
 800e9e4:	f7f5 fa0e 	bl	8003e04 <__aeabi_fmul>
 800e9e8:	1c03      	adds	r3, r0, #0
 800e9ea:	1c1a      	adds	r2, r3, #0
    qProd[2] =
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	3308      	adds	r3, #8
 800e9f0:	001c      	movs	r4, r3
        (q1[0] * q2[2] - q1[1] * q2[3] + q1[2] * q2[0] + q1[3] * q2[1]);
 800e9f2:	1c11      	adds	r1, r2, #0
 800e9f4:	1c28      	adds	r0, r5, #0
 800e9f6:	f7f4 fe9b 	bl	8003730 <__aeabi_fadd>
 800e9fa:	1c03      	adds	r3, r0, #0
    qProd[2] =
 800e9fc:	6023      	str	r3, [r4, #0]
    qProd[3] =
        (q1[0] * q2[3] + q1[1] * q2[2] - q1[2] * q2[1] + q1[3] * q2[0]);
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	681a      	ldr	r2, [r3, #0]
 800ea02:	68bb      	ldr	r3, [r7, #8]
 800ea04:	330c      	adds	r3, #12
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	1c19      	adds	r1, r3, #0
 800ea0a:	1c10      	adds	r0, r2, #0
 800ea0c:	f7f5 f9fa 	bl	8003e04 <__aeabi_fmul>
 800ea10:	1c03      	adds	r3, r0, #0
 800ea12:	1c1c      	adds	r4, r3, #0
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	3304      	adds	r3, #4
 800ea18:	681a      	ldr	r2, [r3, #0]
 800ea1a:	68bb      	ldr	r3, [r7, #8]
 800ea1c:	3308      	adds	r3, #8
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	1c19      	adds	r1, r3, #0
 800ea22:	1c10      	adds	r0, r2, #0
 800ea24:	f7f5 f9ee 	bl	8003e04 <__aeabi_fmul>
 800ea28:	1c03      	adds	r3, r0, #0
 800ea2a:	1c19      	adds	r1, r3, #0
 800ea2c:	1c20      	adds	r0, r4, #0
 800ea2e:	f7f4 fe7f 	bl	8003730 <__aeabi_fadd>
 800ea32:	1c03      	adds	r3, r0, #0
 800ea34:	1c1c      	adds	r4, r3, #0
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	3308      	adds	r3, #8
 800ea3a:	681a      	ldr	r2, [r3, #0]
 800ea3c:	68bb      	ldr	r3, [r7, #8]
 800ea3e:	3304      	adds	r3, #4
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	1c19      	adds	r1, r3, #0
 800ea44:	1c10      	adds	r0, r2, #0
 800ea46:	f7f5 f9dd 	bl	8003e04 <__aeabi_fmul>
 800ea4a:	1c03      	adds	r3, r0, #0
 800ea4c:	1c19      	adds	r1, r3, #0
 800ea4e:	1c20      	adds	r0, r4, #0
 800ea50:	f7f5 fb26 	bl	80040a0 <__aeabi_fsub>
 800ea54:	1c03      	adds	r3, r0, #0
 800ea56:	1c1d      	adds	r5, r3, #0
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	330c      	adds	r3, #12
 800ea5c:	681a      	ldr	r2, [r3, #0]
 800ea5e:	68bb      	ldr	r3, [r7, #8]
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	1c19      	adds	r1, r3, #0
 800ea64:	1c10      	adds	r0, r2, #0
 800ea66:	f7f5 f9cd 	bl	8003e04 <__aeabi_fmul>
 800ea6a:	1c03      	adds	r3, r0, #0
 800ea6c:	1c1a      	adds	r2, r3, #0
    qProd[3] =
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	330c      	adds	r3, #12
 800ea72:	001c      	movs	r4, r3
        (q1[0] * q2[3] + q1[1] * q2[2] - q1[2] * q2[1] + q1[3] * q2[0]);
 800ea74:	1c11      	adds	r1, r2, #0
 800ea76:	1c28      	adds	r0, r5, #0
 800ea78:	f7f4 fe5a 	bl	8003730 <__aeabi_fadd>
 800ea7c:	1c03      	adds	r3, r0, #0
    qProd[3] =
 800ea7e:	6023      	str	r3, [r4, #0]
}
 800ea80:	46c0      	nop			; (mov r8, r8)
 800ea82:	46bd      	mov	sp, r7
 800ea84:	b004      	add	sp, #16
 800ea86:	bdb0      	pop	{r4, r5, r7, pc}

0800ea88 <inv_q_addf>:

void inv_q_addf(const float *q1, const float *q2, float *qSum)
{
 800ea88:	b590      	push	{r4, r7, lr}
 800ea8a:	b085      	sub	sp, #20
 800ea8c:	af00      	add	r7, sp, #0
 800ea8e:	60f8      	str	r0, [r7, #12]
 800ea90:	60b9      	str	r1, [r7, #8]
 800ea92:	607a      	str	r2, [r7, #4]
    INVENSENSE_FUNC_START;
    qSum[0] = q1[0] + q2[0];
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	681a      	ldr	r2, [r3, #0]
 800ea98:	68bb      	ldr	r3, [r7, #8]
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	1c19      	adds	r1, r3, #0
 800ea9e:	1c10      	adds	r0, r2, #0
 800eaa0:	f7f4 fe46 	bl	8003730 <__aeabi_fadd>
 800eaa4:	1c03      	adds	r3, r0, #0
 800eaa6:	1c1a      	adds	r2, r3, #0
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	601a      	str	r2, [r3, #0]
    qSum[1] = q1[1] + q2[1];
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	3304      	adds	r3, #4
 800eab0:	681a      	ldr	r2, [r3, #0]
 800eab2:	68bb      	ldr	r3, [r7, #8]
 800eab4:	3304      	adds	r3, #4
 800eab6:	6819      	ldr	r1, [r3, #0]
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	1d1c      	adds	r4, r3, #4
 800eabc:	1c10      	adds	r0, r2, #0
 800eabe:	f7f4 fe37 	bl	8003730 <__aeabi_fadd>
 800eac2:	1c03      	adds	r3, r0, #0
 800eac4:	6023      	str	r3, [r4, #0]
    qSum[2] = q1[2] + q2[2];
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	3308      	adds	r3, #8
 800eaca:	681a      	ldr	r2, [r3, #0]
 800eacc:	68bb      	ldr	r3, [r7, #8]
 800eace:	3308      	adds	r3, #8
 800ead0:	6819      	ldr	r1, [r3, #0]
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	3308      	adds	r3, #8
 800ead6:	001c      	movs	r4, r3
 800ead8:	1c10      	adds	r0, r2, #0
 800eada:	f7f4 fe29 	bl	8003730 <__aeabi_fadd>
 800eade:	1c03      	adds	r3, r0, #0
 800eae0:	6023      	str	r3, [r4, #0]
    qSum[3] = q1[3] + q2[3];
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	330c      	adds	r3, #12
 800eae6:	681a      	ldr	r2, [r3, #0]
 800eae8:	68bb      	ldr	r3, [r7, #8]
 800eaea:	330c      	adds	r3, #12
 800eaec:	6819      	ldr	r1, [r3, #0]
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	330c      	adds	r3, #12
 800eaf2:	001c      	movs	r4, r3
 800eaf4:	1c10      	adds	r0, r2, #0
 800eaf6:	f7f4 fe1b 	bl	8003730 <__aeabi_fadd>
 800eafa:	1c03      	adds	r3, r0, #0
 800eafc:	6023      	str	r3, [r4, #0]
}
 800eafe:	46c0      	nop			; (mov r8, r8)
 800eb00:	46bd      	mov	sp, r7
 800eb02:	b005      	add	sp, #20
 800eb04:	bd90      	pop	{r4, r7, pc}

0800eb06 <inv_q_normalizef>:

void inv_q_normalizef(float *q)
{
 800eb06:	b590      	push	{r4, r7, lr}
 800eb08:	b085      	sub	sp, #20
 800eb0a:	af00      	add	r7, sp, #0
 800eb0c:	6078      	str	r0, [r7, #4]
    INVENSENSE_FUNC_START;
    float normSF = 0;
 800eb0e:	2300      	movs	r3, #0
 800eb10:	60fb      	str	r3, [r7, #12]
    float xHalf = 0;
 800eb12:	2300      	movs	r3, #0
 800eb14:	60bb      	str	r3, [r7, #8]
    normSF = (q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	681a      	ldr	r2, [r3, #0]
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	1c19      	adds	r1, r3, #0
 800eb20:	1c10      	adds	r0, r2, #0
 800eb22:	f7f5 f96f 	bl	8003e04 <__aeabi_fmul>
 800eb26:	1c03      	adds	r3, r0, #0
 800eb28:	1c1c      	adds	r4, r3, #0
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	3304      	adds	r3, #4
 800eb2e:	681a      	ldr	r2, [r3, #0]
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	3304      	adds	r3, #4
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	1c19      	adds	r1, r3, #0
 800eb38:	1c10      	adds	r0, r2, #0
 800eb3a:	f7f5 f963 	bl	8003e04 <__aeabi_fmul>
 800eb3e:	1c03      	adds	r3, r0, #0
 800eb40:	1c19      	adds	r1, r3, #0
 800eb42:	1c20      	adds	r0, r4, #0
 800eb44:	f7f4 fdf4 	bl	8003730 <__aeabi_fadd>
 800eb48:	1c03      	adds	r3, r0, #0
 800eb4a:	1c1c      	adds	r4, r3, #0
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	3308      	adds	r3, #8
 800eb50:	681a      	ldr	r2, [r3, #0]
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	3308      	adds	r3, #8
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	1c19      	adds	r1, r3, #0
 800eb5a:	1c10      	adds	r0, r2, #0
 800eb5c:	f7f5 f952 	bl	8003e04 <__aeabi_fmul>
 800eb60:	1c03      	adds	r3, r0, #0
 800eb62:	1c19      	adds	r1, r3, #0
 800eb64:	1c20      	adds	r0, r4, #0
 800eb66:	f7f4 fde3 	bl	8003730 <__aeabi_fadd>
 800eb6a:	1c03      	adds	r3, r0, #0
 800eb6c:	1c1c      	adds	r4, r3, #0
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	330c      	adds	r3, #12
 800eb72:	681a      	ldr	r2, [r3, #0]
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	330c      	adds	r3, #12
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	1c19      	adds	r1, r3, #0
 800eb7c:	1c10      	adds	r0, r2, #0
 800eb7e:	f7f5 f941 	bl	8003e04 <__aeabi_fmul>
 800eb82:	1c03      	adds	r3, r0, #0
 800eb84:	1c19      	adds	r1, r3, #0
 800eb86:	1c20      	adds	r0, r4, #0
 800eb88:	f7f4 fdd2 	bl	8003730 <__aeabi_fadd>
 800eb8c:	1c03      	adds	r3, r0, #0
 800eb8e:	60fb      	str	r3, [r7, #12]
    if (normSF < 2) {
 800eb90:	2180      	movs	r1, #128	; 0x80
 800eb92:	05c9      	lsls	r1, r1, #23
 800eb94:	68f8      	ldr	r0, [r7, #12]
 800eb96:	f7f4 fc3f 	bl	8003418 <__aeabi_fcmplt>
 800eb9a:	1e03      	subs	r3, r0, #0
 800eb9c:	d100      	bne.n	800eba0 <inv_q_normalizef+0x9a>
 800eb9e:	e08c      	b.n	800ecba <inv_q_normalizef+0x1b4>
        xHalf = 0.5f * normSF;
 800eba0:	21fc      	movs	r1, #252	; 0xfc
 800eba2:	0589      	lsls	r1, r1, #22
 800eba4:	68f8      	ldr	r0, [r7, #12]
 800eba6:	f7f5 f92d 	bl	8003e04 <__aeabi_fmul>
 800ebaa:	1c03      	adds	r3, r0, #0
 800ebac:	60bb      	str	r3, [r7, #8]
        normSF = normSF * (1.5f - xHalf * normSF * normSF);
 800ebae:	68f9      	ldr	r1, [r7, #12]
 800ebb0:	68b8      	ldr	r0, [r7, #8]
 800ebb2:	f7f5 f927 	bl	8003e04 <__aeabi_fmul>
 800ebb6:	1c03      	adds	r3, r0, #0
 800ebb8:	68f9      	ldr	r1, [r7, #12]
 800ebba:	1c18      	adds	r0, r3, #0
 800ebbc:	f7f5 f922 	bl	8003e04 <__aeabi_fmul>
 800ebc0:	1c03      	adds	r3, r0, #0
 800ebc2:	1c19      	adds	r1, r3, #0
 800ebc4:	20ff      	movs	r0, #255	; 0xff
 800ebc6:	0580      	lsls	r0, r0, #22
 800ebc8:	f7f5 fa6a 	bl	80040a0 <__aeabi_fsub>
 800ebcc:	1c03      	adds	r3, r0, #0
 800ebce:	1c19      	adds	r1, r3, #0
 800ebd0:	68f8      	ldr	r0, [r7, #12]
 800ebd2:	f7f5 f917 	bl	8003e04 <__aeabi_fmul>
 800ebd6:	1c03      	adds	r3, r0, #0
 800ebd8:	60fb      	str	r3, [r7, #12]
        normSF = normSF * (1.5f - xHalf * normSF * normSF);
 800ebda:	68f9      	ldr	r1, [r7, #12]
 800ebdc:	68b8      	ldr	r0, [r7, #8]
 800ebde:	f7f5 f911 	bl	8003e04 <__aeabi_fmul>
 800ebe2:	1c03      	adds	r3, r0, #0
 800ebe4:	68f9      	ldr	r1, [r7, #12]
 800ebe6:	1c18      	adds	r0, r3, #0
 800ebe8:	f7f5 f90c 	bl	8003e04 <__aeabi_fmul>
 800ebec:	1c03      	adds	r3, r0, #0
 800ebee:	1c19      	adds	r1, r3, #0
 800ebf0:	20ff      	movs	r0, #255	; 0xff
 800ebf2:	0580      	lsls	r0, r0, #22
 800ebf4:	f7f5 fa54 	bl	80040a0 <__aeabi_fsub>
 800ebf8:	1c03      	adds	r3, r0, #0
 800ebfa:	1c19      	adds	r1, r3, #0
 800ebfc:	68f8      	ldr	r0, [r7, #12]
 800ebfe:	f7f5 f901 	bl	8003e04 <__aeabi_fmul>
 800ec02:	1c03      	adds	r3, r0, #0
 800ec04:	60fb      	str	r3, [r7, #12]
        normSF = normSF * (1.5f - xHalf * normSF * normSF);
 800ec06:	68f9      	ldr	r1, [r7, #12]
 800ec08:	68b8      	ldr	r0, [r7, #8]
 800ec0a:	f7f5 f8fb 	bl	8003e04 <__aeabi_fmul>
 800ec0e:	1c03      	adds	r3, r0, #0
 800ec10:	68f9      	ldr	r1, [r7, #12]
 800ec12:	1c18      	adds	r0, r3, #0
 800ec14:	f7f5 f8f6 	bl	8003e04 <__aeabi_fmul>
 800ec18:	1c03      	adds	r3, r0, #0
 800ec1a:	1c19      	adds	r1, r3, #0
 800ec1c:	20ff      	movs	r0, #255	; 0xff
 800ec1e:	0580      	lsls	r0, r0, #22
 800ec20:	f7f5 fa3e 	bl	80040a0 <__aeabi_fsub>
 800ec24:	1c03      	adds	r3, r0, #0
 800ec26:	1c19      	adds	r1, r3, #0
 800ec28:	68f8      	ldr	r0, [r7, #12]
 800ec2a:	f7f5 f8eb 	bl	8003e04 <__aeabi_fmul>
 800ec2e:	1c03      	adds	r3, r0, #0
 800ec30:	60fb      	str	r3, [r7, #12]
        normSF = normSF * (1.5f - xHalf * normSF * normSF);
 800ec32:	68f9      	ldr	r1, [r7, #12]
 800ec34:	68b8      	ldr	r0, [r7, #8]
 800ec36:	f7f5 f8e5 	bl	8003e04 <__aeabi_fmul>
 800ec3a:	1c03      	adds	r3, r0, #0
 800ec3c:	68f9      	ldr	r1, [r7, #12]
 800ec3e:	1c18      	adds	r0, r3, #0
 800ec40:	f7f5 f8e0 	bl	8003e04 <__aeabi_fmul>
 800ec44:	1c03      	adds	r3, r0, #0
 800ec46:	1c19      	adds	r1, r3, #0
 800ec48:	20ff      	movs	r0, #255	; 0xff
 800ec4a:	0580      	lsls	r0, r0, #22
 800ec4c:	f7f5 fa28 	bl	80040a0 <__aeabi_fsub>
 800ec50:	1c03      	adds	r3, r0, #0
 800ec52:	1c19      	adds	r1, r3, #0
 800ec54:	68f8      	ldr	r0, [r7, #12]
 800ec56:	f7f5 f8d5 	bl	8003e04 <__aeabi_fmul>
 800ec5a:	1c03      	adds	r3, r0, #0
 800ec5c:	60fb      	str	r3, [r7, #12]
        q[0] *= normSF;
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	68f9      	ldr	r1, [r7, #12]
 800ec64:	1c18      	adds	r0, r3, #0
 800ec66:	f7f5 f8cd 	bl	8003e04 <__aeabi_fmul>
 800ec6a:	1c03      	adds	r3, r0, #0
 800ec6c:	1c1a      	adds	r2, r3, #0
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	601a      	str	r2, [r3, #0]
        q[1] *= normSF;
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	3304      	adds	r3, #4
 800ec76:	681a      	ldr	r2, [r3, #0]
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	1d1c      	adds	r4, r3, #4
 800ec7c:	68f9      	ldr	r1, [r7, #12]
 800ec7e:	1c10      	adds	r0, r2, #0
 800ec80:	f7f5 f8c0 	bl	8003e04 <__aeabi_fmul>
 800ec84:	1c03      	adds	r3, r0, #0
 800ec86:	6023      	str	r3, [r4, #0]
        q[2] *= normSF;
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	3308      	adds	r3, #8
 800ec8c:	681a      	ldr	r2, [r3, #0]
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	3308      	adds	r3, #8
 800ec92:	001c      	movs	r4, r3
 800ec94:	68f9      	ldr	r1, [r7, #12]
 800ec96:	1c10      	adds	r0, r2, #0
 800ec98:	f7f5 f8b4 	bl	8003e04 <__aeabi_fmul>
 800ec9c:	1c03      	adds	r3, r0, #0
 800ec9e:	6023      	str	r3, [r4, #0]
        q[3] *= normSF;
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	330c      	adds	r3, #12
 800eca4:	681a      	ldr	r2, [r3, #0]
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	330c      	adds	r3, #12
 800ecaa:	001c      	movs	r4, r3
 800ecac:	68f9      	ldr	r1, [r7, #12]
 800ecae:	1c10      	adds	r0, r2, #0
 800ecb0:	f7f5 f8a8 	bl	8003e04 <__aeabi_fmul>
 800ecb4:	1c03      	adds	r3, r0, #0
 800ecb6:	6023      	str	r3, [r4, #0]
 800ecb8:	e00f      	b.n	800ecda <inv_q_normalizef+0x1d4>
    } else {
        q[0] = 1.0;
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	22fe      	movs	r2, #254	; 0xfe
 800ecbe:	0592      	lsls	r2, r2, #22
 800ecc0:	601a      	str	r2, [r3, #0]
        q[1] = 0.0;
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	3304      	adds	r3, #4
 800ecc6:	2200      	movs	r2, #0
 800ecc8:	601a      	str	r2, [r3, #0]
        q[2] = 0.0;
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	3308      	adds	r3, #8
 800ecce:	2200      	movs	r2, #0
 800ecd0:	601a      	str	r2, [r3, #0]
        q[3] = 0.0;
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	330c      	adds	r3, #12
 800ecd6:	2200      	movs	r2, #0
 800ecd8:	601a      	str	r2, [r3, #0]
    }
    normSF = (q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	681a      	ldr	r2, [r3, #0]
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	1c19      	adds	r1, r3, #0
 800ece4:	1c10      	adds	r0, r2, #0
 800ece6:	f7f5 f88d 	bl	8003e04 <__aeabi_fmul>
 800ecea:	1c03      	adds	r3, r0, #0
 800ecec:	1c1c      	adds	r4, r3, #0
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	3304      	adds	r3, #4
 800ecf2:	681a      	ldr	r2, [r3, #0]
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	3304      	adds	r3, #4
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	1c19      	adds	r1, r3, #0
 800ecfc:	1c10      	adds	r0, r2, #0
 800ecfe:	f7f5 f881 	bl	8003e04 <__aeabi_fmul>
 800ed02:	1c03      	adds	r3, r0, #0
 800ed04:	1c19      	adds	r1, r3, #0
 800ed06:	1c20      	adds	r0, r4, #0
 800ed08:	f7f4 fd12 	bl	8003730 <__aeabi_fadd>
 800ed0c:	1c03      	adds	r3, r0, #0
 800ed0e:	1c1c      	adds	r4, r3, #0
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	3308      	adds	r3, #8
 800ed14:	681a      	ldr	r2, [r3, #0]
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	3308      	adds	r3, #8
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	1c19      	adds	r1, r3, #0
 800ed1e:	1c10      	adds	r0, r2, #0
 800ed20:	f7f5 f870 	bl	8003e04 <__aeabi_fmul>
 800ed24:	1c03      	adds	r3, r0, #0
 800ed26:	1c19      	adds	r1, r3, #0
 800ed28:	1c20      	adds	r0, r4, #0
 800ed2a:	f7f4 fd01 	bl	8003730 <__aeabi_fadd>
 800ed2e:	1c03      	adds	r3, r0, #0
 800ed30:	1c1c      	adds	r4, r3, #0
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	330c      	adds	r3, #12
 800ed36:	681a      	ldr	r2, [r3, #0]
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	330c      	adds	r3, #12
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	1c19      	adds	r1, r3, #0
 800ed40:	1c10      	adds	r0, r2, #0
 800ed42:	f7f5 f85f 	bl	8003e04 <__aeabi_fmul>
 800ed46:	1c03      	adds	r3, r0, #0
 800ed48:	1c19      	adds	r1, r3, #0
 800ed4a:	1c20      	adds	r0, r4, #0
 800ed4c:	f7f4 fcf0 	bl	8003730 <__aeabi_fadd>
 800ed50:	1c03      	adds	r3, r0, #0
 800ed52:	60fb      	str	r3, [r7, #12]
}
 800ed54:	46c0      	nop			; (mov r8, r8)
 800ed56:	46bd      	mov	sp, r7
 800ed58:	b005      	add	sp, #20
 800ed5a:	bd90      	pop	{r4, r7, pc}

0800ed5c <inv_q_norm4>:

/** Performs a length 4 vector normalization with a square root.
* @param[in,out] q vector to normalize. Returns [1,0,0,0] is magnitude is zero.
*/
void inv_q_norm4(float *q)
{
 800ed5c:	b590      	push	{r4, r7, lr}
 800ed5e:	b085      	sub	sp, #20
 800ed60:	af00      	add	r7, sp, #0
 800ed62:	6078      	str	r0, [r7, #4]
    float mag;
    mag = sqrtf(q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	681a      	ldr	r2, [r3, #0]
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	1c19      	adds	r1, r3, #0
 800ed6e:	1c10      	adds	r0, r2, #0
 800ed70:	f7f5 f848 	bl	8003e04 <__aeabi_fmul>
 800ed74:	1c03      	adds	r3, r0, #0
 800ed76:	1c1c      	adds	r4, r3, #0
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	3304      	adds	r3, #4
 800ed7c:	681a      	ldr	r2, [r3, #0]
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	3304      	adds	r3, #4
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	1c19      	adds	r1, r3, #0
 800ed86:	1c10      	adds	r0, r2, #0
 800ed88:	f7f5 f83c 	bl	8003e04 <__aeabi_fmul>
 800ed8c:	1c03      	adds	r3, r0, #0
 800ed8e:	1c19      	adds	r1, r3, #0
 800ed90:	1c20      	adds	r0, r4, #0
 800ed92:	f7f4 fccd 	bl	8003730 <__aeabi_fadd>
 800ed96:	1c03      	adds	r3, r0, #0
 800ed98:	1c1c      	adds	r4, r3, #0
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	3308      	adds	r3, #8
 800ed9e:	681a      	ldr	r2, [r3, #0]
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	3308      	adds	r3, #8
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	1c19      	adds	r1, r3, #0
 800eda8:	1c10      	adds	r0, r2, #0
 800edaa:	f7f5 f82b 	bl	8003e04 <__aeabi_fmul>
 800edae:	1c03      	adds	r3, r0, #0
 800edb0:	1c19      	adds	r1, r3, #0
 800edb2:	1c20      	adds	r0, r4, #0
 800edb4:	f7f4 fcbc 	bl	8003730 <__aeabi_fadd>
 800edb8:	1c03      	adds	r3, r0, #0
 800edba:	1c1c      	adds	r4, r3, #0
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	330c      	adds	r3, #12
 800edc0:	681a      	ldr	r2, [r3, #0]
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	330c      	adds	r3, #12
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	1c19      	adds	r1, r3, #0
 800edca:	1c10      	adds	r0, r2, #0
 800edcc:	f7f5 f81a 	bl	8003e04 <__aeabi_fmul>
 800edd0:	1c03      	adds	r3, r0, #0
 800edd2:	1c19      	adds	r1, r3, #0
 800edd4:	1c20      	adds	r0, r4, #0
 800edd6:	f7f4 fcab 	bl	8003730 <__aeabi_fadd>
 800edda:	1c03      	adds	r3, r0, #0
 800eddc:	1c18      	adds	r0, r3, #0
 800edde:	f000 fe0b 	bl	800f9f8 <sqrtf>
 800ede2:	1c03      	adds	r3, r0, #0
 800ede4:	60fb      	str	r3, [r7, #12]
    if (mag) {
 800ede6:	2100      	movs	r1, #0
 800ede8:	68f8      	ldr	r0, [r7, #12]
 800edea:	f7f4 fb0f 	bl	800340c <__aeabi_fcmpeq>
 800edee:	1e03      	subs	r3, r0, #0
 800edf0:	d12d      	bne.n	800ee4e <inv_q_norm4+0xf2>
        q[0] /= mag;
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	68f9      	ldr	r1, [r7, #12]
 800edf8:	1c18      	adds	r0, r3, #0
 800edfa:	f7f4 fe39 	bl	8003a70 <__aeabi_fdiv>
 800edfe:	1c03      	adds	r3, r0, #0
 800ee00:	1c1a      	adds	r2, r3, #0
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	601a      	str	r2, [r3, #0]
        q[1] /= mag;
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	3304      	adds	r3, #4
 800ee0a:	681a      	ldr	r2, [r3, #0]
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	1d1c      	adds	r4, r3, #4
 800ee10:	68f9      	ldr	r1, [r7, #12]
 800ee12:	1c10      	adds	r0, r2, #0
 800ee14:	f7f4 fe2c 	bl	8003a70 <__aeabi_fdiv>
 800ee18:	1c03      	adds	r3, r0, #0
 800ee1a:	6023      	str	r3, [r4, #0]
        q[2] /= mag;
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	3308      	adds	r3, #8
 800ee20:	681a      	ldr	r2, [r3, #0]
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	3308      	adds	r3, #8
 800ee26:	001c      	movs	r4, r3
 800ee28:	68f9      	ldr	r1, [r7, #12]
 800ee2a:	1c10      	adds	r0, r2, #0
 800ee2c:	f7f4 fe20 	bl	8003a70 <__aeabi_fdiv>
 800ee30:	1c03      	adds	r3, r0, #0
 800ee32:	6023      	str	r3, [r4, #0]
        q[3] /= mag;
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	330c      	adds	r3, #12
 800ee38:	681a      	ldr	r2, [r3, #0]
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	330c      	adds	r3, #12
 800ee3e:	001c      	movs	r4, r3
 800ee40:	68f9      	ldr	r1, [r7, #12]
 800ee42:	1c10      	adds	r0, r2, #0
 800ee44:	f7f4 fe14 	bl	8003a70 <__aeabi_fdiv>
 800ee48:	1c03      	adds	r3, r0, #0
 800ee4a:	6023      	str	r3, [r4, #0]
        q[0] = 1.f;
        q[1] = 0.f;
        q[2] = 0.f;
        q[3] = 0.f;
    }
}
 800ee4c:	e00f      	b.n	800ee6e <inv_q_norm4+0x112>
        q[0] = 1.f;
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	22fe      	movs	r2, #254	; 0xfe
 800ee52:	0592      	lsls	r2, r2, #22
 800ee54:	601a      	str	r2, [r3, #0]
        q[1] = 0.f;
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	3304      	adds	r3, #4
 800ee5a:	2200      	movs	r2, #0
 800ee5c:	601a      	str	r2, [r3, #0]
        q[2] = 0.f;
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	3308      	adds	r3, #8
 800ee62:	2200      	movs	r2, #0
 800ee64:	601a      	str	r2, [r3, #0]
        q[3] = 0.f;
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	330c      	adds	r3, #12
 800ee6a:	2200      	movs	r2, #0
 800ee6c:	601a      	str	r2, [r3, #0]
}
 800ee6e:	46c0      	nop			; (mov r8, r8)
 800ee70:	46bd      	mov	sp, r7
 800ee72:	b005      	add	sp, #20
 800ee74:	bd90      	pop	{r4, r7, pc}

0800ee76 <inv_q_invertf>:

void inv_q_invertf(const float *q, float *qInverted)
{
 800ee76:	b580      	push	{r7, lr}
 800ee78:	b082      	sub	sp, #8
 800ee7a:	af00      	add	r7, sp, #0
 800ee7c:	6078      	str	r0, [r7, #4]
 800ee7e:	6039      	str	r1, [r7, #0]
    INVENSENSE_FUNC_START;
    qInverted[0] = q[0];
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	681a      	ldr	r2, [r3, #0]
 800ee84:	683b      	ldr	r3, [r7, #0]
 800ee86:	601a      	str	r2, [r3, #0]
    qInverted[1] = -q[1];
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	3304      	adds	r3, #4
 800ee8c:	681a      	ldr	r2, [r3, #0]
 800ee8e:	683b      	ldr	r3, [r7, #0]
 800ee90:	3304      	adds	r3, #4
 800ee92:	2180      	movs	r1, #128	; 0x80
 800ee94:	0609      	lsls	r1, r1, #24
 800ee96:	404a      	eors	r2, r1
 800ee98:	601a      	str	r2, [r3, #0]
    qInverted[2] = -q[2];
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	3308      	adds	r3, #8
 800ee9e:	681a      	ldr	r2, [r3, #0]
 800eea0:	683b      	ldr	r3, [r7, #0]
 800eea2:	3308      	adds	r3, #8
 800eea4:	2180      	movs	r1, #128	; 0x80
 800eea6:	0609      	lsls	r1, r1, #24
 800eea8:	404a      	eors	r2, r1
 800eeaa:	601a      	str	r2, [r3, #0]
    qInverted[3] = -q[3];
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	330c      	adds	r3, #12
 800eeb0:	681a      	ldr	r2, [r3, #0]
 800eeb2:	683b      	ldr	r3, [r7, #0]
 800eeb4:	330c      	adds	r3, #12
 800eeb6:	2180      	movs	r1, #128	; 0x80
 800eeb8:	0609      	lsls	r1, r1, #24
 800eeba:	404a      	eors	r2, r1
 800eebc:	601a      	str	r2, [r3, #0]
}
 800eebe:	46c0      	nop			; (mov r8, r8)
 800eec0:	46bd      	mov	sp, r7
 800eec2:	b002      	add	sp, #8
 800eec4:	bd80      	pop	{r7, pc}

0800eec6 <inv_quaternion_to_rotation>:
 *             the first row of the matrix. Rotation matrix multiplied
 *             by a 3 element column vector transform a vector from Body
 *             to World.
 */
void inv_quaternion_to_rotation(const long *quat, long *rot)
{
 800eec6:	b590      	push	{r4, r7, lr}
 800eec8:	b083      	sub	sp, #12
 800eeca:	af00      	add	r7, sp, #0
 800eecc:	6078      	str	r0, [r7, #4]
 800eece:	6039      	str	r1, [r7, #0]
    rot[0] =
        inv_q29_mult(quat[1], quat[1]) + inv_q29_mult(quat[0],
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	3304      	adds	r3, #4
 800eed4:	681a      	ldr	r2, [r3, #0]
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	3304      	adds	r3, #4
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	0019      	movs	r1, r3
 800eede:	0010      	movs	r0, r2
 800eee0:	f7ff fb36 	bl	800e550 <inv_q29_mult>
 800eee4:	0004      	movs	r4, r0
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	681a      	ldr	r2, [r3, #0]
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	0019      	movs	r1, r3
 800eef0:	0010      	movs	r0, r2
 800eef2:	f7ff fb2d 	bl	800e550 <inv_q29_mult>
 800eef6:	0003      	movs	r3, r0
 800eef8:	18e3      	adds	r3, r4, r3
                quat[0]) -
 800eefa:	22c0      	movs	r2, #192	; 0xc0
 800eefc:	0612      	lsls	r2, r2, #24
 800eefe:	189a      	adds	r2, r3, r2
    rot[0] =
 800ef00:	683b      	ldr	r3, [r7, #0]
 800ef02:	601a      	str	r2, [r3, #0]
        1073741824L;
    rot[1] =
        inv_q29_mult(quat[1], quat[2]) - inv_q29_mult(quat[3], quat[0]);
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	3304      	adds	r3, #4
 800ef08:	681a      	ldr	r2, [r3, #0]
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	3308      	adds	r3, #8
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	0019      	movs	r1, r3
 800ef12:	0010      	movs	r0, r2
 800ef14:	f7ff fb1c 	bl	800e550 <inv_q29_mult>
 800ef18:	0004      	movs	r4, r0
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	330c      	adds	r3, #12
 800ef1e:	681a      	ldr	r2, [r3, #0]
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	0019      	movs	r1, r3
 800ef26:	0010      	movs	r0, r2
 800ef28:	f7ff fb12 	bl	800e550 <inv_q29_mult>
 800ef2c:	0002      	movs	r2, r0
    rot[1] =
 800ef2e:	683b      	ldr	r3, [r7, #0]
 800ef30:	3304      	adds	r3, #4
        inv_q29_mult(quat[1], quat[2]) - inv_q29_mult(quat[3], quat[0]);
 800ef32:	1aa2      	subs	r2, r4, r2
    rot[1] =
 800ef34:	601a      	str	r2, [r3, #0]
    rot[2] =
        inv_q29_mult(quat[1], quat[3]) + inv_q29_mult(quat[2], quat[0]);
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	3304      	adds	r3, #4
 800ef3a:	681a      	ldr	r2, [r3, #0]
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	330c      	adds	r3, #12
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	0019      	movs	r1, r3
 800ef44:	0010      	movs	r0, r2
 800ef46:	f7ff fb03 	bl	800e550 <inv_q29_mult>
 800ef4a:	0004      	movs	r4, r0
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	3308      	adds	r3, #8
 800ef50:	681a      	ldr	r2, [r3, #0]
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	0019      	movs	r1, r3
 800ef58:	0010      	movs	r0, r2
 800ef5a:	f7ff faf9 	bl	800e550 <inv_q29_mult>
 800ef5e:	0002      	movs	r2, r0
    rot[2] =
 800ef60:	683b      	ldr	r3, [r7, #0]
 800ef62:	3308      	adds	r3, #8
        inv_q29_mult(quat[1], quat[3]) + inv_q29_mult(quat[2], quat[0]);
 800ef64:	18a2      	adds	r2, r4, r2
    rot[2] =
 800ef66:	601a      	str	r2, [r3, #0]
    rot[3] =
        inv_q29_mult(quat[1], quat[2]) + inv_q29_mult(quat[3], quat[0]);
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	3304      	adds	r3, #4
 800ef6c:	681a      	ldr	r2, [r3, #0]
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	3308      	adds	r3, #8
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	0019      	movs	r1, r3
 800ef76:	0010      	movs	r0, r2
 800ef78:	f7ff faea 	bl	800e550 <inv_q29_mult>
 800ef7c:	0004      	movs	r4, r0
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	330c      	adds	r3, #12
 800ef82:	681a      	ldr	r2, [r3, #0]
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	0019      	movs	r1, r3
 800ef8a:	0010      	movs	r0, r2
 800ef8c:	f7ff fae0 	bl	800e550 <inv_q29_mult>
 800ef90:	0002      	movs	r2, r0
    rot[3] =
 800ef92:	683b      	ldr	r3, [r7, #0]
 800ef94:	330c      	adds	r3, #12
        inv_q29_mult(quat[1], quat[2]) + inv_q29_mult(quat[3], quat[0]);
 800ef96:	18a2      	adds	r2, r4, r2
    rot[3] =
 800ef98:	601a      	str	r2, [r3, #0]
    rot[4] =
        inv_q29_mult(quat[2], quat[2]) + inv_q29_mult(quat[0],
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	3308      	adds	r3, #8
 800ef9e:	681a      	ldr	r2, [r3, #0]
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	3308      	adds	r3, #8
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	0019      	movs	r1, r3
 800efa8:	0010      	movs	r0, r2
 800efaa:	f7ff fad1 	bl	800e550 <inv_q29_mult>
 800efae:	0004      	movs	r4, r0
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	681a      	ldr	r2, [r3, #0]
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	0019      	movs	r1, r3
 800efba:	0010      	movs	r0, r2
 800efbc:	f7ff fac8 	bl	800e550 <inv_q29_mult>
 800efc0:	0003      	movs	r3, r0
 800efc2:	18e2      	adds	r2, r4, r3
    rot[4] =
 800efc4:	683b      	ldr	r3, [r7, #0]
 800efc6:	3310      	adds	r3, #16
                quat[0]) -
 800efc8:	21c0      	movs	r1, #192	; 0xc0
 800efca:	0609      	lsls	r1, r1, #24
 800efcc:	468c      	mov	ip, r1
 800efce:	4462      	add	r2, ip
    rot[4] =
 800efd0:	601a      	str	r2, [r3, #0]
        1073741824L;
    rot[5] =
        inv_q29_mult(quat[2], quat[3]) - inv_q29_mult(quat[1], quat[0]);
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	3308      	adds	r3, #8
 800efd6:	681a      	ldr	r2, [r3, #0]
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	330c      	adds	r3, #12
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	0019      	movs	r1, r3
 800efe0:	0010      	movs	r0, r2
 800efe2:	f7ff fab5 	bl	800e550 <inv_q29_mult>
 800efe6:	0004      	movs	r4, r0
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	3304      	adds	r3, #4
 800efec:	681a      	ldr	r2, [r3, #0]
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	0019      	movs	r1, r3
 800eff4:	0010      	movs	r0, r2
 800eff6:	f7ff faab 	bl	800e550 <inv_q29_mult>
 800effa:	0002      	movs	r2, r0
    rot[5] =
 800effc:	683b      	ldr	r3, [r7, #0]
 800effe:	3314      	adds	r3, #20
        inv_q29_mult(quat[2], quat[3]) - inv_q29_mult(quat[1], quat[0]);
 800f000:	1aa2      	subs	r2, r4, r2
    rot[5] =
 800f002:	601a      	str	r2, [r3, #0]
    rot[6] =
        inv_q29_mult(quat[1], quat[3]) - inv_q29_mult(quat[2], quat[0]);
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	3304      	adds	r3, #4
 800f008:	681a      	ldr	r2, [r3, #0]
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	330c      	adds	r3, #12
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	0019      	movs	r1, r3
 800f012:	0010      	movs	r0, r2
 800f014:	f7ff fa9c 	bl	800e550 <inv_q29_mult>
 800f018:	0004      	movs	r4, r0
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	3308      	adds	r3, #8
 800f01e:	681a      	ldr	r2, [r3, #0]
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	0019      	movs	r1, r3
 800f026:	0010      	movs	r0, r2
 800f028:	f7ff fa92 	bl	800e550 <inv_q29_mult>
 800f02c:	0002      	movs	r2, r0
    rot[6] =
 800f02e:	683b      	ldr	r3, [r7, #0]
 800f030:	3318      	adds	r3, #24
        inv_q29_mult(quat[1], quat[3]) - inv_q29_mult(quat[2], quat[0]);
 800f032:	1aa2      	subs	r2, r4, r2
    rot[6] =
 800f034:	601a      	str	r2, [r3, #0]
    rot[7] =
        inv_q29_mult(quat[2], quat[3]) + inv_q29_mult(quat[1], quat[0]);
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	3308      	adds	r3, #8
 800f03a:	681a      	ldr	r2, [r3, #0]
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	330c      	adds	r3, #12
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	0019      	movs	r1, r3
 800f044:	0010      	movs	r0, r2
 800f046:	f7ff fa83 	bl	800e550 <inv_q29_mult>
 800f04a:	0004      	movs	r4, r0
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	3304      	adds	r3, #4
 800f050:	681a      	ldr	r2, [r3, #0]
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	0019      	movs	r1, r3
 800f058:	0010      	movs	r0, r2
 800f05a:	f7ff fa79 	bl	800e550 <inv_q29_mult>
 800f05e:	0002      	movs	r2, r0
    rot[7] =
 800f060:	683b      	ldr	r3, [r7, #0]
 800f062:	331c      	adds	r3, #28
        inv_q29_mult(quat[2], quat[3]) + inv_q29_mult(quat[1], quat[0]);
 800f064:	18a2      	adds	r2, r4, r2
    rot[7] =
 800f066:	601a      	str	r2, [r3, #0]
    rot[8] =
        inv_q29_mult(quat[3], quat[3]) + inv_q29_mult(quat[0],
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	330c      	adds	r3, #12
 800f06c:	681a      	ldr	r2, [r3, #0]
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	330c      	adds	r3, #12
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	0019      	movs	r1, r3
 800f076:	0010      	movs	r0, r2
 800f078:	f7ff fa6a 	bl	800e550 <inv_q29_mult>
 800f07c:	0004      	movs	r4, r0
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	681a      	ldr	r2, [r3, #0]
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	0019      	movs	r1, r3
 800f088:	0010      	movs	r0, r2
 800f08a:	f7ff fa61 	bl	800e550 <inv_q29_mult>
 800f08e:	0003      	movs	r3, r0
 800f090:	18e2      	adds	r2, r4, r3
    rot[8] =
 800f092:	683b      	ldr	r3, [r7, #0]
 800f094:	3320      	adds	r3, #32
                quat[0]) -
 800f096:	21c0      	movs	r1, #192	; 0xc0
 800f098:	0609      	lsls	r1, r1, #24
 800f09a:	468c      	mov	ip, r1
 800f09c:	4462      	add	r2, ip
    rot[8] =
 800f09e:	601a      	str	r2, [r3, #0]
        1073741824L;
}
 800f0a0:	46c0      	nop			; (mov r8, r8)
 800f0a2:	46bd      	mov	sp, r7
 800f0a4:	b003      	add	sp, #12
 800f0a6:	bd90      	pop	{r4, r7, pc}

0800f0a8 <inv_row_2_scale>:

    return hash;
}

static unsigned short inv_row_2_scale(const signed char *row)
{
 800f0a8:	b580      	push	{r7, lr}
 800f0aa:	b084      	sub	sp, #16
 800f0ac:	af00      	add	r7, sp, #0
 800f0ae:	6078      	str	r0, [r7, #4]
    unsigned short b;

    if (row[0] > 0)
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	781b      	ldrb	r3, [r3, #0]
 800f0b4:	b25b      	sxtb	r3, r3
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	dd04      	ble.n	800f0c4 <inv_row_2_scale+0x1c>
        b = 0;
 800f0ba:	230e      	movs	r3, #14
 800f0bc:	18fb      	adds	r3, r7, r3
 800f0be:	2200      	movs	r2, #0
 800f0c0:	801a      	strh	r2, [r3, #0]
 800f0c2:	e039      	b.n	800f138 <inv_row_2_scale+0x90>
    else if (row[0] < 0)
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	781b      	ldrb	r3, [r3, #0]
 800f0c8:	b25b      	sxtb	r3, r3
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	da04      	bge.n	800f0d8 <inv_row_2_scale+0x30>
        b = 4;
 800f0ce:	230e      	movs	r3, #14
 800f0d0:	18fb      	adds	r3, r7, r3
 800f0d2:	2204      	movs	r2, #4
 800f0d4:	801a      	strh	r2, [r3, #0]
 800f0d6:	e02f      	b.n	800f138 <inv_row_2_scale+0x90>
    else if (row[1] > 0)
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	3301      	adds	r3, #1
 800f0dc:	781b      	ldrb	r3, [r3, #0]
 800f0de:	b25b      	sxtb	r3, r3
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	dd04      	ble.n	800f0ee <inv_row_2_scale+0x46>
        b = 1;
 800f0e4:	230e      	movs	r3, #14
 800f0e6:	18fb      	adds	r3, r7, r3
 800f0e8:	2201      	movs	r2, #1
 800f0ea:	801a      	strh	r2, [r3, #0]
 800f0ec:	e024      	b.n	800f138 <inv_row_2_scale+0x90>
    else if (row[1] < 0)
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	3301      	adds	r3, #1
 800f0f2:	781b      	ldrb	r3, [r3, #0]
 800f0f4:	b25b      	sxtb	r3, r3
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	da04      	bge.n	800f104 <inv_row_2_scale+0x5c>
        b = 5;
 800f0fa:	230e      	movs	r3, #14
 800f0fc:	18fb      	adds	r3, r7, r3
 800f0fe:	2205      	movs	r2, #5
 800f100:	801a      	strh	r2, [r3, #0]
 800f102:	e019      	b.n	800f138 <inv_row_2_scale+0x90>
    else if (row[2] > 0)
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	3302      	adds	r3, #2
 800f108:	781b      	ldrb	r3, [r3, #0]
 800f10a:	b25b      	sxtb	r3, r3
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	dd04      	ble.n	800f11a <inv_row_2_scale+0x72>
        b = 2;
 800f110:	230e      	movs	r3, #14
 800f112:	18fb      	adds	r3, r7, r3
 800f114:	2202      	movs	r2, #2
 800f116:	801a      	strh	r2, [r3, #0]
 800f118:	e00e      	b.n	800f138 <inv_row_2_scale+0x90>
    else if (row[2] < 0)
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	3302      	adds	r3, #2
 800f11e:	781b      	ldrb	r3, [r3, #0]
 800f120:	b25b      	sxtb	r3, r3
 800f122:	2b00      	cmp	r3, #0
 800f124:	da04      	bge.n	800f130 <inv_row_2_scale+0x88>
        b = 6;
 800f126:	230e      	movs	r3, #14
 800f128:	18fb      	adds	r3, r7, r3
 800f12a:	2206      	movs	r2, #6
 800f12c:	801a      	strh	r2, [r3, #0]
 800f12e:	e003      	b.n	800f138 <inv_row_2_scale+0x90>
    else
        b = 7;		// error
 800f130:	230e      	movs	r3, #14
 800f132:	18fb      	adds	r3, r7, r3
 800f134:	2207      	movs	r2, #7
 800f136:	801a      	strh	r2, [r3, #0]
    return b;
 800f138:	230e      	movs	r3, #14
 800f13a:	18fb      	adds	r3, r7, r3
 800f13c:	881b      	ldrh	r3, [r3, #0]
}
 800f13e:	0018      	movs	r0, r3
 800f140:	46bd      	mov	sp, r7
 800f142:	b004      	add	sp, #16
 800f144:	bd80      	pop	{r7, pc}

0800f146 <inv_orientation_matrix_to_scalar>:
* The next 2 bits (6 and 7) represent the column the one is on for the third row with
* bit number 8 being the sign. In binary the identity matrix would therefor be:
* 010_001_000 or 0x88 in hex.
*/
unsigned short inv_orientation_matrix_to_scalar(const signed char *mtx)
{
 800f146:	b5b0      	push	{r4, r5, r7, lr}
 800f148:	b084      	sub	sp, #16
 800f14a:	af00      	add	r7, sp, #0
 800f14c:	6078      	str	r0, [r7, #4]
       YZX  000_010_001
       ZXY  001_000_010
       ZYX  000_001_010
     */

    scalar = inv_row_2_scale(mtx);
 800f14e:	250e      	movs	r5, #14
 800f150:	197c      	adds	r4, r7, r5
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	0018      	movs	r0, r3
 800f156:	f7ff ffa7 	bl	800f0a8 <inv_row_2_scale>
 800f15a:	0003      	movs	r3, r0
 800f15c:	8023      	strh	r3, [r4, #0]
    scalar |= inv_row_2_scale(mtx + 3) << 3;
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	3303      	adds	r3, #3
 800f162:	0018      	movs	r0, r3
 800f164:	f7ff ffa0 	bl	800f0a8 <inv_row_2_scale>
 800f168:	0003      	movs	r3, r0
 800f16a:	00db      	lsls	r3, r3, #3
 800f16c:	b21a      	sxth	r2, r3
 800f16e:	197b      	adds	r3, r7, r5
 800f170:	2100      	movs	r1, #0
 800f172:	5e5b      	ldrsh	r3, [r3, r1]
 800f174:	4313      	orrs	r3, r2
 800f176:	b21a      	sxth	r2, r3
 800f178:	197b      	adds	r3, r7, r5
 800f17a:	801a      	strh	r2, [r3, #0]
    scalar |= inv_row_2_scale(mtx + 6) << 6;
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	3306      	adds	r3, #6
 800f180:	0018      	movs	r0, r3
 800f182:	f7ff ff91 	bl	800f0a8 <inv_row_2_scale>
 800f186:	0003      	movs	r3, r0
 800f188:	019b      	lsls	r3, r3, #6
 800f18a:	b21a      	sxth	r2, r3
 800f18c:	197b      	adds	r3, r7, r5
 800f18e:	2100      	movs	r1, #0
 800f190:	5e5b      	ldrsh	r3, [r3, r1]
 800f192:	4313      	orrs	r3, r2
 800f194:	b21a      	sxth	r2, r3
 800f196:	197b      	adds	r3, r7, r5
 800f198:	801a      	strh	r2, [r3, #0]


    return scalar;
 800f19a:	197b      	adds	r3, r7, r5
 800f19c:	881b      	ldrh	r3, [r3, #0]
}
 800f19e:	0018      	movs	r0, r3
 800f1a0:	46bd      	mov	sp, r7
 800f1a2:	b004      	add	sp, #16
 800f1a4:	bdb0      	pop	{r4, r5, r7, pc}

0800f1a6 <inv_convert_to_body_with_scale>:
* @param[in] sensitivity Sensitivity scale
* @param[in] input Input vector, length 3
* @param[out] output Output vector, length 3
*/
void inv_convert_to_body_with_scale(unsigned short orientation, long sensitivity, const long *input, long *output)
{
 800f1a6:	b590      	push	{r4, r7, lr}
 800f1a8:	b085      	sub	sp, #20
 800f1aa:	af00      	add	r7, sp, #0
 800f1ac:	60b9      	str	r1, [r7, #8]
 800f1ae:	607a      	str	r2, [r7, #4]
 800f1b0:	603b      	str	r3, [r7, #0]
 800f1b2:	210e      	movs	r1, #14
 800f1b4:	187b      	adds	r3, r7, r1
 800f1b6:	1c02      	adds	r2, r0, #0
 800f1b8:	801a      	strh	r2, [r3, #0]
    output[0] = inv_q30_mult(input[orientation & 0x03] *
 800f1ba:	187b      	adds	r3, r7, r1
 800f1bc:	881b      	ldrh	r3, [r3, #0]
 800f1be:	2203      	movs	r2, #3
 800f1c0:	4013      	ands	r3, r2
 800f1c2:	009b      	lsls	r3, r3, #2
 800f1c4:	687a      	ldr	r2, [r7, #4]
 800f1c6:	18d3      	adds	r3, r2, r3
 800f1c8:	681a      	ldr	r2, [r3, #0]
                             SIGNSET(orientation & 0x004), sensitivity);
 800f1ca:	187b      	adds	r3, r7, r1
 800f1cc:	881b      	ldrh	r3, [r3, #0]
 800f1ce:	2104      	movs	r1, #4
 800f1d0:	400b      	ands	r3, r1
 800f1d2:	d002      	beq.n	800f1da <inv_convert_to_body_with_scale+0x34>
 800f1d4:	2301      	movs	r3, #1
 800f1d6:	425b      	negs	r3, r3
 800f1d8:	e000      	b.n	800f1dc <inv_convert_to_body_with_scale+0x36>
 800f1da:	2301      	movs	r3, #1
    output[0] = inv_q30_mult(input[orientation & 0x03] *
 800f1dc:	4353      	muls	r3, r2
 800f1de:	68ba      	ldr	r2, [r7, #8]
 800f1e0:	0011      	movs	r1, r2
 800f1e2:	0018      	movs	r0, r3
 800f1e4:	f7ff f9d7 	bl	800e596 <inv_q30_mult>
 800f1e8:	0002      	movs	r2, r0
 800f1ea:	683b      	ldr	r3, [r7, #0]
 800f1ec:	601a      	str	r2, [r3, #0]
    output[1] = inv_q30_mult(input[(orientation>>3) & 0x03] *
 800f1ee:	210e      	movs	r1, #14
 800f1f0:	187b      	adds	r3, r7, r1
 800f1f2:	881b      	ldrh	r3, [r3, #0]
 800f1f4:	08db      	lsrs	r3, r3, #3
 800f1f6:	b29b      	uxth	r3, r3
 800f1f8:	001a      	movs	r2, r3
 800f1fa:	2303      	movs	r3, #3
 800f1fc:	4013      	ands	r3, r2
 800f1fe:	009b      	lsls	r3, r3, #2
 800f200:	687a      	ldr	r2, [r7, #4]
 800f202:	18d3      	adds	r3, r2, r3
 800f204:	681a      	ldr	r2, [r3, #0]
                             SIGNSET(orientation & 0x020), sensitivity);
 800f206:	187b      	adds	r3, r7, r1
 800f208:	881b      	ldrh	r3, [r3, #0]
 800f20a:	2120      	movs	r1, #32
 800f20c:	400b      	ands	r3, r1
 800f20e:	d002      	beq.n	800f216 <inv_convert_to_body_with_scale+0x70>
 800f210:	2301      	movs	r3, #1
 800f212:	425b      	negs	r3, r3
 800f214:	e000      	b.n	800f218 <inv_convert_to_body_with_scale+0x72>
 800f216:	2301      	movs	r3, #1
    output[1] = inv_q30_mult(input[(orientation>>3) & 0x03] *
 800f218:	435a      	muls	r2, r3
 800f21a:	683b      	ldr	r3, [r7, #0]
 800f21c:	1d1c      	adds	r4, r3, #4
 800f21e:	68bb      	ldr	r3, [r7, #8]
 800f220:	0019      	movs	r1, r3
 800f222:	0010      	movs	r0, r2
 800f224:	f7ff f9b7 	bl	800e596 <inv_q30_mult>
 800f228:	0003      	movs	r3, r0
 800f22a:	6023      	str	r3, [r4, #0]
    output[2] = inv_q30_mult(input[(orientation>>6) & 0x03] *
 800f22c:	210e      	movs	r1, #14
 800f22e:	187b      	adds	r3, r7, r1
 800f230:	881b      	ldrh	r3, [r3, #0]
 800f232:	099b      	lsrs	r3, r3, #6
 800f234:	b29b      	uxth	r3, r3
 800f236:	001a      	movs	r2, r3
 800f238:	2303      	movs	r3, #3
 800f23a:	4013      	ands	r3, r2
 800f23c:	009b      	lsls	r3, r3, #2
 800f23e:	687a      	ldr	r2, [r7, #4]
 800f240:	18d3      	adds	r3, r2, r3
 800f242:	681a      	ldr	r2, [r3, #0]
                             SIGNSET(orientation & 0x100), sensitivity);
 800f244:	187b      	adds	r3, r7, r1
 800f246:	8819      	ldrh	r1, [r3, #0]
 800f248:	2380      	movs	r3, #128	; 0x80
 800f24a:	005b      	lsls	r3, r3, #1
 800f24c:	400b      	ands	r3, r1
 800f24e:	d002      	beq.n	800f256 <inv_convert_to_body_with_scale+0xb0>
 800f250:	2301      	movs	r3, #1
 800f252:	425b      	negs	r3, r3
 800f254:	e000      	b.n	800f258 <inv_convert_to_body_with_scale+0xb2>
 800f256:	2301      	movs	r3, #1
    output[2] = inv_q30_mult(input[(orientation>>6) & 0x03] *
 800f258:	435a      	muls	r2, r3
 800f25a:	683b      	ldr	r3, [r7, #0]
 800f25c:	3308      	adds	r3, #8
 800f25e:	001c      	movs	r4, r3
 800f260:	68bb      	ldr	r3, [r7, #8]
 800f262:	0019      	movs	r1, r3
 800f264:	0010      	movs	r0, r2
 800f266:	f7ff f996 	bl	800e596 <inv_q30_mult>
 800f26a:	0003      	movs	r3, r0
 800f26c:	6023      	str	r3, [r4, #0]
}
 800f26e:	46c0      	nop			; (mov r8, r8)
 800f270:	46bd      	mov	sp, r7
 800f272:	b005      	add	sp, #20
 800f274:	bd90      	pop	{r4, r7, pc}
	...

0800f278 <__print_result_location>:
#endif

static inline void __print_result_location(int result,
					   const char *file,
					   const char *func, int line)
{
 800f278:	b580      	push	{r7, lr}
 800f27a:	b088      	sub	sp, #32
 800f27c:	af04      	add	r7, sp, #16
 800f27e:	60f8      	str	r0, [r7, #12]
 800f280:	60b9      	str	r1, [r7, #8]
 800f282:	607a      	str	r2, [r7, #4]
 800f284:	603b      	str	r3, [r7, #0]
	MPL_LOGE("%s|%s|%d returning %d\n", file, func, line, result);
 800f286:	68b9      	ldr	r1, [r7, #8]
 800f288:	4a07      	ldr	r2, [pc, #28]	; (800f2a8 <__print_result_location+0x30>)
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	9302      	str	r3, [sp, #8]
 800f28e:	683b      	ldr	r3, [r7, #0]
 800f290:	9301      	str	r3, [sp, #4]
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	9300      	str	r3, [sp, #0]
 800f296:	000b      	movs	r3, r1
 800f298:	2100      	movs	r1, #0
 800f29a:	2006      	movs	r0, #6
 800f29c:	f7fe ffc0 	bl	800e220 <_MLPrintLog>
}
 800f2a0:	46c0      	nop			; (mov r8, r8)
 800f2a2:	46bd      	mov	sp, r7
 800f2a4:	b004      	add	sp, #16
 800f2a6:	bd80      	pop	{r7, pc}
 800f2a8:	08015944 	.word	0x08015944

0800f2ac <inv_init_mpl>:
/**
 * @brief  Initializes the MPL. Should be called first and once 
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_init_mpl(void)
{
 800f2ac:	b580      	push	{r7, lr}
 800f2ae:	af00      	add	r7, sp, #0
    inv_init_storage_manager();
 800f2b0:	f000 fb0a 	bl	800f8c8 <inv_init_storage_manager>

    /* initialize the start callback manager */
    INV_ERROR_CHECK(inv_init_start_manager());
 800f2b4:	f000 fa74 	bl	800f7a0 <inv_init_start_manager>
 800f2b8:	1e03      	subs	r3, r0, #0
 800f2ba:	d00a      	beq.n	800f2d2 <inv_init_mpl+0x26>
 800f2bc:	f000 fa70 	bl	800f7a0 <inv_init_start_manager>
 800f2c0:	4a15      	ldr	r2, [pc, #84]	; (800f318 <inv_init_mpl+0x6c>)
 800f2c2:	4916      	ldr	r1, [pc, #88]	; (800f31c <inv_init_mpl+0x70>)
 800f2c4:	2322      	movs	r3, #34	; 0x22
 800f2c6:	f7ff ffd7 	bl	800f278 <__print_result_location>
 800f2ca:	f000 fa69 	bl	800f7a0 <inv_init_start_manager>
 800f2ce:	0003      	movs	r3, r0
 800f2d0:	e01e      	b.n	800f310 <inv_init_mpl+0x64>

    /* initialize the data builder */
    INV_ERROR_CHECK(inv_init_data_builder());
 800f2d2:	f7fb f819 	bl	800a308 <inv_init_data_builder>
 800f2d6:	1e03      	subs	r3, r0, #0
 800f2d8:	d00a      	beq.n	800f2f0 <inv_init_mpl+0x44>
 800f2da:	f7fb f815 	bl	800a308 <inv_init_data_builder>
 800f2de:	4a0e      	ldr	r2, [pc, #56]	; (800f318 <inv_init_mpl+0x6c>)
 800f2e0:	490e      	ldr	r1, [pc, #56]	; (800f31c <inv_init_mpl+0x70>)
 800f2e2:	2325      	movs	r3, #37	; 0x25
 800f2e4:	f7ff ffc8 	bl	800f278 <__print_result_location>
 800f2e8:	f7fb f80e 	bl	800a308 <inv_init_data_builder>
 800f2ec:	0003      	movs	r3, r0
 800f2ee:	e00f      	b.n	800f310 <inv_init_mpl+0x64>

    INV_ERROR_CHECK(inv_enable_results_holder());
 800f2f0:	f000 f9ee 	bl	800f6d0 <inv_enable_results_holder>
 800f2f4:	1e03      	subs	r3, r0, #0
 800f2f6:	d00a      	beq.n	800f30e <inv_init_mpl+0x62>
 800f2f8:	f000 f9ea 	bl	800f6d0 <inv_enable_results_holder>
 800f2fc:	4a06      	ldr	r2, [pc, #24]	; (800f318 <inv_init_mpl+0x6c>)
 800f2fe:	4907      	ldr	r1, [pc, #28]	; (800f31c <inv_init_mpl+0x70>)
 800f300:	2327      	movs	r3, #39	; 0x27
 800f302:	f7ff ffb9 	bl	800f278 <__print_result_location>
 800f306:	f000 f9e3 	bl	800f6d0 <inv_enable_results_holder>
 800f30a:	0003      	movs	r3, r0
 800f30c:	e000      	b.n	800f310 <inv_init_mpl+0x64>

    return INV_SUCCESS;
 800f30e:	2300      	movs	r3, #0
}
 800f310:	0018      	movs	r0, r3
 800f312:	46bd      	mov	sp, r7
 800f314:	bd80      	pop	{r7, pc}
 800f316:	46c0      	nop			; (mov r8, r8)
 800f318:	080166e8 	.word	0x080166e8
 800f31c:	0801595c 	.word	0x0801595c

0800f320 <inv_start_mpl>:
 *  @brief  Starts the MPL. Typically called after inv_init_mpl() or after a
 *          inv_stop_mpl() to start the MPL back up an running.
 *  @return INV_SUCCESS if successful or a non-zero error code otherwise.
 */
inv_error_t inv_start_mpl(void)
{
 800f320:	b580      	push	{r7, lr}
 800f322:	af00      	add	r7, sp, #0
    INV_ERROR_CHECK(inv_execute_mpl_start_notification());
 800f324:	f000 faa8 	bl	800f878 <inv_execute_mpl_start_notification>
 800f328:	1e03      	subs	r3, r0, #0
 800f32a:	d00a      	beq.n	800f342 <inv_start_mpl+0x22>
 800f32c:	f000 faa4 	bl	800f878 <inv_execute_mpl_start_notification>
 800f330:	4a06      	ldr	r2, [pc, #24]	; (800f34c <inv_start_mpl+0x2c>)
 800f332:	4907      	ldr	r1, [pc, #28]	; (800f350 <inv_start_mpl+0x30>)
 800f334:	2342      	movs	r3, #66	; 0x42
 800f336:	f7ff ff9f 	bl	800f278 <__print_result_location>
 800f33a:	f000 fa9d 	bl	800f878 <inv_execute_mpl_start_notification>
 800f33e:	0003      	movs	r3, r0
 800f340:	e000      	b.n	800f344 <inv_start_mpl+0x24>
    return INV_SUCCESS;
 800f342:	2300      	movs	r3, #0
}
 800f344:	0018      	movs	r0, r3
 800f346:	46bd      	mov	sp, r7
 800f348:	bd80      	pop	{r7, pc}
 800f34a:	46c0      	nop			; (mov r8, r8)
 800f34c:	080166f8 	.word	0x080166f8
 800f350:	0801595c 	.word	0x0801595c

0800f354 <inv_store_gaming_quaternion>:
* Store a quaternion more suitable for gaming. This quaternion is often determined
* using only gyro and accel.
* @param[in] quat Length 4, Quaternion scaled by 2^30
*/
void inv_store_gaming_quaternion(const long *quat, inv_time_t timestamp)
{
 800f354:	b580      	push	{r7, lr}
 800f356:	b082      	sub	sp, #8
 800f358:	af00      	add	r7, sp, #0
 800f35a:	6078      	str	r0, [r7, #4]
 800f35c:	6039      	str	r1, [r7, #0]
    rh.status |= INV_6_AXIS_QUAT_SET;
 800f35e:	4b09      	ldr	r3, [pc, #36]	; (800f384 <inv_store_gaming_quaternion+0x30>)
 800f360:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f362:	2202      	movs	r2, #2
 800f364:	431a      	orrs	r2, r3
 800f366:	4b07      	ldr	r3, [pc, #28]	; (800f384 <inv_store_gaming_quaternion+0x30>)
 800f368:	67da      	str	r2, [r3, #124]	; 0x7c
    memcpy(&rh.gam_quat, quat, sizeof(rh.gam_quat));
 800f36a:	6879      	ldr	r1, [r7, #4]
 800f36c:	4b06      	ldr	r3, [pc, #24]	; (800f388 <inv_store_gaming_quaternion+0x34>)
 800f36e:	2210      	movs	r2, #16
 800f370:	0018      	movs	r0, r3
 800f372:	f002 fe6b 	bl	801204c <memcpy>
    rh.gam_timestamp = timestamp;
 800f376:	4b03      	ldr	r3, [pc, #12]	; (800f384 <inv_store_gaming_quaternion+0x30>)
 800f378:	683a      	ldr	r2, [r7, #0]
 800f37a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800f37c:	46c0      	nop			; (mov r8, r8)
 800f37e:	46bd      	mov	sp, r7
 800f380:	b002      	add	sp, #8
 800f382:	bd80      	pop	{r7, pc}
 800f384:	200009e4 	.word	0x200009e4
 800f388:	200009f4 	.word	0x200009f4

0800f38c <inv_set_compass_correction>:
* Sets the quaternion adjustment from 6 axis (accel, gyro) to 9 axis quaternion.
* @param[in] data Quaternion Adjustment
* @param[in] timestamp Timestamp of when this is valid
*/
void inv_set_compass_correction(const long *data, inv_time_t timestamp)
{
 800f38c:	b580      	push	{r7, lr}
 800f38e:	b082      	sub	sp, #8
 800f390:	af00      	add	r7, sp, #0
 800f392:	6078      	str	r0, [r7, #4]
 800f394:	6039      	str	r1, [r7, #0]
    rh.status |= INV_COMPASS_CORRECTION_SET;
 800f396:	4b09      	ldr	r3, [pc, #36]	; (800f3bc <inv_set_compass_correction+0x30>)
 800f398:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f39a:	2201      	movs	r2, #1
 800f39c:	431a      	orrs	r2, r3
 800f39e:	4b07      	ldr	r3, [pc, #28]	; (800f3bc <inv_set_compass_correction+0x30>)
 800f3a0:	67da      	str	r2, [r3, #124]	; 0x7c
    memcpy(rh.compass_correction, data, sizeof(rh.compass_correction));
 800f3a2:	6879      	ldr	r1, [r7, #4]
 800f3a4:	4b06      	ldr	r3, [pc, #24]	; (800f3c0 <inv_set_compass_correction+0x34>)
 800f3a6:	2210      	movs	r2, #16
 800f3a8:	0018      	movs	r0, r3
 800f3aa:	f002 fe4f 	bl	801204c <memcpy>
    rh.nav_timestamp = timestamp;
 800f3ae:	4b03      	ldr	r3, [pc, #12]	; (800f3bc <inv_set_compass_correction+0x30>)
 800f3b0:	683a      	ldr	r2, [r7, #0]
 800f3b2:	621a      	str	r2, [r3, #32]
}
 800f3b4:	46c0      	nop			; (mov r8, r8)
 800f3b6:	46bd      	mov	sp, r7
 800f3b8:	b002      	add	sp, #8
 800f3ba:	bd80      	pop	{r7, pc}
 800f3bc:	200009e4 	.word	0x200009e4
 800f3c0:	20000a24 	.word	0x20000a24

0800f3c4 <inv_get_compass_correction>:
* Gets the quaternion adjustment from 6 axis (accel, gyro) to 9 axis quaternion.
* @param[out] data Quaternion Adjustment
* @param[out] timestamp Timestamp of when this is valid
*/
void inv_get_compass_correction(long *data, inv_time_t *timestamp)
{
 800f3c4:	b580      	push	{r7, lr}
 800f3c6:	b082      	sub	sp, #8
 800f3c8:	af00      	add	r7, sp, #0
 800f3ca:	6078      	str	r0, [r7, #4]
 800f3cc:	6039      	str	r1, [r7, #0]
    memcpy(data, rh.compass_correction, sizeof(rh.compass_correction));
 800f3ce:	4907      	ldr	r1, [pc, #28]	; (800f3ec <inv_get_compass_correction+0x28>)
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	2210      	movs	r2, #16
 800f3d4:	0018      	movs	r0, r3
 800f3d6:	f002 fe39 	bl	801204c <memcpy>
    *timestamp = rh.nav_timestamp;
 800f3da:	4b05      	ldr	r3, [pc, #20]	; (800f3f0 <inv_get_compass_correction+0x2c>)
 800f3dc:	6a1a      	ldr	r2, [r3, #32]
 800f3de:	683b      	ldr	r3, [r7, #0]
 800f3e0:	601a      	str	r2, [r3, #0]
}
 800f3e2:	46c0      	nop			; (mov r8, r8)
 800f3e4:	46bd      	mov	sp, r7
 800f3e6:	b002      	add	sp, #8
 800f3e8:	bd80      	pop	{r7, pc}
 800f3ea:	46c0      	nop			; (mov r8, r8)
 800f3ec:	20000a24 	.word	0x20000a24
 800f3f0:	200009e4 	.word	0x200009e4

0800f3f4 <inv_get_acc_state>:

/** Gets the accel state set by inv_set_acc_state()
 * @return accel state.
 */
int inv_get_acc_state()
{
 800f3f4:	b580      	push	{r7, lr}
 800f3f6:	af00      	add	r7, sp, #0
    return rh.acc_state;
 800f3f8:	4b02      	ldr	r3, [pc, #8]	; (800f404 <inv_get_acc_state+0x10>)
 800f3fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
 800f3fc:	0018      	movs	r0, r3
 800f3fe:	46bd      	mov	sp, r7
 800f400:	bd80      	pop	{r7, pc}
 800f402:	46c0      	nop			; (mov r8, r8)
 800f404:	200009e4 	.word	0x200009e4

0800f408 <inv_get_motion_state>:
/** Returns the motion state
* @param[out] cntr Number of previous times a no motion event has occured in a row.
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
int inv_get_motion_state(unsigned int *cntr)
{
 800f408:	b580      	push	{r7, lr}
 800f40a:	b082      	sub	sp, #8
 800f40c:	af00      	add	r7, sp, #0
 800f40e:	6078      	str	r0, [r7, #4]
    *cntr = rh.motion_state_counter;
 800f410:	4b05      	ldr	r3, [pc, #20]	; (800f428 <inv_get_motion_state+0x20>)
 800f412:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	601a      	str	r2, [r3, #0]
    return rh.motion_state;
 800f418:	4b03      	ldr	r3, [pc, #12]	; (800f428 <inv_get_motion_state+0x20>)
 800f41a:	2264      	movs	r2, #100	; 0x64
 800f41c:	5c9b      	ldrb	r3, [r3, r2]
}
 800f41e:	0018      	movs	r0, r3
 800f420:	46bd      	mov	sp, r7
 800f422:	b002      	add	sp, #8
 800f424:	bd80      	pop	{r7, pc}
 800f426:	46c0      	nop			; (mov r8, r8)
 800f428:	200009e4 	.word	0x200009e4

0800f42c <inv_set_motion_state>:
/** Sets the motion state
 * @param[in] state motion state where INV_NO_MOTION is not moving
 *            and INV_MOTION is moving.
 */
void inv_set_motion_state(unsigned char state)
{
 800f42c:	b580      	push	{r7, lr}
 800f42e:	b084      	sub	sp, #16
 800f430:	af00      	add	r7, sp, #0
 800f432:	0002      	movs	r2, r0
 800f434:	1dfb      	adds	r3, r7, #7
 800f436:	701a      	strb	r2, [r3, #0]
    long set;
    if (state == rh.motion_state) {
 800f438:	4b17      	ldr	r3, [pc, #92]	; (800f498 <inv_set_motion_state+0x6c>)
 800f43a:	2264      	movs	r2, #100	; 0x64
 800f43c:	5c9b      	ldrb	r3, [r3, r2]
 800f43e:	1dfa      	adds	r2, r7, #7
 800f440:	7812      	ldrb	r2, [r2, #0]
 800f442:	429a      	cmp	r2, r3
 800f444:	d10d      	bne.n	800f462 <inv_set_motion_state+0x36>
        if (state == INV_NO_MOTION) {
 800f446:	1dfb      	adds	r3, r7, #7
 800f448:	781b      	ldrb	r3, [r3, #0]
 800f44a:	2b02      	cmp	r3, #2
 800f44c:	d105      	bne.n	800f45a <inv_set_motion_state+0x2e>
            rh.motion_state_counter++;
 800f44e:	4b12      	ldr	r3, [pc, #72]	; (800f498 <inv_set_motion_state+0x6c>)
 800f450:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f452:	1c5a      	adds	r2, r3, #1
 800f454:	4b10      	ldr	r3, [pc, #64]	; (800f498 <inv_set_motion_state+0x6c>)
 800f456:	669a      	str	r2, [r3, #104]	; 0x68
        } else {
            rh.motion_state_counter = 0;
        }
        return;
 800f458:	e01a      	b.n	800f490 <inv_set_motion_state+0x64>
            rh.motion_state_counter = 0;
 800f45a:	4b0f      	ldr	r3, [pc, #60]	; (800f498 <inv_set_motion_state+0x6c>)
 800f45c:	2200      	movs	r2, #0
 800f45e:	669a      	str	r2, [r3, #104]	; 0x68
        return;
 800f460:	e016      	b.n	800f490 <inv_set_motion_state+0x64>
    }
    rh.motion_state_counter = 0;
 800f462:	4b0d      	ldr	r3, [pc, #52]	; (800f498 <inv_set_motion_state+0x6c>)
 800f464:	2200      	movs	r2, #0
 800f466:	669a      	str	r2, [r3, #104]	; 0x68
    rh.motion_state = state;
 800f468:	4b0b      	ldr	r3, [pc, #44]	; (800f498 <inv_set_motion_state+0x6c>)
 800f46a:	1dfa      	adds	r2, r7, #7
 800f46c:	2164      	movs	r1, #100	; 0x64
 800f46e:	7812      	ldrb	r2, [r2, #0]
 800f470:	545a      	strb	r2, [r3, r1]
    /* Equivalent to set = state, but #define's may change. */
    if (state == INV_MOTION)
 800f472:	1dfb      	adds	r3, r7, #7
 800f474:	781b      	ldrb	r3, [r3, #0]
 800f476:	2b01      	cmp	r3, #1
 800f478:	d102      	bne.n	800f480 <inv_set_motion_state+0x54>
        set = INV_MSG_MOTION_EVENT;
 800f47a:	2301      	movs	r3, #1
 800f47c:	60fb      	str	r3, [r7, #12]
 800f47e:	e001      	b.n	800f484 <inv_set_motion_state+0x58>
    else
        set = INV_MSG_NO_MOTION_EVENT;
 800f480:	2302      	movs	r3, #2
 800f482:	60fb      	str	r3, [r7, #12]
    inv_set_message(set, (INV_MSG_MOTION_EVENT | INV_MSG_NO_MOTION_EVENT), 0);
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	2200      	movs	r2, #0
 800f488:	2103      	movs	r1, #3
 800f48a:	0018      	movs	r0, r3
 800f48c:	f7fe ff86 	bl	800e39c <inv_set_message>
}
 800f490:	46bd      	mov	sp, r7
 800f492:	b004      	add	sp, #16
 800f494:	bd80      	pop	{r7, pc}
 800f496:	46c0      	nop			; (mov r8, r8)
 800f498:	200009e4 	.word	0x200009e4

0800f49c <inv_get_local_field>:
* @param[out] data Local earth's magnetic field in uT scaled by 2^16.
*            Length = 3. Y typically points north, Z typically points down in
*                        northern hemisphere and up in southern hemisphere.
*/
void inv_get_local_field(long *data)
{
 800f49c:	b580      	push	{r7, lr}
 800f49e:	b082      	sub	sp, #8
 800f4a0:	af00      	add	r7, sp, #0
 800f4a2:	6078      	str	r0, [r7, #4]
    memcpy(data, rh.local_field, sizeof(rh.local_field));
 800f4a4:	4904      	ldr	r1, [pc, #16]	; (800f4b8 <inv_get_local_field+0x1c>)
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	220c      	movs	r2, #12
 800f4aa:	0018      	movs	r0, r3
 800f4ac:	f002 fdce 	bl	801204c <memcpy>
}
 800f4b0:	46c0      	nop			; (mov r8, r8)
 800f4b2:	46bd      	mov	sp, r7
 800f4b4:	b002      	add	sp, #8
 800f4b6:	bd80      	pop	{r7, pc}
 800f4b8:	20000a0c 	.word	0x20000a0c

0800f4bc <inv_get_gravity>:
/** Gets gravity vector
 * @param[out] data gravity vector in body frame scaled such that 1.0 = 2^30.
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_get_gravity(long *data)
{
 800f4bc:	b590      	push	{r4, r7, lr}
 800f4be:	b083      	sub	sp, #12
 800f4c0:	af00      	add	r7, sp, #0
 800f4c2:	6078      	str	r0, [r7, #4]
    data[0] =
        inv_q29_mult(rh.nav_quat[1], rh.nav_quat[3]) - inv_q29_mult(rh.nav_quat[2], rh.nav_quat[0]);
 800f4c4:	4b24      	ldr	r3, [pc, #144]	; (800f558 <inv_get_gravity+0x9c>)
 800f4c6:	685a      	ldr	r2, [r3, #4]
 800f4c8:	4b23      	ldr	r3, [pc, #140]	; (800f558 <inv_get_gravity+0x9c>)
 800f4ca:	68db      	ldr	r3, [r3, #12]
 800f4cc:	0019      	movs	r1, r3
 800f4ce:	0010      	movs	r0, r2
 800f4d0:	f7ff f83e 	bl	800e550 <inv_q29_mult>
 800f4d4:	0004      	movs	r4, r0
 800f4d6:	4b20      	ldr	r3, [pc, #128]	; (800f558 <inv_get_gravity+0x9c>)
 800f4d8:	689a      	ldr	r2, [r3, #8]
 800f4da:	4b1f      	ldr	r3, [pc, #124]	; (800f558 <inv_get_gravity+0x9c>)
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	0019      	movs	r1, r3
 800f4e0:	0010      	movs	r0, r2
 800f4e2:	f7ff f835 	bl	800e550 <inv_q29_mult>
 800f4e6:	0003      	movs	r3, r0
 800f4e8:	1ae2      	subs	r2, r4, r3
    data[0] =
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	601a      	str	r2, [r3, #0]
    data[1] =
        inv_q29_mult(rh.nav_quat[2], rh.nav_quat[3]) + inv_q29_mult(rh.nav_quat[1], rh.nav_quat[0]);
 800f4ee:	4b1a      	ldr	r3, [pc, #104]	; (800f558 <inv_get_gravity+0x9c>)
 800f4f0:	689a      	ldr	r2, [r3, #8]
 800f4f2:	4b19      	ldr	r3, [pc, #100]	; (800f558 <inv_get_gravity+0x9c>)
 800f4f4:	68db      	ldr	r3, [r3, #12]
 800f4f6:	0019      	movs	r1, r3
 800f4f8:	0010      	movs	r0, r2
 800f4fa:	f7ff f829 	bl	800e550 <inv_q29_mult>
 800f4fe:	0004      	movs	r4, r0
 800f500:	4b15      	ldr	r3, [pc, #84]	; (800f558 <inv_get_gravity+0x9c>)
 800f502:	685a      	ldr	r2, [r3, #4]
 800f504:	4b14      	ldr	r3, [pc, #80]	; (800f558 <inv_get_gravity+0x9c>)
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	0019      	movs	r1, r3
 800f50a:	0010      	movs	r0, r2
 800f50c:	f7ff f820 	bl	800e550 <inv_q29_mult>
 800f510:	0002      	movs	r2, r0
    data[1] =
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	3304      	adds	r3, #4
        inv_q29_mult(rh.nav_quat[2], rh.nav_quat[3]) + inv_q29_mult(rh.nav_quat[1], rh.nav_quat[0]);
 800f516:	18a2      	adds	r2, r4, r2
    data[1] =
 800f518:	601a      	str	r2, [r3, #0]
    data[2] =
        (inv_q29_mult(rh.nav_quat[3], rh.nav_quat[3]) + inv_q29_mult(rh.nav_quat[0], rh.nav_quat[0])) -
 800f51a:	4b0f      	ldr	r3, [pc, #60]	; (800f558 <inv_get_gravity+0x9c>)
 800f51c:	68da      	ldr	r2, [r3, #12]
 800f51e:	4b0e      	ldr	r3, [pc, #56]	; (800f558 <inv_get_gravity+0x9c>)
 800f520:	68db      	ldr	r3, [r3, #12]
 800f522:	0019      	movs	r1, r3
 800f524:	0010      	movs	r0, r2
 800f526:	f7ff f813 	bl	800e550 <inv_q29_mult>
 800f52a:	0004      	movs	r4, r0
 800f52c:	4b0a      	ldr	r3, [pc, #40]	; (800f558 <inv_get_gravity+0x9c>)
 800f52e:	681a      	ldr	r2, [r3, #0]
 800f530:	4b09      	ldr	r3, [pc, #36]	; (800f558 <inv_get_gravity+0x9c>)
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	0019      	movs	r1, r3
 800f536:	0010      	movs	r0, r2
 800f538:	f7ff f80a 	bl	800e550 <inv_q29_mult>
 800f53c:	0003      	movs	r3, r0
 800f53e:	18e2      	adds	r2, r4, r3
    data[2] =
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	3308      	adds	r3, #8
        (inv_q29_mult(rh.nav_quat[3], rh.nav_quat[3]) + inv_q29_mult(rh.nav_quat[0], rh.nav_quat[0])) -
 800f544:	21c0      	movs	r1, #192	; 0xc0
 800f546:	0609      	lsls	r1, r1, #24
 800f548:	468c      	mov	ip, r1
 800f54a:	4462      	add	r2, ip
    data[2] =
 800f54c:	601a      	str	r2, [r3, #0]
        1073741824L;

    return INV_SUCCESS;
 800f54e:	2300      	movs	r3, #0
}
 800f550:	0018      	movs	r0, r3
 800f552:	46bd      	mov	sp, r7
 800f554:	b003      	add	sp, #12
 800f556:	bd90      	pop	{r4, r7, pc}
 800f558:	200009e4 	.word	0x200009e4

0800f55c <inv_get_6axis_quaternion>:
/** Returns a quaternion based only on gyro and accel.
 * @param[out] data 6-axis  gyro and accel quaternion scaled such that 1.0 = 2^30.
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_get_6axis_quaternion(long *data)
{
 800f55c:	b580      	push	{r7, lr}
 800f55e:	b082      	sub	sp, #8
 800f560:	af00      	add	r7, sp, #0
 800f562:	6078      	str	r0, [r7, #4]
    memcpy(data, rh.gam_quat, sizeof(rh.gam_quat));
 800f564:	4905      	ldr	r1, [pc, #20]	; (800f57c <inv_get_6axis_quaternion+0x20>)
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	2210      	movs	r2, #16
 800f56a:	0018      	movs	r0, r3
 800f56c:	f002 fd6e 	bl	801204c <memcpy>
    return INV_SUCCESS;
 800f570:	2300      	movs	r3, #0
}
 800f572:	0018      	movs	r0, r3
 800f574:	46bd      	mov	sp, r7
 800f576:	b002      	add	sp, #8
 800f578:	bd80      	pop	{r7, pc}
 800f57a:	46c0      	nop			; (mov r8, r8)
 800f57c:	200009f4 	.word	0x200009f4

0800f580 <inv_get_quaternion>:
/** Returns a quaternion.
 * @param[out] data 9-axis quaternion scaled such that 1.0 = 2^30.
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_get_quaternion(long *data)
{
 800f580:	b580      	push	{r7, lr}
 800f582:	b082      	sub	sp, #8
 800f584:	af00      	add	r7, sp, #0
 800f586:	6078      	str	r0, [r7, #4]
    if (rh.status & (INV_COMPASS_CORRECTION_SET | INV_6_AXIS_QUAT_SET)) {
 800f588:	4b0e      	ldr	r3, [pc, #56]	; (800f5c4 <inv_get_quaternion+0x44>)
 800f58a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f58c:	2203      	movs	r2, #3
 800f58e:	4013      	ands	r3, r2
 800f590:	d00c      	beq.n	800f5ac <inv_get_quaternion+0x2c>
        inv_q_mult(rh.compass_correction, rh.gam_quat, rh.nav_quat);
 800f592:	4a0c      	ldr	r2, [pc, #48]	; (800f5c4 <inv_get_quaternion+0x44>)
 800f594:	490c      	ldr	r1, [pc, #48]	; (800f5c8 <inv_get_quaternion+0x48>)
 800f596:	4b0d      	ldr	r3, [pc, #52]	; (800f5cc <inv_get_quaternion+0x4c>)
 800f598:	0018      	movs	r0, r3
 800f59a:	f7ff f81f 	bl	800e5dc <inv_q_mult>
        rh.status &= ~(INV_COMPASS_CORRECTION_SET | INV_6_AXIS_QUAT_SET);
 800f59e:	4b09      	ldr	r3, [pc, #36]	; (800f5c4 <inv_get_quaternion+0x44>)
 800f5a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f5a2:	2203      	movs	r2, #3
 800f5a4:	4393      	bics	r3, r2
 800f5a6:	001a      	movs	r2, r3
 800f5a8:	4b06      	ldr	r3, [pc, #24]	; (800f5c4 <inv_get_quaternion+0x44>)
 800f5aa:	67da      	str	r2, [r3, #124]	; 0x7c
    }
    memcpy(data, rh.nav_quat, sizeof(rh.nav_quat));
 800f5ac:	4905      	ldr	r1, [pc, #20]	; (800f5c4 <inv_get_quaternion+0x44>)
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	2210      	movs	r2, #16
 800f5b2:	0018      	movs	r0, r3
 800f5b4:	f002 fd4a 	bl	801204c <memcpy>
    return INV_SUCCESS;
 800f5b8:	2300      	movs	r3, #0
}
 800f5ba:	0018      	movs	r0, r3
 800f5bc:	46bd      	mov	sp, r7
 800f5be:	b002      	add	sp, #8
 800f5c0:	bd80      	pop	{r7, pc}
 800f5c2:	46c0      	nop			; (mov r8, r8)
 800f5c4:	200009e4 	.word	0x200009e4
 800f5c8:	200009f4 	.word	0x200009f4
 800f5cc:	20000a24 	.word	0x20000a24

0800f5d0 <inv_get_quaternion_set>:
 * @param[out] data 9-axis quaternion scaled such that 1.0 = 2^30.
 * @param[out] accuracy Accuracy of quaternion, 0-3, where 3 is most accurate.
 * @param[out] timestamp Timestamp of this quaternion in nanoseconds
 */
void inv_get_quaternion_set(long *data, int *accuracy, inv_time_t *timestamp)
{
 800f5d0:	b580      	push	{r7, lr}
 800f5d2:	b084      	sub	sp, #16
 800f5d4:	af00      	add	r7, sp, #0
 800f5d6:	60f8      	str	r0, [r7, #12]
 800f5d8:	60b9      	str	r1, [r7, #8]
 800f5da:	607a      	str	r2, [r7, #4]
    inv_get_quaternion(data);
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	0018      	movs	r0, r3
 800f5e0:	f7ff ffce 	bl	800f580 <inv_get_quaternion>
    *timestamp = inv_get_last_timestamp();
 800f5e4:	f7fa ff56 	bl	800a494 <inv_get_last_timestamp>
 800f5e8:	0002      	movs	r2, r0
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	601a      	str	r2, [r3, #0]
    if (inv_get_compass_on()) {
 800f5ee:	f7fa ff21 	bl	800a434 <inv_get_compass_on>
 800f5f2:	1e03      	subs	r3, r0, #0
 800f5f4:	d005      	beq.n	800f602 <inv_get_quaternion_set+0x32>
        *accuracy = inv_get_mag_accuracy();
 800f5f6:	f7fb fc07 	bl	800ae08 <inv_get_mag_accuracy>
 800f5fa:	0002      	movs	r2, r0
 800f5fc:	68bb      	ldr	r3, [r7, #8]
 800f5fe:	601a      	str	r2, [r3, #0]
    }else if (inv_get_accel_on()) {
        *accuracy = inv_get_accel_accuracy();
    } else {
        *accuracy = 0;
    }
}
 800f600:	e016      	b.n	800f630 <inv_get_quaternion_set+0x60>
    } else if (inv_get_gyro_on()) {
 800f602:	f7fa ff27 	bl	800a454 <inv_get_gyro_on>
 800f606:	1e03      	subs	r3, r0, #0
 800f608:	d005      	beq.n	800f616 <inv_get_quaternion_set+0x46>
        *accuracy = inv_get_gyro_accuracy();
 800f60a:	f7fb fbf3 	bl	800adf4 <inv_get_gyro_accuracy>
 800f60e:	0002      	movs	r2, r0
 800f610:	68bb      	ldr	r3, [r7, #8]
 800f612:	601a      	str	r2, [r3, #0]
}
 800f614:	e00c      	b.n	800f630 <inv_get_quaternion_set+0x60>
    }else if (inv_get_accel_on()) {
 800f616:	f7fa ff2d 	bl	800a474 <inv_get_accel_on>
 800f61a:	1e03      	subs	r3, r0, #0
 800f61c:	d005      	beq.n	800f62a <inv_get_quaternion_set+0x5a>
        *accuracy = inv_get_accel_accuracy();
 800f61e:	f7fb fc07 	bl	800ae30 <inv_get_accel_accuracy>
 800f622:	0002      	movs	r2, r0
 800f624:	68bb      	ldr	r3, [r7, #8]
 800f626:	601a      	str	r2, [r3, #0]
}
 800f628:	e002      	b.n	800f630 <inv_get_quaternion_set+0x60>
        *accuracy = 0;
 800f62a:	68bb      	ldr	r3, [r7, #8]
 800f62c:	2200      	movs	r2, #0
 800f62e:	601a      	str	r2, [r3, #0]
}
 800f630:	46c0      	nop			; (mov r8, r8)
 800f632:	46bd      	mov	sp, r7
 800f634:	b004      	add	sp, #16
 800f636:	bd80      	pop	{r7, pc}

0800f638 <inv_generate_results>:
 * registered by inv_start_results_holder().
 * @param[in] sensor_cal New sensor data to process.
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_generate_results(struct inv_sensor_cal_t *sensor_cal)
{
 800f638:	b580      	push	{r7, lr}
 800f63a:	b082      	sub	sp, #8
 800f63c:	af00      	add	r7, sp, #0
 800f63e:	6078      	str	r0, [r7, #4]
    rh.sensor = sensor_cal;
 800f640:	4b04      	ldr	r3, [pc, #16]	; (800f654 <inv_generate_results+0x1c>)
 800f642:	2180      	movs	r1, #128	; 0x80
 800f644:	687a      	ldr	r2, [r7, #4]
 800f646:	505a      	str	r2, [r3, r1]
    return INV_SUCCESS;
 800f648:	2300      	movs	r3, #0
}
 800f64a:	0018      	movs	r0, r3
 800f64c:	46bd      	mov	sp, r7
 800f64e:	b002      	add	sp, #8
 800f650:	bd80      	pop	{r7, pc}
 800f652:	46c0      	nop			; (mov r8, r8)
 800f654:	200009e4 	.word	0x200009e4

0800f658 <inv_start_results_holder>:
/** Function to turn on this module. This is automatically called by
 *  inv_enable_results_holder(). Typically not called by users.
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_start_results_holder(void)
{
 800f658:	b580      	push	{r7, lr}
 800f65a:	af00      	add	r7, sp, #0
    inv_register_data_cb(inv_generate_results, INV_PRIORITY_RESULTS_HOLDER,
 800f65c:	23c8      	movs	r3, #200	; 0xc8
 800f65e:	0099      	lsls	r1, r3, #2
 800f660:	4b04      	ldr	r3, [pc, #16]	; (800f674 <inv_start_results_holder+0x1c>)
 800f662:	2207      	movs	r2, #7
 800f664:	0018      	movs	r0, r3
 800f666:	f7fb f98b 	bl	800a980 <inv_register_data_cb>
        INV_GYRO_NEW | INV_ACCEL_NEW | INV_MAG_NEW);
    return INV_SUCCESS;
 800f66a:	2300      	movs	r3, #0
}
 800f66c:	0018      	movs	r0, r3
 800f66e:	46bd      	mov	sp, r7
 800f670:	bd80      	pop	{r7, pc}
 800f672:	46c0      	nop			; (mov r8, r8)
 800f674:	0800f639 	.word	0x0800f639

0800f678 <inv_init_results_holder>:
* enable function inv_enable_results_holder(). It may be called any time the feature is enabled, but
* is typically not needed to be called by outside callers.
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
inv_error_t inv_init_results_holder(void)
{
 800f678:	b580      	push	{r7, lr}
 800f67a:	af00      	add	r7, sp, #0
    memset(&rh, 0, sizeof(rh));
 800f67c:	4b12      	ldr	r3, [pc, #72]	; (800f6c8 <inv_init_results_holder+0x50>)
 800f67e:	2288      	movs	r2, #136	; 0x88
 800f680:	2100      	movs	r1, #0
 800f682:	0018      	movs	r0, r3
 800f684:	f002 fc4f 	bl	8011f26 <memset>
    rh.mag_scale[0] = 1L<<30;
 800f688:	4b0f      	ldr	r3, [pc, #60]	; (800f6c8 <inv_init_results_holder+0x50>)
 800f68a:	2280      	movs	r2, #128	; 0x80
 800f68c:	05d2      	lsls	r2, r2, #23
 800f68e:	635a      	str	r2, [r3, #52]	; 0x34
    rh.mag_scale[1] = 1L<<30;
 800f690:	4b0d      	ldr	r3, [pc, #52]	; (800f6c8 <inv_init_results_holder+0x50>)
 800f692:	2280      	movs	r2, #128	; 0x80
 800f694:	05d2      	lsls	r2, r2, #23
 800f696:	639a      	str	r2, [r3, #56]	; 0x38
    rh.mag_scale[2] = 1L<<30;
 800f698:	4b0b      	ldr	r3, [pc, #44]	; (800f6c8 <inv_init_results_holder+0x50>)
 800f69a:	2280      	movs	r2, #128	; 0x80
 800f69c:	05d2      	lsls	r2, r2, #23
 800f69e:	63da      	str	r2, [r3, #60]	; 0x3c
    rh.compass_correction[0] = 1L<<30;
 800f6a0:	4b09      	ldr	r3, [pc, #36]	; (800f6c8 <inv_init_results_holder+0x50>)
 800f6a2:	2280      	movs	r2, #128	; 0x80
 800f6a4:	05d2      	lsls	r2, r2, #23
 800f6a6:	641a      	str	r2, [r3, #64]	; 0x40
    rh.gam_quat[0] = 1L<<30;
 800f6a8:	4b07      	ldr	r3, [pc, #28]	; (800f6c8 <inv_init_results_holder+0x50>)
 800f6aa:	2280      	movs	r2, #128	; 0x80
 800f6ac:	05d2      	lsls	r2, r2, #23
 800f6ae:	611a      	str	r2, [r3, #16]
    rh.nav_quat[0] = 1L<<30;
 800f6b0:	4b05      	ldr	r3, [pc, #20]	; (800f6c8 <inv_init_results_holder+0x50>)
 800f6b2:	2280      	movs	r2, #128	; 0x80
 800f6b4:	05d2      	lsls	r2, r2, #23
 800f6b6:	601a      	str	r2, [r3, #0]
    rh.quat_confidence_interval = (float)M_PI;
 800f6b8:	4b03      	ldr	r3, [pc, #12]	; (800f6c8 <inv_init_results_holder+0x50>)
 800f6ba:	2284      	movs	r2, #132	; 0x84
 800f6bc:	4903      	ldr	r1, [pc, #12]	; (800f6cc <inv_init_results_holder+0x54>)
 800f6be:	5099      	str	r1, [r3, r2]
    return INV_SUCCESS;
 800f6c0:	2300      	movs	r3, #0
}
 800f6c2:	0018      	movs	r0, r3
 800f6c4:	46bd      	mov	sp, r7
 800f6c6:	bd80      	pop	{r7, pc}
 800f6c8:	200009e4 	.word	0x200009e4
 800f6cc:	40490fdb 	.word	0x40490fdb

0800f6d0 <inv_enable_results_holder>:

/** Turns on storage of results.
*/
inv_error_t inv_enable_results_holder()
{
 800f6d0:	b580      	push	{r7, lr}
 800f6d2:	b082      	sub	sp, #8
 800f6d4:	af00      	add	r7, sp, #0
    inv_error_t result;
    result = inv_init_results_holder();
 800f6d6:	f7ff ffcf 	bl	800f678 <inv_init_results_holder>
 800f6da:	0003      	movs	r3, r0
 800f6dc:	607b      	str	r3, [r7, #4]
    if ( result ) {
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d001      	beq.n	800f6e8 <inv_enable_results_holder+0x18>
        return result;
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	e006      	b.n	800f6f6 <inv_enable_results_holder+0x26>
    }

    result = inv_register_mpl_start_notification(inv_start_results_holder);
 800f6e8:	4b05      	ldr	r3, [pc, #20]	; (800f700 <inv_enable_results_holder+0x30>)
 800f6ea:	0018      	movs	r0, r3
 800f6ec:	f000 f8a6 	bl	800f83c <inv_register_mpl_start_notification>
 800f6f0:	0003      	movs	r3, r0
 800f6f2:	607b      	str	r3, [r7, #4]
    return result;
 800f6f4:	687b      	ldr	r3, [r7, #4]
}
 800f6f6:	0018      	movs	r0, r3
 800f6f8:	46bd      	mov	sp, r7
 800f6fa:	b002      	add	sp, #8
 800f6fc:	bd80      	pop	{r7, pc}
 800f6fe:	46c0      	nop			; (mov r8, r8)
 800f700:	0800f659 	.word	0x0800f659

0800f704 <inv_got_compass_bias>:
/** Sets state of if we know the compass bias.
 * @return return 1 if we know the compass bias, 0 if not.
 *            it is set with inv_set_compass_bias_found()
 */
int inv_got_compass_bias()
{
 800f704:	b580      	push	{r7, lr}
 800f706:	af00      	add	r7, sp, #0
    return rh.got_compass_bias;
 800f708:	4b02      	ldr	r3, [pc, #8]	; (800f714 <inv_got_compass_bias+0x10>)
 800f70a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
}
 800f70c:	0018      	movs	r0, r3
 800f70e:	46bd      	mov	sp, r7
 800f710:	bd80      	pop	{r7, pc}
 800f712:	46c0      	nop			; (mov r8, r8)
 800f714:	200009e4 	.word	0x200009e4

0800f718 <inv_set_compass_bias_found>:
/** Sets whether we know the compass bias
 * @param[in] state Set to 1 if we know the compass bias. 
 *            Can be retrieved with inv_got_compass_bias()
 */
void inv_set_compass_bias_found(int state)
{
 800f718:	b580      	push	{r7, lr}
 800f71a:	b082      	sub	sp, #8
 800f71c:	af00      	add	r7, sp, #0
 800f71e:	6078      	str	r0, [r7, #4]
    rh.got_compass_bias = state;
 800f720:	4b03      	ldr	r3, [pc, #12]	; (800f730 <inv_set_compass_bias_found+0x18>)
 800f722:	687a      	ldr	r2, [r7, #4]
 800f724:	671a      	str	r2, [r3, #112]	; 0x70
}
 800f726:	46c0      	nop			; (mov r8, r8)
 800f728:	46bd      	mov	sp, r7
 800f72a:	b002      	add	sp, #8
 800f72c:	bd80      	pop	{r7, pc}
 800f72e:	46c0      	nop			; (mov r8, r8)
 800f730:	200009e4 	.word	0x200009e4

0800f734 <inv_get_linear_accel>:
 *                with gravity removed
 *  @return     INV_SUCCESS if successful
 *              INV_ERROR_INVALID_PARAMETER if invalid input pointer
 */
inv_error_t inv_get_linear_accel(long *data)
{
 800f734:	b590      	push	{r4, r7, lr}
 800f736:	b087      	sub	sp, #28
 800f738:	af00      	add	r7, sp, #0
 800f73a:	6078      	str	r0, [r7, #4]
    long gravity[3];

    if (data != NULL)
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d029      	beq.n	800f796 <inv_get_linear_accel+0x62>
    {
        inv_get_accel_set(data, NULL, NULL);
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	2200      	movs	r2, #0
 800f746:	2100      	movs	r1, #0
 800f748:	0018      	movs	r0, r3
 800f74a:	f7fb fb1d 	bl	800ad88 <inv_get_accel_set>
        inv_get_gravity(gravity);
 800f74e:	240c      	movs	r4, #12
 800f750:	193b      	adds	r3, r7, r4
 800f752:	0018      	movs	r0, r3
 800f754:	f7ff feb2 	bl	800f4bc <inv_get_gravity>
        data[0] -= gravity[0] >> 14;
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	681a      	ldr	r2, [r3, #0]
 800f75c:	0020      	movs	r0, r4
 800f75e:	183b      	adds	r3, r7, r0
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	139b      	asrs	r3, r3, #14
 800f764:	1ad2      	subs	r2, r2, r3
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	601a      	str	r2, [r3, #0]
        data[1] -= gravity[1] >> 14;
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	3304      	adds	r3, #4
 800f76e:	6819      	ldr	r1, [r3, #0]
 800f770:	183b      	adds	r3, r7, r0
 800f772:	685b      	ldr	r3, [r3, #4]
 800f774:	139a      	asrs	r2, r3, #14
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	3304      	adds	r3, #4
 800f77a:	1a8a      	subs	r2, r1, r2
 800f77c:	601a      	str	r2, [r3, #0]
        data[2] -= gravity[2] >> 14;
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	3308      	adds	r3, #8
 800f782:	6819      	ldr	r1, [r3, #0]
 800f784:	183b      	adds	r3, r7, r0
 800f786:	689b      	ldr	r3, [r3, #8]
 800f788:	139a      	asrs	r2, r3, #14
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	3308      	adds	r3, #8
 800f78e:	1a8a      	subs	r2, r1, r2
 800f790:	601a      	str	r2, [r3, #0]
        return INV_SUCCESS;
 800f792:	2300      	movs	r3, #0
 800f794:	e000      	b.n	800f798 <inv_get_linear_accel+0x64>
    }
    else {
        return INV_ERROR_INVALID_PARAMETER;
 800f796:	2316      	movs	r3, #22
    }
}
 800f798:	0018      	movs	r0, r3
 800f79a:	46bd      	mov	sp, r7
 800f79c:	b007      	add	sp, #28
 800f79e:	bd90      	pop	{r4, r7, pc}

0800f7a0 <inv_init_start_manager>:

/** Initilize the start manager. Typically called by inv_start_mpl();
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
inv_error_t inv_init_start_manager(void)
{
 800f7a0:	b580      	push	{r7, lr}
 800f7a2:	af00      	add	r7, sp, #0
    memset(&inv_start_cb, 0, sizeof(inv_start_cb));
 800f7a4:	4b04      	ldr	r3, [pc, #16]	; (800f7b8 <inv_init_start_manager+0x18>)
 800f7a6:	2254      	movs	r2, #84	; 0x54
 800f7a8:	2100      	movs	r1, #0
 800f7aa:	0018      	movs	r0, r3
 800f7ac:	f002 fbbb 	bl	8011f26 <memset>
    return INV_SUCCESS;
 800f7b0:	2300      	movs	r3, #0
}
 800f7b2:	0018      	movs	r0, r3
 800f7b4:	46bd      	mov	sp, r7
 800f7b6:	bd80      	pop	{r7, pc}
 800f7b8:	20000a6c 	.word	0x20000a6c

0800f7bc <inv_unregister_mpl_start_notification>:
/** Removes a callback from start notification
* @param[in] start_cb function to remove from start notification
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
inv_error_t inv_unregister_mpl_start_notification(inv_error_t (*start_cb)(void))
{
 800f7bc:	b580      	push	{r7, lr}
 800f7be:	b084      	sub	sp, #16
 800f7c0:	af00      	add	r7, sp, #0
 800f7c2:	6078      	str	r0, [r7, #4]
    int kk;

    for (kk=0; kk<inv_start_cb.num_cb; ++kk) {
 800f7c4:	2300      	movs	r3, #0
 800f7c6:	60fb      	str	r3, [r7, #12]
 800f7c8:	e02c      	b.n	800f824 <inv_unregister_mpl_start_notification+0x68>
        if (inv_start_cb.start_cb[kk] == start_cb) {
 800f7ca:	4a1b      	ldr	r2, [pc, #108]	; (800f838 <inv_unregister_mpl_start_notification+0x7c>)
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	009b      	lsls	r3, r3, #2
 800f7d0:	18d3      	adds	r3, r2, r3
 800f7d2:	3304      	adds	r3, #4
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	687a      	ldr	r2, [r7, #4]
 800f7d8:	429a      	cmp	r2, r3
 800f7da:	d120      	bne.n	800f81e <inv_unregister_mpl_start_notification+0x62>
            // Found the match
            if (kk != (inv_start_cb.num_cb-1)) {
 800f7dc:	4b16      	ldr	r3, [pc, #88]	; (800f838 <inv_unregister_mpl_start_notification+0x7c>)
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	3b01      	subs	r3, #1
 800f7e2:	68fa      	ldr	r2, [r7, #12]
 800f7e4:	429a      	cmp	r2, r3
 800f7e6:	d013      	beq.n	800f810 <inv_unregister_mpl_start_notification+0x54>
                memmove(&inv_start_cb.start_cb[kk],
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	009a      	lsls	r2, r3, #2
 800f7ec:	4b12      	ldr	r3, [pc, #72]	; (800f838 <inv_unregister_mpl_start_notification+0x7c>)
 800f7ee:	18d3      	adds	r3, r2, r3
 800f7f0:	1d18      	adds	r0, r3, #4
                    &inv_start_cb.start_cb[kk+1],
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	3301      	adds	r3, #1
 800f7f6:	009a      	lsls	r2, r3, #2
 800f7f8:	4b0f      	ldr	r3, [pc, #60]	; (800f838 <inv_unregister_mpl_start_notification+0x7c>)
 800f7fa:	18d3      	adds	r3, r2, r3
 800f7fc:	1d19      	adds	r1, r3, #4
                    (inv_start_cb.num_cb-kk-1)*sizeof(inv_start_cb_func));
 800f7fe:	4b0e      	ldr	r3, [pc, #56]	; (800f838 <inv_unregister_mpl_start_notification+0x7c>)
 800f800:	681a      	ldr	r2, [r3, #0]
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	1ad3      	subs	r3, r2, r3
 800f806:	3b01      	subs	r3, #1
                memmove(&inv_start_cb.start_cb[kk],
 800f808:	009b      	lsls	r3, r3, #2
 800f80a:	001a      	movs	r2, r3
 800f80c:	f002 fb78 	bl	8011f00 <memmove>
            }
            inv_start_cb.num_cb--;
 800f810:	4b09      	ldr	r3, [pc, #36]	; (800f838 <inv_unregister_mpl_start_notification+0x7c>)
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	1e5a      	subs	r2, r3, #1
 800f816:	4b08      	ldr	r3, [pc, #32]	; (800f838 <inv_unregister_mpl_start_notification+0x7c>)
 800f818:	601a      	str	r2, [r3, #0]
            return INV_SUCCESS;
 800f81a:	2300      	movs	r3, #0
 800f81c:	e008      	b.n	800f830 <inv_unregister_mpl_start_notification+0x74>
    for (kk=0; kk<inv_start_cb.num_cb; ++kk) {
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	3301      	adds	r3, #1
 800f822:	60fb      	str	r3, [r7, #12]
 800f824:	4b04      	ldr	r3, [pc, #16]	; (800f838 <inv_unregister_mpl_start_notification+0x7c>)
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	68fa      	ldr	r2, [r7, #12]
 800f82a:	429a      	cmp	r2, r3
 800f82c:	dbcd      	blt.n	800f7ca <inv_unregister_mpl_start_notification+0xe>
        }
    }
    return INV_ERROR_INVALID_PARAMETER;
 800f82e:	2316      	movs	r3, #22
}
 800f830:	0018      	movs	r0, r3
 800f832:	46bd      	mov	sp, r7
 800f834:	b004      	add	sp, #16
 800f836:	bd80      	pop	{r7, pc}
 800f838:	20000a6c 	.word	0x20000a6c

0800f83c <inv_register_mpl_start_notification>:
* @param[in] start_cb Function callback that will be called when inv_start_mpl() is
*            called.
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
inv_error_t inv_register_mpl_start_notification(inv_error_t (*start_cb)(void))
{
 800f83c:	b580      	push	{r7, lr}
 800f83e:	b082      	sub	sp, #8
 800f840:	af00      	add	r7, sp, #0
 800f842:	6078      	str	r0, [r7, #4]
    if (inv_start_cb.num_cb >= INV_MAX_START_CB)
 800f844:	4b0b      	ldr	r3, [pc, #44]	; (800f874 <inv_register_mpl_start_notification+0x38>)
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	2b13      	cmp	r3, #19
 800f84a:	dd01      	ble.n	800f850 <inv_register_mpl_start_notification+0x14>
        return INV_ERROR_INVALID_PARAMETER;
 800f84c:	2316      	movs	r3, #22
 800f84e:	e00d      	b.n	800f86c <inv_register_mpl_start_notification+0x30>

    inv_start_cb.start_cb[inv_start_cb.num_cb] = start_cb;
 800f850:	4b08      	ldr	r3, [pc, #32]	; (800f874 <inv_register_mpl_start_notification+0x38>)
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	4a07      	ldr	r2, [pc, #28]	; (800f874 <inv_register_mpl_start_notification+0x38>)
 800f856:	009b      	lsls	r3, r3, #2
 800f858:	18d3      	adds	r3, r2, r3
 800f85a:	3304      	adds	r3, #4
 800f85c:	687a      	ldr	r2, [r7, #4]
 800f85e:	601a      	str	r2, [r3, #0]
    inv_start_cb.num_cb++;
 800f860:	4b04      	ldr	r3, [pc, #16]	; (800f874 <inv_register_mpl_start_notification+0x38>)
 800f862:	681b      	ldr	r3, [r3, #0]
 800f864:	1c5a      	adds	r2, r3, #1
 800f866:	4b03      	ldr	r3, [pc, #12]	; (800f874 <inv_register_mpl_start_notification+0x38>)
 800f868:	601a      	str	r2, [r3, #0]
    return INV_SUCCESS;
 800f86a:	2300      	movs	r3, #0
}
 800f86c:	0018      	movs	r0, r3
 800f86e:	46bd      	mov	sp, r7
 800f870:	b002      	add	sp, #8
 800f872:	bd80      	pop	{r7, pc}
 800f874:	20000a6c 	.word	0x20000a6c

0800f878 <inv_execute_mpl_start_notification>:
/** Callback all the functions that want to be notified when inv_start_mpl() was
* called.
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
inv_error_t inv_execute_mpl_start_notification(void)
{
 800f878:	b580      	push	{r7, lr}
 800f87a:	b084      	sub	sp, #16
 800f87c:	af00      	add	r7, sp, #0
    inv_error_t result,first_error;
    int kk;

    first_error = INV_SUCCESS;
 800f87e:	2300      	movs	r3, #0
 800f880:	60fb      	str	r3, [r7, #12]

    for (kk = 0; kk < inv_start_cb.num_cb; ++kk) {
 800f882:	2300      	movs	r3, #0
 800f884:	60bb      	str	r3, [r7, #8]
 800f886:	e013      	b.n	800f8b0 <inv_execute_mpl_start_notification+0x38>
        result = inv_start_cb.start_cb[kk]();
 800f888:	4a0e      	ldr	r2, [pc, #56]	; (800f8c4 <inv_execute_mpl_start_notification+0x4c>)
 800f88a:	68bb      	ldr	r3, [r7, #8]
 800f88c:	009b      	lsls	r3, r3, #2
 800f88e:	18d3      	adds	r3, r2, r3
 800f890:	3304      	adds	r3, #4
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	4798      	blx	r3
 800f896:	0003      	movs	r3, r0
 800f898:	607b      	str	r3, [r7, #4]
        if (result && (first_error == INV_SUCCESS)) {
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d004      	beq.n	800f8aa <inv_execute_mpl_start_notification+0x32>
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d101      	bne.n	800f8aa <inv_execute_mpl_start_notification+0x32>
            first_error = result;
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	60fb      	str	r3, [r7, #12]
    for (kk = 0; kk < inv_start_cb.num_cb; ++kk) {
 800f8aa:	68bb      	ldr	r3, [r7, #8]
 800f8ac:	3301      	adds	r3, #1
 800f8ae:	60bb      	str	r3, [r7, #8]
 800f8b0:	4b04      	ldr	r3, [pc, #16]	; (800f8c4 <inv_execute_mpl_start_notification+0x4c>)
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	68ba      	ldr	r2, [r7, #8]
 800f8b6:	429a      	cmp	r2, r3
 800f8b8:	dbe6      	blt.n	800f888 <inv_execute_mpl_start_notification+0x10>
        }
    }
    return first_error;
 800f8ba:	68fb      	ldr	r3, [r7, #12]
}
 800f8bc:	0018      	movs	r0, r3
 800f8be:	46bd      	mov	sp, r7
 800f8c0:	b004      	add	sp, #16
 800f8c2:	bd80      	pop	{r7, pc}
 800f8c4:	20000a6c 	.word	0x20000a6c

0800f8c8 <inv_init_storage_manager>:
static struct data_storage_t ds;

/** Should be called once before using any of the storage methods. Typically
* called first by inv_init_mpl().*/
void inv_init_storage_manager()
{
 800f8c8:	b580      	push	{r7, lr}
 800f8ca:	af00      	add	r7, sp, #0
    memset(&ds, 0, sizeof(ds));
 800f8cc:	23cc      	movs	r3, #204	; 0xcc
 800f8ce:	005a      	lsls	r2, r3, #1
 800f8d0:	4b05      	ldr	r3, [pc, #20]	; (800f8e8 <inv_init_storage_manager+0x20>)
 800f8d2:	2100      	movs	r1, #0
 800f8d4:	0018      	movs	r0, r3
 800f8d6:	f002 fb26 	bl	8011f26 <memset>
    ds.total_size = sizeof(struct data_header_t);
 800f8da:	4b03      	ldr	r3, [pc, #12]	; (800f8e8 <inv_init_storage_manager+0x20>)
 800f8dc:	220c      	movs	r2, #12
 800f8de:	605a      	str	r2, [r3, #4]
}
 800f8e0:	46c0      	nop			; (mov r8, r8)
 800f8e2:	46bd      	mov	sp, r7
 800f8e4:	bd80      	pop	{r7, pc}
 800f8e6:	46c0      	nop			; (mov r8, r8)
 800f8e8:	20000ac0 	.word	0x20000ac0

0800f8ec <inv_register_load_store>:
*                    The key should change when your type of data for storage changes.
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
inv_error_t inv_register_load_store(inv_error_t (*load_func)(const unsigned char *data),
                                    inv_error_t (*save_func)(unsigned char *data), size_t size, unsigned int key)
{
 800f8ec:	b590      	push	{r4, r7, lr}
 800f8ee:	b087      	sub	sp, #28
 800f8f0:	af00      	add	r7, sp, #0
 800f8f2:	60f8      	str	r0, [r7, #12]
 800f8f4:	60b9      	str	r1, [r7, #8]
 800f8f6:	607a      	str	r2, [r7, #4]
 800f8f8:	603b      	str	r3, [r7, #0]
    int kk;
    // Check if this has been registered already
    for (kk=0; kk<ds.num; ++kk) {
 800f8fa:	2300      	movs	r3, #0
 800f8fc:	617b      	str	r3, [r7, #20]
 800f8fe:	e011      	b.n	800f924 <inv_register_load_store+0x38>
        if (key == ds.hd[kk].key) {
 800f900:	492a      	ldr	r1, [pc, #168]	; (800f9ac <inv_register_load_store+0xc0>)
 800f902:	697a      	ldr	r2, [r7, #20]
 800f904:	20b0      	movs	r0, #176	; 0xb0
 800f906:	0013      	movs	r3, r2
 800f908:	005b      	lsls	r3, r3, #1
 800f90a:	189b      	adds	r3, r3, r2
 800f90c:	009b      	lsls	r3, r3, #2
 800f90e:	18cb      	adds	r3, r1, r3
 800f910:	181b      	adds	r3, r3, r0
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	683a      	ldr	r2, [r7, #0]
 800f916:	429a      	cmp	r2, r3
 800f918:	d101      	bne.n	800f91e <inv_register_load_store+0x32>
            return INV_ERROR_INVALID_PARAMETER;
 800f91a:	2316      	movs	r3, #22
 800f91c:	e041      	b.n	800f9a2 <inv_register_load_store+0xb6>
    for (kk=0; kk<ds.num; ++kk) {
 800f91e:	697b      	ldr	r3, [r7, #20]
 800f920:	3301      	adds	r3, #1
 800f922:	617b      	str	r3, [r7, #20]
 800f924:	4b21      	ldr	r3, [pc, #132]	; (800f9ac <inv_register_load_store+0xc0>)
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	697a      	ldr	r2, [r7, #20]
 800f92a:	429a      	cmp	r2, r3
 800f92c:	dbe8      	blt.n	800f900 <inv_register_load_store+0x14>
        }
    }
    // Make sure there is room
    if (ds.num >= NUM_STORAGE_BOXES) {
 800f92e:	4b1f      	ldr	r3, [pc, #124]	; (800f9ac <inv_register_load_store+0xc0>)
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	2b13      	cmp	r3, #19
 800f934:	dd01      	ble.n	800f93a <inv_register_load_store+0x4e>
        return INV_ERROR_INVALID_PARAMETER;
 800f936:	2316      	movs	r3, #22
 800f938:	e033      	b.n	800f9a2 <inv_register_load_store+0xb6>
    }
    // Add to list
    ds.hd[ds.num].key = key;
 800f93a:	4b1c      	ldr	r3, [pc, #112]	; (800f9ac <inv_register_load_store+0xc0>)
 800f93c:	681a      	ldr	r2, [r3, #0]
 800f93e:	491b      	ldr	r1, [pc, #108]	; (800f9ac <inv_register_load_store+0xc0>)
 800f940:	20b0      	movs	r0, #176	; 0xb0
 800f942:	0013      	movs	r3, r2
 800f944:	005b      	lsls	r3, r3, #1
 800f946:	189b      	adds	r3, r3, r2
 800f948:	009b      	lsls	r3, r3, #2
 800f94a:	18cb      	adds	r3, r1, r3
 800f94c:	181b      	adds	r3, r3, r0
 800f94e:	683a      	ldr	r2, [r7, #0]
 800f950:	601a      	str	r2, [r3, #0]
    ds.hd[ds.num].size = size;
 800f952:	4b16      	ldr	r3, [pc, #88]	; (800f9ac <inv_register_load_store+0xc0>)
 800f954:	681a      	ldr	r2, [r3, #0]
 800f956:	6879      	ldr	r1, [r7, #4]
 800f958:	4814      	ldr	r0, [pc, #80]	; (800f9ac <inv_register_load_store+0xc0>)
 800f95a:	24a8      	movs	r4, #168	; 0xa8
 800f95c:	0013      	movs	r3, r2
 800f95e:	005b      	lsls	r3, r3, #1
 800f960:	189b      	adds	r3, r3, r2
 800f962:	009b      	lsls	r3, r3, #2
 800f964:	18c3      	adds	r3, r0, r3
 800f966:	191b      	adds	r3, r3, r4
 800f968:	6019      	str	r1, [r3, #0]
    ds.load[ds.num] = load_func;
 800f96a:	4b10      	ldr	r3, [pc, #64]	; (800f9ac <inv_register_load_store+0xc0>)
 800f96c:	681a      	ldr	r2, [r3, #0]
 800f96e:	4b0f      	ldr	r3, [pc, #60]	; (800f9ac <inv_register_load_store+0xc0>)
 800f970:	3202      	adds	r2, #2
 800f972:	0092      	lsls	r2, r2, #2
 800f974:	68f9      	ldr	r1, [r7, #12]
 800f976:	50d1      	str	r1, [r2, r3]
    ds.save[ds.num] = save_func;
 800f978:	4b0c      	ldr	r3, [pc, #48]	; (800f9ac <inv_register_load_store+0xc0>)
 800f97a:	681a      	ldr	r2, [r3, #0]
 800f97c:	4b0b      	ldr	r3, [pc, #44]	; (800f9ac <inv_register_load_store+0xc0>)
 800f97e:	3216      	adds	r2, #22
 800f980:	0092      	lsls	r2, r2, #2
 800f982:	68b9      	ldr	r1, [r7, #8]
 800f984:	50d1      	str	r1, [r2, r3]
    ds.total_size += size + sizeof(struct data_header_t);
 800f986:	4b09      	ldr	r3, [pc, #36]	; (800f9ac <inv_register_load_store+0xc0>)
 800f988:	685a      	ldr	r2, [r3, #4]
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	18d3      	adds	r3, r2, r3
 800f98e:	330c      	adds	r3, #12
 800f990:	001a      	movs	r2, r3
 800f992:	4b06      	ldr	r3, [pc, #24]	; (800f9ac <inv_register_load_store+0xc0>)
 800f994:	605a      	str	r2, [r3, #4]
    ds.num++;
 800f996:	4b05      	ldr	r3, [pc, #20]	; (800f9ac <inv_register_load_store+0xc0>)
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	1c5a      	adds	r2, r3, #1
 800f99c:	4b03      	ldr	r3, [pc, #12]	; (800f9ac <inv_register_load_store+0xc0>)
 800f99e:	601a      	str	r2, [r3, #0]

    return INV_SUCCESS;
 800f9a0:	2300      	movs	r3, #0
}
 800f9a2:	0018      	movs	r0, r3
 800f9a4:	46bd      	mov	sp, r7
 800f9a6:	b007      	add	sp, #28
 800f9a8:	bd90      	pop	{r4, r7, pc}
 800f9aa:	46c0      	nop			; (mov r8, r8)
 800f9ac:	20000ac0 	.word	0x20000ac0

0800f9b0 <acosf>:
 800f9b0:	b570      	push	{r4, r5, r6, lr}
 800f9b2:	1c05      	adds	r5, r0, #0
 800f9b4:	f000 fa22 	bl	800fdfc <__ieee754_acosf>
 800f9b8:	1c29      	adds	r1, r5, #0
 800f9ba:	1c04      	adds	r4, r0, #0
 800f9bc:	1c28      	adds	r0, r5, #0
 800f9be:	f7f4 fd0f 	bl	80043e0 <__aeabi_fcmpun>
 800f9c2:	2800      	cmp	r0, #0
 800f9c4:	d110      	bne.n	800f9e8 <acosf+0x38>
 800f9c6:	1c28      	adds	r0, r5, #0
 800f9c8:	f000 f866 	bl	800fa98 <fabsf>
 800f9cc:	21fe      	movs	r1, #254	; 0xfe
 800f9ce:	0589      	lsls	r1, r1, #22
 800f9d0:	f7f3 fd36 	bl	8003440 <__aeabi_fcmpgt>
 800f9d4:	2800      	cmp	r0, #0
 800f9d6:	d007      	beq.n	800f9e8 <acosf+0x38>
 800f9d8:	f002 fb00 	bl	8011fdc <__errno>
 800f9dc:	2321      	movs	r3, #33	; 0x21
 800f9de:	6003      	str	r3, [r0, #0]
 800f9e0:	4802      	ldr	r0, [pc, #8]	; (800f9ec <acosf+0x3c>)
 800f9e2:	f000 f89b 	bl	800fb1c <nanf>
 800f9e6:	1c04      	adds	r4, r0, #0
 800f9e8:	1c20      	adds	r0, r4, #0
 800f9ea:	bd70      	pop	{r4, r5, r6, pc}
 800f9ec:	08016ee5 	.word	0x08016ee5

0800f9f0 <atan2f>:
 800f9f0:	b510      	push	{r4, lr}
 800f9f2:	f000 fb65 	bl	80100c0 <__ieee754_atan2f>
 800f9f6:	bd10      	pop	{r4, pc}

0800f9f8 <sqrtf>:
 800f9f8:	b570      	push	{r4, r5, r6, lr}
 800f9fa:	1c05      	adds	r5, r0, #0
 800f9fc:	f000 f892 	bl	800fb24 <__ieee754_sqrtf>
 800fa00:	1c29      	adds	r1, r5, #0
 800fa02:	1c04      	adds	r4, r0, #0
 800fa04:	1c28      	adds	r0, r5, #0
 800fa06:	f7f4 fceb 	bl	80043e0 <__aeabi_fcmpun>
 800fa0a:	2800      	cmp	r0, #0
 800fa0c:	d10e      	bne.n	800fa2c <sqrtf+0x34>
 800fa0e:	2100      	movs	r1, #0
 800fa10:	1c28      	adds	r0, r5, #0
 800fa12:	f7f3 fd01 	bl	8003418 <__aeabi_fcmplt>
 800fa16:	2800      	cmp	r0, #0
 800fa18:	d008      	beq.n	800fa2c <sqrtf+0x34>
 800fa1a:	f002 fadf 	bl	8011fdc <__errno>
 800fa1e:	2321      	movs	r3, #33	; 0x21
 800fa20:	2100      	movs	r1, #0
 800fa22:	6003      	str	r3, [r0, #0]
 800fa24:	1c08      	adds	r0, r1, #0
 800fa26:	f7f4 f823 	bl	8003a70 <__aeabi_fdiv>
 800fa2a:	1c04      	adds	r4, r0, #0
 800fa2c:	1c20      	adds	r0, r4, #0
 800fa2e:	bd70      	pop	{r4, r5, r6, pc}

0800fa30 <cosf>:
 800fa30:	b507      	push	{r0, r1, r2, lr}
 800fa32:	4a18      	ldr	r2, [pc, #96]	; (800fa94 <cosf+0x64>)
 800fa34:	0043      	lsls	r3, r0, #1
 800fa36:	2100      	movs	r1, #0
 800fa38:	085b      	lsrs	r3, r3, #1
 800fa3a:	4293      	cmp	r3, r2
 800fa3c:	dd14      	ble.n	800fa68 <cosf+0x38>
 800fa3e:	22ff      	movs	r2, #255	; 0xff
 800fa40:	05d2      	lsls	r2, r2, #23
 800fa42:	4293      	cmp	r3, r2
 800fa44:	db03      	blt.n	800fa4e <cosf+0x1e>
 800fa46:	1c01      	adds	r1, r0, #0
 800fa48:	f7f4 fb2a 	bl	80040a0 <__aeabi_fsub>
 800fa4c:	bd0e      	pop	{r1, r2, r3, pc}
 800fa4e:	4669      	mov	r1, sp
 800fa50:	f000 fbb0 	bl	80101b4 <__ieee754_rem_pio2f>
 800fa54:	2203      	movs	r2, #3
 800fa56:	4002      	ands	r2, r0
 800fa58:	2a01      	cmp	r2, #1
 800fa5a:	d008      	beq.n	800fa6e <cosf+0x3e>
 800fa5c:	2a02      	cmp	r2, #2
 800fa5e:	d00e      	beq.n	800fa7e <cosf+0x4e>
 800fa60:	2a00      	cmp	r2, #0
 800fa62:	d111      	bne.n	800fa88 <cosf+0x58>
 800fa64:	9901      	ldr	r1, [sp, #4]
 800fa66:	9800      	ldr	r0, [sp, #0]
 800fa68:	f000 f8d4 	bl	800fc14 <__kernel_cosf>
 800fa6c:	e7ee      	b.n	800fa4c <cosf+0x1c>
 800fa6e:	9901      	ldr	r1, [sp, #4]
 800fa70:	9800      	ldr	r0, [sp, #0]
 800fa72:	f000 f94f 	bl	800fd14 <__kernel_sinf>
 800fa76:	2380      	movs	r3, #128	; 0x80
 800fa78:	061b      	lsls	r3, r3, #24
 800fa7a:	18c0      	adds	r0, r0, r3
 800fa7c:	e7e6      	b.n	800fa4c <cosf+0x1c>
 800fa7e:	9901      	ldr	r1, [sp, #4]
 800fa80:	9800      	ldr	r0, [sp, #0]
 800fa82:	f000 f8c7 	bl	800fc14 <__kernel_cosf>
 800fa86:	e7f6      	b.n	800fa76 <cosf+0x46>
 800fa88:	2201      	movs	r2, #1
 800fa8a:	9901      	ldr	r1, [sp, #4]
 800fa8c:	9800      	ldr	r0, [sp, #0]
 800fa8e:	f000 f941 	bl	800fd14 <__kernel_sinf>
 800fa92:	e7db      	b.n	800fa4c <cosf+0x1c>
 800fa94:	3f490fd8 	.word	0x3f490fd8

0800fa98 <fabsf>:
 800fa98:	0040      	lsls	r0, r0, #1
 800fa9a:	0840      	lsrs	r0, r0, #1
 800fa9c:	4770      	bx	lr
	...

0800faa0 <sinf>:
 800faa0:	b507      	push	{r0, r1, r2, lr}
 800faa2:	4a1a      	ldr	r2, [pc, #104]	; (800fb0c <sinf+0x6c>)
 800faa4:	0043      	lsls	r3, r0, #1
 800faa6:	085b      	lsrs	r3, r3, #1
 800faa8:	4293      	cmp	r3, r2
 800faaa:	dc04      	bgt.n	800fab6 <sinf+0x16>
 800faac:	2200      	movs	r2, #0
 800faae:	2100      	movs	r1, #0
 800fab0:	f000 f930 	bl	800fd14 <__kernel_sinf>
 800fab4:	e006      	b.n	800fac4 <sinf+0x24>
 800fab6:	22ff      	movs	r2, #255	; 0xff
 800fab8:	05d2      	lsls	r2, r2, #23
 800faba:	4293      	cmp	r3, r2
 800fabc:	db03      	blt.n	800fac6 <sinf+0x26>
 800fabe:	1c01      	adds	r1, r0, #0
 800fac0:	f7f4 faee 	bl	80040a0 <__aeabi_fsub>
 800fac4:	bd0e      	pop	{r1, r2, r3, pc}
 800fac6:	4669      	mov	r1, sp
 800fac8:	f000 fb74 	bl	80101b4 <__ieee754_rem_pio2f>
 800facc:	2303      	movs	r3, #3
 800face:	4018      	ands	r0, r3
 800fad0:	2801      	cmp	r0, #1
 800fad2:	d007      	beq.n	800fae4 <sinf+0x44>
 800fad4:	2802      	cmp	r0, #2
 800fad6:	d00a      	beq.n	800faee <sinf+0x4e>
 800fad8:	2800      	cmp	r0, #0
 800fada:	d111      	bne.n	800fb00 <sinf+0x60>
 800fadc:	2201      	movs	r2, #1
 800fade:	9901      	ldr	r1, [sp, #4]
 800fae0:	9800      	ldr	r0, [sp, #0]
 800fae2:	e7e5      	b.n	800fab0 <sinf+0x10>
 800fae4:	9901      	ldr	r1, [sp, #4]
 800fae6:	9800      	ldr	r0, [sp, #0]
 800fae8:	f000 f894 	bl	800fc14 <__kernel_cosf>
 800faec:	e7ea      	b.n	800fac4 <sinf+0x24>
 800faee:	2201      	movs	r2, #1
 800faf0:	9901      	ldr	r1, [sp, #4]
 800faf2:	9800      	ldr	r0, [sp, #0]
 800faf4:	f000 f90e 	bl	800fd14 <__kernel_sinf>
 800faf8:	2380      	movs	r3, #128	; 0x80
 800fafa:	061b      	lsls	r3, r3, #24
 800fafc:	18c0      	adds	r0, r0, r3
 800fafe:	e7e1      	b.n	800fac4 <sinf+0x24>
 800fb00:	9901      	ldr	r1, [sp, #4]
 800fb02:	9800      	ldr	r0, [sp, #0]
 800fb04:	f000 f886 	bl	800fc14 <__kernel_cosf>
 800fb08:	e7f6      	b.n	800faf8 <sinf+0x58>
 800fb0a:	46c0      	nop			; (mov r8, r8)
 800fb0c:	3f490fd8 	.word	0x3f490fd8

0800fb10 <nan>:
 800fb10:	2000      	movs	r0, #0
 800fb12:	4901      	ldr	r1, [pc, #4]	; (800fb18 <nan+0x8>)
 800fb14:	4770      	bx	lr
 800fb16:	46c0      	nop			; (mov r8, r8)
 800fb18:	7ff80000 	.word	0x7ff80000

0800fb1c <nanf>:
 800fb1c:	4800      	ldr	r0, [pc, #0]	; (800fb20 <nanf+0x4>)
 800fb1e:	4770      	bx	lr
 800fb20:	7fc00000 	.word	0x7fc00000

0800fb24 <__ieee754_sqrtf>:
 800fb24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fb26:	0003      	movs	r3, r0
 800fb28:	0042      	lsls	r2, r0, #1
 800fb2a:	1c04      	adds	r4, r0, #0
 800fb2c:	20ff      	movs	r0, #255	; 0xff
 800fb2e:	0852      	lsrs	r2, r2, #1
 800fb30:	05c0      	lsls	r0, r0, #23
 800fb32:	4282      	cmp	r2, r0
 800fb34:	d30a      	bcc.n	800fb4c <__ieee754_sqrtf+0x28>
 800fb36:	1c21      	adds	r1, r4, #0
 800fb38:	1c20      	adds	r0, r4, #0
 800fb3a:	f7f4 f963 	bl	8003e04 <__aeabi_fmul>
 800fb3e:	1c01      	adds	r1, r0, #0
 800fb40:	1c20      	adds	r0, r4, #0
 800fb42:	f7f3 fdf5 	bl	8003730 <__aeabi_fadd>
 800fb46:	1c04      	adds	r4, r0, #0
 800fb48:	1c20      	adds	r0, r4, #0
 800fb4a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800fb4c:	2a00      	cmp	r2, #0
 800fb4e:	d0fb      	beq.n	800fb48 <__ieee754_sqrtf+0x24>
 800fb50:	2c00      	cmp	r4, #0
 800fb52:	da07      	bge.n	800fb64 <__ieee754_sqrtf+0x40>
 800fb54:	1c21      	adds	r1, r4, #0
 800fb56:	1c20      	adds	r0, r4, #0
 800fb58:	f7f4 faa2 	bl	80040a0 <__aeabi_fsub>
 800fb5c:	1c01      	adds	r1, r0, #0
 800fb5e:	f7f3 ff87 	bl	8003a70 <__aeabi_fdiv>
 800fb62:	e7f0      	b.n	800fb46 <__ieee754_sqrtf+0x22>
 800fb64:	0022      	movs	r2, r4
 800fb66:	15e1      	asrs	r1, r4, #23
 800fb68:	4002      	ands	r2, r0
 800fb6a:	4204      	tst	r4, r0
 800fb6c:	d047      	beq.n	800fbfe <__ieee754_sqrtf+0xda>
 800fb6e:	2280      	movs	r2, #128	; 0x80
 800fb70:	0008      	movs	r0, r1
 800fb72:	025b      	lsls	r3, r3, #9
 800fb74:	0a5b      	lsrs	r3, r3, #9
 800fb76:	0412      	lsls	r2, r2, #16
 800fb78:	387f      	subs	r0, #127	; 0x7f
 800fb7a:	4313      	orrs	r3, r2
 800fb7c:	07c9      	lsls	r1, r1, #31
 800fb7e:	d400      	bmi.n	800fb82 <__ieee754_sqrtf+0x5e>
 800fb80:	005b      	lsls	r3, r3, #1
 800fb82:	2400      	movs	r4, #0
 800fb84:	2180      	movs	r1, #128	; 0x80
 800fb86:	1042      	asrs	r2, r0, #1
 800fb88:	0026      	movs	r6, r4
 800fb8a:	2019      	movs	r0, #25
 800fb8c:	9201      	str	r2, [sp, #4]
 800fb8e:	005b      	lsls	r3, r3, #1
 800fb90:	0449      	lsls	r1, r1, #17
 800fb92:	1875      	adds	r5, r6, r1
 800fb94:	001a      	movs	r2, r3
 800fb96:	429d      	cmp	r5, r3
 800fb98:	dc02      	bgt.n	800fba0 <__ieee754_sqrtf+0x7c>
 800fb9a:	186e      	adds	r6, r5, r1
 800fb9c:	1b5a      	subs	r2, r3, r5
 800fb9e:	1864      	adds	r4, r4, r1
 800fba0:	3801      	subs	r0, #1
 800fba2:	0053      	lsls	r3, r2, #1
 800fba4:	0849      	lsrs	r1, r1, #1
 800fba6:	2800      	cmp	r0, #0
 800fba8:	d1f3      	bne.n	800fb92 <__ieee754_sqrtf+0x6e>
 800fbaa:	2a00      	cmp	r2, #0
 800fbac:	d018      	beq.n	800fbe0 <__ieee754_sqrtf+0xbc>
 800fbae:	4d17      	ldr	r5, [pc, #92]	; (800fc0c <__ieee754_sqrtf+0xe8>)
 800fbb0:	4e17      	ldr	r6, [pc, #92]	; (800fc10 <__ieee754_sqrtf+0xec>)
 800fbb2:	6828      	ldr	r0, [r5, #0]
 800fbb4:	6831      	ldr	r1, [r6, #0]
 800fbb6:	f7f4 fa73 	bl	80040a0 <__aeabi_fsub>
 800fbba:	682f      	ldr	r7, [r5, #0]
 800fbbc:	1c01      	adds	r1, r0, #0
 800fbbe:	1c38      	adds	r0, r7, #0
 800fbc0:	f7f3 fc34 	bl	800342c <__aeabi_fcmple>
 800fbc4:	2800      	cmp	r0, #0
 800fbc6:	d00b      	beq.n	800fbe0 <__ieee754_sqrtf+0xbc>
 800fbc8:	6828      	ldr	r0, [r5, #0]
 800fbca:	6831      	ldr	r1, [r6, #0]
 800fbcc:	f7f3 fdb0 	bl	8003730 <__aeabi_fadd>
 800fbd0:	682d      	ldr	r5, [r5, #0]
 800fbd2:	1c01      	adds	r1, r0, #0
 800fbd4:	1c28      	adds	r0, r5, #0
 800fbd6:	f7f3 fc1f 	bl	8003418 <__aeabi_fcmplt>
 800fbda:	2800      	cmp	r0, #0
 800fbdc:	d012      	beq.n	800fc04 <__ieee754_sqrtf+0xe0>
 800fbde:	3402      	adds	r4, #2
 800fbe0:	22fc      	movs	r2, #252	; 0xfc
 800fbe2:	1063      	asrs	r3, r4, #1
 800fbe4:	0592      	lsls	r2, r2, #22
 800fbe6:	189b      	adds	r3, r3, r2
 800fbe8:	9a01      	ldr	r2, [sp, #4]
 800fbea:	05d4      	lsls	r4, r2, #23
 800fbec:	18e4      	adds	r4, r4, r3
 800fbee:	e7ab      	b.n	800fb48 <__ieee754_sqrtf+0x24>
 800fbf0:	005b      	lsls	r3, r3, #1
 800fbf2:	3201      	adds	r2, #1
 800fbf4:	4203      	tst	r3, r0
 800fbf6:	d0fb      	beq.n	800fbf0 <__ieee754_sqrtf+0xcc>
 800fbf8:	3a01      	subs	r2, #1
 800fbfa:	1a89      	subs	r1, r1, r2
 800fbfc:	e7b7      	b.n	800fb6e <__ieee754_sqrtf+0x4a>
 800fbfe:	2080      	movs	r0, #128	; 0x80
 800fc00:	0400      	lsls	r0, r0, #16
 800fc02:	e7f7      	b.n	800fbf4 <__ieee754_sqrtf+0xd0>
 800fc04:	2301      	movs	r3, #1
 800fc06:	3401      	adds	r4, #1
 800fc08:	439c      	bics	r4, r3
 800fc0a:	e7e9      	b.n	800fbe0 <__ieee754_sqrtf+0xbc>
 800fc0c:	20000058 	.word	0x20000058
 800fc10:	2000005c 	.word	0x2000005c

0800fc14 <__kernel_cosf>:
 800fc14:	23c8      	movs	r3, #200	; 0xc8
 800fc16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fc18:	0044      	lsls	r4, r0, #1
 800fc1a:	1c06      	adds	r6, r0, #0
 800fc1c:	9101      	str	r1, [sp, #4]
 800fc1e:	0864      	lsrs	r4, r4, #1
 800fc20:	059b      	lsls	r3, r3, #22
 800fc22:	429c      	cmp	r4, r3
 800fc24:	da03      	bge.n	800fc2e <__kernel_cosf+0x1a>
 800fc26:	f7f4 fbf1 	bl	800440c <__aeabi_f2iz>
 800fc2a:	2800      	cmp	r0, #0
 800fc2c:	d05d      	beq.n	800fcea <__kernel_cosf+0xd6>
 800fc2e:	1c31      	adds	r1, r6, #0
 800fc30:	1c30      	adds	r0, r6, #0
 800fc32:	f7f4 f8e7 	bl	8003e04 <__aeabi_fmul>
 800fc36:	21fc      	movs	r1, #252	; 0xfc
 800fc38:	0589      	lsls	r1, r1, #22
 800fc3a:	1c05      	adds	r5, r0, #0
 800fc3c:	f7f4 f8e2 	bl	8003e04 <__aeabi_fmul>
 800fc40:	492b      	ldr	r1, [pc, #172]	; (800fcf0 <__kernel_cosf+0xdc>)
 800fc42:	1c07      	adds	r7, r0, #0
 800fc44:	1c28      	adds	r0, r5, #0
 800fc46:	f7f4 f8dd 	bl	8003e04 <__aeabi_fmul>
 800fc4a:	492a      	ldr	r1, [pc, #168]	; (800fcf4 <__kernel_cosf+0xe0>)
 800fc4c:	f7f3 fd70 	bl	8003730 <__aeabi_fadd>
 800fc50:	1c29      	adds	r1, r5, #0
 800fc52:	f7f4 f8d7 	bl	8003e04 <__aeabi_fmul>
 800fc56:	4928      	ldr	r1, [pc, #160]	; (800fcf8 <__kernel_cosf+0xe4>)
 800fc58:	f7f4 fa22 	bl	80040a0 <__aeabi_fsub>
 800fc5c:	1c29      	adds	r1, r5, #0
 800fc5e:	f7f4 f8d1 	bl	8003e04 <__aeabi_fmul>
 800fc62:	4926      	ldr	r1, [pc, #152]	; (800fcfc <__kernel_cosf+0xe8>)
 800fc64:	f7f3 fd64 	bl	8003730 <__aeabi_fadd>
 800fc68:	1c29      	adds	r1, r5, #0
 800fc6a:	f7f4 f8cb 	bl	8003e04 <__aeabi_fmul>
 800fc6e:	4924      	ldr	r1, [pc, #144]	; (800fd00 <__kernel_cosf+0xec>)
 800fc70:	f7f4 fa16 	bl	80040a0 <__aeabi_fsub>
 800fc74:	1c29      	adds	r1, r5, #0
 800fc76:	f7f4 f8c5 	bl	8003e04 <__aeabi_fmul>
 800fc7a:	4922      	ldr	r1, [pc, #136]	; (800fd04 <__kernel_cosf+0xf0>)
 800fc7c:	f7f3 fd58 	bl	8003730 <__aeabi_fadd>
 800fc80:	1c29      	adds	r1, r5, #0
 800fc82:	f7f4 f8bf 	bl	8003e04 <__aeabi_fmul>
 800fc86:	1c29      	adds	r1, r5, #0
 800fc88:	f7f4 f8bc 	bl	8003e04 <__aeabi_fmul>
 800fc8c:	9901      	ldr	r1, [sp, #4]
 800fc8e:	1c05      	adds	r5, r0, #0
 800fc90:	1c30      	adds	r0, r6, #0
 800fc92:	f7f4 f8b7 	bl	8003e04 <__aeabi_fmul>
 800fc96:	1c01      	adds	r1, r0, #0
 800fc98:	1c28      	adds	r0, r5, #0
 800fc9a:	f7f4 fa01 	bl	80040a0 <__aeabi_fsub>
 800fc9e:	4b1a      	ldr	r3, [pc, #104]	; (800fd08 <__kernel_cosf+0xf4>)
 800fca0:	1c05      	adds	r5, r0, #0
 800fca2:	429c      	cmp	r4, r3
 800fca4:	dc09      	bgt.n	800fcba <__kernel_cosf+0xa6>
 800fca6:	1c01      	adds	r1, r0, #0
 800fca8:	1c38      	adds	r0, r7, #0
 800fcaa:	f7f4 f9f9 	bl	80040a0 <__aeabi_fsub>
 800fcae:	1c01      	adds	r1, r0, #0
 800fcb0:	20fe      	movs	r0, #254	; 0xfe
 800fcb2:	0580      	lsls	r0, r0, #22
 800fcb4:	f7f4 f9f4 	bl	80040a0 <__aeabi_fsub>
 800fcb8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800fcba:	4b14      	ldr	r3, [pc, #80]	; (800fd0c <__kernel_cosf+0xf8>)
 800fcbc:	429c      	cmp	r4, r3
 800fcbe:	dc12      	bgt.n	800fce6 <__kernel_cosf+0xd2>
 800fcc0:	23ff      	movs	r3, #255	; 0xff
 800fcc2:	061b      	lsls	r3, r3, #24
 800fcc4:	18e4      	adds	r4, r4, r3
 800fcc6:	20fe      	movs	r0, #254	; 0xfe
 800fcc8:	1c21      	adds	r1, r4, #0
 800fcca:	0580      	lsls	r0, r0, #22
 800fccc:	f7f4 f9e8 	bl	80040a0 <__aeabi_fsub>
 800fcd0:	1c21      	adds	r1, r4, #0
 800fcd2:	1c06      	adds	r6, r0, #0
 800fcd4:	1c38      	adds	r0, r7, #0
 800fcd6:	f7f4 f9e3 	bl	80040a0 <__aeabi_fsub>
 800fcda:	1c29      	adds	r1, r5, #0
 800fcdc:	f7f4 f9e0 	bl	80040a0 <__aeabi_fsub>
 800fce0:	1c01      	adds	r1, r0, #0
 800fce2:	1c30      	adds	r0, r6, #0
 800fce4:	e7e6      	b.n	800fcb4 <__kernel_cosf+0xa0>
 800fce6:	4c0a      	ldr	r4, [pc, #40]	; (800fd10 <__kernel_cosf+0xfc>)
 800fce8:	e7ed      	b.n	800fcc6 <__kernel_cosf+0xb2>
 800fcea:	20fe      	movs	r0, #254	; 0xfe
 800fcec:	0580      	lsls	r0, r0, #22
 800fcee:	e7e3      	b.n	800fcb8 <__kernel_cosf+0xa4>
 800fcf0:	ad47d74e 	.word	0xad47d74e
 800fcf4:	310f74f6 	.word	0x310f74f6
 800fcf8:	3493f27c 	.word	0x3493f27c
 800fcfc:	37d00d01 	.word	0x37d00d01
 800fd00:	3ab60b61 	.word	0x3ab60b61
 800fd04:	3d2aaaab 	.word	0x3d2aaaab
 800fd08:	3e999999 	.word	0x3e999999
 800fd0c:	3f480000 	.word	0x3f480000
 800fd10:	3e900000 	.word	0x3e900000

0800fd14 <__kernel_sinf>:
 800fd14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fd16:	9201      	str	r2, [sp, #4]
 800fd18:	22c8      	movs	r2, #200	; 0xc8
 800fd1a:	0043      	lsls	r3, r0, #1
 800fd1c:	1c04      	adds	r4, r0, #0
 800fd1e:	9100      	str	r1, [sp, #0]
 800fd20:	085b      	lsrs	r3, r3, #1
 800fd22:	0592      	lsls	r2, r2, #22
 800fd24:	4293      	cmp	r3, r2
 800fd26:	da03      	bge.n	800fd30 <__kernel_sinf+0x1c>
 800fd28:	f7f4 fb70 	bl	800440c <__aeabi_f2iz>
 800fd2c:	2800      	cmp	r0, #0
 800fd2e:	d035      	beq.n	800fd9c <__kernel_sinf+0x88>
 800fd30:	1c21      	adds	r1, r4, #0
 800fd32:	1c20      	adds	r0, r4, #0
 800fd34:	f7f4 f866 	bl	8003e04 <__aeabi_fmul>
 800fd38:	1c05      	adds	r5, r0, #0
 800fd3a:	1c01      	adds	r1, r0, #0
 800fd3c:	1c20      	adds	r0, r4, #0
 800fd3e:	f7f4 f861 	bl	8003e04 <__aeabi_fmul>
 800fd42:	4928      	ldr	r1, [pc, #160]	; (800fde4 <__kernel_sinf+0xd0>)
 800fd44:	1c06      	adds	r6, r0, #0
 800fd46:	1c28      	adds	r0, r5, #0
 800fd48:	f7f4 f85c 	bl	8003e04 <__aeabi_fmul>
 800fd4c:	4926      	ldr	r1, [pc, #152]	; (800fde8 <__kernel_sinf+0xd4>)
 800fd4e:	f7f4 f9a7 	bl	80040a0 <__aeabi_fsub>
 800fd52:	1c29      	adds	r1, r5, #0
 800fd54:	f7f4 f856 	bl	8003e04 <__aeabi_fmul>
 800fd58:	4924      	ldr	r1, [pc, #144]	; (800fdec <__kernel_sinf+0xd8>)
 800fd5a:	f7f3 fce9 	bl	8003730 <__aeabi_fadd>
 800fd5e:	1c29      	adds	r1, r5, #0
 800fd60:	f7f4 f850 	bl	8003e04 <__aeabi_fmul>
 800fd64:	4922      	ldr	r1, [pc, #136]	; (800fdf0 <__kernel_sinf+0xdc>)
 800fd66:	f7f4 f99b 	bl	80040a0 <__aeabi_fsub>
 800fd6a:	1c29      	adds	r1, r5, #0
 800fd6c:	f7f4 f84a 	bl	8003e04 <__aeabi_fmul>
 800fd70:	4920      	ldr	r1, [pc, #128]	; (800fdf4 <__kernel_sinf+0xe0>)
 800fd72:	f7f3 fcdd 	bl	8003730 <__aeabi_fadd>
 800fd76:	9b01      	ldr	r3, [sp, #4]
 800fd78:	1c07      	adds	r7, r0, #0
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d110      	bne.n	800fda0 <__kernel_sinf+0x8c>
 800fd7e:	1c01      	adds	r1, r0, #0
 800fd80:	1c28      	adds	r0, r5, #0
 800fd82:	f7f4 f83f 	bl	8003e04 <__aeabi_fmul>
 800fd86:	491c      	ldr	r1, [pc, #112]	; (800fdf8 <__kernel_sinf+0xe4>)
 800fd88:	f7f4 f98a 	bl	80040a0 <__aeabi_fsub>
 800fd8c:	1c31      	adds	r1, r6, #0
 800fd8e:	f7f4 f839 	bl	8003e04 <__aeabi_fmul>
 800fd92:	1c01      	adds	r1, r0, #0
 800fd94:	1c20      	adds	r0, r4, #0
 800fd96:	f7f3 fccb 	bl	8003730 <__aeabi_fadd>
 800fd9a:	1c04      	adds	r4, r0, #0
 800fd9c:	1c20      	adds	r0, r4, #0
 800fd9e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800fda0:	21fc      	movs	r1, #252	; 0xfc
 800fda2:	9800      	ldr	r0, [sp, #0]
 800fda4:	0589      	lsls	r1, r1, #22
 800fda6:	f7f4 f82d 	bl	8003e04 <__aeabi_fmul>
 800fdaa:	1c39      	adds	r1, r7, #0
 800fdac:	9001      	str	r0, [sp, #4]
 800fdae:	1c30      	adds	r0, r6, #0
 800fdb0:	f7f4 f828 	bl	8003e04 <__aeabi_fmul>
 800fdb4:	1c01      	adds	r1, r0, #0
 800fdb6:	9801      	ldr	r0, [sp, #4]
 800fdb8:	f7f4 f972 	bl	80040a0 <__aeabi_fsub>
 800fdbc:	1c29      	adds	r1, r5, #0
 800fdbe:	f7f4 f821 	bl	8003e04 <__aeabi_fmul>
 800fdc2:	9900      	ldr	r1, [sp, #0]
 800fdc4:	f7f4 f96c 	bl	80040a0 <__aeabi_fsub>
 800fdc8:	490b      	ldr	r1, [pc, #44]	; (800fdf8 <__kernel_sinf+0xe4>)
 800fdca:	1c05      	adds	r5, r0, #0
 800fdcc:	1c30      	adds	r0, r6, #0
 800fdce:	f7f4 f819 	bl	8003e04 <__aeabi_fmul>
 800fdd2:	1c01      	adds	r1, r0, #0
 800fdd4:	1c28      	adds	r0, r5, #0
 800fdd6:	f7f3 fcab 	bl	8003730 <__aeabi_fadd>
 800fdda:	1c01      	adds	r1, r0, #0
 800fddc:	1c20      	adds	r0, r4, #0
 800fdde:	f7f4 f95f 	bl	80040a0 <__aeabi_fsub>
 800fde2:	e7da      	b.n	800fd9a <__kernel_sinf+0x86>
 800fde4:	2f2ec9d3 	.word	0x2f2ec9d3
 800fde8:	32d72f34 	.word	0x32d72f34
 800fdec:	3638ef1b 	.word	0x3638ef1b
 800fdf0:	39500d01 	.word	0x39500d01
 800fdf4:	3c088889 	.word	0x3c088889
 800fdf8:	3e2aaaab 	.word	0x3e2aaaab

0800fdfc <__ieee754_acosf>:
 800fdfc:	21fe      	movs	r1, #254	; 0xfe
 800fdfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe00:	0043      	lsls	r3, r0, #1
 800fe02:	1c04      	adds	r4, r0, #0
 800fe04:	085b      	lsrs	r3, r3, #1
 800fe06:	0589      	lsls	r1, r1, #22
 800fe08:	428b      	cmp	r3, r1
 800fe0a:	d104      	bne.n	800fe16 <__ieee754_acosf+0x1a>
 800fe0c:	2000      	movs	r0, #0
 800fe0e:	2c00      	cmp	r4, #0
 800fe10:	dc00      	bgt.n	800fe14 <__ieee754_acosf+0x18>
 800fe12:	489c      	ldr	r0, [pc, #624]	; (8010084 <__ieee754_acosf+0x288>)
 800fe14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fe16:	428b      	cmp	r3, r1
 800fe18:	dd06      	ble.n	800fe28 <__ieee754_acosf+0x2c>
 800fe1a:	1c01      	adds	r1, r0, #0
 800fe1c:	f7f4 f940 	bl	80040a0 <__aeabi_fsub>
 800fe20:	1c01      	adds	r1, r0, #0
 800fe22:	f7f3 fe25 	bl	8003a70 <__aeabi_fdiv>
 800fe26:	e7f5      	b.n	800fe14 <__ieee754_acosf+0x18>
 800fe28:	21fc      	movs	r1, #252	; 0xfc
 800fe2a:	0589      	lsls	r1, r1, #22
 800fe2c:	428b      	cmp	r3, r1
 800fe2e:	da58      	bge.n	800fee2 <__ieee754_acosf+0xe6>
 800fe30:	228c      	movs	r2, #140	; 0x8c
 800fe32:	0592      	lsls	r2, r2, #22
 800fe34:	4293      	cmp	r3, r2
 800fe36:	dc00      	bgt.n	800fe3a <__ieee754_acosf+0x3e>
 800fe38:	e121      	b.n	801007e <__ieee754_acosf+0x282>
 800fe3a:	1c01      	adds	r1, r0, #0
 800fe3c:	f7f3 ffe2 	bl	8003e04 <__aeabi_fmul>
 800fe40:	4991      	ldr	r1, [pc, #580]	; (8010088 <__ieee754_acosf+0x28c>)
 800fe42:	1c05      	adds	r5, r0, #0
 800fe44:	f7f3 ffde 	bl	8003e04 <__aeabi_fmul>
 800fe48:	4990      	ldr	r1, [pc, #576]	; (801008c <__ieee754_acosf+0x290>)
 800fe4a:	f7f3 fc71 	bl	8003730 <__aeabi_fadd>
 800fe4e:	1c29      	adds	r1, r5, #0
 800fe50:	f7f3 ffd8 	bl	8003e04 <__aeabi_fmul>
 800fe54:	498e      	ldr	r1, [pc, #568]	; (8010090 <__ieee754_acosf+0x294>)
 800fe56:	f7f4 f923 	bl	80040a0 <__aeabi_fsub>
 800fe5a:	1c29      	adds	r1, r5, #0
 800fe5c:	f7f3 ffd2 	bl	8003e04 <__aeabi_fmul>
 800fe60:	498c      	ldr	r1, [pc, #560]	; (8010094 <__ieee754_acosf+0x298>)
 800fe62:	f7f3 fc65 	bl	8003730 <__aeabi_fadd>
 800fe66:	1c29      	adds	r1, r5, #0
 800fe68:	f7f3 ffcc 	bl	8003e04 <__aeabi_fmul>
 800fe6c:	498a      	ldr	r1, [pc, #552]	; (8010098 <__ieee754_acosf+0x29c>)
 800fe6e:	f7f4 f917 	bl	80040a0 <__aeabi_fsub>
 800fe72:	1c29      	adds	r1, r5, #0
 800fe74:	f7f3 ffc6 	bl	8003e04 <__aeabi_fmul>
 800fe78:	4988      	ldr	r1, [pc, #544]	; (801009c <__ieee754_acosf+0x2a0>)
 800fe7a:	f7f3 fc59 	bl	8003730 <__aeabi_fadd>
 800fe7e:	1c29      	adds	r1, r5, #0
 800fe80:	f7f3 ffc0 	bl	8003e04 <__aeabi_fmul>
 800fe84:	4986      	ldr	r1, [pc, #536]	; (80100a0 <__ieee754_acosf+0x2a4>)
 800fe86:	1c06      	adds	r6, r0, #0
 800fe88:	1c28      	adds	r0, r5, #0
 800fe8a:	f7f3 ffbb 	bl	8003e04 <__aeabi_fmul>
 800fe8e:	4985      	ldr	r1, [pc, #532]	; (80100a4 <__ieee754_acosf+0x2a8>)
 800fe90:	f7f4 f906 	bl	80040a0 <__aeabi_fsub>
 800fe94:	1c29      	adds	r1, r5, #0
 800fe96:	f7f3 ffb5 	bl	8003e04 <__aeabi_fmul>
 800fe9a:	4983      	ldr	r1, [pc, #524]	; (80100a8 <__ieee754_acosf+0x2ac>)
 800fe9c:	f7f3 fc48 	bl	8003730 <__aeabi_fadd>
 800fea0:	1c29      	adds	r1, r5, #0
 800fea2:	f7f3 ffaf 	bl	8003e04 <__aeabi_fmul>
 800fea6:	4981      	ldr	r1, [pc, #516]	; (80100ac <__ieee754_acosf+0x2b0>)
 800fea8:	f7f4 f8fa 	bl	80040a0 <__aeabi_fsub>
 800feac:	1c29      	adds	r1, r5, #0
 800feae:	f7f3 ffa9 	bl	8003e04 <__aeabi_fmul>
 800feb2:	21fe      	movs	r1, #254	; 0xfe
 800feb4:	0589      	lsls	r1, r1, #22
 800feb6:	f7f3 fc3b 	bl	8003730 <__aeabi_fadd>
 800feba:	1c01      	adds	r1, r0, #0
 800febc:	1c30      	adds	r0, r6, #0
 800febe:	f7f3 fdd7 	bl	8003a70 <__aeabi_fdiv>
 800fec2:	1c21      	adds	r1, r4, #0
 800fec4:	f7f3 ff9e 	bl	8003e04 <__aeabi_fmul>
 800fec8:	1c01      	adds	r1, r0, #0
 800feca:	4879      	ldr	r0, [pc, #484]	; (80100b0 <__ieee754_acosf+0x2b4>)
 800fecc:	f7f4 f8e8 	bl	80040a0 <__aeabi_fsub>
 800fed0:	1c01      	adds	r1, r0, #0
 800fed2:	1c20      	adds	r0, r4, #0
 800fed4:	f7f4 f8e4 	bl	80040a0 <__aeabi_fsub>
 800fed8:	1c01      	adds	r1, r0, #0
 800feda:	4876      	ldr	r0, [pc, #472]	; (80100b4 <__ieee754_acosf+0x2b8>)
 800fedc:	f7f4 f8e0 	bl	80040a0 <__aeabi_fsub>
 800fee0:	e798      	b.n	800fe14 <__ieee754_acosf+0x18>
 800fee2:	2800      	cmp	r0, #0
 800fee4:	da5b      	bge.n	800ff9e <__ieee754_acosf+0x1a2>
 800fee6:	21fe      	movs	r1, #254	; 0xfe
 800fee8:	0589      	lsls	r1, r1, #22
 800feea:	f7f3 fc21 	bl	8003730 <__aeabi_fadd>
 800feee:	21fc      	movs	r1, #252	; 0xfc
 800fef0:	0589      	lsls	r1, r1, #22
 800fef2:	f7f3 ff87 	bl	8003e04 <__aeabi_fmul>
 800fef6:	4964      	ldr	r1, [pc, #400]	; (8010088 <__ieee754_acosf+0x28c>)
 800fef8:	1c04      	adds	r4, r0, #0
 800fefa:	f7f3 ff83 	bl	8003e04 <__aeabi_fmul>
 800fefe:	4963      	ldr	r1, [pc, #396]	; (801008c <__ieee754_acosf+0x290>)
 800ff00:	f7f3 fc16 	bl	8003730 <__aeabi_fadd>
 800ff04:	1c21      	adds	r1, r4, #0
 800ff06:	f7f3 ff7d 	bl	8003e04 <__aeabi_fmul>
 800ff0a:	4961      	ldr	r1, [pc, #388]	; (8010090 <__ieee754_acosf+0x294>)
 800ff0c:	f7f4 f8c8 	bl	80040a0 <__aeabi_fsub>
 800ff10:	1c21      	adds	r1, r4, #0
 800ff12:	f7f3 ff77 	bl	8003e04 <__aeabi_fmul>
 800ff16:	495f      	ldr	r1, [pc, #380]	; (8010094 <__ieee754_acosf+0x298>)
 800ff18:	f7f3 fc0a 	bl	8003730 <__aeabi_fadd>
 800ff1c:	1c21      	adds	r1, r4, #0
 800ff1e:	f7f3 ff71 	bl	8003e04 <__aeabi_fmul>
 800ff22:	495d      	ldr	r1, [pc, #372]	; (8010098 <__ieee754_acosf+0x29c>)
 800ff24:	f7f4 f8bc 	bl	80040a0 <__aeabi_fsub>
 800ff28:	1c21      	adds	r1, r4, #0
 800ff2a:	f7f3 ff6b 	bl	8003e04 <__aeabi_fmul>
 800ff2e:	495b      	ldr	r1, [pc, #364]	; (801009c <__ieee754_acosf+0x2a0>)
 800ff30:	f7f3 fbfe 	bl	8003730 <__aeabi_fadd>
 800ff34:	1c21      	adds	r1, r4, #0
 800ff36:	f7f3 ff65 	bl	8003e04 <__aeabi_fmul>
 800ff3a:	1c06      	adds	r6, r0, #0
 800ff3c:	1c20      	adds	r0, r4, #0
 800ff3e:	f7ff fdf1 	bl	800fb24 <__ieee754_sqrtf>
 800ff42:	4957      	ldr	r1, [pc, #348]	; (80100a0 <__ieee754_acosf+0x2a4>)
 800ff44:	1c05      	adds	r5, r0, #0
 800ff46:	1c20      	adds	r0, r4, #0
 800ff48:	f7f3 ff5c 	bl	8003e04 <__aeabi_fmul>
 800ff4c:	4955      	ldr	r1, [pc, #340]	; (80100a4 <__ieee754_acosf+0x2a8>)
 800ff4e:	f7f4 f8a7 	bl	80040a0 <__aeabi_fsub>
 800ff52:	1c21      	adds	r1, r4, #0
 800ff54:	f7f3 ff56 	bl	8003e04 <__aeabi_fmul>
 800ff58:	4953      	ldr	r1, [pc, #332]	; (80100a8 <__ieee754_acosf+0x2ac>)
 800ff5a:	f7f3 fbe9 	bl	8003730 <__aeabi_fadd>
 800ff5e:	1c21      	adds	r1, r4, #0
 800ff60:	f7f3 ff50 	bl	8003e04 <__aeabi_fmul>
 800ff64:	4951      	ldr	r1, [pc, #324]	; (80100ac <__ieee754_acosf+0x2b0>)
 800ff66:	f7f4 f89b 	bl	80040a0 <__aeabi_fsub>
 800ff6a:	1c21      	adds	r1, r4, #0
 800ff6c:	f7f3 ff4a 	bl	8003e04 <__aeabi_fmul>
 800ff70:	21fe      	movs	r1, #254	; 0xfe
 800ff72:	0589      	lsls	r1, r1, #22
 800ff74:	f7f3 fbdc 	bl	8003730 <__aeabi_fadd>
 800ff78:	1c01      	adds	r1, r0, #0
 800ff7a:	1c30      	adds	r0, r6, #0
 800ff7c:	f7f3 fd78 	bl	8003a70 <__aeabi_fdiv>
 800ff80:	1c29      	adds	r1, r5, #0
 800ff82:	f7f3 ff3f 	bl	8003e04 <__aeabi_fmul>
 800ff86:	494a      	ldr	r1, [pc, #296]	; (80100b0 <__ieee754_acosf+0x2b4>)
 800ff88:	f7f4 f88a 	bl	80040a0 <__aeabi_fsub>
 800ff8c:	1c29      	adds	r1, r5, #0
 800ff8e:	f7f3 fbcf 	bl	8003730 <__aeabi_fadd>
 800ff92:	1c01      	adds	r1, r0, #0
 800ff94:	f7f3 fbcc 	bl	8003730 <__aeabi_fadd>
 800ff98:	1c01      	adds	r1, r0, #0
 800ff9a:	4847      	ldr	r0, [pc, #284]	; (80100b8 <__ieee754_acosf+0x2bc>)
 800ff9c:	e79e      	b.n	800fedc <__ieee754_acosf+0xe0>
 800ff9e:	1c01      	adds	r1, r0, #0
 800ffa0:	20fe      	movs	r0, #254	; 0xfe
 800ffa2:	0580      	lsls	r0, r0, #22
 800ffa4:	f7f4 f87c 	bl	80040a0 <__aeabi_fsub>
 800ffa8:	21fc      	movs	r1, #252	; 0xfc
 800ffaa:	0589      	lsls	r1, r1, #22
 800ffac:	f7f3 ff2a 	bl	8003e04 <__aeabi_fmul>
 800ffb0:	1c04      	adds	r4, r0, #0
 800ffb2:	f7ff fdb7 	bl	800fb24 <__ieee754_sqrtf>
 800ffb6:	4934      	ldr	r1, [pc, #208]	; (8010088 <__ieee754_acosf+0x28c>)
 800ffb8:	1c06      	adds	r6, r0, #0
 800ffba:	0b05      	lsrs	r5, r0, #12
 800ffbc:	1c20      	adds	r0, r4, #0
 800ffbe:	f7f3 ff21 	bl	8003e04 <__aeabi_fmul>
 800ffc2:	4932      	ldr	r1, [pc, #200]	; (801008c <__ieee754_acosf+0x290>)
 800ffc4:	f7f3 fbb4 	bl	8003730 <__aeabi_fadd>
 800ffc8:	1c21      	adds	r1, r4, #0
 800ffca:	f7f3 ff1b 	bl	8003e04 <__aeabi_fmul>
 800ffce:	4930      	ldr	r1, [pc, #192]	; (8010090 <__ieee754_acosf+0x294>)
 800ffd0:	f7f4 f866 	bl	80040a0 <__aeabi_fsub>
 800ffd4:	1c21      	adds	r1, r4, #0
 800ffd6:	f7f3 ff15 	bl	8003e04 <__aeabi_fmul>
 800ffda:	492e      	ldr	r1, [pc, #184]	; (8010094 <__ieee754_acosf+0x298>)
 800ffdc:	f7f3 fba8 	bl	8003730 <__aeabi_fadd>
 800ffe0:	1c21      	adds	r1, r4, #0
 800ffe2:	f7f3 ff0f 	bl	8003e04 <__aeabi_fmul>
 800ffe6:	492c      	ldr	r1, [pc, #176]	; (8010098 <__ieee754_acosf+0x29c>)
 800ffe8:	f7f4 f85a 	bl	80040a0 <__aeabi_fsub>
 800ffec:	1c21      	adds	r1, r4, #0
 800ffee:	f7f3 ff09 	bl	8003e04 <__aeabi_fmul>
 800fff2:	492a      	ldr	r1, [pc, #168]	; (801009c <__ieee754_acosf+0x2a0>)
 800fff4:	f7f3 fb9c 	bl	8003730 <__aeabi_fadd>
 800fff8:	1c21      	adds	r1, r4, #0
 800fffa:	f7f3 ff03 	bl	8003e04 <__aeabi_fmul>
 800fffe:	4928      	ldr	r1, [pc, #160]	; (80100a0 <__ieee754_acosf+0x2a4>)
 8010000:	1c07      	adds	r7, r0, #0
 8010002:	1c20      	adds	r0, r4, #0
 8010004:	f7f3 fefe 	bl	8003e04 <__aeabi_fmul>
 8010008:	4926      	ldr	r1, [pc, #152]	; (80100a4 <__ieee754_acosf+0x2a8>)
 801000a:	f7f4 f849 	bl	80040a0 <__aeabi_fsub>
 801000e:	1c21      	adds	r1, r4, #0
 8010010:	f7f3 fef8 	bl	8003e04 <__aeabi_fmul>
 8010014:	4924      	ldr	r1, [pc, #144]	; (80100a8 <__ieee754_acosf+0x2ac>)
 8010016:	f7f3 fb8b 	bl	8003730 <__aeabi_fadd>
 801001a:	1c21      	adds	r1, r4, #0
 801001c:	f7f3 fef2 	bl	8003e04 <__aeabi_fmul>
 8010020:	4922      	ldr	r1, [pc, #136]	; (80100ac <__ieee754_acosf+0x2b0>)
 8010022:	f7f4 f83d 	bl	80040a0 <__aeabi_fsub>
 8010026:	1c21      	adds	r1, r4, #0
 8010028:	f7f3 feec 	bl	8003e04 <__aeabi_fmul>
 801002c:	21fe      	movs	r1, #254	; 0xfe
 801002e:	0589      	lsls	r1, r1, #22
 8010030:	f7f3 fb7e 	bl	8003730 <__aeabi_fadd>
 8010034:	1c01      	adds	r1, r0, #0
 8010036:	1c38      	adds	r0, r7, #0
 8010038:	f7f3 fd1a 	bl	8003a70 <__aeabi_fdiv>
 801003c:	1c31      	adds	r1, r6, #0
 801003e:	f7f3 fee1 	bl	8003e04 <__aeabi_fmul>
 8010042:	032d      	lsls	r5, r5, #12
 8010044:	1c07      	adds	r7, r0, #0
 8010046:	1c29      	adds	r1, r5, #0
 8010048:	1c28      	adds	r0, r5, #0
 801004a:	f7f3 fedb 	bl	8003e04 <__aeabi_fmul>
 801004e:	1c01      	adds	r1, r0, #0
 8010050:	1c20      	adds	r0, r4, #0
 8010052:	f7f4 f825 	bl	80040a0 <__aeabi_fsub>
 8010056:	1c29      	adds	r1, r5, #0
 8010058:	1c04      	adds	r4, r0, #0
 801005a:	1c30      	adds	r0, r6, #0
 801005c:	f7f3 fb68 	bl	8003730 <__aeabi_fadd>
 8010060:	1c01      	adds	r1, r0, #0
 8010062:	1c20      	adds	r0, r4, #0
 8010064:	f7f3 fd04 	bl	8003a70 <__aeabi_fdiv>
 8010068:	1c01      	adds	r1, r0, #0
 801006a:	1c38      	adds	r0, r7, #0
 801006c:	f7f3 fb60 	bl	8003730 <__aeabi_fadd>
 8010070:	1c29      	adds	r1, r5, #0
 8010072:	f7f3 fb5d 	bl	8003730 <__aeabi_fadd>
 8010076:	1c01      	adds	r1, r0, #0
 8010078:	f7f3 fb5a 	bl	8003730 <__aeabi_fadd>
 801007c:	e6ca      	b.n	800fe14 <__ieee754_acosf+0x18>
 801007e:	480f      	ldr	r0, [pc, #60]	; (80100bc <__ieee754_acosf+0x2c0>)
 8010080:	e6c8      	b.n	800fe14 <__ieee754_acosf+0x18>
 8010082:	46c0      	nop			; (mov r8, r8)
 8010084:	40490fdb 	.word	0x40490fdb
 8010088:	3811ef08 	.word	0x3811ef08
 801008c:	3a4f7f04 	.word	0x3a4f7f04
 8010090:	3d241146 	.word	0x3d241146
 8010094:	3e4e0aa8 	.word	0x3e4e0aa8
 8010098:	3ea6b090 	.word	0x3ea6b090
 801009c:	3e2aaaab 	.word	0x3e2aaaab
 80100a0:	3d9dc62e 	.word	0x3d9dc62e
 80100a4:	3f303361 	.word	0x3f303361
 80100a8:	4001572d 	.word	0x4001572d
 80100ac:	4019d139 	.word	0x4019d139
 80100b0:	33a22168 	.word	0x33a22168
 80100b4:	3fc90fda 	.word	0x3fc90fda
 80100b8:	40490fda 	.word	0x40490fda
 80100bc:	3fc90fdb 	.word	0x3fc90fdb

080100c0 <__ieee754_atan2f>:
 80100c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80100c2:	25ff      	movs	r5, #255	; 0xff
 80100c4:	004a      	lsls	r2, r1, #1
 80100c6:	9101      	str	r1, [sp, #4]
 80100c8:	0852      	lsrs	r2, r2, #1
 80100ca:	05ed      	lsls	r5, r5, #23
 80100cc:	42aa      	cmp	r2, r5
 80100ce:	dc04      	bgt.n	80100da <__ieee754_atan2f+0x1a>
 80100d0:	0043      	lsls	r3, r0, #1
 80100d2:	0007      	movs	r7, r0
 80100d4:	085b      	lsrs	r3, r3, #1
 80100d6:	42ab      	cmp	r3, r5
 80100d8:	dd02      	ble.n	80100e0 <__ieee754_atan2f+0x20>
 80100da:	f7f3 fb29 	bl	8003730 <__aeabi_fadd>
 80100de:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80100e0:	24fe      	movs	r4, #254	; 0xfe
 80100e2:	05a4      	lsls	r4, r4, #22
 80100e4:	42a1      	cmp	r1, r4
 80100e6:	d102      	bne.n	80100ee <__ieee754_atan2f+0x2e>
 80100e8:	f000 f9c0 	bl	801046c <atanf>
 80100ec:	e7f7      	b.n	80100de <__ieee754_atan2f+0x1e>
 80100ee:	2602      	movs	r6, #2
 80100f0:	178c      	asrs	r4, r1, #30
 80100f2:	4034      	ands	r4, r6
 80100f4:	0fc6      	lsrs	r6, r0, #31
 80100f6:	4334      	orrs	r4, r6
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d105      	bne.n	8010108 <__ieee754_atan2f+0x48>
 80100fc:	2c02      	cmp	r4, #2
 80100fe:	d045      	beq.n	801018c <__ieee754_atan2f+0xcc>
 8010100:	2c03      	cmp	r4, #3
 8010102:	d1ec      	bne.n	80100de <__ieee754_atan2f+0x1e>
 8010104:	4823      	ldr	r0, [pc, #140]	; (8010194 <__ieee754_atan2f+0xd4>)
 8010106:	e7ea      	b.n	80100de <__ieee754_atan2f+0x1e>
 8010108:	2a00      	cmp	r2, #0
 801010a:	d103      	bne.n	8010114 <__ieee754_atan2f+0x54>
 801010c:	2f00      	cmp	r7, #0
 801010e:	da3f      	bge.n	8010190 <__ieee754_atan2f+0xd0>
 8010110:	4821      	ldr	r0, [pc, #132]	; (8010198 <__ieee754_atan2f+0xd8>)
 8010112:	e7e4      	b.n	80100de <__ieee754_atan2f+0x1e>
 8010114:	42aa      	cmp	r2, r5
 8010116:	d10e      	bne.n	8010136 <__ieee754_atan2f+0x76>
 8010118:	3c01      	subs	r4, #1
 801011a:	4293      	cmp	r3, r2
 801011c:	d104      	bne.n	8010128 <__ieee754_atan2f+0x68>
 801011e:	4b1f      	ldr	r3, [pc, #124]	; (801019c <__ieee754_atan2f+0xdc>)
 8010120:	2c02      	cmp	r4, #2
 8010122:	d905      	bls.n	8010130 <__ieee754_atan2f+0x70>
 8010124:	481e      	ldr	r0, [pc, #120]	; (80101a0 <__ieee754_atan2f+0xe0>)
 8010126:	e7da      	b.n	80100de <__ieee754_atan2f+0x1e>
 8010128:	2000      	movs	r0, #0
 801012a:	2c02      	cmp	r4, #2
 801012c:	d8d7      	bhi.n	80100de <__ieee754_atan2f+0x1e>
 801012e:	4b1d      	ldr	r3, [pc, #116]	; (80101a4 <__ieee754_atan2f+0xe4>)
 8010130:	00a4      	lsls	r4, r4, #2
 8010132:	58e0      	ldr	r0, [r4, r3]
 8010134:	e7d3      	b.n	80100de <__ieee754_atan2f+0x1e>
 8010136:	42ab      	cmp	r3, r5
 8010138:	d0e8      	beq.n	801010c <__ieee754_atan2f+0x4c>
 801013a:	1a9b      	subs	r3, r3, r2
 801013c:	15db      	asrs	r3, r3, #23
 801013e:	2b3c      	cmp	r3, #60	; 0x3c
 8010140:	dc14      	bgt.n	801016c <__ieee754_atan2f+0xac>
 8010142:	2900      	cmp	r1, #0
 8010144:	da01      	bge.n	801014a <__ieee754_atan2f+0x8a>
 8010146:	333c      	adds	r3, #60	; 0x3c
 8010148:	db12      	blt.n	8010170 <__ieee754_atan2f+0xb0>
 801014a:	f7f3 fc91 	bl	8003a70 <__aeabi_fdiv>
 801014e:	f7ff fca3 	bl	800fa98 <fabsf>
 8010152:	f000 f98b 	bl	801046c <atanf>
 8010156:	2c01      	cmp	r4, #1
 8010158:	d00c      	beq.n	8010174 <__ieee754_atan2f+0xb4>
 801015a:	2c02      	cmp	r4, #2
 801015c:	d00e      	beq.n	801017c <__ieee754_atan2f+0xbc>
 801015e:	2c00      	cmp	r4, #0
 8010160:	d0bd      	beq.n	80100de <__ieee754_atan2f+0x1e>
 8010162:	4911      	ldr	r1, [pc, #68]	; (80101a8 <__ieee754_atan2f+0xe8>)
 8010164:	f7f3 fae4 	bl	8003730 <__aeabi_fadd>
 8010168:	4910      	ldr	r1, [pc, #64]	; (80101ac <__ieee754_atan2f+0xec>)
 801016a:	e00c      	b.n	8010186 <__ieee754_atan2f+0xc6>
 801016c:	4810      	ldr	r0, [pc, #64]	; (80101b0 <__ieee754_atan2f+0xf0>)
 801016e:	e7f2      	b.n	8010156 <__ieee754_atan2f+0x96>
 8010170:	2000      	movs	r0, #0
 8010172:	e7f0      	b.n	8010156 <__ieee754_atan2f+0x96>
 8010174:	2380      	movs	r3, #128	; 0x80
 8010176:	061b      	lsls	r3, r3, #24
 8010178:	18c0      	adds	r0, r0, r3
 801017a:	e7b0      	b.n	80100de <__ieee754_atan2f+0x1e>
 801017c:	490a      	ldr	r1, [pc, #40]	; (80101a8 <__ieee754_atan2f+0xe8>)
 801017e:	f7f3 fad7 	bl	8003730 <__aeabi_fadd>
 8010182:	1c01      	adds	r1, r0, #0
 8010184:	4809      	ldr	r0, [pc, #36]	; (80101ac <__ieee754_atan2f+0xec>)
 8010186:	f7f3 ff8b 	bl	80040a0 <__aeabi_fsub>
 801018a:	e7a8      	b.n	80100de <__ieee754_atan2f+0x1e>
 801018c:	4807      	ldr	r0, [pc, #28]	; (80101ac <__ieee754_atan2f+0xec>)
 801018e:	e7a6      	b.n	80100de <__ieee754_atan2f+0x1e>
 8010190:	4807      	ldr	r0, [pc, #28]	; (80101b0 <__ieee754_atan2f+0xf0>)
 8010192:	e7a4      	b.n	80100de <__ieee754_atan2f+0x1e>
 8010194:	c0490fdb 	.word	0xc0490fdb
 8010198:	bfc90fdb 	.word	0xbfc90fdb
 801019c:	08016714 	.word	0x08016714
 80101a0:	3f490fdb 	.word	0x3f490fdb
 80101a4:	08016720 	.word	0x08016720
 80101a8:	33bbbd2e 	.word	0x33bbbd2e
 80101ac:	40490fdb 	.word	0x40490fdb
 80101b0:	3fc90fdb 	.word	0x3fc90fdb

080101b4 <__ieee754_rem_pio2f>:
 80101b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80101b6:	4ba0      	ldr	r3, [pc, #640]	; (8010438 <__ieee754_rem_pio2f+0x284>)
 80101b8:	b08b      	sub	sp, #44	; 0x2c
 80101ba:	0045      	lsls	r5, r0, #1
 80101bc:	000c      	movs	r4, r1
 80101be:	9005      	str	r0, [sp, #20]
 80101c0:	086d      	lsrs	r5, r5, #1
 80101c2:	429d      	cmp	r5, r3
 80101c4:	dc04      	bgt.n	80101d0 <__ieee754_rem_pio2f+0x1c>
 80101c6:	2300      	movs	r3, #0
 80101c8:	6008      	str	r0, [r1, #0]
 80101ca:	604b      	str	r3, [r1, #4]
 80101cc:	2700      	movs	r7, #0
 80101ce:	e01a      	b.n	8010206 <__ieee754_rem_pio2f+0x52>
 80101d0:	4b9a      	ldr	r3, [pc, #616]	; (801043c <__ieee754_rem_pio2f+0x288>)
 80101d2:	429d      	cmp	r5, r3
 80101d4:	dc4a      	bgt.n	801026c <__ieee754_rem_pio2f+0xb8>
 80101d6:	230f      	movs	r3, #15
 80101d8:	4e99      	ldr	r6, [pc, #612]	; (8010440 <__ieee754_rem_pio2f+0x28c>)
 80101da:	499a      	ldr	r1, [pc, #616]	; (8010444 <__ieee754_rem_pio2f+0x290>)
 80101dc:	439d      	bics	r5, r3
 80101de:	2800      	cmp	r0, #0
 80101e0:	dd22      	ble.n	8010228 <__ieee754_rem_pio2f+0x74>
 80101e2:	f7f3 ff5d 	bl	80040a0 <__aeabi_fsub>
 80101e6:	1c07      	adds	r7, r0, #0
 80101e8:	42b5      	cmp	r5, r6
 80101ea:	d00f      	beq.n	801020c <__ieee754_rem_pio2f+0x58>
 80101ec:	4996      	ldr	r1, [pc, #600]	; (8010448 <__ieee754_rem_pio2f+0x294>)
 80101ee:	f7f3 ff57 	bl	80040a0 <__aeabi_fsub>
 80101f2:	1c01      	adds	r1, r0, #0
 80101f4:	6020      	str	r0, [r4, #0]
 80101f6:	1c38      	adds	r0, r7, #0
 80101f8:	f7f3 ff52 	bl	80040a0 <__aeabi_fsub>
 80101fc:	4992      	ldr	r1, [pc, #584]	; (8010448 <__ieee754_rem_pio2f+0x294>)
 80101fe:	f7f3 ff4f 	bl	80040a0 <__aeabi_fsub>
 8010202:	2701      	movs	r7, #1
 8010204:	6060      	str	r0, [r4, #4]
 8010206:	0038      	movs	r0, r7
 8010208:	b00b      	add	sp, #44	; 0x2c
 801020a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801020c:	498f      	ldr	r1, [pc, #572]	; (801044c <__ieee754_rem_pio2f+0x298>)
 801020e:	f7f3 ff47 	bl	80040a0 <__aeabi_fsub>
 8010212:	498f      	ldr	r1, [pc, #572]	; (8010450 <__ieee754_rem_pio2f+0x29c>)
 8010214:	1c05      	adds	r5, r0, #0
 8010216:	f7f3 ff43 	bl	80040a0 <__aeabi_fsub>
 801021a:	1c01      	adds	r1, r0, #0
 801021c:	6020      	str	r0, [r4, #0]
 801021e:	1c28      	adds	r0, r5, #0
 8010220:	f7f3 ff3e 	bl	80040a0 <__aeabi_fsub>
 8010224:	498a      	ldr	r1, [pc, #552]	; (8010450 <__ieee754_rem_pio2f+0x29c>)
 8010226:	e7ea      	b.n	80101fe <__ieee754_rem_pio2f+0x4a>
 8010228:	f7f3 fa82 	bl	8003730 <__aeabi_fadd>
 801022c:	1c07      	adds	r7, r0, #0
 801022e:	42b5      	cmp	r5, r6
 8010230:	d00e      	beq.n	8010250 <__ieee754_rem_pio2f+0x9c>
 8010232:	4985      	ldr	r1, [pc, #532]	; (8010448 <__ieee754_rem_pio2f+0x294>)
 8010234:	f7f3 fa7c 	bl	8003730 <__aeabi_fadd>
 8010238:	1c01      	adds	r1, r0, #0
 801023a:	6020      	str	r0, [r4, #0]
 801023c:	1c38      	adds	r0, r7, #0
 801023e:	f7f3 ff2f 	bl	80040a0 <__aeabi_fsub>
 8010242:	4981      	ldr	r1, [pc, #516]	; (8010448 <__ieee754_rem_pio2f+0x294>)
 8010244:	f7f3 fa74 	bl	8003730 <__aeabi_fadd>
 8010248:	2701      	movs	r7, #1
 801024a:	6060      	str	r0, [r4, #4]
 801024c:	427f      	negs	r7, r7
 801024e:	e7da      	b.n	8010206 <__ieee754_rem_pio2f+0x52>
 8010250:	497e      	ldr	r1, [pc, #504]	; (801044c <__ieee754_rem_pio2f+0x298>)
 8010252:	f7f3 fa6d 	bl	8003730 <__aeabi_fadd>
 8010256:	497e      	ldr	r1, [pc, #504]	; (8010450 <__ieee754_rem_pio2f+0x29c>)
 8010258:	1c05      	adds	r5, r0, #0
 801025a:	f7f3 fa69 	bl	8003730 <__aeabi_fadd>
 801025e:	1c01      	adds	r1, r0, #0
 8010260:	6020      	str	r0, [r4, #0]
 8010262:	1c28      	adds	r0, r5, #0
 8010264:	f7f3 ff1c 	bl	80040a0 <__aeabi_fsub>
 8010268:	4979      	ldr	r1, [pc, #484]	; (8010450 <__ieee754_rem_pio2f+0x29c>)
 801026a:	e7eb      	b.n	8010244 <__ieee754_rem_pio2f+0x90>
 801026c:	4b79      	ldr	r3, [pc, #484]	; (8010454 <__ieee754_rem_pio2f+0x2a0>)
 801026e:	429d      	cmp	r5, r3
 8010270:	dd00      	ble.n	8010274 <__ieee754_rem_pio2f+0xc0>
 8010272:	e091      	b.n	8010398 <__ieee754_rem_pio2f+0x1e4>
 8010274:	f7ff fc10 	bl	800fa98 <fabsf>
 8010278:	4977      	ldr	r1, [pc, #476]	; (8010458 <__ieee754_rem_pio2f+0x2a4>)
 801027a:	1c06      	adds	r6, r0, #0
 801027c:	f7f3 fdc2 	bl	8003e04 <__aeabi_fmul>
 8010280:	21fc      	movs	r1, #252	; 0xfc
 8010282:	0589      	lsls	r1, r1, #22
 8010284:	f7f3 fa54 	bl	8003730 <__aeabi_fadd>
 8010288:	f7f4 f8c0 	bl	800440c <__aeabi_f2iz>
 801028c:	0007      	movs	r7, r0
 801028e:	f7f4 f8dd 	bl	800444c <__aeabi_i2f>
 8010292:	496c      	ldr	r1, [pc, #432]	; (8010444 <__ieee754_rem_pio2f+0x290>)
 8010294:	9003      	str	r0, [sp, #12]
 8010296:	f7f3 fdb5 	bl	8003e04 <__aeabi_fmul>
 801029a:	1c01      	adds	r1, r0, #0
 801029c:	1c30      	adds	r0, r6, #0
 801029e:	f7f3 feff 	bl	80040a0 <__aeabi_fsub>
 80102a2:	4969      	ldr	r1, [pc, #420]	; (8010448 <__ieee754_rem_pio2f+0x294>)
 80102a4:	9002      	str	r0, [sp, #8]
 80102a6:	9803      	ldr	r0, [sp, #12]
 80102a8:	f7f3 fdac 	bl	8003e04 <__aeabi_fmul>
 80102ac:	1c06      	adds	r6, r0, #0
 80102ae:	2f1f      	cmp	r7, #31
 80102b0:	dc0d      	bgt.n	80102ce <__ieee754_rem_pio2f+0x11a>
 80102b2:	23ff      	movs	r3, #255	; 0xff
 80102b4:	0029      	movs	r1, r5
 80102b6:	1e7a      	subs	r2, r7, #1
 80102b8:	4399      	bics	r1, r3
 80102ba:	4b68      	ldr	r3, [pc, #416]	; (801045c <__ieee754_rem_pio2f+0x2a8>)
 80102bc:	0092      	lsls	r2, r2, #2
 80102be:	58d3      	ldr	r3, [r2, r3]
 80102c0:	4299      	cmp	r1, r3
 80102c2:	d004      	beq.n	80102ce <__ieee754_rem_pio2f+0x11a>
 80102c4:	9802      	ldr	r0, [sp, #8]
 80102c6:	1c31      	adds	r1, r6, #0
 80102c8:	f7f3 feea 	bl	80040a0 <__aeabi_fsub>
 80102cc:	e00c      	b.n	80102e8 <__ieee754_rem_pio2f+0x134>
 80102ce:	9802      	ldr	r0, [sp, #8]
 80102d0:	1c31      	adds	r1, r6, #0
 80102d2:	f7f3 fee5 	bl	80040a0 <__aeabi_fsub>
 80102d6:	22ff      	movs	r2, #255	; 0xff
 80102d8:	15eb      	asrs	r3, r5, #23
 80102da:	9304      	str	r3, [sp, #16]
 80102dc:	0dc3      	lsrs	r3, r0, #23
 80102de:	4013      	ands	r3, r2
 80102e0:	9a04      	ldr	r2, [sp, #16]
 80102e2:	1ad3      	subs	r3, r2, r3
 80102e4:	2b08      	cmp	r3, #8
 80102e6:	dc01      	bgt.n	80102ec <__ieee754_rem_pio2f+0x138>
 80102e8:	6020      	str	r0, [r4, #0]
 80102ea:	e026      	b.n	801033a <__ieee754_rem_pio2f+0x186>
 80102ec:	4957      	ldr	r1, [pc, #348]	; (801044c <__ieee754_rem_pio2f+0x298>)
 80102ee:	9803      	ldr	r0, [sp, #12]
 80102f0:	f7f3 fd88 	bl	8003e04 <__aeabi_fmul>
 80102f4:	1c06      	adds	r6, r0, #0
 80102f6:	1c01      	adds	r1, r0, #0
 80102f8:	9802      	ldr	r0, [sp, #8]
 80102fa:	f7f3 fed1 	bl	80040a0 <__aeabi_fsub>
 80102fe:	1c01      	adds	r1, r0, #0
 8010300:	1c05      	adds	r5, r0, #0
 8010302:	9802      	ldr	r0, [sp, #8]
 8010304:	f7f3 fecc 	bl	80040a0 <__aeabi_fsub>
 8010308:	1c31      	adds	r1, r6, #0
 801030a:	f7f3 fec9 	bl	80040a0 <__aeabi_fsub>
 801030e:	4950      	ldr	r1, [pc, #320]	; (8010450 <__ieee754_rem_pio2f+0x29c>)
 8010310:	1c06      	adds	r6, r0, #0
 8010312:	9803      	ldr	r0, [sp, #12]
 8010314:	f7f3 fd76 	bl	8003e04 <__aeabi_fmul>
 8010318:	1c31      	adds	r1, r6, #0
 801031a:	f7f3 fec1 	bl	80040a0 <__aeabi_fsub>
 801031e:	1c01      	adds	r1, r0, #0
 8010320:	1c06      	adds	r6, r0, #0
 8010322:	1c28      	adds	r0, r5, #0
 8010324:	f7f3 febc 	bl	80040a0 <__aeabi_fsub>
 8010328:	22ff      	movs	r2, #255	; 0xff
 801032a:	0dc3      	lsrs	r3, r0, #23
 801032c:	4013      	ands	r3, r2
 801032e:	9a04      	ldr	r2, [sp, #16]
 8010330:	1ad3      	subs	r3, r2, r3
 8010332:	2b19      	cmp	r3, #25
 8010334:	dc15      	bgt.n	8010362 <__ieee754_rem_pio2f+0x1ae>
 8010336:	6020      	str	r0, [r4, #0]
 8010338:	9502      	str	r5, [sp, #8]
 801033a:	6825      	ldr	r5, [r4, #0]
 801033c:	9802      	ldr	r0, [sp, #8]
 801033e:	1c29      	adds	r1, r5, #0
 8010340:	f7f3 feae 	bl	80040a0 <__aeabi_fsub>
 8010344:	1c31      	adds	r1, r6, #0
 8010346:	f7f3 feab 	bl	80040a0 <__aeabi_fsub>
 801034a:	9b05      	ldr	r3, [sp, #20]
 801034c:	6060      	str	r0, [r4, #4]
 801034e:	2b00      	cmp	r3, #0
 8010350:	db00      	blt.n	8010354 <__ieee754_rem_pio2f+0x1a0>
 8010352:	e758      	b.n	8010206 <__ieee754_rem_pio2f+0x52>
 8010354:	2380      	movs	r3, #128	; 0x80
 8010356:	061b      	lsls	r3, r3, #24
 8010358:	18ed      	adds	r5, r5, r3
 801035a:	18c0      	adds	r0, r0, r3
 801035c:	6025      	str	r5, [r4, #0]
 801035e:	6060      	str	r0, [r4, #4]
 8010360:	e774      	b.n	801024c <__ieee754_rem_pio2f+0x98>
 8010362:	493f      	ldr	r1, [pc, #252]	; (8010460 <__ieee754_rem_pio2f+0x2ac>)
 8010364:	9803      	ldr	r0, [sp, #12]
 8010366:	f7f3 fd4d 	bl	8003e04 <__aeabi_fmul>
 801036a:	1c06      	adds	r6, r0, #0
 801036c:	1c01      	adds	r1, r0, #0
 801036e:	1c28      	adds	r0, r5, #0
 8010370:	f7f3 fe96 	bl	80040a0 <__aeabi_fsub>
 8010374:	1c01      	adds	r1, r0, #0
 8010376:	9002      	str	r0, [sp, #8]
 8010378:	1c28      	adds	r0, r5, #0
 801037a:	f7f3 fe91 	bl	80040a0 <__aeabi_fsub>
 801037e:	1c31      	adds	r1, r6, #0
 8010380:	f7f3 fe8e 	bl	80040a0 <__aeabi_fsub>
 8010384:	4937      	ldr	r1, [pc, #220]	; (8010464 <__ieee754_rem_pio2f+0x2b0>)
 8010386:	1c05      	adds	r5, r0, #0
 8010388:	9803      	ldr	r0, [sp, #12]
 801038a:	f7f3 fd3b 	bl	8003e04 <__aeabi_fmul>
 801038e:	1c29      	adds	r1, r5, #0
 8010390:	f7f3 fe86 	bl	80040a0 <__aeabi_fsub>
 8010394:	1c06      	adds	r6, r0, #0
 8010396:	e795      	b.n	80102c4 <__ieee754_rem_pio2f+0x110>
 8010398:	23ff      	movs	r3, #255	; 0xff
 801039a:	05db      	lsls	r3, r3, #23
 801039c:	429d      	cmp	r5, r3
 801039e:	db05      	blt.n	80103ac <__ieee754_rem_pio2f+0x1f8>
 80103a0:	1c01      	adds	r1, r0, #0
 80103a2:	f7f3 fe7d 	bl	80040a0 <__aeabi_fsub>
 80103a6:	6060      	str	r0, [r4, #4]
 80103a8:	6020      	str	r0, [r4, #0]
 80103aa:	e70f      	b.n	80101cc <__ieee754_rem_pio2f+0x18>
 80103ac:	15ee      	asrs	r6, r5, #23
 80103ae:	3e86      	subs	r6, #134	; 0x86
 80103b0:	05f3      	lsls	r3, r6, #23
 80103b2:	1aed      	subs	r5, r5, r3
 80103b4:	1c28      	adds	r0, r5, #0
 80103b6:	f7f4 f829 	bl	800440c <__aeabi_f2iz>
 80103ba:	f7f4 f847 	bl	800444c <__aeabi_i2f>
 80103be:	1c01      	adds	r1, r0, #0
 80103c0:	9007      	str	r0, [sp, #28]
 80103c2:	1c28      	adds	r0, r5, #0
 80103c4:	f7f3 fe6c 	bl	80040a0 <__aeabi_fsub>
 80103c8:	2187      	movs	r1, #135	; 0x87
 80103ca:	05c9      	lsls	r1, r1, #23
 80103cc:	f7f3 fd1a 	bl	8003e04 <__aeabi_fmul>
 80103d0:	1c07      	adds	r7, r0, #0
 80103d2:	f7f4 f81b 	bl	800440c <__aeabi_f2iz>
 80103d6:	f7f4 f839 	bl	800444c <__aeabi_i2f>
 80103da:	1c01      	adds	r1, r0, #0
 80103dc:	9008      	str	r0, [sp, #32]
 80103de:	1c05      	adds	r5, r0, #0
 80103e0:	1c38      	adds	r0, r7, #0
 80103e2:	f7f3 fe5d 	bl	80040a0 <__aeabi_fsub>
 80103e6:	2187      	movs	r1, #135	; 0x87
 80103e8:	05c9      	lsls	r1, r1, #23
 80103ea:	f7f3 fd0b 	bl	8003e04 <__aeabi_fmul>
 80103ee:	2100      	movs	r1, #0
 80103f0:	9009      	str	r0, [sp, #36]	; 0x24
 80103f2:	f7f3 f80b 	bl	800340c <__aeabi_fcmpeq>
 80103f6:	2303      	movs	r3, #3
 80103f8:	2800      	cmp	r0, #0
 80103fa:	d006      	beq.n	801040a <__ieee754_rem_pio2f+0x256>
 80103fc:	2100      	movs	r1, #0
 80103fe:	1c28      	adds	r0, r5, #0
 8010400:	f7f3 f804 	bl	800340c <__aeabi_fcmpeq>
 8010404:	4243      	negs	r3, r0
 8010406:	4143      	adcs	r3, r0
 8010408:	3301      	adds	r3, #1
 801040a:	4a17      	ldr	r2, [pc, #92]	; (8010468 <__ieee754_rem_pio2f+0x2b4>)
 801040c:	0021      	movs	r1, r4
 801040e:	9201      	str	r2, [sp, #4]
 8010410:	2202      	movs	r2, #2
 8010412:	a807      	add	r0, sp, #28
 8010414:	9200      	str	r2, [sp, #0]
 8010416:	0032      	movs	r2, r6
 8010418:	f000 f938 	bl	801068c <__kernel_rem_pio2f>
 801041c:	9b05      	ldr	r3, [sp, #20]
 801041e:	0007      	movs	r7, r0
 8010420:	2b00      	cmp	r3, #0
 8010422:	db00      	blt.n	8010426 <__ieee754_rem_pio2f+0x272>
 8010424:	e6ef      	b.n	8010206 <__ieee754_rem_pio2f+0x52>
 8010426:	2280      	movs	r2, #128	; 0x80
 8010428:	6823      	ldr	r3, [r4, #0]
 801042a:	0612      	lsls	r2, r2, #24
 801042c:	189b      	adds	r3, r3, r2
 801042e:	6023      	str	r3, [r4, #0]
 8010430:	6863      	ldr	r3, [r4, #4]
 8010432:	189b      	adds	r3, r3, r2
 8010434:	6063      	str	r3, [r4, #4]
 8010436:	e709      	b.n	801024c <__ieee754_rem_pio2f+0x98>
 8010438:	3f490fd8 	.word	0x3f490fd8
 801043c:	4016cbe3 	.word	0x4016cbe3
 8010440:	3fc90fd0 	.word	0x3fc90fd0
 8010444:	3fc90f80 	.word	0x3fc90f80
 8010448:	37354443 	.word	0x37354443
 801044c:	37354400 	.word	0x37354400
 8010450:	2e85a308 	.word	0x2e85a308
 8010454:	43490f80 	.word	0x43490f80
 8010458:	3f22f984 	.word	0x3f22f984
 801045c:	0801672c 	.word	0x0801672c
 8010460:	2e85a300 	.word	0x2e85a300
 8010464:	248d3132 	.word	0x248d3132
 8010468:	080167ac 	.word	0x080167ac

0801046c <atanf>:
 801046c:	23a1      	movs	r3, #161	; 0xa1
 801046e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010470:	0045      	lsls	r5, r0, #1
 8010472:	1c04      	adds	r4, r0, #0
 8010474:	9001      	str	r0, [sp, #4]
 8010476:	086d      	lsrs	r5, r5, #1
 8010478:	05db      	lsls	r3, r3, #23
 801047a:	429d      	cmp	r5, r3
 801047c:	db0f      	blt.n	801049e <atanf+0x32>
 801047e:	23ff      	movs	r3, #255	; 0xff
 8010480:	05db      	lsls	r3, r3, #23
 8010482:	429d      	cmp	r5, r3
 8010484:	dd04      	ble.n	8010490 <atanf+0x24>
 8010486:	1c01      	adds	r1, r0, #0
 8010488:	f7f3 f952 	bl	8003730 <__aeabi_fadd>
 801048c:	1c04      	adds	r4, r0, #0
 801048e:	e004      	b.n	801049a <atanf+0x2e>
 8010490:	9b01      	ldr	r3, [sp, #4]
 8010492:	2b00      	cmp	r3, #0
 8010494:	dd00      	ble.n	8010498 <atanf+0x2c>
 8010496:	e0cc      	b.n	8010632 <atanf+0x1c6>
 8010498:	4c67      	ldr	r4, [pc, #412]	; (8010638 <atanf+0x1cc>)
 801049a:	1c20      	adds	r0, r4, #0
 801049c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801049e:	4b67      	ldr	r3, [pc, #412]	; (801063c <atanf+0x1d0>)
 80104a0:	429d      	cmp	r5, r3
 80104a2:	dc0f      	bgt.n	80104c4 <atanf+0x58>
 80104a4:	23c4      	movs	r3, #196	; 0xc4
 80104a6:	059b      	lsls	r3, r3, #22
 80104a8:	429d      	cmp	r5, r3
 80104aa:	da08      	bge.n	80104be <atanf+0x52>
 80104ac:	4964      	ldr	r1, [pc, #400]	; (8010640 <atanf+0x1d4>)
 80104ae:	f7f3 f93f 	bl	8003730 <__aeabi_fadd>
 80104b2:	21fe      	movs	r1, #254	; 0xfe
 80104b4:	0589      	lsls	r1, r1, #22
 80104b6:	f7f2 ffc3 	bl	8003440 <__aeabi_fcmpgt>
 80104ba:	2800      	cmp	r0, #0
 80104bc:	d1ed      	bne.n	801049a <atanf+0x2e>
 80104be:	2601      	movs	r6, #1
 80104c0:	4276      	negs	r6, r6
 80104c2:	e01b      	b.n	80104fc <atanf+0x90>
 80104c4:	f7ff fae8 	bl	800fa98 <fabsf>
 80104c8:	4b5e      	ldr	r3, [pc, #376]	; (8010644 <atanf+0x1d8>)
 80104ca:	1c04      	adds	r4, r0, #0
 80104cc:	429d      	cmp	r5, r3
 80104ce:	dc7b      	bgt.n	80105c8 <atanf+0x15c>
 80104d0:	4b5d      	ldr	r3, [pc, #372]	; (8010648 <atanf+0x1dc>)
 80104d2:	429d      	cmp	r5, r3
 80104d4:	dc67      	bgt.n	80105a6 <atanf+0x13a>
 80104d6:	1c01      	adds	r1, r0, #0
 80104d8:	f7f3 f92a 	bl	8003730 <__aeabi_fadd>
 80104dc:	21fe      	movs	r1, #254	; 0xfe
 80104de:	0589      	lsls	r1, r1, #22
 80104e0:	f7f3 fdde 	bl	80040a0 <__aeabi_fsub>
 80104e4:	2180      	movs	r1, #128	; 0x80
 80104e6:	1c05      	adds	r5, r0, #0
 80104e8:	05c9      	lsls	r1, r1, #23
 80104ea:	1c20      	adds	r0, r4, #0
 80104ec:	f7f3 f920 	bl	8003730 <__aeabi_fadd>
 80104f0:	1c01      	adds	r1, r0, #0
 80104f2:	1c28      	adds	r0, r5, #0
 80104f4:	f7f3 fabc 	bl	8003a70 <__aeabi_fdiv>
 80104f8:	2600      	movs	r6, #0
 80104fa:	1c04      	adds	r4, r0, #0
 80104fc:	1c21      	adds	r1, r4, #0
 80104fe:	1c20      	adds	r0, r4, #0
 8010500:	f7f3 fc80 	bl	8003e04 <__aeabi_fmul>
 8010504:	1c01      	adds	r1, r0, #0
 8010506:	1c07      	adds	r7, r0, #0
 8010508:	f7f3 fc7c 	bl	8003e04 <__aeabi_fmul>
 801050c:	494f      	ldr	r1, [pc, #316]	; (801064c <atanf+0x1e0>)
 801050e:	1c05      	adds	r5, r0, #0
 8010510:	f7f3 fc78 	bl	8003e04 <__aeabi_fmul>
 8010514:	494e      	ldr	r1, [pc, #312]	; (8010650 <atanf+0x1e4>)
 8010516:	f7f3 f90b 	bl	8003730 <__aeabi_fadd>
 801051a:	1c29      	adds	r1, r5, #0
 801051c:	f7f3 fc72 	bl	8003e04 <__aeabi_fmul>
 8010520:	494c      	ldr	r1, [pc, #304]	; (8010654 <atanf+0x1e8>)
 8010522:	f7f3 f905 	bl	8003730 <__aeabi_fadd>
 8010526:	1c29      	adds	r1, r5, #0
 8010528:	f7f3 fc6c 	bl	8003e04 <__aeabi_fmul>
 801052c:	494a      	ldr	r1, [pc, #296]	; (8010658 <atanf+0x1ec>)
 801052e:	f7f3 f8ff 	bl	8003730 <__aeabi_fadd>
 8010532:	1c29      	adds	r1, r5, #0
 8010534:	f7f3 fc66 	bl	8003e04 <__aeabi_fmul>
 8010538:	4948      	ldr	r1, [pc, #288]	; (801065c <atanf+0x1f0>)
 801053a:	f7f3 f8f9 	bl	8003730 <__aeabi_fadd>
 801053e:	1c29      	adds	r1, r5, #0
 8010540:	f7f3 fc60 	bl	8003e04 <__aeabi_fmul>
 8010544:	4946      	ldr	r1, [pc, #280]	; (8010660 <atanf+0x1f4>)
 8010546:	f7f3 f8f3 	bl	8003730 <__aeabi_fadd>
 801054a:	1c39      	adds	r1, r7, #0
 801054c:	f7f3 fc5a 	bl	8003e04 <__aeabi_fmul>
 8010550:	4944      	ldr	r1, [pc, #272]	; (8010664 <atanf+0x1f8>)
 8010552:	1c07      	adds	r7, r0, #0
 8010554:	1c28      	adds	r0, r5, #0
 8010556:	f7f3 fc55 	bl	8003e04 <__aeabi_fmul>
 801055a:	4943      	ldr	r1, [pc, #268]	; (8010668 <atanf+0x1fc>)
 801055c:	f7f3 fda0 	bl	80040a0 <__aeabi_fsub>
 8010560:	1c29      	adds	r1, r5, #0
 8010562:	f7f3 fc4f 	bl	8003e04 <__aeabi_fmul>
 8010566:	4941      	ldr	r1, [pc, #260]	; (801066c <atanf+0x200>)
 8010568:	f7f3 fd9a 	bl	80040a0 <__aeabi_fsub>
 801056c:	1c29      	adds	r1, r5, #0
 801056e:	f7f3 fc49 	bl	8003e04 <__aeabi_fmul>
 8010572:	493f      	ldr	r1, [pc, #252]	; (8010670 <atanf+0x204>)
 8010574:	f7f3 fd94 	bl	80040a0 <__aeabi_fsub>
 8010578:	1c29      	adds	r1, r5, #0
 801057a:	f7f3 fc43 	bl	8003e04 <__aeabi_fmul>
 801057e:	493d      	ldr	r1, [pc, #244]	; (8010674 <atanf+0x208>)
 8010580:	f7f3 fd8e 	bl	80040a0 <__aeabi_fsub>
 8010584:	1c29      	adds	r1, r5, #0
 8010586:	f7f3 fc3d 	bl	8003e04 <__aeabi_fmul>
 801058a:	1c01      	adds	r1, r0, #0
 801058c:	1c38      	adds	r0, r7, #0
 801058e:	f7f3 f8cf 	bl	8003730 <__aeabi_fadd>
 8010592:	1c21      	adds	r1, r4, #0
 8010594:	f7f3 fc36 	bl	8003e04 <__aeabi_fmul>
 8010598:	1c73      	adds	r3, r6, #1
 801059a:	d134      	bne.n	8010606 <atanf+0x19a>
 801059c:	1c01      	adds	r1, r0, #0
 801059e:	1c20      	adds	r0, r4, #0
 80105a0:	f7f3 fd7e 	bl	80040a0 <__aeabi_fsub>
 80105a4:	e772      	b.n	801048c <atanf+0x20>
 80105a6:	21fe      	movs	r1, #254	; 0xfe
 80105a8:	0589      	lsls	r1, r1, #22
 80105aa:	f7f3 fd79 	bl	80040a0 <__aeabi_fsub>
 80105ae:	21fe      	movs	r1, #254	; 0xfe
 80105b0:	1c05      	adds	r5, r0, #0
 80105b2:	0589      	lsls	r1, r1, #22
 80105b4:	1c20      	adds	r0, r4, #0
 80105b6:	f7f3 f8bb 	bl	8003730 <__aeabi_fadd>
 80105ba:	1c01      	adds	r1, r0, #0
 80105bc:	1c28      	adds	r0, r5, #0
 80105be:	f7f3 fa57 	bl	8003a70 <__aeabi_fdiv>
 80105c2:	2601      	movs	r6, #1
 80105c4:	1c04      	adds	r4, r0, #0
 80105c6:	e799      	b.n	80104fc <atanf+0x90>
 80105c8:	4b2b      	ldr	r3, [pc, #172]	; (8010678 <atanf+0x20c>)
 80105ca:	429d      	cmp	r5, r3
 80105cc:	dc14      	bgt.n	80105f8 <atanf+0x18c>
 80105ce:	21ff      	movs	r1, #255	; 0xff
 80105d0:	0589      	lsls	r1, r1, #22
 80105d2:	f7f3 fd65 	bl	80040a0 <__aeabi_fsub>
 80105d6:	21ff      	movs	r1, #255	; 0xff
 80105d8:	1c05      	adds	r5, r0, #0
 80105da:	0589      	lsls	r1, r1, #22
 80105dc:	1c20      	adds	r0, r4, #0
 80105de:	f7f3 fc11 	bl	8003e04 <__aeabi_fmul>
 80105e2:	21fe      	movs	r1, #254	; 0xfe
 80105e4:	0589      	lsls	r1, r1, #22
 80105e6:	f7f3 f8a3 	bl	8003730 <__aeabi_fadd>
 80105ea:	1c01      	adds	r1, r0, #0
 80105ec:	1c28      	adds	r0, r5, #0
 80105ee:	f7f3 fa3f 	bl	8003a70 <__aeabi_fdiv>
 80105f2:	2602      	movs	r6, #2
 80105f4:	1c04      	adds	r4, r0, #0
 80105f6:	e781      	b.n	80104fc <atanf+0x90>
 80105f8:	1c01      	adds	r1, r0, #0
 80105fa:	4820      	ldr	r0, [pc, #128]	; (801067c <atanf+0x210>)
 80105fc:	f7f3 fa38 	bl	8003a70 <__aeabi_fdiv>
 8010600:	2603      	movs	r6, #3
 8010602:	1c04      	adds	r4, r0, #0
 8010604:	e77a      	b.n	80104fc <atanf+0x90>
 8010606:	4b1e      	ldr	r3, [pc, #120]	; (8010680 <atanf+0x214>)
 8010608:	00b6      	lsls	r6, r6, #2
 801060a:	58f1      	ldr	r1, [r6, r3]
 801060c:	f7f3 fd48 	bl	80040a0 <__aeabi_fsub>
 8010610:	1c21      	adds	r1, r4, #0
 8010612:	f7f3 fd45 	bl	80040a0 <__aeabi_fsub>
 8010616:	4d1b      	ldr	r5, [pc, #108]	; (8010684 <atanf+0x218>)
 8010618:	1c01      	adds	r1, r0, #0
 801061a:	5970      	ldr	r0, [r6, r5]
 801061c:	f7f3 fd40 	bl	80040a0 <__aeabi_fsub>
 8010620:	9b01      	ldr	r3, [sp, #4]
 8010622:	1c04      	adds	r4, r0, #0
 8010624:	2b00      	cmp	r3, #0
 8010626:	db00      	blt.n	801062a <atanf+0x1be>
 8010628:	e737      	b.n	801049a <atanf+0x2e>
 801062a:	2380      	movs	r3, #128	; 0x80
 801062c:	061b      	lsls	r3, r3, #24
 801062e:	18c4      	adds	r4, r0, r3
 8010630:	e733      	b.n	801049a <atanf+0x2e>
 8010632:	4c15      	ldr	r4, [pc, #84]	; (8010688 <atanf+0x21c>)
 8010634:	e731      	b.n	801049a <atanf+0x2e>
 8010636:	46c0      	nop			; (mov r8, r8)
 8010638:	bfc90fdb 	.word	0xbfc90fdb
 801063c:	3edfffff 	.word	0x3edfffff
 8010640:	7149f2ca 	.word	0x7149f2ca
 8010644:	3f97ffff 	.word	0x3f97ffff
 8010648:	3f2fffff 	.word	0x3f2fffff
 801064c:	3c8569d7 	.word	0x3c8569d7
 8010650:	3d4bda59 	.word	0x3d4bda59
 8010654:	3d886b35 	.word	0x3d886b35
 8010658:	3dba2e6e 	.word	0x3dba2e6e
 801065c:	3e124925 	.word	0x3e124925
 8010660:	3eaaaaab 	.word	0x3eaaaaab
 8010664:	bd15a221 	.word	0xbd15a221
 8010668:	3d6ef16b 	.word	0x3d6ef16b
 801066c:	3d9d8795 	.word	0x3d9d8795
 8010670:	3de38e38 	.word	0x3de38e38
 8010674:	3e4ccccd 	.word	0x3e4ccccd
 8010678:	401bffff 	.word	0x401bffff
 801067c:	bf800000 	.word	0xbf800000
 8010680:	08016ad4 	.word	0x08016ad4
 8010684:	08016ac4 	.word	0x08016ac4
 8010688:	3fc90fdb 	.word	0x3fc90fdb

0801068c <__kernel_rem_pio2f>:
 801068c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801068e:	b0dd      	sub	sp, #372	; 0x174
 8010690:	9206      	str	r2, [sp, #24]
 8010692:	9a62      	ldr	r2, [sp, #392]	; 0x188
 8010694:	9307      	str	r3, [sp, #28]
 8010696:	4bca      	ldr	r3, [pc, #808]	; (80109c0 <__kernel_rem_pio2f+0x334>)
 8010698:	0092      	lsls	r2, r2, #2
 801069a:	58d3      	ldr	r3, [r2, r3]
 801069c:	9009      	str	r0, [sp, #36]	; 0x24
 801069e:	9304      	str	r3, [sp, #16]
 80106a0:	9b07      	ldr	r3, [sp, #28]
 80106a2:	9102      	str	r1, [sp, #8]
 80106a4:	3b01      	subs	r3, #1
 80106a6:	9305      	str	r3, [sp, #20]
 80106a8:	2300      	movs	r3, #0
 80106aa:	9301      	str	r3, [sp, #4]
 80106ac:	9b06      	ldr	r3, [sp, #24]
 80106ae:	3304      	adds	r3, #4
 80106b0:	db07      	blt.n	80106c2 <__kernel_rem_pio2f+0x36>
 80106b2:	2107      	movs	r1, #7
 80106b4:	9b06      	ldr	r3, [sp, #24]
 80106b6:	1eda      	subs	r2, r3, #3
 80106b8:	17d3      	asrs	r3, r2, #31
 80106ba:	400b      	ands	r3, r1
 80106bc:	189b      	adds	r3, r3, r2
 80106be:	10db      	asrs	r3, r3, #3
 80106c0:	9301      	str	r3, [sp, #4]
 80106c2:	9b01      	ldr	r3, [sp, #4]
 80106c4:	ae20      	add	r6, sp, #128	; 0x80
 80106c6:	3301      	adds	r3, #1
 80106c8:	00db      	lsls	r3, r3, #3
 80106ca:	9308      	str	r3, [sp, #32]
 80106cc:	9a08      	ldr	r2, [sp, #32]
 80106ce:	9b06      	ldr	r3, [sp, #24]
 80106d0:	1a9b      	subs	r3, r3, r2
 80106d2:	9300      	str	r3, [sp, #0]
 80106d4:	9a05      	ldr	r2, [sp, #20]
 80106d6:	9b01      	ldr	r3, [sp, #4]
 80106d8:	1a9d      	subs	r5, r3, r2
 80106da:	002c      	movs	r4, r5
 80106dc:	9b04      	ldr	r3, [sp, #16]
 80106de:	189f      	adds	r7, r3, r2
 80106e0:	1b63      	subs	r3, r4, r5
 80106e2:	429f      	cmp	r7, r3
 80106e4:	da0d      	bge.n	8010702 <__kernel_rem_pio2f+0x76>
 80106e6:	9c07      	ldr	r4, [sp, #28]
 80106e8:	af48      	add	r7, sp, #288	; 0x120
 80106ea:	9b07      	ldr	r3, [sp, #28]
 80106ec:	9a04      	ldr	r2, [sp, #16]
 80106ee:	1ae3      	subs	r3, r4, r3
 80106f0:	429a      	cmp	r2, r3
 80106f2:	db25      	blt.n	8010740 <__kernel_rem_pio2f+0xb4>
 80106f4:	ab20      	add	r3, sp, #128	; 0x80
 80106f6:	00a5      	lsls	r5, r4, #2
 80106f8:	18ed      	adds	r5, r5, r3
 80106fa:	2300      	movs	r3, #0
 80106fc:	2600      	movs	r6, #0
 80106fe:	9303      	str	r3, [sp, #12]
 8010700:	e016      	b.n	8010730 <__kernel_rem_pio2f+0xa4>
 8010702:	2000      	movs	r0, #0
 8010704:	2c00      	cmp	r4, #0
 8010706:	db04      	blt.n	8010712 <__kernel_rem_pio2f+0x86>
 8010708:	9a63      	ldr	r2, [sp, #396]	; 0x18c
 801070a:	00a3      	lsls	r3, r4, #2
 801070c:	58d0      	ldr	r0, [r2, r3]
 801070e:	f7f3 fe9d 	bl	800444c <__aeabi_i2f>
 8010712:	c601      	stmia	r6!, {r0}
 8010714:	3401      	adds	r4, #1
 8010716:	e7e3      	b.n	80106e0 <__kernel_rem_pio2f+0x54>
 8010718:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801071a:	00b3      	lsls	r3, r6, #2
 801071c:	6829      	ldr	r1, [r5, #0]
 801071e:	58d0      	ldr	r0, [r2, r3]
 8010720:	f7f3 fb70 	bl	8003e04 <__aeabi_fmul>
 8010724:	1c01      	adds	r1, r0, #0
 8010726:	9803      	ldr	r0, [sp, #12]
 8010728:	f7f3 f802 	bl	8003730 <__aeabi_fadd>
 801072c:	3601      	adds	r6, #1
 801072e:	9003      	str	r0, [sp, #12]
 8010730:	9b05      	ldr	r3, [sp, #20]
 8010732:	3d04      	subs	r5, #4
 8010734:	429e      	cmp	r6, r3
 8010736:	ddef      	ble.n	8010718 <__kernel_rem_pio2f+0x8c>
 8010738:	9b03      	ldr	r3, [sp, #12]
 801073a:	3401      	adds	r4, #1
 801073c:	c708      	stmia	r7!, {r3}
 801073e:	e7d4      	b.n	80106ea <__kernel_rem_pio2f+0x5e>
 8010740:	9b04      	ldr	r3, [sp, #16]
 8010742:	aa0c      	add	r2, sp, #48	; 0x30
 8010744:	009b      	lsls	r3, r3, #2
 8010746:	189b      	adds	r3, r3, r2
 8010748:	930b      	str	r3, [sp, #44]	; 0x2c
 801074a:	9b01      	ldr	r3, [sp, #4]
 801074c:	9a63      	ldr	r2, [sp, #396]	; 0x18c
 801074e:	009b      	lsls	r3, r3, #2
 8010750:	18d3      	adds	r3, r2, r3
 8010752:	9e04      	ldr	r6, [sp, #16]
 8010754:	930a      	str	r3, [sp, #40]	; 0x28
 8010756:	21f0      	movs	r1, #240	; 0xf0
 8010758:	0035      	movs	r5, r6
 801075a:	aa0c      	add	r2, sp, #48	; 0x30
 801075c:	00b3      	lsls	r3, r6, #2
 801075e:	1852      	adds	r2, r2, r1
 8010760:	af0c      	add	r7, sp, #48	; 0x30
 8010762:	58d4      	ldr	r4, [r2, r3]
 8010764:	9701      	str	r7, [sp, #4]
 8010766:	2d00      	cmp	r5, #0
 8010768:	dc64      	bgt.n	8010834 <__kernel_rem_pio2f+0x1a8>
 801076a:	9900      	ldr	r1, [sp, #0]
 801076c:	1c20      	adds	r0, r4, #0
 801076e:	f000 fa37 	bl	8010be0 <scalbnf>
 8010772:	21f8      	movs	r1, #248	; 0xf8
 8010774:	0589      	lsls	r1, r1, #22
 8010776:	1c04      	adds	r4, r0, #0
 8010778:	f7f3 fb44 	bl	8003e04 <__aeabi_fmul>
 801077c:	f000 fa86 	bl	8010c8c <floorf>
 8010780:	2182      	movs	r1, #130	; 0x82
 8010782:	05c9      	lsls	r1, r1, #23
 8010784:	f7f3 fb3e 	bl	8003e04 <__aeabi_fmul>
 8010788:	1c01      	adds	r1, r0, #0
 801078a:	1c20      	adds	r0, r4, #0
 801078c:	f7f3 fc88 	bl	80040a0 <__aeabi_fsub>
 8010790:	1c04      	adds	r4, r0, #0
 8010792:	f7f3 fe3b 	bl	800440c <__aeabi_f2iz>
 8010796:	9003      	str	r0, [sp, #12]
 8010798:	f7f3 fe58 	bl	800444c <__aeabi_i2f>
 801079c:	1c01      	adds	r1, r0, #0
 801079e:	1c20      	adds	r0, r4, #0
 80107a0:	f7f3 fc7e 	bl	80040a0 <__aeabi_fsub>
 80107a4:	9b00      	ldr	r3, [sp, #0]
 80107a6:	1c04      	adds	r4, r0, #0
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	dd65      	ble.n	8010878 <__kernel_rem_pio2f+0x1ec>
 80107ac:	2008      	movs	r0, #8
 80107ae:	1e73      	subs	r3, r6, #1
 80107b0:	009b      	lsls	r3, r3, #2
 80107b2:	aa0c      	add	r2, sp, #48	; 0x30
 80107b4:	589a      	ldr	r2, [r3, r2]
 80107b6:	9900      	ldr	r1, [sp, #0]
 80107b8:	9d03      	ldr	r5, [sp, #12]
 80107ba:	1a40      	subs	r0, r0, r1
 80107bc:	0011      	movs	r1, r2
 80107be:	4101      	asrs	r1, r0
 80107c0:	186d      	adds	r5, r5, r1
 80107c2:	4081      	lsls	r1, r0
 80107c4:	1a52      	subs	r2, r2, r1
 80107c6:	a90c      	add	r1, sp, #48	; 0x30
 80107c8:	505a      	str	r2, [r3, r1]
 80107ca:	2307      	movs	r3, #7
 80107cc:	9900      	ldr	r1, [sp, #0]
 80107ce:	9503      	str	r5, [sp, #12]
 80107d0:	1a5b      	subs	r3, r3, r1
 80107d2:	411a      	asrs	r2, r3
 80107d4:	9201      	str	r2, [sp, #4]
 80107d6:	9b01      	ldr	r3, [sp, #4]
 80107d8:	2b00      	cmp	r3, #0
 80107da:	dd5e      	ble.n	801089a <__kernel_rem_pio2f+0x20e>
 80107dc:	9b03      	ldr	r3, [sp, #12]
 80107de:	2200      	movs	r2, #0
 80107e0:	3301      	adds	r3, #1
 80107e2:	9303      	str	r3, [sp, #12]
 80107e4:	2301      	movs	r3, #1
 80107e6:	2080      	movs	r0, #128	; 0x80
 80107e8:	0015      	movs	r5, r2
 80107ea:	21ff      	movs	r1, #255	; 0xff
 80107ec:	469c      	mov	ip, r3
 80107ee:	0040      	lsls	r0, r0, #1
 80107f0:	4296      	cmp	r6, r2
 80107f2:	dd00      	ble.n	80107f6 <__kernel_rem_pio2f+0x16a>
 80107f4:	e084      	b.n	8010900 <__kernel_rem_pio2f+0x274>
 80107f6:	9b00      	ldr	r3, [sp, #0]
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	dd05      	ble.n	8010808 <__kernel_rem_pio2f+0x17c>
 80107fc:	2b01      	cmp	r3, #1
 80107fe:	d100      	bne.n	8010802 <__kernel_rem_pio2f+0x176>
 8010800:	e08e      	b.n	8010920 <__kernel_rem_pio2f+0x294>
 8010802:	2b02      	cmp	r3, #2
 8010804:	d100      	bne.n	8010808 <__kernel_rem_pio2f+0x17c>
 8010806:	e094      	b.n	8010932 <__kernel_rem_pio2f+0x2a6>
 8010808:	9b01      	ldr	r3, [sp, #4]
 801080a:	2b02      	cmp	r3, #2
 801080c:	d145      	bne.n	801089a <__kernel_rem_pio2f+0x20e>
 801080e:	20fe      	movs	r0, #254	; 0xfe
 8010810:	1c21      	adds	r1, r4, #0
 8010812:	0580      	lsls	r0, r0, #22
 8010814:	f7f3 fc44 	bl	80040a0 <__aeabi_fsub>
 8010818:	1c04      	adds	r4, r0, #0
 801081a:	2d00      	cmp	r5, #0
 801081c:	d03d      	beq.n	801089a <__kernel_rem_pio2f+0x20e>
 801081e:	20fe      	movs	r0, #254	; 0xfe
 8010820:	9900      	ldr	r1, [sp, #0]
 8010822:	0580      	lsls	r0, r0, #22
 8010824:	f000 f9dc 	bl	8010be0 <scalbnf>
 8010828:	1c01      	adds	r1, r0, #0
 801082a:	1c20      	adds	r0, r4, #0
 801082c:	f7f3 fc38 	bl	80040a0 <__aeabi_fsub>
 8010830:	1c04      	adds	r4, r0, #0
 8010832:	e032      	b.n	801089a <__kernel_rem_pio2f+0x20e>
 8010834:	21ee      	movs	r1, #238	; 0xee
 8010836:	1c20      	adds	r0, r4, #0
 8010838:	0589      	lsls	r1, r1, #22
 801083a:	f7f3 fae3 	bl	8003e04 <__aeabi_fmul>
 801083e:	f7f3 fde5 	bl	800440c <__aeabi_f2iz>
 8010842:	f7f3 fe03 	bl	800444c <__aeabi_i2f>
 8010846:	2187      	movs	r1, #135	; 0x87
 8010848:	05c9      	lsls	r1, r1, #23
 801084a:	9003      	str	r0, [sp, #12]
 801084c:	f7f3 fada 	bl	8003e04 <__aeabi_fmul>
 8010850:	1c01      	adds	r1, r0, #0
 8010852:	1c20      	adds	r0, r4, #0
 8010854:	f7f3 fc24 	bl	80040a0 <__aeabi_fsub>
 8010858:	f7f3 fdd8 	bl	800440c <__aeabi_f2iz>
 801085c:	21f0      	movs	r1, #240	; 0xf0
 801085e:	9b01      	ldr	r3, [sp, #4]
 8010860:	3d01      	subs	r5, #1
 8010862:	c301      	stmia	r3!, {r0}
 8010864:	aa0c      	add	r2, sp, #48	; 0x30
 8010866:	9301      	str	r3, [sp, #4]
 8010868:	1852      	adds	r2, r2, r1
 801086a:	00ab      	lsls	r3, r5, #2
 801086c:	58d1      	ldr	r1, [r2, r3]
 801086e:	9803      	ldr	r0, [sp, #12]
 8010870:	f7f2 ff5e 	bl	8003730 <__aeabi_fadd>
 8010874:	1c04      	adds	r4, r0, #0
 8010876:	e776      	b.n	8010766 <__kernel_rem_pio2f+0xda>
 8010878:	9b00      	ldr	r3, [sp, #0]
 801087a:	2b00      	cmp	r3, #0
 801087c:	d106      	bne.n	801088c <__kernel_rem_pio2f+0x200>
 801087e:	1e73      	subs	r3, r6, #1
 8010880:	009b      	lsls	r3, r3, #2
 8010882:	aa0c      	add	r2, sp, #48	; 0x30
 8010884:	589b      	ldr	r3, [r3, r2]
 8010886:	11db      	asrs	r3, r3, #7
 8010888:	9301      	str	r3, [sp, #4]
 801088a:	e7a4      	b.n	80107d6 <__kernel_rem_pio2f+0x14a>
 801088c:	21fc      	movs	r1, #252	; 0xfc
 801088e:	0589      	lsls	r1, r1, #22
 8010890:	f7f2 fde0 	bl	8003454 <__aeabi_fcmpge>
 8010894:	2800      	cmp	r0, #0
 8010896:	d130      	bne.n	80108fa <__kernel_rem_pio2f+0x26e>
 8010898:	9001      	str	r0, [sp, #4]
 801089a:	2100      	movs	r1, #0
 801089c:	1c20      	adds	r0, r4, #0
 801089e:	f7f2 fdb5 	bl	800340c <__aeabi_fcmpeq>
 80108a2:	2800      	cmp	r0, #0
 80108a4:	d100      	bne.n	80108a8 <__kernel_rem_pio2f+0x21c>
 80108a6:	e08f      	b.n	80109c8 <__kernel_rem_pio2f+0x33c>
 80108a8:	1e77      	subs	r7, r6, #1
 80108aa:	003b      	movs	r3, r7
 80108ac:	2200      	movs	r2, #0
 80108ae:	9904      	ldr	r1, [sp, #16]
 80108b0:	428b      	cmp	r3, r1
 80108b2:	da44      	bge.n	801093e <__kernel_rem_pio2f+0x2b2>
 80108b4:	2a00      	cmp	r2, #0
 80108b6:	d05c      	beq.n	8010972 <__kernel_rem_pio2f+0x2e6>
 80108b8:	9b00      	ldr	r3, [sp, #0]
 80108ba:	aa0c      	add	r2, sp, #48	; 0x30
 80108bc:	3b08      	subs	r3, #8
 80108be:	9300      	str	r3, [sp, #0]
 80108c0:	00bb      	lsls	r3, r7, #2
 80108c2:	589b      	ldr	r3, [r3, r2]
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d079      	beq.n	80109bc <__kernel_rem_pio2f+0x330>
 80108c8:	20fe      	movs	r0, #254	; 0xfe
 80108ca:	9900      	ldr	r1, [sp, #0]
 80108cc:	0580      	lsls	r0, r0, #22
 80108ce:	f000 f987 	bl	8010be0 <scalbnf>
 80108d2:	003d      	movs	r5, r7
 80108d4:	1c04      	adds	r4, r0, #0
 80108d6:	2d00      	cmp	r5, #0
 80108d8:	db00      	blt.n	80108dc <__kernel_rem_pio2f+0x250>
 80108da:	e0ac      	b.n	8010a36 <__kernel_rem_pio2f+0x3aa>
 80108dc:	003c      	movs	r4, r7
 80108de:	4b39      	ldr	r3, [pc, #228]	; (80109c4 <__kernel_rem_pio2f+0x338>)
 80108e0:	9306      	str	r3, [sp, #24]
 80108e2:	2c00      	cmp	r4, #0
 80108e4:	da00      	bge.n	80108e8 <__kernel_rem_pio2f+0x25c>
 80108e6:	e0d5      	b.n	8010a94 <__kernel_rem_pio2f+0x408>
 80108e8:	00a3      	lsls	r3, r4, #2
 80108ea:	aa48      	add	r2, sp, #288	; 0x120
 80108ec:	189b      	adds	r3, r3, r2
 80108ee:	9305      	str	r3, [sp, #20]
 80108f0:	1b3b      	subs	r3, r7, r4
 80108f2:	2600      	movs	r6, #0
 80108f4:	2500      	movs	r5, #0
 80108f6:	9300      	str	r3, [sp, #0]
 80108f8:	e0be      	b.n	8010a78 <__kernel_rem_pio2f+0x3ec>
 80108fa:	2302      	movs	r3, #2
 80108fc:	9301      	str	r3, [sp, #4]
 80108fe:	e76d      	b.n	80107dc <__kernel_rem_pio2f+0x150>
 8010900:	683b      	ldr	r3, [r7, #0]
 8010902:	2d00      	cmp	r5, #0
 8010904:	d108      	bne.n	8010918 <__kernel_rem_pio2f+0x28c>
 8010906:	2b00      	cmp	r3, #0
 8010908:	d002      	beq.n	8010910 <__kernel_rem_pio2f+0x284>
 801090a:	1ac3      	subs	r3, r0, r3
 801090c:	603b      	str	r3, [r7, #0]
 801090e:	4663      	mov	r3, ip
 8010910:	001d      	movs	r5, r3
 8010912:	3201      	adds	r2, #1
 8010914:	3704      	adds	r7, #4
 8010916:	e76b      	b.n	80107f0 <__kernel_rem_pio2f+0x164>
 8010918:	1acb      	subs	r3, r1, r3
 801091a:	603b      	str	r3, [r7, #0]
 801091c:	002b      	movs	r3, r5
 801091e:	e7f7      	b.n	8010910 <__kernel_rem_pio2f+0x284>
 8010920:	217f      	movs	r1, #127	; 0x7f
 8010922:	1e73      	subs	r3, r6, #1
 8010924:	009b      	lsls	r3, r3, #2
 8010926:	aa0c      	add	r2, sp, #48	; 0x30
 8010928:	589a      	ldr	r2, [r3, r2]
 801092a:	400a      	ands	r2, r1
 801092c:	a90c      	add	r1, sp, #48	; 0x30
 801092e:	505a      	str	r2, [r3, r1]
 8010930:	e76a      	b.n	8010808 <__kernel_rem_pio2f+0x17c>
 8010932:	1e73      	subs	r3, r6, #1
 8010934:	009b      	lsls	r3, r3, #2
 8010936:	aa0c      	add	r2, sp, #48	; 0x30
 8010938:	213f      	movs	r1, #63	; 0x3f
 801093a:	589a      	ldr	r2, [r3, r2]
 801093c:	e7f5      	b.n	801092a <__kernel_rem_pio2f+0x29e>
 801093e:	0099      	lsls	r1, r3, #2
 8010940:	a80c      	add	r0, sp, #48	; 0x30
 8010942:	5809      	ldr	r1, [r1, r0]
 8010944:	3b01      	subs	r3, #1
 8010946:	430a      	orrs	r2, r1
 8010948:	e7b1      	b.n	80108ae <__kernel_rem_pio2f+0x222>
 801094a:	3301      	adds	r3, #1
 801094c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801094e:	009a      	lsls	r2, r3, #2
 8010950:	4252      	negs	r2, r2
 8010952:	588a      	ldr	r2, [r1, r2]
 8010954:	2a00      	cmp	r2, #0
 8010956:	d0f8      	beq.n	801094a <__kernel_rem_pio2f+0x2be>
 8010958:	9a07      	ldr	r2, [sp, #28]
 801095a:	18f3      	adds	r3, r6, r3
 801095c:	18b4      	adds	r4, r6, r2
 801095e:	00a4      	lsls	r4, r4, #2
 8010960:	aa20      	add	r2, sp, #128	; 0x80
 8010962:	1c75      	adds	r5, r6, #1
 8010964:	1914      	adds	r4, r2, r4
 8010966:	9301      	str	r3, [sp, #4]
 8010968:	9b01      	ldr	r3, [sp, #4]
 801096a:	42ab      	cmp	r3, r5
 801096c:	da03      	bge.n	8010976 <__kernel_rem_pio2f+0x2ea>
 801096e:	001e      	movs	r6, r3
 8010970:	e6f1      	b.n	8010756 <__kernel_rem_pio2f+0xca>
 8010972:	2301      	movs	r3, #1
 8010974:	e7ea      	b.n	801094c <__kernel_rem_pio2f+0x2c0>
 8010976:	00ab      	lsls	r3, r5, #2
 8010978:	9303      	str	r3, [sp, #12]
 801097a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801097c:	00aa      	lsls	r2, r5, #2
 801097e:	5898      	ldr	r0, [r3, r2]
 8010980:	f7f3 fd64 	bl	800444c <__aeabi_i2f>
 8010984:	2700      	movs	r7, #0
 8010986:	2600      	movs	r6, #0
 8010988:	6020      	str	r0, [r4, #0]
 801098a:	9b05      	ldr	r3, [sp, #20]
 801098c:	429f      	cmp	r7, r3
 801098e:	dd07      	ble.n	80109a0 <__kernel_rem_pio2f+0x314>
 8010990:	21f0      	movs	r1, #240	; 0xf0
 8010992:	9a03      	ldr	r2, [sp, #12]
 8010994:	ab0c      	add	r3, sp, #48	; 0x30
 8010996:	185b      	adds	r3, r3, r1
 8010998:	509e      	str	r6, [r3, r2]
 801099a:	3501      	adds	r5, #1
 801099c:	3404      	adds	r4, #4
 801099e:	e7e3      	b.n	8010968 <__kernel_rem_pio2f+0x2dc>
 80109a0:	00bb      	lsls	r3, r7, #2
 80109a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80109a4:	425a      	negs	r2, r3
 80109a6:	58c9      	ldr	r1, [r1, r3]
 80109a8:	58a0      	ldr	r0, [r4, r2]
 80109aa:	f7f3 fa2b 	bl	8003e04 <__aeabi_fmul>
 80109ae:	1c01      	adds	r1, r0, #0
 80109b0:	1c30      	adds	r0, r6, #0
 80109b2:	f7f2 febd 	bl	8003730 <__aeabi_fadd>
 80109b6:	3701      	adds	r7, #1
 80109b8:	1c06      	adds	r6, r0, #0
 80109ba:	e7e6      	b.n	801098a <__kernel_rem_pio2f+0x2fe>
 80109bc:	3f01      	subs	r7, #1
 80109be:	e77b      	b.n	80108b8 <__kernel_rem_pio2f+0x22c>
 80109c0:	08016b10 	.word	0x08016b10
 80109c4:	08016ae4 	.word	0x08016ae4
 80109c8:	9b08      	ldr	r3, [sp, #32]
 80109ca:	9a06      	ldr	r2, [sp, #24]
 80109cc:	1c20      	adds	r0, r4, #0
 80109ce:	1a99      	subs	r1, r3, r2
 80109d0:	f000 f906 	bl	8010be0 <scalbnf>
 80109d4:	2187      	movs	r1, #135	; 0x87
 80109d6:	05c9      	lsls	r1, r1, #23
 80109d8:	1c04      	adds	r4, r0, #0
 80109da:	f7f2 fd3b 	bl	8003454 <__aeabi_fcmpge>
 80109de:	2800      	cmp	r0, #0
 80109e0:	d021      	beq.n	8010a26 <__kernel_rem_pio2f+0x39a>
 80109e2:	21ee      	movs	r1, #238	; 0xee
 80109e4:	1c20      	adds	r0, r4, #0
 80109e6:	0589      	lsls	r1, r1, #22
 80109e8:	f7f3 fa0c 	bl	8003e04 <__aeabi_fmul>
 80109ec:	f7f3 fd0e 	bl	800440c <__aeabi_f2iz>
 80109f0:	f7f3 fd2c 	bl	800444c <__aeabi_i2f>
 80109f4:	2187      	movs	r1, #135	; 0x87
 80109f6:	05c9      	lsls	r1, r1, #23
 80109f8:	1c05      	adds	r5, r0, #0
 80109fa:	f7f3 fa03 	bl	8003e04 <__aeabi_fmul>
 80109fe:	1c01      	adds	r1, r0, #0
 8010a00:	1c20      	adds	r0, r4, #0
 8010a02:	f7f3 fb4d 	bl	80040a0 <__aeabi_fsub>
 8010a06:	f7f3 fd01 	bl	800440c <__aeabi_f2iz>
 8010a0a:	00b7      	lsls	r7, r6, #2
 8010a0c:	ab0c      	add	r3, sp, #48	; 0x30
 8010a0e:	51d8      	str	r0, [r3, r7]
 8010a10:	9b00      	ldr	r3, [sp, #0]
 8010a12:	1c28      	adds	r0, r5, #0
 8010a14:	3308      	adds	r3, #8
 8010a16:	9300      	str	r3, [sp, #0]
 8010a18:	f7f3 fcf8 	bl	800440c <__aeabi_f2iz>
 8010a1c:	1c77      	adds	r7, r6, #1
 8010a1e:	00bc      	lsls	r4, r7, #2
 8010a20:	ab0c      	add	r3, sp, #48	; 0x30
 8010a22:	5118      	str	r0, [r3, r4]
 8010a24:	e750      	b.n	80108c8 <__kernel_rem_pio2f+0x23c>
 8010a26:	1c20      	adds	r0, r4, #0
 8010a28:	f7f3 fcf0 	bl	800440c <__aeabi_f2iz>
 8010a2c:	00b5      	lsls	r5, r6, #2
 8010a2e:	ab0c      	add	r3, sp, #48	; 0x30
 8010a30:	0037      	movs	r7, r6
 8010a32:	5158      	str	r0, [r3, r5]
 8010a34:	e748      	b.n	80108c8 <__kernel_rem_pio2f+0x23c>
 8010a36:	ab0c      	add	r3, sp, #48	; 0x30
 8010a38:	00ae      	lsls	r6, r5, #2
 8010a3a:	58f0      	ldr	r0, [r6, r3]
 8010a3c:	f7f3 fd06 	bl	800444c <__aeabi_i2f>
 8010a40:	1c21      	adds	r1, r4, #0
 8010a42:	f7f3 f9df 	bl	8003e04 <__aeabi_fmul>
 8010a46:	22f0      	movs	r2, #240	; 0xf0
 8010a48:	21ee      	movs	r1, #238	; 0xee
 8010a4a:	ab0c      	add	r3, sp, #48	; 0x30
 8010a4c:	189b      	adds	r3, r3, r2
 8010a4e:	5198      	str	r0, [r3, r6]
 8010a50:	0589      	lsls	r1, r1, #22
 8010a52:	1c20      	adds	r0, r4, #0
 8010a54:	f7f3 f9d6 	bl	8003e04 <__aeabi_fmul>
 8010a58:	3d01      	subs	r5, #1
 8010a5a:	1c04      	adds	r4, r0, #0
 8010a5c:	e73b      	b.n	80108d6 <__kernel_rem_pio2f+0x24a>
 8010a5e:	9a05      	ldr	r2, [sp, #20]
 8010a60:	00ab      	lsls	r3, r5, #2
 8010a62:	58d1      	ldr	r1, [r2, r3]
 8010a64:	9a06      	ldr	r2, [sp, #24]
 8010a66:	3501      	adds	r5, #1
 8010a68:	5898      	ldr	r0, [r3, r2]
 8010a6a:	f7f3 f9cb 	bl	8003e04 <__aeabi_fmul>
 8010a6e:	1c01      	adds	r1, r0, #0
 8010a70:	1c30      	adds	r0, r6, #0
 8010a72:	f7f2 fe5d 	bl	8003730 <__aeabi_fadd>
 8010a76:	1c06      	adds	r6, r0, #0
 8010a78:	9b04      	ldr	r3, [sp, #16]
 8010a7a:	429d      	cmp	r5, r3
 8010a7c:	dc02      	bgt.n	8010a84 <__kernel_rem_pio2f+0x3f8>
 8010a7e:	9b00      	ldr	r3, [sp, #0]
 8010a80:	429d      	cmp	r5, r3
 8010a82:	ddec      	ble.n	8010a5e <__kernel_rem_pio2f+0x3d2>
 8010a84:	21a0      	movs	r1, #160	; 0xa0
 8010a86:	9b00      	ldr	r3, [sp, #0]
 8010a88:	aa0c      	add	r2, sp, #48	; 0x30
 8010a8a:	009b      	lsls	r3, r3, #2
 8010a8c:	1852      	adds	r2, r2, r1
 8010a8e:	50d6      	str	r6, [r2, r3]
 8010a90:	3c01      	subs	r4, #1
 8010a92:	e726      	b.n	80108e2 <__kernel_rem_pio2f+0x256>
 8010a94:	9b62      	ldr	r3, [sp, #392]	; 0x188
 8010a96:	2b02      	cmp	r3, #2
 8010a98:	dc08      	bgt.n	8010aac <__kernel_rem_pio2f+0x420>
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	dc5a      	bgt.n	8010b54 <__kernel_rem_pio2f+0x4c8>
 8010a9e:	d035      	beq.n	8010b0c <__kernel_rem_pio2f+0x480>
 8010aa0:	2007      	movs	r0, #7
 8010aa2:	9b03      	ldr	r3, [sp, #12]
 8010aa4:	4003      	ands	r3, r0
 8010aa6:	0018      	movs	r0, r3
 8010aa8:	b05d      	add	sp, #372	; 0x174
 8010aaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010aac:	9b62      	ldr	r3, [sp, #392]	; 0x188
 8010aae:	2b03      	cmp	r3, #3
 8010ab0:	d1f6      	bne.n	8010aa0 <__kernel_rem_pio2f+0x414>
 8010ab2:	00bb      	lsls	r3, r7, #2
 8010ab4:	aa34      	add	r2, sp, #208	; 0xd0
 8010ab6:	18d5      	adds	r5, r2, r3
 8010ab8:	002c      	movs	r4, r5
 8010aba:	9700      	str	r7, [sp, #0]
 8010abc:	9b00      	ldr	r3, [sp, #0]
 8010abe:	3c04      	subs	r4, #4
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	dc51      	bgt.n	8010b68 <__kernel_rem_pio2f+0x4dc>
 8010ac4:	9700      	str	r7, [sp, #0]
 8010ac6:	9b00      	ldr	r3, [sp, #0]
 8010ac8:	3d04      	subs	r5, #4
 8010aca:	2b01      	cmp	r3, #1
 8010acc:	dc62      	bgt.n	8010b94 <__kernel_rem_pio2f+0x508>
 8010ace:	2000      	movs	r0, #0
 8010ad0:	ac34      	add	r4, sp, #208	; 0xd0
 8010ad2:	2f01      	cmp	r7, #1
 8010ad4:	dc73      	bgt.n	8010bbe <__kernel_rem_pio2f+0x532>
 8010ad6:	9901      	ldr	r1, [sp, #4]
 8010ad8:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 8010ada:	6863      	ldr	r3, [r4, #4]
 8010adc:	2900      	cmp	r1, #0
 8010ade:	d174      	bne.n	8010bca <__kernel_rem_pio2f+0x53e>
 8010ae0:	9902      	ldr	r1, [sp, #8]
 8010ae2:	604b      	str	r3, [r1, #4]
 8010ae4:	000b      	movs	r3, r1
 8010ae6:	600a      	str	r2, [r1, #0]
 8010ae8:	6098      	str	r0, [r3, #8]
 8010aea:	e7d9      	b.n	8010aa0 <__kernel_rem_pio2f+0x414>
 8010aec:	00bb      	lsls	r3, r7, #2
 8010aee:	5919      	ldr	r1, [r3, r4]
 8010af0:	f7f2 fe1e 	bl	8003730 <__aeabi_fadd>
 8010af4:	3f01      	subs	r7, #1
 8010af6:	2f00      	cmp	r7, #0
 8010af8:	daf8      	bge.n	8010aec <__kernel_rem_pio2f+0x460>
 8010afa:	9b01      	ldr	r3, [sp, #4]
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	d002      	beq.n	8010b06 <__kernel_rem_pio2f+0x47a>
 8010b00:	2380      	movs	r3, #128	; 0x80
 8010b02:	061b      	lsls	r3, r3, #24
 8010b04:	18c0      	adds	r0, r0, r3
 8010b06:	9b02      	ldr	r3, [sp, #8]
 8010b08:	6018      	str	r0, [r3, #0]
 8010b0a:	e7c9      	b.n	8010aa0 <__kernel_rem_pio2f+0x414>
 8010b0c:	2000      	movs	r0, #0
 8010b0e:	ac34      	add	r4, sp, #208	; 0xd0
 8010b10:	e7f1      	b.n	8010af6 <__kernel_rem_pio2f+0x46a>
 8010b12:	00a3      	lsls	r3, r4, #2
 8010b14:	5959      	ldr	r1, [r3, r5]
 8010b16:	f7f2 fe0b 	bl	8003730 <__aeabi_fadd>
 8010b1a:	3c01      	subs	r4, #1
 8010b1c:	2c00      	cmp	r4, #0
 8010b1e:	daf8      	bge.n	8010b12 <__kernel_rem_pio2f+0x486>
 8010b20:	9a01      	ldr	r2, [sp, #4]
 8010b22:	1c03      	adds	r3, r0, #0
 8010b24:	2a00      	cmp	r2, #0
 8010b26:	d002      	beq.n	8010b2e <__kernel_rem_pio2f+0x4a2>
 8010b28:	2380      	movs	r3, #128	; 0x80
 8010b2a:	061b      	lsls	r3, r3, #24
 8010b2c:	18c3      	adds	r3, r0, r3
 8010b2e:	9a02      	ldr	r2, [sp, #8]
 8010b30:	1c01      	adds	r1, r0, #0
 8010b32:	6013      	str	r3, [r2, #0]
 8010b34:	9834      	ldr	r0, [sp, #208]	; 0xd0
 8010b36:	f7f3 fab3 	bl	80040a0 <__aeabi_fsub>
 8010b3a:	2401      	movs	r4, #1
 8010b3c:	ad34      	add	r5, sp, #208	; 0xd0
 8010b3e:	42a7      	cmp	r7, r4
 8010b40:	da0c      	bge.n	8010b5c <__kernel_rem_pio2f+0x4d0>
 8010b42:	9b01      	ldr	r3, [sp, #4]
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d002      	beq.n	8010b4e <__kernel_rem_pio2f+0x4c2>
 8010b48:	2380      	movs	r3, #128	; 0x80
 8010b4a:	061b      	lsls	r3, r3, #24
 8010b4c:	18c0      	adds	r0, r0, r3
 8010b4e:	9b02      	ldr	r3, [sp, #8]
 8010b50:	6058      	str	r0, [r3, #4]
 8010b52:	e7a5      	b.n	8010aa0 <__kernel_rem_pio2f+0x414>
 8010b54:	003c      	movs	r4, r7
 8010b56:	2000      	movs	r0, #0
 8010b58:	ad34      	add	r5, sp, #208	; 0xd0
 8010b5a:	e7df      	b.n	8010b1c <__kernel_rem_pio2f+0x490>
 8010b5c:	00a3      	lsls	r3, r4, #2
 8010b5e:	5959      	ldr	r1, [r3, r5]
 8010b60:	f7f2 fde6 	bl	8003730 <__aeabi_fadd>
 8010b64:	3401      	adds	r4, #1
 8010b66:	e7ea      	b.n	8010b3e <__kernel_rem_pio2f+0x4b2>
 8010b68:	9b00      	ldr	r3, [sp, #0]
 8010b6a:	6826      	ldr	r6, [r4, #0]
 8010b6c:	3b01      	subs	r3, #1
 8010b6e:	9300      	str	r3, [sp, #0]
 8010b70:	6863      	ldr	r3, [r4, #4]
 8010b72:	1c30      	adds	r0, r6, #0
 8010b74:	1c19      	adds	r1, r3, #0
 8010b76:	9304      	str	r3, [sp, #16]
 8010b78:	f7f2 fdda 	bl	8003730 <__aeabi_fadd>
 8010b7c:	1c01      	adds	r1, r0, #0
 8010b7e:	9005      	str	r0, [sp, #20]
 8010b80:	1c30      	adds	r0, r6, #0
 8010b82:	f7f3 fa8d 	bl	80040a0 <__aeabi_fsub>
 8010b86:	9904      	ldr	r1, [sp, #16]
 8010b88:	f7f2 fdd2 	bl	8003730 <__aeabi_fadd>
 8010b8c:	9b05      	ldr	r3, [sp, #20]
 8010b8e:	6060      	str	r0, [r4, #4]
 8010b90:	6023      	str	r3, [r4, #0]
 8010b92:	e793      	b.n	8010abc <__kernel_rem_pio2f+0x430>
 8010b94:	682c      	ldr	r4, [r5, #0]
 8010b96:	686e      	ldr	r6, [r5, #4]
 8010b98:	9b00      	ldr	r3, [sp, #0]
 8010b9a:	1c31      	adds	r1, r6, #0
 8010b9c:	3b01      	subs	r3, #1
 8010b9e:	1c20      	adds	r0, r4, #0
 8010ba0:	9300      	str	r3, [sp, #0]
 8010ba2:	f7f2 fdc5 	bl	8003730 <__aeabi_fadd>
 8010ba6:	1c01      	adds	r1, r0, #0
 8010ba8:	9004      	str	r0, [sp, #16]
 8010baa:	1c20      	adds	r0, r4, #0
 8010bac:	f7f3 fa78 	bl	80040a0 <__aeabi_fsub>
 8010bb0:	1c31      	adds	r1, r6, #0
 8010bb2:	f7f2 fdbd 	bl	8003730 <__aeabi_fadd>
 8010bb6:	9b04      	ldr	r3, [sp, #16]
 8010bb8:	6068      	str	r0, [r5, #4]
 8010bba:	602b      	str	r3, [r5, #0]
 8010bbc:	e783      	b.n	8010ac6 <__kernel_rem_pio2f+0x43a>
 8010bbe:	00bb      	lsls	r3, r7, #2
 8010bc0:	58e1      	ldr	r1, [r4, r3]
 8010bc2:	f7f2 fdb5 	bl	8003730 <__aeabi_fadd>
 8010bc6:	3f01      	subs	r7, #1
 8010bc8:	e783      	b.n	8010ad2 <__kernel_rem_pio2f+0x446>
 8010bca:	2180      	movs	r1, #128	; 0x80
 8010bcc:	9c02      	ldr	r4, [sp, #8]
 8010bce:	0609      	lsls	r1, r1, #24
 8010bd0:	185b      	adds	r3, r3, r1
 8010bd2:	1852      	adds	r2, r2, r1
 8010bd4:	6063      	str	r3, [r4, #4]
 8010bd6:	6022      	str	r2, [r4, #0]
 8010bd8:	0023      	movs	r3, r4
 8010bda:	1840      	adds	r0, r0, r1
 8010bdc:	e784      	b.n	8010ae8 <__kernel_rem_pio2f+0x45c>
 8010bde:	46c0      	nop			; (mov r8, r8)

08010be0 <scalbnf>:
 8010be0:	0043      	lsls	r3, r0, #1
 8010be2:	b570      	push	{r4, r5, r6, lr}
 8010be4:	0002      	movs	r2, r0
 8010be6:	000c      	movs	r4, r1
 8010be8:	085d      	lsrs	r5, r3, #1
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d006      	beq.n	8010bfc <scalbnf+0x1c>
 8010bee:	21ff      	movs	r1, #255	; 0xff
 8010bf0:	05c9      	lsls	r1, r1, #23
 8010bf2:	428d      	cmp	r5, r1
 8010bf4:	d303      	bcc.n	8010bfe <scalbnf+0x1e>
 8010bf6:	1c01      	adds	r1, r0, #0
 8010bf8:	f7f2 fd9a 	bl	8003730 <__aeabi_fadd>
 8010bfc:	bd70      	pop	{r4, r5, r6, pc}
 8010bfe:	4208      	tst	r0, r1
 8010c00:	d118      	bne.n	8010c34 <scalbnf+0x54>
 8010c02:	2198      	movs	r1, #152	; 0x98
 8010c04:	05c9      	lsls	r1, r1, #23
 8010c06:	f7f3 f8fd 	bl	8003e04 <__aeabi_fmul>
 8010c0a:	4b19      	ldr	r3, [pc, #100]	; (8010c70 <scalbnf+0x90>)
 8010c0c:	429c      	cmp	r4, r3
 8010c0e:	db0d      	blt.n	8010c2c <scalbnf+0x4c>
 8010c10:	0002      	movs	r2, r0
 8010c12:	15c1      	asrs	r1, r0, #23
 8010c14:	b2c9      	uxtb	r1, r1
 8010c16:	3919      	subs	r1, #25
 8010c18:	4b16      	ldr	r3, [pc, #88]	; (8010c74 <scalbnf+0x94>)
 8010c1a:	429c      	cmp	r4, r3
 8010c1c:	dd0c      	ble.n	8010c38 <scalbnf+0x58>
 8010c1e:	4b16      	ldr	r3, [pc, #88]	; (8010c78 <scalbnf+0x98>)
 8010c20:	2800      	cmp	r0, #0
 8010c22:	da00      	bge.n	8010c26 <scalbnf+0x46>
 8010c24:	4b15      	ldr	r3, [pc, #84]	; (8010c7c <scalbnf+0x9c>)
 8010c26:	4914      	ldr	r1, [pc, #80]	; (8010c78 <scalbnf+0x98>)
 8010c28:	1c18      	adds	r0, r3, #0
 8010c2a:	e000      	b.n	8010c2e <scalbnf+0x4e>
 8010c2c:	4914      	ldr	r1, [pc, #80]	; (8010c80 <scalbnf+0xa0>)
 8010c2e:	f7f3 f8e9 	bl	8003e04 <__aeabi_fmul>
 8010c32:	e7e3      	b.n	8010bfc <scalbnf+0x1c>
 8010c34:	0e19      	lsrs	r1, r3, #24
 8010c36:	e7ef      	b.n	8010c18 <scalbnf+0x38>
 8010c38:	1909      	adds	r1, r1, r4
 8010c3a:	29fe      	cmp	r1, #254	; 0xfe
 8010c3c:	dcef      	bgt.n	8010c1e <scalbnf+0x3e>
 8010c3e:	2900      	cmp	r1, #0
 8010c40:	dd04      	ble.n	8010c4c <scalbnf+0x6c>
 8010c42:	4810      	ldr	r0, [pc, #64]	; (8010c84 <scalbnf+0xa4>)
 8010c44:	05c9      	lsls	r1, r1, #23
 8010c46:	4010      	ands	r0, r2
 8010c48:	4308      	orrs	r0, r1
 8010c4a:	e7d7      	b.n	8010bfc <scalbnf+0x1c>
 8010c4c:	000b      	movs	r3, r1
 8010c4e:	3316      	adds	r3, #22
 8010c50:	da05      	bge.n	8010c5e <scalbnf+0x7e>
 8010c52:	4b0b      	ldr	r3, [pc, #44]	; (8010c80 <scalbnf+0xa0>)
 8010c54:	2800      	cmp	r0, #0
 8010c56:	da00      	bge.n	8010c5a <scalbnf+0x7a>
 8010c58:	4b0b      	ldr	r3, [pc, #44]	; (8010c88 <scalbnf+0xa8>)
 8010c5a:	4909      	ldr	r1, [pc, #36]	; (8010c80 <scalbnf+0xa0>)
 8010c5c:	e7e4      	b.n	8010c28 <scalbnf+0x48>
 8010c5e:	3119      	adds	r1, #25
 8010c60:	05c8      	lsls	r0, r1, #23
 8010c62:	21cc      	movs	r1, #204	; 0xcc
 8010c64:	4b07      	ldr	r3, [pc, #28]	; (8010c84 <scalbnf+0xa4>)
 8010c66:	0589      	lsls	r1, r1, #22
 8010c68:	401a      	ands	r2, r3
 8010c6a:	4310      	orrs	r0, r2
 8010c6c:	e7df      	b.n	8010c2e <scalbnf+0x4e>
 8010c6e:	46c0      	nop			; (mov r8, r8)
 8010c70:	ffff3cb0 	.word	0xffff3cb0
 8010c74:	0000c350 	.word	0x0000c350
 8010c78:	7149f2ca 	.word	0x7149f2ca
 8010c7c:	f149f2ca 	.word	0xf149f2ca
 8010c80:	0da24260 	.word	0x0da24260
 8010c84:	807fffff 	.word	0x807fffff
 8010c88:	8da24260 	.word	0x8da24260

08010c8c <floorf>:
 8010c8c:	b570      	push	{r4, r5, r6, lr}
 8010c8e:	0045      	lsls	r5, r0, #1
 8010c90:	086e      	lsrs	r6, r5, #1
 8010c92:	0e2d      	lsrs	r5, r5, #24
 8010c94:	3d7f      	subs	r5, #127	; 0x7f
 8010c96:	0004      	movs	r4, r0
 8010c98:	2d16      	cmp	r5, #22
 8010c9a:	dc24      	bgt.n	8010ce6 <floorf+0x5a>
 8010c9c:	2d00      	cmp	r5, #0
 8010c9e:	da0e      	bge.n	8010cbe <floorf+0x32>
 8010ca0:	4916      	ldr	r1, [pc, #88]	; (8010cfc <floorf+0x70>)
 8010ca2:	f7f2 fd45 	bl	8003730 <__aeabi_fadd>
 8010ca6:	2100      	movs	r1, #0
 8010ca8:	f7f2 fbca 	bl	8003440 <__aeabi_fcmpgt>
 8010cac:	2800      	cmp	r0, #0
 8010cae:	d004      	beq.n	8010cba <floorf+0x2e>
 8010cb0:	2c00      	cmp	r4, #0
 8010cb2:	da20      	bge.n	8010cf6 <floorf+0x6a>
 8010cb4:	2e00      	cmp	r6, #0
 8010cb6:	d000      	beq.n	8010cba <floorf+0x2e>
 8010cb8:	4c11      	ldr	r4, [pc, #68]	; (8010d00 <floorf+0x74>)
 8010cba:	1c20      	adds	r0, r4, #0
 8010cbc:	e01a      	b.n	8010cf4 <floorf+0x68>
 8010cbe:	4e11      	ldr	r6, [pc, #68]	; (8010d04 <floorf+0x78>)
 8010cc0:	412e      	asrs	r6, r5
 8010cc2:	4206      	tst	r6, r0
 8010cc4:	d016      	beq.n	8010cf4 <floorf+0x68>
 8010cc6:	490d      	ldr	r1, [pc, #52]	; (8010cfc <floorf+0x70>)
 8010cc8:	f7f2 fd32 	bl	8003730 <__aeabi_fadd>
 8010ccc:	2100      	movs	r1, #0
 8010cce:	f7f2 fbb7 	bl	8003440 <__aeabi_fcmpgt>
 8010cd2:	2800      	cmp	r0, #0
 8010cd4:	d0f1      	beq.n	8010cba <floorf+0x2e>
 8010cd6:	2c00      	cmp	r4, #0
 8010cd8:	da03      	bge.n	8010ce2 <floorf+0x56>
 8010cda:	2380      	movs	r3, #128	; 0x80
 8010cdc:	041b      	lsls	r3, r3, #16
 8010cde:	412b      	asrs	r3, r5
 8010ce0:	18e4      	adds	r4, r4, r3
 8010ce2:	43b4      	bics	r4, r6
 8010ce4:	e7e9      	b.n	8010cba <floorf+0x2e>
 8010ce6:	23ff      	movs	r3, #255	; 0xff
 8010ce8:	05db      	lsls	r3, r3, #23
 8010cea:	429e      	cmp	r6, r3
 8010cec:	d302      	bcc.n	8010cf4 <floorf+0x68>
 8010cee:	1c01      	adds	r1, r0, #0
 8010cf0:	f7f2 fd1e 	bl	8003730 <__aeabi_fadd>
 8010cf4:	bd70      	pop	{r4, r5, r6, pc}
 8010cf6:	2400      	movs	r4, #0
 8010cf8:	e7df      	b.n	8010cba <floorf+0x2e>
 8010cfa:	46c0      	nop			; (mov r8, r8)
 8010cfc:	7149f2ca 	.word	0x7149f2ca
 8010d00:	bf800000 	.word	0xbf800000
 8010d04:	007fffff 	.word	0x007fffff

08010d08 <__cvt>:
 8010d08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010d0a:	001e      	movs	r6, r3
 8010d0c:	2300      	movs	r3, #0
 8010d0e:	0014      	movs	r4, r2
 8010d10:	b08b      	sub	sp, #44	; 0x2c
 8010d12:	429e      	cmp	r6, r3
 8010d14:	da04      	bge.n	8010d20 <__cvt+0x18>
 8010d16:	2180      	movs	r1, #128	; 0x80
 8010d18:	0609      	lsls	r1, r1, #24
 8010d1a:	1873      	adds	r3, r6, r1
 8010d1c:	001e      	movs	r6, r3
 8010d1e:	232d      	movs	r3, #45	; 0x2d
 8010d20:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010d22:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8010d24:	7013      	strb	r3, [r2, #0]
 8010d26:	2320      	movs	r3, #32
 8010d28:	2203      	movs	r2, #3
 8010d2a:	439f      	bics	r7, r3
 8010d2c:	2f46      	cmp	r7, #70	; 0x46
 8010d2e:	d007      	beq.n	8010d40 <__cvt+0x38>
 8010d30:	003b      	movs	r3, r7
 8010d32:	3b45      	subs	r3, #69	; 0x45
 8010d34:	4259      	negs	r1, r3
 8010d36:	414b      	adcs	r3, r1
 8010d38:	9910      	ldr	r1, [sp, #64]	; 0x40
 8010d3a:	3a01      	subs	r2, #1
 8010d3c:	18cb      	adds	r3, r1, r3
 8010d3e:	9310      	str	r3, [sp, #64]	; 0x40
 8010d40:	ab09      	add	r3, sp, #36	; 0x24
 8010d42:	9304      	str	r3, [sp, #16]
 8010d44:	ab08      	add	r3, sp, #32
 8010d46:	9303      	str	r3, [sp, #12]
 8010d48:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010d4a:	9200      	str	r2, [sp, #0]
 8010d4c:	9302      	str	r3, [sp, #8]
 8010d4e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010d50:	0022      	movs	r2, r4
 8010d52:	9301      	str	r3, [sp, #4]
 8010d54:	0033      	movs	r3, r6
 8010d56:	f001 fa11 	bl	801217c <_dtoa_r>
 8010d5a:	0005      	movs	r5, r0
 8010d5c:	2f47      	cmp	r7, #71	; 0x47
 8010d5e:	d102      	bne.n	8010d66 <__cvt+0x5e>
 8010d60:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010d62:	07db      	lsls	r3, r3, #31
 8010d64:	d528      	bpl.n	8010db8 <__cvt+0xb0>
 8010d66:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010d68:	18eb      	adds	r3, r5, r3
 8010d6a:	9307      	str	r3, [sp, #28]
 8010d6c:	2f46      	cmp	r7, #70	; 0x46
 8010d6e:	d114      	bne.n	8010d9a <__cvt+0x92>
 8010d70:	782b      	ldrb	r3, [r5, #0]
 8010d72:	2b30      	cmp	r3, #48	; 0x30
 8010d74:	d10c      	bne.n	8010d90 <__cvt+0x88>
 8010d76:	2200      	movs	r2, #0
 8010d78:	2300      	movs	r3, #0
 8010d7a:	0020      	movs	r0, r4
 8010d7c:	0031      	movs	r1, r6
 8010d7e:	f7f2 fb0b 	bl	8003398 <__aeabi_dcmpeq>
 8010d82:	2800      	cmp	r0, #0
 8010d84:	d104      	bne.n	8010d90 <__cvt+0x88>
 8010d86:	2301      	movs	r3, #1
 8010d88:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010d8a:	1a9b      	subs	r3, r3, r2
 8010d8c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010d8e:	6013      	str	r3, [r2, #0]
 8010d90:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010d92:	9a07      	ldr	r2, [sp, #28]
 8010d94:	681b      	ldr	r3, [r3, #0]
 8010d96:	18d3      	adds	r3, r2, r3
 8010d98:	9307      	str	r3, [sp, #28]
 8010d9a:	2200      	movs	r2, #0
 8010d9c:	2300      	movs	r3, #0
 8010d9e:	0020      	movs	r0, r4
 8010da0:	0031      	movs	r1, r6
 8010da2:	f7f2 faf9 	bl	8003398 <__aeabi_dcmpeq>
 8010da6:	2800      	cmp	r0, #0
 8010da8:	d001      	beq.n	8010dae <__cvt+0xa6>
 8010daa:	9b07      	ldr	r3, [sp, #28]
 8010dac:	9309      	str	r3, [sp, #36]	; 0x24
 8010dae:	2230      	movs	r2, #48	; 0x30
 8010db0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010db2:	9907      	ldr	r1, [sp, #28]
 8010db4:	428b      	cmp	r3, r1
 8010db6:	d306      	bcc.n	8010dc6 <__cvt+0xbe>
 8010db8:	0028      	movs	r0, r5
 8010dba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010dbc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8010dbe:	1b5b      	subs	r3, r3, r5
 8010dc0:	6013      	str	r3, [r2, #0]
 8010dc2:	b00b      	add	sp, #44	; 0x2c
 8010dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010dc6:	1c59      	adds	r1, r3, #1
 8010dc8:	9109      	str	r1, [sp, #36]	; 0x24
 8010dca:	701a      	strb	r2, [r3, #0]
 8010dcc:	e7f0      	b.n	8010db0 <__cvt+0xa8>

08010dce <__exponent>:
 8010dce:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010dd0:	1c83      	adds	r3, r0, #2
 8010dd2:	b087      	sub	sp, #28
 8010dd4:	9303      	str	r3, [sp, #12]
 8010dd6:	0005      	movs	r5, r0
 8010dd8:	000c      	movs	r4, r1
 8010dda:	232b      	movs	r3, #43	; 0x2b
 8010ddc:	7002      	strb	r2, [r0, #0]
 8010dde:	2900      	cmp	r1, #0
 8010de0:	da01      	bge.n	8010de6 <__exponent+0x18>
 8010de2:	424c      	negs	r4, r1
 8010de4:	3302      	adds	r3, #2
 8010de6:	706b      	strb	r3, [r5, #1]
 8010de8:	2c09      	cmp	r4, #9
 8010dea:	dd2f      	ble.n	8010e4c <__exponent+0x7e>
 8010dec:	270a      	movs	r7, #10
 8010dee:	ab04      	add	r3, sp, #16
 8010df0:	1dde      	adds	r6, r3, #7
 8010df2:	0020      	movs	r0, r4
 8010df4:	0039      	movs	r1, r7
 8010df6:	9601      	str	r6, [sp, #4]
 8010df8:	f7f2 fab8 	bl	800336c <__aeabi_idivmod>
 8010dfc:	3e01      	subs	r6, #1
 8010dfe:	3130      	adds	r1, #48	; 0x30
 8010e00:	0020      	movs	r0, r4
 8010e02:	7031      	strb	r1, [r6, #0]
 8010e04:	0039      	movs	r1, r7
 8010e06:	9402      	str	r4, [sp, #8]
 8010e08:	f7f2 f9ca 	bl	80031a0 <__divsi3>
 8010e0c:	9b02      	ldr	r3, [sp, #8]
 8010e0e:	0004      	movs	r4, r0
 8010e10:	2b63      	cmp	r3, #99	; 0x63
 8010e12:	dcee      	bgt.n	8010df2 <__exponent+0x24>
 8010e14:	9b01      	ldr	r3, [sp, #4]
 8010e16:	3430      	adds	r4, #48	; 0x30
 8010e18:	1e9a      	subs	r2, r3, #2
 8010e1a:	0013      	movs	r3, r2
 8010e1c:	9903      	ldr	r1, [sp, #12]
 8010e1e:	7014      	strb	r4, [r2, #0]
 8010e20:	a804      	add	r0, sp, #16
 8010e22:	3007      	adds	r0, #7
 8010e24:	4298      	cmp	r0, r3
 8010e26:	d80c      	bhi.n	8010e42 <__exponent+0x74>
 8010e28:	2300      	movs	r3, #0
 8010e2a:	4282      	cmp	r2, r0
 8010e2c:	d804      	bhi.n	8010e38 <__exponent+0x6a>
 8010e2e:	aa04      	add	r2, sp, #16
 8010e30:	3309      	adds	r3, #9
 8010e32:	189b      	adds	r3, r3, r2
 8010e34:	9a01      	ldr	r2, [sp, #4]
 8010e36:	1a9b      	subs	r3, r3, r2
 8010e38:	9a03      	ldr	r2, [sp, #12]
 8010e3a:	18d3      	adds	r3, r2, r3
 8010e3c:	1b58      	subs	r0, r3, r5
 8010e3e:	b007      	add	sp, #28
 8010e40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e42:	7818      	ldrb	r0, [r3, #0]
 8010e44:	3301      	adds	r3, #1
 8010e46:	7008      	strb	r0, [r1, #0]
 8010e48:	3101      	adds	r1, #1
 8010e4a:	e7e9      	b.n	8010e20 <__exponent+0x52>
 8010e4c:	2330      	movs	r3, #48	; 0x30
 8010e4e:	3430      	adds	r4, #48	; 0x30
 8010e50:	70ab      	strb	r3, [r5, #2]
 8010e52:	70ec      	strb	r4, [r5, #3]
 8010e54:	1d2b      	adds	r3, r5, #4
 8010e56:	e7f1      	b.n	8010e3c <__exponent+0x6e>

08010e58 <_printf_float>:
 8010e58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e5a:	b095      	sub	sp, #84	; 0x54
 8010e5c:	000c      	movs	r4, r1
 8010e5e:	9208      	str	r2, [sp, #32]
 8010e60:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8010e62:	9309      	str	r3, [sp, #36]	; 0x24
 8010e64:	0007      	movs	r7, r0
 8010e66:	f001 f867 	bl	8011f38 <_localeconv_r>
 8010e6a:	6803      	ldr	r3, [r0, #0]
 8010e6c:	0018      	movs	r0, r3
 8010e6e:	930c      	str	r3, [sp, #48]	; 0x30
 8010e70:	f7f2 f8f0 	bl	8003054 <strlen>
 8010e74:	2300      	movs	r3, #0
 8010e76:	9312      	str	r3, [sp, #72]	; 0x48
 8010e78:	7e23      	ldrb	r3, [r4, #24]
 8010e7a:	2207      	movs	r2, #7
 8010e7c:	930a      	str	r3, [sp, #40]	; 0x28
 8010e7e:	6823      	ldr	r3, [r4, #0]
 8010e80:	900d      	str	r0, [sp, #52]	; 0x34
 8010e82:	930b      	str	r3, [sp, #44]	; 0x2c
 8010e84:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010e86:	682b      	ldr	r3, [r5, #0]
 8010e88:	05c9      	lsls	r1, r1, #23
 8010e8a:	d547      	bpl.n	8010f1c <_printf_float+0xc4>
 8010e8c:	189b      	adds	r3, r3, r2
 8010e8e:	4393      	bics	r3, r2
 8010e90:	001a      	movs	r2, r3
 8010e92:	3208      	adds	r2, #8
 8010e94:	602a      	str	r2, [r5, #0]
 8010e96:	681e      	ldr	r6, [r3, #0]
 8010e98:	685d      	ldr	r5, [r3, #4]
 8010e9a:	0032      	movs	r2, r6
 8010e9c:	002b      	movs	r3, r5
 8010e9e:	64a2      	str	r2, [r4, #72]	; 0x48
 8010ea0:	64e3      	str	r3, [r4, #76]	; 0x4c
 8010ea2:	2201      	movs	r2, #1
 8010ea4:	006b      	lsls	r3, r5, #1
 8010ea6:	085b      	lsrs	r3, r3, #1
 8010ea8:	930e      	str	r3, [sp, #56]	; 0x38
 8010eaa:	0030      	movs	r0, r6
 8010eac:	4bab      	ldr	r3, [pc, #684]	; (801115c <_printf_float+0x304>)
 8010eae:	990e      	ldr	r1, [sp, #56]	; 0x38
 8010eb0:	4252      	negs	r2, r2
 8010eb2:	f7f5 f903 	bl	80060bc <__aeabi_dcmpun>
 8010eb6:	2800      	cmp	r0, #0
 8010eb8:	d132      	bne.n	8010f20 <_printf_float+0xc8>
 8010eba:	2201      	movs	r2, #1
 8010ebc:	0030      	movs	r0, r6
 8010ebe:	4ba7      	ldr	r3, [pc, #668]	; (801115c <_printf_float+0x304>)
 8010ec0:	990e      	ldr	r1, [sp, #56]	; 0x38
 8010ec2:	4252      	negs	r2, r2
 8010ec4:	f7f2 fa78 	bl	80033b8 <__aeabi_dcmple>
 8010ec8:	2800      	cmp	r0, #0
 8010eca:	d129      	bne.n	8010f20 <_printf_float+0xc8>
 8010ecc:	2200      	movs	r2, #0
 8010ece:	2300      	movs	r3, #0
 8010ed0:	0030      	movs	r0, r6
 8010ed2:	0029      	movs	r1, r5
 8010ed4:	f7f2 fa66 	bl	80033a4 <__aeabi_dcmplt>
 8010ed8:	2800      	cmp	r0, #0
 8010eda:	d003      	beq.n	8010ee4 <_printf_float+0x8c>
 8010edc:	0023      	movs	r3, r4
 8010ede:	222d      	movs	r2, #45	; 0x2d
 8010ee0:	3343      	adds	r3, #67	; 0x43
 8010ee2:	701a      	strb	r2, [r3, #0]
 8010ee4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010ee6:	4d9e      	ldr	r5, [pc, #632]	; (8011160 <_printf_float+0x308>)
 8010ee8:	2b47      	cmp	r3, #71	; 0x47
 8010eea:	d900      	bls.n	8010eee <_printf_float+0x96>
 8010eec:	4d9d      	ldr	r5, [pc, #628]	; (8011164 <_printf_float+0x30c>)
 8010eee:	2303      	movs	r3, #3
 8010ef0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010ef2:	6123      	str	r3, [r4, #16]
 8010ef4:	3301      	adds	r3, #1
 8010ef6:	439a      	bics	r2, r3
 8010ef8:	2300      	movs	r3, #0
 8010efa:	6022      	str	r2, [r4, #0]
 8010efc:	930b      	str	r3, [sp, #44]	; 0x2c
 8010efe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010f00:	0021      	movs	r1, r4
 8010f02:	9300      	str	r3, [sp, #0]
 8010f04:	0038      	movs	r0, r7
 8010f06:	9b08      	ldr	r3, [sp, #32]
 8010f08:	aa13      	add	r2, sp, #76	; 0x4c
 8010f0a:	f000 f9fb 	bl	8011304 <_printf_common>
 8010f0e:	3001      	adds	r0, #1
 8010f10:	d000      	beq.n	8010f14 <_printf_float+0xbc>
 8010f12:	e0a3      	b.n	801105c <_printf_float+0x204>
 8010f14:	2001      	movs	r0, #1
 8010f16:	4240      	negs	r0, r0
 8010f18:	b015      	add	sp, #84	; 0x54
 8010f1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f1c:	3307      	adds	r3, #7
 8010f1e:	e7b6      	b.n	8010e8e <_printf_float+0x36>
 8010f20:	0032      	movs	r2, r6
 8010f22:	002b      	movs	r3, r5
 8010f24:	0030      	movs	r0, r6
 8010f26:	0029      	movs	r1, r5
 8010f28:	f7f5 f8c8 	bl	80060bc <__aeabi_dcmpun>
 8010f2c:	2800      	cmp	r0, #0
 8010f2e:	d00b      	beq.n	8010f48 <_printf_float+0xf0>
 8010f30:	2d00      	cmp	r5, #0
 8010f32:	da03      	bge.n	8010f3c <_printf_float+0xe4>
 8010f34:	0023      	movs	r3, r4
 8010f36:	222d      	movs	r2, #45	; 0x2d
 8010f38:	3343      	adds	r3, #67	; 0x43
 8010f3a:	701a      	strb	r2, [r3, #0]
 8010f3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010f3e:	4d8a      	ldr	r5, [pc, #552]	; (8011168 <_printf_float+0x310>)
 8010f40:	2b47      	cmp	r3, #71	; 0x47
 8010f42:	d9d4      	bls.n	8010eee <_printf_float+0x96>
 8010f44:	4d89      	ldr	r5, [pc, #548]	; (801116c <_printf_float+0x314>)
 8010f46:	e7d2      	b.n	8010eee <_printf_float+0x96>
 8010f48:	2220      	movs	r2, #32
 8010f4a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010f4c:	6863      	ldr	r3, [r4, #4]
 8010f4e:	4391      	bics	r1, r2
 8010f50:	910e      	str	r1, [sp, #56]	; 0x38
 8010f52:	1c5a      	adds	r2, r3, #1
 8010f54:	d14a      	bne.n	8010fec <_printf_float+0x194>
 8010f56:	3307      	adds	r3, #7
 8010f58:	6063      	str	r3, [r4, #4]
 8010f5a:	2380      	movs	r3, #128	; 0x80
 8010f5c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010f5e:	00db      	lsls	r3, r3, #3
 8010f60:	4313      	orrs	r3, r2
 8010f62:	2200      	movs	r2, #0
 8010f64:	9206      	str	r2, [sp, #24]
 8010f66:	aa12      	add	r2, sp, #72	; 0x48
 8010f68:	9205      	str	r2, [sp, #20]
 8010f6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010f6c:	6023      	str	r3, [r4, #0]
 8010f6e:	9204      	str	r2, [sp, #16]
 8010f70:	aa11      	add	r2, sp, #68	; 0x44
 8010f72:	9203      	str	r2, [sp, #12]
 8010f74:	2223      	movs	r2, #35	; 0x23
 8010f76:	a908      	add	r1, sp, #32
 8010f78:	9301      	str	r3, [sp, #4]
 8010f7a:	6863      	ldr	r3, [r4, #4]
 8010f7c:	1852      	adds	r2, r2, r1
 8010f7e:	9202      	str	r2, [sp, #8]
 8010f80:	9300      	str	r3, [sp, #0]
 8010f82:	0032      	movs	r2, r6
 8010f84:	002b      	movs	r3, r5
 8010f86:	0038      	movs	r0, r7
 8010f88:	f7ff febe 	bl	8010d08 <__cvt>
 8010f8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010f8e:	0005      	movs	r5, r0
 8010f90:	2b47      	cmp	r3, #71	; 0x47
 8010f92:	d109      	bne.n	8010fa8 <_printf_float+0x150>
 8010f94:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010f96:	1cda      	adds	r2, r3, #3
 8010f98:	db02      	blt.n	8010fa0 <_printf_float+0x148>
 8010f9a:	6862      	ldr	r2, [r4, #4]
 8010f9c:	4293      	cmp	r3, r2
 8010f9e:	dd49      	ble.n	8011034 <_printf_float+0x1dc>
 8010fa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010fa2:	3b02      	subs	r3, #2
 8010fa4:	b2db      	uxtb	r3, r3
 8010fa6:	930a      	str	r3, [sp, #40]	; 0x28
 8010fa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010faa:	9911      	ldr	r1, [sp, #68]	; 0x44
 8010fac:	2b65      	cmp	r3, #101	; 0x65
 8010fae:	d824      	bhi.n	8010ffa <_printf_float+0x1a2>
 8010fb0:	0020      	movs	r0, r4
 8010fb2:	001a      	movs	r2, r3
 8010fb4:	3901      	subs	r1, #1
 8010fb6:	3050      	adds	r0, #80	; 0x50
 8010fb8:	9111      	str	r1, [sp, #68]	; 0x44
 8010fba:	f7ff ff08 	bl	8010dce <__exponent>
 8010fbe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010fc0:	900b      	str	r0, [sp, #44]	; 0x2c
 8010fc2:	1813      	adds	r3, r2, r0
 8010fc4:	6123      	str	r3, [r4, #16]
 8010fc6:	2a01      	cmp	r2, #1
 8010fc8:	dc02      	bgt.n	8010fd0 <_printf_float+0x178>
 8010fca:	6822      	ldr	r2, [r4, #0]
 8010fcc:	07d2      	lsls	r2, r2, #31
 8010fce:	d501      	bpl.n	8010fd4 <_printf_float+0x17c>
 8010fd0:	3301      	adds	r3, #1
 8010fd2:	6123      	str	r3, [r4, #16]
 8010fd4:	2323      	movs	r3, #35	; 0x23
 8010fd6:	aa08      	add	r2, sp, #32
 8010fd8:	189b      	adds	r3, r3, r2
 8010fda:	781b      	ldrb	r3, [r3, #0]
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d100      	bne.n	8010fe2 <_printf_float+0x18a>
 8010fe0:	e78d      	b.n	8010efe <_printf_float+0xa6>
 8010fe2:	0023      	movs	r3, r4
 8010fe4:	222d      	movs	r2, #45	; 0x2d
 8010fe6:	3343      	adds	r3, #67	; 0x43
 8010fe8:	701a      	strb	r2, [r3, #0]
 8010fea:	e788      	b.n	8010efe <_printf_float+0xa6>
 8010fec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010fee:	2a47      	cmp	r2, #71	; 0x47
 8010ff0:	d1b3      	bne.n	8010f5a <_printf_float+0x102>
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d1b1      	bne.n	8010f5a <_printf_float+0x102>
 8010ff6:	3301      	adds	r3, #1
 8010ff8:	e7ae      	b.n	8010f58 <_printf_float+0x100>
 8010ffa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010ffc:	2b66      	cmp	r3, #102	; 0x66
 8010ffe:	d11b      	bne.n	8011038 <_printf_float+0x1e0>
 8011000:	6863      	ldr	r3, [r4, #4]
 8011002:	2900      	cmp	r1, #0
 8011004:	dd09      	ble.n	801101a <_printf_float+0x1c2>
 8011006:	6121      	str	r1, [r4, #16]
 8011008:	2b00      	cmp	r3, #0
 801100a:	d102      	bne.n	8011012 <_printf_float+0x1ba>
 801100c:	6822      	ldr	r2, [r4, #0]
 801100e:	07d2      	lsls	r2, r2, #31
 8011010:	d50b      	bpl.n	801102a <_printf_float+0x1d2>
 8011012:	3301      	adds	r3, #1
 8011014:	185b      	adds	r3, r3, r1
 8011016:	6123      	str	r3, [r4, #16]
 8011018:	e007      	b.n	801102a <_printf_float+0x1d2>
 801101a:	2b00      	cmp	r3, #0
 801101c:	d103      	bne.n	8011026 <_printf_float+0x1ce>
 801101e:	2201      	movs	r2, #1
 8011020:	6821      	ldr	r1, [r4, #0]
 8011022:	4211      	tst	r1, r2
 8011024:	d000      	beq.n	8011028 <_printf_float+0x1d0>
 8011026:	1c9a      	adds	r2, r3, #2
 8011028:	6122      	str	r2, [r4, #16]
 801102a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801102c:	65a3      	str	r3, [r4, #88]	; 0x58
 801102e:	2300      	movs	r3, #0
 8011030:	930b      	str	r3, [sp, #44]	; 0x2c
 8011032:	e7cf      	b.n	8010fd4 <_printf_float+0x17c>
 8011034:	2367      	movs	r3, #103	; 0x67
 8011036:	930a      	str	r3, [sp, #40]	; 0x28
 8011038:	9911      	ldr	r1, [sp, #68]	; 0x44
 801103a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801103c:	4299      	cmp	r1, r3
 801103e:	db06      	blt.n	801104e <_printf_float+0x1f6>
 8011040:	6823      	ldr	r3, [r4, #0]
 8011042:	6121      	str	r1, [r4, #16]
 8011044:	07db      	lsls	r3, r3, #31
 8011046:	d5f0      	bpl.n	801102a <_printf_float+0x1d2>
 8011048:	3101      	adds	r1, #1
 801104a:	6121      	str	r1, [r4, #16]
 801104c:	e7ed      	b.n	801102a <_printf_float+0x1d2>
 801104e:	2201      	movs	r2, #1
 8011050:	2900      	cmp	r1, #0
 8011052:	dc01      	bgt.n	8011058 <_printf_float+0x200>
 8011054:	1892      	adds	r2, r2, r2
 8011056:	1a52      	subs	r2, r2, r1
 8011058:	189b      	adds	r3, r3, r2
 801105a:	e7dc      	b.n	8011016 <_printf_float+0x1be>
 801105c:	6822      	ldr	r2, [r4, #0]
 801105e:	0553      	lsls	r3, r2, #21
 8011060:	d408      	bmi.n	8011074 <_printf_float+0x21c>
 8011062:	6923      	ldr	r3, [r4, #16]
 8011064:	002a      	movs	r2, r5
 8011066:	0038      	movs	r0, r7
 8011068:	9908      	ldr	r1, [sp, #32]
 801106a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801106c:	47a8      	blx	r5
 801106e:	3001      	adds	r0, #1
 8011070:	d12a      	bne.n	80110c8 <_printf_float+0x270>
 8011072:	e74f      	b.n	8010f14 <_printf_float+0xbc>
 8011074:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011076:	2b65      	cmp	r3, #101	; 0x65
 8011078:	d800      	bhi.n	801107c <_printf_float+0x224>
 801107a:	e0ec      	b.n	8011256 <_printf_float+0x3fe>
 801107c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 801107e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8011080:	2200      	movs	r2, #0
 8011082:	2300      	movs	r3, #0
 8011084:	f7f2 f988 	bl	8003398 <__aeabi_dcmpeq>
 8011088:	2800      	cmp	r0, #0
 801108a:	d034      	beq.n	80110f6 <_printf_float+0x29e>
 801108c:	2301      	movs	r3, #1
 801108e:	0038      	movs	r0, r7
 8011090:	4a37      	ldr	r2, [pc, #220]	; (8011170 <_printf_float+0x318>)
 8011092:	9908      	ldr	r1, [sp, #32]
 8011094:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8011096:	47a8      	blx	r5
 8011098:	3001      	adds	r0, #1
 801109a:	d100      	bne.n	801109e <_printf_float+0x246>
 801109c:	e73a      	b.n	8010f14 <_printf_float+0xbc>
 801109e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80110a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80110a2:	429a      	cmp	r2, r3
 80110a4:	db02      	blt.n	80110ac <_printf_float+0x254>
 80110a6:	6823      	ldr	r3, [r4, #0]
 80110a8:	07db      	lsls	r3, r3, #31
 80110aa:	d50d      	bpl.n	80110c8 <_printf_float+0x270>
 80110ac:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80110ae:	0038      	movs	r0, r7
 80110b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80110b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80110b4:	9908      	ldr	r1, [sp, #32]
 80110b6:	47a8      	blx	r5
 80110b8:	2500      	movs	r5, #0
 80110ba:	3001      	adds	r0, #1
 80110bc:	d100      	bne.n	80110c0 <_printf_float+0x268>
 80110be:	e729      	b.n	8010f14 <_printf_float+0xbc>
 80110c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80110c2:	3b01      	subs	r3, #1
 80110c4:	42ab      	cmp	r3, r5
 80110c6:	dc0a      	bgt.n	80110de <_printf_float+0x286>
 80110c8:	6823      	ldr	r3, [r4, #0]
 80110ca:	079b      	lsls	r3, r3, #30
 80110cc:	d500      	bpl.n	80110d0 <_printf_float+0x278>
 80110ce:	e116      	b.n	80112fe <_printf_float+0x4a6>
 80110d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80110d2:	68e0      	ldr	r0, [r4, #12]
 80110d4:	4298      	cmp	r0, r3
 80110d6:	db00      	blt.n	80110da <_printf_float+0x282>
 80110d8:	e71e      	b.n	8010f18 <_printf_float+0xc0>
 80110da:	0018      	movs	r0, r3
 80110dc:	e71c      	b.n	8010f18 <_printf_float+0xc0>
 80110de:	0022      	movs	r2, r4
 80110e0:	2301      	movs	r3, #1
 80110e2:	0038      	movs	r0, r7
 80110e4:	9908      	ldr	r1, [sp, #32]
 80110e6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80110e8:	321a      	adds	r2, #26
 80110ea:	47b0      	blx	r6
 80110ec:	3001      	adds	r0, #1
 80110ee:	d100      	bne.n	80110f2 <_printf_float+0x29a>
 80110f0:	e710      	b.n	8010f14 <_printf_float+0xbc>
 80110f2:	3501      	adds	r5, #1
 80110f4:	e7e4      	b.n	80110c0 <_printf_float+0x268>
 80110f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	dc3b      	bgt.n	8011174 <_printf_float+0x31c>
 80110fc:	2301      	movs	r3, #1
 80110fe:	0038      	movs	r0, r7
 8011100:	4a1b      	ldr	r2, [pc, #108]	; (8011170 <_printf_float+0x318>)
 8011102:	9908      	ldr	r1, [sp, #32]
 8011104:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8011106:	47b0      	blx	r6
 8011108:	3001      	adds	r0, #1
 801110a:	d100      	bne.n	801110e <_printf_float+0x2b6>
 801110c:	e702      	b.n	8010f14 <_printf_float+0xbc>
 801110e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011110:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011112:	4313      	orrs	r3, r2
 8011114:	d102      	bne.n	801111c <_printf_float+0x2c4>
 8011116:	6823      	ldr	r3, [r4, #0]
 8011118:	07db      	lsls	r3, r3, #31
 801111a:	d5d5      	bpl.n	80110c8 <_printf_float+0x270>
 801111c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801111e:	0038      	movs	r0, r7
 8011120:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011122:	9908      	ldr	r1, [sp, #32]
 8011124:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8011126:	47b0      	blx	r6
 8011128:	2300      	movs	r3, #0
 801112a:	3001      	adds	r0, #1
 801112c:	d100      	bne.n	8011130 <_printf_float+0x2d8>
 801112e:	e6f1      	b.n	8010f14 <_printf_float+0xbc>
 8011130:	930a      	str	r3, [sp, #40]	; 0x28
 8011132:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011134:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011136:	425b      	negs	r3, r3
 8011138:	4293      	cmp	r3, r2
 801113a:	dc01      	bgt.n	8011140 <_printf_float+0x2e8>
 801113c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801113e:	e791      	b.n	8011064 <_printf_float+0x20c>
 8011140:	0022      	movs	r2, r4
 8011142:	2301      	movs	r3, #1
 8011144:	0038      	movs	r0, r7
 8011146:	9908      	ldr	r1, [sp, #32]
 8011148:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801114a:	321a      	adds	r2, #26
 801114c:	47b0      	blx	r6
 801114e:	3001      	adds	r0, #1
 8011150:	d100      	bne.n	8011154 <_printf_float+0x2fc>
 8011152:	e6df      	b.n	8010f14 <_printf_float+0xbc>
 8011154:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011156:	3301      	adds	r3, #1
 8011158:	e7ea      	b.n	8011130 <_printf_float+0x2d8>
 801115a:	46c0      	nop			; (mov r8, r8)
 801115c:	7fefffff 	.word	0x7fefffff
 8011160:	08016b1c 	.word	0x08016b1c
 8011164:	08016b20 	.word	0x08016b20
 8011168:	08016b24 	.word	0x08016b24
 801116c:	08016b28 	.word	0x08016b28
 8011170:	08016b2c 	.word	0x08016b2c
 8011174:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011176:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011178:	920a      	str	r2, [sp, #40]	; 0x28
 801117a:	429a      	cmp	r2, r3
 801117c:	dd00      	ble.n	8011180 <_printf_float+0x328>
 801117e:	930a      	str	r3, [sp, #40]	; 0x28
 8011180:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011182:	2b00      	cmp	r3, #0
 8011184:	dc3d      	bgt.n	8011202 <_printf_float+0x3aa>
 8011186:	2300      	movs	r3, #0
 8011188:	930e      	str	r3, [sp, #56]	; 0x38
 801118a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801118c:	43db      	mvns	r3, r3
 801118e:	17db      	asrs	r3, r3, #31
 8011190:	930f      	str	r3, [sp, #60]	; 0x3c
 8011192:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011194:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011196:	930b      	str	r3, [sp, #44]	; 0x2c
 8011198:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801119a:	4013      	ands	r3, r2
 801119c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801119e:	1ad3      	subs	r3, r2, r3
 80111a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80111a2:	4293      	cmp	r3, r2
 80111a4:	dc36      	bgt.n	8011214 <_printf_float+0x3bc>
 80111a6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80111a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80111aa:	429a      	cmp	r2, r3
 80111ac:	db40      	blt.n	8011230 <_printf_float+0x3d8>
 80111ae:	6823      	ldr	r3, [r4, #0]
 80111b0:	07db      	lsls	r3, r3, #31
 80111b2:	d43d      	bmi.n	8011230 <_printf_float+0x3d8>
 80111b4:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80111b6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80111b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80111ba:	1af3      	subs	r3, r6, r3
 80111bc:	1ab6      	subs	r6, r6, r2
 80111be:	429e      	cmp	r6, r3
 80111c0:	dd00      	ble.n	80111c4 <_printf_float+0x36c>
 80111c2:	001e      	movs	r6, r3
 80111c4:	2e00      	cmp	r6, #0
 80111c6:	dc3c      	bgt.n	8011242 <_printf_float+0x3ea>
 80111c8:	2300      	movs	r3, #0
 80111ca:	930a      	str	r3, [sp, #40]	; 0x28
 80111cc:	43f3      	mvns	r3, r6
 80111ce:	17db      	asrs	r3, r3, #31
 80111d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80111d2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80111d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80111d6:	1a9b      	subs	r3, r3, r2
 80111d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80111da:	4032      	ands	r2, r6
 80111dc:	1a9b      	subs	r3, r3, r2
 80111de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80111e0:	4293      	cmp	r3, r2
 80111e2:	dc00      	bgt.n	80111e6 <_printf_float+0x38e>
 80111e4:	e770      	b.n	80110c8 <_printf_float+0x270>
 80111e6:	0022      	movs	r2, r4
 80111e8:	2301      	movs	r3, #1
 80111ea:	0038      	movs	r0, r7
 80111ec:	9908      	ldr	r1, [sp, #32]
 80111ee:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80111f0:	321a      	adds	r2, #26
 80111f2:	47a8      	blx	r5
 80111f4:	3001      	adds	r0, #1
 80111f6:	d100      	bne.n	80111fa <_printf_float+0x3a2>
 80111f8:	e68c      	b.n	8010f14 <_printf_float+0xbc>
 80111fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80111fc:	3301      	adds	r3, #1
 80111fe:	930a      	str	r3, [sp, #40]	; 0x28
 8011200:	e7e7      	b.n	80111d2 <_printf_float+0x37a>
 8011202:	002a      	movs	r2, r5
 8011204:	0038      	movs	r0, r7
 8011206:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011208:	9908      	ldr	r1, [sp, #32]
 801120a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801120c:	47b0      	blx	r6
 801120e:	3001      	adds	r0, #1
 8011210:	d1b9      	bne.n	8011186 <_printf_float+0x32e>
 8011212:	e67f      	b.n	8010f14 <_printf_float+0xbc>
 8011214:	0022      	movs	r2, r4
 8011216:	2301      	movs	r3, #1
 8011218:	0038      	movs	r0, r7
 801121a:	9908      	ldr	r1, [sp, #32]
 801121c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801121e:	321a      	adds	r2, #26
 8011220:	47b0      	blx	r6
 8011222:	3001      	adds	r0, #1
 8011224:	d100      	bne.n	8011228 <_printf_float+0x3d0>
 8011226:	e675      	b.n	8010f14 <_printf_float+0xbc>
 8011228:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801122a:	3301      	adds	r3, #1
 801122c:	930e      	str	r3, [sp, #56]	; 0x38
 801122e:	e7b0      	b.n	8011192 <_printf_float+0x33a>
 8011230:	0038      	movs	r0, r7
 8011232:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011234:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011236:	9908      	ldr	r1, [sp, #32]
 8011238:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801123a:	47b0      	blx	r6
 801123c:	3001      	adds	r0, #1
 801123e:	d1b9      	bne.n	80111b4 <_printf_float+0x35c>
 8011240:	e668      	b.n	8010f14 <_printf_float+0xbc>
 8011242:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011244:	0038      	movs	r0, r7
 8011246:	18ea      	adds	r2, r5, r3
 8011248:	9908      	ldr	r1, [sp, #32]
 801124a:	0033      	movs	r3, r6
 801124c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801124e:	47a8      	blx	r5
 8011250:	3001      	adds	r0, #1
 8011252:	d1b9      	bne.n	80111c8 <_printf_float+0x370>
 8011254:	e65e      	b.n	8010f14 <_printf_float+0xbc>
 8011256:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011258:	2b01      	cmp	r3, #1
 801125a:	dc02      	bgt.n	8011262 <_printf_float+0x40a>
 801125c:	2301      	movs	r3, #1
 801125e:	421a      	tst	r2, r3
 8011260:	d03a      	beq.n	80112d8 <_printf_float+0x480>
 8011262:	2301      	movs	r3, #1
 8011264:	002a      	movs	r2, r5
 8011266:	0038      	movs	r0, r7
 8011268:	9908      	ldr	r1, [sp, #32]
 801126a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801126c:	47b0      	blx	r6
 801126e:	3001      	adds	r0, #1
 8011270:	d100      	bne.n	8011274 <_printf_float+0x41c>
 8011272:	e64f      	b.n	8010f14 <_printf_float+0xbc>
 8011274:	0038      	movs	r0, r7
 8011276:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011278:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801127a:	9908      	ldr	r1, [sp, #32]
 801127c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801127e:	47b0      	blx	r6
 8011280:	3001      	adds	r0, #1
 8011282:	d100      	bne.n	8011286 <_printf_float+0x42e>
 8011284:	e646      	b.n	8010f14 <_printf_float+0xbc>
 8011286:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8011288:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 801128a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801128c:	2200      	movs	r2, #0
 801128e:	001e      	movs	r6, r3
 8011290:	2300      	movs	r3, #0
 8011292:	f7f2 f881 	bl	8003398 <__aeabi_dcmpeq>
 8011296:	2800      	cmp	r0, #0
 8011298:	d11c      	bne.n	80112d4 <_printf_float+0x47c>
 801129a:	0033      	movs	r3, r6
 801129c:	1c6a      	adds	r2, r5, #1
 801129e:	3b01      	subs	r3, #1
 80112a0:	0038      	movs	r0, r7
 80112a2:	9908      	ldr	r1, [sp, #32]
 80112a4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80112a6:	47a8      	blx	r5
 80112a8:	3001      	adds	r0, #1
 80112aa:	d10f      	bne.n	80112cc <_printf_float+0x474>
 80112ac:	e632      	b.n	8010f14 <_printf_float+0xbc>
 80112ae:	0022      	movs	r2, r4
 80112b0:	2301      	movs	r3, #1
 80112b2:	0038      	movs	r0, r7
 80112b4:	9908      	ldr	r1, [sp, #32]
 80112b6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80112b8:	321a      	adds	r2, #26
 80112ba:	47b0      	blx	r6
 80112bc:	3001      	adds	r0, #1
 80112be:	d100      	bne.n	80112c2 <_printf_float+0x46a>
 80112c0:	e628      	b.n	8010f14 <_printf_float+0xbc>
 80112c2:	3501      	adds	r5, #1
 80112c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80112c6:	3b01      	subs	r3, #1
 80112c8:	42ab      	cmp	r3, r5
 80112ca:	dcf0      	bgt.n	80112ae <_printf_float+0x456>
 80112cc:	0022      	movs	r2, r4
 80112ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80112d0:	3250      	adds	r2, #80	; 0x50
 80112d2:	e6c8      	b.n	8011066 <_printf_float+0x20e>
 80112d4:	2500      	movs	r5, #0
 80112d6:	e7f5      	b.n	80112c4 <_printf_float+0x46c>
 80112d8:	002a      	movs	r2, r5
 80112da:	e7e1      	b.n	80112a0 <_printf_float+0x448>
 80112dc:	0022      	movs	r2, r4
 80112de:	2301      	movs	r3, #1
 80112e0:	0038      	movs	r0, r7
 80112e2:	9908      	ldr	r1, [sp, #32]
 80112e4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80112e6:	3219      	adds	r2, #25
 80112e8:	47b0      	blx	r6
 80112ea:	3001      	adds	r0, #1
 80112ec:	d100      	bne.n	80112f0 <_printf_float+0x498>
 80112ee:	e611      	b.n	8010f14 <_printf_float+0xbc>
 80112f0:	3501      	adds	r5, #1
 80112f2:	68e3      	ldr	r3, [r4, #12]
 80112f4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80112f6:	1a9b      	subs	r3, r3, r2
 80112f8:	42ab      	cmp	r3, r5
 80112fa:	dcef      	bgt.n	80112dc <_printf_float+0x484>
 80112fc:	e6e8      	b.n	80110d0 <_printf_float+0x278>
 80112fe:	2500      	movs	r5, #0
 8011300:	e7f7      	b.n	80112f2 <_printf_float+0x49a>
 8011302:	46c0      	nop			; (mov r8, r8)

08011304 <_printf_common>:
 8011304:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011306:	0016      	movs	r6, r2
 8011308:	9301      	str	r3, [sp, #4]
 801130a:	688a      	ldr	r2, [r1, #8]
 801130c:	690b      	ldr	r3, [r1, #16]
 801130e:	000c      	movs	r4, r1
 8011310:	9000      	str	r0, [sp, #0]
 8011312:	4293      	cmp	r3, r2
 8011314:	da00      	bge.n	8011318 <_printf_common+0x14>
 8011316:	0013      	movs	r3, r2
 8011318:	0022      	movs	r2, r4
 801131a:	6033      	str	r3, [r6, #0]
 801131c:	3243      	adds	r2, #67	; 0x43
 801131e:	7812      	ldrb	r2, [r2, #0]
 8011320:	2a00      	cmp	r2, #0
 8011322:	d001      	beq.n	8011328 <_printf_common+0x24>
 8011324:	3301      	adds	r3, #1
 8011326:	6033      	str	r3, [r6, #0]
 8011328:	6823      	ldr	r3, [r4, #0]
 801132a:	069b      	lsls	r3, r3, #26
 801132c:	d502      	bpl.n	8011334 <_printf_common+0x30>
 801132e:	6833      	ldr	r3, [r6, #0]
 8011330:	3302      	adds	r3, #2
 8011332:	6033      	str	r3, [r6, #0]
 8011334:	6822      	ldr	r2, [r4, #0]
 8011336:	2306      	movs	r3, #6
 8011338:	0015      	movs	r5, r2
 801133a:	401d      	ands	r5, r3
 801133c:	421a      	tst	r2, r3
 801133e:	d027      	beq.n	8011390 <_printf_common+0x8c>
 8011340:	0023      	movs	r3, r4
 8011342:	3343      	adds	r3, #67	; 0x43
 8011344:	781b      	ldrb	r3, [r3, #0]
 8011346:	1e5a      	subs	r2, r3, #1
 8011348:	4193      	sbcs	r3, r2
 801134a:	6822      	ldr	r2, [r4, #0]
 801134c:	0692      	lsls	r2, r2, #26
 801134e:	d430      	bmi.n	80113b2 <_printf_common+0xae>
 8011350:	0022      	movs	r2, r4
 8011352:	9901      	ldr	r1, [sp, #4]
 8011354:	9800      	ldr	r0, [sp, #0]
 8011356:	9d08      	ldr	r5, [sp, #32]
 8011358:	3243      	adds	r2, #67	; 0x43
 801135a:	47a8      	blx	r5
 801135c:	3001      	adds	r0, #1
 801135e:	d025      	beq.n	80113ac <_printf_common+0xa8>
 8011360:	2206      	movs	r2, #6
 8011362:	6823      	ldr	r3, [r4, #0]
 8011364:	2500      	movs	r5, #0
 8011366:	4013      	ands	r3, r2
 8011368:	2b04      	cmp	r3, #4
 801136a:	d105      	bne.n	8011378 <_printf_common+0x74>
 801136c:	6833      	ldr	r3, [r6, #0]
 801136e:	68e5      	ldr	r5, [r4, #12]
 8011370:	1aed      	subs	r5, r5, r3
 8011372:	43eb      	mvns	r3, r5
 8011374:	17db      	asrs	r3, r3, #31
 8011376:	401d      	ands	r5, r3
 8011378:	68a3      	ldr	r3, [r4, #8]
 801137a:	6922      	ldr	r2, [r4, #16]
 801137c:	4293      	cmp	r3, r2
 801137e:	dd01      	ble.n	8011384 <_printf_common+0x80>
 8011380:	1a9b      	subs	r3, r3, r2
 8011382:	18ed      	adds	r5, r5, r3
 8011384:	2600      	movs	r6, #0
 8011386:	42b5      	cmp	r5, r6
 8011388:	d120      	bne.n	80113cc <_printf_common+0xc8>
 801138a:	2000      	movs	r0, #0
 801138c:	e010      	b.n	80113b0 <_printf_common+0xac>
 801138e:	3501      	adds	r5, #1
 8011390:	68e3      	ldr	r3, [r4, #12]
 8011392:	6832      	ldr	r2, [r6, #0]
 8011394:	1a9b      	subs	r3, r3, r2
 8011396:	42ab      	cmp	r3, r5
 8011398:	ddd2      	ble.n	8011340 <_printf_common+0x3c>
 801139a:	0022      	movs	r2, r4
 801139c:	2301      	movs	r3, #1
 801139e:	9901      	ldr	r1, [sp, #4]
 80113a0:	9800      	ldr	r0, [sp, #0]
 80113a2:	9f08      	ldr	r7, [sp, #32]
 80113a4:	3219      	adds	r2, #25
 80113a6:	47b8      	blx	r7
 80113a8:	3001      	adds	r0, #1
 80113aa:	d1f0      	bne.n	801138e <_printf_common+0x8a>
 80113ac:	2001      	movs	r0, #1
 80113ae:	4240      	negs	r0, r0
 80113b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80113b2:	2030      	movs	r0, #48	; 0x30
 80113b4:	18e1      	adds	r1, r4, r3
 80113b6:	3143      	adds	r1, #67	; 0x43
 80113b8:	7008      	strb	r0, [r1, #0]
 80113ba:	0021      	movs	r1, r4
 80113bc:	1c5a      	adds	r2, r3, #1
 80113be:	3145      	adds	r1, #69	; 0x45
 80113c0:	7809      	ldrb	r1, [r1, #0]
 80113c2:	18a2      	adds	r2, r4, r2
 80113c4:	3243      	adds	r2, #67	; 0x43
 80113c6:	3302      	adds	r3, #2
 80113c8:	7011      	strb	r1, [r2, #0]
 80113ca:	e7c1      	b.n	8011350 <_printf_common+0x4c>
 80113cc:	0022      	movs	r2, r4
 80113ce:	2301      	movs	r3, #1
 80113d0:	9901      	ldr	r1, [sp, #4]
 80113d2:	9800      	ldr	r0, [sp, #0]
 80113d4:	9f08      	ldr	r7, [sp, #32]
 80113d6:	321a      	adds	r2, #26
 80113d8:	47b8      	blx	r7
 80113da:	3001      	adds	r0, #1
 80113dc:	d0e6      	beq.n	80113ac <_printf_common+0xa8>
 80113de:	3601      	adds	r6, #1
 80113e0:	e7d1      	b.n	8011386 <_printf_common+0x82>
	...

080113e4 <_printf_i>:
 80113e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80113e6:	b08b      	sub	sp, #44	; 0x2c
 80113e8:	9206      	str	r2, [sp, #24]
 80113ea:	000a      	movs	r2, r1
 80113ec:	3243      	adds	r2, #67	; 0x43
 80113ee:	9307      	str	r3, [sp, #28]
 80113f0:	9005      	str	r0, [sp, #20]
 80113f2:	9204      	str	r2, [sp, #16]
 80113f4:	7e0a      	ldrb	r2, [r1, #24]
 80113f6:	000c      	movs	r4, r1
 80113f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80113fa:	2a78      	cmp	r2, #120	; 0x78
 80113fc:	d809      	bhi.n	8011412 <_printf_i+0x2e>
 80113fe:	2a62      	cmp	r2, #98	; 0x62
 8011400:	d80b      	bhi.n	801141a <_printf_i+0x36>
 8011402:	2a00      	cmp	r2, #0
 8011404:	d100      	bne.n	8011408 <_printf_i+0x24>
 8011406:	e0be      	b.n	8011586 <_printf_i+0x1a2>
 8011408:	497c      	ldr	r1, [pc, #496]	; (80115fc <_printf_i+0x218>)
 801140a:	9103      	str	r1, [sp, #12]
 801140c:	2a58      	cmp	r2, #88	; 0x58
 801140e:	d100      	bne.n	8011412 <_printf_i+0x2e>
 8011410:	e093      	b.n	801153a <_printf_i+0x156>
 8011412:	0026      	movs	r6, r4
 8011414:	3642      	adds	r6, #66	; 0x42
 8011416:	7032      	strb	r2, [r6, #0]
 8011418:	e022      	b.n	8011460 <_printf_i+0x7c>
 801141a:	0010      	movs	r0, r2
 801141c:	3863      	subs	r0, #99	; 0x63
 801141e:	2815      	cmp	r0, #21
 8011420:	d8f7      	bhi.n	8011412 <_printf_i+0x2e>
 8011422:	f7f1 fe29 	bl	8003078 <__gnu_thumb1_case_shi>
 8011426:	0016      	.short	0x0016
 8011428:	fff6001f 	.word	0xfff6001f
 801142c:	fff6fff6 	.word	0xfff6fff6
 8011430:	001ffff6 	.word	0x001ffff6
 8011434:	fff6fff6 	.word	0xfff6fff6
 8011438:	fff6fff6 	.word	0xfff6fff6
 801143c:	003600a3 	.word	0x003600a3
 8011440:	fff60083 	.word	0xfff60083
 8011444:	00b4fff6 	.word	0x00b4fff6
 8011448:	0036fff6 	.word	0x0036fff6
 801144c:	fff6fff6 	.word	0xfff6fff6
 8011450:	0087      	.short	0x0087
 8011452:	0026      	movs	r6, r4
 8011454:	681a      	ldr	r2, [r3, #0]
 8011456:	3642      	adds	r6, #66	; 0x42
 8011458:	1d11      	adds	r1, r2, #4
 801145a:	6019      	str	r1, [r3, #0]
 801145c:	6813      	ldr	r3, [r2, #0]
 801145e:	7033      	strb	r3, [r6, #0]
 8011460:	2301      	movs	r3, #1
 8011462:	e0a2      	b.n	80115aa <_printf_i+0x1c6>
 8011464:	6818      	ldr	r0, [r3, #0]
 8011466:	6809      	ldr	r1, [r1, #0]
 8011468:	1d02      	adds	r2, r0, #4
 801146a:	060d      	lsls	r5, r1, #24
 801146c:	d50b      	bpl.n	8011486 <_printf_i+0xa2>
 801146e:	6805      	ldr	r5, [r0, #0]
 8011470:	601a      	str	r2, [r3, #0]
 8011472:	2d00      	cmp	r5, #0
 8011474:	da03      	bge.n	801147e <_printf_i+0x9a>
 8011476:	232d      	movs	r3, #45	; 0x2d
 8011478:	9a04      	ldr	r2, [sp, #16]
 801147a:	426d      	negs	r5, r5
 801147c:	7013      	strb	r3, [r2, #0]
 801147e:	4b5f      	ldr	r3, [pc, #380]	; (80115fc <_printf_i+0x218>)
 8011480:	270a      	movs	r7, #10
 8011482:	9303      	str	r3, [sp, #12]
 8011484:	e01b      	b.n	80114be <_printf_i+0xda>
 8011486:	6805      	ldr	r5, [r0, #0]
 8011488:	601a      	str	r2, [r3, #0]
 801148a:	0649      	lsls	r1, r1, #25
 801148c:	d5f1      	bpl.n	8011472 <_printf_i+0x8e>
 801148e:	b22d      	sxth	r5, r5
 8011490:	e7ef      	b.n	8011472 <_printf_i+0x8e>
 8011492:	680d      	ldr	r5, [r1, #0]
 8011494:	6819      	ldr	r1, [r3, #0]
 8011496:	1d08      	adds	r0, r1, #4
 8011498:	6018      	str	r0, [r3, #0]
 801149a:	062e      	lsls	r6, r5, #24
 801149c:	d501      	bpl.n	80114a2 <_printf_i+0xbe>
 801149e:	680d      	ldr	r5, [r1, #0]
 80114a0:	e003      	b.n	80114aa <_printf_i+0xc6>
 80114a2:	066d      	lsls	r5, r5, #25
 80114a4:	d5fb      	bpl.n	801149e <_printf_i+0xba>
 80114a6:	680d      	ldr	r5, [r1, #0]
 80114a8:	b2ad      	uxth	r5, r5
 80114aa:	4b54      	ldr	r3, [pc, #336]	; (80115fc <_printf_i+0x218>)
 80114ac:	2708      	movs	r7, #8
 80114ae:	9303      	str	r3, [sp, #12]
 80114b0:	2a6f      	cmp	r2, #111	; 0x6f
 80114b2:	d000      	beq.n	80114b6 <_printf_i+0xd2>
 80114b4:	3702      	adds	r7, #2
 80114b6:	0023      	movs	r3, r4
 80114b8:	2200      	movs	r2, #0
 80114ba:	3343      	adds	r3, #67	; 0x43
 80114bc:	701a      	strb	r2, [r3, #0]
 80114be:	6863      	ldr	r3, [r4, #4]
 80114c0:	60a3      	str	r3, [r4, #8]
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	db03      	blt.n	80114ce <_printf_i+0xea>
 80114c6:	2104      	movs	r1, #4
 80114c8:	6822      	ldr	r2, [r4, #0]
 80114ca:	438a      	bics	r2, r1
 80114cc:	6022      	str	r2, [r4, #0]
 80114ce:	2d00      	cmp	r5, #0
 80114d0:	d102      	bne.n	80114d8 <_printf_i+0xf4>
 80114d2:	9e04      	ldr	r6, [sp, #16]
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d00c      	beq.n	80114f2 <_printf_i+0x10e>
 80114d8:	9e04      	ldr	r6, [sp, #16]
 80114da:	0028      	movs	r0, r5
 80114dc:	0039      	movs	r1, r7
 80114de:	f7f1 fe5b 	bl	8003198 <__aeabi_uidivmod>
 80114e2:	9b03      	ldr	r3, [sp, #12]
 80114e4:	3e01      	subs	r6, #1
 80114e6:	5c5b      	ldrb	r3, [r3, r1]
 80114e8:	7033      	strb	r3, [r6, #0]
 80114ea:	002b      	movs	r3, r5
 80114ec:	0005      	movs	r5, r0
 80114ee:	429f      	cmp	r7, r3
 80114f0:	d9f3      	bls.n	80114da <_printf_i+0xf6>
 80114f2:	2f08      	cmp	r7, #8
 80114f4:	d109      	bne.n	801150a <_printf_i+0x126>
 80114f6:	6823      	ldr	r3, [r4, #0]
 80114f8:	07db      	lsls	r3, r3, #31
 80114fa:	d506      	bpl.n	801150a <_printf_i+0x126>
 80114fc:	6862      	ldr	r2, [r4, #4]
 80114fe:	6923      	ldr	r3, [r4, #16]
 8011500:	429a      	cmp	r2, r3
 8011502:	dc02      	bgt.n	801150a <_printf_i+0x126>
 8011504:	2330      	movs	r3, #48	; 0x30
 8011506:	3e01      	subs	r6, #1
 8011508:	7033      	strb	r3, [r6, #0]
 801150a:	9b04      	ldr	r3, [sp, #16]
 801150c:	1b9b      	subs	r3, r3, r6
 801150e:	6123      	str	r3, [r4, #16]
 8011510:	9b07      	ldr	r3, [sp, #28]
 8011512:	0021      	movs	r1, r4
 8011514:	9300      	str	r3, [sp, #0]
 8011516:	9805      	ldr	r0, [sp, #20]
 8011518:	9b06      	ldr	r3, [sp, #24]
 801151a:	aa09      	add	r2, sp, #36	; 0x24
 801151c:	f7ff fef2 	bl	8011304 <_printf_common>
 8011520:	3001      	adds	r0, #1
 8011522:	d147      	bne.n	80115b4 <_printf_i+0x1d0>
 8011524:	2001      	movs	r0, #1
 8011526:	4240      	negs	r0, r0
 8011528:	b00b      	add	sp, #44	; 0x2c
 801152a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801152c:	2220      	movs	r2, #32
 801152e:	6809      	ldr	r1, [r1, #0]
 8011530:	430a      	orrs	r2, r1
 8011532:	6022      	str	r2, [r4, #0]
 8011534:	2278      	movs	r2, #120	; 0x78
 8011536:	4932      	ldr	r1, [pc, #200]	; (8011600 <_printf_i+0x21c>)
 8011538:	9103      	str	r1, [sp, #12]
 801153a:	0021      	movs	r1, r4
 801153c:	3145      	adds	r1, #69	; 0x45
 801153e:	700a      	strb	r2, [r1, #0]
 8011540:	6819      	ldr	r1, [r3, #0]
 8011542:	6822      	ldr	r2, [r4, #0]
 8011544:	c920      	ldmia	r1!, {r5}
 8011546:	0610      	lsls	r0, r2, #24
 8011548:	d402      	bmi.n	8011550 <_printf_i+0x16c>
 801154a:	0650      	lsls	r0, r2, #25
 801154c:	d500      	bpl.n	8011550 <_printf_i+0x16c>
 801154e:	b2ad      	uxth	r5, r5
 8011550:	6019      	str	r1, [r3, #0]
 8011552:	07d3      	lsls	r3, r2, #31
 8011554:	d502      	bpl.n	801155c <_printf_i+0x178>
 8011556:	2320      	movs	r3, #32
 8011558:	4313      	orrs	r3, r2
 801155a:	6023      	str	r3, [r4, #0]
 801155c:	2710      	movs	r7, #16
 801155e:	2d00      	cmp	r5, #0
 8011560:	d1a9      	bne.n	80114b6 <_printf_i+0xd2>
 8011562:	2220      	movs	r2, #32
 8011564:	6823      	ldr	r3, [r4, #0]
 8011566:	4393      	bics	r3, r2
 8011568:	6023      	str	r3, [r4, #0]
 801156a:	e7a4      	b.n	80114b6 <_printf_i+0xd2>
 801156c:	681a      	ldr	r2, [r3, #0]
 801156e:	680d      	ldr	r5, [r1, #0]
 8011570:	1d10      	adds	r0, r2, #4
 8011572:	6949      	ldr	r1, [r1, #20]
 8011574:	6018      	str	r0, [r3, #0]
 8011576:	6813      	ldr	r3, [r2, #0]
 8011578:	062e      	lsls	r6, r5, #24
 801157a:	d501      	bpl.n	8011580 <_printf_i+0x19c>
 801157c:	6019      	str	r1, [r3, #0]
 801157e:	e002      	b.n	8011586 <_printf_i+0x1a2>
 8011580:	066d      	lsls	r5, r5, #25
 8011582:	d5fb      	bpl.n	801157c <_printf_i+0x198>
 8011584:	8019      	strh	r1, [r3, #0]
 8011586:	2300      	movs	r3, #0
 8011588:	9e04      	ldr	r6, [sp, #16]
 801158a:	6123      	str	r3, [r4, #16]
 801158c:	e7c0      	b.n	8011510 <_printf_i+0x12c>
 801158e:	681a      	ldr	r2, [r3, #0]
 8011590:	1d11      	adds	r1, r2, #4
 8011592:	6019      	str	r1, [r3, #0]
 8011594:	6816      	ldr	r6, [r2, #0]
 8011596:	2100      	movs	r1, #0
 8011598:	0030      	movs	r0, r6
 801159a:	6862      	ldr	r2, [r4, #4]
 801159c:	f000 fd4b 	bl	8012036 <memchr>
 80115a0:	2800      	cmp	r0, #0
 80115a2:	d001      	beq.n	80115a8 <_printf_i+0x1c4>
 80115a4:	1b80      	subs	r0, r0, r6
 80115a6:	6060      	str	r0, [r4, #4]
 80115a8:	6863      	ldr	r3, [r4, #4]
 80115aa:	6123      	str	r3, [r4, #16]
 80115ac:	2300      	movs	r3, #0
 80115ae:	9a04      	ldr	r2, [sp, #16]
 80115b0:	7013      	strb	r3, [r2, #0]
 80115b2:	e7ad      	b.n	8011510 <_printf_i+0x12c>
 80115b4:	0032      	movs	r2, r6
 80115b6:	6923      	ldr	r3, [r4, #16]
 80115b8:	9906      	ldr	r1, [sp, #24]
 80115ba:	9805      	ldr	r0, [sp, #20]
 80115bc:	9d07      	ldr	r5, [sp, #28]
 80115be:	47a8      	blx	r5
 80115c0:	3001      	adds	r0, #1
 80115c2:	d0af      	beq.n	8011524 <_printf_i+0x140>
 80115c4:	6823      	ldr	r3, [r4, #0]
 80115c6:	079b      	lsls	r3, r3, #30
 80115c8:	d415      	bmi.n	80115f6 <_printf_i+0x212>
 80115ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80115cc:	68e0      	ldr	r0, [r4, #12]
 80115ce:	4298      	cmp	r0, r3
 80115d0:	daaa      	bge.n	8011528 <_printf_i+0x144>
 80115d2:	0018      	movs	r0, r3
 80115d4:	e7a8      	b.n	8011528 <_printf_i+0x144>
 80115d6:	0022      	movs	r2, r4
 80115d8:	2301      	movs	r3, #1
 80115da:	9906      	ldr	r1, [sp, #24]
 80115dc:	9805      	ldr	r0, [sp, #20]
 80115de:	9e07      	ldr	r6, [sp, #28]
 80115e0:	3219      	adds	r2, #25
 80115e2:	47b0      	blx	r6
 80115e4:	3001      	adds	r0, #1
 80115e6:	d09d      	beq.n	8011524 <_printf_i+0x140>
 80115e8:	3501      	adds	r5, #1
 80115ea:	68e3      	ldr	r3, [r4, #12]
 80115ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80115ee:	1a9b      	subs	r3, r3, r2
 80115f0:	42ab      	cmp	r3, r5
 80115f2:	dcf0      	bgt.n	80115d6 <_printf_i+0x1f2>
 80115f4:	e7e9      	b.n	80115ca <_printf_i+0x1e6>
 80115f6:	2500      	movs	r5, #0
 80115f8:	e7f7      	b.n	80115ea <_printf_i+0x206>
 80115fa:	46c0      	nop			; (mov r8, r8)
 80115fc:	08016b2e 	.word	0x08016b2e
 8011600:	08016b3f 	.word	0x08016b3f

08011604 <_scanf_float>:
 8011604:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011606:	b08b      	sub	sp, #44	; 0x2c
 8011608:	0016      	movs	r6, r2
 801160a:	9002      	str	r0, [sp, #8]
 801160c:	22ae      	movs	r2, #174	; 0xae
 801160e:	2000      	movs	r0, #0
 8011610:	9307      	str	r3, [sp, #28]
 8011612:	688b      	ldr	r3, [r1, #8]
 8011614:	000f      	movs	r7, r1
 8011616:	1e59      	subs	r1, r3, #1
 8011618:	0052      	lsls	r2, r2, #1
 801161a:	9006      	str	r0, [sp, #24]
 801161c:	4291      	cmp	r1, r2
 801161e:	d905      	bls.n	801162c <_scanf_float+0x28>
 8011620:	3b5e      	subs	r3, #94	; 0x5e
 8011622:	3bff      	subs	r3, #255	; 0xff
 8011624:	9306      	str	r3, [sp, #24]
 8011626:	235e      	movs	r3, #94	; 0x5e
 8011628:	33ff      	adds	r3, #255	; 0xff
 801162a:	60bb      	str	r3, [r7, #8]
 801162c:	23f0      	movs	r3, #240	; 0xf0
 801162e:	683a      	ldr	r2, [r7, #0]
 8011630:	00db      	lsls	r3, r3, #3
 8011632:	4313      	orrs	r3, r2
 8011634:	603b      	str	r3, [r7, #0]
 8011636:	003b      	movs	r3, r7
 8011638:	2400      	movs	r4, #0
 801163a:	331c      	adds	r3, #28
 801163c:	001d      	movs	r5, r3
 801163e:	9304      	str	r3, [sp, #16]
 8011640:	9403      	str	r4, [sp, #12]
 8011642:	9409      	str	r4, [sp, #36]	; 0x24
 8011644:	9408      	str	r4, [sp, #32]
 8011646:	9401      	str	r4, [sp, #4]
 8011648:	9405      	str	r4, [sp, #20]
 801164a:	68ba      	ldr	r2, [r7, #8]
 801164c:	2a00      	cmp	r2, #0
 801164e:	d00a      	beq.n	8011666 <_scanf_float+0x62>
 8011650:	6833      	ldr	r3, [r6, #0]
 8011652:	781b      	ldrb	r3, [r3, #0]
 8011654:	2b4e      	cmp	r3, #78	; 0x4e
 8011656:	d844      	bhi.n	80116e2 <_scanf_float+0xde>
 8011658:	0018      	movs	r0, r3
 801165a:	2b40      	cmp	r3, #64	; 0x40
 801165c:	d82c      	bhi.n	80116b8 <_scanf_float+0xb4>
 801165e:	382b      	subs	r0, #43	; 0x2b
 8011660:	b2c1      	uxtb	r1, r0
 8011662:	290e      	cmp	r1, #14
 8011664:	d92a      	bls.n	80116bc <_scanf_float+0xb8>
 8011666:	9b01      	ldr	r3, [sp, #4]
 8011668:	2b00      	cmp	r3, #0
 801166a:	d003      	beq.n	8011674 <_scanf_float+0x70>
 801166c:	683b      	ldr	r3, [r7, #0]
 801166e:	4aa3      	ldr	r2, [pc, #652]	; (80118fc <_scanf_float+0x2f8>)
 8011670:	4013      	ands	r3, r2
 8011672:	603b      	str	r3, [r7, #0]
 8011674:	9b03      	ldr	r3, [sp, #12]
 8011676:	3b01      	subs	r3, #1
 8011678:	2b01      	cmp	r3, #1
 801167a:	d900      	bls.n	801167e <_scanf_float+0x7a>
 801167c:	e0f9      	b.n	8011872 <_scanf_float+0x26e>
 801167e:	24be      	movs	r4, #190	; 0xbe
 8011680:	0064      	lsls	r4, r4, #1
 8011682:	9b04      	ldr	r3, [sp, #16]
 8011684:	429d      	cmp	r5, r3
 8011686:	d900      	bls.n	801168a <_scanf_float+0x86>
 8011688:	e0e9      	b.n	801185e <_scanf_float+0x25a>
 801168a:	2301      	movs	r3, #1
 801168c:	9303      	str	r3, [sp, #12]
 801168e:	e183      	b.n	8011998 <_scanf_float+0x394>
 8011690:	0018      	movs	r0, r3
 8011692:	3861      	subs	r0, #97	; 0x61
 8011694:	280d      	cmp	r0, #13
 8011696:	d8e6      	bhi.n	8011666 <_scanf_float+0x62>
 8011698:	f7f1 fcee 	bl	8003078 <__gnu_thumb1_case_shi>
 801169c:	ffe50083 	.word	0xffe50083
 80116a0:	ffe5ffe5 	.word	0xffe5ffe5
 80116a4:	00a200b6 	.word	0x00a200b6
 80116a8:	ffe5ffe5 	.word	0xffe5ffe5
 80116ac:	ffe50089 	.word	0xffe50089
 80116b0:	ffe5ffe5 	.word	0xffe5ffe5
 80116b4:	0065ffe5 	.word	0x0065ffe5
 80116b8:	3841      	subs	r0, #65	; 0x41
 80116ba:	e7eb      	b.n	8011694 <_scanf_float+0x90>
 80116bc:	280e      	cmp	r0, #14
 80116be:	d8d2      	bhi.n	8011666 <_scanf_float+0x62>
 80116c0:	f7f1 fcda 	bl	8003078 <__gnu_thumb1_case_shi>
 80116c4:	ffd1004b 	.word	0xffd1004b
 80116c8:	0098004b 	.word	0x0098004b
 80116cc:	0020ffd1 	.word	0x0020ffd1
 80116d0:	00400040 	.word	0x00400040
 80116d4:	00400040 	.word	0x00400040
 80116d8:	00400040 	.word	0x00400040
 80116dc:	00400040 	.word	0x00400040
 80116e0:	0040      	.short	0x0040
 80116e2:	2b6e      	cmp	r3, #110	; 0x6e
 80116e4:	d809      	bhi.n	80116fa <_scanf_float+0xf6>
 80116e6:	2b60      	cmp	r3, #96	; 0x60
 80116e8:	d8d2      	bhi.n	8011690 <_scanf_float+0x8c>
 80116ea:	2b54      	cmp	r3, #84	; 0x54
 80116ec:	d07d      	beq.n	80117ea <_scanf_float+0x1e6>
 80116ee:	2b59      	cmp	r3, #89	; 0x59
 80116f0:	d1b9      	bne.n	8011666 <_scanf_float+0x62>
 80116f2:	2c07      	cmp	r4, #7
 80116f4:	d1b7      	bne.n	8011666 <_scanf_float+0x62>
 80116f6:	2408      	movs	r4, #8
 80116f8:	e02c      	b.n	8011754 <_scanf_float+0x150>
 80116fa:	2b74      	cmp	r3, #116	; 0x74
 80116fc:	d075      	beq.n	80117ea <_scanf_float+0x1e6>
 80116fe:	2b79      	cmp	r3, #121	; 0x79
 8011700:	d0f7      	beq.n	80116f2 <_scanf_float+0xee>
 8011702:	e7b0      	b.n	8011666 <_scanf_float+0x62>
 8011704:	6839      	ldr	r1, [r7, #0]
 8011706:	05c8      	lsls	r0, r1, #23
 8011708:	d51c      	bpl.n	8011744 <_scanf_float+0x140>
 801170a:	2380      	movs	r3, #128	; 0x80
 801170c:	4399      	bics	r1, r3
 801170e:	9b01      	ldr	r3, [sp, #4]
 8011710:	6039      	str	r1, [r7, #0]
 8011712:	3301      	adds	r3, #1
 8011714:	9301      	str	r3, [sp, #4]
 8011716:	9b06      	ldr	r3, [sp, #24]
 8011718:	2b00      	cmp	r3, #0
 801171a:	d003      	beq.n	8011724 <_scanf_float+0x120>
 801171c:	3b01      	subs	r3, #1
 801171e:	3201      	adds	r2, #1
 8011720:	9306      	str	r3, [sp, #24]
 8011722:	60ba      	str	r2, [r7, #8]
 8011724:	68bb      	ldr	r3, [r7, #8]
 8011726:	3b01      	subs	r3, #1
 8011728:	60bb      	str	r3, [r7, #8]
 801172a:	693b      	ldr	r3, [r7, #16]
 801172c:	3301      	adds	r3, #1
 801172e:	613b      	str	r3, [r7, #16]
 8011730:	6873      	ldr	r3, [r6, #4]
 8011732:	3b01      	subs	r3, #1
 8011734:	6073      	str	r3, [r6, #4]
 8011736:	2b00      	cmp	r3, #0
 8011738:	dc00      	bgt.n	801173c <_scanf_float+0x138>
 801173a:	e086      	b.n	801184a <_scanf_float+0x246>
 801173c:	6833      	ldr	r3, [r6, #0]
 801173e:	3301      	adds	r3, #1
 8011740:	6033      	str	r3, [r6, #0]
 8011742:	e782      	b.n	801164a <_scanf_float+0x46>
 8011744:	9a03      	ldr	r2, [sp, #12]
 8011746:	1912      	adds	r2, r2, r4
 8011748:	2a00      	cmp	r2, #0
 801174a:	d18c      	bne.n	8011666 <_scanf_float+0x62>
 801174c:	683a      	ldr	r2, [r7, #0]
 801174e:	496c      	ldr	r1, [pc, #432]	; (8011900 <_scanf_float+0x2fc>)
 8011750:	400a      	ands	r2, r1
 8011752:	603a      	str	r2, [r7, #0]
 8011754:	702b      	strb	r3, [r5, #0]
 8011756:	3501      	adds	r5, #1
 8011758:	e7e4      	b.n	8011724 <_scanf_float+0x120>
 801175a:	2180      	movs	r1, #128	; 0x80
 801175c:	683a      	ldr	r2, [r7, #0]
 801175e:	420a      	tst	r2, r1
 8011760:	d081      	beq.n	8011666 <_scanf_float+0x62>
 8011762:	438a      	bics	r2, r1
 8011764:	e7f5      	b.n	8011752 <_scanf_float+0x14e>
 8011766:	9a03      	ldr	r2, [sp, #12]
 8011768:	2a00      	cmp	r2, #0
 801176a:	d10f      	bne.n	801178c <_scanf_float+0x188>
 801176c:	9a01      	ldr	r2, [sp, #4]
 801176e:	2a00      	cmp	r2, #0
 8011770:	d10f      	bne.n	8011792 <_scanf_float+0x18e>
 8011772:	683a      	ldr	r2, [r7, #0]
 8011774:	21e0      	movs	r1, #224	; 0xe0
 8011776:	0010      	movs	r0, r2
 8011778:	00c9      	lsls	r1, r1, #3
 801177a:	4008      	ands	r0, r1
 801177c:	4288      	cmp	r0, r1
 801177e:	d108      	bne.n	8011792 <_scanf_float+0x18e>
 8011780:	4960      	ldr	r1, [pc, #384]	; (8011904 <_scanf_float+0x300>)
 8011782:	400a      	ands	r2, r1
 8011784:	603a      	str	r2, [r7, #0]
 8011786:	2201      	movs	r2, #1
 8011788:	9203      	str	r2, [sp, #12]
 801178a:	e7e3      	b.n	8011754 <_scanf_float+0x150>
 801178c:	9a03      	ldr	r2, [sp, #12]
 801178e:	2a02      	cmp	r2, #2
 8011790:	d059      	beq.n	8011846 <_scanf_float+0x242>
 8011792:	2c01      	cmp	r4, #1
 8011794:	d002      	beq.n	801179c <_scanf_float+0x198>
 8011796:	2c04      	cmp	r4, #4
 8011798:	d000      	beq.n	801179c <_scanf_float+0x198>
 801179a:	e764      	b.n	8011666 <_scanf_float+0x62>
 801179c:	3401      	adds	r4, #1
 801179e:	b2e4      	uxtb	r4, r4
 80117a0:	e7d8      	b.n	8011754 <_scanf_float+0x150>
 80117a2:	9a03      	ldr	r2, [sp, #12]
 80117a4:	2a01      	cmp	r2, #1
 80117a6:	d000      	beq.n	80117aa <_scanf_float+0x1a6>
 80117a8:	e75d      	b.n	8011666 <_scanf_float+0x62>
 80117aa:	2202      	movs	r2, #2
 80117ac:	e7ec      	b.n	8011788 <_scanf_float+0x184>
 80117ae:	2c00      	cmp	r4, #0
 80117b0:	d110      	bne.n	80117d4 <_scanf_float+0x1d0>
 80117b2:	9a01      	ldr	r2, [sp, #4]
 80117b4:	2a00      	cmp	r2, #0
 80117b6:	d000      	beq.n	80117ba <_scanf_float+0x1b6>
 80117b8:	e758      	b.n	801166c <_scanf_float+0x68>
 80117ba:	683a      	ldr	r2, [r7, #0]
 80117bc:	21e0      	movs	r1, #224	; 0xe0
 80117be:	0010      	movs	r0, r2
 80117c0:	00c9      	lsls	r1, r1, #3
 80117c2:	4008      	ands	r0, r1
 80117c4:	4288      	cmp	r0, r1
 80117c6:	d000      	beq.n	80117ca <_scanf_float+0x1c6>
 80117c8:	e754      	b.n	8011674 <_scanf_float+0x70>
 80117ca:	494e      	ldr	r1, [pc, #312]	; (8011904 <_scanf_float+0x300>)
 80117cc:	3401      	adds	r4, #1
 80117ce:	400a      	ands	r2, r1
 80117d0:	603a      	str	r2, [r7, #0]
 80117d2:	e7bf      	b.n	8011754 <_scanf_float+0x150>
 80117d4:	21fd      	movs	r1, #253	; 0xfd
 80117d6:	1ee2      	subs	r2, r4, #3
 80117d8:	420a      	tst	r2, r1
 80117da:	d000      	beq.n	80117de <_scanf_float+0x1da>
 80117dc:	e743      	b.n	8011666 <_scanf_float+0x62>
 80117de:	e7dd      	b.n	801179c <_scanf_float+0x198>
 80117e0:	2c02      	cmp	r4, #2
 80117e2:	d000      	beq.n	80117e6 <_scanf_float+0x1e2>
 80117e4:	e73f      	b.n	8011666 <_scanf_float+0x62>
 80117e6:	2403      	movs	r4, #3
 80117e8:	e7b4      	b.n	8011754 <_scanf_float+0x150>
 80117ea:	2c06      	cmp	r4, #6
 80117ec:	d000      	beq.n	80117f0 <_scanf_float+0x1ec>
 80117ee:	e73a      	b.n	8011666 <_scanf_float+0x62>
 80117f0:	2407      	movs	r4, #7
 80117f2:	e7af      	b.n	8011754 <_scanf_float+0x150>
 80117f4:	683a      	ldr	r2, [r7, #0]
 80117f6:	0591      	lsls	r1, r2, #22
 80117f8:	d400      	bmi.n	80117fc <_scanf_float+0x1f8>
 80117fa:	e734      	b.n	8011666 <_scanf_float+0x62>
 80117fc:	4942      	ldr	r1, [pc, #264]	; (8011908 <_scanf_float+0x304>)
 80117fe:	400a      	ands	r2, r1
 8011800:	603a      	str	r2, [r7, #0]
 8011802:	9a01      	ldr	r2, [sp, #4]
 8011804:	9205      	str	r2, [sp, #20]
 8011806:	e7a5      	b.n	8011754 <_scanf_float+0x150>
 8011808:	21a0      	movs	r1, #160	; 0xa0
 801180a:	2080      	movs	r0, #128	; 0x80
 801180c:	683a      	ldr	r2, [r7, #0]
 801180e:	00c9      	lsls	r1, r1, #3
 8011810:	4011      	ands	r1, r2
 8011812:	00c0      	lsls	r0, r0, #3
 8011814:	4281      	cmp	r1, r0
 8011816:	d006      	beq.n	8011826 <_scanf_float+0x222>
 8011818:	4202      	tst	r2, r0
 801181a:	d100      	bne.n	801181e <_scanf_float+0x21a>
 801181c:	e723      	b.n	8011666 <_scanf_float+0x62>
 801181e:	9901      	ldr	r1, [sp, #4]
 8011820:	2900      	cmp	r1, #0
 8011822:	d100      	bne.n	8011826 <_scanf_float+0x222>
 8011824:	e726      	b.n	8011674 <_scanf_float+0x70>
 8011826:	0591      	lsls	r1, r2, #22
 8011828:	d404      	bmi.n	8011834 <_scanf_float+0x230>
 801182a:	9901      	ldr	r1, [sp, #4]
 801182c:	9805      	ldr	r0, [sp, #20]
 801182e:	9509      	str	r5, [sp, #36]	; 0x24
 8011830:	1a09      	subs	r1, r1, r0
 8011832:	9108      	str	r1, [sp, #32]
 8011834:	4933      	ldr	r1, [pc, #204]	; (8011904 <_scanf_float+0x300>)
 8011836:	400a      	ands	r2, r1
 8011838:	21c0      	movs	r1, #192	; 0xc0
 801183a:	0049      	lsls	r1, r1, #1
 801183c:	430a      	orrs	r2, r1
 801183e:	603a      	str	r2, [r7, #0]
 8011840:	2200      	movs	r2, #0
 8011842:	9201      	str	r2, [sp, #4]
 8011844:	e786      	b.n	8011754 <_scanf_float+0x150>
 8011846:	2203      	movs	r2, #3
 8011848:	e79e      	b.n	8011788 <_scanf_float+0x184>
 801184a:	23c0      	movs	r3, #192	; 0xc0
 801184c:	005b      	lsls	r3, r3, #1
 801184e:	0031      	movs	r1, r6
 8011850:	58fb      	ldr	r3, [r7, r3]
 8011852:	9802      	ldr	r0, [sp, #8]
 8011854:	4798      	blx	r3
 8011856:	2800      	cmp	r0, #0
 8011858:	d100      	bne.n	801185c <_scanf_float+0x258>
 801185a:	e6f6      	b.n	801164a <_scanf_float+0x46>
 801185c:	e703      	b.n	8011666 <_scanf_float+0x62>
 801185e:	3d01      	subs	r5, #1
 8011860:	593b      	ldr	r3, [r7, r4]
 8011862:	0032      	movs	r2, r6
 8011864:	7829      	ldrb	r1, [r5, #0]
 8011866:	9802      	ldr	r0, [sp, #8]
 8011868:	4798      	blx	r3
 801186a:	693b      	ldr	r3, [r7, #16]
 801186c:	3b01      	subs	r3, #1
 801186e:	613b      	str	r3, [r7, #16]
 8011870:	e707      	b.n	8011682 <_scanf_float+0x7e>
 8011872:	1e63      	subs	r3, r4, #1
 8011874:	2b06      	cmp	r3, #6
 8011876:	d80e      	bhi.n	8011896 <_scanf_float+0x292>
 8011878:	9503      	str	r5, [sp, #12]
 801187a:	2c02      	cmp	r4, #2
 801187c:	d920      	bls.n	80118c0 <_scanf_float+0x2bc>
 801187e:	1b63      	subs	r3, r4, r5
 8011880:	b2db      	uxtb	r3, r3
 8011882:	9306      	str	r3, [sp, #24]
 8011884:	9b03      	ldr	r3, [sp, #12]
 8011886:	9a06      	ldr	r2, [sp, #24]
 8011888:	189b      	adds	r3, r3, r2
 801188a:	b2db      	uxtb	r3, r3
 801188c:	2b03      	cmp	r3, #3
 801188e:	d827      	bhi.n	80118e0 <_scanf_float+0x2dc>
 8011890:	3c03      	subs	r4, #3
 8011892:	b2e4      	uxtb	r4, r4
 8011894:	1b2d      	subs	r5, r5, r4
 8011896:	683b      	ldr	r3, [r7, #0]
 8011898:	05da      	lsls	r2, r3, #23
 801189a:	d552      	bpl.n	8011942 <_scanf_float+0x33e>
 801189c:	055b      	lsls	r3, r3, #21
 801189e:	d535      	bpl.n	801190c <_scanf_float+0x308>
 80118a0:	24be      	movs	r4, #190	; 0xbe
 80118a2:	0064      	lsls	r4, r4, #1
 80118a4:	9b04      	ldr	r3, [sp, #16]
 80118a6:	429d      	cmp	r5, r3
 80118a8:	d800      	bhi.n	80118ac <_scanf_float+0x2a8>
 80118aa:	e6ee      	b.n	801168a <_scanf_float+0x86>
 80118ac:	3d01      	subs	r5, #1
 80118ae:	593b      	ldr	r3, [r7, r4]
 80118b0:	0032      	movs	r2, r6
 80118b2:	7829      	ldrb	r1, [r5, #0]
 80118b4:	9802      	ldr	r0, [sp, #8]
 80118b6:	4798      	blx	r3
 80118b8:	693b      	ldr	r3, [r7, #16]
 80118ba:	3b01      	subs	r3, #1
 80118bc:	613b      	str	r3, [r7, #16]
 80118be:	e7f1      	b.n	80118a4 <_scanf_float+0x2a0>
 80118c0:	24be      	movs	r4, #190	; 0xbe
 80118c2:	0064      	lsls	r4, r4, #1
 80118c4:	9b04      	ldr	r3, [sp, #16]
 80118c6:	429d      	cmp	r5, r3
 80118c8:	d800      	bhi.n	80118cc <_scanf_float+0x2c8>
 80118ca:	e6de      	b.n	801168a <_scanf_float+0x86>
 80118cc:	3d01      	subs	r5, #1
 80118ce:	593b      	ldr	r3, [r7, r4]
 80118d0:	0032      	movs	r2, r6
 80118d2:	7829      	ldrb	r1, [r5, #0]
 80118d4:	9802      	ldr	r0, [sp, #8]
 80118d6:	4798      	blx	r3
 80118d8:	693b      	ldr	r3, [r7, #16]
 80118da:	3b01      	subs	r3, #1
 80118dc:	613b      	str	r3, [r7, #16]
 80118de:	e7f1      	b.n	80118c4 <_scanf_float+0x2c0>
 80118e0:	9b03      	ldr	r3, [sp, #12]
 80118e2:	0032      	movs	r2, r6
 80118e4:	3b01      	subs	r3, #1
 80118e6:	7819      	ldrb	r1, [r3, #0]
 80118e8:	9303      	str	r3, [sp, #12]
 80118ea:	23be      	movs	r3, #190	; 0xbe
 80118ec:	005b      	lsls	r3, r3, #1
 80118ee:	58fb      	ldr	r3, [r7, r3]
 80118f0:	9802      	ldr	r0, [sp, #8]
 80118f2:	4798      	blx	r3
 80118f4:	693b      	ldr	r3, [r7, #16]
 80118f6:	3b01      	subs	r3, #1
 80118f8:	613b      	str	r3, [r7, #16]
 80118fa:	e7c3      	b.n	8011884 <_scanf_float+0x280>
 80118fc:	fffffeff 	.word	0xfffffeff
 8011900:	fffffe7f 	.word	0xfffffe7f
 8011904:	fffff87f 	.word	0xfffff87f
 8011908:	fffffd7f 	.word	0xfffffd7f
 801190c:	693b      	ldr	r3, [r7, #16]
 801190e:	1e6c      	subs	r4, r5, #1
 8011910:	7821      	ldrb	r1, [r4, #0]
 8011912:	3b01      	subs	r3, #1
 8011914:	613b      	str	r3, [r7, #16]
 8011916:	2965      	cmp	r1, #101	; 0x65
 8011918:	d00c      	beq.n	8011934 <_scanf_float+0x330>
 801191a:	2945      	cmp	r1, #69	; 0x45
 801191c:	d00a      	beq.n	8011934 <_scanf_float+0x330>
 801191e:	23be      	movs	r3, #190	; 0xbe
 8011920:	005b      	lsls	r3, r3, #1
 8011922:	58fb      	ldr	r3, [r7, r3]
 8011924:	0032      	movs	r2, r6
 8011926:	9802      	ldr	r0, [sp, #8]
 8011928:	4798      	blx	r3
 801192a:	693b      	ldr	r3, [r7, #16]
 801192c:	1eac      	subs	r4, r5, #2
 801192e:	3b01      	subs	r3, #1
 8011930:	7821      	ldrb	r1, [r4, #0]
 8011932:	613b      	str	r3, [r7, #16]
 8011934:	23be      	movs	r3, #190	; 0xbe
 8011936:	005b      	lsls	r3, r3, #1
 8011938:	0032      	movs	r2, r6
 801193a:	58fb      	ldr	r3, [r7, r3]
 801193c:	9802      	ldr	r0, [sp, #8]
 801193e:	4798      	blx	r3
 8011940:	0025      	movs	r5, r4
 8011942:	683a      	ldr	r2, [r7, #0]
 8011944:	2310      	movs	r3, #16
 8011946:	0011      	movs	r1, r2
 8011948:	4019      	ands	r1, r3
 801194a:	9103      	str	r1, [sp, #12]
 801194c:	421a      	tst	r2, r3
 801194e:	d15b      	bne.n	8011a08 <_scanf_float+0x404>
 8011950:	22c0      	movs	r2, #192	; 0xc0
 8011952:	7029      	strb	r1, [r5, #0]
 8011954:	683b      	ldr	r3, [r7, #0]
 8011956:	00d2      	lsls	r2, r2, #3
 8011958:	4013      	ands	r3, r2
 801195a:	2280      	movs	r2, #128	; 0x80
 801195c:	00d2      	lsls	r2, r2, #3
 801195e:	4293      	cmp	r3, r2
 8011960:	d11d      	bne.n	801199e <_scanf_float+0x39a>
 8011962:	9b05      	ldr	r3, [sp, #20]
 8011964:	9a01      	ldr	r2, [sp, #4]
 8011966:	9901      	ldr	r1, [sp, #4]
 8011968:	1a9a      	subs	r2, r3, r2
 801196a:	428b      	cmp	r3, r1
 801196c:	d124      	bne.n	80119b8 <_scanf_float+0x3b4>
 801196e:	2200      	movs	r2, #0
 8011970:	9904      	ldr	r1, [sp, #16]
 8011972:	9802      	ldr	r0, [sp, #8]
 8011974:	f002 fdf6 	bl	8014564 <_strtod_r>
 8011978:	9b07      	ldr	r3, [sp, #28]
 801197a:	683a      	ldr	r2, [r7, #0]
 801197c:	0004      	movs	r4, r0
 801197e:	000d      	movs	r5, r1
 8011980:	681b      	ldr	r3, [r3, #0]
 8011982:	0791      	lsls	r1, r2, #30
 8011984:	d525      	bpl.n	80119d2 <_scanf_float+0x3ce>
 8011986:	9907      	ldr	r1, [sp, #28]
 8011988:	1d1a      	adds	r2, r3, #4
 801198a:	600a      	str	r2, [r1, #0]
 801198c:	681b      	ldr	r3, [r3, #0]
 801198e:	601c      	str	r4, [r3, #0]
 8011990:	605d      	str	r5, [r3, #4]
 8011992:	68fb      	ldr	r3, [r7, #12]
 8011994:	3301      	adds	r3, #1
 8011996:	60fb      	str	r3, [r7, #12]
 8011998:	9803      	ldr	r0, [sp, #12]
 801199a:	b00b      	add	sp, #44	; 0x2c
 801199c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801199e:	9b08      	ldr	r3, [sp, #32]
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d0e4      	beq.n	801196e <_scanf_float+0x36a>
 80119a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80119a6:	9a03      	ldr	r2, [sp, #12]
 80119a8:	1c59      	adds	r1, r3, #1
 80119aa:	9802      	ldr	r0, [sp, #8]
 80119ac:	230a      	movs	r3, #10
 80119ae:	f002 fe67 	bl	8014680 <_strtol_r>
 80119b2:	9b08      	ldr	r3, [sp, #32]
 80119b4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80119b6:	1ac2      	subs	r2, r0, r3
 80119b8:	003b      	movs	r3, r7
 80119ba:	3370      	adds	r3, #112	; 0x70
 80119bc:	33ff      	adds	r3, #255	; 0xff
 80119be:	429d      	cmp	r5, r3
 80119c0:	d302      	bcc.n	80119c8 <_scanf_float+0x3c4>
 80119c2:	003d      	movs	r5, r7
 80119c4:	356f      	adds	r5, #111	; 0x6f
 80119c6:	35ff      	adds	r5, #255	; 0xff
 80119c8:	0028      	movs	r0, r5
 80119ca:	4910      	ldr	r1, [pc, #64]	; (8011a0c <_scanf_float+0x408>)
 80119cc:	f000 f956 	bl	8011c7c <siprintf>
 80119d0:	e7cd      	b.n	801196e <_scanf_float+0x36a>
 80119d2:	1d19      	adds	r1, r3, #4
 80119d4:	0752      	lsls	r2, r2, #29
 80119d6:	d502      	bpl.n	80119de <_scanf_float+0x3da>
 80119d8:	9a07      	ldr	r2, [sp, #28]
 80119da:	6011      	str	r1, [r2, #0]
 80119dc:	e7d6      	b.n	801198c <_scanf_float+0x388>
 80119de:	9a07      	ldr	r2, [sp, #28]
 80119e0:	0020      	movs	r0, r4
 80119e2:	6011      	str	r1, [r2, #0]
 80119e4:	681e      	ldr	r6, [r3, #0]
 80119e6:	0022      	movs	r2, r4
 80119e8:	002b      	movs	r3, r5
 80119ea:	0029      	movs	r1, r5
 80119ec:	f7f4 fb66 	bl	80060bc <__aeabi_dcmpun>
 80119f0:	2800      	cmp	r0, #0
 80119f2:	d004      	beq.n	80119fe <_scanf_float+0x3fa>
 80119f4:	4806      	ldr	r0, [pc, #24]	; (8011a10 <_scanf_float+0x40c>)
 80119f6:	f7fe f891 	bl	800fb1c <nanf>
 80119fa:	6030      	str	r0, [r6, #0]
 80119fc:	e7c9      	b.n	8011992 <_scanf_float+0x38e>
 80119fe:	0020      	movs	r0, r4
 8011a00:	0029      	movs	r1, r5
 8011a02:	f7f4 fc4d 	bl	80062a0 <__aeabi_d2f>
 8011a06:	e7f8      	b.n	80119fa <_scanf_float+0x3f6>
 8011a08:	2300      	movs	r3, #0
 8011a0a:	e63f      	b.n	801168c <_scanf_float+0x88>
 8011a0c:	08016b50 	.word	0x08016b50
 8011a10:	08016ee5 	.word	0x08016ee5

08011a14 <std>:
 8011a14:	2300      	movs	r3, #0
 8011a16:	b510      	push	{r4, lr}
 8011a18:	0004      	movs	r4, r0
 8011a1a:	6003      	str	r3, [r0, #0]
 8011a1c:	6043      	str	r3, [r0, #4]
 8011a1e:	6083      	str	r3, [r0, #8]
 8011a20:	8181      	strh	r1, [r0, #12]
 8011a22:	6643      	str	r3, [r0, #100]	; 0x64
 8011a24:	81c2      	strh	r2, [r0, #14]
 8011a26:	6103      	str	r3, [r0, #16]
 8011a28:	6143      	str	r3, [r0, #20]
 8011a2a:	6183      	str	r3, [r0, #24]
 8011a2c:	0019      	movs	r1, r3
 8011a2e:	2208      	movs	r2, #8
 8011a30:	305c      	adds	r0, #92	; 0x5c
 8011a32:	f000 fa78 	bl	8011f26 <memset>
 8011a36:	4b0b      	ldr	r3, [pc, #44]	; (8011a64 <std+0x50>)
 8011a38:	6224      	str	r4, [r4, #32]
 8011a3a:	6263      	str	r3, [r4, #36]	; 0x24
 8011a3c:	4b0a      	ldr	r3, [pc, #40]	; (8011a68 <std+0x54>)
 8011a3e:	62a3      	str	r3, [r4, #40]	; 0x28
 8011a40:	4b0a      	ldr	r3, [pc, #40]	; (8011a6c <std+0x58>)
 8011a42:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011a44:	4b0a      	ldr	r3, [pc, #40]	; (8011a70 <std+0x5c>)
 8011a46:	6323      	str	r3, [r4, #48]	; 0x30
 8011a48:	4b0a      	ldr	r3, [pc, #40]	; (8011a74 <std+0x60>)
 8011a4a:	429c      	cmp	r4, r3
 8011a4c:	d005      	beq.n	8011a5a <std+0x46>
 8011a4e:	4b0a      	ldr	r3, [pc, #40]	; (8011a78 <std+0x64>)
 8011a50:	429c      	cmp	r4, r3
 8011a52:	d002      	beq.n	8011a5a <std+0x46>
 8011a54:	4b09      	ldr	r3, [pc, #36]	; (8011a7c <std+0x68>)
 8011a56:	429c      	cmp	r4, r3
 8011a58:	d103      	bne.n	8011a62 <std+0x4e>
 8011a5a:	0020      	movs	r0, r4
 8011a5c:	3058      	adds	r0, #88	; 0x58
 8011a5e:	f000 fae7 	bl	8012030 <__retarget_lock_init_recursive>
 8011a62:	bd10      	pop	{r4, pc}
 8011a64:	08011cbd 	.word	0x08011cbd
 8011a68:	08011ce5 	.word	0x08011ce5
 8011a6c:	08011d1d 	.word	0x08011d1d
 8011a70:	08011d49 	.word	0x08011d49
 8011a74:	20000c58 	.word	0x20000c58
 8011a78:	20000cc0 	.word	0x20000cc0
 8011a7c:	20000d28 	.word	0x20000d28

08011a80 <stdio_exit_handler>:
 8011a80:	b510      	push	{r4, lr}
 8011a82:	4a03      	ldr	r2, [pc, #12]	; (8011a90 <stdio_exit_handler+0x10>)
 8011a84:	4903      	ldr	r1, [pc, #12]	; (8011a94 <stdio_exit_handler+0x14>)
 8011a86:	4804      	ldr	r0, [pc, #16]	; (8011a98 <stdio_exit_handler+0x18>)
 8011a88:	f000 f86c 	bl	8011b64 <_fwalk_sglue>
 8011a8c:	bd10      	pop	{r4, pc}
 8011a8e:	46c0      	nop			; (mov r8, r8)
 8011a90:	20000060 	.word	0x20000060
 8011a94:	08014ce9 	.word	0x08014ce9
 8011a98:	2000006c 	.word	0x2000006c

08011a9c <cleanup_stdio>:
 8011a9c:	6841      	ldr	r1, [r0, #4]
 8011a9e:	4b0b      	ldr	r3, [pc, #44]	; (8011acc <cleanup_stdio+0x30>)
 8011aa0:	b510      	push	{r4, lr}
 8011aa2:	0004      	movs	r4, r0
 8011aa4:	4299      	cmp	r1, r3
 8011aa6:	d001      	beq.n	8011aac <cleanup_stdio+0x10>
 8011aa8:	f003 f91e 	bl	8014ce8 <_fflush_r>
 8011aac:	68a1      	ldr	r1, [r4, #8]
 8011aae:	4b08      	ldr	r3, [pc, #32]	; (8011ad0 <cleanup_stdio+0x34>)
 8011ab0:	4299      	cmp	r1, r3
 8011ab2:	d002      	beq.n	8011aba <cleanup_stdio+0x1e>
 8011ab4:	0020      	movs	r0, r4
 8011ab6:	f003 f917 	bl	8014ce8 <_fflush_r>
 8011aba:	68e1      	ldr	r1, [r4, #12]
 8011abc:	4b05      	ldr	r3, [pc, #20]	; (8011ad4 <cleanup_stdio+0x38>)
 8011abe:	4299      	cmp	r1, r3
 8011ac0:	d002      	beq.n	8011ac8 <cleanup_stdio+0x2c>
 8011ac2:	0020      	movs	r0, r4
 8011ac4:	f003 f910 	bl	8014ce8 <_fflush_r>
 8011ac8:	bd10      	pop	{r4, pc}
 8011aca:	46c0      	nop			; (mov r8, r8)
 8011acc:	20000c58 	.word	0x20000c58
 8011ad0:	20000cc0 	.word	0x20000cc0
 8011ad4:	20000d28 	.word	0x20000d28

08011ad8 <global_stdio_init.part.0>:
 8011ad8:	b510      	push	{r4, lr}
 8011ada:	4b09      	ldr	r3, [pc, #36]	; (8011b00 <global_stdio_init.part.0+0x28>)
 8011adc:	4a09      	ldr	r2, [pc, #36]	; (8011b04 <global_stdio_init.part.0+0x2c>)
 8011ade:	2104      	movs	r1, #4
 8011ae0:	601a      	str	r2, [r3, #0]
 8011ae2:	4809      	ldr	r0, [pc, #36]	; (8011b08 <global_stdio_init.part.0+0x30>)
 8011ae4:	2200      	movs	r2, #0
 8011ae6:	f7ff ff95 	bl	8011a14 <std>
 8011aea:	2201      	movs	r2, #1
 8011aec:	2109      	movs	r1, #9
 8011aee:	4807      	ldr	r0, [pc, #28]	; (8011b0c <global_stdio_init.part.0+0x34>)
 8011af0:	f7ff ff90 	bl	8011a14 <std>
 8011af4:	2202      	movs	r2, #2
 8011af6:	2112      	movs	r1, #18
 8011af8:	4805      	ldr	r0, [pc, #20]	; (8011b10 <global_stdio_init.part.0+0x38>)
 8011afa:	f7ff ff8b 	bl	8011a14 <std>
 8011afe:	bd10      	pop	{r4, pc}
 8011b00:	20000d90 	.word	0x20000d90
 8011b04:	08011a81 	.word	0x08011a81
 8011b08:	20000c58 	.word	0x20000c58
 8011b0c:	20000cc0 	.word	0x20000cc0
 8011b10:	20000d28 	.word	0x20000d28

08011b14 <__sfp_lock_acquire>:
 8011b14:	b510      	push	{r4, lr}
 8011b16:	4802      	ldr	r0, [pc, #8]	; (8011b20 <__sfp_lock_acquire+0xc>)
 8011b18:	f000 fa8b 	bl	8012032 <__retarget_lock_acquire_recursive>
 8011b1c:	bd10      	pop	{r4, pc}
 8011b1e:	46c0      	nop			; (mov r8, r8)
 8011b20:	20000d99 	.word	0x20000d99

08011b24 <__sfp_lock_release>:
 8011b24:	b510      	push	{r4, lr}
 8011b26:	4802      	ldr	r0, [pc, #8]	; (8011b30 <__sfp_lock_release+0xc>)
 8011b28:	f000 fa84 	bl	8012034 <__retarget_lock_release_recursive>
 8011b2c:	bd10      	pop	{r4, pc}
 8011b2e:	46c0      	nop			; (mov r8, r8)
 8011b30:	20000d99 	.word	0x20000d99

08011b34 <__sinit>:
 8011b34:	b510      	push	{r4, lr}
 8011b36:	0004      	movs	r4, r0
 8011b38:	f7ff ffec 	bl	8011b14 <__sfp_lock_acquire>
 8011b3c:	6a23      	ldr	r3, [r4, #32]
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d002      	beq.n	8011b48 <__sinit+0x14>
 8011b42:	f7ff ffef 	bl	8011b24 <__sfp_lock_release>
 8011b46:	bd10      	pop	{r4, pc}
 8011b48:	4b04      	ldr	r3, [pc, #16]	; (8011b5c <__sinit+0x28>)
 8011b4a:	6223      	str	r3, [r4, #32]
 8011b4c:	4b04      	ldr	r3, [pc, #16]	; (8011b60 <__sinit+0x2c>)
 8011b4e:	681b      	ldr	r3, [r3, #0]
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	d1f6      	bne.n	8011b42 <__sinit+0xe>
 8011b54:	f7ff ffc0 	bl	8011ad8 <global_stdio_init.part.0>
 8011b58:	e7f3      	b.n	8011b42 <__sinit+0xe>
 8011b5a:	46c0      	nop			; (mov r8, r8)
 8011b5c:	08011a9d 	.word	0x08011a9d
 8011b60:	20000d90 	.word	0x20000d90

08011b64 <_fwalk_sglue>:
 8011b64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011b66:	0014      	movs	r4, r2
 8011b68:	2600      	movs	r6, #0
 8011b6a:	9000      	str	r0, [sp, #0]
 8011b6c:	9101      	str	r1, [sp, #4]
 8011b6e:	68a5      	ldr	r5, [r4, #8]
 8011b70:	6867      	ldr	r7, [r4, #4]
 8011b72:	3f01      	subs	r7, #1
 8011b74:	d504      	bpl.n	8011b80 <_fwalk_sglue+0x1c>
 8011b76:	6824      	ldr	r4, [r4, #0]
 8011b78:	2c00      	cmp	r4, #0
 8011b7a:	d1f8      	bne.n	8011b6e <_fwalk_sglue+0xa>
 8011b7c:	0030      	movs	r0, r6
 8011b7e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8011b80:	89ab      	ldrh	r3, [r5, #12]
 8011b82:	2b01      	cmp	r3, #1
 8011b84:	d908      	bls.n	8011b98 <_fwalk_sglue+0x34>
 8011b86:	220e      	movs	r2, #14
 8011b88:	5eab      	ldrsh	r3, [r5, r2]
 8011b8a:	3301      	adds	r3, #1
 8011b8c:	d004      	beq.n	8011b98 <_fwalk_sglue+0x34>
 8011b8e:	0029      	movs	r1, r5
 8011b90:	9800      	ldr	r0, [sp, #0]
 8011b92:	9b01      	ldr	r3, [sp, #4]
 8011b94:	4798      	blx	r3
 8011b96:	4306      	orrs	r6, r0
 8011b98:	3568      	adds	r5, #104	; 0x68
 8011b9a:	e7ea      	b.n	8011b72 <_fwalk_sglue+0xe>

08011b9c <iprintf>:
 8011b9c:	b40f      	push	{r0, r1, r2, r3}
 8011b9e:	b507      	push	{r0, r1, r2, lr}
 8011ba0:	4905      	ldr	r1, [pc, #20]	; (8011bb8 <iprintf+0x1c>)
 8011ba2:	ab04      	add	r3, sp, #16
 8011ba4:	6808      	ldr	r0, [r1, #0]
 8011ba6:	cb04      	ldmia	r3!, {r2}
 8011ba8:	6881      	ldr	r1, [r0, #8]
 8011baa:	9301      	str	r3, [sp, #4]
 8011bac:	f002 fef6 	bl	801499c <_vfiprintf_r>
 8011bb0:	b003      	add	sp, #12
 8011bb2:	bc08      	pop	{r3}
 8011bb4:	b004      	add	sp, #16
 8011bb6:	4718      	bx	r3
 8011bb8:	200000b8 	.word	0x200000b8

08011bbc <_puts_r>:
 8011bbc:	6a03      	ldr	r3, [r0, #32]
 8011bbe:	b570      	push	{r4, r5, r6, lr}
 8011bc0:	0005      	movs	r5, r0
 8011bc2:	000e      	movs	r6, r1
 8011bc4:	6884      	ldr	r4, [r0, #8]
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	d101      	bne.n	8011bce <_puts_r+0x12>
 8011bca:	f7ff ffb3 	bl	8011b34 <__sinit>
 8011bce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011bd0:	07db      	lsls	r3, r3, #31
 8011bd2:	d405      	bmi.n	8011be0 <_puts_r+0x24>
 8011bd4:	89a3      	ldrh	r3, [r4, #12]
 8011bd6:	059b      	lsls	r3, r3, #22
 8011bd8:	d402      	bmi.n	8011be0 <_puts_r+0x24>
 8011bda:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011bdc:	f000 fa29 	bl	8012032 <__retarget_lock_acquire_recursive>
 8011be0:	89a3      	ldrh	r3, [r4, #12]
 8011be2:	071b      	lsls	r3, r3, #28
 8011be4:	d502      	bpl.n	8011bec <_puts_r+0x30>
 8011be6:	6923      	ldr	r3, [r4, #16]
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	d11f      	bne.n	8011c2c <_puts_r+0x70>
 8011bec:	0021      	movs	r1, r4
 8011bee:	0028      	movs	r0, r5
 8011bf0:	f000 f914 	bl	8011e1c <__swsetup_r>
 8011bf4:	2800      	cmp	r0, #0
 8011bf6:	d019      	beq.n	8011c2c <_puts_r+0x70>
 8011bf8:	2501      	movs	r5, #1
 8011bfa:	426d      	negs	r5, r5
 8011bfc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011bfe:	07db      	lsls	r3, r3, #31
 8011c00:	d405      	bmi.n	8011c0e <_puts_r+0x52>
 8011c02:	89a3      	ldrh	r3, [r4, #12]
 8011c04:	059b      	lsls	r3, r3, #22
 8011c06:	d402      	bmi.n	8011c0e <_puts_r+0x52>
 8011c08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011c0a:	f000 fa13 	bl	8012034 <__retarget_lock_release_recursive>
 8011c0e:	0028      	movs	r0, r5
 8011c10:	bd70      	pop	{r4, r5, r6, pc}
 8011c12:	3601      	adds	r6, #1
 8011c14:	60a3      	str	r3, [r4, #8]
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	da04      	bge.n	8011c24 <_puts_r+0x68>
 8011c1a:	69a2      	ldr	r2, [r4, #24]
 8011c1c:	429a      	cmp	r2, r3
 8011c1e:	dc16      	bgt.n	8011c4e <_puts_r+0x92>
 8011c20:	290a      	cmp	r1, #10
 8011c22:	d014      	beq.n	8011c4e <_puts_r+0x92>
 8011c24:	6823      	ldr	r3, [r4, #0]
 8011c26:	1c5a      	adds	r2, r3, #1
 8011c28:	6022      	str	r2, [r4, #0]
 8011c2a:	7019      	strb	r1, [r3, #0]
 8011c2c:	68a3      	ldr	r3, [r4, #8]
 8011c2e:	7831      	ldrb	r1, [r6, #0]
 8011c30:	3b01      	subs	r3, #1
 8011c32:	2900      	cmp	r1, #0
 8011c34:	d1ed      	bne.n	8011c12 <_puts_r+0x56>
 8011c36:	60a3      	str	r3, [r4, #8]
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	da0f      	bge.n	8011c5c <_puts_r+0xa0>
 8011c3c:	0028      	movs	r0, r5
 8011c3e:	0022      	movs	r2, r4
 8011c40:	310a      	adds	r1, #10
 8011c42:	f000 f8a9 	bl	8011d98 <__swbuf_r>
 8011c46:	250a      	movs	r5, #10
 8011c48:	3001      	adds	r0, #1
 8011c4a:	d1d7      	bne.n	8011bfc <_puts_r+0x40>
 8011c4c:	e7d4      	b.n	8011bf8 <_puts_r+0x3c>
 8011c4e:	0022      	movs	r2, r4
 8011c50:	0028      	movs	r0, r5
 8011c52:	f000 f8a1 	bl	8011d98 <__swbuf_r>
 8011c56:	3001      	adds	r0, #1
 8011c58:	d1e8      	bne.n	8011c2c <_puts_r+0x70>
 8011c5a:	e7cd      	b.n	8011bf8 <_puts_r+0x3c>
 8011c5c:	250a      	movs	r5, #10
 8011c5e:	6823      	ldr	r3, [r4, #0]
 8011c60:	1c5a      	adds	r2, r3, #1
 8011c62:	6022      	str	r2, [r4, #0]
 8011c64:	701d      	strb	r5, [r3, #0]
 8011c66:	e7c9      	b.n	8011bfc <_puts_r+0x40>

08011c68 <puts>:
 8011c68:	b510      	push	{r4, lr}
 8011c6a:	4b03      	ldr	r3, [pc, #12]	; (8011c78 <puts+0x10>)
 8011c6c:	0001      	movs	r1, r0
 8011c6e:	6818      	ldr	r0, [r3, #0]
 8011c70:	f7ff ffa4 	bl	8011bbc <_puts_r>
 8011c74:	bd10      	pop	{r4, pc}
 8011c76:	46c0      	nop			; (mov r8, r8)
 8011c78:	200000b8 	.word	0x200000b8

08011c7c <siprintf>:
 8011c7c:	b40e      	push	{r1, r2, r3}
 8011c7e:	b500      	push	{lr}
 8011c80:	490b      	ldr	r1, [pc, #44]	; (8011cb0 <siprintf+0x34>)
 8011c82:	b09c      	sub	sp, #112	; 0x70
 8011c84:	ab1d      	add	r3, sp, #116	; 0x74
 8011c86:	9002      	str	r0, [sp, #8]
 8011c88:	9006      	str	r0, [sp, #24]
 8011c8a:	9107      	str	r1, [sp, #28]
 8011c8c:	9104      	str	r1, [sp, #16]
 8011c8e:	4809      	ldr	r0, [pc, #36]	; (8011cb4 <siprintf+0x38>)
 8011c90:	4909      	ldr	r1, [pc, #36]	; (8011cb8 <siprintf+0x3c>)
 8011c92:	cb04      	ldmia	r3!, {r2}
 8011c94:	9105      	str	r1, [sp, #20]
 8011c96:	6800      	ldr	r0, [r0, #0]
 8011c98:	a902      	add	r1, sp, #8
 8011c9a:	9301      	str	r3, [sp, #4]
 8011c9c:	f002 fd56 	bl	801474c <_svfiprintf_r>
 8011ca0:	2200      	movs	r2, #0
 8011ca2:	9b02      	ldr	r3, [sp, #8]
 8011ca4:	701a      	strb	r2, [r3, #0]
 8011ca6:	b01c      	add	sp, #112	; 0x70
 8011ca8:	bc08      	pop	{r3}
 8011caa:	b003      	add	sp, #12
 8011cac:	4718      	bx	r3
 8011cae:	46c0      	nop			; (mov r8, r8)
 8011cb0:	7fffffff 	.word	0x7fffffff
 8011cb4:	200000b8 	.word	0x200000b8
 8011cb8:	ffff0208 	.word	0xffff0208

08011cbc <__sread>:
 8011cbc:	b570      	push	{r4, r5, r6, lr}
 8011cbe:	000c      	movs	r4, r1
 8011cc0:	250e      	movs	r5, #14
 8011cc2:	5f49      	ldrsh	r1, [r1, r5]
 8011cc4:	f000 f962 	bl	8011f8c <_read_r>
 8011cc8:	2800      	cmp	r0, #0
 8011cca:	db03      	blt.n	8011cd4 <__sread+0x18>
 8011ccc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8011cce:	181b      	adds	r3, r3, r0
 8011cd0:	6563      	str	r3, [r4, #84]	; 0x54
 8011cd2:	bd70      	pop	{r4, r5, r6, pc}
 8011cd4:	89a3      	ldrh	r3, [r4, #12]
 8011cd6:	4a02      	ldr	r2, [pc, #8]	; (8011ce0 <__sread+0x24>)
 8011cd8:	4013      	ands	r3, r2
 8011cda:	81a3      	strh	r3, [r4, #12]
 8011cdc:	e7f9      	b.n	8011cd2 <__sread+0x16>
 8011cde:	46c0      	nop			; (mov r8, r8)
 8011ce0:	ffffefff 	.word	0xffffefff

08011ce4 <__swrite>:
 8011ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ce6:	001f      	movs	r7, r3
 8011ce8:	898b      	ldrh	r3, [r1, #12]
 8011cea:	0005      	movs	r5, r0
 8011cec:	000c      	movs	r4, r1
 8011cee:	0016      	movs	r6, r2
 8011cf0:	05db      	lsls	r3, r3, #23
 8011cf2:	d505      	bpl.n	8011d00 <__swrite+0x1c>
 8011cf4:	230e      	movs	r3, #14
 8011cf6:	5ec9      	ldrsh	r1, [r1, r3]
 8011cf8:	2200      	movs	r2, #0
 8011cfa:	2302      	movs	r3, #2
 8011cfc:	f000 f932 	bl	8011f64 <_lseek_r>
 8011d00:	89a3      	ldrh	r3, [r4, #12]
 8011d02:	4a05      	ldr	r2, [pc, #20]	; (8011d18 <__swrite+0x34>)
 8011d04:	0028      	movs	r0, r5
 8011d06:	4013      	ands	r3, r2
 8011d08:	81a3      	strh	r3, [r4, #12]
 8011d0a:	0032      	movs	r2, r6
 8011d0c:	230e      	movs	r3, #14
 8011d0e:	5ee1      	ldrsh	r1, [r4, r3]
 8011d10:	003b      	movs	r3, r7
 8011d12:	f000 f94f 	bl	8011fb4 <_write_r>
 8011d16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011d18:	ffffefff 	.word	0xffffefff

08011d1c <__sseek>:
 8011d1c:	b570      	push	{r4, r5, r6, lr}
 8011d1e:	000c      	movs	r4, r1
 8011d20:	250e      	movs	r5, #14
 8011d22:	5f49      	ldrsh	r1, [r1, r5]
 8011d24:	f000 f91e 	bl	8011f64 <_lseek_r>
 8011d28:	89a3      	ldrh	r3, [r4, #12]
 8011d2a:	1c42      	adds	r2, r0, #1
 8011d2c:	d103      	bne.n	8011d36 <__sseek+0x1a>
 8011d2e:	4a05      	ldr	r2, [pc, #20]	; (8011d44 <__sseek+0x28>)
 8011d30:	4013      	ands	r3, r2
 8011d32:	81a3      	strh	r3, [r4, #12]
 8011d34:	bd70      	pop	{r4, r5, r6, pc}
 8011d36:	2280      	movs	r2, #128	; 0x80
 8011d38:	0152      	lsls	r2, r2, #5
 8011d3a:	4313      	orrs	r3, r2
 8011d3c:	81a3      	strh	r3, [r4, #12]
 8011d3e:	6560      	str	r0, [r4, #84]	; 0x54
 8011d40:	e7f8      	b.n	8011d34 <__sseek+0x18>
 8011d42:	46c0      	nop			; (mov r8, r8)
 8011d44:	ffffefff 	.word	0xffffefff

08011d48 <__sclose>:
 8011d48:	b510      	push	{r4, lr}
 8011d4a:	230e      	movs	r3, #14
 8011d4c:	5ec9      	ldrsh	r1, [r1, r3]
 8011d4e:	f000 f8f7 	bl	8011f40 <_close_r>
 8011d52:	bd10      	pop	{r4, pc}

08011d54 <_vsiprintf_r>:
 8011d54:	b500      	push	{lr}
 8011d56:	b09b      	sub	sp, #108	; 0x6c
 8011d58:	9100      	str	r1, [sp, #0]
 8011d5a:	9104      	str	r1, [sp, #16]
 8011d5c:	4906      	ldr	r1, [pc, #24]	; (8011d78 <_vsiprintf_r+0x24>)
 8011d5e:	9105      	str	r1, [sp, #20]
 8011d60:	9102      	str	r1, [sp, #8]
 8011d62:	4906      	ldr	r1, [pc, #24]	; (8011d7c <_vsiprintf_r+0x28>)
 8011d64:	9103      	str	r1, [sp, #12]
 8011d66:	4669      	mov	r1, sp
 8011d68:	f002 fcf0 	bl	801474c <_svfiprintf_r>
 8011d6c:	2200      	movs	r2, #0
 8011d6e:	9b00      	ldr	r3, [sp, #0]
 8011d70:	701a      	strb	r2, [r3, #0]
 8011d72:	b01b      	add	sp, #108	; 0x6c
 8011d74:	bd00      	pop	{pc}
 8011d76:	46c0      	nop			; (mov r8, r8)
 8011d78:	7fffffff 	.word	0x7fffffff
 8011d7c:	ffff0208 	.word	0xffff0208

08011d80 <vsiprintf>:
 8011d80:	b510      	push	{r4, lr}
 8011d82:	4c04      	ldr	r4, [pc, #16]	; (8011d94 <vsiprintf+0x14>)
 8011d84:	0013      	movs	r3, r2
 8011d86:	000a      	movs	r2, r1
 8011d88:	0001      	movs	r1, r0
 8011d8a:	6820      	ldr	r0, [r4, #0]
 8011d8c:	f7ff ffe2 	bl	8011d54 <_vsiprintf_r>
 8011d90:	bd10      	pop	{r4, pc}
 8011d92:	46c0      	nop			; (mov r8, r8)
 8011d94:	200000b8 	.word	0x200000b8

08011d98 <__swbuf_r>:
 8011d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d9a:	0006      	movs	r6, r0
 8011d9c:	000d      	movs	r5, r1
 8011d9e:	0014      	movs	r4, r2
 8011da0:	2800      	cmp	r0, #0
 8011da2:	d004      	beq.n	8011dae <__swbuf_r+0x16>
 8011da4:	6a03      	ldr	r3, [r0, #32]
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d101      	bne.n	8011dae <__swbuf_r+0x16>
 8011daa:	f7ff fec3 	bl	8011b34 <__sinit>
 8011dae:	69a3      	ldr	r3, [r4, #24]
 8011db0:	60a3      	str	r3, [r4, #8]
 8011db2:	89a3      	ldrh	r3, [r4, #12]
 8011db4:	071b      	lsls	r3, r3, #28
 8011db6:	d528      	bpl.n	8011e0a <__swbuf_r+0x72>
 8011db8:	6923      	ldr	r3, [r4, #16]
 8011dba:	2b00      	cmp	r3, #0
 8011dbc:	d025      	beq.n	8011e0a <__swbuf_r+0x72>
 8011dbe:	6923      	ldr	r3, [r4, #16]
 8011dc0:	6820      	ldr	r0, [r4, #0]
 8011dc2:	b2ef      	uxtb	r7, r5
 8011dc4:	1ac0      	subs	r0, r0, r3
 8011dc6:	6963      	ldr	r3, [r4, #20]
 8011dc8:	b2ed      	uxtb	r5, r5
 8011dca:	4283      	cmp	r3, r0
 8011dcc:	dc05      	bgt.n	8011dda <__swbuf_r+0x42>
 8011dce:	0021      	movs	r1, r4
 8011dd0:	0030      	movs	r0, r6
 8011dd2:	f002 ff89 	bl	8014ce8 <_fflush_r>
 8011dd6:	2800      	cmp	r0, #0
 8011dd8:	d11d      	bne.n	8011e16 <__swbuf_r+0x7e>
 8011dda:	68a3      	ldr	r3, [r4, #8]
 8011ddc:	3001      	adds	r0, #1
 8011dde:	3b01      	subs	r3, #1
 8011de0:	60a3      	str	r3, [r4, #8]
 8011de2:	6823      	ldr	r3, [r4, #0]
 8011de4:	1c5a      	adds	r2, r3, #1
 8011de6:	6022      	str	r2, [r4, #0]
 8011de8:	701f      	strb	r7, [r3, #0]
 8011dea:	6963      	ldr	r3, [r4, #20]
 8011dec:	4283      	cmp	r3, r0
 8011dee:	d004      	beq.n	8011dfa <__swbuf_r+0x62>
 8011df0:	89a3      	ldrh	r3, [r4, #12]
 8011df2:	07db      	lsls	r3, r3, #31
 8011df4:	d507      	bpl.n	8011e06 <__swbuf_r+0x6e>
 8011df6:	2d0a      	cmp	r5, #10
 8011df8:	d105      	bne.n	8011e06 <__swbuf_r+0x6e>
 8011dfa:	0021      	movs	r1, r4
 8011dfc:	0030      	movs	r0, r6
 8011dfe:	f002 ff73 	bl	8014ce8 <_fflush_r>
 8011e02:	2800      	cmp	r0, #0
 8011e04:	d107      	bne.n	8011e16 <__swbuf_r+0x7e>
 8011e06:	0028      	movs	r0, r5
 8011e08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011e0a:	0021      	movs	r1, r4
 8011e0c:	0030      	movs	r0, r6
 8011e0e:	f000 f805 	bl	8011e1c <__swsetup_r>
 8011e12:	2800      	cmp	r0, #0
 8011e14:	d0d3      	beq.n	8011dbe <__swbuf_r+0x26>
 8011e16:	2501      	movs	r5, #1
 8011e18:	426d      	negs	r5, r5
 8011e1a:	e7f4      	b.n	8011e06 <__swbuf_r+0x6e>

08011e1c <__swsetup_r>:
 8011e1c:	4b30      	ldr	r3, [pc, #192]	; (8011ee0 <__swsetup_r+0xc4>)
 8011e1e:	b570      	push	{r4, r5, r6, lr}
 8011e20:	0005      	movs	r5, r0
 8011e22:	6818      	ldr	r0, [r3, #0]
 8011e24:	000c      	movs	r4, r1
 8011e26:	2800      	cmp	r0, #0
 8011e28:	d004      	beq.n	8011e34 <__swsetup_r+0x18>
 8011e2a:	6a03      	ldr	r3, [r0, #32]
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d101      	bne.n	8011e34 <__swsetup_r+0x18>
 8011e30:	f7ff fe80 	bl	8011b34 <__sinit>
 8011e34:	230c      	movs	r3, #12
 8011e36:	5ee2      	ldrsh	r2, [r4, r3]
 8011e38:	b293      	uxth	r3, r2
 8011e3a:	0711      	lsls	r1, r2, #28
 8011e3c:	d423      	bmi.n	8011e86 <__swsetup_r+0x6a>
 8011e3e:	06d9      	lsls	r1, r3, #27
 8011e40:	d407      	bmi.n	8011e52 <__swsetup_r+0x36>
 8011e42:	2309      	movs	r3, #9
 8011e44:	2001      	movs	r0, #1
 8011e46:	602b      	str	r3, [r5, #0]
 8011e48:	3337      	adds	r3, #55	; 0x37
 8011e4a:	4313      	orrs	r3, r2
 8011e4c:	81a3      	strh	r3, [r4, #12]
 8011e4e:	4240      	negs	r0, r0
 8011e50:	bd70      	pop	{r4, r5, r6, pc}
 8011e52:	075b      	lsls	r3, r3, #29
 8011e54:	d513      	bpl.n	8011e7e <__swsetup_r+0x62>
 8011e56:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011e58:	2900      	cmp	r1, #0
 8011e5a:	d008      	beq.n	8011e6e <__swsetup_r+0x52>
 8011e5c:	0023      	movs	r3, r4
 8011e5e:	3344      	adds	r3, #68	; 0x44
 8011e60:	4299      	cmp	r1, r3
 8011e62:	d002      	beq.n	8011e6a <__swsetup_r+0x4e>
 8011e64:	0028      	movs	r0, r5
 8011e66:	f000 ff97 	bl	8012d98 <_free_r>
 8011e6a:	2300      	movs	r3, #0
 8011e6c:	6363      	str	r3, [r4, #52]	; 0x34
 8011e6e:	2224      	movs	r2, #36	; 0x24
 8011e70:	89a3      	ldrh	r3, [r4, #12]
 8011e72:	4393      	bics	r3, r2
 8011e74:	81a3      	strh	r3, [r4, #12]
 8011e76:	2300      	movs	r3, #0
 8011e78:	6063      	str	r3, [r4, #4]
 8011e7a:	6923      	ldr	r3, [r4, #16]
 8011e7c:	6023      	str	r3, [r4, #0]
 8011e7e:	2308      	movs	r3, #8
 8011e80:	89a2      	ldrh	r2, [r4, #12]
 8011e82:	4313      	orrs	r3, r2
 8011e84:	81a3      	strh	r3, [r4, #12]
 8011e86:	6923      	ldr	r3, [r4, #16]
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d10b      	bne.n	8011ea4 <__swsetup_r+0x88>
 8011e8c:	21a0      	movs	r1, #160	; 0xa0
 8011e8e:	2280      	movs	r2, #128	; 0x80
 8011e90:	89a3      	ldrh	r3, [r4, #12]
 8011e92:	0089      	lsls	r1, r1, #2
 8011e94:	0092      	lsls	r2, r2, #2
 8011e96:	400b      	ands	r3, r1
 8011e98:	4293      	cmp	r3, r2
 8011e9a:	d003      	beq.n	8011ea4 <__swsetup_r+0x88>
 8011e9c:	0021      	movs	r1, r4
 8011e9e:	0028      	movs	r0, r5
 8011ea0:	f002 ff76 	bl	8014d90 <__smakebuf_r>
 8011ea4:	220c      	movs	r2, #12
 8011ea6:	5ea3      	ldrsh	r3, [r4, r2]
 8011ea8:	2001      	movs	r0, #1
 8011eaa:	001a      	movs	r2, r3
 8011eac:	b299      	uxth	r1, r3
 8011eae:	4002      	ands	r2, r0
 8011eb0:	4203      	tst	r3, r0
 8011eb2:	d00f      	beq.n	8011ed4 <__swsetup_r+0xb8>
 8011eb4:	2200      	movs	r2, #0
 8011eb6:	60a2      	str	r2, [r4, #8]
 8011eb8:	6962      	ldr	r2, [r4, #20]
 8011eba:	4252      	negs	r2, r2
 8011ebc:	61a2      	str	r2, [r4, #24]
 8011ebe:	2000      	movs	r0, #0
 8011ec0:	6922      	ldr	r2, [r4, #16]
 8011ec2:	4282      	cmp	r2, r0
 8011ec4:	d1c4      	bne.n	8011e50 <__swsetup_r+0x34>
 8011ec6:	0609      	lsls	r1, r1, #24
 8011ec8:	d5c2      	bpl.n	8011e50 <__swsetup_r+0x34>
 8011eca:	2240      	movs	r2, #64	; 0x40
 8011ecc:	4313      	orrs	r3, r2
 8011ece:	81a3      	strh	r3, [r4, #12]
 8011ed0:	3801      	subs	r0, #1
 8011ed2:	e7bd      	b.n	8011e50 <__swsetup_r+0x34>
 8011ed4:	0788      	lsls	r0, r1, #30
 8011ed6:	d400      	bmi.n	8011eda <__swsetup_r+0xbe>
 8011ed8:	6962      	ldr	r2, [r4, #20]
 8011eda:	60a2      	str	r2, [r4, #8]
 8011edc:	e7ef      	b.n	8011ebe <__swsetup_r+0xa2>
 8011ede:	46c0      	nop			; (mov r8, r8)
 8011ee0:	200000b8 	.word	0x200000b8

08011ee4 <memcmp>:
 8011ee4:	b530      	push	{r4, r5, lr}
 8011ee6:	2400      	movs	r4, #0
 8011ee8:	3901      	subs	r1, #1
 8011eea:	42a2      	cmp	r2, r4
 8011eec:	d101      	bne.n	8011ef2 <memcmp+0xe>
 8011eee:	2000      	movs	r0, #0
 8011ef0:	e005      	b.n	8011efe <memcmp+0x1a>
 8011ef2:	5d03      	ldrb	r3, [r0, r4]
 8011ef4:	3401      	adds	r4, #1
 8011ef6:	5d0d      	ldrb	r5, [r1, r4]
 8011ef8:	42ab      	cmp	r3, r5
 8011efa:	d0f6      	beq.n	8011eea <memcmp+0x6>
 8011efc:	1b58      	subs	r0, r3, r5
 8011efe:	bd30      	pop	{r4, r5, pc}

08011f00 <memmove>:
 8011f00:	b510      	push	{r4, lr}
 8011f02:	4288      	cmp	r0, r1
 8011f04:	d902      	bls.n	8011f0c <memmove+0xc>
 8011f06:	188b      	adds	r3, r1, r2
 8011f08:	4298      	cmp	r0, r3
 8011f0a:	d303      	bcc.n	8011f14 <memmove+0x14>
 8011f0c:	2300      	movs	r3, #0
 8011f0e:	e007      	b.n	8011f20 <memmove+0x20>
 8011f10:	5c8b      	ldrb	r3, [r1, r2]
 8011f12:	5483      	strb	r3, [r0, r2]
 8011f14:	3a01      	subs	r2, #1
 8011f16:	d2fb      	bcs.n	8011f10 <memmove+0x10>
 8011f18:	bd10      	pop	{r4, pc}
 8011f1a:	5ccc      	ldrb	r4, [r1, r3]
 8011f1c:	54c4      	strb	r4, [r0, r3]
 8011f1e:	3301      	adds	r3, #1
 8011f20:	429a      	cmp	r2, r3
 8011f22:	d1fa      	bne.n	8011f1a <memmove+0x1a>
 8011f24:	e7f8      	b.n	8011f18 <memmove+0x18>

08011f26 <memset>:
 8011f26:	0003      	movs	r3, r0
 8011f28:	1882      	adds	r2, r0, r2
 8011f2a:	4293      	cmp	r3, r2
 8011f2c:	d100      	bne.n	8011f30 <memset+0xa>
 8011f2e:	4770      	bx	lr
 8011f30:	7019      	strb	r1, [r3, #0]
 8011f32:	3301      	adds	r3, #1
 8011f34:	e7f9      	b.n	8011f2a <memset+0x4>
	...

08011f38 <_localeconv_r>:
 8011f38:	4800      	ldr	r0, [pc, #0]	; (8011f3c <_localeconv_r+0x4>)
 8011f3a:	4770      	bx	lr
 8011f3c:	200001ac 	.word	0x200001ac

08011f40 <_close_r>:
 8011f40:	2300      	movs	r3, #0
 8011f42:	b570      	push	{r4, r5, r6, lr}
 8011f44:	4d06      	ldr	r5, [pc, #24]	; (8011f60 <_close_r+0x20>)
 8011f46:	0004      	movs	r4, r0
 8011f48:	0008      	movs	r0, r1
 8011f4a:	602b      	str	r3, [r5, #0]
 8011f4c:	f7f5 fa3b 	bl	80073c6 <_close>
 8011f50:	1c43      	adds	r3, r0, #1
 8011f52:	d103      	bne.n	8011f5c <_close_r+0x1c>
 8011f54:	682b      	ldr	r3, [r5, #0]
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	d000      	beq.n	8011f5c <_close_r+0x1c>
 8011f5a:	6023      	str	r3, [r4, #0]
 8011f5c:	bd70      	pop	{r4, r5, r6, pc}
 8011f5e:	46c0      	nop			; (mov r8, r8)
 8011f60:	20000d94 	.word	0x20000d94

08011f64 <_lseek_r>:
 8011f64:	b570      	push	{r4, r5, r6, lr}
 8011f66:	0004      	movs	r4, r0
 8011f68:	0008      	movs	r0, r1
 8011f6a:	0011      	movs	r1, r2
 8011f6c:	001a      	movs	r2, r3
 8011f6e:	2300      	movs	r3, #0
 8011f70:	4d05      	ldr	r5, [pc, #20]	; (8011f88 <_lseek_r+0x24>)
 8011f72:	602b      	str	r3, [r5, #0]
 8011f74:	f7f5 fa48 	bl	8007408 <_lseek>
 8011f78:	1c43      	adds	r3, r0, #1
 8011f7a:	d103      	bne.n	8011f84 <_lseek_r+0x20>
 8011f7c:	682b      	ldr	r3, [r5, #0]
 8011f7e:	2b00      	cmp	r3, #0
 8011f80:	d000      	beq.n	8011f84 <_lseek_r+0x20>
 8011f82:	6023      	str	r3, [r4, #0]
 8011f84:	bd70      	pop	{r4, r5, r6, pc}
 8011f86:	46c0      	nop			; (mov r8, r8)
 8011f88:	20000d94 	.word	0x20000d94

08011f8c <_read_r>:
 8011f8c:	b570      	push	{r4, r5, r6, lr}
 8011f8e:	0004      	movs	r4, r0
 8011f90:	0008      	movs	r0, r1
 8011f92:	0011      	movs	r1, r2
 8011f94:	001a      	movs	r2, r3
 8011f96:	2300      	movs	r3, #0
 8011f98:	4d05      	ldr	r5, [pc, #20]	; (8011fb0 <_read_r+0x24>)
 8011f9a:	602b      	str	r3, [r5, #0]
 8011f9c:	f7f5 f9da 	bl	8007354 <_read>
 8011fa0:	1c43      	adds	r3, r0, #1
 8011fa2:	d103      	bne.n	8011fac <_read_r+0x20>
 8011fa4:	682b      	ldr	r3, [r5, #0]
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	d000      	beq.n	8011fac <_read_r+0x20>
 8011faa:	6023      	str	r3, [r4, #0]
 8011fac:	bd70      	pop	{r4, r5, r6, pc}
 8011fae:	46c0      	nop			; (mov r8, r8)
 8011fb0:	20000d94 	.word	0x20000d94

08011fb4 <_write_r>:
 8011fb4:	b570      	push	{r4, r5, r6, lr}
 8011fb6:	0004      	movs	r4, r0
 8011fb8:	0008      	movs	r0, r1
 8011fba:	0011      	movs	r1, r2
 8011fbc:	001a      	movs	r2, r3
 8011fbe:	2300      	movs	r3, #0
 8011fc0:	4d05      	ldr	r5, [pc, #20]	; (8011fd8 <_write_r+0x24>)
 8011fc2:	602b      	str	r3, [r5, #0]
 8011fc4:	f7f5 f9e3 	bl	800738e <_write>
 8011fc8:	1c43      	adds	r3, r0, #1
 8011fca:	d103      	bne.n	8011fd4 <_write_r+0x20>
 8011fcc:	682b      	ldr	r3, [r5, #0]
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	d000      	beq.n	8011fd4 <_write_r+0x20>
 8011fd2:	6023      	str	r3, [r4, #0]
 8011fd4:	bd70      	pop	{r4, r5, r6, pc}
 8011fd6:	46c0      	nop			; (mov r8, r8)
 8011fd8:	20000d94 	.word	0x20000d94

08011fdc <__errno>:
 8011fdc:	4b01      	ldr	r3, [pc, #4]	; (8011fe4 <__errno+0x8>)
 8011fde:	6818      	ldr	r0, [r3, #0]
 8011fe0:	4770      	bx	lr
 8011fe2:	46c0      	nop			; (mov r8, r8)
 8011fe4:	200000b8 	.word	0x200000b8

08011fe8 <__libc_init_array>:
 8011fe8:	b570      	push	{r4, r5, r6, lr}
 8011fea:	2600      	movs	r6, #0
 8011fec:	4c0c      	ldr	r4, [pc, #48]	; (8012020 <__libc_init_array+0x38>)
 8011fee:	4d0d      	ldr	r5, [pc, #52]	; (8012024 <__libc_init_array+0x3c>)
 8011ff0:	1b64      	subs	r4, r4, r5
 8011ff2:	10a4      	asrs	r4, r4, #2
 8011ff4:	42a6      	cmp	r6, r4
 8011ff6:	d109      	bne.n	801200c <__libc_init_array+0x24>
 8011ff8:	2600      	movs	r6, #0
 8011ffa:	f003 fbaf 	bl	801575c <_init>
 8011ffe:	4c0a      	ldr	r4, [pc, #40]	; (8012028 <__libc_init_array+0x40>)
 8012000:	4d0a      	ldr	r5, [pc, #40]	; (801202c <__libc_init_array+0x44>)
 8012002:	1b64      	subs	r4, r4, r5
 8012004:	10a4      	asrs	r4, r4, #2
 8012006:	42a6      	cmp	r6, r4
 8012008:	d105      	bne.n	8012016 <__libc_init_array+0x2e>
 801200a:	bd70      	pop	{r4, r5, r6, pc}
 801200c:	00b3      	lsls	r3, r6, #2
 801200e:	58eb      	ldr	r3, [r5, r3]
 8012010:	4798      	blx	r3
 8012012:	3601      	adds	r6, #1
 8012014:	e7ee      	b.n	8011ff4 <__libc_init_array+0xc>
 8012016:	00b3      	lsls	r3, r6, #2
 8012018:	58eb      	ldr	r3, [r5, r3]
 801201a:	4798      	blx	r3
 801201c:	3601      	adds	r6, #1
 801201e:	e7f2      	b.n	8012006 <__libc_init_array+0x1e>
 8012020:	08016f50 	.word	0x08016f50
 8012024:	08016f50 	.word	0x08016f50
 8012028:	08016f54 	.word	0x08016f54
 801202c:	08016f50 	.word	0x08016f50

08012030 <__retarget_lock_init_recursive>:
 8012030:	4770      	bx	lr

08012032 <__retarget_lock_acquire_recursive>:
 8012032:	4770      	bx	lr

08012034 <__retarget_lock_release_recursive>:
 8012034:	4770      	bx	lr

08012036 <memchr>:
 8012036:	b2c9      	uxtb	r1, r1
 8012038:	1882      	adds	r2, r0, r2
 801203a:	4290      	cmp	r0, r2
 801203c:	d101      	bne.n	8012042 <memchr+0xc>
 801203e:	2000      	movs	r0, #0
 8012040:	4770      	bx	lr
 8012042:	7803      	ldrb	r3, [r0, #0]
 8012044:	428b      	cmp	r3, r1
 8012046:	d0fb      	beq.n	8012040 <memchr+0xa>
 8012048:	3001      	adds	r0, #1
 801204a:	e7f6      	b.n	801203a <memchr+0x4>

0801204c <memcpy>:
 801204c:	2300      	movs	r3, #0
 801204e:	b510      	push	{r4, lr}
 8012050:	429a      	cmp	r2, r3
 8012052:	d100      	bne.n	8012056 <memcpy+0xa>
 8012054:	bd10      	pop	{r4, pc}
 8012056:	5ccc      	ldrb	r4, [r1, r3]
 8012058:	54c4      	strb	r4, [r0, r3]
 801205a:	3301      	adds	r3, #1
 801205c:	e7f8      	b.n	8012050 <memcpy+0x4>

0801205e <quorem>:
 801205e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012060:	6902      	ldr	r2, [r0, #16]
 8012062:	690b      	ldr	r3, [r1, #16]
 8012064:	b089      	sub	sp, #36	; 0x24
 8012066:	0007      	movs	r7, r0
 8012068:	9104      	str	r1, [sp, #16]
 801206a:	2000      	movs	r0, #0
 801206c:	429a      	cmp	r2, r3
 801206e:	db69      	blt.n	8012144 <quorem+0xe6>
 8012070:	3b01      	subs	r3, #1
 8012072:	009c      	lsls	r4, r3, #2
 8012074:	9301      	str	r3, [sp, #4]
 8012076:	000b      	movs	r3, r1
 8012078:	3314      	adds	r3, #20
 801207a:	9306      	str	r3, [sp, #24]
 801207c:	191b      	adds	r3, r3, r4
 801207e:	9305      	str	r3, [sp, #20]
 8012080:	003b      	movs	r3, r7
 8012082:	3314      	adds	r3, #20
 8012084:	9303      	str	r3, [sp, #12]
 8012086:	191c      	adds	r4, r3, r4
 8012088:	9b05      	ldr	r3, [sp, #20]
 801208a:	6826      	ldr	r6, [r4, #0]
 801208c:	681d      	ldr	r5, [r3, #0]
 801208e:	0030      	movs	r0, r6
 8012090:	3501      	adds	r5, #1
 8012092:	0029      	movs	r1, r5
 8012094:	f7f0 fffa 	bl	800308c <__udivsi3>
 8012098:	9002      	str	r0, [sp, #8]
 801209a:	42ae      	cmp	r6, r5
 801209c:	d329      	bcc.n	80120f2 <quorem+0x94>
 801209e:	9b06      	ldr	r3, [sp, #24]
 80120a0:	2600      	movs	r6, #0
 80120a2:	469c      	mov	ip, r3
 80120a4:	9d03      	ldr	r5, [sp, #12]
 80120a6:	9606      	str	r6, [sp, #24]
 80120a8:	4662      	mov	r2, ip
 80120aa:	ca08      	ldmia	r2!, {r3}
 80120ac:	6828      	ldr	r0, [r5, #0]
 80120ae:	4694      	mov	ip, r2
 80120b0:	9a02      	ldr	r2, [sp, #8]
 80120b2:	b299      	uxth	r1, r3
 80120b4:	4351      	muls	r1, r2
 80120b6:	0c1b      	lsrs	r3, r3, #16
 80120b8:	4353      	muls	r3, r2
 80120ba:	1989      	adds	r1, r1, r6
 80120bc:	0c0a      	lsrs	r2, r1, #16
 80120be:	189b      	adds	r3, r3, r2
 80120c0:	9307      	str	r3, [sp, #28]
 80120c2:	0c1e      	lsrs	r6, r3, #16
 80120c4:	9b06      	ldr	r3, [sp, #24]
 80120c6:	b282      	uxth	r2, r0
 80120c8:	18d2      	adds	r2, r2, r3
 80120ca:	466b      	mov	r3, sp
 80120cc:	b289      	uxth	r1, r1
 80120ce:	8b9b      	ldrh	r3, [r3, #28]
 80120d0:	1a52      	subs	r2, r2, r1
 80120d2:	0c01      	lsrs	r1, r0, #16
 80120d4:	1ac9      	subs	r1, r1, r3
 80120d6:	1413      	asrs	r3, r2, #16
 80120d8:	18cb      	adds	r3, r1, r3
 80120da:	1419      	asrs	r1, r3, #16
 80120dc:	b292      	uxth	r2, r2
 80120de:	041b      	lsls	r3, r3, #16
 80120e0:	4313      	orrs	r3, r2
 80120e2:	c508      	stmia	r5!, {r3}
 80120e4:	9b05      	ldr	r3, [sp, #20]
 80120e6:	9106      	str	r1, [sp, #24]
 80120e8:	4563      	cmp	r3, ip
 80120ea:	d2dd      	bcs.n	80120a8 <quorem+0x4a>
 80120ec:	6823      	ldr	r3, [r4, #0]
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d030      	beq.n	8012154 <quorem+0xf6>
 80120f2:	0038      	movs	r0, r7
 80120f4:	9904      	ldr	r1, [sp, #16]
 80120f6:	f001 fa29 	bl	801354c <__mcmp>
 80120fa:	2800      	cmp	r0, #0
 80120fc:	db21      	blt.n	8012142 <quorem+0xe4>
 80120fe:	0038      	movs	r0, r7
 8012100:	2600      	movs	r6, #0
 8012102:	9b02      	ldr	r3, [sp, #8]
 8012104:	9c04      	ldr	r4, [sp, #16]
 8012106:	3301      	adds	r3, #1
 8012108:	9302      	str	r3, [sp, #8]
 801210a:	3014      	adds	r0, #20
 801210c:	3414      	adds	r4, #20
 801210e:	6803      	ldr	r3, [r0, #0]
 8012110:	cc02      	ldmia	r4!, {r1}
 8012112:	b29d      	uxth	r5, r3
 8012114:	19ad      	adds	r5, r5, r6
 8012116:	b28a      	uxth	r2, r1
 8012118:	1aaa      	subs	r2, r5, r2
 801211a:	0c09      	lsrs	r1, r1, #16
 801211c:	0c1b      	lsrs	r3, r3, #16
 801211e:	1a5b      	subs	r3, r3, r1
 8012120:	1411      	asrs	r1, r2, #16
 8012122:	185b      	adds	r3, r3, r1
 8012124:	141e      	asrs	r6, r3, #16
 8012126:	b292      	uxth	r2, r2
 8012128:	041b      	lsls	r3, r3, #16
 801212a:	4313      	orrs	r3, r2
 801212c:	c008      	stmia	r0!, {r3}
 801212e:	9b05      	ldr	r3, [sp, #20]
 8012130:	42a3      	cmp	r3, r4
 8012132:	d2ec      	bcs.n	801210e <quorem+0xb0>
 8012134:	9b01      	ldr	r3, [sp, #4]
 8012136:	9a03      	ldr	r2, [sp, #12]
 8012138:	009b      	lsls	r3, r3, #2
 801213a:	18d3      	adds	r3, r2, r3
 801213c:	681a      	ldr	r2, [r3, #0]
 801213e:	2a00      	cmp	r2, #0
 8012140:	d015      	beq.n	801216e <quorem+0x110>
 8012142:	9802      	ldr	r0, [sp, #8]
 8012144:	b009      	add	sp, #36	; 0x24
 8012146:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012148:	6823      	ldr	r3, [r4, #0]
 801214a:	2b00      	cmp	r3, #0
 801214c:	d106      	bne.n	801215c <quorem+0xfe>
 801214e:	9b01      	ldr	r3, [sp, #4]
 8012150:	3b01      	subs	r3, #1
 8012152:	9301      	str	r3, [sp, #4]
 8012154:	9b03      	ldr	r3, [sp, #12]
 8012156:	3c04      	subs	r4, #4
 8012158:	42a3      	cmp	r3, r4
 801215a:	d3f5      	bcc.n	8012148 <quorem+0xea>
 801215c:	9b01      	ldr	r3, [sp, #4]
 801215e:	613b      	str	r3, [r7, #16]
 8012160:	e7c7      	b.n	80120f2 <quorem+0x94>
 8012162:	681a      	ldr	r2, [r3, #0]
 8012164:	2a00      	cmp	r2, #0
 8012166:	d106      	bne.n	8012176 <quorem+0x118>
 8012168:	9a01      	ldr	r2, [sp, #4]
 801216a:	3a01      	subs	r2, #1
 801216c:	9201      	str	r2, [sp, #4]
 801216e:	9a03      	ldr	r2, [sp, #12]
 8012170:	3b04      	subs	r3, #4
 8012172:	429a      	cmp	r2, r3
 8012174:	d3f5      	bcc.n	8012162 <quorem+0x104>
 8012176:	9b01      	ldr	r3, [sp, #4]
 8012178:	613b      	str	r3, [r7, #16]
 801217a:	e7e2      	b.n	8012142 <quorem+0xe4>

0801217c <_dtoa_r>:
 801217c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801217e:	0014      	movs	r4, r2
 8012180:	001d      	movs	r5, r3
 8012182:	69c6      	ldr	r6, [r0, #28]
 8012184:	b09d      	sub	sp, #116	; 0x74
 8012186:	9408      	str	r4, [sp, #32]
 8012188:	9509      	str	r5, [sp, #36]	; 0x24
 801218a:	9f25      	ldr	r7, [sp, #148]	; 0x94
 801218c:	9004      	str	r0, [sp, #16]
 801218e:	2e00      	cmp	r6, #0
 8012190:	d10f      	bne.n	80121b2 <_dtoa_r+0x36>
 8012192:	2010      	movs	r0, #16
 8012194:	f000 fe4a 	bl	8012e2c <malloc>
 8012198:	9b04      	ldr	r3, [sp, #16]
 801219a:	1e02      	subs	r2, r0, #0
 801219c:	61d8      	str	r0, [r3, #28]
 801219e:	d104      	bne.n	80121aa <_dtoa_r+0x2e>
 80121a0:	21ef      	movs	r1, #239	; 0xef
 80121a2:	4bc6      	ldr	r3, [pc, #792]	; (80124bc <_dtoa_r+0x340>)
 80121a4:	48c6      	ldr	r0, [pc, #792]	; (80124c0 <_dtoa_r+0x344>)
 80121a6:	f002 fe79 	bl	8014e9c <__assert_func>
 80121aa:	6046      	str	r6, [r0, #4]
 80121ac:	6086      	str	r6, [r0, #8]
 80121ae:	6006      	str	r6, [r0, #0]
 80121b0:	60c6      	str	r6, [r0, #12]
 80121b2:	9b04      	ldr	r3, [sp, #16]
 80121b4:	69db      	ldr	r3, [r3, #28]
 80121b6:	6819      	ldr	r1, [r3, #0]
 80121b8:	2900      	cmp	r1, #0
 80121ba:	d00b      	beq.n	80121d4 <_dtoa_r+0x58>
 80121bc:	685a      	ldr	r2, [r3, #4]
 80121be:	2301      	movs	r3, #1
 80121c0:	4093      	lsls	r3, r2
 80121c2:	604a      	str	r2, [r1, #4]
 80121c4:	608b      	str	r3, [r1, #8]
 80121c6:	9804      	ldr	r0, [sp, #16]
 80121c8:	f000 ff32 	bl	8013030 <_Bfree>
 80121cc:	2200      	movs	r2, #0
 80121ce:	9b04      	ldr	r3, [sp, #16]
 80121d0:	69db      	ldr	r3, [r3, #28]
 80121d2:	601a      	str	r2, [r3, #0]
 80121d4:	2d00      	cmp	r5, #0
 80121d6:	da1e      	bge.n	8012216 <_dtoa_r+0x9a>
 80121d8:	2301      	movs	r3, #1
 80121da:	603b      	str	r3, [r7, #0]
 80121dc:	006b      	lsls	r3, r5, #1
 80121de:	085b      	lsrs	r3, r3, #1
 80121e0:	9309      	str	r3, [sp, #36]	; 0x24
 80121e2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80121e4:	4bb7      	ldr	r3, [pc, #732]	; (80124c4 <_dtoa_r+0x348>)
 80121e6:	4ab7      	ldr	r2, [pc, #732]	; (80124c4 <_dtoa_r+0x348>)
 80121e8:	403b      	ands	r3, r7
 80121ea:	4293      	cmp	r3, r2
 80121ec:	d116      	bne.n	801221c <_dtoa_r+0xa0>
 80121ee:	4bb6      	ldr	r3, [pc, #728]	; (80124c8 <_dtoa_r+0x34c>)
 80121f0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80121f2:	6013      	str	r3, [r2, #0]
 80121f4:	033b      	lsls	r3, r7, #12
 80121f6:	0b1b      	lsrs	r3, r3, #12
 80121f8:	4323      	orrs	r3, r4
 80121fa:	d101      	bne.n	8012200 <_dtoa_r+0x84>
 80121fc:	f000 fdb5 	bl	8012d6a <_dtoa_r+0xbee>
 8012200:	4bb2      	ldr	r3, [pc, #712]	; (80124cc <_dtoa_r+0x350>)
 8012202:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8012204:	9306      	str	r3, [sp, #24]
 8012206:	2a00      	cmp	r2, #0
 8012208:	d002      	beq.n	8012210 <_dtoa_r+0x94>
 801220a:	4bb1      	ldr	r3, [pc, #708]	; (80124d0 <_dtoa_r+0x354>)
 801220c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801220e:	6013      	str	r3, [r2, #0]
 8012210:	9806      	ldr	r0, [sp, #24]
 8012212:	b01d      	add	sp, #116	; 0x74
 8012214:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012216:	2300      	movs	r3, #0
 8012218:	603b      	str	r3, [r7, #0]
 801221a:	e7e2      	b.n	80121e2 <_dtoa_r+0x66>
 801221c:	9a08      	ldr	r2, [sp, #32]
 801221e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012220:	9210      	str	r2, [sp, #64]	; 0x40
 8012222:	9311      	str	r3, [sp, #68]	; 0x44
 8012224:	9810      	ldr	r0, [sp, #64]	; 0x40
 8012226:	9911      	ldr	r1, [sp, #68]	; 0x44
 8012228:	2200      	movs	r2, #0
 801222a:	2300      	movs	r3, #0
 801222c:	f7f1 f8b4 	bl	8003398 <__aeabi_dcmpeq>
 8012230:	1e06      	subs	r6, r0, #0
 8012232:	d009      	beq.n	8012248 <_dtoa_r+0xcc>
 8012234:	2301      	movs	r3, #1
 8012236:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8012238:	6013      	str	r3, [r2, #0]
 801223a:	4ba6      	ldr	r3, [pc, #664]	; (80124d4 <_dtoa_r+0x358>)
 801223c:	9306      	str	r3, [sp, #24]
 801223e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8012240:	2b00      	cmp	r3, #0
 8012242:	d0e5      	beq.n	8012210 <_dtoa_r+0x94>
 8012244:	4ba4      	ldr	r3, [pc, #656]	; (80124d8 <_dtoa_r+0x35c>)
 8012246:	e7e1      	b.n	801220c <_dtoa_r+0x90>
 8012248:	ab1a      	add	r3, sp, #104	; 0x68
 801224a:	9301      	str	r3, [sp, #4]
 801224c:	ab1b      	add	r3, sp, #108	; 0x6c
 801224e:	9300      	str	r3, [sp, #0]
 8012250:	9804      	ldr	r0, [sp, #16]
 8012252:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012254:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012256:	f001 fa95 	bl	8013784 <__d2b>
 801225a:	007a      	lsls	r2, r7, #1
 801225c:	9005      	str	r0, [sp, #20]
 801225e:	0d52      	lsrs	r2, r2, #21
 8012260:	d100      	bne.n	8012264 <_dtoa_r+0xe8>
 8012262:	e07b      	b.n	801235c <_dtoa_r+0x1e0>
 8012264:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012266:	9617      	str	r6, [sp, #92]	; 0x5c
 8012268:	0319      	lsls	r1, r3, #12
 801226a:	4b9c      	ldr	r3, [pc, #624]	; (80124dc <_dtoa_r+0x360>)
 801226c:	0b09      	lsrs	r1, r1, #12
 801226e:	430b      	orrs	r3, r1
 8012270:	499b      	ldr	r1, [pc, #620]	; (80124e0 <_dtoa_r+0x364>)
 8012272:	1857      	adds	r7, r2, r1
 8012274:	9810      	ldr	r0, [sp, #64]	; 0x40
 8012276:	9911      	ldr	r1, [sp, #68]	; 0x44
 8012278:	0019      	movs	r1, r3
 801227a:	2200      	movs	r2, #0
 801227c:	4b99      	ldr	r3, [pc, #612]	; (80124e4 <_dtoa_r+0x368>)
 801227e:	f7f3 fb9b 	bl	80059b8 <__aeabi_dsub>
 8012282:	4a99      	ldr	r2, [pc, #612]	; (80124e8 <_dtoa_r+0x36c>)
 8012284:	4b99      	ldr	r3, [pc, #612]	; (80124ec <_dtoa_r+0x370>)
 8012286:	f7f3 f8d5 	bl	8005434 <__aeabi_dmul>
 801228a:	4a99      	ldr	r2, [pc, #612]	; (80124f0 <_dtoa_r+0x374>)
 801228c:	4b99      	ldr	r3, [pc, #612]	; (80124f4 <_dtoa_r+0x378>)
 801228e:	f7f2 f977 	bl	8004580 <__aeabi_dadd>
 8012292:	0004      	movs	r4, r0
 8012294:	0038      	movs	r0, r7
 8012296:	000d      	movs	r5, r1
 8012298:	f7f3 ff64 	bl	8006164 <__aeabi_i2d>
 801229c:	4a96      	ldr	r2, [pc, #600]	; (80124f8 <_dtoa_r+0x37c>)
 801229e:	4b97      	ldr	r3, [pc, #604]	; (80124fc <_dtoa_r+0x380>)
 80122a0:	f7f3 f8c8 	bl	8005434 <__aeabi_dmul>
 80122a4:	0002      	movs	r2, r0
 80122a6:	000b      	movs	r3, r1
 80122a8:	0020      	movs	r0, r4
 80122aa:	0029      	movs	r1, r5
 80122ac:	f7f2 f968 	bl	8004580 <__aeabi_dadd>
 80122b0:	0004      	movs	r4, r0
 80122b2:	000d      	movs	r5, r1
 80122b4:	f7f3 ff20 	bl	80060f8 <__aeabi_d2iz>
 80122b8:	2200      	movs	r2, #0
 80122ba:	9003      	str	r0, [sp, #12]
 80122bc:	2300      	movs	r3, #0
 80122be:	0020      	movs	r0, r4
 80122c0:	0029      	movs	r1, r5
 80122c2:	f7f1 f86f 	bl	80033a4 <__aeabi_dcmplt>
 80122c6:	2800      	cmp	r0, #0
 80122c8:	d00b      	beq.n	80122e2 <_dtoa_r+0x166>
 80122ca:	9803      	ldr	r0, [sp, #12]
 80122cc:	f7f3 ff4a 	bl	8006164 <__aeabi_i2d>
 80122d0:	002b      	movs	r3, r5
 80122d2:	0022      	movs	r2, r4
 80122d4:	f7f1 f860 	bl	8003398 <__aeabi_dcmpeq>
 80122d8:	4243      	negs	r3, r0
 80122da:	4158      	adcs	r0, r3
 80122dc:	9b03      	ldr	r3, [sp, #12]
 80122de:	1a1b      	subs	r3, r3, r0
 80122e0:	9303      	str	r3, [sp, #12]
 80122e2:	2301      	movs	r3, #1
 80122e4:	9316      	str	r3, [sp, #88]	; 0x58
 80122e6:	9b03      	ldr	r3, [sp, #12]
 80122e8:	2b16      	cmp	r3, #22
 80122ea:	d810      	bhi.n	801230e <_dtoa_r+0x192>
 80122ec:	9810      	ldr	r0, [sp, #64]	; 0x40
 80122ee:	9911      	ldr	r1, [sp, #68]	; 0x44
 80122f0:	9a03      	ldr	r2, [sp, #12]
 80122f2:	4b83      	ldr	r3, [pc, #524]	; (8012500 <_dtoa_r+0x384>)
 80122f4:	00d2      	lsls	r2, r2, #3
 80122f6:	189b      	adds	r3, r3, r2
 80122f8:	681a      	ldr	r2, [r3, #0]
 80122fa:	685b      	ldr	r3, [r3, #4]
 80122fc:	f7f1 f852 	bl	80033a4 <__aeabi_dcmplt>
 8012300:	2800      	cmp	r0, #0
 8012302:	d047      	beq.n	8012394 <_dtoa_r+0x218>
 8012304:	9b03      	ldr	r3, [sp, #12]
 8012306:	3b01      	subs	r3, #1
 8012308:	9303      	str	r3, [sp, #12]
 801230a:	2300      	movs	r3, #0
 801230c:	9316      	str	r3, [sp, #88]	; 0x58
 801230e:	2200      	movs	r2, #0
 8012310:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8012312:	920a      	str	r2, [sp, #40]	; 0x28
 8012314:	1bdb      	subs	r3, r3, r7
 8012316:	1e5a      	subs	r2, r3, #1
 8012318:	d53e      	bpl.n	8012398 <_dtoa_r+0x21c>
 801231a:	2201      	movs	r2, #1
 801231c:	1ad3      	subs	r3, r2, r3
 801231e:	930a      	str	r3, [sp, #40]	; 0x28
 8012320:	2300      	movs	r3, #0
 8012322:	930c      	str	r3, [sp, #48]	; 0x30
 8012324:	9b03      	ldr	r3, [sp, #12]
 8012326:	2b00      	cmp	r3, #0
 8012328:	db38      	blt.n	801239c <_dtoa_r+0x220>
 801232a:	9a03      	ldr	r2, [sp, #12]
 801232c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801232e:	4694      	mov	ip, r2
 8012330:	4463      	add	r3, ip
 8012332:	930c      	str	r3, [sp, #48]	; 0x30
 8012334:	2300      	movs	r3, #0
 8012336:	9213      	str	r2, [sp, #76]	; 0x4c
 8012338:	930d      	str	r3, [sp, #52]	; 0x34
 801233a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801233c:	2401      	movs	r4, #1
 801233e:	2b09      	cmp	r3, #9
 8012340:	d867      	bhi.n	8012412 <_dtoa_r+0x296>
 8012342:	2b05      	cmp	r3, #5
 8012344:	dd02      	ble.n	801234c <_dtoa_r+0x1d0>
 8012346:	2400      	movs	r4, #0
 8012348:	3b04      	subs	r3, #4
 801234a:	9322      	str	r3, [sp, #136]	; 0x88
 801234c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801234e:	1e98      	subs	r0, r3, #2
 8012350:	2803      	cmp	r0, #3
 8012352:	d867      	bhi.n	8012424 <_dtoa_r+0x2a8>
 8012354:	f7f0 fe86 	bl	8003064 <__gnu_thumb1_case_uqi>
 8012358:	5b383a2b 	.word	0x5b383a2b
 801235c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801235e:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8012360:	18f6      	adds	r6, r6, r3
 8012362:	4b68      	ldr	r3, [pc, #416]	; (8012504 <_dtoa_r+0x388>)
 8012364:	18f2      	adds	r2, r6, r3
 8012366:	2a20      	cmp	r2, #32
 8012368:	dd0f      	ble.n	801238a <_dtoa_r+0x20e>
 801236a:	2340      	movs	r3, #64	; 0x40
 801236c:	1a9b      	subs	r3, r3, r2
 801236e:	409f      	lsls	r7, r3
 8012370:	4b65      	ldr	r3, [pc, #404]	; (8012508 <_dtoa_r+0x38c>)
 8012372:	0038      	movs	r0, r7
 8012374:	18f3      	adds	r3, r6, r3
 8012376:	40dc      	lsrs	r4, r3
 8012378:	4320      	orrs	r0, r4
 801237a:	f7f3 ff23 	bl	80061c4 <__aeabi_ui2d>
 801237e:	2201      	movs	r2, #1
 8012380:	4b62      	ldr	r3, [pc, #392]	; (801250c <_dtoa_r+0x390>)
 8012382:	1e77      	subs	r7, r6, #1
 8012384:	18cb      	adds	r3, r1, r3
 8012386:	9217      	str	r2, [sp, #92]	; 0x5c
 8012388:	e776      	b.n	8012278 <_dtoa_r+0xfc>
 801238a:	2320      	movs	r3, #32
 801238c:	0020      	movs	r0, r4
 801238e:	1a9b      	subs	r3, r3, r2
 8012390:	4098      	lsls	r0, r3
 8012392:	e7f2      	b.n	801237a <_dtoa_r+0x1fe>
 8012394:	9016      	str	r0, [sp, #88]	; 0x58
 8012396:	e7ba      	b.n	801230e <_dtoa_r+0x192>
 8012398:	920c      	str	r2, [sp, #48]	; 0x30
 801239a:	e7c3      	b.n	8012324 <_dtoa_r+0x1a8>
 801239c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801239e:	9a03      	ldr	r2, [sp, #12]
 80123a0:	1a9b      	subs	r3, r3, r2
 80123a2:	930a      	str	r3, [sp, #40]	; 0x28
 80123a4:	4253      	negs	r3, r2
 80123a6:	930d      	str	r3, [sp, #52]	; 0x34
 80123a8:	2300      	movs	r3, #0
 80123aa:	9313      	str	r3, [sp, #76]	; 0x4c
 80123ac:	e7c5      	b.n	801233a <_dtoa_r+0x1be>
 80123ae:	2300      	movs	r3, #0
 80123b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80123b2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80123b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80123b6:	9307      	str	r3, [sp, #28]
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	dc13      	bgt.n	80123e4 <_dtoa_r+0x268>
 80123bc:	2301      	movs	r3, #1
 80123be:	001a      	movs	r2, r3
 80123c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80123c2:	9307      	str	r3, [sp, #28]
 80123c4:	9223      	str	r2, [sp, #140]	; 0x8c
 80123c6:	e00d      	b.n	80123e4 <_dtoa_r+0x268>
 80123c8:	2301      	movs	r3, #1
 80123ca:	e7f1      	b.n	80123b0 <_dtoa_r+0x234>
 80123cc:	2300      	movs	r3, #0
 80123ce:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80123d0:	930f      	str	r3, [sp, #60]	; 0x3c
 80123d2:	4694      	mov	ip, r2
 80123d4:	9b03      	ldr	r3, [sp, #12]
 80123d6:	4463      	add	r3, ip
 80123d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80123da:	3301      	adds	r3, #1
 80123dc:	9307      	str	r3, [sp, #28]
 80123de:	2b00      	cmp	r3, #0
 80123e0:	dc00      	bgt.n	80123e4 <_dtoa_r+0x268>
 80123e2:	2301      	movs	r3, #1
 80123e4:	9a04      	ldr	r2, [sp, #16]
 80123e6:	2100      	movs	r1, #0
 80123e8:	69d0      	ldr	r0, [r2, #28]
 80123ea:	2204      	movs	r2, #4
 80123ec:	0015      	movs	r5, r2
 80123ee:	3514      	adds	r5, #20
 80123f0:	429d      	cmp	r5, r3
 80123f2:	d91b      	bls.n	801242c <_dtoa_r+0x2b0>
 80123f4:	6041      	str	r1, [r0, #4]
 80123f6:	9804      	ldr	r0, [sp, #16]
 80123f8:	f000 fdd6 	bl	8012fa8 <_Balloc>
 80123fc:	9006      	str	r0, [sp, #24]
 80123fe:	2800      	cmp	r0, #0
 8012400:	d117      	bne.n	8012432 <_dtoa_r+0x2b6>
 8012402:	21b0      	movs	r1, #176	; 0xb0
 8012404:	4b42      	ldr	r3, [pc, #264]	; (8012510 <_dtoa_r+0x394>)
 8012406:	482e      	ldr	r0, [pc, #184]	; (80124c0 <_dtoa_r+0x344>)
 8012408:	9a06      	ldr	r2, [sp, #24]
 801240a:	31ff      	adds	r1, #255	; 0xff
 801240c:	e6cb      	b.n	80121a6 <_dtoa_r+0x2a>
 801240e:	2301      	movs	r3, #1
 8012410:	e7dd      	b.n	80123ce <_dtoa_r+0x252>
 8012412:	2300      	movs	r3, #0
 8012414:	940f      	str	r4, [sp, #60]	; 0x3c
 8012416:	9322      	str	r3, [sp, #136]	; 0x88
 8012418:	3b01      	subs	r3, #1
 801241a:	930b      	str	r3, [sp, #44]	; 0x2c
 801241c:	9307      	str	r3, [sp, #28]
 801241e:	2200      	movs	r2, #0
 8012420:	3313      	adds	r3, #19
 8012422:	e7cf      	b.n	80123c4 <_dtoa_r+0x248>
 8012424:	2301      	movs	r3, #1
 8012426:	930f      	str	r3, [sp, #60]	; 0x3c
 8012428:	3b02      	subs	r3, #2
 801242a:	e7f6      	b.n	801241a <_dtoa_r+0x29e>
 801242c:	3101      	adds	r1, #1
 801242e:	0052      	lsls	r2, r2, #1
 8012430:	e7dc      	b.n	80123ec <_dtoa_r+0x270>
 8012432:	9b04      	ldr	r3, [sp, #16]
 8012434:	9a06      	ldr	r2, [sp, #24]
 8012436:	69db      	ldr	r3, [r3, #28]
 8012438:	601a      	str	r2, [r3, #0]
 801243a:	9b07      	ldr	r3, [sp, #28]
 801243c:	2b0e      	cmp	r3, #14
 801243e:	d900      	bls.n	8012442 <_dtoa_r+0x2c6>
 8012440:	e0e5      	b.n	801260e <_dtoa_r+0x492>
 8012442:	2c00      	cmp	r4, #0
 8012444:	d100      	bne.n	8012448 <_dtoa_r+0x2cc>
 8012446:	e0e2      	b.n	801260e <_dtoa_r+0x492>
 8012448:	9b03      	ldr	r3, [sp, #12]
 801244a:	2b00      	cmp	r3, #0
 801244c:	dd64      	ble.n	8012518 <_dtoa_r+0x39c>
 801244e:	210f      	movs	r1, #15
 8012450:	9a03      	ldr	r2, [sp, #12]
 8012452:	4b2b      	ldr	r3, [pc, #172]	; (8012500 <_dtoa_r+0x384>)
 8012454:	400a      	ands	r2, r1
 8012456:	00d2      	lsls	r2, r2, #3
 8012458:	189b      	adds	r3, r3, r2
 801245a:	681e      	ldr	r6, [r3, #0]
 801245c:	685f      	ldr	r7, [r3, #4]
 801245e:	9b03      	ldr	r3, [sp, #12]
 8012460:	2402      	movs	r4, #2
 8012462:	111d      	asrs	r5, r3, #4
 8012464:	05db      	lsls	r3, r3, #23
 8012466:	d50a      	bpl.n	801247e <_dtoa_r+0x302>
 8012468:	4b2a      	ldr	r3, [pc, #168]	; (8012514 <_dtoa_r+0x398>)
 801246a:	400d      	ands	r5, r1
 801246c:	6a1a      	ldr	r2, [r3, #32]
 801246e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012470:	9810      	ldr	r0, [sp, #64]	; 0x40
 8012472:	9911      	ldr	r1, [sp, #68]	; 0x44
 8012474:	f7f2 fbe4 	bl	8004c40 <__aeabi_ddiv>
 8012478:	9008      	str	r0, [sp, #32]
 801247a:	9109      	str	r1, [sp, #36]	; 0x24
 801247c:	3401      	adds	r4, #1
 801247e:	4b25      	ldr	r3, [pc, #148]	; (8012514 <_dtoa_r+0x398>)
 8012480:	930e      	str	r3, [sp, #56]	; 0x38
 8012482:	2d00      	cmp	r5, #0
 8012484:	d108      	bne.n	8012498 <_dtoa_r+0x31c>
 8012486:	9808      	ldr	r0, [sp, #32]
 8012488:	9909      	ldr	r1, [sp, #36]	; 0x24
 801248a:	0032      	movs	r2, r6
 801248c:	003b      	movs	r3, r7
 801248e:	f7f2 fbd7 	bl	8004c40 <__aeabi_ddiv>
 8012492:	9008      	str	r0, [sp, #32]
 8012494:	9109      	str	r1, [sp, #36]	; 0x24
 8012496:	e05a      	b.n	801254e <_dtoa_r+0x3d2>
 8012498:	2301      	movs	r3, #1
 801249a:	421d      	tst	r5, r3
 801249c:	d009      	beq.n	80124b2 <_dtoa_r+0x336>
 801249e:	18e4      	adds	r4, r4, r3
 80124a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80124a2:	0030      	movs	r0, r6
 80124a4:	681a      	ldr	r2, [r3, #0]
 80124a6:	685b      	ldr	r3, [r3, #4]
 80124a8:	0039      	movs	r1, r7
 80124aa:	f7f2 ffc3 	bl	8005434 <__aeabi_dmul>
 80124ae:	0006      	movs	r6, r0
 80124b0:	000f      	movs	r7, r1
 80124b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80124b4:	106d      	asrs	r5, r5, #1
 80124b6:	3308      	adds	r3, #8
 80124b8:	e7e2      	b.n	8012480 <_dtoa_r+0x304>
 80124ba:	46c0      	nop			; (mov r8, r8)
 80124bc:	08016b62 	.word	0x08016b62
 80124c0:	08016b79 	.word	0x08016b79
 80124c4:	7ff00000 	.word	0x7ff00000
 80124c8:	0000270f 	.word	0x0000270f
 80124cc:	08016b5e 	.word	0x08016b5e
 80124d0:	08016b61 	.word	0x08016b61
 80124d4:	08016b2c 	.word	0x08016b2c
 80124d8:	08016b2d 	.word	0x08016b2d
 80124dc:	3ff00000 	.word	0x3ff00000
 80124e0:	fffffc01 	.word	0xfffffc01
 80124e4:	3ff80000 	.word	0x3ff80000
 80124e8:	636f4361 	.word	0x636f4361
 80124ec:	3fd287a7 	.word	0x3fd287a7
 80124f0:	8b60c8b3 	.word	0x8b60c8b3
 80124f4:	3fc68a28 	.word	0x3fc68a28
 80124f8:	509f79fb 	.word	0x509f79fb
 80124fc:	3fd34413 	.word	0x3fd34413
 8012500:	08016c68 	.word	0x08016c68
 8012504:	00000432 	.word	0x00000432
 8012508:	00000412 	.word	0x00000412
 801250c:	fe100000 	.word	0xfe100000
 8012510:	08016bd1 	.word	0x08016bd1
 8012514:	08016c40 	.word	0x08016c40
 8012518:	9b03      	ldr	r3, [sp, #12]
 801251a:	2402      	movs	r4, #2
 801251c:	2b00      	cmp	r3, #0
 801251e:	d016      	beq.n	801254e <_dtoa_r+0x3d2>
 8012520:	9810      	ldr	r0, [sp, #64]	; 0x40
 8012522:	9911      	ldr	r1, [sp, #68]	; 0x44
 8012524:	220f      	movs	r2, #15
 8012526:	425d      	negs	r5, r3
 8012528:	402a      	ands	r2, r5
 801252a:	4bdd      	ldr	r3, [pc, #884]	; (80128a0 <_dtoa_r+0x724>)
 801252c:	00d2      	lsls	r2, r2, #3
 801252e:	189b      	adds	r3, r3, r2
 8012530:	681a      	ldr	r2, [r3, #0]
 8012532:	685b      	ldr	r3, [r3, #4]
 8012534:	f7f2 ff7e 	bl	8005434 <__aeabi_dmul>
 8012538:	2701      	movs	r7, #1
 801253a:	2300      	movs	r3, #0
 801253c:	9008      	str	r0, [sp, #32]
 801253e:	9109      	str	r1, [sp, #36]	; 0x24
 8012540:	4ed8      	ldr	r6, [pc, #864]	; (80128a4 <_dtoa_r+0x728>)
 8012542:	112d      	asrs	r5, r5, #4
 8012544:	2d00      	cmp	r5, #0
 8012546:	d000      	beq.n	801254a <_dtoa_r+0x3ce>
 8012548:	e091      	b.n	801266e <_dtoa_r+0x4f2>
 801254a:	2b00      	cmp	r3, #0
 801254c:	d1a1      	bne.n	8012492 <_dtoa_r+0x316>
 801254e:	9e08      	ldr	r6, [sp, #32]
 8012550:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8012552:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8012554:	2b00      	cmp	r3, #0
 8012556:	d100      	bne.n	801255a <_dtoa_r+0x3de>
 8012558:	e094      	b.n	8012684 <_dtoa_r+0x508>
 801255a:	2200      	movs	r2, #0
 801255c:	0030      	movs	r0, r6
 801255e:	0039      	movs	r1, r7
 8012560:	4bd1      	ldr	r3, [pc, #836]	; (80128a8 <_dtoa_r+0x72c>)
 8012562:	f7f0 ff1f 	bl	80033a4 <__aeabi_dcmplt>
 8012566:	2800      	cmp	r0, #0
 8012568:	d100      	bne.n	801256c <_dtoa_r+0x3f0>
 801256a:	e08b      	b.n	8012684 <_dtoa_r+0x508>
 801256c:	9b07      	ldr	r3, [sp, #28]
 801256e:	2b00      	cmp	r3, #0
 8012570:	d100      	bne.n	8012574 <_dtoa_r+0x3f8>
 8012572:	e087      	b.n	8012684 <_dtoa_r+0x508>
 8012574:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012576:	2b00      	cmp	r3, #0
 8012578:	dd45      	ble.n	8012606 <_dtoa_r+0x48a>
 801257a:	9b03      	ldr	r3, [sp, #12]
 801257c:	2200      	movs	r2, #0
 801257e:	3b01      	subs	r3, #1
 8012580:	930e      	str	r3, [sp, #56]	; 0x38
 8012582:	0030      	movs	r0, r6
 8012584:	4bc9      	ldr	r3, [pc, #804]	; (80128ac <_dtoa_r+0x730>)
 8012586:	0039      	movs	r1, r7
 8012588:	f7f2 ff54 	bl	8005434 <__aeabi_dmul>
 801258c:	9008      	str	r0, [sp, #32]
 801258e:	9109      	str	r1, [sp, #36]	; 0x24
 8012590:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012592:	3401      	adds	r4, #1
 8012594:	0020      	movs	r0, r4
 8012596:	9e08      	ldr	r6, [sp, #32]
 8012598:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801259a:	9312      	str	r3, [sp, #72]	; 0x48
 801259c:	f7f3 fde2 	bl	8006164 <__aeabi_i2d>
 80125a0:	0032      	movs	r2, r6
 80125a2:	003b      	movs	r3, r7
 80125a4:	f7f2 ff46 	bl	8005434 <__aeabi_dmul>
 80125a8:	2200      	movs	r2, #0
 80125aa:	4bc1      	ldr	r3, [pc, #772]	; (80128b0 <_dtoa_r+0x734>)
 80125ac:	f7f1 ffe8 	bl	8004580 <__aeabi_dadd>
 80125b0:	4ac0      	ldr	r2, [pc, #768]	; (80128b4 <_dtoa_r+0x738>)
 80125b2:	9014      	str	r0, [sp, #80]	; 0x50
 80125b4:	9115      	str	r1, [sp, #84]	; 0x54
 80125b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80125b8:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80125ba:	4694      	mov	ip, r2
 80125bc:	9308      	str	r3, [sp, #32]
 80125be:	9409      	str	r4, [sp, #36]	; 0x24
 80125c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80125c2:	4463      	add	r3, ip
 80125c4:	9318      	str	r3, [sp, #96]	; 0x60
 80125c6:	9309      	str	r3, [sp, #36]	; 0x24
 80125c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	d15e      	bne.n	801268c <_dtoa_r+0x510>
 80125ce:	2200      	movs	r2, #0
 80125d0:	4bb9      	ldr	r3, [pc, #740]	; (80128b8 <_dtoa_r+0x73c>)
 80125d2:	0030      	movs	r0, r6
 80125d4:	0039      	movs	r1, r7
 80125d6:	f7f3 f9ef 	bl	80059b8 <__aeabi_dsub>
 80125da:	9a08      	ldr	r2, [sp, #32]
 80125dc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80125de:	0004      	movs	r4, r0
 80125e0:	000d      	movs	r5, r1
 80125e2:	f7f0 fef3 	bl	80033cc <__aeabi_dcmpgt>
 80125e6:	2800      	cmp	r0, #0
 80125e8:	d000      	beq.n	80125ec <_dtoa_r+0x470>
 80125ea:	e2b3      	b.n	8012b54 <_dtoa_r+0x9d8>
 80125ec:	48b3      	ldr	r0, [pc, #716]	; (80128bc <_dtoa_r+0x740>)
 80125ee:	9915      	ldr	r1, [sp, #84]	; 0x54
 80125f0:	4684      	mov	ip, r0
 80125f2:	4461      	add	r1, ip
 80125f4:	000b      	movs	r3, r1
 80125f6:	0020      	movs	r0, r4
 80125f8:	0029      	movs	r1, r5
 80125fa:	9a08      	ldr	r2, [sp, #32]
 80125fc:	f7f0 fed2 	bl	80033a4 <__aeabi_dcmplt>
 8012600:	2800      	cmp	r0, #0
 8012602:	d000      	beq.n	8012606 <_dtoa_r+0x48a>
 8012604:	e2a3      	b.n	8012b4e <_dtoa_r+0x9d2>
 8012606:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012608:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801260a:	9308      	str	r3, [sp, #32]
 801260c:	9409      	str	r4, [sp, #36]	; 0x24
 801260e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012610:	2b00      	cmp	r3, #0
 8012612:	da00      	bge.n	8012616 <_dtoa_r+0x49a>
 8012614:	e179      	b.n	801290a <_dtoa_r+0x78e>
 8012616:	9a03      	ldr	r2, [sp, #12]
 8012618:	2a0e      	cmp	r2, #14
 801261a:	dd00      	ble.n	801261e <_dtoa_r+0x4a2>
 801261c:	e175      	b.n	801290a <_dtoa_r+0x78e>
 801261e:	4ba0      	ldr	r3, [pc, #640]	; (80128a0 <_dtoa_r+0x724>)
 8012620:	00d2      	lsls	r2, r2, #3
 8012622:	189b      	adds	r3, r3, r2
 8012624:	681e      	ldr	r6, [r3, #0]
 8012626:	685f      	ldr	r7, [r3, #4]
 8012628:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801262a:	2b00      	cmp	r3, #0
 801262c:	db00      	blt.n	8012630 <_dtoa_r+0x4b4>
 801262e:	e0e5      	b.n	80127fc <_dtoa_r+0x680>
 8012630:	9b07      	ldr	r3, [sp, #28]
 8012632:	2b00      	cmp	r3, #0
 8012634:	dd00      	ble.n	8012638 <_dtoa_r+0x4bc>
 8012636:	e0e1      	b.n	80127fc <_dtoa_r+0x680>
 8012638:	d000      	beq.n	801263c <_dtoa_r+0x4c0>
 801263a:	e288      	b.n	8012b4e <_dtoa_r+0x9d2>
 801263c:	2200      	movs	r2, #0
 801263e:	0030      	movs	r0, r6
 8012640:	0039      	movs	r1, r7
 8012642:	4b9d      	ldr	r3, [pc, #628]	; (80128b8 <_dtoa_r+0x73c>)
 8012644:	f7f2 fef6 	bl	8005434 <__aeabi_dmul>
 8012648:	9a08      	ldr	r2, [sp, #32]
 801264a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801264c:	f7f0 fec8 	bl	80033e0 <__aeabi_dcmpge>
 8012650:	9e07      	ldr	r6, [sp, #28]
 8012652:	0037      	movs	r7, r6
 8012654:	2800      	cmp	r0, #0
 8012656:	d000      	beq.n	801265a <_dtoa_r+0x4de>
 8012658:	e25f      	b.n	8012b1a <_dtoa_r+0x99e>
 801265a:	9b06      	ldr	r3, [sp, #24]
 801265c:	9a06      	ldr	r2, [sp, #24]
 801265e:	3301      	adds	r3, #1
 8012660:	9308      	str	r3, [sp, #32]
 8012662:	2331      	movs	r3, #49	; 0x31
 8012664:	7013      	strb	r3, [r2, #0]
 8012666:	9b03      	ldr	r3, [sp, #12]
 8012668:	3301      	adds	r3, #1
 801266a:	9303      	str	r3, [sp, #12]
 801266c:	e25a      	b.n	8012b24 <_dtoa_r+0x9a8>
 801266e:	423d      	tst	r5, r7
 8012670:	d005      	beq.n	801267e <_dtoa_r+0x502>
 8012672:	6832      	ldr	r2, [r6, #0]
 8012674:	6873      	ldr	r3, [r6, #4]
 8012676:	f7f2 fedd 	bl	8005434 <__aeabi_dmul>
 801267a:	003b      	movs	r3, r7
 801267c:	3401      	adds	r4, #1
 801267e:	106d      	asrs	r5, r5, #1
 8012680:	3608      	adds	r6, #8
 8012682:	e75f      	b.n	8012544 <_dtoa_r+0x3c8>
 8012684:	9b03      	ldr	r3, [sp, #12]
 8012686:	930e      	str	r3, [sp, #56]	; 0x38
 8012688:	9b07      	ldr	r3, [sp, #28]
 801268a:	e783      	b.n	8012594 <_dtoa_r+0x418>
 801268c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801268e:	4b84      	ldr	r3, [pc, #528]	; (80128a0 <_dtoa_r+0x724>)
 8012690:	3a01      	subs	r2, #1
 8012692:	00d2      	lsls	r2, r2, #3
 8012694:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8012696:	189b      	adds	r3, r3, r2
 8012698:	9c08      	ldr	r4, [sp, #32]
 801269a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801269c:	681a      	ldr	r2, [r3, #0]
 801269e:	685b      	ldr	r3, [r3, #4]
 80126a0:	2900      	cmp	r1, #0
 80126a2:	d051      	beq.n	8012748 <_dtoa_r+0x5cc>
 80126a4:	2000      	movs	r0, #0
 80126a6:	4986      	ldr	r1, [pc, #536]	; (80128c0 <_dtoa_r+0x744>)
 80126a8:	f7f2 faca 	bl	8004c40 <__aeabi_ddiv>
 80126ac:	0022      	movs	r2, r4
 80126ae:	002b      	movs	r3, r5
 80126b0:	f7f3 f982 	bl	80059b8 <__aeabi_dsub>
 80126b4:	9a06      	ldr	r2, [sp, #24]
 80126b6:	0004      	movs	r4, r0
 80126b8:	4694      	mov	ip, r2
 80126ba:	000d      	movs	r5, r1
 80126bc:	9b06      	ldr	r3, [sp, #24]
 80126be:	9314      	str	r3, [sp, #80]	; 0x50
 80126c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80126c2:	4463      	add	r3, ip
 80126c4:	9318      	str	r3, [sp, #96]	; 0x60
 80126c6:	0039      	movs	r1, r7
 80126c8:	0030      	movs	r0, r6
 80126ca:	f7f3 fd15 	bl	80060f8 <__aeabi_d2iz>
 80126ce:	9012      	str	r0, [sp, #72]	; 0x48
 80126d0:	f7f3 fd48 	bl	8006164 <__aeabi_i2d>
 80126d4:	0002      	movs	r2, r0
 80126d6:	000b      	movs	r3, r1
 80126d8:	0030      	movs	r0, r6
 80126da:	0039      	movs	r1, r7
 80126dc:	f7f3 f96c 	bl	80059b8 <__aeabi_dsub>
 80126e0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80126e2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80126e4:	3301      	adds	r3, #1
 80126e6:	9308      	str	r3, [sp, #32]
 80126e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80126ea:	0006      	movs	r6, r0
 80126ec:	3330      	adds	r3, #48	; 0x30
 80126ee:	7013      	strb	r3, [r2, #0]
 80126f0:	0022      	movs	r2, r4
 80126f2:	002b      	movs	r3, r5
 80126f4:	000f      	movs	r7, r1
 80126f6:	f7f0 fe55 	bl	80033a4 <__aeabi_dcmplt>
 80126fa:	2800      	cmp	r0, #0
 80126fc:	d174      	bne.n	80127e8 <_dtoa_r+0x66c>
 80126fe:	0032      	movs	r2, r6
 8012700:	003b      	movs	r3, r7
 8012702:	2000      	movs	r0, #0
 8012704:	4968      	ldr	r1, [pc, #416]	; (80128a8 <_dtoa_r+0x72c>)
 8012706:	f7f3 f957 	bl	80059b8 <__aeabi_dsub>
 801270a:	0022      	movs	r2, r4
 801270c:	002b      	movs	r3, r5
 801270e:	f7f0 fe49 	bl	80033a4 <__aeabi_dcmplt>
 8012712:	2800      	cmp	r0, #0
 8012714:	d000      	beq.n	8012718 <_dtoa_r+0x59c>
 8012716:	e0d7      	b.n	80128c8 <_dtoa_r+0x74c>
 8012718:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801271a:	9a08      	ldr	r2, [sp, #32]
 801271c:	4293      	cmp	r3, r2
 801271e:	d100      	bne.n	8012722 <_dtoa_r+0x5a6>
 8012720:	e771      	b.n	8012606 <_dtoa_r+0x48a>
 8012722:	2200      	movs	r2, #0
 8012724:	0020      	movs	r0, r4
 8012726:	0029      	movs	r1, r5
 8012728:	4b60      	ldr	r3, [pc, #384]	; (80128ac <_dtoa_r+0x730>)
 801272a:	f7f2 fe83 	bl	8005434 <__aeabi_dmul>
 801272e:	4b5f      	ldr	r3, [pc, #380]	; (80128ac <_dtoa_r+0x730>)
 8012730:	0004      	movs	r4, r0
 8012732:	000d      	movs	r5, r1
 8012734:	0030      	movs	r0, r6
 8012736:	0039      	movs	r1, r7
 8012738:	2200      	movs	r2, #0
 801273a:	f7f2 fe7b 	bl	8005434 <__aeabi_dmul>
 801273e:	9b08      	ldr	r3, [sp, #32]
 8012740:	0006      	movs	r6, r0
 8012742:	000f      	movs	r7, r1
 8012744:	9314      	str	r3, [sp, #80]	; 0x50
 8012746:	e7be      	b.n	80126c6 <_dtoa_r+0x54a>
 8012748:	0020      	movs	r0, r4
 801274a:	0029      	movs	r1, r5
 801274c:	f7f2 fe72 	bl	8005434 <__aeabi_dmul>
 8012750:	9a06      	ldr	r2, [sp, #24]
 8012752:	9b06      	ldr	r3, [sp, #24]
 8012754:	4694      	mov	ip, r2
 8012756:	9308      	str	r3, [sp, #32]
 8012758:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801275a:	9014      	str	r0, [sp, #80]	; 0x50
 801275c:	9115      	str	r1, [sp, #84]	; 0x54
 801275e:	4463      	add	r3, ip
 8012760:	9319      	str	r3, [sp, #100]	; 0x64
 8012762:	0030      	movs	r0, r6
 8012764:	0039      	movs	r1, r7
 8012766:	f7f3 fcc7 	bl	80060f8 <__aeabi_d2iz>
 801276a:	9018      	str	r0, [sp, #96]	; 0x60
 801276c:	f7f3 fcfa 	bl	8006164 <__aeabi_i2d>
 8012770:	0002      	movs	r2, r0
 8012772:	000b      	movs	r3, r1
 8012774:	0030      	movs	r0, r6
 8012776:	0039      	movs	r1, r7
 8012778:	f7f3 f91e 	bl	80059b8 <__aeabi_dsub>
 801277c:	9e18      	ldr	r6, [sp, #96]	; 0x60
 801277e:	9b08      	ldr	r3, [sp, #32]
 8012780:	3630      	adds	r6, #48	; 0x30
 8012782:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8012784:	701e      	strb	r6, [r3, #0]
 8012786:	3301      	adds	r3, #1
 8012788:	0004      	movs	r4, r0
 801278a:	000d      	movs	r5, r1
 801278c:	9308      	str	r3, [sp, #32]
 801278e:	4293      	cmp	r3, r2
 8012790:	d12d      	bne.n	80127ee <_dtoa_r+0x672>
 8012792:	9814      	ldr	r0, [sp, #80]	; 0x50
 8012794:	9915      	ldr	r1, [sp, #84]	; 0x54
 8012796:	9a06      	ldr	r2, [sp, #24]
 8012798:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801279a:	4694      	mov	ip, r2
 801279c:	4463      	add	r3, ip
 801279e:	2200      	movs	r2, #0
 80127a0:	9308      	str	r3, [sp, #32]
 80127a2:	4b47      	ldr	r3, [pc, #284]	; (80128c0 <_dtoa_r+0x744>)
 80127a4:	f7f1 feec 	bl	8004580 <__aeabi_dadd>
 80127a8:	0002      	movs	r2, r0
 80127aa:	000b      	movs	r3, r1
 80127ac:	0020      	movs	r0, r4
 80127ae:	0029      	movs	r1, r5
 80127b0:	f7f0 fe0c 	bl	80033cc <__aeabi_dcmpgt>
 80127b4:	2800      	cmp	r0, #0
 80127b6:	d000      	beq.n	80127ba <_dtoa_r+0x63e>
 80127b8:	e086      	b.n	80128c8 <_dtoa_r+0x74c>
 80127ba:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80127bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80127be:	2000      	movs	r0, #0
 80127c0:	493f      	ldr	r1, [pc, #252]	; (80128c0 <_dtoa_r+0x744>)
 80127c2:	f7f3 f8f9 	bl	80059b8 <__aeabi_dsub>
 80127c6:	0002      	movs	r2, r0
 80127c8:	000b      	movs	r3, r1
 80127ca:	0020      	movs	r0, r4
 80127cc:	0029      	movs	r1, r5
 80127ce:	f7f0 fde9 	bl	80033a4 <__aeabi_dcmplt>
 80127d2:	2800      	cmp	r0, #0
 80127d4:	d100      	bne.n	80127d8 <_dtoa_r+0x65c>
 80127d6:	e716      	b.n	8012606 <_dtoa_r+0x48a>
 80127d8:	9b08      	ldr	r3, [sp, #32]
 80127da:	001a      	movs	r2, r3
 80127dc:	3a01      	subs	r2, #1
 80127de:	9208      	str	r2, [sp, #32]
 80127e0:	7812      	ldrb	r2, [r2, #0]
 80127e2:	2a30      	cmp	r2, #48	; 0x30
 80127e4:	d0f8      	beq.n	80127d8 <_dtoa_r+0x65c>
 80127e6:	9308      	str	r3, [sp, #32]
 80127e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80127ea:	9303      	str	r3, [sp, #12]
 80127ec:	e046      	b.n	801287c <_dtoa_r+0x700>
 80127ee:	2200      	movs	r2, #0
 80127f0:	4b2e      	ldr	r3, [pc, #184]	; (80128ac <_dtoa_r+0x730>)
 80127f2:	f7f2 fe1f 	bl	8005434 <__aeabi_dmul>
 80127f6:	0006      	movs	r6, r0
 80127f8:	000f      	movs	r7, r1
 80127fa:	e7b2      	b.n	8012762 <_dtoa_r+0x5e6>
 80127fc:	9b06      	ldr	r3, [sp, #24]
 80127fe:	9a06      	ldr	r2, [sp, #24]
 8012800:	930a      	str	r3, [sp, #40]	; 0x28
 8012802:	9b07      	ldr	r3, [sp, #28]
 8012804:	9c08      	ldr	r4, [sp, #32]
 8012806:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8012808:	3b01      	subs	r3, #1
 801280a:	189b      	adds	r3, r3, r2
 801280c:	930b      	str	r3, [sp, #44]	; 0x2c
 801280e:	0032      	movs	r2, r6
 8012810:	003b      	movs	r3, r7
 8012812:	0020      	movs	r0, r4
 8012814:	0029      	movs	r1, r5
 8012816:	f7f2 fa13 	bl	8004c40 <__aeabi_ddiv>
 801281a:	f7f3 fc6d 	bl	80060f8 <__aeabi_d2iz>
 801281e:	9007      	str	r0, [sp, #28]
 8012820:	f7f3 fca0 	bl	8006164 <__aeabi_i2d>
 8012824:	0032      	movs	r2, r6
 8012826:	003b      	movs	r3, r7
 8012828:	f7f2 fe04 	bl	8005434 <__aeabi_dmul>
 801282c:	0002      	movs	r2, r0
 801282e:	000b      	movs	r3, r1
 8012830:	0020      	movs	r0, r4
 8012832:	0029      	movs	r1, r5
 8012834:	f7f3 f8c0 	bl	80059b8 <__aeabi_dsub>
 8012838:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801283a:	001a      	movs	r2, r3
 801283c:	3201      	adds	r2, #1
 801283e:	920a      	str	r2, [sp, #40]	; 0x28
 8012840:	9208      	str	r2, [sp, #32]
 8012842:	9a07      	ldr	r2, [sp, #28]
 8012844:	3230      	adds	r2, #48	; 0x30
 8012846:	701a      	strb	r2, [r3, #0]
 8012848:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801284a:	429a      	cmp	r2, r3
 801284c:	d14f      	bne.n	80128ee <_dtoa_r+0x772>
 801284e:	0002      	movs	r2, r0
 8012850:	000b      	movs	r3, r1
 8012852:	f7f1 fe95 	bl	8004580 <__aeabi_dadd>
 8012856:	0032      	movs	r2, r6
 8012858:	003b      	movs	r3, r7
 801285a:	0004      	movs	r4, r0
 801285c:	000d      	movs	r5, r1
 801285e:	f7f0 fdb5 	bl	80033cc <__aeabi_dcmpgt>
 8012862:	2800      	cmp	r0, #0
 8012864:	d12e      	bne.n	80128c4 <_dtoa_r+0x748>
 8012866:	0032      	movs	r2, r6
 8012868:	003b      	movs	r3, r7
 801286a:	0020      	movs	r0, r4
 801286c:	0029      	movs	r1, r5
 801286e:	f7f0 fd93 	bl	8003398 <__aeabi_dcmpeq>
 8012872:	2800      	cmp	r0, #0
 8012874:	d002      	beq.n	801287c <_dtoa_r+0x700>
 8012876:	9b07      	ldr	r3, [sp, #28]
 8012878:	07de      	lsls	r6, r3, #31
 801287a:	d423      	bmi.n	80128c4 <_dtoa_r+0x748>
 801287c:	9905      	ldr	r1, [sp, #20]
 801287e:	9804      	ldr	r0, [sp, #16]
 8012880:	f000 fbd6 	bl	8013030 <_Bfree>
 8012884:	2300      	movs	r3, #0
 8012886:	9a08      	ldr	r2, [sp, #32]
 8012888:	7013      	strb	r3, [r2, #0]
 801288a:	9b03      	ldr	r3, [sp, #12]
 801288c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801288e:	3301      	adds	r3, #1
 8012890:	6013      	str	r3, [r2, #0]
 8012892:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8012894:	2b00      	cmp	r3, #0
 8012896:	d100      	bne.n	801289a <_dtoa_r+0x71e>
 8012898:	e4ba      	b.n	8012210 <_dtoa_r+0x94>
 801289a:	9a08      	ldr	r2, [sp, #32]
 801289c:	601a      	str	r2, [r3, #0]
 801289e:	e4b7      	b.n	8012210 <_dtoa_r+0x94>
 80128a0:	08016c68 	.word	0x08016c68
 80128a4:	08016c40 	.word	0x08016c40
 80128a8:	3ff00000 	.word	0x3ff00000
 80128ac:	40240000 	.word	0x40240000
 80128b0:	401c0000 	.word	0x401c0000
 80128b4:	fcc00000 	.word	0xfcc00000
 80128b8:	40140000 	.word	0x40140000
 80128bc:	7cc00000 	.word	0x7cc00000
 80128c0:	3fe00000 	.word	0x3fe00000
 80128c4:	9b03      	ldr	r3, [sp, #12]
 80128c6:	930e      	str	r3, [sp, #56]	; 0x38
 80128c8:	9b08      	ldr	r3, [sp, #32]
 80128ca:	9308      	str	r3, [sp, #32]
 80128cc:	3b01      	subs	r3, #1
 80128ce:	781a      	ldrb	r2, [r3, #0]
 80128d0:	2a39      	cmp	r2, #57	; 0x39
 80128d2:	d108      	bne.n	80128e6 <_dtoa_r+0x76a>
 80128d4:	9a06      	ldr	r2, [sp, #24]
 80128d6:	429a      	cmp	r2, r3
 80128d8:	d1f7      	bne.n	80128ca <_dtoa_r+0x74e>
 80128da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80128dc:	9906      	ldr	r1, [sp, #24]
 80128de:	3201      	adds	r2, #1
 80128e0:	920e      	str	r2, [sp, #56]	; 0x38
 80128e2:	2230      	movs	r2, #48	; 0x30
 80128e4:	700a      	strb	r2, [r1, #0]
 80128e6:	781a      	ldrb	r2, [r3, #0]
 80128e8:	3201      	adds	r2, #1
 80128ea:	701a      	strb	r2, [r3, #0]
 80128ec:	e77c      	b.n	80127e8 <_dtoa_r+0x66c>
 80128ee:	2200      	movs	r2, #0
 80128f0:	4ba9      	ldr	r3, [pc, #676]	; (8012b98 <_dtoa_r+0xa1c>)
 80128f2:	f7f2 fd9f 	bl	8005434 <__aeabi_dmul>
 80128f6:	2200      	movs	r2, #0
 80128f8:	2300      	movs	r3, #0
 80128fa:	0004      	movs	r4, r0
 80128fc:	000d      	movs	r5, r1
 80128fe:	f7f0 fd4b 	bl	8003398 <__aeabi_dcmpeq>
 8012902:	2800      	cmp	r0, #0
 8012904:	d100      	bne.n	8012908 <_dtoa_r+0x78c>
 8012906:	e782      	b.n	801280e <_dtoa_r+0x692>
 8012908:	e7b8      	b.n	801287c <_dtoa_r+0x700>
 801290a:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801290c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801290e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8012910:	2f00      	cmp	r7, #0
 8012912:	d012      	beq.n	801293a <_dtoa_r+0x7be>
 8012914:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8012916:	2a01      	cmp	r2, #1
 8012918:	dc6e      	bgt.n	80129f8 <_dtoa_r+0x87c>
 801291a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801291c:	2a00      	cmp	r2, #0
 801291e:	d065      	beq.n	80129ec <_dtoa_r+0x870>
 8012920:	4a9e      	ldr	r2, [pc, #632]	; (8012b9c <_dtoa_r+0xa20>)
 8012922:	189b      	adds	r3, r3, r2
 8012924:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012926:	2101      	movs	r1, #1
 8012928:	18d2      	adds	r2, r2, r3
 801292a:	920a      	str	r2, [sp, #40]	; 0x28
 801292c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801292e:	9804      	ldr	r0, [sp, #16]
 8012930:	18d3      	adds	r3, r2, r3
 8012932:	930c      	str	r3, [sp, #48]	; 0x30
 8012934:	f000 fc78 	bl	8013228 <__i2b>
 8012938:	0007      	movs	r7, r0
 801293a:	2c00      	cmp	r4, #0
 801293c:	d00e      	beq.n	801295c <_dtoa_r+0x7e0>
 801293e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012940:	2b00      	cmp	r3, #0
 8012942:	dd0b      	ble.n	801295c <_dtoa_r+0x7e0>
 8012944:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012946:	0023      	movs	r3, r4
 8012948:	4294      	cmp	r4, r2
 801294a:	dd00      	ble.n	801294e <_dtoa_r+0x7d2>
 801294c:	0013      	movs	r3, r2
 801294e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012950:	1ae4      	subs	r4, r4, r3
 8012952:	1ad2      	subs	r2, r2, r3
 8012954:	920a      	str	r2, [sp, #40]	; 0x28
 8012956:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012958:	1ad3      	subs	r3, r2, r3
 801295a:	930c      	str	r3, [sp, #48]	; 0x30
 801295c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801295e:	2b00      	cmp	r3, #0
 8012960:	d01e      	beq.n	80129a0 <_dtoa_r+0x824>
 8012962:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012964:	2b00      	cmp	r3, #0
 8012966:	d05c      	beq.n	8012a22 <_dtoa_r+0x8a6>
 8012968:	2d00      	cmp	r5, #0
 801296a:	dd10      	ble.n	801298e <_dtoa_r+0x812>
 801296c:	0039      	movs	r1, r7
 801296e:	002a      	movs	r2, r5
 8012970:	9804      	ldr	r0, [sp, #16]
 8012972:	f000 fd21 	bl	80133b8 <__pow5mult>
 8012976:	9a05      	ldr	r2, [sp, #20]
 8012978:	0001      	movs	r1, r0
 801297a:	0007      	movs	r7, r0
 801297c:	9804      	ldr	r0, [sp, #16]
 801297e:	f000 fc6b 	bl	8013258 <__multiply>
 8012982:	0006      	movs	r6, r0
 8012984:	9905      	ldr	r1, [sp, #20]
 8012986:	9804      	ldr	r0, [sp, #16]
 8012988:	f000 fb52 	bl	8013030 <_Bfree>
 801298c:	9605      	str	r6, [sp, #20]
 801298e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012990:	1b5a      	subs	r2, r3, r5
 8012992:	42ab      	cmp	r3, r5
 8012994:	d004      	beq.n	80129a0 <_dtoa_r+0x824>
 8012996:	9905      	ldr	r1, [sp, #20]
 8012998:	9804      	ldr	r0, [sp, #16]
 801299a:	f000 fd0d 	bl	80133b8 <__pow5mult>
 801299e:	9005      	str	r0, [sp, #20]
 80129a0:	2101      	movs	r1, #1
 80129a2:	9804      	ldr	r0, [sp, #16]
 80129a4:	f000 fc40 	bl	8013228 <__i2b>
 80129a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80129aa:	0006      	movs	r6, r0
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	dd3a      	ble.n	8012a26 <_dtoa_r+0x8aa>
 80129b0:	001a      	movs	r2, r3
 80129b2:	0001      	movs	r1, r0
 80129b4:	9804      	ldr	r0, [sp, #16]
 80129b6:	f000 fcff 	bl	80133b8 <__pow5mult>
 80129ba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80129bc:	0006      	movs	r6, r0
 80129be:	2500      	movs	r5, #0
 80129c0:	2b01      	cmp	r3, #1
 80129c2:	dc38      	bgt.n	8012a36 <_dtoa_r+0x8ba>
 80129c4:	2500      	movs	r5, #0
 80129c6:	9b08      	ldr	r3, [sp, #32]
 80129c8:	42ab      	cmp	r3, r5
 80129ca:	d130      	bne.n	8012a2e <_dtoa_r+0x8b2>
 80129cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80129ce:	031b      	lsls	r3, r3, #12
 80129d0:	42ab      	cmp	r3, r5
 80129d2:	d12c      	bne.n	8012a2e <_dtoa_r+0x8b2>
 80129d4:	4b72      	ldr	r3, [pc, #456]	; (8012ba0 <_dtoa_r+0xa24>)
 80129d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80129d8:	4213      	tst	r3, r2
 80129da:	d028      	beq.n	8012a2e <_dtoa_r+0x8b2>
 80129dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80129de:	3501      	adds	r5, #1
 80129e0:	3301      	adds	r3, #1
 80129e2:	930a      	str	r3, [sp, #40]	; 0x28
 80129e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80129e6:	3301      	adds	r3, #1
 80129e8:	930c      	str	r3, [sp, #48]	; 0x30
 80129ea:	e020      	b.n	8012a2e <_dtoa_r+0x8b2>
 80129ec:	2336      	movs	r3, #54	; 0x36
 80129ee:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80129f0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80129f2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80129f4:	1a9b      	subs	r3, r3, r2
 80129f6:	e795      	b.n	8012924 <_dtoa_r+0x7a8>
 80129f8:	9b07      	ldr	r3, [sp, #28]
 80129fa:	1e5d      	subs	r5, r3, #1
 80129fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80129fe:	42ab      	cmp	r3, r5
 8012a00:	db07      	blt.n	8012a12 <_dtoa_r+0x896>
 8012a02:	1b5d      	subs	r5, r3, r5
 8012a04:	9b07      	ldr	r3, [sp, #28]
 8012a06:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	da8b      	bge.n	8012924 <_dtoa_r+0x7a8>
 8012a0c:	1ae4      	subs	r4, r4, r3
 8012a0e:	2300      	movs	r3, #0
 8012a10:	e788      	b.n	8012924 <_dtoa_r+0x7a8>
 8012a12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012a14:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8012a16:	1aeb      	subs	r3, r5, r3
 8012a18:	18d3      	adds	r3, r2, r3
 8012a1a:	950d      	str	r5, [sp, #52]	; 0x34
 8012a1c:	9313      	str	r3, [sp, #76]	; 0x4c
 8012a1e:	2500      	movs	r5, #0
 8012a20:	e7f0      	b.n	8012a04 <_dtoa_r+0x888>
 8012a22:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012a24:	e7b7      	b.n	8012996 <_dtoa_r+0x81a>
 8012a26:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012a28:	2500      	movs	r5, #0
 8012a2a:	2b01      	cmp	r3, #1
 8012a2c:	ddca      	ble.n	80129c4 <_dtoa_r+0x848>
 8012a2e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012a30:	2001      	movs	r0, #1
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	d008      	beq.n	8012a48 <_dtoa_r+0x8cc>
 8012a36:	6933      	ldr	r3, [r6, #16]
 8012a38:	3303      	adds	r3, #3
 8012a3a:	009b      	lsls	r3, r3, #2
 8012a3c:	18f3      	adds	r3, r6, r3
 8012a3e:	6858      	ldr	r0, [r3, #4]
 8012a40:	f000 fbaa 	bl	8013198 <__hi0bits>
 8012a44:	2320      	movs	r3, #32
 8012a46:	1a18      	subs	r0, r3, r0
 8012a48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012a4a:	1818      	adds	r0, r3, r0
 8012a4c:	0002      	movs	r2, r0
 8012a4e:	231f      	movs	r3, #31
 8012a50:	401a      	ands	r2, r3
 8012a52:	4218      	tst	r0, r3
 8012a54:	d047      	beq.n	8012ae6 <_dtoa_r+0x96a>
 8012a56:	3301      	adds	r3, #1
 8012a58:	1a9b      	subs	r3, r3, r2
 8012a5a:	2b04      	cmp	r3, #4
 8012a5c:	dd3f      	ble.n	8012ade <_dtoa_r+0x962>
 8012a5e:	231c      	movs	r3, #28
 8012a60:	1a9b      	subs	r3, r3, r2
 8012a62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012a64:	18e4      	adds	r4, r4, r3
 8012a66:	18d2      	adds	r2, r2, r3
 8012a68:	920a      	str	r2, [sp, #40]	; 0x28
 8012a6a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012a6c:	18d3      	adds	r3, r2, r3
 8012a6e:	930c      	str	r3, [sp, #48]	; 0x30
 8012a70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012a72:	2b00      	cmp	r3, #0
 8012a74:	dd05      	ble.n	8012a82 <_dtoa_r+0x906>
 8012a76:	001a      	movs	r2, r3
 8012a78:	9905      	ldr	r1, [sp, #20]
 8012a7a:	9804      	ldr	r0, [sp, #16]
 8012a7c:	f000 fcf8 	bl	8013470 <__lshift>
 8012a80:	9005      	str	r0, [sp, #20]
 8012a82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	dd05      	ble.n	8012a94 <_dtoa_r+0x918>
 8012a88:	0031      	movs	r1, r6
 8012a8a:	001a      	movs	r2, r3
 8012a8c:	9804      	ldr	r0, [sp, #16]
 8012a8e:	f000 fcef 	bl	8013470 <__lshift>
 8012a92:	0006      	movs	r6, r0
 8012a94:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	d027      	beq.n	8012aea <_dtoa_r+0x96e>
 8012a9a:	0031      	movs	r1, r6
 8012a9c:	9805      	ldr	r0, [sp, #20]
 8012a9e:	f000 fd55 	bl	801354c <__mcmp>
 8012aa2:	2800      	cmp	r0, #0
 8012aa4:	da21      	bge.n	8012aea <_dtoa_r+0x96e>
 8012aa6:	9b03      	ldr	r3, [sp, #12]
 8012aa8:	220a      	movs	r2, #10
 8012aaa:	3b01      	subs	r3, #1
 8012aac:	9303      	str	r3, [sp, #12]
 8012aae:	9905      	ldr	r1, [sp, #20]
 8012ab0:	2300      	movs	r3, #0
 8012ab2:	9804      	ldr	r0, [sp, #16]
 8012ab4:	f000 fae0 	bl	8013078 <__multadd>
 8012ab8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012aba:	9005      	str	r0, [sp, #20]
 8012abc:	2b00      	cmp	r3, #0
 8012abe:	d100      	bne.n	8012ac2 <_dtoa_r+0x946>
 8012ac0:	e15d      	b.n	8012d7e <_dtoa_r+0xc02>
 8012ac2:	2300      	movs	r3, #0
 8012ac4:	0039      	movs	r1, r7
 8012ac6:	220a      	movs	r2, #10
 8012ac8:	9804      	ldr	r0, [sp, #16]
 8012aca:	f000 fad5 	bl	8013078 <__multadd>
 8012ace:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012ad0:	0007      	movs	r7, r0
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	dc49      	bgt.n	8012b6a <_dtoa_r+0x9ee>
 8012ad6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012ad8:	2b02      	cmp	r3, #2
 8012ada:	dc0e      	bgt.n	8012afa <_dtoa_r+0x97e>
 8012adc:	e045      	b.n	8012b6a <_dtoa_r+0x9ee>
 8012ade:	2b04      	cmp	r3, #4
 8012ae0:	d0c6      	beq.n	8012a70 <_dtoa_r+0x8f4>
 8012ae2:	331c      	adds	r3, #28
 8012ae4:	e7bd      	b.n	8012a62 <_dtoa_r+0x8e6>
 8012ae6:	0013      	movs	r3, r2
 8012ae8:	e7fb      	b.n	8012ae2 <_dtoa_r+0x966>
 8012aea:	9b07      	ldr	r3, [sp, #28]
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	dc36      	bgt.n	8012b5e <_dtoa_r+0x9e2>
 8012af0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012af2:	2b02      	cmp	r3, #2
 8012af4:	dd33      	ble.n	8012b5e <_dtoa_r+0x9e2>
 8012af6:	9b07      	ldr	r3, [sp, #28]
 8012af8:	930b      	str	r3, [sp, #44]	; 0x2c
 8012afa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	d10c      	bne.n	8012b1a <_dtoa_r+0x99e>
 8012b00:	0031      	movs	r1, r6
 8012b02:	2205      	movs	r2, #5
 8012b04:	9804      	ldr	r0, [sp, #16]
 8012b06:	f000 fab7 	bl	8013078 <__multadd>
 8012b0a:	0006      	movs	r6, r0
 8012b0c:	0001      	movs	r1, r0
 8012b0e:	9805      	ldr	r0, [sp, #20]
 8012b10:	f000 fd1c 	bl	801354c <__mcmp>
 8012b14:	2800      	cmp	r0, #0
 8012b16:	dd00      	ble.n	8012b1a <_dtoa_r+0x99e>
 8012b18:	e59f      	b.n	801265a <_dtoa_r+0x4de>
 8012b1a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8012b1c:	43db      	mvns	r3, r3
 8012b1e:	9303      	str	r3, [sp, #12]
 8012b20:	9b06      	ldr	r3, [sp, #24]
 8012b22:	9308      	str	r3, [sp, #32]
 8012b24:	2500      	movs	r5, #0
 8012b26:	0031      	movs	r1, r6
 8012b28:	9804      	ldr	r0, [sp, #16]
 8012b2a:	f000 fa81 	bl	8013030 <_Bfree>
 8012b2e:	2f00      	cmp	r7, #0
 8012b30:	d100      	bne.n	8012b34 <_dtoa_r+0x9b8>
 8012b32:	e6a3      	b.n	801287c <_dtoa_r+0x700>
 8012b34:	2d00      	cmp	r5, #0
 8012b36:	d005      	beq.n	8012b44 <_dtoa_r+0x9c8>
 8012b38:	42bd      	cmp	r5, r7
 8012b3a:	d003      	beq.n	8012b44 <_dtoa_r+0x9c8>
 8012b3c:	0029      	movs	r1, r5
 8012b3e:	9804      	ldr	r0, [sp, #16]
 8012b40:	f000 fa76 	bl	8013030 <_Bfree>
 8012b44:	0039      	movs	r1, r7
 8012b46:	9804      	ldr	r0, [sp, #16]
 8012b48:	f000 fa72 	bl	8013030 <_Bfree>
 8012b4c:	e696      	b.n	801287c <_dtoa_r+0x700>
 8012b4e:	2600      	movs	r6, #0
 8012b50:	0037      	movs	r7, r6
 8012b52:	e7e2      	b.n	8012b1a <_dtoa_r+0x99e>
 8012b54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012b56:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8012b58:	9303      	str	r3, [sp, #12]
 8012b5a:	0037      	movs	r7, r6
 8012b5c:	e57d      	b.n	801265a <_dtoa_r+0x4de>
 8012b5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012b60:	2b00      	cmp	r3, #0
 8012b62:	d100      	bne.n	8012b66 <_dtoa_r+0x9ea>
 8012b64:	e0c3      	b.n	8012cee <_dtoa_r+0xb72>
 8012b66:	9b07      	ldr	r3, [sp, #28]
 8012b68:	930b      	str	r3, [sp, #44]	; 0x2c
 8012b6a:	2c00      	cmp	r4, #0
 8012b6c:	dd05      	ble.n	8012b7a <_dtoa_r+0x9fe>
 8012b6e:	0039      	movs	r1, r7
 8012b70:	0022      	movs	r2, r4
 8012b72:	9804      	ldr	r0, [sp, #16]
 8012b74:	f000 fc7c 	bl	8013470 <__lshift>
 8012b78:	0007      	movs	r7, r0
 8012b7a:	0038      	movs	r0, r7
 8012b7c:	2d00      	cmp	r5, #0
 8012b7e:	d024      	beq.n	8012bca <_dtoa_r+0xa4e>
 8012b80:	6879      	ldr	r1, [r7, #4]
 8012b82:	9804      	ldr	r0, [sp, #16]
 8012b84:	f000 fa10 	bl	8012fa8 <_Balloc>
 8012b88:	1e04      	subs	r4, r0, #0
 8012b8a:	d111      	bne.n	8012bb0 <_dtoa_r+0xa34>
 8012b8c:	0022      	movs	r2, r4
 8012b8e:	4b05      	ldr	r3, [pc, #20]	; (8012ba4 <_dtoa_r+0xa28>)
 8012b90:	4805      	ldr	r0, [pc, #20]	; (8012ba8 <_dtoa_r+0xa2c>)
 8012b92:	4906      	ldr	r1, [pc, #24]	; (8012bac <_dtoa_r+0xa30>)
 8012b94:	f7ff fb07 	bl	80121a6 <_dtoa_r+0x2a>
 8012b98:	40240000 	.word	0x40240000
 8012b9c:	00000433 	.word	0x00000433
 8012ba0:	7ff00000 	.word	0x7ff00000
 8012ba4:	08016bd1 	.word	0x08016bd1
 8012ba8:	08016b79 	.word	0x08016b79
 8012bac:	000002ef 	.word	0x000002ef
 8012bb0:	0039      	movs	r1, r7
 8012bb2:	693a      	ldr	r2, [r7, #16]
 8012bb4:	310c      	adds	r1, #12
 8012bb6:	3202      	adds	r2, #2
 8012bb8:	0092      	lsls	r2, r2, #2
 8012bba:	300c      	adds	r0, #12
 8012bbc:	f7ff fa46 	bl	801204c <memcpy>
 8012bc0:	2201      	movs	r2, #1
 8012bc2:	0021      	movs	r1, r4
 8012bc4:	9804      	ldr	r0, [sp, #16]
 8012bc6:	f000 fc53 	bl	8013470 <__lshift>
 8012bca:	9b06      	ldr	r3, [sp, #24]
 8012bcc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012bce:	9307      	str	r3, [sp, #28]
 8012bd0:	3b01      	subs	r3, #1
 8012bd2:	189b      	adds	r3, r3, r2
 8012bd4:	2201      	movs	r2, #1
 8012bd6:	003d      	movs	r5, r7
 8012bd8:	0007      	movs	r7, r0
 8012bda:	930e      	str	r3, [sp, #56]	; 0x38
 8012bdc:	9b08      	ldr	r3, [sp, #32]
 8012bde:	4013      	ands	r3, r2
 8012be0:	930d      	str	r3, [sp, #52]	; 0x34
 8012be2:	0031      	movs	r1, r6
 8012be4:	9805      	ldr	r0, [sp, #20]
 8012be6:	f7ff fa3a 	bl	801205e <quorem>
 8012bea:	0029      	movs	r1, r5
 8012bec:	0004      	movs	r4, r0
 8012bee:	900b      	str	r0, [sp, #44]	; 0x2c
 8012bf0:	9805      	ldr	r0, [sp, #20]
 8012bf2:	f000 fcab 	bl	801354c <__mcmp>
 8012bf6:	003a      	movs	r2, r7
 8012bf8:	900c      	str	r0, [sp, #48]	; 0x30
 8012bfa:	0031      	movs	r1, r6
 8012bfc:	9804      	ldr	r0, [sp, #16]
 8012bfe:	f000 fcc1 	bl	8013584 <__mdiff>
 8012c02:	2201      	movs	r2, #1
 8012c04:	68c3      	ldr	r3, [r0, #12]
 8012c06:	3430      	adds	r4, #48	; 0x30
 8012c08:	9008      	str	r0, [sp, #32]
 8012c0a:	920a      	str	r2, [sp, #40]	; 0x28
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	d104      	bne.n	8012c1a <_dtoa_r+0xa9e>
 8012c10:	0001      	movs	r1, r0
 8012c12:	9805      	ldr	r0, [sp, #20]
 8012c14:	f000 fc9a 	bl	801354c <__mcmp>
 8012c18:	900a      	str	r0, [sp, #40]	; 0x28
 8012c1a:	9908      	ldr	r1, [sp, #32]
 8012c1c:	9804      	ldr	r0, [sp, #16]
 8012c1e:	f000 fa07 	bl	8013030 <_Bfree>
 8012c22:	9b07      	ldr	r3, [sp, #28]
 8012c24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012c26:	3301      	adds	r3, #1
 8012c28:	9308      	str	r3, [sp, #32]
 8012c2a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012c2c:	4313      	orrs	r3, r2
 8012c2e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012c30:	4313      	orrs	r3, r2
 8012c32:	d109      	bne.n	8012c48 <_dtoa_r+0xacc>
 8012c34:	2c39      	cmp	r4, #57	; 0x39
 8012c36:	d022      	beq.n	8012c7e <_dtoa_r+0xb02>
 8012c38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012c3a:	2b00      	cmp	r3, #0
 8012c3c:	dd01      	ble.n	8012c42 <_dtoa_r+0xac6>
 8012c3e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8012c40:	3431      	adds	r4, #49	; 0x31
 8012c42:	9b07      	ldr	r3, [sp, #28]
 8012c44:	701c      	strb	r4, [r3, #0]
 8012c46:	e76e      	b.n	8012b26 <_dtoa_r+0x9aa>
 8012c48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012c4a:	2b00      	cmp	r3, #0
 8012c4c:	db04      	blt.n	8012c58 <_dtoa_r+0xadc>
 8012c4e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8012c50:	4313      	orrs	r3, r2
 8012c52:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012c54:	4313      	orrs	r3, r2
 8012c56:	d11e      	bne.n	8012c96 <_dtoa_r+0xb1a>
 8012c58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	ddf1      	ble.n	8012c42 <_dtoa_r+0xac6>
 8012c5e:	9905      	ldr	r1, [sp, #20]
 8012c60:	2201      	movs	r2, #1
 8012c62:	9804      	ldr	r0, [sp, #16]
 8012c64:	f000 fc04 	bl	8013470 <__lshift>
 8012c68:	0031      	movs	r1, r6
 8012c6a:	9005      	str	r0, [sp, #20]
 8012c6c:	f000 fc6e 	bl	801354c <__mcmp>
 8012c70:	2800      	cmp	r0, #0
 8012c72:	dc02      	bgt.n	8012c7a <_dtoa_r+0xafe>
 8012c74:	d1e5      	bne.n	8012c42 <_dtoa_r+0xac6>
 8012c76:	07e3      	lsls	r3, r4, #31
 8012c78:	d5e3      	bpl.n	8012c42 <_dtoa_r+0xac6>
 8012c7a:	2c39      	cmp	r4, #57	; 0x39
 8012c7c:	d1df      	bne.n	8012c3e <_dtoa_r+0xac2>
 8012c7e:	2339      	movs	r3, #57	; 0x39
 8012c80:	9a07      	ldr	r2, [sp, #28]
 8012c82:	7013      	strb	r3, [r2, #0]
 8012c84:	9b08      	ldr	r3, [sp, #32]
 8012c86:	9308      	str	r3, [sp, #32]
 8012c88:	3b01      	subs	r3, #1
 8012c8a:	781a      	ldrb	r2, [r3, #0]
 8012c8c:	2a39      	cmp	r2, #57	; 0x39
 8012c8e:	d063      	beq.n	8012d58 <_dtoa_r+0xbdc>
 8012c90:	3201      	adds	r2, #1
 8012c92:	701a      	strb	r2, [r3, #0]
 8012c94:	e747      	b.n	8012b26 <_dtoa_r+0x9aa>
 8012c96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	dd03      	ble.n	8012ca4 <_dtoa_r+0xb28>
 8012c9c:	2c39      	cmp	r4, #57	; 0x39
 8012c9e:	d0ee      	beq.n	8012c7e <_dtoa_r+0xb02>
 8012ca0:	3401      	adds	r4, #1
 8012ca2:	e7ce      	b.n	8012c42 <_dtoa_r+0xac6>
 8012ca4:	9b07      	ldr	r3, [sp, #28]
 8012ca6:	9a07      	ldr	r2, [sp, #28]
 8012ca8:	701c      	strb	r4, [r3, #0]
 8012caa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012cac:	4293      	cmp	r3, r2
 8012cae:	d03e      	beq.n	8012d2e <_dtoa_r+0xbb2>
 8012cb0:	2300      	movs	r3, #0
 8012cb2:	220a      	movs	r2, #10
 8012cb4:	9905      	ldr	r1, [sp, #20]
 8012cb6:	9804      	ldr	r0, [sp, #16]
 8012cb8:	f000 f9de 	bl	8013078 <__multadd>
 8012cbc:	2300      	movs	r3, #0
 8012cbe:	9005      	str	r0, [sp, #20]
 8012cc0:	220a      	movs	r2, #10
 8012cc2:	0029      	movs	r1, r5
 8012cc4:	9804      	ldr	r0, [sp, #16]
 8012cc6:	42bd      	cmp	r5, r7
 8012cc8:	d106      	bne.n	8012cd8 <_dtoa_r+0xb5c>
 8012cca:	f000 f9d5 	bl	8013078 <__multadd>
 8012cce:	0005      	movs	r5, r0
 8012cd0:	0007      	movs	r7, r0
 8012cd2:	9b08      	ldr	r3, [sp, #32]
 8012cd4:	9307      	str	r3, [sp, #28]
 8012cd6:	e784      	b.n	8012be2 <_dtoa_r+0xa66>
 8012cd8:	f000 f9ce 	bl	8013078 <__multadd>
 8012cdc:	0039      	movs	r1, r7
 8012cde:	0005      	movs	r5, r0
 8012ce0:	2300      	movs	r3, #0
 8012ce2:	220a      	movs	r2, #10
 8012ce4:	9804      	ldr	r0, [sp, #16]
 8012ce6:	f000 f9c7 	bl	8013078 <__multadd>
 8012cea:	0007      	movs	r7, r0
 8012cec:	e7f1      	b.n	8012cd2 <_dtoa_r+0xb56>
 8012cee:	9b07      	ldr	r3, [sp, #28]
 8012cf0:	930b      	str	r3, [sp, #44]	; 0x2c
 8012cf2:	2500      	movs	r5, #0
 8012cf4:	0031      	movs	r1, r6
 8012cf6:	9805      	ldr	r0, [sp, #20]
 8012cf8:	f7ff f9b1 	bl	801205e <quorem>
 8012cfc:	9b06      	ldr	r3, [sp, #24]
 8012cfe:	3030      	adds	r0, #48	; 0x30
 8012d00:	5558      	strb	r0, [r3, r5]
 8012d02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012d04:	3501      	adds	r5, #1
 8012d06:	0004      	movs	r4, r0
 8012d08:	42ab      	cmp	r3, r5
 8012d0a:	dd07      	ble.n	8012d1c <_dtoa_r+0xba0>
 8012d0c:	2300      	movs	r3, #0
 8012d0e:	220a      	movs	r2, #10
 8012d10:	9905      	ldr	r1, [sp, #20]
 8012d12:	9804      	ldr	r0, [sp, #16]
 8012d14:	f000 f9b0 	bl	8013078 <__multadd>
 8012d18:	9005      	str	r0, [sp, #20]
 8012d1a:	e7eb      	b.n	8012cf4 <_dtoa_r+0xb78>
 8012d1c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012d1e:	2301      	movs	r3, #1
 8012d20:	2a00      	cmp	r2, #0
 8012d22:	dd00      	ble.n	8012d26 <_dtoa_r+0xbaa>
 8012d24:	0013      	movs	r3, r2
 8012d26:	2500      	movs	r5, #0
 8012d28:	9a06      	ldr	r2, [sp, #24]
 8012d2a:	18d3      	adds	r3, r2, r3
 8012d2c:	9308      	str	r3, [sp, #32]
 8012d2e:	9905      	ldr	r1, [sp, #20]
 8012d30:	2201      	movs	r2, #1
 8012d32:	9804      	ldr	r0, [sp, #16]
 8012d34:	f000 fb9c 	bl	8013470 <__lshift>
 8012d38:	0031      	movs	r1, r6
 8012d3a:	9005      	str	r0, [sp, #20]
 8012d3c:	f000 fc06 	bl	801354c <__mcmp>
 8012d40:	2800      	cmp	r0, #0
 8012d42:	dc9f      	bgt.n	8012c84 <_dtoa_r+0xb08>
 8012d44:	d101      	bne.n	8012d4a <_dtoa_r+0xbce>
 8012d46:	07e4      	lsls	r4, r4, #31
 8012d48:	d49c      	bmi.n	8012c84 <_dtoa_r+0xb08>
 8012d4a:	9b08      	ldr	r3, [sp, #32]
 8012d4c:	9308      	str	r3, [sp, #32]
 8012d4e:	3b01      	subs	r3, #1
 8012d50:	781a      	ldrb	r2, [r3, #0]
 8012d52:	2a30      	cmp	r2, #48	; 0x30
 8012d54:	d0fa      	beq.n	8012d4c <_dtoa_r+0xbd0>
 8012d56:	e6e6      	b.n	8012b26 <_dtoa_r+0x9aa>
 8012d58:	9a06      	ldr	r2, [sp, #24]
 8012d5a:	429a      	cmp	r2, r3
 8012d5c:	d193      	bne.n	8012c86 <_dtoa_r+0xb0a>
 8012d5e:	9b03      	ldr	r3, [sp, #12]
 8012d60:	3301      	adds	r3, #1
 8012d62:	9303      	str	r3, [sp, #12]
 8012d64:	2331      	movs	r3, #49	; 0x31
 8012d66:	7013      	strb	r3, [r2, #0]
 8012d68:	e6dd      	b.n	8012b26 <_dtoa_r+0x9aa>
 8012d6a:	4b09      	ldr	r3, [pc, #36]	; (8012d90 <_dtoa_r+0xc14>)
 8012d6c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8012d6e:	9306      	str	r3, [sp, #24]
 8012d70:	4b08      	ldr	r3, [pc, #32]	; (8012d94 <_dtoa_r+0xc18>)
 8012d72:	2a00      	cmp	r2, #0
 8012d74:	d001      	beq.n	8012d7a <_dtoa_r+0xbfe>
 8012d76:	f7ff fa49 	bl	801220c <_dtoa_r+0x90>
 8012d7a:	f7ff fa49 	bl	8012210 <_dtoa_r+0x94>
 8012d7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012d80:	2b00      	cmp	r3, #0
 8012d82:	dcb6      	bgt.n	8012cf2 <_dtoa_r+0xb76>
 8012d84:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012d86:	2b02      	cmp	r3, #2
 8012d88:	dd00      	ble.n	8012d8c <_dtoa_r+0xc10>
 8012d8a:	e6b6      	b.n	8012afa <_dtoa_r+0x97e>
 8012d8c:	e7b1      	b.n	8012cf2 <_dtoa_r+0xb76>
 8012d8e:	46c0      	nop			; (mov r8, r8)
 8012d90:	08016b55 	.word	0x08016b55
 8012d94:	08016b5d 	.word	0x08016b5d

08012d98 <_free_r>:
 8012d98:	b570      	push	{r4, r5, r6, lr}
 8012d9a:	0005      	movs	r5, r0
 8012d9c:	2900      	cmp	r1, #0
 8012d9e:	d010      	beq.n	8012dc2 <_free_r+0x2a>
 8012da0:	1f0c      	subs	r4, r1, #4
 8012da2:	6823      	ldr	r3, [r4, #0]
 8012da4:	2b00      	cmp	r3, #0
 8012da6:	da00      	bge.n	8012daa <_free_r+0x12>
 8012da8:	18e4      	adds	r4, r4, r3
 8012daa:	0028      	movs	r0, r5
 8012dac:	f000 f8ec 	bl	8012f88 <__malloc_lock>
 8012db0:	4a1d      	ldr	r2, [pc, #116]	; (8012e28 <_free_r+0x90>)
 8012db2:	6813      	ldr	r3, [r2, #0]
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	d105      	bne.n	8012dc4 <_free_r+0x2c>
 8012db8:	6063      	str	r3, [r4, #4]
 8012dba:	6014      	str	r4, [r2, #0]
 8012dbc:	0028      	movs	r0, r5
 8012dbe:	f000 f8eb 	bl	8012f98 <__malloc_unlock>
 8012dc2:	bd70      	pop	{r4, r5, r6, pc}
 8012dc4:	42a3      	cmp	r3, r4
 8012dc6:	d908      	bls.n	8012dda <_free_r+0x42>
 8012dc8:	6820      	ldr	r0, [r4, #0]
 8012dca:	1821      	adds	r1, r4, r0
 8012dcc:	428b      	cmp	r3, r1
 8012dce:	d1f3      	bne.n	8012db8 <_free_r+0x20>
 8012dd0:	6819      	ldr	r1, [r3, #0]
 8012dd2:	685b      	ldr	r3, [r3, #4]
 8012dd4:	1809      	adds	r1, r1, r0
 8012dd6:	6021      	str	r1, [r4, #0]
 8012dd8:	e7ee      	b.n	8012db8 <_free_r+0x20>
 8012dda:	001a      	movs	r2, r3
 8012ddc:	685b      	ldr	r3, [r3, #4]
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	d001      	beq.n	8012de6 <_free_r+0x4e>
 8012de2:	42a3      	cmp	r3, r4
 8012de4:	d9f9      	bls.n	8012dda <_free_r+0x42>
 8012de6:	6811      	ldr	r1, [r2, #0]
 8012de8:	1850      	adds	r0, r2, r1
 8012dea:	42a0      	cmp	r0, r4
 8012dec:	d10b      	bne.n	8012e06 <_free_r+0x6e>
 8012dee:	6820      	ldr	r0, [r4, #0]
 8012df0:	1809      	adds	r1, r1, r0
 8012df2:	1850      	adds	r0, r2, r1
 8012df4:	6011      	str	r1, [r2, #0]
 8012df6:	4283      	cmp	r3, r0
 8012df8:	d1e0      	bne.n	8012dbc <_free_r+0x24>
 8012dfa:	6818      	ldr	r0, [r3, #0]
 8012dfc:	685b      	ldr	r3, [r3, #4]
 8012dfe:	1841      	adds	r1, r0, r1
 8012e00:	6011      	str	r1, [r2, #0]
 8012e02:	6053      	str	r3, [r2, #4]
 8012e04:	e7da      	b.n	8012dbc <_free_r+0x24>
 8012e06:	42a0      	cmp	r0, r4
 8012e08:	d902      	bls.n	8012e10 <_free_r+0x78>
 8012e0a:	230c      	movs	r3, #12
 8012e0c:	602b      	str	r3, [r5, #0]
 8012e0e:	e7d5      	b.n	8012dbc <_free_r+0x24>
 8012e10:	6820      	ldr	r0, [r4, #0]
 8012e12:	1821      	adds	r1, r4, r0
 8012e14:	428b      	cmp	r3, r1
 8012e16:	d103      	bne.n	8012e20 <_free_r+0x88>
 8012e18:	6819      	ldr	r1, [r3, #0]
 8012e1a:	685b      	ldr	r3, [r3, #4]
 8012e1c:	1809      	adds	r1, r1, r0
 8012e1e:	6021      	str	r1, [r4, #0]
 8012e20:	6063      	str	r3, [r4, #4]
 8012e22:	6054      	str	r4, [r2, #4]
 8012e24:	e7ca      	b.n	8012dbc <_free_r+0x24>
 8012e26:	46c0      	nop			; (mov r8, r8)
 8012e28:	20000d9c 	.word	0x20000d9c

08012e2c <malloc>:
 8012e2c:	b510      	push	{r4, lr}
 8012e2e:	4b03      	ldr	r3, [pc, #12]	; (8012e3c <malloc+0x10>)
 8012e30:	0001      	movs	r1, r0
 8012e32:	6818      	ldr	r0, [r3, #0]
 8012e34:	f000 f826 	bl	8012e84 <_malloc_r>
 8012e38:	bd10      	pop	{r4, pc}
 8012e3a:	46c0      	nop			; (mov r8, r8)
 8012e3c:	200000b8 	.word	0x200000b8

08012e40 <sbrk_aligned>:
 8012e40:	b570      	push	{r4, r5, r6, lr}
 8012e42:	4e0f      	ldr	r6, [pc, #60]	; (8012e80 <sbrk_aligned+0x40>)
 8012e44:	000d      	movs	r5, r1
 8012e46:	6831      	ldr	r1, [r6, #0]
 8012e48:	0004      	movs	r4, r0
 8012e4a:	2900      	cmp	r1, #0
 8012e4c:	d102      	bne.n	8012e54 <sbrk_aligned+0x14>
 8012e4e:	f002 f813 	bl	8014e78 <_sbrk_r>
 8012e52:	6030      	str	r0, [r6, #0]
 8012e54:	0029      	movs	r1, r5
 8012e56:	0020      	movs	r0, r4
 8012e58:	f002 f80e 	bl	8014e78 <_sbrk_r>
 8012e5c:	1c43      	adds	r3, r0, #1
 8012e5e:	d00a      	beq.n	8012e76 <sbrk_aligned+0x36>
 8012e60:	2303      	movs	r3, #3
 8012e62:	1cc5      	adds	r5, r0, #3
 8012e64:	439d      	bics	r5, r3
 8012e66:	42a8      	cmp	r0, r5
 8012e68:	d007      	beq.n	8012e7a <sbrk_aligned+0x3a>
 8012e6a:	1a29      	subs	r1, r5, r0
 8012e6c:	0020      	movs	r0, r4
 8012e6e:	f002 f803 	bl	8014e78 <_sbrk_r>
 8012e72:	3001      	adds	r0, #1
 8012e74:	d101      	bne.n	8012e7a <sbrk_aligned+0x3a>
 8012e76:	2501      	movs	r5, #1
 8012e78:	426d      	negs	r5, r5
 8012e7a:	0028      	movs	r0, r5
 8012e7c:	bd70      	pop	{r4, r5, r6, pc}
 8012e7e:	46c0      	nop			; (mov r8, r8)
 8012e80:	20000da0 	.word	0x20000da0

08012e84 <_malloc_r>:
 8012e84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012e86:	2203      	movs	r2, #3
 8012e88:	1ccb      	adds	r3, r1, #3
 8012e8a:	4393      	bics	r3, r2
 8012e8c:	3308      	adds	r3, #8
 8012e8e:	0006      	movs	r6, r0
 8012e90:	001f      	movs	r7, r3
 8012e92:	2b0c      	cmp	r3, #12
 8012e94:	d238      	bcs.n	8012f08 <_malloc_r+0x84>
 8012e96:	270c      	movs	r7, #12
 8012e98:	42b9      	cmp	r1, r7
 8012e9a:	d837      	bhi.n	8012f0c <_malloc_r+0x88>
 8012e9c:	0030      	movs	r0, r6
 8012e9e:	f000 f873 	bl	8012f88 <__malloc_lock>
 8012ea2:	4b38      	ldr	r3, [pc, #224]	; (8012f84 <_malloc_r+0x100>)
 8012ea4:	9300      	str	r3, [sp, #0]
 8012ea6:	681b      	ldr	r3, [r3, #0]
 8012ea8:	001c      	movs	r4, r3
 8012eaa:	2c00      	cmp	r4, #0
 8012eac:	d133      	bne.n	8012f16 <_malloc_r+0x92>
 8012eae:	0039      	movs	r1, r7
 8012eb0:	0030      	movs	r0, r6
 8012eb2:	f7ff ffc5 	bl	8012e40 <sbrk_aligned>
 8012eb6:	0004      	movs	r4, r0
 8012eb8:	1c43      	adds	r3, r0, #1
 8012eba:	d15e      	bne.n	8012f7a <_malloc_r+0xf6>
 8012ebc:	9b00      	ldr	r3, [sp, #0]
 8012ebe:	681c      	ldr	r4, [r3, #0]
 8012ec0:	0025      	movs	r5, r4
 8012ec2:	2d00      	cmp	r5, #0
 8012ec4:	d14e      	bne.n	8012f64 <_malloc_r+0xe0>
 8012ec6:	2c00      	cmp	r4, #0
 8012ec8:	d051      	beq.n	8012f6e <_malloc_r+0xea>
 8012eca:	6823      	ldr	r3, [r4, #0]
 8012ecc:	0029      	movs	r1, r5
 8012ece:	18e3      	adds	r3, r4, r3
 8012ed0:	0030      	movs	r0, r6
 8012ed2:	9301      	str	r3, [sp, #4]
 8012ed4:	f001 ffd0 	bl	8014e78 <_sbrk_r>
 8012ed8:	9b01      	ldr	r3, [sp, #4]
 8012eda:	4283      	cmp	r3, r0
 8012edc:	d147      	bne.n	8012f6e <_malloc_r+0xea>
 8012ede:	6823      	ldr	r3, [r4, #0]
 8012ee0:	0030      	movs	r0, r6
 8012ee2:	1aff      	subs	r7, r7, r3
 8012ee4:	0039      	movs	r1, r7
 8012ee6:	f7ff ffab 	bl	8012e40 <sbrk_aligned>
 8012eea:	3001      	adds	r0, #1
 8012eec:	d03f      	beq.n	8012f6e <_malloc_r+0xea>
 8012eee:	6823      	ldr	r3, [r4, #0]
 8012ef0:	19db      	adds	r3, r3, r7
 8012ef2:	6023      	str	r3, [r4, #0]
 8012ef4:	9b00      	ldr	r3, [sp, #0]
 8012ef6:	681b      	ldr	r3, [r3, #0]
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	d040      	beq.n	8012f7e <_malloc_r+0xfa>
 8012efc:	685a      	ldr	r2, [r3, #4]
 8012efe:	42a2      	cmp	r2, r4
 8012f00:	d133      	bne.n	8012f6a <_malloc_r+0xe6>
 8012f02:	2200      	movs	r2, #0
 8012f04:	605a      	str	r2, [r3, #4]
 8012f06:	e014      	b.n	8012f32 <_malloc_r+0xae>
 8012f08:	2b00      	cmp	r3, #0
 8012f0a:	dac5      	bge.n	8012e98 <_malloc_r+0x14>
 8012f0c:	230c      	movs	r3, #12
 8012f0e:	2500      	movs	r5, #0
 8012f10:	6033      	str	r3, [r6, #0]
 8012f12:	0028      	movs	r0, r5
 8012f14:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8012f16:	6821      	ldr	r1, [r4, #0]
 8012f18:	1bc9      	subs	r1, r1, r7
 8012f1a:	d420      	bmi.n	8012f5e <_malloc_r+0xda>
 8012f1c:	290b      	cmp	r1, #11
 8012f1e:	d918      	bls.n	8012f52 <_malloc_r+0xce>
 8012f20:	19e2      	adds	r2, r4, r7
 8012f22:	6027      	str	r7, [r4, #0]
 8012f24:	42a3      	cmp	r3, r4
 8012f26:	d112      	bne.n	8012f4e <_malloc_r+0xca>
 8012f28:	9b00      	ldr	r3, [sp, #0]
 8012f2a:	601a      	str	r2, [r3, #0]
 8012f2c:	6863      	ldr	r3, [r4, #4]
 8012f2e:	6011      	str	r1, [r2, #0]
 8012f30:	6053      	str	r3, [r2, #4]
 8012f32:	0030      	movs	r0, r6
 8012f34:	0025      	movs	r5, r4
 8012f36:	f000 f82f 	bl	8012f98 <__malloc_unlock>
 8012f3a:	2207      	movs	r2, #7
 8012f3c:	350b      	adds	r5, #11
 8012f3e:	1d23      	adds	r3, r4, #4
 8012f40:	4395      	bics	r5, r2
 8012f42:	1aea      	subs	r2, r5, r3
 8012f44:	429d      	cmp	r5, r3
 8012f46:	d0e4      	beq.n	8012f12 <_malloc_r+0x8e>
 8012f48:	1b5b      	subs	r3, r3, r5
 8012f4a:	50a3      	str	r3, [r4, r2]
 8012f4c:	e7e1      	b.n	8012f12 <_malloc_r+0x8e>
 8012f4e:	605a      	str	r2, [r3, #4]
 8012f50:	e7ec      	b.n	8012f2c <_malloc_r+0xa8>
 8012f52:	6862      	ldr	r2, [r4, #4]
 8012f54:	42a3      	cmp	r3, r4
 8012f56:	d1d5      	bne.n	8012f04 <_malloc_r+0x80>
 8012f58:	9b00      	ldr	r3, [sp, #0]
 8012f5a:	601a      	str	r2, [r3, #0]
 8012f5c:	e7e9      	b.n	8012f32 <_malloc_r+0xae>
 8012f5e:	0023      	movs	r3, r4
 8012f60:	6864      	ldr	r4, [r4, #4]
 8012f62:	e7a2      	b.n	8012eaa <_malloc_r+0x26>
 8012f64:	002c      	movs	r4, r5
 8012f66:	686d      	ldr	r5, [r5, #4]
 8012f68:	e7ab      	b.n	8012ec2 <_malloc_r+0x3e>
 8012f6a:	0013      	movs	r3, r2
 8012f6c:	e7c4      	b.n	8012ef8 <_malloc_r+0x74>
 8012f6e:	230c      	movs	r3, #12
 8012f70:	0030      	movs	r0, r6
 8012f72:	6033      	str	r3, [r6, #0]
 8012f74:	f000 f810 	bl	8012f98 <__malloc_unlock>
 8012f78:	e7cb      	b.n	8012f12 <_malloc_r+0x8e>
 8012f7a:	6027      	str	r7, [r4, #0]
 8012f7c:	e7d9      	b.n	8012f32 <_malloc_r+0xae>
 8012f7e:	605b      	str	r3, [r3, #4]
 8012f80:	deff      	udf	#255	; 0xff
 8012f82:	46c0      	nop			; (mov r8, r8)
 8012f84:	20000d9c 	.word	0x20000d9c

08012f88 <__malloc_lock>:
 8012f88:	b510      	push	{r4, lr}
 8012f8a:	4802      	ldr	r0, [pc, #8]	; (8012f94 <__malloc_lock+0xc>)
 8012f8c:	f7ff f851 	bl	8012032 <__retarget_lock_acquire_recursive>
 8012f90:	bd10      	pop	{r4, pc}
 8012f92:	46c0      	nop			; (mov r8, r8)
 8012f94:	20000d98 	.word	0x20000d98

08012f98 <__malloc_unlock>:
 8012f98:	b510      	push	{r4, lr}
 8012f9a:	4802      	ldr	r0, [pc, #8]	; (8012fa4 <__malloc_unlock+0xc>)
 8012f9c:	f7ff f84a 	bl	8012034 <__retarget_lock_release_recursive>
 8012fa0:	bd10      	pop	{r4, pc}
 8012fa2:	46c0      	nop			; (mov r8, r8)
 8012fa4:	20000d98 	.word	0x20000d98

08012fa8 <_Balloc>:
 8012fa8:	b570      	push	{r4, r5, r6, lr}
 8012faa:	69c5      	ldr	r5, [r0, #28]
 8012fac:	0006      	movs	r6, r0
 8012fae:	000c      	movs	r4, r1
 8012fb0:	2d00      	cmp	r5, #0
 8012fb2:	d10e      	bne.n	8012fd2 <_Balloc+0x2a>
 8012fb4:	2010      	movs	r0, #16
 8012fb6:	f7ff ff39 	bl	8012e2c <malloc>
 8012fba:	1e02      	subs	r2, r0, #0
 8012fbc:	61f0      	str	r0, [r6, #28]
 8012fbe:	d104      	bne.n	8012fca <_Balloc+0x22>
 8012fc0:	216b      	movs	r1, #107	; 0x6b
 8012fc2:	4b19      	ldr	r3, [pc, #100]	; (8013028 <_Balloc+0x80>)
 8012fc4:	4819      	ldr	r0, [pc, #100]	; (801302c <_Balloc+0x84>)
 8012fc6:	f001 ff69 	bl	8014e9c <__assert_func>
 8012fca:	6045      	str	r5, [r0, #4]
 8012fcc:	6085      	str	r5, [r0, #8]
 8012fce:	6005      	str	r5, [r0, #0]
 8012fd0:	60c5      	str	r5, [r0, #12]
 8012fd2:	69f5      	ldr	r5, [r6, #28]
 8012fd4:	68eb      	ldr	r3, [r5, #12]
 8012fd6:	2b00      	cmp	r3, #0
 8012fd8:	d013      	beq.n	8013002 <_Balloc+0x5a>
 8012fda:	69f3      	ldr	r3, [r6, #28]
 8012fdc:	00a2      	lsls	r2, r4, #2
 8012fde:	68db      	ldr	r3, [r3, #12]
 8012fe0:	189b      	adds	r3, r3, r2
 8012fe2:	6818      	ldr	r0, [r3, #0]
 8012fe4:	2800      	cmp	r0, #0
 8012fe6:	d118      	bne.n	801301a <_Balloc+0x72>
 8012fe8:	2101      	movs	r1, #1
 8012fea:	000d      	movs	r5, r1
 8012fec:	40a5      	lsls	r5, r4
 8012fee:	1d6a      	adds	r2, r5, #5
 8012ff0:	0030      	movs	r0, r6
 8012ff2:	0092      	lsls	r2, r2, #2
 8012ff4:	f001 ff70 	bl	8014ed8 <_calloc_r>
 8012ff8:	2800      	cmp	r0, #0
 8012ffa:	d00c      	beq.n	8013016 <_Balloc+0x6e>
 8012ffc:	6044      	str	r4, [r0, #4]
 8012ffe:	6085      	str	r5, [r0, #8]
 8013000:	e00d      	b.n	801301e <_Balloc+0x76>
 8013002:	2221      	movs	r2, #33	; 0x21
 8013004:	2104      	movs	r1, #4
 8013006:	0030      	movs	r0, r6
 8013008:	f001 ff66 	bl	8014ed8 <_calloc_r>
 801300c:	69f3      	ldr	r3, [r6, #28]
 801300e:	60e8      	str	r0, [r5, #12]
 8013010:	68db      	ldr	r3, [r3, #12]
 8013012:	2b00      	cmp	r3, #0
 8013014:	d1e1      	bne.n	8012fda <_Balloc+0x32>
 8013016:	2000      	movs	r0, #0
 8013018:	bd70      	pop	{r4, r5, r6, pc}
 801301a:	6802      	ldr	r2, [r0, #0]
 801301c:	601a      	str	r2, [r3, #0]
 801301e:	2300      	movs	r3, #0
 8013020:	6103      	str	r3, [r0, #16]
 8013022:	60c3      	str	r3, [r0, #12]
 8013024:	e7f8      	b.n	8013018 <_Balloc+0x70>
 8013026:	46c0      	nop			; (mov r8, r8)
 8013028:	08016b62 	.word	0x08016b62
 801302c:	08016be2 	.word	0x08016be2

08013030 <_Bfree>:
 8013030:	b570      	push	{r4, r5, r6, lr}
 8013032:	69c6      	ldr	r6, [r0, #28]
 8013034:	0005      	movs	r5, r0
 8013036:	000c      	movs	r4, r1
 8013038:	2e00      	cmp	r6, #0
 801303a:	d10e      	bne.n	801305a <_Bfree+0x2a>
 801303c:	2010      	movs	r0, #16
 801303e:	f7ff fef5 	bl	8012e2c <malloc>
 8013042:	1e02      	subs	r2, r0, #0
 8013044:	61e8      	str	r0, [r5, #28]
 8013046:	d104      	bne.n	8013052 <_Bfree+0x22>
 8013048:	218f      	movs	r1, #143	; 0x8f
 801304a:	4b09      	ldr	r3, [pc, #36]	; (8013070 <_Bfree+0x40>)
 801304c:	4809      	ldr	r0, [pc, #36]	; (8013074 <_Bfree+0x44>)
 801304e:	f001 ff25 	bl	8014e9c <__assert_func>
 8013052:	6046      	str	r6, [r0, #4]
 8013054:	6086      	str	r6, [r0, #8]
 8013056:	6006      	str	r6, [r0, #0]
 8013058:	60c6      	str	r6, [r0, #12]
 801305a:	2c00      	cmp	r4, #0
 801305c:	d007      	beq.n	801306e <_Bfree+0x3e>
 801305e:	69eb      	ldr	r3, [r5, #28]
 8013060:	6862      	ldr	r2, [r4, #4]
 8013062:	68db      	ldr	r3, [r3, #12]
 8013064:	0092      	lsls	r2, r2, #2
 8013066:	189b      	adds	r3, r3, r2
 8013068:	681a      	ldr	r2, [r3, #0]
 801306a:	6022      	str	r2, [r4, #0]
 801306c:	601c      	str	r4, [r3, #0]
 801306e:	bd70      	pop	{r4, r5, r6, pc}
 8013070:	08016b62 	.word	0x08016b62
 8013074:	08016be2 	.word	0x08016be2

08013078 <__multadd>:
 8013078:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801307a:	000e      	movs	r6, r1
 801307c:	9001      	str	r0, [sp, #4]
 801307e:	000c      	movs	r4, r1
 8013080:	001d      	movs	r5, r3
 8013082:	2000      	movs	r0, #0
 8013084:	690f      	ldr	r7, [r1, #16]
 8013086:	3614      	adds	r6, #20
 8013088:	6833      	ldr	r3, [r6, #0]
 801308a:	3001      	adds	r0, #1
 801308c:	b299      	uxth	r1, r3
 801308e:	4351      	muls	r1, r2
 8013090:	0c1b      	lsrs	r3, r3, #16
 8013092:	4353      	muls	r3, r2
 8013094:	1949      	adds	r1, r1, r5
 8013096:	0c0d      	lsrs	r5, r1, #16
 8013098:	195b      	adds	r3, r3, r5
 801309a:	0c1d      	lsrs	r5, r3, #16
 801309c:	b289      	uxth	r1, r1
 801309e:	041b      	lsls	r3, r3, #16
 80130a0:	185b      	adds	r3, r3, r1
 80130a2:	c608      	stmia	r6!, {r3}
 80130a4:	4287      	cmp	r7, r0
 80130a6:	dcef      	bgt.n	8013088 <__multadd+0x10>
 80130a8:	2d00      	cmp	r5, #0
 80130aa:	d022      	beq.n	80130f2 <__multadd+0x7a>
 80130ac:	68a3      	ldr	r3, [r4, #8]
 80130ae:	42bb      	cmp	r3, r7
 80130b0:	dc19      	bgt.n	80130e6 <__multadd+0x6e>
 80130b2:	6861      	ldr	r1, [r4, #4]
 80130b4:	9801      	ldr	r0, [sp, #4]
 80130b6:	3101      	adds	r1, #1
 80130b8:	f7ff ff76 	bl	8012fa8 <_Balloc>
 80130bc:	1e06      	subs	r6, r0, #0
 80130be:	d105      	bne.n	80130cc <__multadd+0x54>
 80130c0:	0032      	movs	r2, r6
 80130c2:	21ba      	movs	r1, #186	; 0xba
 80130c4:	4b0c      	ldr	r3, [pc, #48]	; (80130f8 <__multadd+0x80>)
 80130c6:	480d      	ldr	r0, [pc, #52]	; (80130fc <__multadd+0x84>)
 80130c8:	f001 fee8 	bl	8014e9c <__assert_func>
 80130cc:	0021      	movs	r1, r4
 80130ce:	6922      	ldr	r2, [r4, #16]
 80130d0:	310c      	adds	r1, #12
 80130d2:	3202      	adds	r2, #2
 80130d4:	0092      	lsls	r2, r2, #2
 80130d6:	300c      	adds	r0, #12
 80130d8:	f7fe ffb8 	bl	801204c <memcpy>
 80130dc:	0021      	movs	r1, r4
 80130de:	9801      	ldr	r0, [sp, #4]
 80130e0:	f7ff ffa6 	bl	8013030 <_Bfree>
 80130e4:	0034      	movs	r4, r6
 80130e6:	1d3b      	adds	r3, r7, #4
 80130e8:	009b      	lsls	r3, r3, #2
 80130ea:	18e3      	adds	r3, r4, r3
 80130ec:	605d      	str	r5, [r3, #4]
 80130ee:	1c7b      	adds	r3, r7, #1
 80130f0:	6123      	str	r3, [r4, #16]
 80130f2:	0020      	movs	r0, r4
 80130f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80130f6:	46c0      	nop			; (mov r8, r8)
 80130f8:	08016bd1 	.word	0x08016bd1
 80130fc:	08016be2 	.word	0x08016be2

08013100 <__s2b>:
 8013100:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013102:	0006      	movs	r6, r0
 8013104:	0018      	movs	r0, r3
 8013106:	000c      	movs	r4, r1
 8013108:	3008      	adds	r0, #8
 801310a:	2109      	movs	r1, #9
 801310c:	9301      	str	r3, [sp, #4]
 801310e:	0015      	movs	r5, r2
 8013110:	f7f0 f846 	bl	80031a0 <__divsi3>
 8013114:	2301      	movs	r3, #1
 8013116:	2100      	movs	r1, #0
 8013118:	4283      	cmp	r3, r0
 801311a:	db0a      	blt.n	8013132 <__s2b+0x32>
 801311c:	0030      	movs	r0, r6
 801311e:	f7ff ff43 	bl	8012fa8 <_Balloc>
 8013122:	1e01      	subs	r1, r0, #0
 8013124:	d108      	bne.n	8013138 <__s2b+0x38>
 8013126:	000a      	movs	r2, r1
 8013128:	4b19      	ldr	r3, [pc, #100]	; (8013190 <__s2b+0x90>)
 801312a:	481a      	ldr	r0, [pc, #104]	; (8013194 <__s2b+0x94>)
 801312c:	31d3      	adds	r1, #211	; 0xd3
 801312e:	f001 feb5 	bl	8014e9c <__assert_func>
 8013132:	005b      	lsls	r3, r3, #1
 8013134:	3101      	adds	r1, #1
 8013136:	e7ef      	b.n	8013118 <__s2b+0x18>
 8013138:	9b08      	ldr	r3, [sp, #32]
 801313a:	6143      	str	r3, [r0, #20]
 801313c:	2301      	movs	r3, #1
 801313e:	6103      	str	r3, [r0, #16]
 8013140:	2d09      	cmp	r5, #9
 8013142:	dd18      	ble.n	8013176 <__s2b+0x76>
 8013144:	0023      	movs	r3, r4
 8013146:	3309      	adds	r3, #9
 8013148:	001f      	movs	r7, r3
 801314a:	9300      	str	r3, [sp, #0]
 801314c:	1964      	adds	r4, r4, r5
 801314e:	783b      	ldrb	r3, [r7, #0]
 8013150:	220a      	movs	r2, #10
 8013152:	0030      	movs	r0, r6
 8013154:	3b30      	subs	r3, #48	; 0x30
 8013156:	f7ff ff8f 	bl	8013078 <__multadd>
 801315a:	3701      	adds	r7, #1
 801315c:	0001      	movs	r1, r0
 801315e:	42a7      	cmp	r7, r4
 8013160:	d1f5      	bne.n	801314e <__s2b+0x4e>
 8013162:	002c      	movs	r4, r5
 8013164:	9b00      	ldr	r3, [sp, #0]
 8013166:	3c08      	subs	r4, #8
 8013168:	191c      	adds	r4, r3, r4
 801316a:	002f      	movs	r7, r5
 801316c:	9b01      	ldr	r3, [sp, #4]
 801316e:	429f      	cmp	r7, r3
 8013170:	db04      	blt.n	801317c <__s2b+0x7c>
 8013172:	0008      	movs	r0, r1
 8013174:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8013176:	2509      	movs	r5, #9
 8013178:	340a      	adds	r4, #10
 801317a:	e7f6      	b.n	801316a <__s2b+0x6a>
 801317c:	1b63      	subs	r3, r4, r5
 801317e:	5ddb      	ldrb	r3, [r3, r7]
 8013180:	220a      	movs	r2, #10
 8013182:	0030      	movs	r0, r6
 8013184:	3b30      	subs	r3, #48	; 0x30
 8013186:	f7ff ff77 	bl	8013078 <__multadd>
 801318a:	3701      	adds	r7, #1
 801318c:	0001      	movs	r1, r0
 801318e:	e7ed      	b.n	801316c <__s2b+0x6c>
 8013190:	08016bd1 	.word	0x08016bd1
 8013194:	08016be2 	.word	0x08016be2

08013198 <__hi0bits>:
 8013198:	0003      	movs	r3, r0
 801319a:	0c02      	lsrs	r2, r0, #16
 801319c:	2000      	movs	r0, #0
 801319e:	4282      	cmp	r2, r0
 80131a0:	d101      	bne.n	80131a6 <__hi0bits+0xe>
 80131a2:	041b      	lsls	r3, r3, #16
 80131a4:	3010      	adds	r0, #16
 80131a6:	0e1a      	lsrs	r2, r3, #24
 80131a8:	d101      	bne.n	80131ae <__hi0bits+0x16>
 80131aa:	3008      	adds	r0, #8
 80131ac:	021b      	lsls	r3, r3, #8
 80131ae:	0f1a      	lsrs	r2, r3, #28
 80131b0:	d101      	bne.n	80131b6 <__hi0bits+0x1e>
 80131b2:	3004      	adds	r0, #4
 80131b4:	011b      	lsls	r3, r3, #4
 80131b6:	0f9a      	lsrs	r2, r3, #30
 80131b8:	d101      	bne.n	80131be <__hi0bits+0x26>
 80131ba:	3002      	adds	r0, #2
 80131bc:	009b      	lsls	r3, r3, #2
 80131be:	2b00      	cmp	r3, #0
 80131c0:	db03      	blt.n	80131ca <__hi0bits+0x32>
 80131c2:	3001      	adds	r0, #1
 80131c4:	005b      	lsls	r3, r3, #1
 80131c6:	d400      	bmi.n	80131ca <__hi0bits+0x32>
 80131c8:	2020      	movs	r0, #32
 80131ca:	4770      	bx	lr

080131cc <__lo0bits>:
 80131cc:	6803      	ldr	r3, [r0, #0]
 80131ce:	0001      	movs	r1, r0
 80131d0:	2207      	movs	r2, #7
 80131d2:	0018      	movs	r0, r3
 80131d4:	4010      	ands	r0, r2
 80131d6:	4213      	tst	r3, r2
 80131d8:	d00d      	beq.n	80131f6 <__lo0bits+0x2a>
 80131da:	3a06      	subs	r2, #6
 80131dc:	2000      	movs	r0, #0
 80131de:	4213      	tst	r3, r2
 80131e0:	d105      	bne.n	80131ee <__lo0bits+0x22>
 80131e2:	3002      	adds	r0, #2
 80131e4:	4203      	tst	r3, r0
 80131e6:	d003      	beq.n	80131f0 <__lo0bits+0x24>
 80131e8:	40d3      	lsrs	r3, r2
 80131ea:	0010      	movs	r0, r2
 80131ec:	600b      	str	r3, [r1, #0]
 80131ee:	4770      	bx	lr
 80131f0:	089b      	lsrs	r3, r3, #2
 80131f2:	600b      	str	r3, [r1, #0]
 80131f4:	e7fb      	b.n	80131ee <__lo0bits+0x22>
 80131f6:	b29a      	uxth	r2, r3
 80131f8:	2a00      	cmp	r2, #0
 80131fa:	d101      	bne.n	8013200 <__lo0bits+0x34>
 80131fc:	2010      	movs	r0, #16
 80131fe:	0c1b      	lsrs	r3, r3, #16
 8013200:	b2da      	uxtb	r2, r3
 8013202:	2a00      	cmp	r2, #0
 8013204:	d101      	bne.n	801320a <__lo0bits+0x3e>
 8013206:	3008      	adds	r0, #8
 8013208:	0a1b      	lsrs	r3, r3, #8
 801320a:	071a      	lsls	r2, r3, #28
 801320c:	d101      	bne.n	8013212 <__lo0bits+0x46>
 801320e:	3004      	adds	r0, #4
 8013210:	091b      	lsrs	r3, r3, #4
 8013212:	079a      	lsls	r2, r3, #30
 8013214:	d101      	bne.n	801321a <__lo0bits+0x4e>
 8013216:	3002      	adds	r0, #2
 8013218:	089b      	lsrs	r3, r3, #2
 801321a:	07da      	lsls	r2, r3, #31
 801321c:	d4e9      	bmi.n	80131f2 <__lo0bits+0x26>
 801321e:	3001      	adds	r0, #1
 8013220:	085b      	lsrs	r3, r3, #1
 8013222:	d1e6      	bne.n	80131f2 <__lo0bits+0x26>
 8013224:	2020      	movs	r0, #32
 8013226:	e7e2      	b.n	80131ee <__lo0bits+0x22>

08013228 <__i2b>:
 8013228:	b510      	push	{r4, lr}
 801322a:	000c      	movs	r4, r1
 801322c:	2101      	movs	r1, #1
 801322e:	f7ff febb 	bl	8012fa8 <_Balloc>
 8013232:	2800      	cmp	r0, #0
 8013234:	d107      	bne.n	8013246 <__i2b+0x1e>
 8013236:	2146      	movs	r1, #70	; 0x46
 8013238:	4c05      	ldr	r4, [pc, #20]	; (8013250 <__i2b+0x28>)
 801323a:	0002      	movs	r2, r0
 801323c:	4b05      	ldr	r3, [pc, #20]	; (8013254 <__i2b+0x2c>)
 801323e:	0020      	movs	r0, r4
 8013240:	31ff      	adds	r1, #255	; 0xff
 8013242:	f001 fe2b 	bl	8014e9c <__assert_func>
 8013246:	2301      	movs	r3, #1
 8013248:	6144      	str	r4, [r0, #20]
 801324a:	6103      	str	r3, [r0, #16]
 801324c:	bd10      	pop	{r4, pc}
 801324e:	46c0      	nop			; (mov r8, r8)
 8013250:	08016be2 	.word	0x08016be2
 8013254:	08016bd1 	.word	0x08016bd1

08013258 <__multiply>:
 8013258:	b5f0      	push	{r4, r5, r6, r7, lr}
 801325a:	0015      	movs	r5, r2
 801325c:	690a      	ldr	r2, [r1, #16]
 801325e:	692b      	ldr	r3, [r5, #16]
 8013260:	000c      	movs	r4, r1
 8013262:	b08b      	sub	sp, #44	; 0x2c
 8013264:	429a      	cmp	r2, r3
 8013266:	da01      	bge.n	801326c <__multiply+0x14>
 8013268:	002c      	movs	r4, r5
 801326a:	000d      	movs	r5, r1
 801326c:	6927      	ldr	r7, [r4, #16]
 801326e:	692e      	ldr	r6, [r5, #16]
 8013270:	6861      	ldr	r1, [r4, #4]
 8013272:	19bb      	adds	r3, r7, r6
 8013274:	9303      	str	r3, [sp, #12]
 8013276:	68a3      	ldr	r3, [r4, #8]
 8013278:	19ba      	adds	r2, r7, r6
 801327a:	4293      	cmp	r3, r2
 801327c:	da00      	bge.n	8013280 <__multiply+0x28>
 801327e:	3101      	adds	r1, #1
 8013280:	f7ff fe92 	bl	8012fa8 <_Balloc>
 8013284:	9002      	str	r0, [sp, #8]
 8013286:	2800      	cmp	r0, #0
 8013288:	d106      	bne.n	8013298 <__multiply+0x40>
 801328a:	21b1      	movs	r1, #177	; 0xb1
 801328c:	4b48      	ldr	r3, [pc, #288]	; (80133b0 <__multiply+0x158>)
 801328e:	4849      	ldr	r0, [pc, #292]	; (80133b4 <__multiply+0x15c>)
 8013290:	9a02      	ldr	r2, [sp, #8]
 8013292:	0049      	lsls	r1, r1, #1
 8013294:	f001 fe02 	bl	8014e9c <__assert_func>
 8013298:	9b02      	ldr	r3, [sp, #8]
 801329a:	2200      	movs	r2, #0
 801329c:	3314      	adds	r3, #20
 801329e:	469c      	mov	ip, r3
 80132a0:	19bb      	adds	r3, r7, r6
 80132a2:	009b      	lsls	r3, r3, #2
 80132a4:	4463      	add	r3, ip
 80132a6:	9304      	str	r3, [sp, #16]
 80132a8:	4663      	mov	r3, ip
 80132aa:	9904      	ldr	r1, [sp, #16]
 80132ac:	428b      	cmp	r3, r1
 80132ae:	d32a      	bcc.n	8013306 <__multiply+0xae>
 80132b0:	0023      	movs	r3, r4
 80132b2:	00bf      	lsls	r7, r7, #2
 80132b4:	3314      	adds	r3, #20
 80132b6:	3514      	adds	r5, #20
 80132b8:	9308      	str	r3, [sp, #32]
 80132ba:	00b6      	lsls	r6, r6, #2
 80132bc:	19db      	adds	r3, r3, r7
 80132be:	9305      	str	r3, [sp, #20]
 80132c0:	19ab      	adds	r3, r5, r6
 80132c2:	9309      	str	r3, [sp, #36]	; 0x24
 80132c4:	2304      	movs	r3, #4
 80132c6:	9306      	str	r3, [sp, #24]
 80132c8:	0023      	movs	r3, r4
 80132ca:	9a05      	ldr	r2, [sp, #20]
 80132cc:	3315      	adds	r3, #21
 80132ce:	9501      	str	r5, [sp, #4]
 80132d0:	429a      	cmp	r2, r3
 80132d2:	d305      	bcc.n	80132e0 <__multiply+0x88>
 80132d4:	1b13      	subs	r3, r2, r4
 80132d6:	3b15      	subs	r3, #21
 80132d8:	089b      	lsrs	r3, r3, #2
 80132da:	3301      	adds	r3, #1
 80132dc:	009b      	lsls	r3, r3, #2
 80132de:	9306      	str	r3, [sp, #24]
 80132e0:	9b01      	ldr	r3, [sp, #4]
 80132e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80132e4:	4293      	cmp	r3, r2
 80132e6:	d310      	bcc.n	801330a <__multiply+0xb2>
 80132e8:	9b03      	ldr	r3, [sp, #12]
 80132ea:	2b00      	cmp	r3, #0
 80132ec:	dd05      	ble.n	80132fa <__multiply+0xa2>
 80132ee:	9b04      	ldr	r3, [sp, #16]
 80132f0:	3b04      	subs	r3, #4
 80132f2:	9304      	str	r3, [sp, #16]
 80132f4:	681b      	ldr	r3, [r3, #0]
 80132f6:	2b00      	cmp	r3, #0
 80132f8:	d056      	beq.n	80133a8 <__multiply+0x150>
 80132fa:	9b02      	ldr	r3, [sp, #8]
 80132fc:	9a03      	ldr	r2, [sp, #12]
 80132fe:	0018      	movs	r0, r3
 8013300:	611a      	str	r2, [r3, #16]
 8013302:	b00b      	add	sp, #44	; 0x2c
 8013304:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013306:	c304      	stmia	r3!, {r2}
 8013308:	e7cf      	b.n	80132aa <__multiply+0x52>
 801330a:	9b01      	ldr	r3, [sp, #4]
 801330c:	6818      	ldr	r0, [r3, #0]
 801330e:	b280      	uxth	r0, r0
 8013310:	2800      	cmp	r0, #0
 8013312:	d01e      	beq.n	8013352 <__multiply+0xfa>
 8013314:	4667      	mov	r7, ip
 8013316:	2500      	movs	r5, #0
 8013318:	9e08      	ldr	r6, [sp, #32]
 801331a:	ce02      	ldmia	r6!, {r1}
 801331c:	683b      	ldr	r3, [r7, #0]
 801331e:	9307      	str	r3, [sp, #28]
 8013320:	b28b      	uxth	r3, r1
 8013322:	4343      	muls	r3, r0
 8013324:	001a      	movs	r2, r3
 8013326:	466b      	mov	r3, sp
 8013328:	8b9b      	ldrh	r3, [r3, #28]
 801332a:	18d3      	adds	r3, r2, r3
 801332c:	195b      	adds	r3, r3, r5
 801332e:	0c0d      	lsrs	r5, r1, #16
 8013330:	4345      	muls	r5, r0
 8013332:	9a07      	ldr	r2, [sp, #28]
 8013334:	0c11      	lsrs	r1, r2, #16
 8013336:	1869      	adds	r1, r5, r1
 8013338:	0c1a      	lsrs	r2, r3, #16
 801333a:	188a      	adds	r2, r1, r2
 801333c:	b29b      	uxth	r3, r3
 801333e:	0c15      	lsrs	r5, r2, #16
 8013340:	0412      	lsls	r2, r2, #16
 8013342:	431a      	orrs	r2, r3
 8013344:	9b05      	ldr	r3, [sp, #20]
 8013346:	c704      	stmia	r7!, {r2}
 8013348:	42b3      	cmp	r3, r6
 801334a:	d8e6      	bhi.n	801331a <__multiply+0xc2>
 801334c:	4663      	mov	r3, ip
 801334e:	9a06      	ldr	r2, [sp, #24]
 8013350:	509d      	str	r5, [r3, r2]
 8013352:	9b01      	ldr	r3, [sp, #4]
 8013354:	6818      	ldr	r0, [r3, #0]
 8013356:	0c00      	lsrs	r0, r0, #16
 8013358:	d020      	beq.n	801339c <__multiply+0x144>
 801335a:	4663      	mov	r3, ip
 801335c:	0025      	movs	r5, r4
 801335e:	4661      	mov	r1, ip
 8013360:	2700      	movs	r7, #0
 8013362:	681b      	ldr	r3, [r3, #0]
 8013364:	3514      	adds	r5, #20
 8013366:	682a      	ldr	r2, [r5, #0]
 8013368:	680e      	ldr	r6, [r1, #0]
 801336a:	b292      	uxth	r2, r2
 801336c:	4342      	muls	r2, r0
 801336e:	0c36      	lsrs	r6, r6, #16
 8013370:	1992      	adds	r2, r2, r6
 8013372:	19d2      	adds	r2, r2, r7
 8013374:	0416      	lsls	r6, r2, #16
 8013376:	b29b      	uxth	r3, r3
 8013378:	431e      	orrs	r6, r3
 801337a:	600e      	str	r6, [r1, #0]
 801337c:	cd40      	ldmia	r5!, {r6}
 801337e:	684b      	ldr	r3, [r1, #4]
 8013380:	0c36      	lsrs	r6, r6, #16
 8013382:	4346      	muls	r6, r0
 8013384:	b29b      	uxth	r3, r3
 8013386:	0c12      	lsrs	r2, r2, #16
 8013388:	18f3      	adds	r3, r6, r3
 801338a:	189b      	adds	r3, r3, r2
 801338c:	9a05      	ldr	r2, [sp, #20]
 801338e:	0c1f      	lsrs	r7, r3, #16
 8013390:	3104      	adds	r1, #4
 8013392:	42aa      	cmp	r2, r5
 8013394:	d8e7      	bhi.n	8013366 <__multiply+0x10e>
 8013396:	4662      	mov	r2, ip
 8013398:	9906      	ldr	r1, [sp, #24]
 801339a:	5053      	str	r3, [r2, r1]
 801339c:	9b01      	ldr	r3, [sp, #4]
 801339e:	3304      	adds	r3, #4
 80133a0:	9301      	str	r3, [sp, #4]
 80133a2:	2304      	movs	r3, #4
 80133a4:	449c      	add	ip, r3
 80133a6:	e79b      	b.n	80132e0 <__multiply+0x88>
 80133a8:	9b03      	ldr	r3, [sp, #12]
 80133aa:	3b01      	subs	r3, #1
 80133ac:	9303      	str	r3, [sp, #12]
 80133ae:	e79b      	b.n	80132e8 <__multiply+0x90>
 80133b0:	08016bd1 	.word	0x08016bd1
 80133b4:	08016be2 	.word	0x08016be2

080133b8 <__pow5mult>:
 80133b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80133ba:	2303      	movs	r3, #3
 80133bc:	0015      	movs	r5, r2
 80133be:	0007      	movs	r7, r0
 80133c0:	000e      	movs	r6, r1
 80133c2:	401a      	ands	r2, r3
 80133c4:	421d      	tst	r5, r3
 80133c6:	d008      	beq.n	80133da <__pow5mult+0x22>
 80133c8:	4925      	ldr	r1, [pc, #148]	; (8013460 <__pow5mult+0xa8>)
 80133ca:	3a01      	subs	r2, #1
 80133cc:	0092      	lsls	r2, r2, #2
 80133ce:	5852      	ldr	r2, [r2, r1]
 80133d0:	2300      	movs	r3, #0
 80133d2:	0031      	movs	r1, r6
 80133d4:	f7ff fe50 	bl	8013078 <__multadd>
 80133d8:	0006      	movs	r6, r0
 80133da:	10ad      	asrs	r5, r5, #2
 80133dc:	d03d      	beq.n	801345a <__pow5mult+0xa2>
 80133de:	69fc      	ldr	r4, [r7, #28]
 80133e0:	2c00      	cmp	r4, #0
 80133e2:	d10f      	bne.n	8013404 <__pow5mult+0x4c>
 80133e4:	2010      	movs	r0, #16
 80133e6:	f7ff fd21 	bl	8012e2c <malloc>
 80133ea:	1e02      	subs	r2, r0, #0
 80133ec:	61f8      	str	r0, [r7, #28]
 80133ee:	d105      	bne.n	80133fc <__pow5mult+0x44>
 80133f0:	21b4      	movs	r1, #180	; 0xb4
 80133f2:	4b1c      	ldr	r3, [pc, #112]	; (8013464 <__pow5mult+0xac>)
 80133f4:	481c      	ldr	r0, [pc, #112]	; (8013468 <__pow5mult+0xb0>)
 80133f6:	31ff      	adds	r1, #255	; 0xff
 80133f8:	f001 fd50 	bl	8014e9c <__assert_func>
 80133fc:	6044      	str	r4, [r0, #4]
 80133fe:	6084      	str	r4, [r0, #8]
 8013400:	6004      	str	r4, [r0, #0]
 8013402:	60c4      	str	r4, [r0, #12]
 8013404:	69fb      	ldr	r3, [r7, #28]
 8013406:	689c      	ldr	r4, [r3, #8]
 8013408:	9301      	str	r3, [sp, #4]
 801340a:	2c00      	cmp	r4, #0
 801340c:	d108      	bne.n	8013420 <__pow5mult+0x68>
 801340e:	0038      	movs	r0, r7
 8013410:	4916      	ldr	r1, [pc, #88]	; (801346c <__pow5mult+0xb4>)
 8013412:	f7ff ff09 	bl	8013228 <__i2b>
 8013416:	9b01      	ldr	r3, [sp, #4]
 8013418:	0004      	movs	r4, r0
 801341a:	6098      	str	r0, [r3, #8]
 801341c:	2300      	movs	r3, #0
 801341e:	6003      	str	r3, [r0, #0]
 8013420:	2301      	movs	r3, #1
 8013422:	421d      	tst	r5, r3
 8013424:	d00a      	beq.n	801343c <__pow5mult+0x84>
 8013426:	0031      	movs	r1, r6
 8013428:	0022      	movs	r2, r4
 801342a:	0038      	movs	r0, r7
 801342c:	f7ff ff14 	bl	8013258 <__multiply>
 8013430:	0031      	movs	r1, r6
 8013432:	9001      	str	r0, [sp, #4]
 8013434:	0038      	movs	r0, r7
 8013436:	f7ff fdfb 	bl	8013030 <_Bfree>
 801343a:	9e01      	ldr	r6, [sp, #4]
 801343c:	106d      	asrs	r5, r5, #1
 801343e:	d00c      	beq.n	801345a <__pow5mult+0xa2>
 8013440:	6820      	ldr	r0, [r4, #0]
 8013442:	2800      	cmp	r0, #0
 8013444:	d107      	bne.n	8013456 <__pow5mult+0x9e>
 8013446:	0022      	movs	r2, r4
 8013448:	0021      	movs	r1, r4
 801344a:	0038      	movs	r0, r7
 801344c:	f7ff ff04 	bl	8013258 <__multiply>
 8013450:	2300      	movs	r3, #0
 8013452:	6020      	str	r0, [r4, #0]
 8013454:	6003      	str	r3, [r0, #0]
 8013456:	0004      	movs	r4, r0
 8013458:	e7e2      	b.n	8013420 <__pow5mult+0x68>
 801345a:	0030      	movs	r0, r6
 801345c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801345e:	46c0      	nop			; (mov r8, r8)
 8013460:	08016d30 	.word	0x08016d30
 8013464:	08016b62 	.word	0x08016b62
 8013468:	08016be2 	.word	0x08016be2
 801346c:	00000271 	.word	0x00000271

08013470 <__lshift>:
 8013470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013472:	000c      	movs	r4, r1
 8013474:	0017      	movs	r7, r2
 8013476:	6923      	ldr	r3, [r4, #16]
 8013478:	1155      	asrs	r5, r2, #5
 801347a:	b087      	sub	sp, #28
 801347c:	18eb      	adds	r3, r5, r3
 801347e:	9302      	str	r3, [sp, #8]
 8013480:	3301      	adds	r3, #1
 8013482:	9301      	str	r3, [sp, #4]
 8013484:	6849      	ldr	r1, [r1, #4]
 8013486:	68a3      	ldr	r3, [r4, #8]
 8013488:	9004      	str	r0, [sp, #16]
 801348a:	9a01      	ldr	r2, [sp, #4]
 801348c:	4293      	cmp	r3, r2
 801348e:	db10      	blt.n	80134b2 <__lshift+0x42>
 8013490:	9804      	ldr	r0, [sp, #16]
 8013492:	f7ff fd89 	bl	8012fa8 <_Balloc>
 8013496:	2300      	movs	r3, #0
 8013498:	0002      	movs	r2, r0
 801349a:	0006      	movs	r6, r0
 801349c:	0019      	movs	r1, r3
 801349e:	3214      	adds	r2, #20
 80134a0:	4298      	cmp	r0, r3
 80134a2:	d10c      	bne.n	80134be <__lshift+0x4e>
 80134a4:	31df      	adds	r1, #223	; 0xdf
 80134a6:	0032      	movs	r2, r6
 80134a8:	4b26      	ldr	r3, [pc, #152]	; (8013544 <__lshift+0xd4>)
 80134aa:	4827      	ldr	r0, [pc, #156]	; (8013548 <__lshift+0xd8>)
 80134ac:	31ff      	adds	r1, #255	; 0xff
 80134ae:	f001 fcf5 	bl	8014e9c <__assert_func>
 80134b2:	3101      	adds	r1, #1
 80134b4:	005b      	lsls	r3, r3, #1
 80134b6:	e7e8      	b.n	801348a <__lshift+0x1a>
 80134b8:	0098      	lsls	r0, r3, #2
 80134ba:	5011      	str	r1, [r2, r0]
 80134bc:	3301      	adds	r3, #1
 80134be:	42ab      	cmp	r3, r5
 80134c0:	dbfa      	blt.n	80134b8 <__lshift+0x48>
 80134c2:	43eb      	mvns	r3, r5
 80134c4:	17db      	asrs	r3, r3, #31
 80134c6:	401d      	ands	r5, r3
 80134c8:	211f      	movs	r1, #31
 80134ca:	0023      	movs	r3, r4
 80134cc:	0038      	movs	r0, r7
 80134ce:	00ad      	lsls	r5, r5, #2
 80134d0:	1955      	adds	r5, r2, r5
 80134d2:	6922      	ldr	r2, [r4, #16]
 80134d4:	3314      	adds	r3, #20
 80134d6:	0092      	lsls	r2, r2, #2
 80134d8:	4008      	ands	r0, r1
 80134da:	4684      	mov	ip, r0
 80134dc:	189a      	adds	r2, r3, r2
 80134de:	420f      	tst	r7, r1
 80134e0:	d02a      	beq.n	8013538 <__lshift+0xc8>
 80134e2:	3101      	adds	r1, #1
 80134e4:	1a09      	subs	r1, r1, r0
 80134e6:	9105      	str	r1, [sp, #20]
 80134e8:	2100      	movs	r1, #0
 80134ea:	9503      	str	r5, [sp, #12]
 80134ec:	4667      	mov	r7, ip
 80134ee:	6818      	ldr	r0, [r3, #0]
 80134f0:	40b8      	lsls	r0, r7
 80134f2:	4308      	orrs	r0, r1
 80134f4:	9903      	ldr	r1, [sp, #12]
 80134f6:	c101      	stmia	r1!, {r0}
 80134f8:	9103      	str	r1, [sp, #12]
 80134fa:	9805      	ldr	r0, [sp, #20]
 80134fc:	cb02      	ldmia	r3!, {r1}
 80134fe:	40c1      	lsrs	r1, r0
 8013500:	429a      	cmp	r2, r3
 8013502:	d8f3      	bhi.n	80134ec <__lshift+0x7c>
 8013504:	0020      	movs	r0, r4
 8013506:	3015      	adds	r0, #21
 8013508:	2304      	movs	r3, #4
 801350a:	4282      	cmp	r2, r0
 801350c:	d304      	bcc.n	8013518 <__lshift+0xa8>
 801350e:	1b13      	subs	r3, r2, r4
 8013510:	3b15      	subs	r3, #21
 8013512:	089b      	lsrs	r3, r3, #2
 8013514:	3301      	adds	r3, #1
 8013516:	009b      	lsls	r3, r3, #2
 8013518:	50e9      	str	r1, [r5, r3]
 801351a:	2900      	cmp	r1, #0
 801351c:	d002      	beq.n	8013524 <__lshift+0xb4>
 801351e:	9b02      	ldr	r3, [sp, #8]
 8013520:	3302      	adds	r3, #2
 8013522:	9301      	str	r3, [sp, #4]
 8013524:	9b01      	ldr	r3, [sp, #4]
 8013526:	9804      	ldr	r0, [sp, #16]
 8013528:	3b01      	subs	r3, #1
 801352a:	0021      	movs	r1, r4
 801352c:	6133      	str	r3, [r6, #16]
 801352e:	f7ff fd7f 	bl	8013030 <_Bfree>
 8013532:	0030      	movs	r0, r6
 8013534:	b007      	add	sp, #28
 8013536:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013538:	cb02      	ldmia	r3!, {r1}
 801353a:	c502      	stmia	r5!, {r1}
 801353c:	429a      	cmp	r2, r3
 801353e:	d8fb      	bhi.n	8013538 <__lshift+0xc8>
 8013540:	e7f0      	b.n	8013524 <__lshift+0xb4>
 8013542:	46c0      	nop			; (mov r8, r8)
 8013544:	08016bd1 	.word	0x08016bd1
 8013548:	08016be2 	.word	0x08016be2

0801354c <__mcmp>:
 801354c:	b530      	push	{r4, r5, lr}
 801354e:	690b      	ldr	r3, [r1, #16]
 8013550:	6904      	ldr	r4, [r0, #16]
 8013552:	0002      	movs	r2, r0
 8013554:	1ae0      	subs	r0, r4, r3
 8013556:	429c      	cmp	r4, r3
 8013558:	d10e      	bne.n	8013578 <__mcmp+0x2c>
 801355a:	3214      	adds	r2, #20
 801355c:	009b      	lsls	r3, r3, #2
 801355e:	3114      	adds	r1, #20
 8013560:	0014      	movs	r4, r2
 8013562:	18c9      	adds	r1, r1, r3
 8013564:	18d2      	adds	r2, r2, r3
 8013566:	3a04      	subs	r2, #4
 8013568:	3904      	subs	r1, #4
 801356a:	6815      	ldr	r5, [r2, #0]
 801356c:	680b      	ldr	r3, [r1, #0]
 801356e:	429d      	cmp	r5, r3
 8013570:	d003      	beq.n	801357a <__mcmp+0x2e>
 8013572:	2001      	movs	r0, #1
 8013574:	429d      	cmp	r5, r3
 8013576:	d303      	bcc.n	8013580 <__mcmp+0x34>
 8013578:	bd30      	pop	{r4, r5, pc}
 801357a:	4294      	cmp	r4, r2
 801357c:	d3f3      	bcc.n	8013566 <__mcmp+0x1a>
 801357e:	e7fb      	b.n	8013578 <__mcmp+0x2c>
 8013580:	4240      	negs	r0, r0
 8013582:	e7f9      	b.n	8013578 <__mcmp+0x2c>

08013584 <__mdiff>:
 8013584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013586:	000e      	movs	r6, r1
 8013588:	0007      	movs	r7, r0
 801358a:	0011      	movs	r1, r2
 801358c:	0030      	movs	r0, r6
 801358e:	b087      	sub	sp, #28
 8013590:	0014      	movs	r4, r2
 8013592:	f7ff ffdb 	bl	801354c <__mcmp>
 8013596:	1e05      	subs	r5, r0, #0
 8013598:	d110      	bne.n	80135bc <__mdiff+0x38>
 801359a:	0001      	movs	r1, r0
 801359c:	0038      	movs	r0, r7
 801359e:	f7ff fd03 	bl	8012fa8 <_Balloc>
 80135a2:	1e02      	subs	r2, r0, #0
 80135a4:	d104      	bne.n	80135b0 <__mdiff+0x2c>
 80135a6:	4b3f      	ldr	r3, [pc, #252]	; (80136a4 <__mdiff+0x120>)
 80135a8:	483f      	ldr	r0, [pc, #252]	; (80136a8 <__mdiff+0x124>)
 80135aa:	4940      	ldr	r1, [pc, #256]	; (80136ac <__mdiff+0x128>)
 80135ac:	f001 fc76 	bl	8014e9c <__assert_func>
 80135b0:	2301      	movs	r3, #1
 80135b2:	6145      	str	r5, [r0, #20]
 80135b4:	6103      	str	r3, [r0, #16]
 80135b6:	0010      	movs	r0, r2
 80135b8:	b007      	add	sp, #28
 80135ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80135bc:	2301      	movs	r3, #1
 80135be:	9301      	str	r3, [sp, #4]
 80135c0:	2800      	cmp	r0, #0
 80135c2:	db04      	blt.n	80135ce <__mdiff+0x4a>
 80135c4:	0023      	movs	r3, r4
 80135c6:	0034      	movs	r4, r6
 80135c8:	001e      	movs	r6, r3
 80135ca:	2300      	movs	r3, #0
 80135cc:	9301      	str	r3, [sp, #4]
 80135ce:	0038      	movs	r0, r7
 80135d0:	6861      	ldr	r1, [r4, #4]
 80135d2:	f7ff fce9 	bl	8012fa8 <_Balloc>
 80135d6:	1e02      	subs	r2, r0, #0
 80135d8:	d103      	bne.n	80135e2 <__mdiff+0x5e>
 80135da:	4b32      	ldr	r3, [pc, #200]	; (80136a4 <__mdiff+0x120>)
 80135dc:	4832      	ldr	r0, [pc, #200]	; (80136a8 <__mdiff+0x124>)
 80135de:	4934      	ldr	r1, [pc, #208]	; (80136b0 <__mdiff+0x12c>)
 80135e0:	e7e4      	b.n	80135ac <__mdiff+0x28>
 80135e2:	9b01      	ldr	r3, [sp, #4]
 80135e4:	2700      	movs	r7, #0
 80135e6:	60c3      	str	r3, [r0, #12]
 80135e8:	6920      	ldr	r0, [r4, #16]
 80135ea:	3414      	adds	r4, #20
 80135ec:	0083      	lsls	r3, r0, #2
 80135ee:	18e3      	adds	r3, r4, r3
 80135f0:	0021      	movs	r1, r4
 80135f2:	9401      	str	r4, [sp, #4]
 80135f4:	0034      	movs	r4, r6
 80135f6:	9302      	str	r3, [sp, #8]
 80135f8:	6933      	ldr	r3, [r6, #16]
 80135fa:	3414      	adds	r4, #20
 80135fc:	009b      	lsls	r3, r3, #2
 80135fe:	18e3      	adds	r3, r4, r3
 8013600:	9303      	str	r3, [sp, #12]
 8013602:	0013      	movs	r3, r2
 8013604:	3314      	adds	r3, #20
 8013606:	469c      	mov	ip, r3
 8013608:	9305      	str	r3, [sp, #20]
 801360a:	9104      	str	r1, [sp, #16]
 801360c:	9b04      	ldr	r3, [sp, #16]
 801360e:	cc02      	ldmia	r4!, {r1}
 8013610:	cb20      	ldmia	r3!, {r5}
 8013612:	9304      	str	r3, [sp, #16]
 8013614:	b2ab      	uxth	r3, r5
 8013616:	19df      	adds	r7, r3, r7
 8013618:	b28b      	uxth	r3, r1
 801361a:	1afb      	subs	r3, r7, r3
 801361c:	0c09      	lsrs	r1, r1, #16
 801361e:	0c2d      	lsrs	r5, r5, #16
 8013620:	1a6d      	subs	r5, r5, r1
 8013622:	1419      	asrs	r1, r3, #16
 8013624:	1869      	adds	r1, r5, r1
 8013626:	b29b      	uxth	r3, r3
 8013628:	140f      	asrs	r7, r1, #16
 801362a:	0409      	lsls	r1, r1, #16
 801362c:	4319      	orrs	r1, r3
 801362e:	4663      	mov	r3, ip
 8013630:	c302      	stmia	r3!, {r1}
 8013632:	469c      	mov	ip, r3
 8013634:	9b03      	ldr	r3, [sp, #12]
 8013636:	42a3      	cmp	r3, r4
 8013638:	d8e8      	bhi.n	801360c <__mdiff+0x88>
 801363a:	0031      	movs	r1, r6
 801363c:	9c03      	ldr	r4, [sp, #12]
 801363e:	3115      	adds	r1, #21
 8013640:	2304      	movs	r3, #4
 8013642:	428c      	cmp	r4, r1
 8013644:	d304      	bcc.n	8013650 <__mdiff+0xcc>
 8013646:	1ba3      	subs	r3, r4, r6
 8013648:	3b15      	subs	r3, #21
 801364a:	089b      	lsrs	r3, r3, #2
 801364c:	3301      	adds	r3, #1
 801364e:	009b      	lsls	r3, r3, #2
 8013650:	9901      	ldr	r1, [sp, #4]
 8013652:	18cd      	adds	r5, r1, r3
 8013654:	9905      	ldr	r1, [sp, #20]
 8013656:	002e      	movs	r6, r5
 8013658:	18cb      	adds	r3, r1, r3
 801365a:	469c      	mov	ip, r3
 801365c:	9902      	ldr	r1, [sp, #8]
 801365e:	428e      	cmp	r6, r1
 8013660:	d310      	bcc.n	8013684 <__mdiff+0x100>
 8013662:	9e02      	ldr	r6, [sp, #8]
 8013664:	1ee9      	subs	r1, r5, #3
 8013666:	2400      	movs	r4, #0
 8013668:	428e      	cmp	r6, r1
 801366a:	d304      	bcc.n	8013676 <__mdiff+0xf2>
 801366c:	0031      	movs	r1, r6
 801366e:	3103      	adds	r1, #3
 8013670:	1b49      	subs	r1, r1, r5
 8013672:	0889      	lsrs	r1, r1, #2
 8013674:	008c      	lsls	r4, r1, #2
 8013676:	191b      	adds	r3, r3, r4
 8013678:	3b04      	subs	r3, #4
 801367a:	6819      	ldr	r1, [r3, #0]
 801367c:	2900      	cmp	r1, #0
 801367e:	d00f      	beq.n	80136a0 <__mdiff+0x11c>
 8013680:	6110      	str	r0, [r2, #16]
 8013682:	e798      	b.n	80135b6 <__mdiff+0x32>
 8013684:	ce02      	ldmia	r6!, {r1}
 8013686:	b28c      	uxth	r4, r1
 8013688:	19e4      	adds	r4, r4, r7
 801368a:	0c0f      	lsrs	r7, r1, #16
 801368c:	1421      	asrs	r1, r4, #16
 801368e:	1879      	adds	r1, r7, r1
 8013690:	b2a4      	uxth	r4, r4
 8013692:	140f      	asrs	r7, r1, #16
 8013694:	0409      	lsls	r1, r1, #16
 8013696:	4321      	orrs	r1, r4
 8013698:	4664      	mov	r4, ip
 801369a:	c402      	stmia	r4!, {r1}
 801369c:	46a4      	mov	ip, r4
 801369e:	e7dd      	b.n	801365c <__mdiff+0xd8>
 80136a0:	3801      	subs	r0, #1
 80136a2:	e7e9      	b.n	8013678 <__mdiff+0xf4>
 80136a4:	08016bd1 	.word	0x08016bd1
 80136a8:	08016be2 	.word	0x08016be2
 80136ac:	00000237 	.word	0x00000237
 80136b0:	00000245 	.word	0x00000245

080136b4 <__ulp>:
 80136b4:	2000      	movs	r0, #0
 80136b6:	4b0b      	ldr	r3, [pc, #44]	; (80136e4 <__ulp+0x30>)
 80136b8:	4019      	ands	r1, r3
 80136ba:	4b0b      	ldr	r3, [pc, #44]	; (80136e8 <__ulp+0x34>)
 80136bc:	18c9      	adds	r1, r1, r3
 80136be:	4281      	cmp	r1, r0
 80136c0:	dc06      	bgt.n	80136d0 <__ulp+0x1c>
 80136c2:	4249      	negs	r1, r1
 80136c4:	150b      	asrs	r3, r1, #20
 80136c6:	2b13      	cmp	r3, #19
 80136c8:	dc03      	bgt.n	80136d2 <__ulp+0x1e>
 80136ca:	2180      	movs	r1, #128	; 0x80
 80136cc:	0309      	lsls	r1, r1, #12
 80136ce:	4119      	asrs	r1, r3
 80136d0:	4770      	bx	lr
 80136d2:	3b14      	subs	r3, #20
 80136d4:	2001      	movs	r0, #1
 80136d6:	2b1e      	cmp	r3, #30
 80136d8:	dc02      	bgt.n	80136e0 <__ulp+0x2c>
 80136da:	2080      	movs	r0, #128	; 0x80
 80136dc:	0600      	lsls	r0, r0, #24
 80136de:	40d8      	lsrs	r0, r3
 80136e0:	2100      	movs	r1, #0
 80136e2:	e7f5      	b.n	80136d0 <__ulp+0x1c>
 80136e4:	7ff00000 	.word	0x7ff00000
 80136e8:	fcc00000 	.word	0xfcc00000

080136ec <__b2d>:
 80136ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80136ee:	0006      	movs	r6, r0
 80136f0:	6903      	ldr	r3, [r0, #16]
 80136f2:	3614      	adds	r6, #20
 80136f4:	009b      	lsls	r3, r3, #2
 80136f6:	18f3      	adds	r3, r6, r3
 80136f8:	1f1d      	subs	r5, r3, #4
 80136fa:	682c      	ldr	r4, [r5, #0]
 80136fc:	000f      	movs	r7, r1
 80136fe:	0020      	movs	r0, r4
 8013700:	9301      	str	r3, [sp, #4]
 8013702:	f7ff fd49 	bl	8013198 <__hi0bits>
 8013706:	2220      	movs	r2, #32
 8013708:	1a12      	subs	r2, r2, r0
 801370a:	603a      	str	r2, [r7, #0]
 801370c:	0003      	movs	r3, r0
 801370e:	4a1c      	ldr	r2, [pc, #112]	; (8013780 <__b2d+0x94>)
 8013710:	280a      	cmp	r0, #10
 8013712:	dc15      	bgt.n	8013740 <__b2d+0x54>
 8013714:	210b      	movs	r1, #11
 8013716:	0027      	movs	r7, r4
 8013718:	1a09      	subs	r1, r1, r0
 801371a:	40cf      	lsrs	r7, r1
 801371c:	433a      	orrs	r2, r7
 801371e:	468c      	mov	ip, r1
 8013720:	0011      	movs	r1, r2
 8013722:	2200      	movs	r2, #0
 8013724:	42ae      	cmp	r6, r5
 8013726:	d202      	bcs.n	801372e <__b2d+0x42>
 8013728:	9a01      	ldr	r2, [sp, #4]
 801372a:	3a08      	subs	r2, #8
 801372c:	6812      	ldr	r2, [r2, #0]
 801372e:	3315      	adds	r3, #21
 8013730:	409c      	lsls	r4, r3
 8013732:	4663      	mov	r3, ip
 8013734:	0027      	movs	r7, r4
 8013736:	40da      	lsrs	r2, r3
 8013738:	4317      	orrs	r7, r2
 801373a:	0038      	movs	r0, r7
 801373c:	b003      	add	sp, #12
 801373e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013740:	2700      	movs	r7, #0
 8013742:	42ae      	cmp	r6, r5
 8013744:	d202      	bcs.n	801374c <__b2d+0x60>
 8013746:	9d01      	ldr	r5, [sp, #4]
 8013748:	3d08      	subs	r5, #8
 801374a:	682f      	ldr	r7, [r5, #0]
 801374c:	210b      	movs	r1, #11
 801374e:	4249      	negs	r1, r1
 8013750:	468c      	mov	ip, r1
 8013752:	449c      	add	ip, r3
 8013754:	2b0b      	cmp	r3, #11
 8013756:	d010      	beq.n	801377a <__b2d+0x8e>
 8013758:	4661      	mov	r1, ip
 801375a:	2320      	movs	r3, #32
 801375c:	408c      	lsls	r4, r1
 801375e:	1a5b      	subs	r3, r3, r1
 8013760:	0039      	movs	r1, r7
 8013762:	40d9      	lsrs	r1, r3
 8013764:	430c      	orrs	r4, r1
 8013766:	4322      	orrs	r2, r4
 8013768:	0011      	movs	r1, r2
 801376a:	2200      	movs	r2, #0
 801376c:	42b5      	cmp	r5, r6
 801376e:	d901      	bls.n	8013774 <__b2d+0x88>
 8013770:	3d04      	subs	r5, #4
 8013772:	682a      	ldr	r2, [r5, #0]
 8013774:	4664      	mov	r4, ip
 8013776:	40a7      	lsls	r7, r4
 8013778:	e7dd      	b.n	8013736 <__b2d+0x4a>
 801377a:	4322      	orrs	r2, r4
 801377c:	0011      	movs	r1, r2
 801377e:	e7dc      	b.n	801373a <__b2d+0x4e>
 8013780:	3ff00000 	.word	0x3ff00000

08013784 <__d2b>:
 8013784:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013786:	2101      	movs	r1, #1
 8013788:	0014      	movs	r4, r2
 801378a:	001d      	movs	r5, r3
 801378c:	9f08      	ldr	r7, [sp, #32]
 801378e:	f7ff fc0b 	bl	8012fa8 <_Balloc>
 8013792:	1e06      	subs	r6, r0, #0
 8013794:	d105      	bne.n	80137a2 <__d2b+0x1e>
 8013796:	0032      	movs	r2, r6
 8013798:	4b24      	ldr	r3, [pc, #144]	; (801382c <__d2b+0xa8>)
 801379a:	4825      	ldr	r0, [pc, #148]	; (8013830 <__d2b+0xac>)
 801379c:	4925      	ldr	r1, [pc, #148]	; (8013834 <__d2b+0xb0>)
 801379e:	f001 fb7d 	bl	8014e9c <__assert_func>
 80137a2:	032b      	lsls	r3, r5, #12
 80137a4:	006d      	lsls	r5, r5, #1
 80137a6:	0b1b      	lsrs	r3, r3, #12
 80137a8:	0d6d      	lsrs	r5, r5, #21
 80137aa:	d125      	bne.n	80137f8 <__d2b+0x74>
 80137ac:	9301      	str	r3, [sp, #4]
 80137ae:	2c00      	cmp	r4, #0
 80137b0:	d028      	beq.n	8013804 <__d2b+0x80>
 80137b2:	4668      	mov	r0, sp
 80137b4:	9400      	str	r4, [sp, #0]
 80137b6:	f7ff fd09 	bl	80131cc <__lo0bits>
 80137ba:	9b01      	ldr	r3, [sp, #4]
 80137bc:	9900      	ldr	r1, [sp, #0]
 80137be:	2800      	cmp	r0, #0
 80137c0:	d01e      	beq.n	8013800 <__d2b+0x7c>
 80137c2:	2220      	movs	r2, #32
 80137c4:	001c      	movs	r4, r3
 80137c6:	1a12      	subs	r2, r2, r0
 80137c8:	4094      	lsls	r4, r2
 80137ca:	0022      	movs	r2, r4
 80137cc:	40c3      	lsrs	r3, r0
 80137ce:	430a      	orrs	r2, r1
 80137d0:	6172      	str	r2, [r6, #20]
 80137d2:	9301      	str	r3, [sp, #4]
 80137d4:	9c01      	ldr	r4, [sp, #4]
 80137d6:	61b4      	str	r4, [r6, #24]
 80137d8:	1e63      	subs	r3, r4, #1
 80137da:	419c      	sbcs	r4, r3
 80137dc:	3401      	adds	r4, #1
 80137de:	6134      	str	r4, [r6, #16]
 80137e0:	2d00      	cmp	r5, #0
 80137e2:	d017      	beq.n	8013814 <__d2b+0x90>
 80137e4:	2435      	movs	r4, #53	; 0x35
 80137e6:	4b14      	ldr	r3, [pc, #80]	; (8013838 <__d2b+0xb4>)
 80137e8:	18ed      	adds	r5, r5, r3
 80137ea:	182d      	adds	r5, r5, r0
 80137ec:	603d      	str	r5, [r7, #0]
 80137ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80137f0:	1a24      	subs	r4, r4, r0
 80137f2:	601c      	str	r4, [r3, #0]
 80137f4:	0030      	movs	r0, r6
 80137f6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80137f8:	2280      	movs	r2, #128	; 0x80
 80137fa:	0352      	lsls	r2, r2, #13
 80137fc:	4313      	orrs	r3, r2
 80137fe:	e7d5      	b.n	80137ac <__d2b+0x28>
 8013800:	6171      	str	r1, [r6, #20]
 8013802:	e7e7      	b.n	80137d4 <__d2b+0x50>
 8013804:	a801      	add	r0, sp, #4
 8013806:	f7ff fce1 	bl	80131cc <__lo0bits>
 801380a:	9b01      	ldr	r3, [sp, #4]
 801380c:	2401      	movs	r4, #1
 801380e:	6173      	str	r3, [r6, #20]
 8013810:	3020      	adds	r0, #32
 8013812:	e7e4      	b.n	80137de <__d2b+0x5a>
 8013814:	4b09      	ldr	r3, [pc, #36]	; (801383c <__d2b+0xb8>)
 8013816:	18c0      	adds	r0, r0, r3
 8013818:	4b09      	ldr	r3, [pc, #36]	; (8013840 <__d2b+0xbc>)
 801381a:	6038      	str	r0, [r7, #0]
 801381c:	18e3      	adds	r3, r4, r3
 801381e:	009b      	lsls	r3, r3, #2
 8013820:	18f3      	adds	r3, r6, r3
 8013822:	6958      	ldr	r0, [r3, #20]
 8013824:	f7ff fcb8 	bl	8013198 <__hi0bits>
 8013828:	0164      	lsls	r4, r4, #5
 801382a:	e7e0      	b.n	80137ee <__d2b+0x6a>
 801382c:	08016bd1 	.word	0x08016bd1
 8013830:	08016be2 	.word	0x08016be2
 8013834:	0000030f 	.word	0x0000030f
 8013838:	fffffbcd 	.word	0xfffffbcd
 801383c:	fffffbce 	.word	0xfffffbce
 8013840:	3fffffff 	.word	0x3fffffff

08013844 <__ratio>:
 8013844:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013846:	b087      	sub	sp, #28
 8013848:	000f      	movs	r7, r1
 801384a:	a904      	add	r1, sp, #16
 801384c:	0006      	movs	r6, r0
 801384e:	f7ff ff4d 	bl	80136ec <__b2d>
 8013852:	9000      	str	r0, [sp, #0]
 8013854:	9101      	str	r1, [sp, #4]
 8013856:	9c00      	ldr	r4, [sp, #0]
 8013858:	9d01      	ldr	r5, [sp, #4]
 801385a:	0038      	movs	r0, r7
 801385c:	a905      	add	r1, sp, #20
 801385e:	f7ff ff45 	bl	80136ec <__b2d>
 8013862:	9002      	str	r0, [sp, #8]
 8013864:	9103      	str	r1, [sp, #12]
 8013866:	9a02      	ldr	r2, [sp, #8]
 8013868:	9b03      	ldr	r3, [sp, #12]
 801386a:	6930      	ldr	r0, [r6, #16]
 801386c:	6939      	ldr	r1, [r7, #16]
 801386e:	9e04      	ldr	r6, [sp, #16]
 8013870:	1a40      	subs	r0, r0, r1
 8013872:	9905      	ldr	r1, [sp, #20]
 8013874:	0140      	lsls	r0, r0, #5
 8013876:	1a71      	subs	r1, r6, r1
 8013878:	1841      	adds	r1, r0, r1
 801387a:	0508      	lsls	r0, r1, #20
 801387c:	2900      	cmp	r1, #0
 801387e:	dd07      	ble.n	8013890 <__ratio+0x4c>
 8013880:	9901      	ldr	r1, [sp, #4]
 8013882:	1845      	adds	r5, r0, r1
 8013884:	0020      	movs	r0, r4
 8013886:	0029      	movs	r1, r5
 8013888:	f7f1 f9da 	bl	8004c40 <__aeabi_ddiv>
 801388c:	b007      	add	sp, #28
 801388e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013890:	9903      	ldr	r1, [sp, #12]
 8013892:	1a0b      	subs	r3, r1, r0
 8013894:	e7f6      	b.n	8013884 <__ratio+0x40>

08013896 <__copybits>:
 8013896:	b570      	push	{r4, r5, r6, lr}
 8013898:	0014      	movs	r4, r2
 801389a:	0005      	movs	r5, r0
 801389c:	3901      	subs	r1, #1
 801389e:	6913      	ldr	r3, [r2, #16]
 80138a0:	1149      	asrs	r1, r1, #5
 80138a2:	3101      	adds	r1, #1
 80138a4:	0089      	lsls	r1, r1, #2
 80138a6:	3414      	adds	r4, #20
 80138a8:	009b      	lsls	r3, r3, #2
 80138aa:	1841      	adds	r1, r0, r1
 80138ac:	18e3      	adds	r3, r4, r3
 80138ae:	42a3      	cmp	r3, r4
 80138b0:	d80d      	bhi.n	80138ce <__copybits+0x38>
 80138b2:	0014      	movs	r4, r2
 80138b4:	3411      	adds	r4, #17
 80138b6:	2500      	movs	r5, #0
 80138b8:	429c      	cmp	r4, r3
 80138ba:	d803      	bhi.n	80138c4 <__copybits+0x2e>
 80138bc:	1a9b      	subs	r3, r3, r2
 80138be:	3b11      	subs	r3, #17
 80138c0:	089b      	lsrs	r3, r3, #2
 80138c2:	009d      	lsls	r5, r3, #2
 80138c4:	2300      	movs	r3, #0
 80138c6:	1940      	adds	r0, r0, r5
 80138c8:	4281      	cmp	r1, r0
 80138ca:	d803      	bhi.n	80138d4 <__copybits+0x3e>
 80138cc:	bd70      	pop	{r4, r5, r6, pc}
 80138ce:	cc40      	ldmia	r4!, {r6}
 80138d0:	c540      	stmia	r5!, {r6}
 80138d2:	e7ec      	b.n	80138ae <__copybits+0x18>
 80138d4:	c008      	stmia	r0!, {r3}
 80138d6:	e7f7      	b.n	80138c8 <__copybits+0x32>

080138d8 <__any_on>:
 80138d8:	0002      	movs	r2, r0
 80138da:	6900      	ldr	r0, [r0, #16]
 80138dc:	b510      	push	{r4, lr}
 80138de:	3214      	adds	r2, #20
 80138e0:	114b      	asrs	r3, r1, #5
 80138e2:	4298      	cmp	r0, r3
 80138e4:	db13      	blt.n	801390e <__any_on+0x36>
 80138e6:	dd0c      	ble.n	8013902 <__any_on+0x2a>
 80138e8:	241f      	movs	r4, #31
 80138ea:	0008      	movs	r0, r1
 80138ec:	4020      	ands	r0, r4
 80138ee:	4221      	tst	r1, r4
 80138f0:	d007      	beq.n	8013902 <__any_on+0x2a>
 80138f2:	0099      	lsls	r1, r3, #2
 80138f4:	588c      	ldr	r4, [r1, r2]
 80138f6:	0021      	movs	r1, r4
 80138f8:	40c1      	lsrs	r1, r0
 80138fa:	4081      	lsls	r1, r0
 80138fc:	2001      	movs	r0, #1
 80138fe:	428c      	cmp	r4, r1
 8013900:	d104      	bne.n	801390c <__any_on+0x34>
 8013902:	009b      	lsls	r3, r3, #2
 8013904:	18d3      	adds	r3, r2, r3
 8013906:	4293      	cmp	r3, r2
 8013908:	d803      	bhi.n	8013912 <__any_on+0x3a>
 801390a:	2000      	movs	r0, #0
 801390c:	bd10      	pop	{r4, pc}
 801390e:	0003      	movs	r3, r0
 8013910:	e7f7      	b.n	8013902 <__any_on+0x2a>
 8013912:	3b04      	subs	r3, #4
 8013914:	6819      	ldr	r1, [r3, #0]
 8013916:	2900      	cmp	r1, #0
 8013918:	d0f5      	beq.n	8013906 <__any_on+0x2e>
 801391a:	2001      	movs	r0, #1
 801391c:	e7f6      	b.n	801390c <__any_on+0x34>
	...

08013920 <sulp>:
 8013920:	b570      	push	{r4, r5, r6, lr}
 8013922:	0016      	movs	r6, r2
 8013924:	000d      	movs	r5, r1
 8013926:	f7ff fec5 	bl	80136b4 <__ulp>
 801392a:	2e00      	cmp	r6, #0
 801392c:	d00d      	beq.n	801394a <sulp+0x2a>
 801392e:	236b      	movs	r3, #107	; 0x6b
 8013930:	006a      	lsls	r2, r5, #1
 8013932:	0d52      	lsrs	r2, r2, #21
 8013934:	1a9b      	subs	r3, r3, r2
 8013936:	2b00      	cmp	r3, #0
 8013938:	dd07      	ble.n	801394a <sulp+0x2a>
 801393a:	2400      	movs	r4, #0
 801393c:	4a03      	ldr	r2, [pc, #12]	; (801394c <sulp+0x2c>)
 801393e:	051b      	lsls	r3, r3, #20
 8013940:	189d      	adds	r5, r3, r2
 8013942:	002b      	movs	r3, r5
 8013944:	0022      	movs	r2, r4
 8013946:	f7f1 fd75 	bl	8005434 <__aeabi_dmul>
 801394a:	bd70      	pop	{r4, r5, r6, pc}
 801394c:	3ff00000 	.word	0x3ff00000

08013950 <_strtod_l>:
 8013950:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013952:	b0a1      	sub	sp, #132	; 0x84
 8013954:	9219      	str	r2, [sp, #100]	; 0x64
 8013956:	2200      	movs	r2, #0
 8013958:	2600      	movs	r6, #0
 801395a:	2700      	movs	r7, #0
 801395c:	9004      	str	r0, [sp, #16]
 801395e:	9107      	str	r1, [sp, #28]
 8013960:	921c      	str	r2, [sp, #112]	; 0x70
 8013962:	911b      	str	r1, [sp, #108]	; 0x6c
 8013964:	780a      	ldrb	r2, [r1, #0]
 8013966:	2a2b      	cmp	r2, #43	; 0x2b
 8013968:	d055      	beq.n	8013a16 <_strtod_l+0xc6>
 801396a:	d841      	bhi.n	80139f0 <_strtod_l+0xa0>
 801396c:	2a0d      	cmp	r2, #13
 801396e:	d83b      	bhi.n	80139e8 <_strtod_l+0x98>
 8013970:	2a08      	cmp	r2, #8
 8013972:	d83b      	bhi.n	80139ec <_strtod_l+0x9c>
 8013974:	2a00      	cmp	r2, #0
 8013976:	d044      	beq.n	8013a02 <_strtod_l+0xb2>
 8013978:	2200      	movs	r2, #0
 801397a:	920f      	str	r2, [sp, #60]	; 0x3c
 801397c:	2100      	movs	r1, #0
 801397e:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8013980:	9109      	str	r1, [sp, #36]	; 0x24
 8013982:	782a      	ldrb	r2, [r5, #0]
 8013984:	2a30      	cmp	r2, #48	; 0x30
 8013986:	d000      	beq.n	801398a <_strtod_l+0x3a>
 8013988:	e085      	b.n	8013a96 <_strtod_l+0x146>
 801398a:	786a      	ldrb	r2, [r5, #1]
 801398c:	3120      	adds	r1, #32
 801398e:	438a      	bics	r2, r1
 8013990:	2a58      	cmp	r2, #88	; 0x58
 8013992:	d000      	beq.n	8013996 <_strtod_l+0x46>
 8013994:	e075      	b.n	8013a82 <_strtod_l+0x132>
 8013996:	9302      	str	r3, [sp, #8]
 8013998:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801399a:	4a97      	ldr	r2, [pc, #604]	; (8013bf8 <_strtod_l+0x2a8>)
 801399c:	9301      	str	r3, [sp, #4]
 801399e:	ab1c      	add	r3, sp, #112	; 0x70
 80139a0:	9300      	str	r3, [sp, #0]
 80139a2:	9804      	ldr	r0, [sp, #16]
 80139a4:	ab1d      	add	r3, sp, #116	; 0x74
 80139a6:	a91b      	add	r1, sp, #108	; 0x6c
 80139a8:	f001 fb2e 	bl	8015008 <__gethex>
 80139ac:	230f      	movs	r3, #15
 80139ae:	0002      	movs	r2, r0
 80139b0:	401a      	ands	r2, r3
 80139b2:	0004      	movs	r4, r0
 80139b4:	9205      	str	r2, [sp, #20]
 80139b6:	4218      	tst	r0, r3
 80139b8:	d005      	beq.n	80139c6 <_strtod_l+0x76>
 80139ba:	2a06      	cmp	r2, #6
 80139bc:	d12d      	bne.n	8013a1a <_strtod_l+0xca>
 80139be:	1c6b      	adds	r3, r5, #1
 80139c0:	931b      	str	r3, [sp, #108]	; 0x6c
 80139c2:	2300      	movs	r3, #0
 80139c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80139c6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80139c8:	2b00      	cmp	r3, #0
 80139ca:	d002      	beq.n	80139d2 <_strtod_l+0x82>
 80139cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80139ce:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80139d0:	6013      	str	r3, [r2, #0]
 80139d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	d01b      	beq.n	8013a10 <_strtod_l+0xc0>
 80139d8:	2380      	movs	r3, #128	; 0x80
 80139da:	0032      	movs	r2, r6
 80139dc:	061b      	lsls	r3, r3, #24
 80139de:	18fb      	adds	r3, r7, r3
 80139e0:	0010      	movs	r0, r2
 80139e2:	0019      	movs	r1, r3
 80139e4:	b021      	add	sp, #132	; 0x84
 80139e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80139e8:	2a20      	cmp	r2, #32
 80139ea:	d1c5      	bne.n	8013978 <_strtod_l+0x28>
 80139ec:	3101      	adds	r1, #1
 80139ee:	e7b8      	b.n	8013962 <_strtod_l+0x12>
 80139f0:	2a2d      	cmp	r2, #45	; 0x2d
 80139f2:	d1c1      	bne.n	8013978 <_strtod_l+0x28>
 80139f4:	3a2c      	subs	r2, #44	; 0x2c
 80139f6:	920f      	str	r2, [sp, #60]	; 0x3c
 80139f8:	1c4a      	adds	r2, r1, #1
 80139fa:	921b      	str	r2, [sp, #108]	; 0x6c
 80139fc:	784a      	ldrb	r2, [r1, #1]
 80139fe:	2a00      	cmp	r2, #0
 8013a00:	d1bc      	bne.n	801397c <_strtod_l+0x2c>
 8013a02:	9b07      	ldr	r3, [sp, #28]
 8013a04:	931b      	str	r3, [sp, #108]	; 0x6c
 8013a06:	2300      	movs	r3, #0
 8013a08:	930f      	str	r3, [sp, #60]	; 0x3c
 8013a0a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013a0c:	2b00      	cmp	r3, #0
 8013a0e:	d1dd      	bne.n	80139cc <_strtod_l+0x7c>
 8013a10:	0032      	movs	r2, r6
 8013a12:	003b      	movs	r3, r7
 8013a14:	e7e4      	b.n	80139e0 <_strtod_l+0x90>
 8013a16:	2200      	movs	r2, #0
 8013a18:	e7ed      	b.n	80139f6 <_strtod_l+0xa6>
 8013a1a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8013a1c:	2a00      	cmp	r2, #0
 8013a1e:	d007      	beq.n	8013a30 <_strtod_l+0xe0>
 8013a20:	2135      	movs	r1, #53	; 0x35
 8013a22:	a81e      	add	r0, sp, #120	; 0x78
 8013a24:	f7ff ff37 	bl	8013896 <__copybits>
 8013a28:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013a2a:	9804      	ldr	r0, [sp, #16]
 8013a2c:	f7ff fb00 	bl	8013030 <_Bfree>
 8013a30:	9805      	ldr	r0, [sp, #20]
 8013a32:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013a34:	3801      	subs	r0, #1
 8013a36:	2804      	cmp	r0, #4
 8013a38:	d806      	bhi.n	8013a48 <_strtod_l+0xf8>
 8013a3a:	f7ef fb13 	bl	8003064 <__gnu_thumb1_case_uqi>
 8013a3e:	0312      	.short	0x0312
 8013a40:	1e1c      	.short	0x1e1c
 8013a42:	12          	.byte	0x12
 8013a43:	00          	.byte	0x00
 8013a44:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8013a46:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 8013a48:	05e4      	lsls	r4, r4, #23
 8013a4a:	d502      	bpl.n	8013a52 <_strtod_l+0x102>
 8013a4c:	2380      	movs	r3, #128	; 0x80
 8013a4e:	061b      	lsls	r3, r3, #24
 8013a50:	431f      	orrs	r7, r3
 8013a52:	4b6a      	ldr	r3, [pc, #424]	; (8013bfc <_strtod_l+0x2ac>)
 8013a54:	423b      	tst	r3, r7
 8013a56:	d1b6      	bne.n	80139c6 <_strtod_l+0x76>
 8013a58:	f7fe fac0 	bl	8011fdc <__errno>
 8013a5c:	2322      	movs	r3, #34	; 0x22
 8013a5e:	6003      	str	r3, [r0, #0]
 8013a60:	e7b1      	b.n	80139c6 <_strtod_l+0x76>
 8013a62:	4967      	ldr	r1, [pc, #412]	; (8013c00 <_strtod_l+0x2b0>)
 8013a64:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8013a66:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8013a68:	400a      	ands	r2, r1
 8013a6a:	4966      	ldr	r1, [pc, #408]	; (8013c04 <_strtod_l+0x2b4>)
 8013a6c:	185b      	adds	r3, r3, r1
 8013a6e:	051b      	lsls	r3, r3, #20
 8013a70:	431a      	orrs	r2, r3
 8013a72:	0017      	movs	r7, r2
 8013a74:	e7e8      	b.n	8013a48 <_strtod_l+0xf8>
 8013a76:	4f61      	ldr	r7, [pc, #388]	; (8013bfc <_strtod_l+0x2ac>)
 8013a78:	e7e6      	b.n	8013a48 <_strtod_l+0xf8>
 8013a7a:	2601      	movs	r6, #1
 8013a7c:	4f62      	ldr	r7, [pc, #392]	; (8013c08 <_strtod_l+0x2b8>)
 8013a7e:	4276      	negs	r6, r6
 8013a80:	e7e2      	b.n	8013a48 <_strtod_l+0xf8>
 8013a82:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013a84:	1c5a      	adds	r2, r3, #1
 8013a86:	921b      	str	r2, [sp, #108]	; 0x6c
 8013a88:	785b      	ldrb	r3, [r3, #1]
 8013a8a:	2b30      	cmp	r3, #48	; 0x30
 8013a8c:	d0f9      	beq.n	8013a82 <_strtod_l+0x132>
 8013a8e:	2b00      	cmp	r3, #0
 8013a90:	d099      	beq.n	80139c6 <_strtod_l+0x76>
 8013a92:	2301      	movs	r3, #1
 8013a94:	9309      	str	r3, [sp, #36]	; 0x24
 8013a96:	2500      	movs	r5, #0
 8013a98:	220a      	movs	r2, #10
 8013a9a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013a9c:	950d      	str	r5, [sp, #52]	; 0x34
 8013a9e:	9310      	str	r3, [sp, #64]	; 0x40
 8013aa0:	9508      	str	r5, [sp, #32]
 8013aa2:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8013aa4:	7804      	ldrb	r4, [r0, #0]
 8013aa6:	0023      	movs	r3, r4
 8013aa8:	3b30      	subs	r3, #48	; 0x30
 8013aaa:	b2d9      	uxtb	r1, r3
 8013aac:	2909      	cmp	r1, #9
 8013aae:	d927      	bls.n	8013b00 <_strtod_l+0x1b0>
 8013ab0:	2201      	movs	r2, #1
 8013ab2:	4956      	ldr	r1, [pc, #344]	; (8013c0c <_strtod_l+0x2bc>)
 8013ab4:	f001 f9aa 	bl	8014e0c <strncmp>
 8013ab8:	2800      	cmp	r0, #0
 8013aba:	d031      	beq.n	8013b20 <_strtod_l+0x1d0>
 8013abc:	2000      	movs	r0, #0
 8013abe:	0023      	movs	r3, r4
 8013ac0:	4684      	mov	ip, r0
 8013ac2:	9a08      	ldr	r2, [sp, #32]
 8013ac4:	900c      	str	r0, [sp, #48]	; 0x30
 8013ac6:	9205      	str	r2, [sp, #20]
 8013ac8:	2220      	movs	r2, #32
 8013aca:	0019      	movs	r1, r3
 8013acc:	4391      	bics	r1, r2
 8013ace:	000a      	movs	r2, r1
 8013ad0:	2100      	movs	r1, #0
 8013ad2:	9106      	str	r1, [sp, #24]
 8013ad4:	2a45      	cmp	r2, #69	; 0x45
 8013ad6:	d000      	beq.n	8013ada <_strtod_l+0x18a>
 8013ad8:	e0c2      	b.n	8013c60 <_strtod_l+0x310>
 8013ada:	9b05      	ldr	r3, [sp, #20]
 8013adc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013ade:	4303      	orrs	r3, r0
 8013ae0:	4313      	orrs	r3, r2
 8013ae2:	428b      	cmp	r3, r1
 8013ae4:	d08d      	beq.n	8013a02 <_strtod_l+0xb2>
 8013ae6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013ae8:	9307      	str	r3, [sp, #28]
 8013aea:	3301      	adds	r3, #1
 8013aec:	931b      	str	r3, [sp, #108]	; 0x6c
 8013aee:	9b07      	ldr	r3, [sp, #28]
 8013af0:	785b      	ldrb	r3, [r3, #1]
 8013af2:	2b2b      	cmp	r3, #43	; 0x2b
 8013af4:	d071      	beq.n	8013bda <_strtod_l+0x28a>
 8013af6:	000c      	movs	r4, r1
 8013af8:	2b2d      	cmp	r3, #45	; 0x2d
 8013afa:	d174      	bne.n	8013be6 <_strtod_l+0x296>
 8013afc:	2401      	movs	r4, #1
 8013afe:	e06d      	b.n	8013bdc <_strtod_l+0x28c>
 8013b00:	9908      	ldr	r1, [sp, #32]
 8013b02:	2908      	cmp	r1, #8
 8013b04:	dc09      	bgt.n	8013b1a <_strtod_l+0x1ca>
 8013b06:	990d      	ldr	r1, [sp, #52]	; 0x34
 8013b08:	4351      	muls	r1, r2
 8013b0a:	185b      	adds	r3, r3, r1
 8013b0c:	930d      	str	r3, [sp, #52]	; 0x34
 8013b0e:	9b08      	ldr	r3, [sp, #32]
 8013b10:	3001      	adds	r0, #1
 8013b12:	3301      	adds	r3, #1
 8013b14:	9308      	str	r3, [sp, #32]
 8013b16:	901b      	str	r0, [sp, #108]	; 0x6c
 8013b18:	e7c3      	b.n	8013aa2 <_strtod_l+0x152>
 8013b1a:	4355      	muls	r5, r2
 8013b1c:	195d      	adds	r5, r3, r5
 8013b1e:	e7f6      	b.n	8013b0e <_strtod_l+0x1be>
 8013b20:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013b22:	1c5a      	adds	r2, r3, #1
 8013b24:	921b      	str	r2, [sp, #108]	; 0x6c
 8013b26:	9a08      	ldr	r2, [sp, #32]
 8013b28:	785b      	ldrb	r3, [r3, #1]
 8013b2a:	2a00      	cmp	r2, #0
 8013b2c:	d03a      	beq.n	8013ba4 <_strtod_l+0x254>
 8013b2e:	900c      	str	r0, [sp, #48]	; 0x30
 8013b30:	9205      	str	r2, [sp, #20]
 8013b32:	001a      	movs	r2, r3
 8013b34:	3a30      	subs	r2, #48	; 0x30
 8013b36:	2a09      	cmp	r2, #9
 8013b38:	d912      	bls.n	8013b60 <_strtod_l+0x210>
 8013b3a:	2201      	movs	r2, #1
 8013b3c:	4694      	mov	ip, r2
 8013b3e:	e7c3      	b.n	8013ac8 <_strtod_l+0x178>
 8013b40:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013b42:	3001      	adds	r0, #1
 8013b44:	1c5a      	adds	r2, r3, #1
 8013b46:	921b      	str	r2, [sp, #108]	; 0x6c
 8013b48:	785b      	ldrb	r3, [r3, #1]
 8013b4a:	2b30      	cmp	r3, #48	; 0x30
 8013b4c:	d0f8      	beq.n	8013b40 <_strtod_l+0x1f0>
 8013b4e:	001a      	movs	r2, r3
 8013b50:	3a31      	subs	r2, #49	; 0x31
 8013b52:	2a08      	cmp	r2, #8
 8013b54:	d83c      	bhi.n	8013bd0 <_strtod_l+0x280>
 8013b56:	900c      	str	r0, [sp, #48]	; 0x30
 8013b58:	2000      	movs	r0, #0
 8013b5a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8013b5c:	9005      	str	r0, [sp, #20]
 8013b5e:	9210      	str	r2, [sp, #64]	; 0x40
 8013b60:	001a      	movs	r2, r3
 8013b62:	1c41      	adds	r1, r0, #1
 8013b64:	3a30      	subs	r2, #48	; 0x30
 8013b66:	2b30      	cmp	r3, #48	; 0x30
 8013b68:	d016      	beq.n	8013b98 <_strtod_l+0x248>
 8013b6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013b6c:	185b      	adds	r3, r3, r1
 8013b6e:	930c      	str	r3, [sp, #48]	; 0x30
 8013b70:	9b05      	ldr	r3, [sp, #20]
 8013b72:	210a      	movs	r1, #10
 8013b74:	469c      	mov	ip, r3
 8013b76:	4484      	add	ip, r0
 8013b78:	4563      	cmp	r3, ip
 8013b7a:	d115      	bne.n	8013ba8 <_strtod_l+0x258>
 8013b7c:	9905      	ldr	r1, [sp, #20]
 8013b7e:	9b05      	ldr	r3, [sp, #20]
 8013b80:	3101      	adds	r1, #1
 8013b82:	1809      	adds	r1, r1, r0
 8013b84:	181b      	adds	r3, r3, r0
 8013b86:	9105      	str	r1, [sp, #20]
 8013b88:	2b08      	cmp	r3, #8
 8013b8a:	dc19      	bgt.n	8013bc0 <_strtod_l+0x270>
 8013b8c:	230a      	movs	r3, #10
 8013b8e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8013b90:	434b      	muls	r3, r1
 8013b92:	2100      	movs	r1, #0
 8013b94:	18d3      	adds	r3, r2, r3
 8013b96:	930d      	str	r3, [sp, #52]	; 0x34
 8013b98:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013b9a:	0008      	movs	r0, r1
 8013b9c:	1c5a      	adds	r2, r3, #1
 8013b9e:	921b      	str	r2, [sp, #108]	; 0x6c
 8013ba0:	785b      	ldrb	r3, [r3, #1]
 8013ba2:	e7c6      	b.n	8013b32 <_strtod_l+0x1e2>
 8013ba4:	9808      	ldr	r0, [sp, #32]
 8013ba6:	e7d0      	b.n	8013b4a <_strtod_l+0x1fa>
 8013ba8:	1c5c      	adds	r4, r3, #1
 8013baa:	2b08      	cmp	r3, #8
 8013bac:	dc04      	bgt.n	8013bb8 <_strtod_l+0x268>
 8013bae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013bb0:	434b      	muls	r3, r1
 8013bb2:	930d      	str	r3, [sp, #52]	; 0x34
 8013bb4:	0023      	movs	r3, r4
 8013bb6:	e7df      	b.n	8013b78 <_strtod_l+0x228>
 8013bb8:	2c10      	cmp	r4, #16
 8013bba:	dcfb      	bgt.n	8013bb4 <_strtod_l+0x264>
 8013bbc:	434d      	muls	r5, r1
 8013bbe:	e7f9      	b.n	8013bb4 <_strtod_l+0x264>
 8013bc0:	9b05      	ldr	r3, [sp, #20]
 8013bc2:	2100      	movs	r1, #0
 8013bc4:	2b10      	cmp	r3, #16
 8013bc6:	dce7      	bgt.n	8013b98 <_strtod_l+0x248>
 8013bc8:	230a      	movs	r3, #10
 8013bca:	435d      	muls	r5, r3
 8013bcc:	1955      	adds	r5, r2, r5
 8013bce:	e7e3      	b.n	8013b98 <_strtod_l+0x248>
 8013bd0:	2200      	movs	r2, #0
 8013bd2:	920c      	str	r2, [sp, #48]	; 0x30
 8013bd4:	9205      	str	r2, [sp, #20]
 8013bd6:	3201      	adds	r2, #1
 8013bd8:	e7b0      	b.n	8013b3c <_strtod_l+0x1ec>
 8013bda:	2400      	movs	r4, #0
 8013bdc:	9b07      	ldr	r3, [sp, #28]
 8013bde:	3302      	adds	r3, #2
 8013be0:	931b      	str	r3, [sp, #108]	; 0x6c
 8013be2:	9b07      	ldr	r3, [sp, #28]
 8013be4:	789b      	ldrb	r3, [r3, #2]
 8013be6:	001a      	movs	r2, r3
 8013be8:	3a30      	subs	r2, #48	; 0x30
 8013bea:	2a09      	cmp	r2, #9
 8013bec:	d914      	bls.n	8013c18 <_strtod_l+0x2c8>
 8013bee:	9a07      	ldr	r2, [sp, #28]
 8013bf0:	921b      	str	r2, [sp, #108]	; 0x6c
 8013bf2:	2200      	movs	r2, #0
 8013bf4:	e033      	b.n	8013c5e <_strtod_l+0x30e>
 8013bf6:	46c0      	nop			; (mov r8, r8)
 8013bf8:	08016d40 	.word	0x08016d40
 8013bfc:	7ff00000 	.word	0x7ff00000
 8013c00:	ffefffff 	.word	0xffefffff
 8013c04:	00000433 	.word	0x00000433
 8013c08:	7fffffff 	.word	0x7fffffff
 8013c0c:	08016d3c 	.word	0x08016d3c
 8013c10:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013c12:	1c5a      	adds	r2, r3, #1
 8013c14:	921b      	str	r2, [sp, #108]	; 0x6c
 8013c16:	785b      	ldrb	r3, [r3, #1]
 8013c18:	2b30      	cmp	r3, #48	; 0x30
 8013c1a:	d0f9      	beq.n	8013c10 <_strtod_l+0x2c0>
 8013c1c:	2200      	movs	r2, #0
 8013c1e:	9206      	str	r2, [sp, #24]
 8013c20:	001a      	movs	r2, r3
 8013c22:	3a31      	subs	r2, #49	; 0x31
 8013c24:	2a08      	cmp	r2, #8
 8013c26:	d81b      	bhi.n	8013c60 <_strtod_l+0x310>
 8013c28:	3b30      	subs	r3, #48	; 0x30
 8013c2a:	930e      	str	r3, [sp, #56]	; 0x38
 8013c2c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013c2e:	9306      	str	r3, [sp, #24]
 8013c30:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013c32:	1c59      	adds	r1, r3, #1
 8013c34:	911b      	str	r1, [sp, #108]	; 0x6c
 8013c36:	785b      	ldrb	r3, [r3, #1]
 8013c38:	001a      	movs	r2, r3
 8013c3a:	3a30      	subs	r2, #48	; 0x30
 8013c3c:	2a09      	cmp	r2, #9
 8013c3e:	d93a      	bls.n	8013cb6 <_strtod_l+0x366>
 8013c40:	9a06      	ldr	r2, [sp, #24]
 8013c42:	1a8a      	subs	r2, r1, r2
 8013c44:	49b2      	ldr	r1, [pc, #712]	; (8013f10 <_strtod_l+0x5c0>)
 8013c46:	9106      	str	r1, [sp, #24]
 8013c48:	2a08      	cmp	r2, #8
 8013c4a:	dc04      	bgt.n	8013c56 <_strtod_l+0x306>
 8013c4c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013c4e:	9206      	str	r2, [sp, #24]
 8013c50:	428a      	cmp	r2, r1
 8013c52:	dd00      	ble.n	8013c56 <_strtod_l+0x306>
 8013c54:	9106      	str	r1, [sp, #24]
 8013c56:	2c00      	cmp	r4, #0
 8013c58:	d002      	beq.n	8013c60 <_strtod_l+0x310>
 8013c5a:	9a06      	ldr	r2, [sp, #24]
 8013c5c:	4252      	negs	r2, r2
 8013c5e:	9206      	str	r2, [sp, #24]
 8013c60:	9a05      	ldr	r2, [sp, #20]
 8013c62:	2a00      	cmp	r2, #0
 8013c64:	d14d      	bne.n	8013d02 <_strtod_l+0x3b2>
 8013c66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013c68:	4310      	orrs	r0, r2
 8013c6a:	d000      	beq.n	8013c6e <_strtod_l+0x31e>
 8013c6c:	e6ab      	b.n	80139c6 <_strtod_l+0x76>
 8013c6e:	4662      	mov	r2, ip
 8013c70:	2a00      	cmp	r2, #0
 8013c72:	d000      	beq.n	8013c76 <_strtod_l+0x326>
 8013c74:	e6c5      	b.n	8013a02 <_strtod_l+0xb2>
 8013c76:	2b69      	cmp	r3, #105	; 0x69
 8013c78:	d027      	beq.n	8013cca <_strtod_l+0x37a>
 8013c7a:	dc23      	bgt.n	8013cc4 <_strtod_l+0x374>
 8013c7c:	2b49      	cmp	r3, #73	; 0x49
 8013c7e:	d024      	beq.n	8013cca <_strtod_l+0x37a>
 8013c80:	2b4e      	cmp	r3, #78	; 0x4e
 8013c82:	d000      	beq.n	8013c86 <_strtod_l+0x336>
 8013c84:	e6bd      	b.n	8013a02 <_strtod_l+0xb2>
 8013c86:	49a3      	ldr	r1, [pc, #652]	; (8013f14 <_strtod_l+0x5c4>)
 8013c88:	a81b      	add	r0, sp, #108	; 0x6c
 8013c8a:	f001 fbf3 	bl	8015474 <__match>
 8013c8e:	2800      	cmp	r0, #0
 8013c90:	d100      	bne.n	8013c94 <_strtod_l+0x344>
 8013c92:	e6b6      	b.n	8013a02 <_strtod_l+0xb2>
 8013c94:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013c96:	781b      	ldrb	r3, [r3, #0]
 8013c98:	2b28      	cmp	r3, #40	; 0x28
 8013c9a:	d12c      	bne.n	8013cf6 <_strtod_l+0x3a6>
 8013c9c:	499e      	ldr	r1, [pc, #632]	; (8013f18 <_strtod_l+0x5c8>)
 8013c9e:	aa1e      	add	r2, sp, #120	; 0x78
 8013ca0:	a81b      	add	r0, sp, #108	; 0x6c
 8013ca2:	f001 fbfb 	bl	801549c <__hexnan>
 8013ca6:	2805      	cmp	r0, #5
 8013ca8:	d125      	bne.n	8013cf6 <_strtod_l+0x3a6>
 8013caa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013cac:	4a9b      	ldr	r2, [pc, #620]	; (8013f1c <_strtod_l+0x5cc>)
 8013cae:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8013cb0:	431a      	orrs	r2, r3
 8013cb2:	0017      	movs	r7, r2
 8013cb4:	e687      	b.n	80139c6 <_strtod_l+0x76>
 8013cb6:	220a      	movs	r2, #10
 8013cb8:	990e      	ldr	r1, [sp, #56]	; 0x38
 8013cba:	434a      	muls	r2, r1
 8013cbc:	18d2      	adds	r2, r2, r3
 8013cbe:	3a30      	subs	r2, #48	; 0x30
 8013cc0:	920e      	str	r2, [sp, #56]	; 0x38
 8013cc2:	e7b5      	b.n	8013c30 <_strtod_l+0x2e0>
 8013cc4:	2b6e      	cmp	r3, #110	; 0x6e
 8013cc6:	d0de      	beq.n	8013c86 <_strtod_l+0x336>
 8013cc8:	e69b      	b.n	8013a02 <_strtod_l+0xb2>
 8013cca:	4995      	ldr	r1, [pc, #596]	; (8013f20 <_strtod_l+0x5d0>)
 8013ccc:	a81b      	add	r0, sp, #108	; 0x6c
 8013cce:	f001 fbd1 	bl	8015474 <__match>
 8013cd2:	2800      	cmp	r0, #0
 8013cd4:	d100      	bne.n	8013cd8 <_strtod_l+0x388>
 8013cd6:	e694      	b.n	8013a02 <_strtod_l+0xb2>
 8013cd8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013cda:	4992      	ldr	r1, [pc, #584]	; (8013f24 <_strtod_l+0x5d4>)
 8013cdc:	3b01      	subs	r3, #1
 8013cde:	a81b      	add	r0, sp, #108	; 0x6c
 8013ce0:	931b      	str	r3, [sp, #108]	; 0x6c
 8013ce2:	f001 fbc7 	bl	8015474 <__match>
 8013ce6:	2800      	cmp	r0, #0
 8013ce8:	d102      	bne.n	8013cf0 <_strtod_l+0x3a0>
 8013cea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013cec:	3301      	adds	r3, #1
 8013cee:	931b      	str	r3, [sp, #108]	; 0x6c
 8013cf0:	2600      	movs	r6, #0
 8013cf2:	4f8a      	ldr	r7, [pc, #552]	; (8013f1c <_strtod_l+0x5cc>)
 8013cf4:	e667      	b.n	80139c6 <_strtod_l+0x76>
 8013cf6:	488c      	ldr	r0, [pc, #560]	; (8013f28 <_strtod_l+0x5d8>)
 8013cf8:	f7fb ff0a 	bl	800fb10 <nan>
 8013cfc:	0006      	movs	r6, r0
 8013cfe:	000f      	movs	r7, r1
 8013d00:	e661      	b.n	80139c6 <_strtod_l+0x76>
 8013d02:	9b06      	ldr	r3, [sp, #24]
 8013d04:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013d06:	1a9b      	subs	r3, r3, r2
 8013d08:	9309      	str	r3, [sp, #36]	; 0x24
 8013d0a:	9b08      	ldr	r3, [sp, #32]
 8013d0c:	2b00      	cmp	r3, #0
 8013d0e:	d101      	bne.n	8013d14 <_strtod_l+0x3c4>
 8013d10:	9b05      	ldr	r3, [sp, #20]
 8013d12:	9308      	str	r3, [sp, #32]
 8013d14:	9c05      	ldr	r4, [sp, #20]
 8013d16:	2c10      	cmp	r4, #16
 8013d18:	dd00      	ble.n	8013d1c <_strtod_l+0x3cc>
 8013d1a:	2410      	movs	r4, #16
 8013d1c:	980d      	ldr	r0, [sp, #52]	; 0x34
 8013d1e:	f7f2 fa51 	bl	80061c4 <__aeabi_ui2d>
 8013d22:	9b05      	ldr	r3, [sp, #20]
 8013d24:	0006      	movs	r6, r0
 8013d26:	000f      	movs	r7, r1
 8013d28:	2b09      	cmp	r3, #9
 8013d2a:	dd15      	ble.n	8013d58 <_strtod_l+0x408>
 8013d2c:	0022      	movs	r2, r4
 8013d2e:	4b7f      	ldr	r3, [pc, #508]	; (8013f2c <_strtod_l+0x5dc>)
 8013d30:	3a09      	subs	r2, #9
 8013d32:	00d2      	lsls	r2, r2, #3
 8013d34:	189b      	adds	r3, r3, r2
 8013d36:	681a      	ldr	r2, [r3, #0]
 8013d38:	685b      	ldr	r3, [r3, #4]
 8013d3a:	f7f1 fb7b 	bl	8005434 <__aeabi_dmul>
 8013d3e:	0006      	movs	r6, r0
 8013d40:	0028      	movs	r0, r5
 8013d42:	000f      	movs	r7, r1
 8013d44:	f7f2 fa3e 	bl	80061c4 <__aeabi_ui2d>
 8013d48:	0002      	movs	r2, r0
 8013d4a:	000b      	movs	r3, r1
 8013d4c:	0030      	movs	r0, r6
 8013d4e:	0039      	movs	r1, r7
 8013d50:	f7f0 fc16 	bl	8004580 <__aeabi_dadd>
 8013d54:	0006      	movs	r6, r0
 8013d56:	000f      	movs	r7, r1
 8013d58:	9b05      	ldr	r3, [sp, #20]
 8013d5a:	2b0f      	cmp	r3, #15
 8013d5c:	dc39      	bgt.n	8013dd2 <_strtod_l+0x482>
 8013d5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d60:	2b00      	cmp	r3, #0
 8013d62:	d100      	bne.n	8013d66 <_strtod_l+0x416>
 8013d64:	e62f      	b.n	80139c6 <_strtod_l+0x76>
 8013d66:	dd24      	ble.n	8013db2 <_strtod_l+0x462>
 8013d68:	2b16      	cmp	r3, #22
 8013d6a:	dc09      	bgt.n	8013d80 <_strtod_l+0x430>
 8013d6c:	496f      	ldr	r1, [pc, #444]	; (8013f2c <_strtod_l+0x5dc>)
 8013d6e:	00db      	lsls	r3, r3, #3
 8013d70:	18c9      	adds	r1, r1, r3
 8013d72:	0032      	movs	r2, r6
 8013d74:	6808      	ldr	r0, [r1, #0]
 8013d76:	6849      	ldr	r1, [r1, #4]
 8013d78:	003b      	movs	r3, r7
 8013d7a:	f7f1 fb5b 	bl	8005434 <__aeabi_dmul>
 8013d7e:	e7bd      	b.n	8013cfc <_strtod_l+0x3ac>
 8013d80:	2325      	movs	r3, #37	; 0x25
 8013d82:	9a05      	ldr	r2, [sp, #20]
 8013d84:	1a9b      	subs	r3, r3, r2
 8013d86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013d88:	4293      	cmp	r3, r2
 8013d8a:	db22      	blt.n	8013dd2 <_strtod_l+0x482>
 8013d8c:	240f      	movs	r4, #15
 8013d8e:	9b05      	ldr	r3, [sp, #20]
 8013d90:	4d66      	ldr	r5, [pc, #408]	; (8013f2c <_strtod_l+0x5dc>)
 8013d92:	1ae4      	subs	r4, r4, r3
 8013d94:	00e1      	lsls	r1, r4, #3
 8013d96:	1869      	adds	r1, r5, r1
 8013d98:	0032      	movs	r2, r6
 8013d9a:	6808      	ldr	r0, [r1, #0]
 8013d9c:	6849      	ldr	r1, [r1, #4]
 8013d9e:	003b      	movs	r3, r7
 8013da0:	f7f1 fb48 	bl	8005434 <__aeabi_dmul>
 8013da4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013da6:	1b1c      	subs	r4, r3, r4
 8013da8:	00e4      	lsls	r4, r4, #3
 8013daa:	192d      	adds	r5, r5, r4
 8013dac:	682a      	ldr	r2, [r5, #0]
 8013dae:	686b      	ldr	r3, [r5, #4]
 8013db0:	e7e3      	b.n	8013d7a <_strtod_l+0x42a>
 8013db2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013db4:	3316      	adds	r3, #22
 8013db6:	db0c      	blt.n	8013dd2 <_strtod_l+0x482>
 8013db8:	9906      	ldr	r1, [sp, #24]
 8013dba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013dbc:	4b5b      	ldr	r3, [pc, #364]	; (8013f2c <_strtod_l+0x5dc>)
 8013dbe:	1a52      	subs	r2, r2, r1
 8013dc0:	00d2      	lsls	r2, r2, #3
 8013dc2:	189b      	adds	r3, r3, r2
 8013dc4:	0030      	movs	r0, r6
 8013dc6:	681a      	ldr	r2, [r3, #0]
 8013dc8:	685b      	ldr	r3, [r3, #4]
 8013dca:	0039      	movs	r1, r7
 8013dcc:	f7f0 ff38 	bl	8004c40 <__aeabi_ddiv>
 8013dd0:	e794      	b.n	8013cfc <_strtod_l+0x3ac>
 8013dd2:	9b05      	ldr	r3, [sp, #20]
 8013dd4:	1b1c      	subs	r4, r3, r4
 8013dd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013dd8:	18e4      	adds	r4, r4, r3
 8013dda:	2c00      	cmp	r4, #0
 8013ddc:	dd72      	ble.n	8013ec4 <_strtod_l+0x574>
 8013dde:	220f      	movs	r2, #15
 8013de0:	0023      	movs	r3, r4
 8013de2:	4013      	ands	r3, r2
 8013de4:	4214      	tst	r4, r2
 8013de6:	d00a      	beq.n	8013dfe <_strtod_l+0x4ae>
 8013de8:	4950      	ldr	r1, [pc, #320]	; (8013f2c <_strtod_l+0x5dc>)
 8013dea:	00db      	lsls	r3, r3, #3
 8013dec:	18c9      	adds	r1, r1, r3
 8013dee:	0032      	movs	r2, r6
 8013df0:	6808      	ldr	r0, [r1, #0]
 8013df2:	6849      	ldr	r1, [r1, #4]
 8013df4:	003b      	movs	r3, r7
 8013df6:	f7f1 fb1d 	bl	8005434 <__aeabi_dmul>
 8013dfa:	0006      	movs	r6, r0
 8013dfc:	000f      	movs	r7, r1
 8013dfe:	230f      	movs	r3, #15
 8013e00:	439c      	bics	r4, r3
 8013e02:	d04a      	beq.n	8013e9a <_strtod_l+0x54a>
 8013e04:	3326      	adds	r3, #38	; 0x26
 8013e06:	33ff      	adds	r3, #255	; 0xff
 8013e08:	429c      	cmp	r4, r3
 8013e0a:	dd22      	ble.n	8013e52 <_strtod_l+0x502>
 8013e0c:	2300      	movs	r3, #0
 8013e0e:	9305      	str	r3, [sp, #20]
 8013e10:	9306      	str	r3, [sp, #24]
 8013e12:	930d      	str	r3, [sp, #52]	; 0x34
 8013e14:	9308      	str	r3, [sp, #32]
 8013e16:	2322      	movs	r3, #34	; 0x22
 8013e18:	2600      	movs	r6, #0
 8013e1a:	9a04      	ldr	r2, [sp, #16]
 8013e1c:	4f3f      	ldr	r7, [pc, #252]	; (8013f1c <_strtod_l+0x5cc>)
 8013e1e:	6013      	str	r3, [r2, #0]
 8013e20:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013e22:	42b3      	cmp	r3, r6
 8013e24:	d100      	bne.n	8013e28 <_strtod_l+0x4d8>
 8013e26:	e5ce      	b.n	80139c6 <_strtod_l+0x76>
 8013e28:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013e2a:	9804      	ldr	r0, [sp, #16]
 8013e2c:	f7ff f900 	bl	8013030 <_Bfree>
 8013e30:	9908      	ldr	r1, [sp, #32]
 8013e32:	9804      	ldr	r0, [sp, #16]
 8013e34:	f7ff f8fc 	bl	8013030 <_Bfree>
 8013e38:	9906      	ldr	r1, [sp, #24]
 8013e3a:	9804      	ldr	r0, [sp, #16]
 8013e3c:	f7ff f8f8 	bl	8013030 <_Bfree>
 8013e40:	990d      	ldr	r1, [sp, #52]	; 0x34
 8013e42:	9804      	ldr	r0, [sp, #16]
 8013e44:	f7ff f8f4 	bl	8013030 <_Bfree>
 8013e48:	9905      	ldr	r1, [sp, #20]
 8013e4a:	9804      	ldr	r0, [sp, #16]
 8013e4c:	f7ff f8f0 	bl	8013030 <_Bfree>
 8013e50:	e5b9      	b.n	80139c6 <_strtod_l+0x76>
 8013e52:	2300      	movs	r3, #0
 8013e54:	0030      	movs	r0, r6
 8013e56:	0039      	movs	r1, r7
 8013e58:	4d35      	ldr	r5, [pc, #212]	; (8013f30 <_strtod_l+0x5e0>)
 8013e5a:	1124      	asrs	r4, r4, #4
 8013e5c:	9307      	str	r3, [sp, #28]
 8013e5e:	2c01      	cmp	r4, #1
 8013e60:	dc1e      	bgt.n	8013ea0 <_strtod_l+0x550>
 8013e62:	2b00      	cmp	r3, #0
 8013e64:	d001      	beq.n	8013e6a <_strtod_l+0x51a>
 8013e66:	0006      	movs	r6, r0
 8013e68:	000f      	movs	r7, r1
 8013e6a:	4b32      	ldr	r3, [pc, #200]	; (8013f34 <_strtod_l+0x5e4>)
 8013e6c:	9a07      	ldr	r2, [sp, #28]
 8013e6e:	18ff      	adds	r7, r7, r3
 8013e70:	4b2f      	ldr	r3, [pc, #188]	; (8013f30 <_strtod_l+0x5e0>)
 8013e72:	00d2      	lsls	r2, r2, #3
 8013e74:	189d      	adds	r5, r3, r2
 8013e76:	6828      	ldr	r0, [r5, #0]
 8013e78:	6869      	ldr	r1, [r5, #4]
 8013e7a:	0032      	movs	r2, r6
 8013e7c:	003b      	movs	r3, r7
 8013e7e:	f7f1 fad9 	bl	8005434 <__aeabi_dmul>
 8013e82:	4b26      	ldr	r3, [pc, #152]	; (8013f1c <_strtod_l+0x5cc>)
 8013e84:	4a2c      	ldr	r2, [pc, #176]	; (8013f38 <_strtod_l+0x5e8>)
 8013e86:	0006      	movs	r6, r0
 8013e88:	400b      	ands	r3, r1
 8013e8a:	4293      	cmp	r3, r2
 8013e8c:	d8be      	bhi.n	8013e0c <_strtod_l+0x4bc>
 8013e8e:	4a2b      	ldr	r2, [pc, #172]	; (8013f3c <_strtod_l+0x5ec>)
 8013e90:	4293      	cmp	r3, r2
 8013e92:	d913      	bls.n	8013ebc <_strtod_l+0x56c>
 8013e94:	2601      	movs	r6, #1
 8013e96:	4f2a      	ldr	r7, [pc, #168]	; (8013f40 <_strtod_l+0x5f0>)
 8013e98:	4276      	negs	r6, r6
 8013e9a:	2300      	movs	r3, #0
 8013e9c:	9307      	str	r3, [sp, #28]
 8013e9e:	e088      	b.n	8013fb2 <_strtod_l+0x662>
 8013ea0:	2201      	movs	r2, #1
 8013ea2:	4214      	tst	r4, r2
 8013ea4:	d004      	beq.n	8013eb0 <_strtod_l+0x560>
 8013ea6:	682a      	ldr	r2, [r5, #0]
 8013ea8:	686b      	ldr	r3, [r5, #4]
 8013eaa:	f7f1 fac3 	bl	8005434 <__aeabi_dmul>
 8013eae:	2301      	movs	r3, #1
 8013eb0:	9a07      	ldr	r2, [sp, #28]
 8013eb2:	1064      	asrs	r4, r4, #1
 8013eb4:	3201      	adds	r2, #1
 8013eb6:	9207      	str	r2, [sp, #28]
 8013eb8:	3508      	adds	r5, #8
 8013eba:	e7d0      	b.n	8013e5e <_strtod_l+0x50e>
 8013ebc:	23d4      	movs	r3, #212	; 0xd4
 8013ebe:	049b      	lsls	r3, r3, #18
 8013ec0:	18cf      	adds	r7, r1, r3
 8013ec2:	e7ea      	b.n	8013e9a <_strtod_l+0x54a>
 8013ec4:	2c00      	cmp	r4, #0
 8013ec6:	d0e8      	beq.n	8013e9a <_strtod_l+0x54a>
 8013ec8:	4264      	negs	r4, r4
 8013eca:	230f      	movs	r3, #15
 8013ecc:	0022      	movs	r2, r4
 8013ece:	401a      	ands	r2, r3
 8013ed0:	421c      	tst	r4, r3
 8013ed2:	d00a      	beq.n	8013eea <_strtod_l+0x59a>
 8013ed4:	4b15      	ldr	r3, [pc, #84]	; (8013f2c <_strtod_l+0x5dc>)
 8013ed6:	00d2      	lsls	r2, r2, #3
 8013ed8:	189b      	adds	r3, r3, r2
 8013eda:	0030      	movs	r0, r6
 8013edc:	681a      	ldr	r2, [r3, #0]
 8013ede:	685b      	ldr	r3, [r3, #4]
 8013ee0:	0039      	movs	r1, r7
 8013ee2:	f7f0 fead 	bl	8004c40 <__aeabi_ddiv>
 8013ee6:	0006      	movs	r6, r0
 8013ee8:	000f      	movs	r7, r1
 8013eea:	1124      	asrs	r4, r4, #4
 8013eec:	d0d5      	beq.n	8013e9a <_strtod_l+0x54a>
 8013eee:	2c1f      	cmp	r4, #31
 8013ef0:	dd28      	ble.n	8013f44 <_strtod_l+0x5f4>
 8013ef2:	2300      	movs	r3, #0
 8013ef4:	9305      	str	r3, [sp, #20]
 8013ef6:	9306      	str	r3, [sp, #24]
 8013ef8:	930d      	str	r3, [sp, #52]	; 0x34
 8013efa:	9308      	str	r3, [sp, #32]
 8013efc:	2322      	movs	r3, #34	; 0x22
 8013efe:	9a04      	ldr	r2, [sp, #16]
 8013f00:	2600      	movs	r6, #0
 8013f02:	6013      	str	r3, [r2, #0]
 8013f04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013f06:	2700      	movs	r7, #0
 8013f08:	2b00      	cmp	r3, #0
 8013f0a:	d18d      	bne.n	8013e28 <_strtod_l+0x4d8>
 8013f0c:	e55b      	b.n	80139c6 <_strtod_l+0x76>
 8013f0e:	46c0      	nop			; (mov r8, r8)
 8013f10:	00004e1f 	.word	0x00004e1f
 8013f14:	08016b29 	.word	0x08016b29
 8013f18:	08016d54 	.word	0x08016d54
 8013f1c:	7ff00000 	.word	0x7ff00000
 8013f20:	08016b21 	.word	0x08016b21
 8013f24:	08016b58 	.word	0x08016b58
 8013f28:	08016ee5 	.word	0x08016ee5
 8013f2c:	08016c68 	.word	0x08016c68
 8013f30:	08016c40 	.word	0x08016c40
 8013f34:	fcb00000 	.word	0xfcb00000
 8013f38:	7ca00000 	.word	0x7ca00000
 8013f3c:	7c900000 	.word	0x7c900000
 8013f40:	7fefffff 	.word	0x7fefffff
 8013f44:	2310      	movs	r3, #16
 8013f46:	0022      	movs	r2, r4
 8013f48:	401a      	ands	r2, r3
 8013f4a:	9207      	str	r2, [sp, #28]
 8013f4c:	421c      	tst	r4, r3
 8013f4e:	d001      	beq.n	8013f54 <_strtod_l+0x604>
 8013f50:	335a      	adds	r3, #90	; 0x5a
 8013f52:	9307      	str	r3, [sp, #28]
 8013f54:	0030      	movs	r0, r6
 8013f56:	0039      	movs	r1, r7
 8013f58:	2300      	movs	r3, #0
 8013f5a:	4dc4      	ldr	r5, [pc, #784]	; (801426c <_strtod_l+0x91c>)
 8013f5c:	2201      	movs	r2, #1
 8013f5e:	4214      	tst	r4, r2
 8013f60:	d004      	beq.n	8013f6c <_strtod_l+0x61c>
 8013f62:	682a      	ldr	r2, [r5, #0]
 8013f64:	686b      	ldr	r3, [r5, #4]
 8013f66:	f7f1 fa65 	bl	8005434 <__aeabi_dmul>
 8013f6a:	2301      	movs	r3, #1
 8013f6c:	1064      	asrs	r4, r4, #1
 8013f6e:	3508      	adds	r5, #8
 8013f70:	2c00      	cmp	r4, #0
 8013f72:	d1f3      	bne.n	8013f5c <_strtod_l+0x60c>
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	d001      	beq.n	8013f7c <_strtod_l+0x62c>
 8013f78:	0006      	movs	r6, r0
 8013f7a:	000f      	movs	r7, r1
 8013f7c:	9b07      	ldr	r3, [sp, #28]
 8013f7e:	2b00      	cmp	r3, #0
 8013f80:	d00f      	beq.n	8013fa2 <_strtod_l+0x652>
 8013f82:	236b      	movs	r3, #107	; 0x6b
 8013f84:	007a      	lsls	r2, r7, #1
 8013f86:	0d52      	lsrs	r2, r2, #21
 8013f88:	0039      	movs	r1, r7
 8013f8a:	1a9b      	subs	r3, r3, r2
 8013f8c:	2b00      	cmp	r3, #0
 8013f8e:	dd08      	ble.n	8013fa2 <_strtod_l+0x652>
 8013f90:	2b1f      	cmp	r3, #31
 8013f92:	dc00      	bgt.n	8013f96 <_strtod_l+0x646>
 8013f94:	e121      	b.n	80141da <_strtod_l+0x88a>
 8013f96:	2600      	movs	r6, #0
 8013f98:	2b34      	cmp	r3, #52	; 0x34
 8013f9a:	dc00      	bgt.n	8013f9e <_strtod_l+0x64e>
 8013f9c:	e116      	b.n	80141cc <_strtod_l+0x87c>
 8013f9e:	27dc      	movs	r7, #220	; 0xdc
 8013fa0:	04bf      	lsls	r7, r7, #18
 8013fa2:	2200      	movs	r2, #0
 8013fa4:	2300      	movs	r3, #0
 8013fa6:	0030      	movs	r0, r6
 8013fa8:	0039      	movs	r1, r7
 8013faa:	f7ef f9f5 	bl	8003398 <__aeabi_dcmpeq>
 8013fae:	2800      	cmp	r0, #0
 8013fb0:	d19f      	bne.n	8013ef2 <_strtod_l+0x5a2>
 8013fb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013fb4:	9a08      	ldr	r2, [sp, #32]
 8013fb6:	9300      	str	r3, [sp, #0]
 8013fb8:	9910      	ldr	r1, [sp, #64]	; 0x40
 8013fba:	9b05      	ldr	r3, [sp, #20]
 8013fbc:	9804      	ldr	r0, [sp, #16]
 8013fbe:	f7ff f89f 	bl	8013100 <__s2b>
 8013fc2:	900d      	str	r0, [sp, #52]	; 0x34
 8013fc4:	2800      	cmp	r0, #0
 8013fc6:	d100      	bne.n	8013fca <_strtod_l+0x67a>
 8013fc8:	e720      	b.n	8013e0c <_strtod_l+0x4bc>
 8013fca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013fcc:	9906      	ldr	r1, [sp, #24]
 8013fce:	17da      	asrs	r2, r3, #31
 8013fd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013fd2:	1a5b      	subs	r3, r3, r1
 8013fd4:	401a      	ands	r2, r3
 8013fd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013fd8:	9215      	str	r2, [sp, #84]	; 0x54
 8013fda:	43db      	mvns	r3, r3
 8013fdc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013fde:	17db      	asrs	r3, r3, #31
 8013fe0:	401a      	ands	r2, r3
 8013fe2:	2300      	movs	r3, #0
 8013fe4:	9218      	str	r2, [sp, #96]	; 0x60
 8013fe6:	9305      	str	r3, [sp, #20]
 8013fe8:	9306      	str	r3, [sp, #24]
 8013fea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013fec:	9804      	ldr	r0, [sp, #16]
 8013fee:	6859      	ldr	r1, [r3, #4]
 8013ff0:	f7fe ffda 	bl	8012fa8 <_Balloc>
 8013ff4:	9008      	str	r0, [sp, #32]
 8013ff6:	2800      	cmp	r0, #0
 8013ff8:	d100      	bne.n	8013ffc <_strtod_l+0x6ac>
 8013ffa:	e70c      	b.n	8013e16 <_strtod_l+0x4c6>
 8013ffc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013ffe:	300c      	adds	r0, #12
 8014000:	0019      	movs	r1, r3
 8014002:	691a      	ldr	r2, [r3, #16]
 8014004:	310c      	adds	r1, #12
 8014006:	3202      	adds	r2, #2
 8014008:	0092      	lsls	r2, r2, #2
 801400a:	f7fe f81f 	bl	801204c <memcpy>
 801400e:	ab1e      	add	r3, sp, #120	; 0x78
 8014010:	9301      	str	r3, [sp, #4]
 8014012:	ab1d      	add	r3, sp, #116	; 0x74
 8014014:	9300      	str	r3, [sp, #0]
 8014016:	0032      	movs	r2, r6
 8014018:	003b      	movs	r3, r7
 801401a:	9804      	ldr	r0, [sp, #16]
 801401c:	9610      	str	r6, [sp, #64]	; 0x40
 801401e:	9711      	str	r7, [sp, #68]	; 0x44
 8014020:	f7ff fbb0 	bl	8013784 <__d2b>
 8014024:	901c      	str	r0, [sp, #112]	; 0x70
 8014026:	2800      	cmp	r0, #0
 8014028:	d100      	bne.n	801402c <_strtod_l+0x6dc>
 801402a:	e6f4      	b.n	8013e16 <_strtod_l+0x4c6>
 801402c:	2101      	movs	r1, #1
 801402e:	9804      	ldr	r0, [sp, #16]
 8014030:	f7ff f8fa 	bl	8013228 <__i2b>
 8014034:	9006      	str	r0, [sp, #24]
 8014036:	2800      	cmp	r0, #0
 8014038:	d100      	bne.n	801403c <_strtod_l+0x6ec>
 801403a:	e6ec      	b.n	8013e16 <_strtod_l+0x4c6>
 801403c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801403e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014040:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8014042:	1ad4      	subs	r4, r2, r3
 8014044:	2b00      	cmp	r3, #0
 8014046:	db01      	blt.n	801404c <_strtod_l+0x6fc>
 8014048:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801404a:	195d      	adds	r5, r3, r5
 801404c:	9907      	ldr	r1, [sp, #28]
 801404e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8014050:	1a5b      	subs	r3, r3, r1
 8014052:	2136      	movs	r1, #54	; 0x36
 8014054:	189b      	adds	r3, r3, r2
 8014056:	1a8a      	subs	r2, r1, r2
 8014058:	4985      	ldr	r1, [pc, #532]	; (8014270 <_strtod_l+0x920>)
 801405a:	2001      	movs	r0, #1
 801405c:	468c      	mov	ip, r1
 801405e:	2100      	movs	r1, #0
 8014060:	3b01      	subs	r3, #1
 8014062:	9114      	str	r1, [sp, #80]	; 0x50
 8014064:	9012      	str	r0, [sp, #72]	; 0x48
 8014066:	4563      	cmp	r3, ip
 8014068:	da07      	bge.n	801407a <_strtod_l+0x72a>
 801406a:	4661      	mov	r1, ip
 801406c:	1ac9      	subs	r1, r1, r3
 801406e:	1a52      	subs	r2, r2, r1
 8014070:	291f      	cmp	r1, #31
 8014072:	dd00      	ble.n	8014076 <_strtod_l+0x726>
 8014074:	e0b6      	b.n	80141e4 <_strtod_l+0x894>
 8014076:	4088      	lsls	r0, r1
 8014078:	9012      	str	r0, [sp, #72]	; 0x48
 801407a:	18ab      	adds	r3, r5, r2
 801407c:	930c      	str	r3, [sp, #48]	; 0x30
 801407e:	18a4      	adds	r4, r4, r2
 8014080:	9b07      	ldr	r3, [sp, #28]
 8014082:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014084:	191c      	adds	r4, r3, r4
 8014086:	002b      	movs	r3, r5
 8014088:	4295      	cmp	r5, r2
 801408a:	dd00      	ble.n	801408e <_strtod_l+0x73e>
 801408c:	0013      	movs	r3, r2
 801408e:	42a3      	cmp	r3, r4
 8014090:	dd00      	ble.n	8014094 <_strtod_l+0x744>
 8014092:	0023      	movs	r3, r4
 8014094:	2b00      	cmp	r3, #0
 8014096:	dd04      	ble.n	80140a2 <_strtod_l+0x752>
 8014098:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801409a:	1ae4      	subs	r4, r4, r3
 801409c:	1ad2      	subs	r2, r2, r3
 801409e:	920c      	str	r2, [sp, #48]	; 0x30
 80140a0:	1aed      	subs	r5, r5, r3
 80140a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	dd17      	ble.n	80140d8 <_strtod_l+0x788>
 80140a8:	001a      	movs	r2, r3
 80140aa:	9906      	ldr	r1, [sp, #24]
 80140ac:	9804      	ldr	r0, [sp, #16]
 80140ae:	f7ff f983 	bl	80133b8 <__pow5mult>
 80140b2:	9006      	str	r0, [sp, #24]
 80140b4:	2800      	cmp	r0, #0
 80140b6:	d100      	bne.n	80140ba <_strtod_l+0x76a>
 80140b8:	e6ad      	b.n	8013e16 <_strtod_l+0x4c6>
 80140ba:	0001      	movs	r1, r0
 80140bc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80140be:	9804      	ldr	r0, [sp, #16]
 80140c0:	f7ff f8ca 	bl	8013258 <__multiply>
 80140c4:	900e      	str	r0, [sp, #56]	; 0x38
 80140c6:	2800      	cmp	r0, #0
 80140c8:	d100      	bne.n	80140cc <_strtod_l+0x77c>
 80140ca:	e6a4      	b.n	8013e16 <_strtod_l+0x4c6>
 80140cc:	991c      	ldr	r1, [sp, #112]	; 0x70
 80140ce:	9804      	ldr	r0, [sp, #16]
 80140d0:	f7fe ffae 	bl	8013030 <_Bfree>
 80140d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80140d6:	931c      	str	r3, [sp, #112]	; 0x70
 80140d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80140da:	2b00      	cmp	r3, #0
 80140dc:	dd00      	ble.n	80140e0 <_strtod_l+0x790>
 80140de:	e087      	b.n	80141f0 <_strtod_l+0x8a0>
 80140e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80140e2:	2b00      	cmp	r3, #0
 80140e4:	dd08      	ble.n	80140f8 <_strtod_l+0x7a8>
 80140e6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80140e8:	9908      	ldr	r1, [sp, #32]
 80140ea:	9804      	ldr	r0, [sp, #16]
 80140ec:	f7ff f964 	bl	80133b8 <__pow5mult>
 80140f0:	9008      	str	r0, [sp, #32]
 80140f2:	2800      	cmp	r0, #0
 80140f4:	d100      	bne.n	80140f8 <_strtod_l+0x7a8>
 80140f6:	e68e      	b.n	8013e16 <_strtod_l+0x4c6>
 80140f8:	2c00      	cmp	r4, #0
 80140fa:	dd08      	ble.n	801410e <_strtod_l+0x7be>
 80140fc:	0022      	movs	r2, r4
 80140fe:	9908      	ldr	r1, [sp, #32]
 8014100:	9804      	ldr	r0, [sp, #16]
 8014102:	f7ff f9b5 	bl	8013470 <__lshift>
 8014106:	9008      	str	r0, [sp, #32]
 8014108:	2800      	cmp	r0, #0
 801410a:	d100      	bne.n	801410e <_strtod_l+0x7be>
 801410c:	e683      	b.n	8013e16 <_strtod_l+0x4c6>
 801410e:	2d00      	cmp	r5, #0
 8014110:	dd08      	ble.n	8014124 <_strtod_l+0x7d4>
 8014112:	002a      	movs	r2, r5
 8014114:	9906      	ldr	r1, [sp, #24]
 8014116:	9804      	ldr	r0, [sp, #16]
 8014118:	f7ff f9aa 	bl	8013470 <__lshift>
 801411c:	9006      	str	r0, [sp, #24]
 801411e:	2800      	cmp	r0, #0
 8014120:	d100      	bne.n	8014124 <_strtod_l+0x7d4>
 8014122:	e678      	b.n	8013e16 <_strtod_l+0x4c6>
 8014124:	9a08      	ldr	r2, [sp, #32]
 8014126:	991c      	ldr	r1, [sp, #112]	; 0x70
 8014128:	9804      	ldr	r0, [sp, #16]
 801412a:	f7ff fa2b 	bl	8013584 <__mdiff>
 801412e:	9005      	str	r0, [sp, #20]
 8014130:	2800      	cmp	r0, #0
 8014132:	d100      	bne.n	8014136 <_strtod_l+0x7e6>
 8014134:	e66f      	b.n	8013e16 <_strtod_l+0x4c6>
 8014136:	2200      	movs	r2, #0
 8014138:	68c3      	ldr	r3, [r0, #12]
 801413a:	9906      	ldr	r1, [sp, #24]
 801413c:	60c2      	str	r2, [r0, #12]
 801413e:	930c      	str	r3, [sp, #48]	; 0x30
 8014140:	f7ff fa04 	bl	801354c <__mcmp>
 8014144:	2800      	cmp	r0, #0
 8014146:	da5d      	bge.n	8014204 <_strtod_l+0x8b4>
 8014148:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801414a:	4333      	orrs	r3, r6
 801414c:	d000      	beq.n	8014150 <_strtod_l+0x800>
 801414e:	e088      	b.n	8014262 <_strtod_l+0x912>
 8014150:	033b      	lsls	r3, r7, #12
 8014152:	d000      	beq.n	8014156 <_strtod_l+0x806>
 8014154:	e085      	b.n	8014262 <_strtod_l+0x912>
 8014156:	22d6      	movs	r2, #214	; 0xd6
 8014158:	4b46      	ldr	r3, [pc, #280]	; (8014274 <_strtod_l+0x924>)
 801415a:	04d2      	lsls	r2, r2, #19
 801415c:	403b      	ands	r3, r7
 801415e:	4293      	cmp	r3, r2
 8014160:	d97f      	bls.n	8014262 <_strtod_l+0x912>
 8014162:	9b05      	ldr	r3, [sp, #20]
 8014164:	695b      	ldr	r3, [r3, #20]
 8014166:	2b00      	cmp	r3, #0
 8014168:	d103      	bne.n	8014172 <_strtod_l+0x822>
 801416a:	9b05      	ldr	r3, [sp, #20]
 801416c:	691b      	ldr	r3, [r3, #16]
 801416e:	2b01      	cmp	r3, #1
 8014170:	dd77      	ble.n	8014262 <_strtod_l+0x912>
 8014172:	9905      	ldr	r1, [sp, #20]
 8014174:	2201      	movs	r2, #1
 8014176:	9804      	ldr	r0, [sp, #16]
 8014178:	f7ff f97a 	bl	8013470 <__lshift>
 801417c:	9906      	ldr	r1, [sp, #24]
 801417e:	9005      	str	r0, [sp, #20]
 8014180:	f7ff f9e4 	bl	801354c <__mcmp>
 8014184:	2800      	cmp	r0, #0
 8014186:	dd6c      	ble.n	8014262 <_strtod_l+0x912>
 8014188:	9907      	ldr	r1, [sp, #28]
 801418a:	003b      	movs	r3, r7
 801418c:	4a39      	ldr	r2, [pc, #228]	; (8014274 <_strtod_l+0x924>)
 801418e:	2900      	cmp	r1, #0
 8014190:	d100      	bne.n	8014194 <_strtod_l+0x844>
 8014192:	e094      	b.n	80142be <_strtod_l+0x96e>
 8014194:	0011      	movs	r1, r2
 8014196:	20d6      	movs	r0, #214	; 0xd6
 8014198:	4039      	ands	r1, r7
 801419a:	04c0      	lsls	r0, r0, #19
 801419c:	4281      	cmp	r1, r0
 801419e:	dd00      	ble.n	80141a2 <_strtod_l+0x852>
 80141a0:	e08d      	b.n	80142be <_strtod_l+0x96e>
 80141a2:	23dc      	movs	r3, #220	; 0xdc
 80141a4:	049b      	lsls	r3, r3, #18
 80141a6:	4299      	cmp	r1, r3
 80141a8:	dc00      	bgt.n	80141ac <_strtod_l+0x85c>
 80141aa:	e6a7      	b.n	8013efc <_strtod_l+0x5ac>
 80141ac:	0030      	movs	r0, r6
 80141ae:	0039      	movs	r1, r7
 80141b0:	4b31      	ldr	r3, [pc, #196]	; (8014278 <_strtod_l+0x928>)
 80141b2:	2200      	movs	r2, #0
 80141b4:	f7f1 f93e 	bl	8005434 <__aeabi_dmul>
 80141b8:	4b2e      	ldr	r3, [pc, #184]	; (8014274 <_strtod_l+0x924>)
 80141ba:	0006      	movs	r6, r0
 80141bc:	000f      	movs	r7, r1
 80141be:	420b      	tst	r3, r1
 80141c0:	d000      	beq.n	80141c4 <_strtod_l+0x874>
 80141c2:	e631      	b.n	8013e28 <_strtod_l+0x4d8>
 80141c4:	2322      	movs	r3, #34	; 0x22
 80141c6:	9a04      	ldr	r2, [sp, #16]
 80141c8:	6013      	str	r3, [r2, #0]
 80141ca:	e62d      	b.n	8013e28 <_strtod_l+0x4d8>
 80141cc:	234b      	movs	r3, #75	; 0x4b
 80141ce:	1a9a      	subs	r2, r3, r2
 80141d0:	3b4c      	subs	r3, #76	; 0x4c
 80141d2:	4093      	lsls	r3, r2
 80141d4:	4019      	ands	r1, r3
 80141d6:	000f      	movs	r7, r1
 80141d8:	e6e3      	b.n	8013fa2 <_strtod_l+0x652>
 80141da:	2201      	movs	r2, #1
 80141dc:	4252      	negs	r2, r2
 80141de:	409a      	lsls	r2, r3
 80141e0:	4016      	ands	r6, r2
 80141e2:	e6de      	b.n	8013fa2 <_strtod_l+0x652>
 80141e4:	4925      	ldr	r1, [pc, #148]	; (801427c <_strtod_l+0x92c>)
 80141e6:	1acb      	subs	r3, r1, r3
 80141e8:	0001      	movs	r1, r0
 80141ea:	4099      	lsls	r1, r3
 80141ec:	9114      	str	r1, [sp, #80]	; 0x50
 80141ee:	e743      	b.n	8014078 <_strtod_l+0x728>
 80141f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80141f2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80141f4:	9804      	ldr	r0, [sp, #16]
 80141f6:	f7ff f93b 	bl	8013470 <__lshift>
 80141fa:	901c      	str	r0, [sp, #112]	; 0x70
 80141fc:	2800      	cmp	r0, #0
 80141fe:	d000      	beq.n	8014202 <_strtod_l+0x8b2>
 8014200:	e76e      	b.n	80140e0 <_strtod_l+0x790>
 8014202:	e608      	b.n	8013e16 <_strtod_l+0x4c6>
 8014204:	970e      	str	r7, [sp, #56]	; 0x38
 8014206:	2800      	cmp	r0, #0
 8014208:	d177      	bne.n	80142fa <_strtod_l+0x9aa>
 801420a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801420c:	033b      	lsls	r3, r7, #12
 801420e:	0b1b      	lsrs	r3, r3, #12
 8014210:	2a00      	cmp	r2, #0
 8014212:	d039      	beq.n	8014288 <_strtod_l+0x938>
 8014214:	4a1a      	ldr	r2, [pc, #104]	; (8014280 <_strtod_l+0x930>)
 8014216:	4293      	cmp	r3, r2
 8014218:	d139      	bne.n	801428e <_strtod_l+0x93e>
 801421a:	2101      	movs	r1, #1
 801421c:	9b07      	ldr	r3, [sp, #28]
 801421e:	4249      	negs	r1, r1
 8014220:	0032      	movs	r2, r6
 8014222:	0008      	movs	r0, r1
 8014224:	2b00      	cmp	r3, #0
 8014226:	d00b      	beq.n	8014240 <_strtod_l+0x8f0>
 8014228:	24d4      	movs	r4, #212	; 0xd4
 801422a:	4b12      	ldr	r3, [pc, #72]	; (8014274 <_strtod_l+0x924>)
 801422c:	0008      	movs	r0, r1
 801422e:	403b      	ands	r3, r7
 8014230:	04e4      	lsls	r4, r4, #19
 8014232:	42a3      	cmp	r3, r4
 8014234:	d804      	bhi.n	8014240 <_strtod_l+0x8f0>
 8014236:	306c      	adds	r0, #108	; 0x6c
 8014238:	0d1b      	lsrs	r3, r3, #20
 801423a:	1ac3      	subs	r3, r0, r3
 801423c:	4099      	lsls	r1, r3
 801423e:	0008      	movs	r0, r1
 8014240:	4282      	cmp	r2, r0
 8014242:	d124      	bne.n	801428e <_strtod_l+0x93e>
 8014244:	4b0f      	ldr	r3, [pc, #60]	; (8014284 <_strtod_l+0x934>)
 8014246:	990e      	ldr	r1, [sp, #56]	; 0x38
 8014248:	4299      	cmp	r1, r3
 801424a:	d102      	bne.n	8014252 <_strtod_l+0x902>
 801424c:	3201      	adds	r2, #1
 801424e:	d100      	bne.n	8014252 <_strtod_l+0x902>
 8014250:	e5e1      	b.n	8013e16 <_strtod_l+0x4c6>
 8014252:	4b08      	ldr	r3, [pc, #32]	; (8014274 <_strtod_l+0x924>)
 8014254:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014256:	2600      	movs	r6, #0
 8014258:	401a      	ands	r2, r3
 801425a:	0013      	movs	r3, r2
 801425c:	2280      	movs	r2, #128	; 0x80
 801425e:	0352      	lsls	r2, r2, #13
 8014260:	189f      	adds	r7, r3, r2
 8014262:	9b07      	ldr	r3, [sp, #28]
 8014264:	2b00      	cmp	r3, #0
 8014266:	d1a1      	bne.n	80141ac <_strtod_l+0x85c>
 8014268:	e5de      	b.n	8013e28 <_strtod_l+0x4d8>
 801426a:	46c0      	nop			; (mov r8, r8)
 801426c:	08016d68 	.word	0x08016d68
 8014270:	fffffc02 	.word	0xfffffc02
 8014274:	7ff00000 	.word	0x7ff00000
 8014278:	39500000 	.word	0x39500000
 801427c:	fffffbe2 	.word	0xfffffbe2
 8014280:	000fffff 	.word	0x000fffff
 8014284:	7fefffff 	.word	0x7fefffff
 8014288:	4333      	orrs	r3, r6
 801428a:	d100      	bne.n	801428e <_strtod_l+0x93e>
 801428c:	e77c      	b.n	8014188 <_strtod_l+0x838>
 801428e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014290:	2b00      	cmp	r3, #0
 8014292:	d01d      	beq.n	80142d0 <_strtod_l+0x980>
 8014294:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014296:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014298:	4213      	tst	r3, r2
 801429a:	d0e2      	beq.n	8014262 <_strtod_l+0x912>
 801429c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801429e:	0030      	movs	r0, r6
 80142a0:	0039      	movs	r1, r7
 80142a2:	9a07      	ldr	r2, [sp, #28]
 80142a4:	2b00      	cmp	r3, #0
 80142a6:	d017      	beq.n	80142d8 <_strtod_l+0x988>
 80142a8:	f7ff fb3a 	bl	8013920 <sulp>
 80142ac:	0002      	movs	r2, r0
 80142ae:	000b      	movs	r3, r1
 80142b0:	9810      	ldr	r0, [sp, #64]	; 0x40
 80142b2:	9911      	ldr	r1, [sp, #68]	; 0x44
 80142b4:	f7f0 f964 	bl	8004580 <__aeabi_dadd>
 80142b8:	0006      	movs	r6, r0
 80142ba:	000f      	movs	r7, r1
 80142bc:	e7d1      	b.n	8014262 <_strtod_l+0x912>
 80142be:	2601      	movs	r6, #1
 80142c0:	4013      	ands	r3, r2
 80142c2:	4a98      	ldr	r2, [pc, #608]	; (8014524 <_strtod_l+0xbd4>)
 80142c4:	4276      	negs	r6, r6
 80142c6:	189b      	adds	r3, r3, r2
 80142c8:	4a97      	ldr	r2, [pc, #604]	; (8014528 <_strtod_l+0xbd8>)
 80142ca:	431a      	orrs	r2, r3
 80142cc:	0017      	movs	r7, r2
 80142ce:	e7c8      	b.n	8014262 <_strtod_l+0x912>
 80142d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80142d2:	4233      	tst	r3, r6
 80142d4:	d0c5      	beq.n	8014262 <_strtod_l+0x912>
 80142d6:	e7e1      	b.n	801429c <_strtod_l+0x94c>
 80142d8:	f7ff fb22 	bl	8013920 <sulp>
 80142dc:	0002      	movs	r2, r0
 80142de:	000b      	movs	r3, r1
 80142e0:	9810      	ldr	r0, [sp, #64]	; 0x40
 80142e2:	9911      	ldr	r1, [sp, #68]	; 0x44
 80142e4:	f7f1 fb68 	bl	80059b8 <__aeabi_dsub>
 80142e8:	2200      	movs	r2, #0
 80142ea:	2300      	movs	r3, #0
 80142ec:	0006      	movs	r6, r0
 80142ee:	000f      	movs	r7, r1
 80142f0:	f7ef f852 	bl	8003398 <__aeabi_dcmpeq>
 80142f4:	2800      	cmp	r0, #0
 80142f6:	d0b4      	beq.n	8014262 <_strtod_l+0x912>
 80142f8:	e600      	b.n	8013efc <_strtod_l+0x5ac>
 80142fa:	9906      	ldr	r1, [sp, #24]
 80142fc:	9805      	ldr	r0, [sp, #20]
 80142fe:	f7ff faa1 	bl	8013844 <__ratio>
 8014302:	2380      	movs	r3, #128	; 0x80
 8014304:	2200      	movs	r2, #0
 8014306:	05db      	lsls	r3, r3, #23
 8014308:	0004      	movs	r4, r0
 801430a:	000d      	movs	r5, r1
 801430c:	f7ef f854 	bl	80033b8 <__aeabi_dcmple>
 8014310:	2800      	cmp	r0, #0
 8014312:	d06d      	beq.n	80143f0 <_strtod_l+0xaa0>
 8014314:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014316:	2b00      	cmp	r3, #0
 8014318:	d000      	beq.n	801431c <_strtod_l+0x9cc>
 801431a:	e07e      	b.n	801441a <_strtod_l+0xaca>
 801431c:	2e00      	cmp	r6, #0
 801431e:	d158      	bne.n	80143d2 <_strtod_l+0xa82>
 8014320:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014322:	031b      	lsls	r3, r3, #12
 8014324:	d000      	beq.n	8014328 <_strtod_l+0x9d8>
 8014326:	e07f      	b.n	8014428 <_strtod_l+0xad8>
 8014328:	2200      	movs	r2, #0
 801432a:	0020      	movs	r0, r4
 801432c:	0029      	movs	r1, r5
 801432e:	4b7f      	ldr	r3, [pc, #508]	; (801452c <_strtod_l+0xbdc>)
 8014330:	f7ef f838 	bl	80033a4 <__aeabi_dcmplt>
 8014334:	2800      	cmp	r0, #0
 8014336:	d158      	bne.n	80143ea <_strtod_l+0xa9a>
 8014338:	0020      	movs	r0, r4
 801433a:	0029      	movs	r1, r5
 801433c:	2200      	movs	r2, #0
 801433e:	4b7c      	ldr	r3, [pc, #496]	; (8014530 <_strtod_l+0xbe0>)
 8014340:	f7f1 f878 	bl	8005434 <__aeabi_dmul>
 8014344:	0004      	movs	r4, r0
 8014346:	000d      	movs	r5, r1
 8014348:	2380      	movs	r3, #128	; 0x80
 801434a:	061b      	lsls	r3, r3, #24
 801434c:	940a      	str	r4, [sp, #40]	; 0x28
 801434e:	18eb      	adds	r3, r5, r3
 8014350:	930b      	str	r3, [sp, #44]	; 0x2c
 8014352:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014354:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014356:	9212      	str	r2, [sp, #72]	; 0x48
 8014358:	9313      	str	r3, [sp, #76]	; 0x4c
 801435a:	4a76      	ldr	r2, [pc, #472]	; (8014534 <_strtod_l+0xbe4>)
 801435c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801435e:	4013      	ands	r3, r2
 8014360:	9314      	str	r3, [sp, #80]	; 0x50
 8014362:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014364:	4b74      	ldr	r3, [pc, #464]	; (8014538 <_strtod_l+0xbe8>)
 8014366:	429a      	cmp	r2, r3
 8014368:	d000      	beq.n	801436c <_strtod_l+0xa1c>
 801436a:	e091      	b.n	8014490 <_strtod_l+0xb40>
 801436c:	4a73      	ldr	r2, [pc, #460]	; (801453c <_strtod_l+0xbec>)
 801436e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014370:	4694      	mov	ip, r2
 8014372:	4463      	add	r3, ip
 8014374:	001f      	movs	r7, r3
 8014376:	0030      	movs	r0, r6
 8014378:	0019      	movs	r1, r3
 801437a:	f7ff f99b 	bl	80136b4 <__ulp>
 801437e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014380:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014382:	f7f1 f857 	bl	8005434 <__aeabi_dmul>
 8014386:	0032      	movs	r2, r6
 8014388:	003b      	movs	r3, r7
 801438a:	f7f0 f8f9 	bl	8004580 <__aeabi_dadd>
 801438e:	4a69      	ldr	r2, [pc, #420]	; (8014534 <_strtod_l+0xbe4>)
 8014390:	4b6b      	ldr	r3, [pc, #428]	; (8014540 <_strtod_l+0xbf0>)
 8014392:	0006      	movs	r6, r0
 8014394:	400a      	ands	r2, r1
 8014396:	429a      	cmp	r2, r3
 8014398:	d949      	bls.n	801442e <_strtod_l+0xade>
 801439a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801439c:	4b69      	ldr	r3, [pc, #420]	; (8014544 <_strtod_l+0xbf4>)
 801439e:	429a      	cmp	r2, r3
 80143a0:	d103      	bne.n	80143aa <_strtod_l+0xa5a>
 80143a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80143a4:	3301      	adds	r3, #1
 80143a6:	d100      	bne.n	80143aa <_strtod_l+0xa5a>
 80143a8:	e535      	b.n	8013e16 <_strtod_l+0x4c6>
 80143aa:	2601      	movs	r6, #1
 80143ac:	4f65      	ldr	r7, [pc, #404]	; (8014544 <_strtod_l+0xbf4>)
 80143ae:	4276      	negs	r6, r6
 80143b0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80143b2:	9804      	ldr	r0, [sp, #16]
 80143b4:	f7fe fe3c 	bl	8013030 <_Bfree>
 80143b8:	9908      	ldr	r1, [sp, #32]
 80143ba:	9804      	ldr	r0, [sp, #16]
 80143bc:	f7fe fe38 	bl	8013030 <_Bfree>
 80143c0:	9906      	ldr	r1, [sp, #24]
 80143c2:	9804      	ldr	r0, [sp, #16]
 80143c4:	f7fe fe34 	bl	8013030 <_Bfree>
 80143c8:	9905      	ldr	r1, [sp, #20]
 80143ca:	9804      	ldr	r0, [sp, #16]
 80143cc:	f7fe fe30 	bl	8013030 <_Bfree>
 80143d0:	e60b      	b.n	8013fea <_strtod_l+0x69a>
 80143d2:	2e01      	cmp	r6, #1
 80143d4:	d103      	bne.n	80143de <_strtod_l+0xa8e>
 80143d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80143d8:	2b00      	cmp	r3, #0
 80143da:	d100      	bne.n	80143de <_strtod_l+0xa8e>
 80143dc:	e58e      	b.n	8013efc <_strtod_l+0x5ac>
 80143de:	2300      	movs	r3, #0
 80143e0:	4c59      	ldr	r4, [pc, #356]	; (8014548 <_strtod_l+0xbf8>)
 80143e2:	930a      	str	r3, [sp, #40]	; 0x28
 80143e4:	940b      	str	r4, [sp, #44]	; 0x2c
 80143e6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80143e8:	e01c      	b.n	8014424 <_strtod_l+0xad4>
 80143ea:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80143ec:	4d50      	ldr	r5, [pc, #320]	; (8014530 <_strtod_l+0xbe0>)
 80143ee:	e7ab      	b.n	8014348 <_strtod_l+0x9f8>
 80143f0:	2200      	movs	r2, #0
 80143f2:	0020      	movs	r0, r4
 80143f4:	0029      	movs	r1, r5
 80143f6:	4b4e      	ldr	r3, [pc, #312]	; (8014530 <_strtod_l+0xbe0>)
 80143f8:	f7f1 f81c 	bl	8005434 <__aeabi_dmul>
 80143fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80143fe:	0004      	movs	r4, r0
 8014400:	000b      	movs	r3, r1
 8014402:	000d      	movs	r5, r1
 8014404:	2a00      	cmp	r2, #0
 8014406:	d104      	bne.n	8014412 <_strtod_l+0xac2>
 8014408:	2280      	movs	r2, #128	; 0x80
 801440a:	0612      	lsls	r2, r2, #24
 801440c:	900a      	str	r0, [sp, #40]	; 0x28
 801440e:	188b      	adds	r3, r1, r2
 8014410:	e79e      	b.n	8014350 <_strtod_l+0xa00>
 8014412:	0002      	movs	r2, r0
 8014414:	920a      	str	r2, [sp, #40]	; 0x28
 8014416:	930b      	str	r3, [sp, #44]	; 0x2c
 8014418:	e79b      	b.n	8014352 <_strtod_l+0xa02>
 801441a:	2300      	movs	r3, #0
 801441c:	4c43      	ldr	r4, [pc, #268]	; (801452c <_strtod_l+0xbdc>)
 801441e:	930a      	str	r3, [sp, #40]	; 0x28
 8014420:	940b      	str	r4, [sp, #44]	; 0x2c
 8014422:	2400      	movs	r4, #0
 8014424:	4d41      	ldr	r5, [pc, #260]	; (801452c <_strtod_l+0xbdc>)
 8014426:	e794      	b.n	8014352 <_strtod_l+0xa02>
 8014428:	2300      	movs	r3, #0
 801442a:	4c47      	ldr	r4, [pc, #284]	; (8014548 <_strtod_l+0xbf8>)
 801442c:	e7f7      	b.n	801441e <_strtod_l+0xace>
 801442e:	23d4      	movs	r3, #212	; 0xd4
 8014430:	049b      	lsls	r3, r3, #18
 8014432:	18cf      	adds	r7, r1, r3
 8014434:	9b07      	ldr	r3, [sp, #28]
 8014436:	970e      	str	r7, [sp, #56]	; 0x38
 8014438:	2b00      	cmp	r3, #0
 801443a:	d1b9      	bne.n	80143b0 <_strtod_l+0xa60>
 801443c:	4b3d      	ldr	r3, [pc, #244]	; (8014534 <_strtod_l+0xbe4>)
 801443e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014440:	403b      	ands	r3, r7
 8014442:	429a      	cmp	r2, r3
 8014444:	d1b4      	bne.n	80143b0 <_strtod_l+0xa60>
 8014446:	0020      	movs	r0, r4
 8014448:	0029      	movs	r1, r5
 801444a:	f7ef f8ad 	bl	80035a8 <__aeabi_d2lz>
 801444e:	f7ef f93b 	bl	80036c8 <__aeabi_l2d>
 8014452:	0002      	movs	r2, r0
 8014454:	000b      	movs	r3, r1
 8014456:	0020      	movs	r0, r4
 8014458:	0029      	movs	r1, r5
 801445a:	f7f1 faad 	bl	80059b8 <__aeabi_dsub>
 801445e:	033b      	lsls	r3, r7, #12
 8014460:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014462:	0b1b      	lsrs	r3, r3, #12
 8014464:	4333      	orrs	r3, r6
 8014466:	4313      	orrs	r3, r2
 8014468:	0004      	movs	r4, r0
 801446a:	000d      	movs	r5, r1
 801446c:	4a37      	ldr	r2, [pc, #220]	; (801454c <_strtod_l+0xbfc>)
 801446e:	2b00      	cmp	r3, #0
 8014470:	d054      	beq.n	801451c <_strtod_l+0xbcc>
 8014472:	4b37      	ldr	r3, [pc, #220]	; (8014550 <_strtod_l+0xc00>)
 8014474:	f7ee ff96 	bl	80033a4 <__aeabi_dcmplt>
 8014478:	2800      	cmp	r0, #0
 801447a:	d000      	beq.n	801447e <_strtod_l+0xb2e>
 801447c:	e4d4      	b.n	8013e28 <_strtod_l+0x4d8>
 801447e:	0020      	movs	r0, r4
 8014480:	0029      	movs	r1, r5
 8014482:	4a34      	ldr	r2, [pc, #208]	; (8014554 <_strtod_l+0xc04>)
 8014484:	4b2a      	ldr	r3, [pc, #168]	; (8014530 <_strtod_l+0xbe0>)
 8014486:	f7ee ffa1 	bl	80033cc <__aeabi_dcmpgt>
 801448a:	2800      	cmp	r0, #0
 801448c:	d090      	beq.n	80143b0 <_strtod_l+0xa60>
 801448e:	e4cb      	b.n	8013e28 <_strtod_l+0x4d8>
 8014490:	9b07      	ldr	r3, [sp, #28]
 8014492:	2b00      	cmp	r3, #0
 8014494:	d02b      	beq.n	80144ee <_strtod_l+0xb9e>
 8014496:	23d4      	movs	r3, #212	; 0xd4
 8014498:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801449a:	04db      	lsls	r3, r3, #19
 801449c:	429a      	cmp	r2, r3
 801449e:	d826      	bhi.n	80144ee <_strtod_l+0xb9e>
 80144a0:	0020      	movs	r0, r4
 80144a2:	0029      	movs	r1, r5
 80144a4:	4a2c      	ldr	r2, [pc, #176]	; (8014558 <_strtod_l+0xc08>)
 80144a6:	4b2d      	ldr	r3, [pc, #180]	; (801455c <_strtod_l+0xc0c>)
 80144a8:	f7ee ff86 	bl	80033b8 <__aeabi_dcmple>
 80144ac:	2800      	cmp	r0, #0
 80144ae:	d017      	beq.n	80144e0 <_strtod_l+0xb90>
 80144b0:	0020      	movs	r0, r4
 80144b2:	0029      	movs	r1, r5
 80144b4:	f7ef f842 	bl	800353c <__aeabi_d2uiz>
 80144b8:	2800      	cmp	r0, #0
 80144ba:	d100      	bne.n	80144be <_strtod_l+0xb6e>
 80144bc:	3001      	adds	r0, #1
 80144be:	f7f1 fe81 	bl	80061c4 <__aeabi_ui2d>
 80144c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80144c4:	0004      	movs	r4, r0
 80144c6:	000b      	movs	r3, r1
 80144c8:	000d      	movs	r5, r1
 80144ca:	2a00      	cmp	r2, #0
 80144cc:	d122      	bne.n	8014514 <_strtod_l+0xbc4>
 80144ce:	2280      	movs	r2, #128	; 0x80
 80144d0:	0612      	lsls	r2, r2, #24
 80144d2:	188b      	adds	r3, r1, r2
 80144d4:	9016      	str	r0, [sp, #88]	; 0x58
 80144d6:	9317      	str	r3, [sp, #92]	; 0x5c
 80144d8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80144da:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80144dc:	9212      	str	r2, [sp, #72]	; 0x48
 80144de:	9313      	str	r3, [sp, #76]	; 0x4c
 80144e0:	22d6      	movs	r2, #214	; 0xd6
 80144e2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80144e4:	04d2      	lsls	r2, r2, #19
 80144e6:	189b      	adds	r3, r3, r2
 80144e8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80144ea:	1a9b      	subs	r3, r3, r2
 80144ec:	9313      	str	r3, [sp, #76]	; 0x4c
 80144ee:	9810      	ldr	r0, [sp, #64]	; 0x40
 80144f0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80144f2:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80144f4:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 80144f6:	f7ff f8dd 	bl	80136b4 <__ulp>
 80144fa:	0002      	movs	r2, r0
 80144fc:	000b      	movs	r3, r1
 80144fe:	0030      	movs	r0, r6
 8014500:	0039      	movs	r1, r7
 8014502:	f7f0 ff97 	bl	8005434 <__aeabi_dmul>
 8014506:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014508:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801450a:	f7f0 f839 	bl	8004580 <__aeabi_dadd>
 801450e:	0006      	movs	r6, r0
 8014510:	000f      	movs	r7, r1
 8014512:	e78f      	b.n	8014434 <_strtod_l+0xae4>
 8014514:	0002      	movs	r2, r0
 8014516:	9216      	str	r2, [sp, #88]	; 0x58
 8014518:	9317      	str	r3, [sp, #92]	; 0x5c
 801451a:	e7dd      	b.n	80144d8 <_strtod_l+0xb88>
 801451c:	4b10      	ldr	r3, [pc, #64]	; (8014560 <_strtod_l+0xc10>)
 801451e:	f7ee ff41 	bl	80033a4 <__aeabi_dcmplt>
 8014522:	e7b2      	b.n	801448a <_strtod_l+0xb3a>
 8014524:	fff00000 	.word	0xfff00000
 8014528:	000fffff 	.word	0x000fffff
 801452c:	3ff00000 	.word	0x3ff00000
 8014530:	3fe00000 	.word	0x3fe00000
 8014534:	7ff00000 	.word	0x7ff00000
 8014538:	7fe00000 	.word	0x7fe00000
 801453c:	fcb00000 	.word	0xfcb00000
 8014540:	7c9fffff 	.word	0x7c9fffff
 8014544:	7fefffff 	.word	0x7fefffff
 8014548:	bff00000 	.word	0xbff00000
 801454c:	94a03595 	.word	0x94a03595
 8014550:	3fdfffff 	.word	0x3fdfffff
 8014554:	35afe535 	.word	0x35afe535
 8014558:	ffc00000 	.word	0xffc00000
 801455c:	41dfffff 	.word	0x41dfffff
 8014560:	3fcfffff 	.word	0x3fcfffff

08014564 <_strtod_r>:
 8014564:	b510      	push	{r4, lr}
 8014566:	4b02      	ldr	r3, [pc, #8]	; (8014570 <_strtod_r+0xc>)
 8014568:	f7ff f9f2 	bl	8013950 <_strtod_l>
 801456c:	bd10      	pop	{r4, pc}
 801456e:	46c0      	nop			; (mov r8, r8)
 8014570:	200000bc 	.word	0x200000bc

08014574 <_strtol_l.constprop.0>:
 8014574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014576:	b087      	sub	sp, #28
 8014578:	001e      	movs	r6, r3
 801457a:	9005      	str	r0, [sp, #20]
 801457c:	9101      	str	r1, [sp, #4]
 801457e:	9202      	str	r2, [sp, #8]
 8014580:	2b01      	cmp	r3, #1
 8014582:	d048      	beq.n	8014616 <_strtol_l.constprop.0+0xa2>
 8014584:	000b      	movs	r3, r1
 8014586:	2e24      	cmp	r6, #36	; 0x24
 8014588:	d845      	bhi.n	8014616 <_strtol_l.constprop.0+0xa2>
 801458a:	4a3b      	ldr	r2, [pc, #236]	; (8014678 <_strtol_l.constprop.0+0x104>)
 801458c:	2108      	movs	r1, #8
 801458e:	4694      	mov	ip, r2
 8014590:	001a      	movs	r2, r3
 8014592:	4660      	mov	r0, ip
 8014594:	7814      	ldrb	r4, [r2, #0]
 8014596:	3301      	adds	r3, #1
 8014598:	5d00      	ldrb	r0, [r0, r4]
 801459a:	001d      	movs	r5, r3
 801459c:	0007      	movs	r7, r0
 801459e:	400f      	ands	r7, r1
 80145a0:	4208      	tst	r0, r1
 80145a2:	d1f5      	bne.n	8014590 <_strtol_l.constprop.0+0x1c>
 80145a4:	2c2d      	cmp	r4, #45	; 0x2d
 80145a6:	d13d      	bne.n	8014624 <_strtol_l.constprop.0+0xb0>
 80145a8:	2701      	movs	r7, #1
 80145aa:	781c      	ldrb	r4, [r3, #0]
 80145ac:	1c95      	adds	r5, r2, #2
 80145ae:	2e00      	cmp	r6, #0
 80145b0:	d05e      	beq.n	8014670 <_strtol_l.constprop.0+0xfc>
 80145b2:	2e10      	cmp	r6, #16
 80145b4:	d109      	bne.n	80145ca <_strtol_l.constprop.0+0x56>
 80145b6:	2c30      	cmp	r4, #48	; 0x30
 80145b8:	d107      	bne.n	80145ca <_strtol_l.constprop.0+0x56>
 80145ba:	2220      	movs	r2, #32
 80145bc:	782b      	ldrb	r3, [r5, #0]
 80145be:	4393      	bics	r3, r2
 80145c0:	2b58      	cmp	r3, #88	; 0x58
 80145c2:	d150      	bne.n	8014666 <_strtol_l.constprop.0+0xf2>
 80145c4:	2610      	movs	r6, #16
 80145c6:	786c      	ldrb	r4, [r5, #1]
 80145c8:	3502      	adds	r5, #2
 80145ca:	4b2c      	ldr	r3, [pc, #176]	; (801467c <_strtol_l.constprop.0+0x108>)
 80145cc:	0031      	movs	r1, r6
 80145ce:	18fb      	adds	r3, r7, r3
 80145d0:	0018      	movs	r0, r3
 80145d2:	9303      	str	r3, [sp, #12]
 80145d4:	f7ee fde0 	bl	8003198 <__aeabi_uidivmod>
 80145d8:	2200      	movs	r2, #0
 80145da:	9104      	str	r1, [sp, #16]
 80145dc:	2101      	movs	r1, #1
 80145de:	4684      	mov	ip, r0
 80145e0:	0010      	movs	r0, r2
 80145e2:	4249      	negs	r1, r1
 80145e4:	0023      	movs	r3, r4
 80145e6:	3b30      	subs	r3, #48	; 0x30
 80145e8:	2b09      	cmp	r3, #9
 80145ea:	d903      	bls.n	80145f4 <_strtol_l.constprop.0+0x80>
 80145ec:	3b11      	subs	r3, #17
 80145ee:	2b19      	cmp	r3, #25
 80145f0:	d81d      	bhi.n	801462e <_strtol_l.constprop.0+0xba>
 80145f2:	330a      	adds	r3, #10
 80145f4:	429e      	cmp	r6, r3
 80145f6:	dd1e      	ble.n	8014636 <_strtol_l.constprop.0+0xc2>
 80145f8:	1c54      	adds	r4, r2, #1
 80145fa:	d009      	beq.n	8014610 <_strtol_l.constprop.0+0x9c>
 80145fc:	000a      	movs	r2, r1
 80145fe:	4584      	cmp	ip, r0
 8014600:	d306      	bcc.n	8014610 <_strtol_l.constprop.0+0x9c>
 8014602:	d102      	bne.n	801460a <_strtol_l.constprop.0+0x96>
 8014604:	9c04      	ldr	r4, [sp, #16]
 8014606:	429c      	cmp	r4, r3
 8014608:	db02      	blt.n	8014610 <_strtol_l.constprop.0+0x9c>
 801460a:	2201      	movs	r2, #1
 801460c:	4370      	muls	r0, r6
 801460e:	1818      	adds	r0, r3, r0
 8014610:	782c      	ldrb	r4, [r5, #0]
 8014612:	3501      	adds	r5, #1
 8014614:	e7e6      	b.n	80145e4 <_strtol_l.constprop.0+0x70>
 8014616:	f7fd fce1 	bl	8011fdc <__errno>
 801461a:	2316      	movs	r3, #22
 801461c:	6003      	str	r3, [r0, #0]
 801461e:	2000      	movs	r0, #0
 8014620:	b007      	add	sp, #28
 8014622:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014624:	2c2b      	cmp	r4, #43	; 0x2b
 8014626:	d1c2      	bne.n	80145ae <_strtol_l.constprop.0+0x3a>
 8014628:	781c      	ldrb	r4, [r3, #0]
 801462a:	1c95      	adds	r5, r2, #2
 801462c:	e7bf      	b.n	80145ae <_strtol_l.constprop.0+0x3a>
 801462e:	0023      	movs	r3, r4
 8014630:	3b61      	subs	r3, #97	; 0x61
 8014632:	2b19      	cmp	r3, #25
 8014634:	d9dd      	bls.n	80145f2 <_strtol_l.constprop.0+0x7e>
 8014636:	1c53      	adds	r3, r2, #1
 8014638:	d109      	bne.n	801464e <_strtol_l.constprop.0+0xda>
 801463a:	2322      	movs	r3, #34	; 0x22
 801463c:	9a05      	ldr	r2, [sp, #20]
 801463e:	9803      	ldr	r0, [sp, #12]
 8014640:	6013      	str	r3, [r2, #0]
 8014642:	9b02      	ldr	r3, [sp, #8]
 8014644:	2b00      	cmp	r3, #0
 8014646:	d0eb      	beq.n	8014620 <_strtol_l.constprop.0+0xac>
 8014648:	1e6b      	subs	r3, r5, #1
 801464a:	9301      	str	r3, [sp, #4]
 801464c:	e007      	b.n	801465e <_strtol_l.constprop.0+0xea>
 801464e:	2f00      	cmp	r7, #0
 8014650:	d000      	beq.n	8014654 <_strtol_l.constprop.0+0xe0>
 8014652:	4240      	negs	r0, r0
 8014654:	9b02      	ldr	r3, [sp, #8]
 8014656:	2b00      	cmp	r3, #0
 8014658:	d0e2      	beq.n	8014620 <_strtol_l.constprop.0+0xac>
 801465a:	2a00      	cmp	r2, #0
 801465c:	d1f4      	bne.n	8014648 <_strtol_l.constprop.0+0xd4>
 801465e:	9b02      	ldr	r3, [sp, #8]
 8014660:	9a01      	ldr	r2, [sp, #4]
 8014662:	601a      	str	r2, [r3, #0]
 8014664:	e7dc      	b.n	8014620 <_strtol_l.constprop.0+0xac>
 8014666:	2430      	movs	r4, #48	; 0x30
 8014668:	2e00      	cmp	r6, #0
 801466a:	d1ae      	bne.n	80145ca <_strtol_l.constprop.0+0x56>
 801466c:	3608      	adds	r6, #8
 801466e:	e7ac      	b.n	80145ca <_strtol_l.constprop.0+0x56>
 8014670:	2c30      	cmp	r4, #48	; 0x30
 8014672:	d0a2      	beq.n	80145ba <_strtol_l.constprop.0+0x46>
 8014674:	260a      	movs	r6, #10
 8014676:	e7a8      	b.n	80145ca <_strtol_l.constprop.0+0x56>
 8014678:	08016d91 	.word	0x08016d91
 801467c:	7fffffff 	.word	0x7fffffff

08014680 <_strtol_r>:
 8014680:	b510      	push	{r4, lr}
 8014682:	f7ff ff77 	bl	8014574 <_strtol_l.constprop.0>
 8014686:	bd10      	pop	{r4, pc}

08014688 <__ssputs_r>:
 8014688:	b5f0      	push	{r4, r5, r6, r7, lr}
 801468a:	b085      	sub	sp, #20
 801468c:	9301      	str	r3, [sp, #4]
 801468e:	9203      	str	r2, [sp, #12]
 8014690:	688e      	ldr	r6, [r1, #8]
 8014692:	9a01      	ldr	r2, [sp, #4]
 8014694:	0007      	movs	r7, r0
 8014696:	000c      	movs	r4, r1
 8014698:	680b      	ldr	r3, [r1, #0]
 801469a:	4296      	cmp	r6, r2
 801469c:	d831      	bhi.n	8014702 <__ssputs_r+0x7a>
 801469e:	898a      	ldrh	r2, [r1, #12]
 80146a0:	2190      	movs	r1, #144	; 0x90
 80146a2:	00c9      	lsls	r1, r1, #3
 80146a4:	420a      	tst	r2, r1
 80146a6:	d029      	beq.n	80146fc <__ssputs_r+0x74>
 80146a8:	2003      	movs	r0, #3
 80146aa:	6921      	ldr	r1, [r4, #16]
 80146ac:	1a5b      	subs	r3, r3, r1
 80146ae:	9302      	str	r3, [sp, #8]
 80146b0:	6963      	ldr	r3, [r4, #20]
 80146b2:	4343      	muls	r3, r0
 80146b4:	0fdd      	lsrs	r5, r3, #31
 80146b6:	18ed      	adds	r5, r5, r3
 80146b8:	9b01      	ldr	r3, [sp, #4]
 80146ba:	9802      	ldr	r0, [sp, #8]
 80146bc:	3301      	adds	r3, #1
 80146be:	181b      	adds	r3, r3, r0
 80146c0:	106d      	asrs	r5, r5, #1
 80146c2:	42ab      	cmp	r3, r5
 80146c4:	d900      	bls.n	80146c8 <__ssputs_r+0x40>
 80146c6:	001d      	movs	r5, r3
 80146c8:	0552      	lsls	r2, r2, #21
 80146ca:	d529      	bpl.n	8014720 <__ssputs_r+0x98>
 80146cc:	0029      	movs	r1, r5
 80146ce:	0038      	movs	r0, r7
 80146d0:	f7fe fbd8 	bl	8012e84 <_malloc_r>
 80146d4:	1e06      	subs	r6, r0, #0
 80146d6:	d02d      	beq.n	8014734 <__ssputs_r+0xac>
 80146d8:	9a02      	ldr	r2, [sp, #8]
 80146da:	6921      	ldr	r1, [r4, #16]
 80146dc:	f7fd fcb6 	bl	801204c <memcpy>
 80146e0:	89a2      	ldrh	r2, [r4, #12]
 80146e2:	4b19      	ldr	r3, [pc, #100]	; (8014748 <__ssputs_r+0xc0>)
 80146e4:	401a      	ands	r2, r3
 80146e6:	2380      	movs	r3, #128	; 0x80
 80146e8:	4313      	orrs	r3, r2
 80146ea:	81a3      	strh	r3, [r4, #12]
 80146ec:	9b02      	ldr	r3, [sp, #8]
 80146ee:	6126      	str	r6, [r4, #16]
 80146f0:	18f6      	adds	r6, r6, r3
 80146f2:	6026      	str	r6, [r4, #0]
 80146f4:	6165      	str	r5, [r4, #20]
 80146f6:	9e01      	ldr	r6, [sp, #4]
 80146f8:	1aed      	subs	r5, r5, r3
 80146fa:	60a5      	str	r5, [r4, #8]
 80146fc:	9b01      	ldr	r3, [sp, #4]
 80146fe:	429e      	cmp	r6, r3
 8014700:	d900      	bls.n	8014704 <__ssputs_r+0x7c>
 8014702:	9e01      	ldr	r6, [sp, #4]
 8014704:	0032      	movs	r2, r6
 8014706:	9903      	ldr	r1, [sp, #12]
 8014708:	6820      	ldr	r0, [r4, #0]
 801470a:	f7fd fbf9 	bl	8011f00 <memmove>
 801470e:	2000      	movs	r0, #0
 8014710:	68a3      	ldr	r3, [r4, #8]
 8014712:	1b9b      	subs	r3, r3, r6
 8014714:	60a3      	str	r3, [r4, #8]
 8014716:	6823      	ldr	r3, [r4, #0]
 8014718:	199b      	adds	r3, r3, r6
 801471a:	6023      	str	r3, [r4, #0]
 801471c:	b005      	add	sp, #20
 801471e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014720:	002a      	movs	r2, r5
 8014722:	0038      	movs	r0, r7
 8014724:	f000 ff74 	bl	8015610 <_realloc_r>
 8014728:	1e06      	subs	r6, r0, #0
 801472a:	d1df      	bne.n	80146ec <__ssputs_r+0x64>
 801472c:	0038      	movs	r0, r7
 801472e:	6921      	ldr	r1, [r4, #16]
 8014730:	f7fe fb32 	bl	8012d98 <_free_r>
 8014734:	230c      	movs	r3, #12
 8014736:	2001      	movs	r0, #1
 8014738:	603b      	str	r3, [r7, #0]
 801473a:	89a2      	ldrh	r2, [r4, #12]
 801473c:	3334      	adds	r3, #52	; 0x34
 801473e:	4313      	orrs	r3, r2
 8014740:	81a3      	strh	r3, [r4, #12]
 8014742:	4240      	negs	r0, r0
 8014744:	e7ea      	b.n	801471c <__ssputs_r+0x94>
 8014746:	46c0      	nop			; (mov r8, r8)
 8014748:	fffffb7f 	.word	0xfffffb7f

0801474c <_svfiprintf_r>:
 801474c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801474e:	b0a1      	sub	sp, #132	; 0x84
 8014750:	9003      	str	r0, [sp, #12]
 8014752:	001d      	movs	r5, r3
 8014754:	898b      	ldrh	r3, [r1, #12]
 8014756:	000f      	movs	r7, r1
 8014758:	0016      	movs	r6, r2
 801475a:	061b      	lsls	r3, r3, #24
 801475c:	d511      	bpl.n	8014782 <_svfiprintf_r+0x36>
 801475e:	690b      	ldr	r3, [r1, #16]
 8014760:	2b00      	cmp	r3, #0
 8014762:	d10e      	bne.n	8014782 <_svfiprintf_r+0x36>
 8014764:	2140      	movs	r1, #64	; 0x40
 8014766:	f7fe fb8d 	bl	8012e84 <_malloc_r>
 801476a:	6038      	str	r0, [r7, #0]
 801476c:	6138      	str	r0, [r7, #16]
 801476e:	2800      	cmp	r0, #0
 8014770:	d105      	bne.n	801477e <_svfiprintf_r+0x32>
 8014772:	230c      	movs	r3, #12
 8014774:	9a03      	ldr	r2, [sp, #12]
 8014776:	3801      	subs	r0, #1
 8014778:	6013      	str	r3, [r2, #0]
 801477a:	b021      	add	sp, #132	; 0x84
 801477c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801477e:	2340      	movs	r3, #64	; 0x40
 8014780:	617b      	str	r3, [r7, #20]
 8014782:	2300      	movs	r3, #0
 8014784:	ac08      	add	r4, sp, #32
 8014786:	6163      	str	r3, [r4, #20]
 8014788:	3320      	adds	r3, #32
 801478a:	7663      	strb	r3, [r4, #25]
 801478c:	3310      	adds	r3, #16
 801478e:	76a3      	strb	r3, [r4, #26]
 8014790:	9507      	str	r5, [sp, #28]
 8014792:	0035      	movs	r5, r6
 8014794:	782b      	ldrb	r3, [r5, #0]
 8014796:	2b00      	cmp	r3, #0
 8014798:	d001      	beq.n	801479e <_svfiprintf_r+0x52>
 801479a:	2b25      	cmp	r3, #37	; 0x25
 801479c:	d148      	bne.n	8014830 <_svfiprintf_r+0xe4>
 801479e:	1bab      	subs	r3, r5, r6
 80147a0:	9305      	str	r3, [sp, #20]
 80147a2:	42b5      	cmp	r5, r6
 80147a4:	d00b      	beq.n	80147be <_svfiprintf_r+0x72>
 80147a6:	0032      	movs	r2, r6
 80147a8:	0039      	movs	r1, r7
 80147aa:	9803      	ldr	r0, [sp, #12]
 80147ac:	f7ff ff6c 	bl	8014688 <__ssputs_r>
 80147b0:	3001      	adds	r0, #1
 80147b2:	d100      	bne.n	80147b6 <_svfiprintf_r+0x6a>
 80147b4:	e0af      	b.n	8014916 <_svfiprintf_r+0x1ca>
 80147b6:	6963      	ldr	r3, [r4, #20]
 80147b8:	9a05      	ldr	r2, [sp, #20]
 80147ba:	189b      	adds	r3, r3, r2
 80147bc:	6163      	str	r3, [r4, #20]
 80147be:	782b      	ldrb	r3, [r5, #0]
 80147c0:	2b00      	cmp	r3, #0
 80147c2:	d100      	bne.n	80147c6 <_svfiprintf_r+0x7a>
 80147c4:	e0a7      	b.n	8014916 <_svfiprintf_r+0x1ca>
 80147c6:	2201      	movs	r2, #1
 80147c8:	2300      	movs	r3, #0
 80147ca:	4252      	negs	r2, r2
 80147cc:	6062      	str	r2, [r4, #4]
 80147ce:	a904      	add	r1, sp, #16
 80147d0:	3254      	adds	r2, #84	; 0x54
 80147d2:	1852      	adds	r2, r2, r1
 80147d4:	1c6e      	adds	r6, r5, #1
 80147d6:	6023      	str	r3, [r4, #0]
 80147d8:	60e3      	str	r3, [r4, #12]
 80147da:	60a3      	str	r3, [r4, #8]
 80147dc:	7013      	strb	r3, [r2, #0]
 80147de:	65a3      	str	r3, [r4, #88]	; 0x58
 80147e0:	4b55      	ldr	r3, [pc, #340]	; (8014938 <_svfiprintf_r+0x1ec>)
 80147e2:	2205      	movs	r2, #5
 80147e4:	0018      	movs	r0, r3
 80147e6:	7831      	ldrb	r1, [r6, #0]
 80147e8:	9305      	str	r3, [sp, #20]
 80147ea:	f7fd fc24 	bl	8012036 <memchr>
 80147ee:	1c75      	adds	r5, r6, #1
 80147f0:	2800      	cmp	r0, #0
 80147f2:	d11f      	bne.n	8014834 <_svfiprintf_r+0xe8>
 80147f4:	6822      	ldr	r2, [r4, #0]
 80147f6:	06d3      	lsls	r3, r2, #27
 80147f8:	d504      	bpl.n	8014804 <_svfiprintf_r+0xb8>
 80147fa:	2353      	movs	r3, #83	; 0x53
 80147fc:	a904      	add	r1, sp, #16
 80147fe:	185b      	adds	r3, r3, r1
 8014800:	2120      	movs	r1, #32
 8014802:	7019      	strb	r1, [r3, #0]
 8014804:	0713      	lsls	r3, r2, #28
 8014806:	d504      	bpl.n	8014812 <_svfiprintf_r+0xc6>
 8014808:	2353      	movs	r3, #83	; 0x53
 801480a:	a904      	add	r1, sp, #16
 801480c:	185b      	adds	r3, r3, r1
 801480e:	212b      	movs	r1, #43	; 0x2b
 8014810:	7019      	strb	r1, [r3, #0]
 8014812:	7833      	ldrb	r3, [r6, #0]
 8014814:	2b2a      	cmp	r3, #42	; 0x2a
 8014816:	d016      	beq.n	8014846 <_svfiprintf_r+0xfa>
 8014818:	0035      	movs	r5, r6
 801481a:	2100      	movs	r1, #0
 801481c:	200a      	movs	r0, #10
 801481e:	68e3      	ldr	r3, [r4, #12]
 8014820:	782a      	ldrb	r2, [r5, #0]
 8014822:	1c6e      	adds	r6, r5, #1
 8014824:	3a30      	subs	r2, #48	; 0x30
 8014826:	2a09      	cmp	r2, #9
 8014828:	d94e      	bls.n	80148c8 <_svfiprintf_r+0x17c>
 801482a:	2900      	cmp	r1, #0
 801482c:	d111      	bne.n	8014852 <_svfiprintf_r+0x106>
 801482e:	e017      	b.n	8014860 <_svfiprintf_r+0x114>
 8014830:	3501      	adds	r5, #1
 8014832:	e7af      	b.n	8014794 <_svfiprintf_r+0x48>
 8014834:	9b05      	ldr	r3, [sp, #20]
 8014836:	6822      	ldr	r2, [r4, #0]
 8014838:	1ac0      	subs	r0, r0, r3
 801483a:	2301      	movs	r3, #1
 801483c:	4083      	lsls	r3, r0
 801483e:	4313      	orrs	r3, r2
 8014840:	002e      	movs	r6, r5
 8014842:	6023      	str	r3, [r4, #0]
 8014844:	e7cc      	b.n	80147e0 <_svfiprintf_r+0x94>
 8014846:	9b07      	ldr	r3, [sp, #28]
 8014848:	1d19      	adds	r1, r3, #4
 801484a:	681b      	ldr	r3, [r3, #0]
 801484c:	9107      	str	r1, [sp, #28]
 801484e:	2b00      	cmp	r3, #0
 8014850:	db01      	blt.n	8014856 <_svfiprintf_r+0x10a>
 8014852:	930b      	str	r3, [sp, #44]	; 0x2c
 8014854:	e004      	b.n	8014860 <_svfiprintf_r+0x114>
 8014856:	425b      	negs	r3, r3
 8014858:	60e3      	str	r3, [r4, #12]
 801485a:	2302      	movs	r3, #2
 801485c:	4313      	orrs	r3, r2
 801485e:	6023      	str	r3, [r4, #0]
 8014860:	782b      	ldrb	r3, [r5, #0]
 8014862:	2b2e      	cmp	r3, #46	; 0x2e
 8014864:	d10a      	bne.n	801487c <_svfiprintf_r+0x130>
 8014866:	786b      	ldrb	r3, [r5, #1]
 8014868:	2b2a      	cmp	r3, #42	; 0x2a
 801486a:	d135      	bne.n	80148d8 <_svfiprintf_r+0x18c>
 801486c:	9b07      	ldr	r3, [sp, #28]
 801486e:	3502      	adds	r5, #2
 8014870:	1d1a      	adds	r2, r3, #4
 8014872:	681b      	ldr	r3, [r3, #0]
 8014874:	9207      	str	r2, [sp, #28]
 8014876:	2b00      	cmp	r3, #0
 8014878:	db2b      	blt.n	80148d2 <_svfiprintf_r+0x186>
 801487a:	9309      	str	r3, [sp, #36]	; 0x24
 801487c:	4e2f      	ldr	r6, [pc, #188]	; (801493c <_svfiprintf_r+0x1f0>)
 801487e:	2203      	movs	r2, #3
 8014880:	0030      	movs	r0, r6
 8014882:	7829      	ldrb	r1, [r5, #0]
 8014884:	f7fd fbd7 	bl	8012036 <memchr>
 8014888:	2800      	cmp	r0, #0
 801488a:	d006      	beq.n	801489a <_svfiprintf_r+0x14e>
 801488c:	2340      	movs	r3, #64	; 0x40
 801488e:	1b80      	subs	r0, r0, r6
 8014890:	4083      	lsls	r3, r0
 8014892:	6822      	ldr	r2, [r4, #0]
 8014894:	3501      	adds	r5, #1
 8014896:	4313      	orrs	r3, r2
 8014898:	6023      	str	r3, [r4, #0]
 801489a:	7829      	ldrb	r1, [r5, #0]
 801489c:	2206      	movs	r2, #6
 801489e:	4828      	ldr	r0, [pc, #160]	; (8014940 <_svfiprintf_r+0x1f4>)
 80148a0:	1c6e      	adds	r6, r5, #1
 80148a2:	7621      	strb	r1, [r4, #24]
 80148a4:	f7fd fbc7 	bl	8012036 <memchr>
 80148a8:	2800      	cmp	r0, #0
 80148aa:	d03c      	beq.n	8014926 <_svfiprintf_r+0x1da>
 80148ac:	4b25      	ldr	r3, [pc, #148]	; (8014944 <_svfiprintf_r+0x1f8>)
 80148ae:	2b00      	cmp	r3, #0
 80148b0:	d125      	bne.n	80148fe <_svfiprintf_r+0x1b2>
 80148b2:	2207      	movs	r2, #7
 80148b4:	9b07      	ldr	r3, [sp, #28]
 80148b6:	3307      	adds	r3, #7
 80148b8:	4393      	bics	r3, r2
 80148ba:	3308      	adds	r3, #8
 80148bc:	9307      	str	r3, [sp, #28]
 80148be:	6963      	ldr	r3, [r4, #20]
 80148c0:	9a04      	ldr	r2, [sp, #16]
 80148c2:	189b      	adds	r3, r3, r2
 80148c4:	6163      	str	r3, [r4, #20]
 80148c6:	e764      	b.n	8014792 <_svfiprintf_r+0x46>
 80148c8:	4343      	muls	r3, r0
 80148ca:	0035      	movs	r5, r6
 80148cc:	2101      	movs	r1, #1
 80148ce:	189b      	adds	r3, r3, r2
 80148d0:	e7a6      	b.n	8014820 <_svfiprintf_r+0xd4>
 80148d2:	2301      	movs	r3, #1
 80148d4:	425b      	negs	r3, r3
 80148d6:	e7d0      	b.n	801487a <_svfiprintf_r+0x12e>
 80148d8:	2300      	movs	r3, #0
 80148da:	200a      	movs	r0, #10
 80148dc:	001a      	movs	r2, r3
 80148de:	3501      	adds	r5, #1
 80148e0:	6063      	str	r3, [r4, #4]
 80148e2:	7829      	ldrb	r1, [r5, #0]
 80148e4:	1c6e      	adds	r6, r5, #1
 80148e6:	3930      	subs	r1, #48	; 0x30
 80148e8:	2909      	cmp	r1, #9
 80148ea:	d903      	bls.n	80148f4 <_svfiprintf_r+0x1a8>
 80148ec:	2b00      	cmp	r3, #0
 80148ee:	d0c5      	beq.n	801487c <_svfiprintf_r+0x130>
 80148f0:	9209      	str	r2, [sp, #36]	; 0x24
 80148f2:	e7c3      	b.n	801487c <_svfiprintf_r+0x130>
 80148f4:	4342      	muls	r2, r0
 80148f6:	0035      	movs	r5, r6
 80148f8:	2301      	movs	r3, #1
 80148fa:	1852      	adds	r2, r2, r1
 80148fc:	e7f1      	b.n	80148e2 <_svfiprintf_r+0x196>
 80148fe:	aa07      	add	r2, sp, #28
 8014900:	9200      	str	r2, [sp, #0]
 8014902:	0021      	movs	r1, r4
 8014904:	003a      	movs	r2, r7
 8014906:	4b10      	ldr	r3, [pc, #64]	; (8014948 <_svfiprintf_r+0x1fc>)
 8014908:	9803      	ldr	r0, [sp, #12]
 801490a:	f7fc faa5 	bl	8010e58 <_printf_float>
 801490e:	9004      	str	r0, [sp, #16]
 8014910:	9b04      	ldr	r3, [sp, #16]
 8014912:	3301      	adds	r3, #1
 8014914:	d1d3      	bne.n	80148be <_svfiprintf_r+0x172>
 8014916:	89bb      	ldrh	r3, [r7, #12]
 8014918:	980d      	ldr	r0, [sp, #52]	; 0x34
 801491a:	065b      	lsls	r3, r3, #25
 801491c:	d400      	bmi.n	8014920 <_svfiprintf_r+0x1d4>
 801491e:	e72c      	b.n	801477a <_svfiprintf_r+0x2e>
 8014920:	2001      	movs	r0, #1
 8014922:	4240      	negs	r0, r0
 8014924:	e729      	b.n	801477a <_svfiprintf_r+0x2e>
 8014926:	aa07      	add	r2, sp, #28
 8014928:	9200      	str	r2, [sp, #0]
 801492a:	0021      	movs	r1, r4
 801492c:	003a      	movs	r2, r7
 801492e:	4b06      	ldr	r3, [pc, #24]	; (8014948 <_svfiprintf_r+0x1fc>)
 8014930:	9803      	ldr	r0, [sp, #12]
 8014932:	f7fc fd57 	bl	80113e4 <_printf_i>
 8014936:	e7ea      	b.n	801490e <_svfiprintf_r+0x1c2>
 8014938:	08016e91 	.word	0x08016e91
 801493c:	08016e97 	.word	0x08016e97
 8014940:	08016e9b 	.word	0x08016e9b
 8014944:	08010e59 	.word	0x08010e59
 8014948:	08014689 	.word	0x08014689

0801494c <__sfputc_r>:
 801494c:	6893      	ldr	r3, [r2, #8]
 801494e:	b510      	push	{r4, lr}
 8014950:	3b01      	subs	r3, #1
 8014952:	6093      	str	r3, [r2, #8]
 8014954:	2b00      	cmp	r3, #0
 8014956:	da04      	bge.n	8014962 <__sfputc_r+0x16>
 8014958:	6994      	ldr	r4, [r2, #24]
 801495a:	42a3      	cmp	r3, r4
 801495c:	db07      	blt.n	801496e <__sfputc_r+0x22>
 801495e:	290a      	cmp	r1, #10
 8014960:	d005      	beq.n	801496e <__sfputc_r+0x22>
 8014962:	6813      	ldr	r3, [r2, #0]
 8014964:	1c58      	adds	r0, r3, #1
 8014966:	6010      	str	r0, [r2, #0]
 8014968:	7019      	strb	r1, [r3, #0]
 801496a:	0008      	movs	r0, r1
 801496c:	bd10      	pop	{r4, pc}
 801496e:	f7fd fa13 	bl	8011d98 <__swbuf_r>
 8014972:	0001      	movs	r1, r0
 8014974:	e7f9      	b.n	801496a <__sfputc_r+0x1e>

08014976 <__sfputs_r>:
 8014976:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014978:	0006      	movs	r6, r0
 801497a:	000f      	movs	r7, r1
 801497c:	0014      	movs	r4, r2
 801497e:	18d5      	adds	r5, r2, r3
 8014980:	42ac      	cmp	r4, r5
 8014982:	d101      	bne.n	8014988 <__sfputs_r+0x12>
 8014984:	2000      	movs	r0, #0
 8014986:	e007      	b.n	8014998 <__sfputs_r+0x22>
 8014988:	7821      	ldrb	r1, [r4, #0]
 801498a:	003a      	movs	r2, r7
 801498c:	0030      	movs	r0, r6
 801498e:	f7ff ffdd 	bl	801494c <__sfputc_r>
 8014992:	3401      	adds	r4, #1
 8014994:	1c43      	adds	r3, r0, #1
 8014996:	d1f3      	bne.n	8014980 <__sfputs_r+0xa>
 8014998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801499c <_vfiprintf_r>:
 801499c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801499e:	b0a1      	sub	sp, #132	; 0x84
 80149a0:	000f      	movs	r7, r1
 80149a2:	0015      	movs	r5, r2
 80149a4:	001e      	movs	r6, r3
 80149a6:	9003      	str	r0, [sp, #12]
 80149a8:	2800      	cmp	r0, #0
 80149aa:	d004      	beq.n	80149b6 <_vfiprintf_r+0x1a>
 80149ac:	6a03      	ldr	r3, [r0, #32]
 80149ae:	2b00      	cmp	r3, #0
 80149b0:	d101      	bne.n	80149b6 <_vfiprintf_r+0x1a>
 80149b2:	f7fd f8bf 	bl	8011b34 <__sinit>
 80149b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80149b8:	07db      	lsls	r3, r3, #31
 80149ba:	d405      	bmi.n	80149c8 <_vfiprintf_r+0x2c>
 80149bc:	89bb      	ldrh	r3, [r7, #12]
 80149be:	059b      	lsls	r3, r3, #22
 80149c0:	d402      	bmi.n	80149c8 <_vfiprintf_r+0x2c>
 80149c2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80149c4:	f7fd fb35 	bl	8012032 <__retarget_lock_acquire_recursive>
 80149c8:	89bb      	ldrh	r3, [r7, #12]
 80149ca:	071b      	lsls	r3, r3, #28
 80149cc:	d502      	bpl.n	80149d4 <_vfiprintf_r+0x38>
 80149ce:	693b      	ldr	r3, [r7, #16]
 80149d0:	2b00      	cmp	r3, #0
 80149d2:	d113      	bne.n	80149fc <_vfiprintf_r+0x60>
 80149d4:	0039      	movs	r1, r7
 80149d6:	9803      	ldr	r0, [sp, #12]
 80149d8:	f7fd fa20 	bl	8011e1c <__swsetup_r>
 80149dc:	2800      	cmp	r0, #0
 80149de:	d00d      	beq.n	80149fc <_vfiprintf_r+0x60>
 80149e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80149e2:	07db      	lsls	r3, r3, #31
 80149e4:	d503      	bpl.n	80149ee <_vfiprintf_r+0x52>
 80149e6:	2001      	movs	r0, #1
 80149e8:	4240      	negs	r0, r0
 80149ea:	b021      	add	sp, #132	; 0x84
 80149ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80149ee:	89bb      	ldrh	r3, [r7, #12]
 80149f0:	059b      	lsls	r3, r3, #22
 80149f2:	d4f8      	bmi.n	80149e6 <_vfiprintf_r+0x4a>
 80149f4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80149f6:	f7fd fb1d 	bl	8012034 <__retarget_lock_release_recursive>
 80149fa:	e7f4      	b.n	80149e6 <_vfiprintf_r+0x4a>
 80149fc:	2300      	movs	r3, #0
 80149fe:	ac08      	add	r4, sp, #32
 8014a00:	6163      	str	r3, [r4, #20]
 8014a02:	3320      	adds	r3, #32
 8014a04:	7663      	strb	r3, [r4, #25]
 8014a06:	3310      	adds	r3, #16
 8014a08:	76a3      	strb	r3, [r4, #26]
 8014a0a:	9607      	str	r6, [sp, #28]
 8014a0c:	002e      	movs	r6, r5
 8014a0e:	7833      	ldrb	r3, [r6, #0]
 8014a10:	2b00      	cmp	r3, #0
 8014a12:	d001      	beq.n	8014a18 <_vfiprintf_r+0x7c>
 8014a14:	2b25      	cmp	r3, #37	; 0x25
 8014a16:	d148      	bne.n	8014aaa <_vfiprintf_r+0x10e>
 8014a18:	1b73      	subs	r3, r6, r5
 8014a1a:	9305      	str	r3, [sp, #20]
 8014a1c:	42ae      	cmp	r6, r5
 8014a1e:	d00b      	beq.n	8014a38 <_vfiprintf_r+0x9c>
 8014a20:	002a      	movs	r2, r5
 8014a22:	0039      	movs	r1, r7
 8014a24:	9803      	ldr	r0, [sp, #12]
 8014a26:	f7ff ffa6 	bl	8014976 <__sfputs_r>
 8014a2a:	3001      	adds	r0, #1
 8014a2c:	d100      	bne.n	8014a30 <_vfiprintf_r+0x94>
 8014a2e:	e0af      	b.n	8014b90 <_vfiprintf_r+0x1f4>
 8014a30:	6963      	ldr	r3, [r4, #20]
 8014a32:	9a05      	ldr	r2, [sp, #20]
 8014a34:	189b      	adds	r3, r3, r2
 8014a36:	6163      	str	r3, [r4, #20]
 8014a38:	7833      	ldrb	r3, [r6, #0]
 8014a3a:	2b00      	cmp	r3, #0
 8014a3c:	d100      	bne.n	8014a40 <_vfiprintf_r+0xa4>
 8014a3e:	e0a7      	b.n	8014b90 <_vfiprintf_r+0x1f4>
 8014a40:	2201      	movs	r2, #1
 8014a42:	2300      	movs	r3, #0
 8014a44:	4252      	negs	r2, r2
 8014a46:	6062      	str	r2, [r4, #4]
 8014a48:	a904      	add	r1, sp, #16
 8014a4a:	3254      	adds	r2, #84	; 0x54
 8014a4c:	1852      	adds	r2, r2, r1
 8014a4e:	1c75      	adds	r5, r6, #1
 8014a50:	6023      	str	r3, [r4, #0]
 8014a52:	60e3      	str	r3, [r4, #12]
 8014a54:	60a3      	str	r3, [r4, #8]
 8014a56:	7013      	strb	r3, [r2, #0]
 8014a58:	65a3      	str	r3, [r4, #88]	; 0x58
 8014a5a:	4b59      	ldr	r3, [pc, #356]	; (8014bc0 <_vfiprintf_r+0x224>)
 8014a5c:	2205      	movs	r2, #5
 8014a5e:	0018      	movs	r0, r3
 8014a60:	7829      	ldrb	r1, [r5, #0]
 8014a62:	9305      	str	r3, [sp, #20]
 8014a64:	f7fd fae7 	bl	8012036 <memchr>
 8014a68:	1c6e      	adds	r6, r5, #1
 8014a6a:	2800      	cmp	r0, #0
 8014a6c:	d11f      	bne.n	8014aae <_vfiprintf_r+0x112>
 8014a6e:	6822      	ldr	r2, [r4, #0]
 8014a70:	06d3      	lsls	r3, r2, #27
 8014a72:	d504      	bpl.n	8014a7e <_vfiprintf_r+0xe2>
 8014a74:	2353      	movs	r3, #83	; 0x53
 8014a76:	a904      	add	r1, sp, #16
 8014a78:	185b      	adds	r3, r3, r1
 8014a7a:	2120      	movs	r1, #32
 8014a7c:	7019      	strb	r1, [r3, #0]
 8014a7e:	0713      	lsls	r3, r2, #28
 8014a80:	d504      	bpl.n	8014a8c <_vfiprintf_r+0xf0>
 8014a82:	2353      	movs	r3, #83	; 0x53
 8014a84:	a904      	add	r1, sp, #16
 8014a86:	185b      	adds	r3, r3, r1
 8014a88:	212b      	movs	r1, #43	; 0x2b
 8014a8a:	7019      	strb	r1, [r3, #0]
 8014a8c:	782b      	ldrb	r3, [r5, #0]
 8014a8e:	2b2a      	cmp	r3, #42	; 0x2a
 8014a90:	d016      	beq.n	8014ac0 <_vfiprintf_r+0x124>
 8014a92:	002e      	movs	r6, r5
 8014a94:	2100      	movs	r1, #0
 8014a96:	200a      	movs	r0, #10
 8014a98:	68e3      	ldr	r3, [r4, #12]
 8014a9a:	7832      	ldrb	r2, [r6, #0]
 8014a9c:	1c75      	adds	r5, r6, #1
 8014a9e:	3a30      	subs	r2, #48	; 0x30
 8014aa0:	2a09      	cmp	r2, #9
 8014aa2:	d94e      	bls.n	8014b42 <_vfiprintf_r+0x1a6>
 8014aa4:	2900      	cmp	r1, #0
 8014aa6:	d111      	bne.n	8014acc <_vfiprintf_r+0x130>
 8014aa8:	e017      	b.n	8014ada <_vfiprintf_r+0x13e>
 8014aaa:	3601      	adds	r6, #1
 8014aac:	e7af      	b.n	8014a0e <_vfiprintf_r+0x72>
 8014aae:	9b05      	ldr	r3, [sp, #20]
 8014ab0:	6822      	ldr	r2, [r4, #0]
 8014ab2:	1ac0      	subs	r0, r0, r3
 8014ab4:	2301      	movs	r3, #1
 8014ab6:	4083      	lsls	r3, r0
 8014ab8:	4313      	orrs	r3, r2
 8014aba:	0035      	movs	r5, r6
 8014abc:	6023      	str	r3, [r4, #0]
 8014abe:	e7cc      	b.n	8014a5a <_vfiprintf_r+0xbe>
 8014ac0:	9b07      	ldr	r3, [sp, #28]
 8014ac2:	1d19      	adds	r1, r3, #4
 8014ac4:	681b      	ldr	r3, [r3, #0]
 8014ac6:	9107      	str	r1, [sp, #28]
 8014ac8:	2b00      	cmp	r3, #0
 8014aca:	db01      	blt.n	8014ad0 <_vfiprintf_r+0x134>
 8014acc:	930b      	str	r3, [sp, #44]	; 0x2c
 8014ace:	e004      	b.n	8014ada <_vfiprintf_r+0x13e>
 8014ad0:	425b      	negs	r3, r3
 8014ad2:	60e3      	str	r3, [r4, #12]
 8014ad4:	2302      	movs	r3, #2
 8014ad6:	4313      	orrs	r3, r2
 8014ad8:	6023      	str	r3, [r4, #0]
 8014ada:	7833      	ldrb	r3, [r6, #0]
 8014adc:	2b2e      	cmp	r3, #46	; 0x2e
 8014ade:	d10a      	bne.n	8014af6 <_vfiprintf_r+0x15a>
 8014ae0:	7873      	ldrb	r3, [r6, #1]
 8014ae2:	2b2a      	cmp	r3, #42	; 0x2a
 8014ae4:	d135      	bne.n	8014b52 <_vfiprintf_r+0x1b6>
 8014ae6:	9b07      	ldr	r3, [sp, #28]
 8014ae8:	3602      	adds	r6, #2
 8014aea:	1d1a      	adds	r2, r3, #4
 8014aec:	681b      	ldr	r3, [r3, #0]
 8014aee:	9207      	str	r2, [sp, #28]
 8014af0:	2b00      	cmp	r3, #0
 8014af2:	db2b      	blt.n	8014b4c <_vfiprintf_r+0x1b0>
 8014af4:	9309      	str	r3, [sp, #36]	; 0x24
 8014af6:	4d33      	ldr	r5, [pc, #204]	; (8014bc4 <_vfiprintf_r+0x228>)
 8014af8:	2203      	movs	r2, #3
 8014afa:	0028      	movs	r0, r5
 8014afc:	7831      	ldrb	r1, [r6, #0]
 8014afe:	f7fd fa9a 	bl	8012036 <memchr>
 8014b02:	2800      	cmp	r0, #0
 8014b04:	d006      	beq.n	8014b14 <_vfiprintf_r+0x178>
 8014b06:	2340      	movs	r3, #64	; 0x40
 8014b08:	1b40      	subs	r0, r0, r5
 8014b0a:	4083      	lsls	r3, r0
 8014b0c:	6822      	ldr	r2, [r4, #0]
 8014b0e:	3601      	adds	r6, #1
 8014b10:	4313      	orrs	r3, r2
 8014b12:	6023      	str	r3, [r4, #0]
 8014b14:	7831      	ldrb	r1, [r6, #0]
 8014b16:	2206      	movs	r2, #6
 8014b18:	482b      	ldr	r0, [pc, #172]	; (8014bc8 <_vfiprintf_r+0x22c>)
 8014b1a:	1c75      	adds	r5, r6, #1
 8014b1c:	7621      	strb	r1, [r4, #24]
 8014b1e:	f7fd fa8a 	bl	8012036 <memchr>
 8014b22:	2800      	cmp	r0, #0
 8014b24:	d043      	beq.n	8014bae <_vfiprintf_r+0x212>
 8014b26:	4b29      	ldr	r3, [pc, #164]	; (8014bcc <_vfiprintf_r+0x230>)
 8014b28:	2b00      	cmp	r3, #0
 8014b2a:	d125      	bne.n	8014b78 <_vfiprintf_r+0x1dc>
 8014b2c:	2207      	movs	r2, #7
 8014b2e:	9b07      	ldr	r3, [sp, #28]
 8014b30:	3307      	adds	r3, #7
 8014b32:	4393      	bics	r3, r2
 8014b34:	3308      	adds	r3, #8
 8014b36:	9307      	str	r3, [sp, #28]
 8014b38:	6963      	ldr	r3, [r4, #20]
 8014b3a:	9a04      	ldr	r2, [sp, #16]
 8014b3c:	189b      	adds	r3, r3, r2
 8014b3e:	6163      	str	r3, [r4, #20]
 8014b40:	e764      	b.n	8014a0c <_vfiprintf_r+0x70>
 8014b42:	4343      	muls	r3, r0
 8014b44:	002e      	movs	r6, r5
 8014b46:	2101      	movs	r1, #1
 8014b48:	189b      	adds	r3, r3, r2
 8014b4a:	e7a6      	b.n	8014a9a <_vfiprintf_r+0xfe>
 8014b4c:	2301      	movs	r3, #1
 8014b4e:	425b      	negs	r3, r3
 8014b50:	e7d0      	b.n	8014af4 <_vfiprintf_r+0x158>
 8014b52:	2300      	movs	r3, #0
 8014b54:	200a      	movs	r0, #10
 8014b56:	001a      	movs	r2, r3
 8014b58:	3601      	adds	r6, #1
 8014b5a:	6063      	str	r3, [r4, #4]
 8014b5c:	7831      	ldrb	r1, [r6, #0]
 8014b5e:	1c75      	adds	r5, r6, #1
 8014b60:	3930      	subs	r1, #48	; 0x30
 8014b62:	2909      	cmp	r1, #9
 8014b64:	d903      	bls.n	8014b6e <_vfiprintf_r+0x1d2>
 8014b66:	2b00      	cmp	r3, #0
 8014b68:	d0c5      	beq.n	8014af6 <_vfiprintf_r+0x15a>
 8014b6a:	9209      	str	r2, [sp, #36]	; 0x24
 8014b6c:	e7c3      	b.n	8014af6 <_vfiprintf_r+0x15a>
 8014b6e:	4342      	muls	r2, r0
 8014b70:	002e      	movs	r6, r5
 8014b72:	2301      	movs	r3, #1
 8014b74:	1852      	adds	r2, r2, r1
 8014b76:	e7f1      	b.n	8014b5c <_vfiprintf_r+0x1c0>
 8014b78:	aa07      	add	r2, sp, #28
 8014b7a:	9200      	str	r2, [sp, #0]
 8014b7c:	0021      	movs	r1, r4
 8014b7e:	003a      	movs	r2, r7
 8014b80:	4b13      	ldr	r3, [pc, #76]	; (8014bd0 <_vfiprintf_r+0x234>)
 8014b82:	9803      	ldr	r0, [sp, #12]
 8014b84:	f7fc f968 	bl	8010e58 <_printf_float>
 8014b88:	9004      	str	r0, [sp, #16]
 8014b8a:	9b04      	ldr	r3, [sp, #16]
 8014b8c:	3301      	adds	r3, #1
 8014b8e:	d1d3      	bne.n	8014b38 <_vfiprintf_r+0x19c>
 8014b90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014b92:	07db      	lsls	r3, r3, #31
 8014b94:	d405      	bmi.n	8014ba2 <_vfiprintf_r+0x206>
 8014b96:	89bb      	ldrh	r3, [r7, #12]
 8014b98:	059b      	lsls	r3, r3, #22
 8014b9a:	d402      	bmi.n	8014ba2 <_vfiprintf_r+0x206>
 8014b9c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8014b9e:	f7fd fa49 	bl	8012034 <__retarget_lock_release_recursive>
 8014ba2:	89bb      	ldrh	r3, [r7, #12]
 8014ba4:	065b      	lsls	r3, r3, #25
 8014ba6:	d500      	bpl.n	8014baa <_vfiprintf_r+0x20e>
 8014ba8:	e71d      	b.n	80149e6 <_vfiprintf_r+0x4a>
 8014baa:	980d      	ldr	r0, [sp, #52]	; 0x34
 8014bac:	e71d      	b.n	80149ea <_vfiprintf_r+0x4e>
 8014bae:	aa07      	add	r2, sp, #28
 8014bb0:	9200      	str	r2, [sp, #0]
 8014bb2:	0021      	movs	r1, r4
 8014bb4:	003a      	movs	r2, r7
 8014bb6:	4b06      	ldr	r3, [pc, #24]	; (8014bd0 <_vfiprintf_r+0x234>)
 8014bb8:	9803      	ldr	r0, [sp, #12]
 8014bba:	f7fc fc13 	bl	80113e4 <_printf_i>
 8014bbe:	e7e3      	b.n	8014b88 <_vfiprintf_r+0x1ec>
 8014bc0:	08016e91 	.word	0x08016e91
 8014bc4:	08016e97 	.word	0x08016e97
 8014bc8:	08016e9b 	.word	0x08016e9b
 8014bcc:	08010e59 	.word	0x08010e59
 8014bd0:	08014977 	.word	0x08014977

08014bd4 <__sflush_r>:
 8014bd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014bd6:	898b      	ldrh	r3, [r1, #12]
 8014bd8:	0005      	movs	r5, r0
 8014bda:	000c      	movs	r4, r1
 8014bdc:	071a      	lsls	r2, r3, #28
 8014bde:	d45c      	bmi.n	8014c9a <__sflush_r+0xc6>
 8014be0:	684a      	ldr	r2, [r1, #4]
 8014be2:	2a00      	cmp	r2, #0
 8014be4:	dc04      	bgt.n	8014bf0 <__sflush_r+0x1c>
 8014be6:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8014be8:	2a00      	cmp	r2, #0
 8014bea:	dc01      	bgt.n	8014bf0 <__sflush_r+0x1c>
 8014bec:	2000      	movs	r0, #0
 8014bee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8014bf0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8014bf2:	2f00      	cmp	r7, #0
 8014bf4:	d0fa      	beq.n	8014bec <__sflush_r+0x18>
 8014bf6:	2200      	movs	r2, #0
 8014bf8:	2080      	movs	r0, #128	; 0x80
 8014bfa:	682e      	ldr	r6, [r5, #0]
 8014bfc:	602a      	str	r2, [r5, #0]
 8014bfe:	001a      	movs	r2, r3
 8014c00:	0140      	lsls	r0, r0, #5
 8014c02:	6a21      	ldr	r1, [r4, #32]
 8014c04:	4002      	ands	r2, r0
 8014c06:	4203      	tst	r3, r0
 8014c08:	d034      	beq.n	8014c74 <__sflush_r+0xa0>
 8014c0a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014c0c:	89a3      	ldrh	r3, [r4, #12]
 8014c0e:	075b      	lsls	r3, r3, #29
 8014c10:	d506      	bpl.n	8014c20 <__sflush_r+0x4c>
 8014c12:	6863      	ldr	r3, [r4, #4]
 8014c14:	1ac0      	subs	r0, r0, r3
 8014c16:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014c18:	2b00      	cmp	r3, #0
 8014c1a:	d001      	beq.n	8014c20 <__sflush_r+0x4c>
 8014c1c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014c1e:	1ac0      	subs	r0, r0, r3
 8014c20:	0002      	movs	r2, r0
 8014c22:	2300      	movs	r3, #0
 8014c24:	0028      	movs	r0, r5
 8014c26:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8014c28:	6a21      	ldr	r1, [r4, #32]
 8014c2a:	47b8      	blx	r7
 8014c2c:	89a2      	ldrh	r2, [r4, #12]
 8014c2e:	1c43      	adds	r3, r0, #1
 8014c30:	d106      	bne.n	8014c40 <__sflush_r+0x6c>
 8014c32:	6829      	ldr	r1, [r5, #0]
 8014c34:	291d      	cmp	r1, #29
 8014c36:	d82c      	bhi.n	8014c92 <__sflush_r+0xbe>
 8014c38:	4b2a      	ldr	r3, [pc, #168]	; (8014ce4 <__sflush_r+0x110>)
 8014c3a:	410b      	asrs	r3, r1
 8014c3c:	07db      	lsls	r3, r3, #31
 8014c3e:	d428      	bmi.n	8014c92 <__sflush_r+0xbe>
 8014c40:	2300      	movs	r3, #0
 8014c42:	6063      	str	r3, [r4, #4]
 8014c44:	6923      	ldr	r3, [r4, #16]
 8014c46:	6023      	str	r3, [r4, #0]
 8014c48:	04d2      	lsls	r2, r2, #19
 8014c4a:	d505      	bpl.n	8014c58 <__sflush_r+0x84>
 8014c4c:	1c43      	adds	r3, r0, #1
 8014c4e:	d102      	bne.n	8014c56 <__sflush_r+0x82>
 8014c50:	682b      	ldr	r3, [r5, #0]
 8014c52:	2b00      	cmp	r3, #0
 8014c54:	d100      	bne.n	8014c58 <__sflush_r+0x84>
 8014c56:	6560      	str	r0, [r4, #84]	; 0x54
 8014c58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014c5a:	602e      	str	r6, [r5, #0]
 8014c5c:	2900      	cmp	r1, #0
 8014c5e:	d0c5      	beq.n	8014bec <__sflush_r+0x18>
 8014c60:	0023      	movs	r3, r4
 8014c62:	3344      	adds	r3, #68	; 0x44
 8014c64:	4299      	cmp	r1, r3
 8014c66:	d002      	beq.n	8014c6e <__sflush_r+0x9a>
 8014c68:	0028      	movs	r0, r5
 8014c6a:	f7fe f895 	bl	8012d98 <_free_r>
 8014c6e:	2000      	movs	r0, #0
 8014c70:	6360      	str	r0, [r4, #52]	; 0x34
 8014c72:	e7bc      	b.n	8014bee <__sflush_r+0x1a>
 8014c74:	2301      	movs	r3, #1
 8014c76:	0028      	movs	r0, r5
 8014c78:	47b8      	blx	r7
 8014c7a:	1c43      	adds	r3, r0, #1
 8014c7c:	d1c6      	bne.n	8014c0c <__sflush_r+0x38>
 8014c7e:	682b      	ldr	r3, [r5, #0]
 8014c80:	2b00      	cmp	r3, #0
 8014c82:	d0c3      	beq.n	8014c0c <__sflush_r+0x38>
 8014c84:	2b1d      	cmp	r3, #29
 8014c86:	d001      	beq.n	8014c8c <__sflush_r+0xb8>
 8014c88:	2b16      	cmp	r3, #22
 8014c8a:	d101      	bne.n	8014c90 <__sflush_r+0xbc>
 8014c8c:	602e      	str	r6, [r5, #0]
 8014c8e:	e7ad      	b.n	8014bec <__sflush_r+0x18>
 8014c90:	89a2      	ldrh	r2, [r4, #12]
 8014c92:	2340      	movs	r3, #64	; 0x40
 8014c94:	4313      	orrs	r3, r2
 8014c96:	81a3      	strh	r3, [r4, #12]
 8014c98:	e7a9      	b.n	8014bee <__sflush_r+0x1a>
 8014c9a:	690e      	ldr	r6, [r1, #16]
 8014c9c:	2e00      	cmp	r6, #0
 8014c9e:	d0a5      	beq.n	8014bec <__sflush_r+0x18>
 8014ca0:	680f      	ldr	r7, [r1, #0]
 8014ca2:	600e      	str	r6, [r1, #0]
 8014ca4:	1bba      	subs	r2, r7, r6
 8014ca6:	9201      	str	r2, [sp, #4]
 8014ca8:	2200      	movs	r2, #0
 8014caa:	079b      	lsls	r3, r3, #30
 8014cac:	d100      	bne.n	8014cb0 <__sflush_r+0xdc>
 8014cae:	694a      	ldr	r2, [r1, #20]
 8014cb0:	60a2      	str	r2, [r4, #8]
 8014cb2:	9b01      	ldr	r3, [sp, #4]
 8014cb4:	2b00      	cmp	r3, #0
 8014cb6:	dd99      	ble.n	8014bec <__sflush_r+0x18>
 8014cb8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8014cba:	0032      	movs	r2, r6
 8014cbc:	001f      	movs	r7, r3
 8014cbe:	0028      	movs	r0, r5
 8014cc0:	9b01      	ldr	r3, [sp, #4]
 8014cc2:	6a21      	ldr	r1, [r4, #32]
 8014cc4:	47b8      	blx	r7
 8014cc6:	2800      	cmp	r0, #0
 8014cc8:	dc06      	bgt.n	8014cd8 <__sflush_r+0x104>
 8014cca:	2340      	movs	r3, #64	; 0x40
 8014ccc:	2001      	movs	r0, #1
 8014cce:	89a2      	ldrh	r2, [r4, #12]
 8014cd0:	4240      	negs	r0, r0
 8014cd2:	4313      	orrs	r3, r2
 8014cd4:	81a3      	strh	r3, [r4, #12]
 8014cd6:	e78a      	b.n	8014bee <__sflush_r+0x1a>
 8014cd8:	9b01      	ldr	r3, [sp, #4]
 8014cda:	1836      	adds	r6, r6, r0
 8014cdc:	1a1b      	subs	r3, r3, r0
 8014cde:	9301      	str	r3, [sp, #4]
 8014ce0:	e7e7      	b.n	8014cb2 <__sflush_r+0xde>
 8014ce2:	46c0      	nop			; (mov r8, r8)
 8014ce4:	dfbffffe 	.word	0xdfbffffe

08014ce8 <_fflush_r>:
 8014ce8:	690b      	ldr	r3, [r1, #16]
 8014cea:	b570      	push	{r4, r5, r6, lr}
 8014cec:	0005      	movs	r5, r0
 8014cee:	000c      	movs	r4, r1
 8014cf0:	2b00      	cmp	r3, #0
 8014cf2:	d102      	bne.n	8014cfa <_fflush_r+0x12>
 8014cf4:	2500      	movs	r5, #0
 8014cf6:	0028      	movs	r0, r5
 8014cf8:	bd70      	pop	{r4, r5, r6, pc}
 8014cfa:	2800      	cmp	r0, #0
 8014cfc:	d004      	beq.n	8014d08 <_fflush_r+0x20>
 8014cfe:	6a03      	ldr	r3, [r0, #32]
 8014d00:	2b00      	cmp	r3, #0
 8014d02:	d101      	bne.n	8014d08 <_fflush_r+0x20>
 8014d04:	f7fc ff16 	bl	8011b34 <__sinit>
 8014d08:	220c      	movs	r2, #12
 8014d0a:	5ea3      	ldrsh	r3, [r4, r2]
 8014d0c:	2b00      	cmp	r3, #0
 8014d0e:	d0f1      	beq.n	8014cf4 <_fflush_r+0xc>
 8014d10:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014d12:	07d2      	lsls	r2, r2, #31
 8014d14:	d404      	bmi.n	8014d20 <_fflush_r+0x38>
 8014d16:	059b      	lsls	r3, r3, #22
 8014d18:	d402      	bmi.n	8014d20 <_fflush_r+0x38>
 8014d1a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014d1c:	f7fd f989 	bl	8012032 <__retarget_lock_acquire_recursive>
 8014d20:	0028      	movs	r0, r5
 8014d22:	0021      	movs	r1, r4
 8014d24:	f7ff ff56 	bl	8014bd4 <__sflush_r>
 8014d28:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014d2a:	0005      	movs	r5, r0
 8014d2c:	07db      	lsls	r3, r3, #31
 8014d2e:	d4e2      	bmi.n	8014cf6 <_fflush_r+0xe>
 8014d30:	89a3      	ldrh	r3, [r4, #12]
 8014d32:	059b      	lsls	r3, r3, #22
 8014d34:	d4df      	bmi.n	8014cf6 <_fflush_r+0xe>
 8014d36:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014d38:	f7fd f97c 	bl	8012034 <__retarget_lock_release_recursive>
 8014d3c:	e7db      	b.n	8014cf6 <_fflush_r+0xe>
	...

08014d40 <__swhatbuf_r>:
 8014d40:	b570      	push	{r4, r5, r6, lr}
 8014d42:	000e      	movs	r6, r1
 8014d44:	001d      	movs	r5, r3
 8014d46:	230e      	movs	r3, #14
 8014d48:	5ec9      	ldrsh	r1, [r1, r3]
 8014d4a:	0014      	movs	r4, r2
 8014d4c:	b096      	sub	sp, #88	; 0x58
 8014d4e:	2900      	cmp	r1, #0
 8014d50:	da0c      	bge.n	8014d6c <__swhatbuf_r+0x2c>
 8014d52:	89b2      	ldrh	r2, [r6, #12]
 8014d54:	2380      	movs	r3, #128	; 0x80
 8014d56:	0011      	movs	r1, r2
 8014d58:	4019      	ands	r1, r3
 8014d5a:	421a      	tst	r2, r3
 8014d5c:	d013      	beq.n	8014d86 <__swhatbuf_r+0x46>
 8014d5e:	2100      	movs	r1, #0
 8014d60:	3b40      	subs	r3, #64	; 0x40
 8014d62:	2000      	movs	r0, #0
 8014d64:	6029      	str	r1, [r5, #0]
 8014d66:	6023      	str	r3, [r4, #0]
 8014d68:	b016      	add	sp, #88	; 0x58
 8014d6a:	bd70      	pop	{r4, r5, r6, pc}
 8014d6c:	466a      	mov	r2, sp
 8014d6e:	f000 f85f 	bl	8014e30 <_fstat_r>
 8014d72:	2800      	cmp	r0, #0
 8014d74:	dbed      	blt.n	8014d52 <__swhatbuf_r+0x12>
 8014d76:	23f0      	movs	r3, #240	; 0xf0
 8014d78:	9901      	ldr	r1, [sp, #4]
 8014d7a:	021b      	lsls	r3, r3, #8
 8014d7c:	4019      	ands	r1, r3
 8014d7e:	4b03      	ldr	r3, [pc, #12]	; (8014d8c <__swhatbuf_r+0x4c>)
 8014d80:	18c9      	adds	r1, r1, r3
 8014d82:	424b      	negs	r3, r1
 8014d84:	4159      	adcs	r1, r3
 8014d86:	2380      	movs	r3, #128	; 0x80
 8014d88:	00db      	lsls	r3, r3, #3
 8014d8a:	e7ea      	b.n	8014d62 <__swhatbuf_r+0x22>
 8014d8c:	ffffe000 	.word	0xffffe000

08014d90 <__smakebuf_r>:
 8014d90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014d92:	2602      	movs	r6, #2
 8014d94:	898b      	ldrh	r3, [r1, #12]
 8014d96:	0005      	movs	r5, r0
 8014d98:	000c      	movs	r4, r1
 8014d9a:	4233      	tst	r3, r6
 8014d9c:	d006      	beq.n	8014dac <__smakebuf_r+0x1c>
 8014d9e:	0023      	movs	r3, r4
 8014da0:	3347      	adds	r3, #71	; 0x47
 8014da2:	6023      	str	r3, [r4, #0]
 8014da4:	6123      	str	r3, [r4, #16]
 8014da6:	2301      	movs	r3, #1
 8014da8:	6163      	str	r3, [r4, #20]
 8014daa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8014dac:	466a      	mov	r2, sp
 8014dae:	ab01      	add	r3, sp, #4
 8014db0:	f7ff ffc6 	bl	8014d40 <__swhatbuf_r>
 8014db4:	9900      	ldr	r1, [sp, #0]
 8014db6:	0007      	movs	r7, r0
 8014db8:	0028      	movs	r0, r5
 8014dba:	f7fe f863 	bl	8012e84 <_malloc_r>
 8014dbe:	2800      	cmp	r0, #0
 8014dc0:	d108      	bne.n	8014dd4 <__smakebuf_r+0x44>
 8014dc2:	220c      	movs	r2, #12
 8014dc4:	5ea3      	ldrsh	r3, [r4, r2]
 8014dc6:	059a      	lsls	r2, r3, #22
 8014dc8:	d4ef      	bmi.n	8014daa <__smakebuf_r+0x1a>
 8014dca:	2203      	movs	r2, #3
 8014dcc:	4393      	bics	r3, r2
 8014dce:	431e      	orrs	r6, r3
 8014dd0:	81a6      	strh	r6, [r4, #12]
 8014dd2:	e7e4      	b.n	8014d9e <__smakebuf_r+0xe>
 8014dd4:	2380      	movs	r3, #128	; 0x80
 8014dd6:	89a2      	ldrh	r2, [r4, #12]
 8014dd8:	6020      	str	r0, [r4, #0]
 8014dda:	4313      	orrs	r3, r2
 8014ddc:	81a3      	strh	r3, [r4, #12]
 8014dde:	9b00      	ldr	r3, [sp, #0]
 8014de0:	6120      	str	r0, [r4, #16]
 8014de2:	6163      	str	r3, [r4, #20]
 8014de4:	9b01      	ldr	r3, [sp, #4]
 8014de6:	2b00      	cmp	r3, #0
 8014de8:	d00c      	beq.n	8014e04 <__smakebuf_r+0x74>
 8014dea:	0028      	movs	r0, r5
 8014dec:	230e      	movs	r3, #14
 8014dee:	5ee1      	ldrsh	r1, [r4, r3]
 8014df0:	f000 f830 	bl	8014e54 <_isatty_r>
 8014df4:	2800      	cmp	r0, #0
 8014df6:	d005      	beq.n	8014e04 <__smakebuf_r+0x74>
 8014df8:	2303      	movs	r3, #3
 8014dfa:	89a2      	ldrh	r2, [r4, #12]
 8014dfc:	439a      	bics	r2, r3
 8014dfe:	3b02      	subs	r3, #2
 8014e00:	4313      	orrs	r3, r2
 8014e02:	81a3      	strh	r3, [r4, #12]
 8014e04:	89a3      	ldrh	r3, [r4, #12]
 8014e06:	433b      	orrs	r3, r7
 8014e08:	81a3      	strh	r3, [r4, #12]
 8014e0a:	e7ce      	b.n	8014daa <__smakebuf_r+0x1a>

08014e0c <strncmp>:
 8014e0c:	b530      	push	{r4, r5, lr}
 8014e0e:	0005      	movs	r5, r0
 8014e10:	1e10      	subs	r0, r2, #0
 8014e12:	d00b      	beq.n	8014e2c <strncmp+0x20>
 8014e14:	2400      	movs	r4, #0
 8014e16:	3a01      	subs	r2, #1
 8014e18:	5d2b      	ldrb	r3, [r5, r4]
 8014e1a:	5d08      	ldrb	r0, [r1, r4]
 8014e1c:	4283      	cmp	r3, r0
 8014e1e:	d104      	bne.n	8014e2a <strncmp+0x1e>
 8014e20:	42a2      	cmp	r2, r4
 8014e22:	d002      	beq.n	8014e2a <strncmp+0x1e>
 8014e24:	3401      	adds	r4, #1
 8014e26:	2b00      	cmp	r3, #0
 8014e28:	d1f6      	bne.n	8014e18 <strncmp+0xc>
 8014e2a:	1a18      	subs	r0, r3, r0
 8014e2c:	bd30      	pop	{r4, r5, pc}
	...

08014e30 <_fstat_r>:
 8014e30:	2300      	movs	r3, #0
 8014e32:	b570      	push	{r4, r5, r6, lr}
 8014e34:	4d06      	ldr	r5, [pc, #24]	; (8014e50 <_fstat_r+0x20>)
 8014e36:	0004      	movs	r4, r0
 8014e38:	0008      	movs	r0, r1
 8014e3a:	0011      	movs	r1, r2
 8014e3c:	602b      	str	r3, [r5, #0]
 8014e3e:	f7f2 facc 	bl	80073da <_fstat>
 8014e42:	1c43      	adds	r3, r0, #1
 8014e44:	d103      	bne.n	8014e4e <_fstat_r+0x1e>
 8014e46:	682b      	ldr	r3, [r5, #0]
 8014e48:	2b00      	cmp	r3, #0
 8014e4a:	d000      	beq.n	8014e4e <_fstat_r+0x1e>
 8014e4c:	6023      	str	r3, [r4, #0]
 8014e4e:	bd70      	pop	{r4, r5, r6, pc}
 8014e50:	20000d94 	.word	0x20000d94

08014e54 <_isatty_r>:
 8014e54:	2300      	movs	r3, #0
 8014e56:	b570      	push	{r4, r5, r6, lr}
 8014e58:	4d06      	ldr	r5, [pc, #24]	; (8014e74 <_isatty_r+0x20>)
 8014e5a:	0004      	movs	r4, r0
 8014e5c:	0008      	movs	r0, r1
 8014e5e:	602b      	str	r3, [r5, #0]
 8014e60:	f7f2 fac9 	bl	80073f6 <_isatty>
 8014e64:	1c43      	adds	r3, r0, #1
 8014e66:	d103      	bne.n	8014e70 <_isatty_r+0x1c>
 8014e68:	682b      	ldr	r3, [r5, #0]
 8014e6a:	2b00      	cmp	r3, #0
 8014e6c:	d000      	beq.n	8014e70 <_isatty_r+0x1c>
 8014e6e:	6023      	str	r3, [r4, #0]
 8014e70:	bd70      	pop	{r4, r5, r6, pc}
 8014e72:	46c0      	nop			; (mov r8, r8)
 8014e74:	20000d94 	.word	0x20000d94

08014e78 <_sbrk_r>:
 8014e78:	2300      	movs	r3, #0
 8014e7a:	b570      	push	{r4, r5, r6, lr}
 8014e7c:	4d06      	ldr	r5, [pc, #24]	; (8014e98 <_sbrk_r+0x20>)
 8014e7e:	0004      	movs	r4, r0
 8014e80:	0008      	movs	r0, r1
 8014e82:	602b      	str	r3, [r5, #0]
 8014e84:	f7f2 facc 	bl	8007420 <_sbrk>
 8014e88:	1c43      	adds	r3, r0, #1
 8014e8a:	d103      	bne.n	8014e94 <_sbrk_r+0x1c>
 8014e8c:	682b      	ldr	r3, [r5, #0]
 8014e8e:	2b00      	cmp	r3, #0
 8014e90:	d000      	beq.n	8014e94 <_sbrk_r+0x1c>
 8014e92:	6023      	str	r3, [r4, #0]
 8014e94:	bd70      	pop	{r4, r5, r6, pc}
 8014e96:	46c0      	nop			; (mov r8, r8)
 8014e98:	20000d94 	.word	0x20000d94

08014e9c <__assert_func>:
 8014e9c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8014e9e:	0014      	movs	r4, r2
 8014ea0:	001a      	movs	r2, r3
 8014ea2:	4b09      	ldr	r3, [pc, #36]	; (8014ec8 <__assert_func+0x2c>)
 8014ea4:	0005      	movs	r5, r0
 8014ea6:	681b      	ldr	r3, [r3, #0]
 8014ea8:	000e      	movs	r6, r1
 8014eaa:	68d8      	ldr	r0, [r3, #12]
 8014eac:	4b07      	ldr	r3, [pc, #28]	; (8014ecc <__assert_func+0x30>)
 8014eae:	2c00      	cmp	r4, #0
 8014eb0:	d101      	bne.n	8014eb6 <__assert_func+0x1a>
 8014eb2:	4b07      	ldr	r3, [pc, #28]	; (8014ed0 <__assert_func+0x34>)
 8014eb4:	001c      	movs	r4, r3
 8014eb6:	4907      	ldr	r1, [pc, #28]	; (8014ed4 <__assert_func+0x38>)
 8014eb8:	9301      	str	r3, [sp, #4]
 8014eba:	9402      	str	r4, [sp, #8]
 8014ebc:	002b      	movs	r3, r5
 8014ebe:	9600      	str	r6, [sp, #0]
 8014ec0:	f000 fbe2 	bl	8015688 <fiprintf>
 8014ec4:	f000 fbf0 	bl	80156a8 <abort>
 8014ec8:	200000b8 	.word	0x200000b8
 8014ecc:	08016eaa 	.word	0x08016eaa
 8014ed0:	08016ee5 	.word	0x08016ee5
 8014ed4:	08016eb7 	.word	0x08016eb7

08014ed8 <_calloc_r>:
 8014ed8:	b570      	push	{r4, r5, r6, lr}
 8014eda:	0c0b      	lsrs	r3, r1, #16
 8014edc:	0c15      	lsrs	r5, r2, #16
 8014ede:	2b00      	cmp	r3, #0
 8014ee0:	d11e      	bne.n	8014f20 <_calloc_r+0x48>
 8014ee2:	2d00      	cmp	r5, #0
 8014ee4:	d10c      	bne.n	8014f00 <_calloc_r+0x28>
 8014ee6:	b289      	uxth	r1, r1
 8014ee8:	b294      	uxth	r4, r2
 8014eea:	434c      	muls	r4, r1
 8014eec:	0021      	movs	r1, r4
 8014eee:	f7fd ffc9 	bl	8012e84 <_malloc_r>
 8014ef2:	1e05      	subs	r5, r0, #0
 8014ef4:	d01b      	beq.n	8014f2e <_calloc_r+0x56>
 8014ef6:	0022      	movs	r2, r4
 8014ef8:	2100      	movs	r1, #0
 8014efa:	f7fd f814 	bl	8011f26 <memset>
 8014efe:	e016      	b.n	8014f2e <_calloc_r+0x56>
 8014f00:	1c2b      	adds	r3, r5, #0
 8014f02:	1c0c      	adds	r4, r1, #0
 8014f04:	b289      	uxth	r1, r1
 8014f06:	b292      	uxth	r2, r2
 8014f08:	434a      	muls	r2, r1
 8014f0a:	b2a1      	uxth	r1, r4
 8014f0c:	b29c      	uxth	r4, r3
 8014f0e:	434c      	muls	r4, r1
 8014f10:	0c13      	lsrs	r3, r2, #16
 8014f12:	18e4      	adds	r4, r4, r3
 8014f14:	0c23      	lsrs	r3, r4, #16
 8014f16:	d107      	bne.n	8014f28 <_calloc_r+0x50>
 8014f18:	0424      	lsls	r4, r4, #16
 8014f1a:	b292      	uxth	r2, r2
 8014f1c:	4314      	orrs	r4, r2
 8014f1e:	e7e5      	b.n	8014eec <_calloc_r+0x14>
 8014f20:	2d00      	cmp	r5, #0
 8014f22:	d101      	bne.n	8014f28 <_calloc_r+0x50>
 8014f24:	1c14      	adds	r4, r2, #0
 8014f26:	e7ed      	b.n	8014f04 <_calloc_r+0x2c>
 8014f28:	230c      	movs	r3, #12
 8014f2a:	2500      	movs	r5, #0
 8014f2c:	6003      	str	r3, [r0, #0]
 8014f2e:	0028      	movs	r0, r5
 8014f30:	bd70      	pop	{r4, r5, r6, pc}

08014f32 <rshift>:
 8014f32:	0002      	movs	r2, r0
 8014f34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014f36:	6904      	ldr	r4, [r0, #16]
 8014f38:	114b      	asrs	r3, r1, #5
 8014f3a:	b085      	sub	sp, #20
 8014f3c:	3214      	adds	r2, #20
 8014f3e:	9302      	str	r3, [sp, #8]
 8014f40:	114d      	asrs	r5, r1, #5
 8014f42:	0013      	movs	r3, r2
 8014f44:	42ac      	cmp	r4, r5
 8014f46:	dd32      	ble.n	8014fae <rshift+0x7c>
 8014f48:	261f      	movs	r6, #31
 8014f4a:	000f      	movs	r7, r1
 8014f4c:	114b      	asrs	r3, r1, #5
 8014f4e:	009b      	lsls	r3, r3, #2
 8014f50:	00a5      	lsls	r5, r4, #2
 8014f52:	18d3      	adds	r3, r2, r3
 8014f54:	4037      	ands	r7, r6
 8014f56:	1955      	adds	r5, r2, r5
 8014f58:	9300      	str	r3, [sp, #0]
 8014f5a:	9701      	str	r7, [sp, #4]
 8014f5c:	4231      	tst	r1, r6
 8014f5e:	d10d      	bne.n	8014f7c <rshift+0x4a>
 8014f60:	0016      	movs	r6, r2
 8014f62:	0019      	movs	r1, r3
 8014f64:	428d      	cmp	r5, r1
 8014f66:	d836      	bhi.n	8014fd6 <rshift+0xa4>
 8014f68:	9900      	ldr	r1, [sp, #0]
 8014f6a:	2300      	movs	r3, #0
 8014f6c:	3903      	subs	r1, #3
 8014f6e:	428d      	cmp	r5, r1
 8014f70:	d302      	bcc.n	8014f78 <rshift+0x46>
 8014f72:	9b02      	ldr	r3, [sp, #8]
 8014f74:	1ae4      	subs	r4, r4, r3
 8014f76:	00a3      	lsls	r3, r4, #2
 8014f78:	18d3      	adds	r3, r2, r3
 8014f7a:	e018      	b.n	8014fae <rshift+0x7c>
 8014f7c:	2120      	movs	r1, #32
 8014f7e:	9e01      	ldr	r6, [sp, #4]
 8014f80:	9f01      	ldr	r7, [sp, #4]
 8014f82:	1b89      	subs	r1, r1, r6
 8014f84:	9e00      	ldr	r6, [sp, #0]
 8014f86:	9103      	str	r1, [sp, #12]
 8014f88:	ce02      	ldmia	r6!, {r1}
 8014f8a:	4694      	mov	ip, r2
 8014f8c:	40f9      	lsrs	r1, r7
 8014f8e:	42b5      	cmp	r5, r6
 8014f90:	d816      	bhi.n	8014fc0 <rshift+0x8e>
 8014f92:	9e00      	ldr	r6, [sp, #0]
 8014f94:	2300      	movs	r3, #0
 8014f96:	3601      	adds	r6, #1
 8014f98:	42b5      	cmp	r5, r6
 8014f9a:	d303      	bcc.n	8014fa4 <rshift+0x72>
 8014f9c:	9b02      	ldr	r3, [sp, #8]
 8014f9e:	1ae3      	subs	r3, r4, r3
 8014fa0:	009b      	lsls	r3, r3, #2
 8014fa2:	3b04      	subs	r3, #4
 8014fa4:	18d3      	adds	r3, r2, r3
 8014fa6:	6019      	str	r1, [r3, #0]
 8014fa8:	2900      	cmp	r1, #0
 8014faa:	d000      	beq.n	8014fae <rshift+0x7c>
 8014fac:	3304      	adds	r3, #4
 8014fae:	1a99      	subs	r1, r3, r2
 8014fb0:	1089      	asrs	r1, r1, #2
 8014fb2:	6101      	str	r1, [r0, #16]
 8014fb4:	4293      	cmp	r3, r2
 8014fb6:	d101      	bne.n	8014fbc <rshift+0x8a>
 8014fb8:	2300      	movs	r3, #0
 8014fba:	6143      	str	r3, [r0, #20]
 8014fbc:	b005      	add	sp, #20
 8014fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014fc0:	6837      	ldr	r7, [r6, #0]
 8014fc2:	9b03      	ldr	r3, [sp, #12]
 8014fc4:	409f      	lsls	r7, r3
 8014fc6:	430f      	orrs	r7, r1
 8014fc8:	4661      	mov	r1, ip
 8014fca:	c180      	stmia	r1!, {r7}
 8014fcc:	468c      	mov	ip, r1
 8014fce:	9b01      	ldr	r3, [sp, #4]
 8014fd0:	ce02      	ldmia	r6!, {r1}
 8014fd2:	40d9      	lsrs	r1, r3
 8014fd4:	e7db      	b.n	8014f8e <rshift+0x5c>
 8014fd6:	c980      	ldmia	r1!, {r7}
 8014fd8:	c680      	stmia	r6!, {r7}
 8014fda:	e7c3      	b.n	8014f64 <rshift+0x32>

08014fdc <__hexdig_fun>:
 8014fdc:	0002      	movs	r2, r0
 8014fde:	3a30      	subs	r2, #48	; 0x30
 8014fe0:	0003      	movs	r3, r0
 8014fe2:	2a09      	cmp	r2, #9
 8014fe4:	d802      	bhi.n	8014fec <__hexdig_fun+0x10>
 8014fe6:	3b20      	subs	r3, #32
 8014fe8:	b2d8      	uxtb	r0, r3
 8014fea:	4770      	bx	lr
 8014fec:	0002      	movs	r2, r0
 8014fee:	3a61      	subs	r2, #97	; 0x61
 8014ff0:	2a05      	cmp	r2, #5
 8014ff2:	d801      	bhi.n	8014ff8 <__hexdig_fun+0x1c>
 8014ff4:	3b47      	subs	r3, #71	; 0x47
 8014ff6:	e7f7      	b.n	8014fe8 <__hexdig_fun+0xc>
 8014ff8:	001a      	movs	r2, r3
 8014ffa:	3a41      	subs	r2, #65	; 0x41
 8014ffc:	2000      	movs	r0, #0
 8014ffe:	2a05      	cmp	r2, #5
 8015000:	d8f3      	bhi.n	8014fea <__hexdig_fun+0xe>
 8015002:	3b27      	subs	r3, #39	; 0x27
 8015004:	e7f0      	b.n	8014fe8 <__hexdig_fun+0xc>
	...

08015008 <__gethex>:
 8015008:	b5f0      	push	{r4, r5, r6, r7, lr}
 801500a:	b089      	sub	sp, #36	; 0x24
 801500c:	9307      	str	r3, [sp, #28]
 801500e:	2302      	movs	r3, #2
 8015010:	9201      	str	r2, [sp, #4]
 8015012:	680a      	ldr	r2, [r1, #0]
 8015014:	425b      	negs	r3, r3
 8015016:	9003      	str	r0, [sp, #12]
 8015018:	9106      	str	r1, [sp, #24]
 801501a:	1c96      	adds	r6, r2, #2
 801501c:	1a9b      	subs	r3, r3, r2
 801501e:	199a      	adds	r2, r3, r6
 8015020:	9600      	str	r6, [sp, #0]
 8015022:	9205      	str	r2, [sp, #20]
 8015024:	9a00      	ldr	r2, [sp, #0]
 8015026:	3601      	adds	r6, #1
 8015028:	7810      	ldrb	r0, [r2, #0]
 801502a:	2830      	cmp	r0, #48	; 0x30
 801502c:	d0f7      	beq.n	801501e <__gethex+0x16>
 801502e:	f7ff ffd5 	bl	8014fdc <__hexdig_fun>
 8015032:	2300      	movs	r3, #0
 8015034:	001d      	movs	r5, r3
 8015036:	9302      	str	r3, [sp, #8]
 8015038:	4298      	cmp	r0, r3
 801503a:	d11d      	bne.n	8015078 <__gethex+0x70>
 801503c:	2201      	movs	r2, #1
 801503e:	49a6      	ldr	r1, [pc, #664]	; (80152d8 <__gethex+0x2d0>)
 8015040:	9800      	ldr	r0, [sp, #0]
 8015042:	f7ff fee3 	bl	8014e0c <strncmp>
 8015046:	0007      	movs	r7, r0
 8015048:	42a8      	cmp	r0, r5
 801504a:	d169      	bne.n	8015120 <__gethex+0x118>
 801504c:	9b00      	ldr	r3, [sp, #0]
 801504e:	0034      	movs	r4, r6
 8015050:	7858      	ldrb	r0, [r3, #1]
 8015052:	f7ff ffc3 	bl	8014fdc <__hexdig_fun>
 8015056:	2301      	movs	r3, #1
 8015058:	9302      	str	r3, [sp, #8]
 801505a:	42a8      	cmp	r0, r5
 801505c:	d02f      	beq.n	80150be <__gethex+0xb6>
 801505e:	9600      	str	r6, [sp, #0]
 8015060:	9b00      	ldr	r3, [sp, #0]
 8015062:	7818      	ldrb	r0, [r3, #0]
 8015064:	2830      	cmp	r0, #48	; 0x30
 8015066:	d009      	beq.n	801507c <__gethex+0x74>
 8015068:	f7ff ffb8 	bl	8014fdc <__hexdig_fun>
 801506c:	4242      	negs	r2, r0
 801506e:	4142      	adcs	r2, r0
 8015070:	2301      	movs	r3, #1
 8015072:	0035      	movs	r5, r6
 8015074:	9202      	str	r2, [sp, #8]
 8015076:	9305      	str	r3, [sp, #20]
 8015078:	9c00      	ldr	r4, [sp, #0]
 801507a:	e004      	b.n	8015086 <__gethex+0x7e>
 801507c:	9b00      	ldr	r3, [sp, #0]
 801507e:	3301      	adds	r3, #1
 8015080:	9300      	str	r3, [sp, #0]
 8015082:	e7ed      	b.n	8015060 <__gethex+0x58>
 8015084:	3401      	adds	r4, #1
 8015086:	7820      	ldrb	r0, [r4, #0]
 8015088:	f7ff ffa8 	bl	8014fdc <__hexdig_fun>
 801508c:	1e07      	subs	r7, r0, #0
 801508e:	d1f9      	bne.n	8015084 <__gethex+0x7c>
 8015090:	2201      	movs	r2, #1
 8015092:	0020      	movs	r0, r4
 8015094:	4990      	ldr	r1, [pc, #576]	; (80152d8 <__gethex+0x2d0>)
 8015096:	f7ff feb9 	bl	8014e0c <strncmp>
 801509a:	2800      	cmp	r0, #0
 801509c:	d10d      	bne.n	80150ba <__gethex+0xb2>
 801509e:	2d00      	cmp	r5, #0
 80150a0:	d106      	bne.n	80150b0 <__gethex+0xa8>
 80150a2:	3401      	adds	r4, #1
 80150a4:	0025      	movs	r5, r4
 80150a6:	7820      	ldrb	r0, [r4, #0]
 80150a8:	f7ff ff98 	bl	8014fdc <__hexdig_fun>
 80150ac:	2800      	cmp	r0, #0
 80150ae:	d102      	bne.n	80150b6 <__gethex+0xae>
 80150b0:	1b2d      	subs	r5, r5, r4
 80150b2:	00af      	lsls	r7, r5, #2
 80150b4:	e003      	b.n	80150be <__gethex+0xb6>
 80150b6:	3401      	adds	r4, #1
 80150b8:	e7f5      	b.n	80150a6 <__gethex+0x9e>
 80150ba:	2d00      	cmp	r5, #0
 80150bc:	d1f8      	bne.n	80150b0 <__gethex+0xa8>
 80150be:	2220      	movs	r2, #32
 80150c0:	7823      	ldrb	r3, [r4, #0]
 80150c2:	0026      	movs	r6, r4
 80150c4:	4393      	bics	r3, r2
 80150c6:	2b50      	cmp	r3, #80	; 0x50
 80150c8:	d11d      	bne.n	8015106 <__gethex+0xfe>
 80150ca:	7863      	ldrb	r3, [r4, #1]
 80150cc:	2b2b      	cmp	r3, #43	; 0x2b
 80150ce:	d02c      	beq.n	801512a <__gethex+0x122>
 80150d0:	2b2d      	cmp	r3, #45	; 0x2d
 80150d2:	d02e      	beq.n	8015132 <__gethex+0x12a>
 80150d4:	2300      	movs	r3, #0
 80150d6:	1c66      	adds	r6, r4, #1
 80150d8:	9304      	str	r3, [sp, #16]
 80150da:	7830      	ldrb	r0, [r6, #0]
 80150dc:	f7ff ff7e 	bl	8014fdc <__hexdig_fun>
 80150e0:	1e43      	subs	r3, r0, #1
 80150e2:	b2db      	uxtb	r3, r3
 80150e4:	2b18      	cmp	r3, #24
 80150e6:	d82b      	bhi.n	8015140 <__gethex+0x138>
 80150e8:	3810      	subs	r0, #16
 80150ea:	0005      	movs	r5, r0
 80150ec:	7870      	ldrb	r0, [r6, #1]
 80150ee:	f7ff ff75 	bl	8014fdc <__hexdig_fun>
 80150f2:	1e43      	subs	r3, r0, #1
 80150f4:	b2db      	uxtb	r3, r3
 80150f6:	3601      	adds	r6, #1
 80150f8:	2b18      	cmp	r3, #24
 80150fa:	d91c      	bls.n	8015136 <__gethex+0x12e>
 80150fc:	9b04      	ldr	r3, [sp, #16]
 80150fe:	2b00      	cmp	r3, #0
 8015100:	d000      	beq.n	8015104 <__gethex+0xfc>
 8015102:	426d      	negs	r5, r5
 8015104:	197f      	adds	r7, r7, r5
 8015106:	9b06      	ldr	r3, [sp, #24]
 8015108:	601e      	str	r6, [r3, #0]
 801510a:	9b02      	ldr	r3, [sp, #8]
 801510c:	2b00      	cmp	r3, #0
 801510e:	d019      	beq.n	8015144 <__gethex+0x13c>
 8015110:	2600      	movs	r6, #0
 8015112:	9b05      	ldr	r3, [sp, #20]
 8015114:	42b3      	cmp	r3, r6
 8015116:	d100      	bne.n	801511a <__gethex+0x112>
 8015118:	3606      	adds	r6, #6
 801511a:	0030      	movs	r0, r6
 801511c:	b009      	add	sp, #36	; 0x24
 801511e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015120:	2301      	movs	r3, #1
 8015122:	2700      	movs	r7, #0
 8015124:	9c00      	ldr	r4, [sp, #0]
 8015126:	9302      	str	r3, [sp, #8]
 8015128:	e7c9      	b.n	80150be <__gethex+0xb6>
 801512a:	2300      	movs	r3, #0
 801512c:	9304      	str	r3, [sp, #16]
 801512e:	1ca6      	adds	r6, r4, #2
 8015130:	e7d3      	b.n	80150da <__gethex+0xd2>
 8015132:	2301      	movs	r3, #1
 8015134:	e7fa      	b.n	801512c <__gethex+0x124>
 8015136:	230a      	movs	r3, #10
 8015138:	435d      	muls	r5, r3
 801513a:	182d      	adds	r5, r5, r0
 801513c:	3d10      	subs	r5, #16
 801513e:	e7d5      	b.n	80150ec <__gethex+0xe4>
 8015140:	0026      	movs	r6, r4
 8015142:	e7e0      	b.n	8015106 <__gethex+0xfe>
 8015144:	9b00      	ldr	r3, [sp, #0]
 8015146:	9902      	ldr	r1, [sp, #8]
 8015148:	1ae3      	subs	r3, r4, r3
 801514a:	3b01      	subs	r3, #1
 801514c:	2b07      	cmp	r3, #7
 801514e:	dc0a      	bgt.n	8015166 <__gethex+0x15e>
 8015150:	9803      	ldr	r0, [sp, #12]
 8015152:	f7fd ff29 	bl	8012fa8 <_Balloc>
 8015156:	1e05      	subs	r5, r0, #0
 8015158:	d108      	bne.n	801516c <__gethex+0x164>
 801515a:	002a      	movs	r2, r5
 801515c:	21e4      	movs	r1, #228	; 0xe4
 801515e:	4b5f      	ldr	r3, [pc, #380]	; (80152dc <__gethex+0x2d4>)
 8015160:	485f      	ldr	r0, [pc, #380]	; (80152e0 <__gethex+0x2d8>)
 8015162:	f7ff fe9b 	bl	8014e9c <__assert_func>
 8015166:	3101      	adds	r1, #1
 8015168:	105b      	asrs	r3, r3, #1
 801516a:	e7ef      	b.n	801514c <__gethex+0x144>
 801516c:	0003      	movs	r3, r0
 801516e:	3314      	adds	r3, #20
 8015170:	9302      	str	r3, [sp, #8]
 8015172:	9305      	str	r3, [sp, #20]
 8015174:	2300      	movs	r3, #0
 8015176:	001e      	movs	r6, r3
 8015178:	9304      	str	r3, [sp, #16]
 801517a:	9b00      	ldr	r3, [sp, #0]
 801517c:	42a3      	cmp	r3, r4
 801517e:	d33f      	bcc.n	8015200 <__gethex+0x1f8>
 8015180:	9c05      	ldr	r4, [sp, #20]
 8015182:	9b02      	ldr	r3, [sp, #8]
 8015184:	c440      	stmia	r4!, {r6}
 8015186:	1ae4      	subs	r4, r4, r3
 8015188:	10a4      	asrs	r4, r4, #2
 801518a:	0030      	movs	r0, r6
 801518c:	612c      	str	r4, [r5, #16]
 801518e:	f7fe f803 	bl	8013198 <__hi0bits>
 8015192:	9b01      	ldr	r3, [sp, #4]
 8015194:	0164      	lsls	r4, r4, #5
 8015196:	681b      	ldr	r3, [r3, #0]
 8015198:	1a26      	subs	r6, r4, r0
 801519a:	9300      	str	r3, [sp, #0]
 801519c:	429e      	cmp	r6, r3
 801519e:	dd51      	ble.n	8015244 <__gethex+0x23c>
 80151a0:	1af6      	subs	r6, r6, r3
 80151a2:	0031      	movs	r1, r6
 80151a4:	0028      	movs	r0, r5
 80151a6:	f7fe fb97 	bl	80138d8 <__any_on>
 80151aa:	1e04      	subs	r4, r0, #0
 80151ac:	d016      	beq.n	80151dc <__gethex+0x1d4>
 80151ae:	2401      	movs	r4, #1
 80151b0:	231f      	movs	r3, #31
 80151b2:	0020      	movs	r0, r4
 80151b4:	1e72      	subs	r2, r6, #1
 80151b6:	4013      	ands	r3, r2
 80151b8:	4098      	lsls	r0, r3
 80151ba:	0003      	movs	r3, r0
 80151bc:	1151      	asrs	r1, r2, #5
 80151be:	9802      	ldr	r0, [sp, #8]
 80151c0:	0089      	lsls	r1, r1, #2
 80151c2:	5809      	ldr	r1, [r1, r0]
 80151c4:	4219      	tst	r1, r3
 80151c6:	d009      	beq.n	80151dc <__gethex+0x1d4>
 80151c8:	42a2      	cmp	r2, r4
 80151ca:	dd06      	ble.n	80151da <__gethex+0x1d2>
 80151cc:	0028      	movs	r0, r5
 80151ce:	1eb1      	subs	r1, r6, #2
 80151d0:	f7fe fb82 	bl	80138d8 <__any_on>
 80151d4:	3402      	adds	r4, #2
 80151d6:	2800      	cmp	r0, #0
 80151d8:	d100      	bne.n	80151dc <__gethex+0x1d4>
 80151da:	2402      	movs	r4, #2
 80151dc:	0031      	movs	r1, r6
 80151de:	0028      	movs	r0, r5
 80151e0:	f7ff fea7 	bl	8014f32 <rshift>
 80151e4:	19bf      	adds	r7, r7, r6
 80151e6:	9b01      	ldr	r3, [sp, #4]
 80151e8:	689b      	ldr	r3, [r3, #8]
 80151ea:	42bb      	cmp	r3, r7
 80151ec:	da3a      	bge.n	8015264 <__gethex+0x25c>
 80151ee:	0029      	movs	r1, r5
 80151f0:	9803      	ldr	r0, [sp, #12]
 80151f2:	f7fd ff1d 	bl	8013030 <_Bfree>
 80151f6:	2300      	movs	r3, #0
 80151f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80151fa:	26a3      	movs	r6, #163	; 0xa3
 80151fc:	6013      	str	r3, [r2, #0]
 80151fe:	e78c      	b.n	801511a <__gethex+0x112>
 8015200:	3c01      	subs	r4, #1
 8015202:	7823      	ldrb	r3, [r4, #0]
 8015204:	2b2e      	cmp	r3, #46	; 0x2e
 8015206:	d012      	beq.n	801522e <__gethex+0x226>
 8015208:	9b04      	ldr	r3, [sp, #16]
 801520a:	2b20      	cmp	r3, #32
 801520c:	d104      	bne.n	8015218 <__gethex+0x210>
 801520e:	9b05      	ldr	r3, [sp, #20]
 8015210:	c340      	stmia	r3!, {r6}
 8015212:	2600      	movs	r6, #0
 8015214:	9305      	str	r3, [sp, #20]
 8015216:	9604      	str	r6, [sp, #16]
 8015218:	7820      	ldrb	r0, [r4, #0]
 801521a:	f7ff fedf 	bl	8014fdc <__hexdig_fun>
 801521e:	230f      	movs	r3, #15
 8015220:	4018      	ands	r0, r3
 8015222:	9b04      	ldr	r3, [sp, #16]
 8015224:	4098      	lsls	r0, r3
 8015226:	3304      	adds	r3, #4
 8015228:	4306      	orrs	r6, r0
 801522a:	9304      	str	r3, [sp, #16]
 801522c:	e7a5      	b.n	801517a <__gethex+0x172>
 801522e:	9b00      	ldr	r3, [sp, #0]
 8015230:	42a3      	cmp	r3, r4
 8015232:	d8e9      	bhi.n	8015208 <__gethex+0x200>
 8015234:	2201      	movs	r2, #1
 8015236:	0020      	movs	r0, r4
 8015238:	4927      	ldr	r1, [pc, #156]	; (80152d8 <__gethex+0x2d0>)
 801523a:	f7ff fde7 	bl	8014e0c <strncmp>
 801523e:	2800      	cmp	r0, #0
 8015240:	d1e2      	bne.n	8015208 <__gethex+0x200>
 8015242:	e79a      	b.n	801517a <__gethex+0x172>
 8015244:	9b00      	ldr	r3, [sp, #0]
 8015246:	2400      	movs	r4, #0
 8015248:	429e      	cmp	r6, r3
 801524a:	dacc      	bge.n	80151e6 <__gethex+0x1de>
 801524c:	1b9e      	subs	r6, r3, r6
 801524e:	0029      	movs	r1, r5
 8015250:	0032      	movs	r2, r6
 8015252:	9803      	ldr	r0, [sp, #12]
 8015254:	f7fe f90c 	bl	8013470 <__lshift>
 8015258:	0003      	movs	r3, r0
 801525a:	3314      	adds	r3, #20
 801525c:	0005      	movs	r5, r0
 801525e:	1bbf      	subs	r7, r7, r6
 8015260:	9302      	str	r3, [sp, #8]
 8015262:	e7c0      	b.n	80151e6 <__gethex+0x1de>
 8015264:	9b01      	ldr	r3, [sp, #4]
 8015266:	685e      	ldr	r6, [r3, #4]
 8015268:	42be      	cmp	r6, r7
 801526a:	dd70      	ble.n	801534e <__gethex+0x346>
 801526c:	9b00      	ldr	r3, [sp, #0]
 801526e:	1bf6      	subs	r6, r6, r7
 8015270:	42b3      	cmp	r3, r6
 8015272:	dc37      	bgt.n	80152e4 <__gethex+0x2dc>
 8015274:	9b01      	ldr	r3, [sp, #4]
 8015276:	68db      	ldr	r3, [r3, #12]
 8015278:	2b02      	cmp	r3, #2
 801527a:	d024      	beq.n	80152c6 <__gethex+0x2be>
 801527c:	2b03      	cmp	r3, #3
 801527e:	d026      	beq.n	80152ce <__gethex+0x2c6>
 8015280:	2b01      	cmp	r3, #1
 8015282:	d117      	bne.n	80152b4 <__gethex+0x2ac>
 8015284:	9b00      	ldr	r3, [sp, #0]
 8015286:	42b3      	cmp	r3, r6
 8015288:	d114      	bne.n	80152b4 <__gethex+0x2ac>
 801528a:	2b01      	cmp	r3, #1
 801528c:	d10b      	bne.n	80152a6 <__gethex+0x29e>
 801528e:	9b01      	ldr	r3, [sp, #4]
 8015290:	9a07      	ldr	r2, [sp, #28]
 8015292:	685b      	ldr	r3, [r3, #4]
 8015294:	2662      	movs	r6, #98	; 0x62
 8015296:	6013      	str	r3, [r2, #0]
 8015298:	2301      	movs	r3, #1
 801529a:	9a02      	ldr	r2, [sp, #8]
 801529c:	612b      	str	r3, [r5, #16]
 801529e:	6013      	str	r3, [r2, #0]
 80152a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80152a2:	601d      	str	r5, [r3, #0]
 80152a4:	e739      	b.n	801511a <__gethex+0x112>
 80152a6:	9900      	ldr	r1, [sp, #0]
 80152a8:	0028      	movs	r0, r5
 80152aa:	3901      	subs	r1, #1
 80152ac:	f7fe fb14 	bl	80138d8 <__any_on>
 80152b0:	2800      	cmp	r0, #0
 80152b2:	d1ec      	bne.n	801528e <__gethex+0x286>
 80152b4:	0029      	movs	r1, r5
 80152b6:	9803      	ldr	r0, [sp, #12]
 80152b8:	f7fd feba 	bl	8013030 <_Bfree>
 80152bc:	2300      	movs	r3, #0
 80152be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80152c0:	2650      	movs	r6, #80	; 0x50
 80152c2:	6013      	str	r3, [r2, #0]
 80152c4:	e729      	b.n	801511a <__gethex+0x112>
 80152c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80152c8:	2b00      	cmp	r3, #0
 80152ca:	d1f3      	bne.n	80152b4 <__gethex+0x2ac>
 80152cc:	e7df      	b.n	801528e <__gethex+0x286>
 80152ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80152d0:	2b00      	cmp	r3, #0
 80152d2:	d1dc      	bne.n	801528e <__gethex+0x286>
 80152d4:	e7ee      	b.n	80152b4 <__gethex+0x2ac>
 80152d6:	46c0      	nop			; (mov r8, r8)
 80152d8:	08016d3c 	.word	0x08016d3c
 80152dc:	08016bd1 	.word	0x08016bd1
 80152e0:	08016ee6 	.word	0x08016ee6
 80152e4:	1e77      	subs	r7, r6, #1
 80152e6:	2c00      	cmp	r4, #0
 80152e8:	d12f      	bne.n	801534a <__gethex+0x342>
 80152ea:	2f00      	cmp	r7, #0
 80152ec:	d004      	beq.n	80152f8 <__gethex+0x2f0>
 80152ee:	0039      	movs	r1, r7
 80152f0:	0028      	movs	r0, r5
 80152f2:	f7fe faf1 	bl	80138d8 <__any_on>
 80152f6:	0004      	movs	r4, r0
 80152f8:	231f      	movs	r3, #31
 80152fa:	117a      	asrs	r2, r7, #5
 80152fc:	401f      	ands	r7, r3
 80152fe:	3b1e      	subs	r3, #30
 8015300:	40bb      	lsls	r3, r7
 8015302:	9902      	ldr	r1, [sp, #8]
 8015304:	0092      	lsls	r2, r2, #2
 8015306:	5852      	ldr	r2, [r2, r1]
 8015308:	421a      	tst	r2, r3
 801530a:	d001      	beq.n	8015310 <__gethex+0x308>
 801530c:	2302      	movs	r3, #2
 801530e:	431c      	orrs	r4, r3
 8015310:	9b00      	ldr	r3, [sp, #0]
 8015312:	0031      	movs	r1, r6
 8015314:	1b9b      	subs	r3, r3, r6
 8015316:	2602      	movs	r6, #2
 8015318:	0028      	movs	r0, r5
 801531a:	9300      	str	r3, [sp, #0]
 801531c:	f7ff fe09 	bl	8014f32 <rshift>
 8015320:	9b01      	ldr	r3, [sp, #4]
 8015322:	685f      	ldr	r7, [r3, #4]
 8015324:	2c00      	cmp	r4, #0
 8015326:	d041      	beq.n	80153ac <__gethex+0x3a4>
 8015328:	9b01      	ldr	r3, [sp, #4]
 801532a:	68db      	ldr	r3, [r3, #12]
 801532c:	2b02      	cmp	r3, #2
 801532e:	d010      	beq.n	8015352 <__gethex+0x34a>
 8015330:	2b03      	cmp	r3, #3
 8015332:	d012      	beq.n	801535a <__gethex+0x352>
 8015334:	2b01      	cmp	r3, #1
 8015336:	d106      	bne.n	8015346 <__gethex+0x33e>
 8015338:	07a2      	lsls	r2, r4, #30
 801533a:	d504      	bpl.n	8015346 <__gethex+0x33e>
 801533c:	9a02      	ldr	r2, [sp, #8]
 801533e:	6812      	ldr	r2, [r2, #0]
 8015340:	4314      	orrs	r4, r2
 8015342:	421c      	tst	r4, r3
 8015344:	d10c      	bne.n	8015360 <__gethex+0x358>
 8015346:	2310      	movs	r3, #16
 8015348:	e02f      	b.n	80153aa <__gethex+0x3a2>
 801534a:	2401      	movs	r4, #1
 801534c:	e7d4      	b.n	80152f8 <__gethex+0x2f0>
 801534e:	2601      	movs	r6, #1
 8015350:	e7e8      	b.n	8015324 <__gethex+0x31c>
 8015352:	2301      	movs	r3, #1
 8015354:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015356:	1a9b      	subs	r3, r3, r2
 8015358:	930f      	str	r3, [sp, #60]	; 0x3c
 801535a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801535c:	2b00      	cmp	r3, #0
 801535e:	d0f2      	beq.n	8015346 <__gethex+0x33e>
 8015360:	692b      	ldr	r3, [r5, #16]
 8015362:	2000      	movs	r0, #0
 8015364:	9302      	str	r3, [sp, #8]
 8015366:	009b      	lsls	r3, r3, #2
 8015368:	9304      	str	r3, [sp, #16]
 801536a:	002b      	movs	r3, r5
 801536c:	9a04      	ldr	r2, [sp, #16]
 801536e:	3314      	adds	r3, #20
 8015370:	1899      	adds	r1, r3, r2
 8015372:	681a      	ldr	r2, [r3, #0]
 8015374:	1c54      	adds	r4, r2, #1
 8015376:	d01e      	beq.n	80153b6 <__gethex+0x3ae>
 8015378:	3201      	adds	r2, #1
 801537a:	601a      	str	r2, [r3, #0]
 801537c:	002b      	movs	r3, r5
 801537e:	3314      	adds	r3, #20
 8015380:	2e02      	cmp	r6, #2
 8015382:	d141      	bne.n	8015408 <__gethex+0x400>
 8015384:	9a01      	ldr	r2, [sp, #4]
 8015386:	9900      	ldr	r1, [sp, #0]
 8015388:	6812      	ldr	r2, [r2, #0]
 801538a:	3a01      	subs	r2, #1
 801538c:	428a      	cmp	r2, r1
 801538e:	d10b      	bne.n	80153a8 <__gethex+0x3a0>
 8015390:	221f      	movs	r2, #31
 8015392:	9800      	ldr	r0, [sp, #0]
 8015394:	1149      	asrs	r1, r1, #5
 8015396:	4002      	ands	r2, r0
 8015398:	2001      	movs	r0, #1
 801539a:	0004      	movs	r4, r0
 801539c:	4094      	lsls	r4, r2
 801539e:	0089      	lsls	r1, r1, #2
 80153a0:	58cb      	ldr	r3, [r1, r3]
 80153a2:	4223      	tst	r3, r4
 80153a4:	d000      	beq.n	80153a8 <__gethex+0x3a0>
 80153a6:	2601      	movs	r6, #1
 80153a8:	2320      	movs	r3, #32
 80153aa:	431e      	orrs	r6, r3
 80153ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80153ae:	601d      	str	r5, [r3, #0]
 80153b0:	9b07      	ldr	r3, [sp, #28]
 80153b2:	601f      	str	r7, [r3, #0]
 80153b4:	e6b1      	b.n	801511a <__gethex+0x112>
 80153b6:	c301      	stmia	r3!, {r0}
 80153b8:	4299      	cmp	r1, r3
 80153ba:	d8da      	bhi.n	8015372 <__gethex+0x36a>
 80153bc:	68ab      	ldr	r3, [r5, #8]
 80153be:	9a02      	ldr	r2, [sp, #8]
 80153c0:	429a      	cmp	r2, r3
 80153c2:	db18      	blt.n	80153f6 <__gethex+0x3ee>
 80153c4:	6869      	ldr	r1, [r5, #4]
 80153c6:	9803      	ldr	r0, [sp, #12]
 80153c8:	3101      	adds	r1, #1
 80153ca:	f7fd fded 	bl	8012fa8 <_Balloc>
 80153ce:	1e04      	subs	r4, r0, #0
 80153d0:	d104      	bne.n	80153dc <__gethex+0x3d4>
 80153d2:	0022      	movs	r2, r4
 80153d4:	2184      	movs	r1, #132	; 0x84
 80153d6:	4b1c      	ldr	r3, [pc, #112]	; (8015448 <__gethex+0x440>)
 80153d8:	481c      	ldr	r0, [pc, #112]	; (801544c <__gethex+0x444>)
 80153da:	e6c2      	b.n	8015162 <__gethex+0x15a>
 80153dc:	0029      	movs	r1, r5
 80153de:	692a      	ldr	r2, [r5, #16]
 80153e0:	310c      	adds	r1, #12
 80153e2:	3202      	adds	r2, #2
 80153e4:	0092      	lsls	r2, r2, #2
 80153e6:	300c      	adds	r0, #12
 80153e8:	f7fc fe30 	bl	801204c <memcpy>
 80153ec:	0029      	movs	r1, r5
 80153ee:	9803      	ldr	r0, [sp, #12]
 80153f0:	f7fd fe1e 	bl	8013030 <_Bfree>
 80153f4:	0025      	movs	r5, r4
 80153f6:	692b      	ldr	r3, [r5, #16]
 80153f8:	1c5a      	adds	r2, r3, #1
 80153fa:	612a      	str	r2, [r5, #16]
 80153fc:	2201      	movs	r2, #1
 80153fe:	3304      	adds	r3, #4
 8015400:	009b      	lsls	r3, r3, #2
 8015402:	18eb      	adds	r3, r5, r3
 8015404:	605a      	str	r2, [r3, #4]
 8015406:	e7b9      	b.n	801537c <__gethex+0x374>
 8015408:	692a      	ldr	r2, [r5, #16]
 801540a:	9902      	ldr	r1, [sp, #8]
 801540c:	428a      	cmp	r2, r1
 801540e:	dd09      	ble.n	8015424 <__gethex+0x41c>
 8015410:	2101      	movs	r1, #1
 8015412:	0028      	movs	r0, r5
 8015414:	f7ff fd8d 	bl	8014f32 <rshift>
 8015418:	9b01      	ldr	r3, [sp, #4]
 801541a:	3701      	adds	r7, #1
 801541c:	689b      	ldr	r3, [r3, #8]
 801541e:	42bb      	cmp	r3, r7
 8015420:	dac1      	bge.n	80153a6 <__gethex+0x39e>
 8015422:	e6e4      	b.n	80151ee <__gethex+0x1e6>
 8015424:	221f      	movs	r2, #31
 8015426:	9c00      	ldr	r4, [sp, #0]
 8015428:	9900      	ldr	r1, [sp, #0]
 801542a:	2601      	movs	r6, #1
 801542c:	4014      	ands	r4, r2
 801542e:	4211      	tst	r1, r2
 8015430:	d0ba      	beq.n	80153a8 <__gethex+0x3a0>
 8015432:	9a04      	ldr	r2, [sp, #16]
 8015434:	189b      	adds	r3, r3, r2
 8015436:	3b04      	subs	r3, #4
 8015438:	6818      	ldr	r0, [r3, #0]
 801543a:	f7fd fead 	bl	8013198 <__hi0bits>
 801543e:	2320      	movs	r3, #32
 8015440:	1b1b      	subs	r3, r3, r4
 8015442:	4298      	cmp	r0, r3
 8015444:	dbe4      	blt.n	8015410 <__gethex+0x408>
 8015446:	e7af      	b.n	80153a8 <__gethex+0x3a0>
 8015448:	08016bd1 	.word	0x08016bd1
 801544c:	08016ee6 	.word	0x08016ee6

08015450 <L_shift>:
 8015450:	2308      	movs	r3, #8
 8015452:	b570      	push	{r4, r5, r6, lr}
 8015454:	2520      	movs	r5, #32
 8015456:	1a9a      	subs	r2, r3, r2
 8015458:	0092      	lsls	r2, r2, #2
 801545a:	1aad      	subs	r5, r5, r2
 801545c:	6843      	ldr	r3, [r0, #4]
 801545e:	6804      	ldr	r4, [r0, #0]
 8015460:	001e      	movs	r6, r3
 8015462:	40ae      	lsls	r6, r5
 8015464:	40d3      	lsrs	r3, r2
 8015466:	4334      	orrs	r4, r6
 8015468:	6004      	str	r4, [r0, #0]
 801546a:	6043      	str	r3, [r0, #4]
 801546c:	3004      	adds	r0, #4
 801546e:	4288      	cmp	r0, r1
 8015470:	d3f4      	bcc.n	801545c <L_shift+0xc>
 8015472:	bd70      	pop	{r4, r5, r6, pc}

08015474 <__match>:
 8015474:	b530      	push	{r4, r5, lr}
 8015476:	6803      	ldr	r3, [r0, #0]
 8015478:	780c      	ldrb	r4, [r1, #0]
 801547a:	3301      	adds	r3, #1
 801547c:	2c00      	cmp	r4, #0
 801547e:	d102      	bne.n	8015486 <__match+0x12>
 8015480:	6003      	str	r3, [r0, #0]
 8015482:	2001      	movs	r0, #1
 8015484:	bd30      	pop	{r4, r5, pc}
 8015486:	781a      	ldrb	r2, [r3, #0]
 8015488:	0015      	movs	r5, r2
 801548a:	3d41      	subs	r5, #65	; 0x41
 801548c:	2d19      	cmp	r5, #25
 801548e:	d800      	bhi.n	8015492 <__match+0x1e>
 8015490:	3220      	adds	r2, #32
 8015492:	3101      	adds	r1, #1
 8015494:	42a2      	cmp	r2, r4
 8015496:	d0ef      	beq.n	8015478 <__match+0x4>
 8015498:	2000      	movs	r0, #0
 801549a:	e7f3      	b.n	8015484 <__match+0x10>

0801549c <__hexnan>:
 801549c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801549e:	680b      	ldr	r3, [r1, #0]
 80154a0:	b08b      	sub	sp, #44	; 0x2c
 80154a2:	9201      	str	r2, [sp, #4]
 80154a4:	9901      	ldr	r1, [sp, #4]
 80154a6:	115a      	asrs	r2, r3, #5
 80154a8:	0092      	lsls	r2, r2, #2
 80154aa:	188a      	adds	r2, r1, r2
 80154ac:	9202      	str	r2, [sp, #8]
 80154ae:	0019      	movs	r1, r3
 80154b0:	221f      	movs	r2, #31
 80154b2:	4011      	ands	r1, r2
 80154b4:	9008      	str	r0, [sp, #32]
 80154b6:	9106      	str	r1, [sp, #24]
 80154b8:	4213      	tst	r3, r2
 80154ba:	d002      	beq.n	80154c2 <__hexnan+0x26>
 80154bc:	9b02      	ldr	r3, [sp, #8]
 80154be:	3304      	adds	r3, #4
 80154c0:	9302      	str	r3, [sp, #8]
 80154c2:	9b02      	ldr	r3, [sp, #8]
 80154c4:	2500      	movs	r5, #0
 80154c6:	1f1f      	subs	r7, r3, #4
 80154c8:	003e      	movs	r6, r7
 80154ca:	003c      	movs	r4, r7
 80154cc:	9b08      	ldr	r3, [sp, #32]
 80154ce:	603d      	str	r5, [r7, #0]
 80154d0:	681b      	ldr	r3, [r3, #0]
 80154d2:	9507      	str	r5, [sp, #28]
 80154d4:	9305      	str	r3, [sp, #20]
 80154d6:	9503      	str	r5, [sp, #12]
 80154d8:	9b05      	ldr	r3, [sp, #20]
 80154da:	3301      	adds	r3, #1
 80154dc:	9309      	str	r3, [sp, #36]	; 0x24
 80154de:	9b05      	ldr	r3, [sp, #20]
 80154e0:	785b      	ldrb	r3, [r3, #1]
 80154e2:	9304      	str	r3, [sp, #16]
 80154e4:	2b00      	cmp	r3, #0
 80154e6:	d028      	beq.n	801553a <__hexnan+0x9e>
 80154e8:	9804      	ldr	r0, [sp, #16]
 80154ea:	f7ff fd77 	bl	8014fdc <__hexdig_fun>
 80154ee:	2800      	cmp	r0, #0
 80154f0:	d154      	bne.n	801559c <__hexnan+0x100>
 80154f2:	9b04      	ldr	r3, [sp, #16]
 80154f4:	2b20      	cmp	r3, #32
 80154f6:	d819      	bhi.n	801552c <__hexnan+0x90>
 80154f8:	9b03      	ldr	r3, [sp, #12]
 80154fa:	9a07      	ldr	r2, [sp, #28]
 80154fc:	4293      	cmp	r3, r2
 80154fe:	dd12      	ble.n	8015526 <__hexnan+0x8a>
 8015500:	42b4      	cmp	r4, r6
 8015502:	d206      	bcs.n	8015512 <__hexnan+0x76>
 8015504:	2d07      	cmp	r5, #7
 8015506:	dc04      	bgt.n	8015512 <__hexnan+0x76>
 8015508:	002a      	movs	r2, r5
 801550a:	0031      	movs	r1, r6
 801550c:	0020      	movs	r0, r4
 801550e:	f7ff ff9f 	bl	8015450 <L_shift>
 8015512:	9b01      	ldr	r3, [sp, #4]
 8015514:	2508      	movs	r5, #8
 8015516:	429c      	cmp	r4, r3
 8015518:	d905      	bls.n	8015526 <__hexnan+0x8a>
 801551a:	1f26      	subs	r6, r4, #4
 801551c:	2500      	movs	r5, #0
 801551e:	0034      	movs	r4, r6
 8015520:	9b03      	ldr	r3, [sp, #12]
 8015522:	6035      	str	r5, [r6, #0]
 8015524:	9307      	str	r3, [sp, #28]
 8015526:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015528:	9305      	str	r3, [sp, #20]
 801552a:	e7d5      	b.n	80154d8 <__hexnan+0x3c>
 801552c:	9b04      	ldr	r3, [sp, #16]
 801552e:	2b29      	cmp	r3, #41	; 0x29
 8015530:	d159      	bne.n	80155e6 <__hexnan+0x14a>
 8015532:	9b05      	ldr	r3, [sp, #20]
 8015534:	9a08      	ldr	r2, [sp, #32]
 8015536:	3302      	adds	r3, #2
 8015538:	6013      	str	r3, [r2, #0]
 801553a:	9b03      	ldr	r3, [sp, #12]
 801553c:	2b00      	cmp	r3, #0
 801553e:	d052      	beq.n	80155e6 <__hexnan+0x14a>
 8015540:	42b4      	cmp	r4, r6
 8015542:	d206      	bcs.n	8015552 <__hexnan+0xb6>
 8015544:	2d07      	cmp	r5, #7
 8015546:	dc04      	bgt.n	8015552 <__hexnan+0xb6>
 8015548:	002a      	movs	r2, r5
 801554a:	0031      	movs	r1, r6
 801554c:	0020      	movs	r0, r4
 801554e:	f7ff ff7f 	bl	8015450 <L_shift>
 8015552:	9b01      	ldr	r3, [sp, #4]
 8015554:	429c      	cmp	r4, r3
 8015556:	d935      	bls.n	80155c4 <__hexnan+0x128>
 8015558:	001a      	movs	r2, r3
 801555a:	0023      	movs	r3, r4
 801555c:	cb02      	ldmia	r3!, {r1}
 801555e:	c202      	stmia	r2!, {r1}
 8015560:	429f      	cmp	r7, r3
 8015562:	d2fb      	bcs.n	801555c <__hexnan+0xc0>
 8015564:	9b02      	ldr	r3, [sp, #8]
 8015566:	1c62      	adds	r2, r4, #1
 8015568:	1ed9      	subs	r1, r3, #3
 801556a:	2304      	movs	r3, #4
 801556c:	4291      	cmp	r1, r2
 801556e:	d305      	bcc.n	801557c <__hexnan+0xe0>
 8015570:	9b02      	ldr	r3, [sp, #8]
 8015572:	3b04      	subs	r3, #4
 8015574:	1b1b      	subs	r3, r3, r4
 8015576:	089b      	lsrs	r3, r3, #2
 8015578:	3301      	adds	r3, #1
 801557a:	009b      	lsls	r3, r3, #2
 801557c:	9a01      	ldr	r2, [sp, #4]
 801557e:	18d3      	adds	r3, r2, r3
 8015580:	2200      	movs	r2, #0
 8015582:	c304      	stmia	r3!, {r2}
 8015584:	429f      	cmp	r7, r3
 8015586:	d2fc      	bcs.n	8015582 <__hexnan+0xe6>
 8015588:	683b      	ldr	r3, [r7, #0]
 801558a:	2b00      	cmp	r3, #0
 801558c:	d104      	bne.n	8015598 <__hexnan+0xfc>
 801558e:	9b01      	ldr	r3, [sp, #4]
 8015590:	429f      	cmp	r7, r3
 8015592:	d126      	bne.n	80155e2 <__hexnan+0x146>
 8015594:	2301      	movs	r3, #1
 8015596:	603b      	str	r3, [r7, #0]
 8015598:	2005      	movs	r0, #5
 801559a:	e025      	b.n	80155e8 <__hexnan+0x14c>
 801559c:	9b03      	ldr	r3, [sp, #12]
 801559e:	3501      	adds	r5, #1
 80155a0:	3301      	adds	r3, #1
 80155a2:	9303      	str	r3, [sp, #12]
 80155a4:	2d08      	cmp	r5, #8
 80155a6:	dd06      	ble.n	80155b6 <__hexnan+0x11a>
 80155a8:	9b01      	ldr	r3, [sp, #4]
 80155aa:	429c      	cmp	r4, r3
 80155ac:	d9bb      	bls.n	8015526 <__hexnan+0x8a>
 80155ae:	2300      	movs	r3, #0
 80155b0:	2501      	movs	r5, #1
 80155b2:	3c04      	subs	r4, #4
 80155b4:	6023      	str	r3, [r4, #0]
 80155b6:	220f      	movs	r2, #15
 80155b8:	6823      	ldr	r3, [r4, #0]
 80155ba:	4010      	ands	r0, r2
 80155bc:	011b      	lsls	r3, r3, #4
 80155be:	4303      	orrs	r3, r0
 80155c0:	6023      	str	r3, [r4, #0]
 80155c2:	e7b0      	b.n	8015526 <__hexnan+0x8a>
 80155c4:	9b06      	ldr	r3, [sp, #24]
 80155c6:	2b00      	cmp	r3, #0
 80155c8:	d0de      	beq.n	8015588 <__hexnan+0xec>
 80155ca:	2320      	movs	r3, #32
 80155cc:	9a06      	ldr	r2, [sp, #24]
 80155ce:	9902      	ldr	r1, [sp, #8]
 80155d0:	1a9b      	subs	r3, r3, r2
 80155d2:	2201      	movs	r2, #1
 80155d4:	4252      	negs	r2, r2
 80155d6:	40da      	lsrs	r2, r3
 80155d8:	3904      	subs	r1, #4
 80155da:	680b      	ldr	r3, [r1, #0]
 80155dc:	4013      	ands	r3, r2
 80155de:	600b      	str	r3, [r1, #0]
 80155e0:	e7d2      	b.n	8015588 <__hexnan+0xec>
 80155e2:	3f04      	subs	r7, #4
 80155e4:	e7d0      	b.n	8015588 <__hexnan+0xec>
 80155e6:	2004      	movs	r0, #4
 80155e8:	b00b      	add	sp, #44	; 0x2c
 80155ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080155ec <__ascii_mbtowc>:
 80155ec:	b082      	sub	sp, #8
 80155ee:	2900      	cmp	r1, #0
 80155f0:	d100      	bne.n	80155f4 <__ascii_mbtowc+0x8>
 80155f2:	a901      	add	r1, sp, #4
 80155f4:	1e10      	subs	r0, r2, #0
 80155f6:	d006      	beq.n	8015606 <__ascii_mbtowc+0x1a>
 80155f8:	2b00      	cmp	r3, #0
 80155fa:	d006      	beq.n	801560a <__ascii_mbtowc+0x1e>
 80155fc:	7813      	ldrb	r3, [r2, #0]
 80155fe:	600b      	str	r3, [r1, #0]
 8015600:	7810      	ldrb	r0, [r2, #0]
 8015602:	1e43      	subs	r3, r0, #1
 8015604:	4198      	sbcs	r0, r3
 8015606:	b002      	add	sp, #8
 8015608:	4770      	bx	lr
 801560a:	2002      	movs	r0, #2
 801560c:	4240      	negs	r0, r0
 801560e:	e7fa      	b.n	8015606 <__ascii_mbtowc+0x1a>

08015610 <_realloc_r>:
 8015610:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015612:	0007      	movs	r7, r0
 8015614:	000e      	movs	r6, r1
 8015616:	0014      	movs	r4, r2
 8015618:	2900      	cmp	r1, #0
 801561a:	d105      	bne.n	8015628 <_realloc_r+0x18>
 801561c:	0011      	movs	r1, r2
 801561e:	f7fd fc31 	bl	8012e84 <_malloc_r>
 8015622:	0005      	movs	r5, r0
 8015624:	0028      	movs	r0, r5
 8015626:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8015628:	2a00      	cmp	r2, #0
 801562a:	d103      	bne.n	8015634 <_realloc_r+0x24>
 801562c:	f7fd fbb4 	bl	8012d98 <_free_r>
 8015630:	0025      	movs	r5, r4
 8015632:	e7f7      	b.n	8015624 <_realloc_r+0x14>
 8015634:	f000 f83f 	bl	80156b6 <_malloc_usable_size_r>
 8015638:	9001      	str	r0, [sp, #4]
 801563a:	4284      	cmp	r4, r0
 801563c:	d803      	bhi.n	8015646 <_realloc_r+0x36>
 801563e:	0035      	movs	r5, r6
 8015640:	0843      	lsrs	r3, r0, #1
 8015642:	42a3      	cmp	r3, r4
 8015644:	d3ee      	bcc.n	8015624 <_realloc_r+0x14>
 8015646:	0021      	movs	r1, r4
 8015648:	0038      	movs	r0, r7
 801564a:	f7fd fc1b 	bl	8012e84 <_malloc_r>
 801564e:	1e05      	subs	r5, r0, #0
 8015650:	d0e8      	beq.n	8015624 <_realloc_r+0x14>
 8015652:	9b01      	ldr	r3, [sp, #4]
 8015654:	0022      	movs	r2, r4
 8015656:	429c      	cmp	r4, r3
 8015658:	d900      	bls.n	801565c <_realloc_r+0x4c>
 801565a:	001a      	movs	r2, r3
 801565c:	0031      	movs	r1, r6
 801565e:	0028      	movs	r0, r5
 8015660:	f7fc fcf4 	bl	801204c <memcpy>
 8015664:	0031      	movs	r1, r6
 8015666:	0038      	movs	r0, r7
 8015668:	f7fd fb96 	bl	8012d98 <_free_r>
 801566c:	e7da      	b.n	8015624 <_realloc_r+0x14>

0801566e <__ascii_wctomb>:
 801566e:	0003      	movs	r3, r0
 8015670:	1e08      	subs	r0, r1, #0
 8015672:	d005      	beq.n	8015680 <__ascii_wctomb+0x12>
 8015674:	2aff      	cmp	r2, #255	; 0xff
 8015676:	d904      	bls.n	8015682 <__ascii_wctomb+0x14>
 8015678:	228a      	movs	r2, #138	; 0x8a
 801567a:	2001      	movs	r0, #1
 801567c:	601a      	str	r2, [r3, #0]
 801567e:	4240      	negs	r0, r0
 8015680:	4770      	bx	lr
 8015682:	2001      	movs	r0, #1
 8015684:	700a      	strb	r2, [r1, #0]
 8015686:	e7fb      	b.n	8015680 <__ascii_wctomb+0x12>

08015688 <fiprintf>:
 8015688:	b40e      	push	{r1, r2, r3}
 801568a:	b517      	push	{r0, r1, r2, r4, lr}
 801568c:	4c05      	ldr	r4, [pc, #20]	; (80156a4 <fiprintf+0x1c>)
 801568e:	ab05      	add	r3, sp, #20
 8015690:	cb04      	ldmia	r3!, {r2}
 8015692:	0001      	movs	r1, r0
 8015694:	6820      	ldr	r0, [r4, #0]
 8015696:	9301      	str	r3, [sp, #4]
 8015698:	f7ff f980 	bl	801499c <_vfiprintf_r>
 801569c:	bc1e      	pop	{r1, r2, r3, r4}
 801569e:	bc08      	pop	{r3}
 80156a0:	b003      	add	sp, #12
 80156a2:	4718      	bx	r3
 80156a4:	200000b8 	.word	0x200000b8

080156a8 <abort>:
 80156a8:	2006      	movs	r0, #6
 80156aa:	b510      	push	{r4, lr}
 80156ac:	f000 f836 	bl	801571c <raise>
 80156b0:	2001      	movs	r0, #1
 80156b2:	f7f1 fe43 	bl	800733c <_exit>

080156b6 <_malloc_usable_size_r>:
 80156b6:	1f0b      	subs	r3, r1, #4
 80156b8:	681b      	ldr	r3, [r3, #0]
 80156ba:	1f18      	subs	r0, r3, #4
 80156bc:	2b00      	cmp	r3, #0
 80156be:	da01      	bge.n	80156c4 <_malloc_usable_size_r+0xe>
 80156c0:	580b      	ldr	r3, [r1, r0]
 80156c2:	18c0      	adds	r0, r0, r3
 80156c4:	4770      	bx	lr

080156c6 <_raise_r>:
 80156c6:	b570      	push	{r4, r5, r6, lr}
 80156c8:	0004      	movs	r4, r0
 80156ca:	000d      	movs	r5, r1
 80156cc:	291f      	cmp	r1, #31
 80156ce:	d904      	bls.n	80156da <_raise_r+0x14>
 80156d0:	2316      	movs	r3, #22
 80156d2:	6003      	str	r3, [r0, #0]
 80156d4:	2001      	movs	r0, #1
 80156d6:	4240      	negs	r0, r0
 80156d8:	bd70      	pop	{r4, r5, r6, pc}
 80156da:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80156dc:	2b00      	cmp	r3, #0
 80156de:	d004      	beq.n	80156ea <_raise_r+0x24>
 80156e0:	008a      	lsls	r2, r1, #2
 80156e2:	189b      	adds	r3, r3, r2
 80156e4:	681a      	ldr	r2, [r3, #0]
 80156e6:	2a00      	cmp	r2, #0
 80156e8:	d108      	bne.n	80156fc <_raise_r+0x36>
 80156ea:	0020      	movs	r0, r4
 80156ec:	f000 f832 	bl	8015754 <_getpid_r>
 80156f0:	002a      	movs	r2, r5
 80156f2:	0001      	movs	r1, r0
 80156f4:	0020      	movs	r0, r4
 80156f6:	f000 f81b 	bl	8015730 <_kill_r>
 80156fa:	e7ed      	b.n	80156d8 <_raise_r+0x12>
 80156fc:	2000      	movs	r0, #0
 80156fe:	2a01      	cmp	r2, #1
 8015700:	d0ea      	beq.n	80156d8 <_raise_r+0x12>
 8015702:	1c51      	adds	r1, r2, #1
 8015704:	d103      	bne.n	801570e <_raise_r+0x48>
 8015706:	2316      	movs	r3, #22
 8015708:	3001      	adds	r0, #1
 801570a:	6023      	str	r3, [r4, #0]
 801570c:	e7e4      	b.n	80156d8 <_raise_r+0x12>
 801570e:	2400      	movs	r4, #0
 8015710:	0028      	movs	r0, r5
 8015712:	601c      	str	r4, [r3, #0]
 8015714:	4790      	blx	r2
 8015716:	0020      	movs	r0, r4
 8015718:	e7de      	b.n	80156d8 <_raise_r+0x12>
	...

0801571c <raise>:
 801571c:	b510      	push	{r4, lr}
 801571e:	4b03      	ldr	r3, [pc, #12]	; (801572c <raise+0x10>)
 8015720:	0001      	movs	r1, r0
 8015722:	6818      	ldr	r0, [r3, #0]
 8015724:	f7ff ffcf 	bl	80156c6 <_raise_r>
 8015728:	bd10      	pop	{r4, pc}
 801572a:	46c0      	nop			; (mov r8, r8)
 801572c:	200000b8 	.word	0x200000b8

08015730 <_kill_r>:
 8015730:	2300      	movs	r3, #0
 8015732:	b570      	push	{r4, r5, r6, lr}
 8015734:	4d06      	ldr	r5, [pc, #24]	; (8015750 <_kill_r+0x20>)
 8015736:	0004      	movs	r4, r0
 8015738:	0008      	movs	r0, r1
 801573a:	0011      	movs	r1, r2
 801573c:	602b      	str	r3, [r5, #0]
 801573e:	f7f1 fded 	bl	800731c <_kill>
 8015742:	1c43      	adds	r3, r0, #1
 8015744:	d103      	bne.n	801574e <_kill_r+0x1e>
 8015746:	682b      	ldr	r3, [r5, #0]
 8015748:	2b00      	cmp	r3, #0
 801574a:	d000      	beq.n	801574e <_kill_r+0x1e>
 801574c:	6023      	str	r3, [r4, #0]
 801574e:	bd70      	pop	{r4, r5, r6, pc}
 8015750:	20000d94 	.word	0x20000d94

08015754 <_getpid_r>:
 8015754:	b510      	push	{r4, lr}
 8015756:	f7f1 fddb 	bl	8007310 <_getpid>
 801575a:	bd10      	pop	{r4, pc}

0801575c <_init>:
 801575c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801575e:	46c0      	nop			; (mov r8, r8)
 8015760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015762:	bc08      	pop	{r3}
 8015764:	469e      	mov	lr, r3
 8015766:	4770      	bx	lr

08015768 <_fini>:
 8015768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801576a:	46c0      	nop			; (mov r8, r8)
 801576c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801576e:	bc08      	pop	{r3}
 8015770:	469e      	mov	lr, r3
 8015772:	4770      	bx	lr
