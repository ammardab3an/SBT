
selfBalancingCube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b398  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000013c4  0800b458  0800b458  0001b458  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c81c  0800c81c  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  0800c81c  0800c81c  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c81c  0800c81c  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800c81c  0800c81c  0001c81c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c824  0800c824  0001c824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800c828  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  200001f4  0800ca1c  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003fc  0800ca1c  000203fc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00041850  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004fd7  00000000  00000000  00061a6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001720  00000000  00000000  00066a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002cb0  00000000  00000000  00068168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021ebc  00000000  00000000  0006ae18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024ff4  00000000  00000000  0008ccd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c0e5e  00000000  00000000  000b1cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00172b26  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000629c  00000000  00000000  00172b7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0001a279  00000000  00000000  00178e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200001f4 	.word	0x200001f4
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800b43c 	.word	0x0800b43c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200001f8 	.word	0x200001f8
 8000100:	0800b43c 	.word	0x0800b43c

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_shi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5e09      	ldrsh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	1c10      	adds	r0, r2, #0
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	1c19      	adds	r1, r3, #0
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 fedf 	bl	80021fc <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 fe29 	bl	80020a0 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 fed1 	bl	80021fc <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 fec7 	bl	80021fc <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 fe4b 	bl	8002118 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 fe41 	bl	8002118 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_cfrcmple>:
 80004a4:	4684      	mov	ip, r0
 80004a6:	1c08      	adds	r0, r1, #0
 80004a8:	4661      	mov	r1, ip
 80004aa:	e7ff      	b.n	80004ac <__aeabi_cfcmpeq>

080004ac <__aeabi_cfcmpeq>:
 80004ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004ae:	f000 fbd7 	bl	8000c60 <__lesf2>
 80004b2:	2800      	cmp	r0, #0
 80004b4:	d401      	bmi.n	80004ba <__aeabi_cfcmpeq+0xe>
 80004b6:	2100      	movs	r1, #0
 80004b8:	42c8      	cmn	r0, r1
 80004ba:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004bc <__aeabi_fcmpeq>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f000 fb5b 	bl	8000b78 <__eqsf2>
 80004c2:	4240      	negs	r0, r0
 80004c4:	3001      	adds	r0, #1
 80004c6:	bd10      	pop	{r4, pc}

080004c8 <__aeabi_fcmplt>:
 80004c8:	b510      	push	{r4, lr}
 80004ca:	f000 fbc9 	bl	8000c60 <__lesf2>
 80004ce:	2800      	cmp	r0, #0
 80004d0:	db01      	blt.n	80004d6 <__aeabi_fcmplt+0xe>
 80004d2:	2000      	movs	r0, #0
 80004d4:	bd10      	pop	{r4, pc}
 80004d6:	2001      	movs	r0, #1
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	46c0      	nop			; (mov r8, r8)

080004dc <__aeabi_fcmple>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 fbbf 	bl	8000c60 <__lesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	dd01      	ble.n	80004ea <__aeabi_fcmple+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)

080004f0 <__aeabi_fcmpgt>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 fb69 	bl	8000bc8 <__gesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	dc01      	bgt.n	80004fe <__aeabi_fcmpgt+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			; (mov r8, r8)

08000504 <__aeabi_fcmpge>:
 8000504:	b510      	push	{r4, lr}
 8000506:	f000 fb5f 	bl	8000bc8 <__gesf2>
 800050a:	2800      	cmp	r0, #0
 800050c:	da01      	bge.n	8000512 <__aeabi_fcmpge+0xe>
 800050e:	2000      	movs	r0, #0
 8000510:	bd10      	pop	{r4, pc}
 8000512:	2001      	movs	r0, #1
 8000514:	bd10      	pop	{r4, pc}
 8000516:	46c0      	nop			; (mov r8, r8)

08000518 <__aeabi_f2uiz>:
 8000518:	219e      	movs	r1, #158	; 0x9e
 800051a:	b510      	push	{r4, lr}
 800051c:	05c9      	lsls	r1, r1, #23
 800051e:	1c04      	adds	r4, r0, #0
 8000520:	f7ff fff0 	bl	8000504 <__aeabi_fcmpge>
 8000524:	2800      	cmp	r0, #0
 8000526:	d103      	bne.n	8000530 <__aeabi_f2uiz+0x18>
 8000528:	1c20      	adds	r0, r4, #0
 800052a:	f000 fec5 	bl	80012b8 <__aeabi_f2iz>
 800052e:	bd10      	pop	{r4, pc}
 8000530:	219e      	movs	r1, #158	; 0x9e
 8000532:	1c20      	adds	r0, r4, #0
 8000534:	05c9      	lsls	r1, r1, #23
 8000536:	f000 fcf7 	bl	8000f28 <__aeabi_fsub>
 800053a:	f000 febd 	bl	80012b8 <__aeabi_f2iz>
 800053e:	2380      	movs	r3, #128	; 0x80
 8000540:	061b      	lsls	r3, r3, #24
 8000542:	469c      	mov	ip, r3
 8000544:	4460      	add	r0, ip
 8000546:	e7f2      	b.n	800052e <__aeabi_f2uiz+0x16>

08000548 <__aeabi_d2uiz>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	2200      	movs	r2, #0
 800054c:	4b0c      	ldr	r3, [pc, #48]	; (8000580 <__aeabi_d2uiz+0x38>)
 800054e:	0004      	movs	r4, r0
 8000550:	000d      	movs	r5, r1
 8000552:	f7ff ff9d 	bl	8000490 <__aeabi_dcmpge>
 8000556:	2800      	cmp	r0, #0
 8000558:	d104      	bne.n	8000564 <__aeabi_d2uiz+0x1c>
 800055a:	0020      	movs	r0, r4
 800055c:	0029      	movs	r1, r5
 800055e:	f002 fcd9 	bl	8002f14 <__aeabi_d2iz>
 8000562:	bd70      	pop	{r4, r5, r6, pc}
 8000564:	4b06      	ldr	r3, [pc, #24]	; (8000580 <__aeabi_d2uiz+0x38>)
 8000566:	2200      	movs	r2, #0
 8000568:	0020      	movs	r0, r4
 800056a:	0029      	movs	r1, r5
 800056c:	f002 f922 	bl	80027b4 <__aeabi_dsub>
 8000570:	f002 fcd0 	bl	8002f14 <__aeabi_d2iz>
 8000574:	2380      	movs	r3, #128	; 0x80
 8000576:	061b      	lsls	r3, r3, #24
 8000578:	469c      	mov	ip, r3
 800057a:	4460      	add	r0, ip
 800057c:	e7f1      	b.n	8000562 <__aeabi_d2uiz+0x1a>
 800057e:	46c0      	nop			; (mov r8, r8)
 8000580:	41e00000 	.word	0x41e00000

08000584 <__aeabi_d2lz>:
 8000584:	b570      	push	{r4, r5, r6, lr}
 8000586:	0005      	movs	r5, r0
 8000588:	000c      	movs	r4, r1
 800058a:	2200      	movs	r2, #0
 800058c:	2300      	movs	r3, #0
 800058e:	0028      	movs	r0, r5
 8000590:	0021      	movs	r1, r4
 8000592:	f7ff ff5f 	bl	8000454 <__aeabi_dcmplt>
 8000596:	2800      	cmp	r0, #0
 8000598:	d108      	bne.n	80005ac <__aeabi_d2lz+0x28>
 800059a:	0028      	movs	r0, r5
 800059c:	0021      	movs	r1, r4
 800059e:	f000 f80f 	bl	80005c0 <__aeabi_d2ulz>
 80005a2:	0002      	movs	r2, r0
 80005a4:	000b      	movs	r3, r1
 80005a6:	0010      	movs	r0, r2
 80005a8:	0019      	movs	r1, r3
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	2380      	movs	r3, #128	; 0x80
 80005ae:	061b      	lsls	r3, r3, #24
 80005b0:	18e1      	adds	r1, r4, r3
 80005b2:	0028      	movs	r0, r5
 80005b4:	f000 f804 	bl	80005c0 <__aeabi_d2ulz>
 80005b8:	2300      	movs	r3, #0
 80005ba:	4242      	negs	r2, r0
 80005bc:	418b      	sbcs	r3, r1
 80005be:	e7f2      	b.n	80005a6 <__aeabi_d2lz+0x22>

080005c0 <__aeabi_d2ulz>:
 80005c0:	b570      	push	{r4, r5, r6, lr}
 80005c2:	2200      	movs	r2, #0
 80005c4:	4b0b      	ldr	r3, [pc, #44]	; (80005f4 <__aeabi_d2ulz+0x34>)
 80005c6:	000d      	movs	r5, r1
 80005c8:	0004      	movs	r4, r0
 80005ca:	f001 fe87 	bl	80022dc <__aeabi_dmul>
 80005ce:	f7ff ffbb 	bl	8000548 <__aeabi_d2uiz>
 80005d2:	0006      	movs	r6, r0
 80005d4:	f002 fd04 	bl	8002fe0 <__aeabi_ui2d>
 80005d8:	2200      	movs	r2, #0
 80005da:	4b07      	ldr	r3, [pc, #28]	; (80005f8 <__aeabi_d2ulz+0x38>)
 80005dc:	f001 fe7e 	bl	80022dc <__aeabi_dmul>
 80005e0:	0002      	movs	r2, r0
 80005e2:	000b      	movs	r3, r1
 80005e4:	0020      	movs	r0, r4
 80005e6:	0029      	movs	r1, r5
 80005e8:	f002 f8e4 	bl	80027b4 <__aeabi_dsub>
 80005ec:	f7ff ffac 	bl	8000548 <__aeabi_d2uiz>
 80005f0:	0031      	movs	r1, r6
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	3df00000 	.word	0x3df00000
 80005f8:	41f00000 	.word	0x41f00000

080005fc <__aeabi_l2d>:
 80005fc:	b570      	push	{r4, r5, r6, lr}
 80005fe:	0006      	movs	r6, r0
 8000600:	0008      	movs	r0, r1
 8000602:	f002 fcbd 	bl	8002f80 <__aeabi_i2d>
 8000606:	2200      	movs	r2, #0
 8000608:	4b06      	ldr	r3, [pc, #24]	; (8000624 <__aeabi_l2d+0x28>)
 800060a:	f001 fe67 	bl	80022dc <__aeabi_dmul>
 800060e:	000d      	movs	r5, r1
 8000610:	0004      	movs	r4, r0
 8000612:	0030      	movs	r0, r6
 8000614:	f002 fce4 	bl	8002fe0 <__aeabi_ui2d>
 8000618:	002b      	movs	r3, r5
 800061a:	0022      	movs	r2, r4
 800061c:	f000 feee 	bl	80013fc <__aeabi_dadd>
 8000620:	bd70      	pop	{r4, r5, r6, pc}
 8000622:	46c0      	nop			; (mov r8, r8)
 8000624:	41f00000 	.word	0x41f00000

08000628 <__aeabi_fadd>:
 8000628:	b5f0      	push	{r4, r5, r6, r7, lr}
 800062a:	4646      	mov	r6, r8
 800062c:	46d6      	mov	lr, sl
 800062e:	464f      	mov	r7, r9
 8000630:	024d      	lsls	r5, r1, #9
 8000632:	0242      	lsls	r2, r0, #9
 8000634:	b5c0      	push	{r6, r7, lr}
 8000636:	0a52      	lsrs	r2, r2, #9
 8000638:	0a6e      	lsrs	r6, r5, #9
 800063a:	0047      	lsls	r7, r0, #1
 800063c:	46b0      	mov	r8, r6
 800063e:	0e3f      	lsrs	r7, r7, #24
 8000640:	004e      	lsls	r6, r1, #1
 8000642:	0fc4      	lsrs	r4, r0, #31
 8000644:	00d0      	lsls	r0, r2, #3
 8000646:	4694      	mov	ip, r2
 8000648:	003b      	movs	r3, r7
 800064a:	4682      	mov	sl, r0
 800064c:	0e36      	lsrs	r6, r6, #24
 800064e:	0fc9      	lsrs	r1, r1, #31
 8000650:	09ad      	lsrs	r5, r5, #6
 8000652:	428c      	cmp	r4, r1
 8000654:	d06d      	beq.n	8000732 <__aeabi_fadd+0x10a>
 8000656:	1bb8      	subs	r0, r7, r6
 8000658:	4681      	mov	r9, r0
 800065a:	2800      	cmp	r0, #0
 800065c:	dd4d      	ble.n	80006fa <__aeabi_fadd+0xd2>
 800065e:	2e00      	cmp	r6, #0
 8000660:	d100      	bne.n	8000664 <__aeabi_fadd+0x3c>
 8000662:	e088      	b.n	8000776 <__aeabi_fadd+0x14e>
 8000664:	2fff      	cmp	r7, #255	; 0xff
 8000666:	d05a      	beq.n	800071e <__aeabi_fadd+0xf6>
 8000668:	2380      	movs	r3, #128	; 0x80
 800066a:	04db      	lsls	r3, r3, #19
 800066c:	431d      	orrs	r5, r3
 800066e:	464b      	mov	r3, r9
 8000670:	2201      	movs	r2, #1
 8000672:	2b1b      	cmp	r3, #27
 8000674:	dc0a      	bgt.n	800068c <__aeabi_fadd+0x64>
 8000676:	002b      	movs	r3, r5
 8000678:	464a      	mov	r2, r9
 800067a:	4649      	mov	r1, r9
 800067c:	40d3      	lsrs	r3, r2
 800067e:	2220      	movs	r2, #32
 8000680:	1a52      	subs	r2, r2, r1
 8000682:	4095      	lsls	r5, r2
 8000684:	002a      	movs	r2, r5
 8000686:	1e55      	subs	r5, r2, #1
 8000688:	41aa      	sbcs	r2, r5
 800068a:	431a      	orrs	r2, r3
 800068c:	4653      	mov	r3, sl
 800068e:	1a9a      	subs	r2, r3, r2
 8000690:	0153      	lsls	r3, r2, #5
 8000692:	d400      	bmi.n	8000696 <__aeabi_fadd+0x6e>
 8000694:	e0b9      	b.n	800080a <__aeabi_fadd+0x1e2>
 8000696:	0192      	lsls	r2, r2, #6
 8000698:	0996      	lsrs	r6, r2, #6
 800069a:	0030      	movs	r0, r6
 800069c:	f002 fd96 	bl	80031cc <__clzsi2>
 80006a0:	3805      	subs	r0, #5
 80006a2:	4086      	lsls	r6, r0
 80006a4:	4287      	cmp	r7, r0
 80006a6:	dd00      	ble.n	80006aa <__aeabi_fadd+0x82>
 80006a8:	e0d4      	b.n	8000854 <__aeabi_fadd+0x22c>
 80006aa:	0033      	movs	r3, r6
 80006ac:	1bc7      	subs	r7, r0, r7
 80006ae:	2020      	movs	r0, #32
 80006b0:	3701      	adds	r7, #1
 80006b2:	40fb      	lsrs	r3, r7
 80006b4:	1bc7      	subs	r7, r0, r7
 80006b6:	40be      	lsls	r6, r7
 80006b8:	0032      	movs	r2, r6
 80006ba:	1e56      	subs	r6, r2, #1
 80006bc:	41b2      	sbcs	r2, r6
 80006be:	2700      	movs	r7, #0
 80006c0:	431a      	orrs	r2, r3
 80006c2:	0753      	lsls	r3, r2, #29
 80006c4:	d004      	beq.n	80006d0 <__aeabi_fadd+0xa8>
 80006c6:	230f      	movs	r3, #15
 80006c8:	4013      	ands	r3, r2
 80006ca:	2b04      	cmp	r3, #4
 80006cc:	d000      	beq.n	80006d0 <__aeabi_fadd+0xa8>
 80006ce:	3204      	adds	r2, #4
 80006d0:	0153      	lsls	r3, r2, #5
 80006d2:	d400      	bmi.n	80006d6 <__aeabi_fadd+0xae>
 80006d4:	e09c      	b.n	8000810 <__aeabi_fadd+0x1e8>
 80006d6:	1c7b      	adds	r3, r7, #1
 80006d8:	2ffe      	cmp	r7, #254	; 0xfe
 80006da:	d100      	bne.n	80006de <__aeabi_fadd+0xb6>
 80006dc:	e09a      	b.n	8000814 <__aeabi_fadd+0x1ec>
 80006de:	0192      	lsls	r2, r2, #6
 80006e0:	0a52      	lsrs	r2, r2, #9
 80006e2:	4694      	mov	ip, r2
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	05d8      	lsls	r0, r3, #23
 80006e8:	4663      	mov	r3, ip
 80006ea:	07e4      	lsls	r4, r4, #31
 80006ec:	4318      	orrs	r0, r3
 80006ee:	4320      	orrs	r0, r4
 80006f0:	bce0      	pop	{r5, r6, r7}
 80006f2:	46ba      	mov	sl, r7
 80006f4:	46b1      	mov	r9, r6
 80006f6:	46a8      	mov	r8, r5
 80006f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006fa:	2800      	cmp	r0, #0
 80006fc:	d049      	beq.n	8000792 <__aeabi_fadd+0x16a>
 80006fe:	1bf3      	subs	r3, r6, r7
 8000700:	2f00      	cmp	r7, #0
 8000702:	d000      	beq.n	8000706 <__aeabi_fadd+0xde>
 8000704:	e0b6      	b.n	8000874 <__aeabi_fadd+0x24c>
 8000706:	4652      	mov	r2, sl
 8000708:	2a00      	cmp	r2, #0
 800070a:	d060      	beq.n	80007ce <__aeabi_fadd+0x1a6>
 800070c:	3b01      	subs	r3, #1
 800070e:	2b00      	cmp	r3, #0
 8000710:	d100      	bne.n	8000714 <__aeabi_fadd+0xec>
 8000712:	e0fc      	b.n	800090e <__aeabi_fadd+0x2e6>
 8000714:	2eff      	cmp	r6, #255	; 0xff
 8000716:	d000      	beq.n	800071a <__aeabi_fadd+0xf2>
 8000718:	e0b4      	b.n	8000884 <__aeabi_fadd+0x25c>
 800071a:	000c      	movs	r4, r1
 800071c:	4642      	mov	r2, r8
 800071e:	2a00      	cmp	r2, #0
 8000720:	d078      	beq.n	8000814 <__aeabi_fadd+0x1ec>
 8000722:	2080      	movs	r0, #128	; 0x80
 8000724:	03c0      	lsls	r0, r0, #15
 8000726:	4310      	orrs	r0, r2
 8000728:	0242      	lsls	r2, r0, #9
 800072a:	0a53      	lsrs	r3, r2, #9
 800072c:	469c      	mov	ip, r3
 800072e:	23ff      	movs	r3, #255	; 0xff
 8000730:	e7d9      	b.n	80006e6 <__aeabi_fadd+0xbe>
 8000732:	1bb9      	subs	r1, r7, r6
 8000734:	2900      	cmp	r1, #0
 8000736:	dd71      	ble.n	800081c <__aeabi_fadd+0x1f4>
 8000738:	2e00      	cmp	r6, #0
 800073a:	d03f      	beq.n	80007bc <__aeabi_fadd+0x194>
 800073c:	2fff      	cmp	r7, #255	; 0xff
 800073e:	d0ee      	beq.n	800071e <__aeabi_fadd+0xf6>
 8000740:	2380      	movs	r3, #128	; 0x80
 8000742:	04db      	lsls	r3, r3, #19
 8000744:	431d      	orrs	r5, r3
 8000746:	2201      	movs	r2, #1
 8000748:	291b      	cmp	r1, #27
 800074a:	dc07      	bgt.n	800075c <__aeabi_fadd+0x134>
 800074c:	002a      	movs	r2, r5
 800074e:	2320      	movs	r3, #32
 8000750:	40ca      	lsrs	r2, r1
 8000752:	1a59      	subs	r1, r3, r1
 8000754:	408d      	lsls	r5, r1
 8000756:	1e6b      	subs	r3, r5, #1
 8000758:	419d      	sbcs	r5, r3
 800075a:	432a      	orrs	r2, r5
 800075c:	4452      	add	r2, sl
 800075e:	0153      	lsls	r3, r2, #5
 8000760:	d553      	bpl.n	800080a <__aeabi_fadd+0x1e2>
 8000762:	3701      	adds	r7, #1
 8000764:	2fff      	cmp	r7, #255	; 0xff
 8000766:	d055      	beq.n	8000814 <__aeabi_fadd+0x1ec>
 8000768:	2301      	movs	r3, #1
 800076a:	497b      	ldr	r1, [pc, #492]	; (8000958 <__aeabi_fadd+0x330>)
 800076c:	4013      	ands	r3, r2
 800076e:	0852      	lsrs	r2, r2, #1
 8000770:	400a      	ands	r2, r1
 8000772:	431a      	orrs	r2, r3
 8000774:	e7a5      	b.n	80006c2 <__aeabi_fadd+0x9a>
 8000776:	2d00      	cmp	r5, #0
 8000778:	d02c      	beq.n	80007d4 <__aeabi_fadd+0x1ac>
 800077a:	2301      	movs	r3, #1
 800077c:	425b      	negs	r3, r3
 800077e:	469c      	mov	ip, r3
 8000780:	44e1      	add	r9, ip
 8000782:	464b      	mov	r3, r9
 8000784:	2b00      	cmp	r3, #0
 8000786:	d100      	bne.n	800078a <__aeabi_fadd+0x162>
 8000788:	e0ad      	b.n	80008e6 <__aeabi_fadd+0x2be>
 800078a:	2fff      	cmp	r7, #255	; 0xff
 800078c:	d000      	beq.n	8000790 <__aeabi_fadd+0x168>
 800078e:	e76e      	b.n	800066e <__aeabi_fadd+0x46>
 8000790:	e7c5      	b.n	800071e <__aeabi_fadd+0xf6>
 8000792:	20fe      	movs	r0, #254	; 0xfe
 8000794:	1c7e      	adds	r6, r7, #1
 8000796:	4230      	tst	r0, r6
 8000798:	d160      	bne.n	800085c <__aeabi_fadd+0x234>
 800079a:	2f00      	cmp	r7, #0
 800079c:	d000      	beq.n	80007a0 <__aeabi_fadd+0x178>
 800079e:	e093      	b.n	80008c8 <__aeabi_fadd+0x2a0>
 80007a0:	4652      	mov	r2, sl
 80007a2:	2a00      	cmp	r2, #0
 80007a4:	d100      	bne.n	80007a8 <__aeabi_fadd+0x180>
 80007a6:	e0b6      	b.n	8000916 <__aeabi_fadd+0x2ee>
 80007a8:	2d00      	cmp	r5, #0
 80007aa:	d09c      	beq.n	80006e6 <__aeabi_fadd+0xbe>
 80007ac:	1b52      	subs	r2, r2, r5
 80007ae:	0150      	lsls	r0, r2, #5
 80007b0:	d400      	bmi.n	80007b4 <__aeabi_fadd+0x18c>
 80007b2:	e0c3      	b.n	800093c <__aeabi_fadd+0x314>
 80007b4:	4653      	mov	r3, sl
 80007b6:	000c      	movs	r4, r1
 80007b8:	1aea      	subs	r2, r5, r3
 80007ba:	e782      	b.n	80006c2 <__aeabi_fadd+0x9a>
 80007bc:	2d00      	cmp	r5, #0
 80007be:	d009      	beq.n	80007d4 <__aeabi_fadd+0x1ac>
 80007c0:	3901      	subs	r1, #1
 80007c2:	2900      	cmp	r1, #0
 80007c4:	d100      	bne.n	80007c8 <__aeabi_fadd+0x1a0>
 80007c6:	e08b      	b.n	80008e0 <__aeabi_fadd+0x2b8>
 80007c8:	2fff      	cmp	r7, #255	; 0xff
 80007ca:	d1bc      	bne.n	8000746 <__aeabi_fadd+0x11e>
 80007cc:	e7a7      	b.n	800071e <__aeabi_fadd+0xf6>
 80007ce:	000c      	movs	r4, r1
 80007d0:	4642      	mov	r2, r8
 80007d2:	0037      	movs	r7, r6
 80007d4:	2fff      	cmp	r7, #255	; 0xff
 80007d6:	d0a2      	beq.n	800071e <__aeabi_fadd+0xf6>
 80007d8:	0252      	lsls	r2, r2, #9
 80007da:	0a53      	lsrs	r3, r2, #9
 80007dc:	469c      	mov	ip, r3
 80007de:	b2fb      	uxtb	r3, r7
 80007e0:	e781      	b.n	80006e6 <__aeabi_fadd+0xbe>
 80007e2:	21fe      	movs	r1, #254	; 0xfe
 80007e4:	3701      	adds	r7, #1
 80007e6:	4239      	tst	r1, r7
 80007e8:	d165      	bne.n	80008b6 <__aeabi_fadd+0x28e>
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d17e      	bne.n	80008ec <__aeabi_fadd+0x2c4>
 80007ee:	2800      	cmp	r0, #0
 80007f0:	d100      	bne.n	80007f4 <__aeabi_fadd+0x1cc>
 80007f2:	e0aa      	b.n	800094a <__aeabi_fadd+0x322>
 80007f4:	2d00      	cmp	r5, #0
 80007f6:	d100      	bne.n	80007fa <__aeabi_fadd+0x1d2>
 80007f8:	e775      	b.n	80006e6 <__aeabi_fadd+0xbe>
 80007fa:	002a      	movs	r2, r5
 80007fc:	4452      	add	r2, sl
 80007fe:	2700      	movs	r7, #0
 8000800:	0153      	lsls	r3, r2, #5
 8000802:	d502      	bpl.n	800080a <__aeabi_fadd+0x1e2>
 8000804:	4b55      	ldr	r3, [pc, #340]	; (800095c <__aeabi_fadd+0x334>)
 8000806:	3701      	adds	r7, #1
 8000808:	401a      	ands	r2, r3
 800080a:	0753      	lsls	r3, r2, #29
 800080c:	d000      	beq.n	8000810 <__aeabi_fadd+0x1e8>
 800080e:	e75a      	b.n	80006c6 <__aeabi_fadd+0x9e>
 8000810:	08d2      	lsrs	r2, r2, #3
 8000812:	e7df      	b.n	80007d4 <__aeabi_fadd+0x1ac>
 8000814:	2200      	movs	r2, #0
 8000816:	23ff      	movs	r3, #255	; 0xff
 8000818:	4694      	mov	ip, r2
 800081a:	e764      	b.n	80006e6 <__aeabi_fadd+0xbe>
 800081c:	2900      	cmp	r1, #0
 800081e:	d0e0      	beq.n	80007e2 <__aeabi_fadd+0x1ba>
 8000820:	1bf3      	subs	r3, r6, r7
 8000822:	2f00      	cmp	r7, #0
 8000824:	d03e      	beq.n	80008a4 <__aeabi_fadd+0x27c>
 8000826:	2eff      	cmp	r6, #255	; 0xff
 8000828:	d100      	bne.n	800082c <__aeabi_fadd+0x204>
 800082a:	e777      	b.n	800071c <__aeabi_fadd+0xf4>
 800082c:	2280      	movs	r2, #128	; 0x80
 800082e:	0001      	movs	r1, r0
 8000830:	04d2      	lsls	r2, r2, #19
 8000832:	4311      	orrs	r1, r2
 8000834:	468a      	mov	sl, r1
 8000836:	2201      	movs	r2, #1
 8000838:	2b1b      	cmp	r3, #27
 800083a:	dc08      	bgt.n	800084e <__aeabi_fadd+0x226>
 800083c:	4652      	mov	r2, sl
 800083e:	2120      	movs	r1, #32
 8000840:	4650      	mov	r0, sl
 8000842:	40da      	lsrs	r2, r3
 8000844:	1acb      	subs	r3, r1, r3
 8000846:	4098      	lsls	r0, r3
 8000848:	1e43      	subs	r3, r0, #1
 800084a:	4198      	sbcs	r0, r3
 800084c:	4302      	orrs	r2, r0
 800084e:	0037      	movs	r7, r6
 8000850:	1952      	adds	r2, r2, r5
 8000852:	e784      	b.n	800075e <__aeabi_fadd+0x136>
 8000854:	4a41      	ldr	r2, [pc, #260]	; (800095c <__aeabi_fadd+0x334>)
 8000856:	1a3f      	subs	r7, r7, r0
 8000858:	4032      	ands	r2, r6
 800085a:	e732      	b.n	80006c2 <__aeabi_fadd+0x9a>
 800085c:	4653      	mov	r3, sl
 800085e:	1b5e      	subs	r6, r3, r5
 8000860:	0173      	lsls	r3, r6, #5
 8000862:	d42d      	bmi.n	80008c0 <__aeabi_fadd+0x298>
 8000864:	2e00      	cmp	r6, #0
 8000866:	d000      	beq.n	800086a <__aeabi_fadd+0x242>
 8000868:	e717      	b.n	800069a <__aeabi_fadd+0x72>
 800086a:	2200      	movs	r2, #0
 800086c:	2400      	movs	r4, #0
 800086e:	2300      	movs	r3, #0
 8000870:	4694      	mov	ip, r2
 8000872:	e738      	b.n	80006e6 <__aeabi_fadd+0xbe>
 8000874:	2eff      	cmp	r6, #255	; 0xff
 8000876:	d100      	bne.n	800087a <__aeabi_fadd+0x252>
 8000878:	e74f      	b.n	800071a <__aeabi_fadd+0xf2>
 800087a:	2280      	movs	r2, #128	; 0x80
 800087c:	4650      	mov	r0, sl
 800087e:	04d2      	lsls	r2, r2, #19
 8000880:	4310      	orrs	r0, r2
 8000882:	4682      	mov	sl, r0
 8000884:	2201      	movs	r2, #1
 8000886:	2b1b      	cmp	r3, #27
 8000888:	dc08      	bgt.n	800089c <__aeabi_fadd+0x274>
 800088a:	4652      	mov	r2, sl
 800088c:	2420      	movs	r4, #32
 800088e:	4650      	mov	r0, sl
 8000890:	40da      	lsrs	r2, r3
 8000892:	1ae3      	subs	r3, r4, r3
 8000894:	4098      	lsls	r0, r3
 8000896:	1e43      	subs	r3, r0, #1
 8000898:	4198      	sbcs	r0, r3
 800089a:	4302      	orrs	r2, r0
 800089c:	000c      	movs	r4, r1
 800089e:	0037      	movs	r7, r6
 80008a0:	1aaa      	subs	r2, r5, r2
 80008a2:	e6f5      	b.n	8000690 <__aeabi_fadd+0x68>
 80008a4:	2800      	cmp	r0, #0
 80008a6:	d093      	beq.n	80007d0 <__aeabi_fadd+0x1a8>
 80008a8:	3b01      	subs	r3, #1
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d04f      	beq.n	800094e <__aeabi_fadd+0x326>
 80008ae:	2eff      	cmp	r6, #255	; 0xff
 80008b0:	d1c1      	bne.n	8000836 <__aeabi_fadd+0x20e>
 80008b2:	4642      	mov	r2, r8
 80008b4:	e733      	b.n	800071e <__aeabi_fadd+0xf6>
 80008b6:	2fff      	cmp	r7, #255	; 0xff
 80008b8:	d0ac      	beq.n	8000814 <__aeabi_fadd+0x1ec>
 80008ba:	4455      	add	r5, sl
 80008bc:	086a      	lsrs	r2, r5, #1
 80008be:	e7a4      	b.n	800080a <__aeabi_fadd+0x1e2>
 80008c0:	4653      	mov	r3, sl
 80008c2:	000c      	movs	r4, r1
 80008c4:	1aee      	subs	r6, r5, r3
 80008c6:	e6e8      	b.n	800069a <__aeabi_fadd+0x72>
 80008c8:	4653      	mov	r3, sl
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d128      	bne.n	8000920 <__aeabi_fadd+0x2f8>
 80008ce:	2d00      	cmp	r5, #0
 80008d0:	d000      	beq.n	80008d4 <__aeabi_fadd+0x2ac>
 80008d2:	e722      	b.n	800071a <__aeabi_fadd+0xf2>
 80008d4:	2380      	movs	r3, #128	; 0x80
 80008d6:	03db      	lsls	r3, r3, #15
 80008d8:	469c      	mov	ip, r3
 80008da:	2400      	movs	r4, #0
 80008dc:	23ff      	movs	r3, #255	; 0xff
 80008de:	e702      	b.n	80006e6 <__aeabi_fadd+0xbe>
 80008e0:	002a      	movs	r2, r5
 80008e2:	4452      	add	r2, sl
 80008e4:	e73b      	b.n	800075e <__aeabi_fadd+0x136>
 80008e6:	4653      	mov	r3, sl
 80008e8:	1b5a      	subs	r2, r3, r5
 80008ea:	e6d1      	b.n	8000690 <__aeabi_fadd+0x68>
 80008ec:	2800      	cmp	r0, #0
 80008ee:	d100      	bne.n	80008f2 <__aeabi_fadd+0x2ca>
 80008f0:	e714      	b.n	800071c <__aeabi_fadd+0xf4>
 80008f2:	2d00      	cmp	r5, #0
 80008f4:	d100      	bne.n	80008f8 <__aeabi_fadd+0x2d0>
 80008f6:	e712      	b.n	800071e <__aeabi_fadd+0xf6>
 80008f8:	2380      	movs	r3, #128	; 0x80
 80008fa:	03db      	lsls	r3, r3, #15
 80008fc:	421a      	tst	r2, r3
 80008fe:	d100      	bne.n	8000902 <__aeabi_fadd+0x2da>
 8000900:	e70d      	b.n	800071e <__aeabi_fadd+0xf6>
 8000902:	4641      	mov	r1, r8
 8000904:	4219      	tst	r1, r3
 8000906:	d000      	beq.n	800090a <__aeabi_fadd+0x2e2>
 8000908:	e709      	b.n	800071e <__aeabi_fadd+0xf6>
 800090a:	4642      	mov	r2, r8
 800090c:	e707      	b.n	800071e <__aeabi_fadd+0xf6>
 800090e:	000c      	movs	r4, r1
 8000910:	0037      	movs	r7, r6
 8000912:	1aaa      	subs	r2, r5, r2
 8000914:	e6bc      	b.n	8000690 <__aeabi_fadd+0x68>
 8000916:	2d00      	cmp	r5, #0
 8000918:	d013      	beq.n	8000942 <__aeabi_fadd+0x31a>
 800091a:	000c      	movs	r4, r1
 800091c:	46c4      	mov	ip, r8
 800091e:	e6e2      	b.n	80006e6 <__aeabi_fadd+0xbe>
 8000920:	2d00      	cmp	r5, #0
 8000922:	d100      	bne.n	8000926 <__aeabi_fadd+0x2fe>
 8000924:	e6fb      	b.n	800071e <__aeabi_fadd+0xf6>
 8000926:	2380      	movs	r3, #128	; 0x80
 8000928:	03db      	lsls	r3, r3, #15
 800092a:	421a      	tst	r2, r3
 800092c:	d100      	bne.n	8000930 <__aeabi_fadd+0x308>
 800092e:	e6f6      	b.n	800071e <__aeabi_fadd+0xf6>
 8000930:	4640      	mov	r0, r8
 8000932:	4218      	tst	r0, r3
 8000934:	d000      	beq.n	8000938 <__aeabi_fadd+0x310>
 8000936:	e6f2      	b.n	800071e <__aeabi_fadd+0xf6>
 8000938:	000c      	movs	r4, r1
 800093a:	e6ef      	b.n	800071c <__aeabi_fadd+0xf4>
 800093c:	2a00      	cmp	r2, #0
 800093e:	d000      	beq.n	8000942 <__aeabi_fadd+0x31a>
 8000940:	e763      	b.n	800080a <__aeabi_fadd+0x1e2>
 8000942:	2200      	movs	r2, #0
 8000944:	2400      	movs	r4, #0
 8000946:	4694      	mov	ip, r2
 8000948:	e6cd      	b.n	80006e6 <__aeabi_fadd+0xbe>
 800094a:	46c4      	mov	ip, r8
 800094c:	e6cb      	b.n	80006e6 <__aeabi_fadd+0xbe>
 800094e:	002a      	movs	r2, r5
 8000950:	0037      	movs	r7, r6
 8000952:	4452      	add	r2, sl
 8000954:	e703      	b.n	800075e <__aeabi_fadd+0x136>
 8000956:	46c0      	nop			; (mov r8, r8)
 8000958:	7dffffff 	.word	0x7dffffff
 800095c:	fbffffff 	.word	0xfbffffff

08000960 <__aeabi_fdiv>:
 8000960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000962:	464f      	mov	r7, r9
 8000964:	4646      	mov	r6, r8
 8000966:	46d6      	mov	lr, sl
 8000968:	0245      	lsls	r5, r0, #9
 800096a:	b5c0      	push	{r6, r7, lr}
 800096c:	0047      	lsls	r7, r0, #1
 800096e:	1c0c      	adds	r4, r1, #0
 8000970:	0a6d      	lsrs	r5, r5, #9
 8000972:	0e3f      	lsrs	r7, r7, #24
 8000974:	0fc6      	lsrs	r6, r0, #31
 8000976:	2f00      	cmp	r7, #0
 8000978:	d066      	beq.n	8000a48 <__aeabi_fdiv+0xe8>
 800097a:	2fff      	cmp	r7, #255	; 0xff
 800097c:	d06c      	beq.n	8000a58 <__aeabi_fdiv+0xf8>
 800097e:	2300      	movs	r3, #0
 8000980:	00ea      	lsls	r2, r5, #3
 8000982:	2580      	movs	r5, #128	; 0x80
 8000984:	4699      	mov	r9, r3
 8000986:	469a      	mov	sl, r3
 8000988:	04ed      	lsls	r5, r5, #19
 800098a:	4315      	orrs	r5, r2
 800098c:	3f7f      	subs	r7, #127	; 0x7f
 800098e:	0260      	lsls	r0, r4, #9
 8000990:	0061      	lsls	r1, r4, #1
 8000992:	0a43      	lsrs	r3, r0, #9
 8000994:	4698      	mov	r8, r3
 8000996:	0e09      	lsrs	r1, r1, #24
 8000998:	0fe4      	lsrs	r4, r4, #31
 800099a:	2900      	cmp	r1, #0
 800099c:	d048      	beq.n	8000a30 <__aeabi_fdiv+0xd0>
 800099e:	29ff      	cmp	r1, #255	; 0xff
 80009a0:	d010      	beq.n	80009c4 <__aeabi_fdiv+0x64>
 80009a2:	2280      	movs	r2, #128	; 0x80
 80009a4:	00d8      	lsls	r0, r3, #3
 80009a6:	04d2      	lsls	r2, r2, #19
 80009a8:	4302      	orrs	r2, r0
 80009aa:	4690      	mov	r8, r2
 80009ac:	2000      	movs	r0, #0
 80009ae:	397f      	subs	r1, #127	; 0x7f
 80009b0:	464a      	mov	r2, r9
 80009b2:	0033      	movs	r3, r6
 80009b4:	1a7f      	subs	r7, r7, r1
 80009b6:	4302      	orrs	r2, r0
 80009b8:	496c      	ldr	r1, [pc, #432]	; (8000b6c <__aeabi_fdiv+0x20c>)
 80009ba:	0092      	lsls	r2, r2, #2
 80009bc:	588a      	ldr	r2, [r1, r2]
 80009be:	4063      	eors	r3, r4
 80009c0:	b2db      	uxtb	r3, r3
 80009c2:	4697      	mov	pc, r2
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d16d      	bne.n	8000aa4 <__aeabi_fdiv+0x144>
 80009c8:	2002      	movs	r0, #2
 80009ca:	3fff      	subs	r7, #255	; 0xff
 80009cc:	e033      	b.n	8000a36 <__aeabi_fdiv+0xd6>
 80009ce:	2300      	movs	r3, #0
 80009d0:	4698      	mov	r8, r3
 80009d2:	0026      	movs	r6, r4
 80009d4:	4645      	mov	r5, r8
 80009d6:	4682      	mov	sl, r0
 80009d8:	4653      	mov	r3, sl
 80009da:	2b02      	cmp	r3, #2
 80009dc:	d100      	bne.n	80009e0 <__aeabi_fdiv+0x80>
 80009de:	e07f      	b.n	8000ae0 <__aeabi_fdiv+0x180>
 80009e0:	2b03      	cmp	r3, #3
 80009e2:	d100      	bne.n	80009e6 <__aeabi_fdiv+0x86>
 80009e4:	e094      	b.n	8000b10 <__aeabi_fdiv+0x1b0>
 80009e6:	2b01      	cmp	r3, #1
 80009e8:	d017      	beq.n	8000a1a <__aeabi_fdiv+0xba>
 80009ea:	0038      	movs	r0, r7
 80009ec:	307f      	adds	r0, #127	; 0x7f
 80009ee:	2800      	cmp	r0, #0
 80009f0:	dd5f      	ble.n	8000ab2 <__aeabi_fdiv+0x152>
 80009f2:	076b      	lsls	r3, r5, #29
 80009f4:	d004      	beq.n	8000a00 <__aeabi_fdiv+0xa0>
 80009f6:	230f      	movs	r3, #15
 80009f8:	402b      	ands	r3, r5
 80009fa:	2b04      	cmp	r3, #4
 80009fc:	d000      	beq.n	8000a00 <__aeabi_fdiv+0xa0>
 80009fe:	3504      	adds	r5, #4
 8000a00:	012b      	lsls	r3, r5, #4
 8000a02:	d503      	bpl.n	8000a0c <__aeabi_fdiv+0xac>
 8000a04:	0038      	movs	r0, r7
 8000a06:	4b5a      	ldr	r3, [pc, #360]	; (8000b70 <__aeabi_fdiv+0x210>)
 8000a08:	3080      	adds	r0, #128	; 0x80
 8000a0a:	401d      	ands	r5, r3
 8000a0c:	28fe      	cmp	r0, #254	; 0xfe
 8000a0e:	dc67      	bgt.n	8000ae0 <__aeabi_fdiv+0x180>
 8000a10:	01ad      	lsls	r5, r5, #6
 8000a12:	0a6d      	lsrs	r5, r5, #9
 8000a14:	b2c0      	uxtb	r0, r0
 8000a16:	e002      	b.n	8000a1e <__aeabi_fdiv+0xbe>
 8000a18:	001e      	movs	r6, r3
 8000a1a:	2000      	movs	r0, #0
 8000a1c:	2500      	movs	r5, #0
 8000a1e:	05c0      	lsls	r0, r0, #23
 8000a20:	4328      	orrs	r0, r5
 8000a22:	07f6      	lsls	r6, r6, #31
 8000a24:	4330      	orrs	r0, r6
 8000a26:	bce0      	pop	{r5, r6, r7}
 8000a28:	46ba      	mov	sl, r7
 8000a2a:	46b1      	mov	r9, r6
 8000a2c:	46a8      	mov	r8, r5
 8000a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d12b      	bne.n	8000a8c <__aeabi_fdiv+0x12c>
 8000a34:	2001      	movs	r0, #1
 8000a36:	464a      	mov	r2, r9
 8000a38:	0033      	movs	r3, r6
 8000a3a:	494e      	ldr	r1, [pc, #312]	; (8000b74 <__aeabi_fdiv+0x214>)
 8000a3c:	4302      	orrs	r2, r0
 8000a3e:	0092      	lsls	r2, r2, #2
 8000a40:	588a      	ldr	r2, [r1, r2]
 8000a42:	4063      	eors	r3, r4
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	4697      	mov	pc, r2
 8000a48:	2d00      	cmp	r5, #0
 8000a4a:	d113      	bne.n	8000a74 <__aeabi_fdiv+0x114>
 8000a4c:	2304      	movs	r3, #4
 8000a4e:	4699      	mov	r9, r3
 8000a50:	3b03      	subs	r3, #3
 8000a52:	2700      	movs	r7, #0
 8000a54:	469a      	mov	sl, r3
 8000a56:	e79a      	b.n	800098e <__aeabi_fdiv+0x2e>
 8000a58:	2d00      	cmp	r5, #0
 8000a5a:	d105      	bne.n	8000a68 <__aeabi_fdiv+0x108>
 8000a5c:	2308      	movs	r3, #8
 8000a5e:	4699      	mov	r9, r3
 8000a60:	3b06      	subs	r3, #6
 8000a62:	27ff      	movs	r7, #255	; 0xff
 8000a64:	469a      	mov	sl, r3
 8000a66:	e792      	b.n	800098e <__aeabi_fdiv+0x2e>
 8000a68:	230c      	movs	r3, #12
 8000a6a:	4699      	mov	r9, r3
 8000a6c:	3b09      	subs	r3, #9
 8000a6e:	27ff      	movs	r7, #255	; 0xff
 8000a70:	469a      	mov	sl, r3
 8000a72:	e78c      	b.n	800098e <__aeabi_fdiv+0x2e>
 8000a74:	0028      	movs	r0, r5
 8000a76:	f002 fba9 	bl	80031cc <__clzsi2>
 8000a7a:	2776      	movs	r7, #118	; 0x76
 8000a7c:	1f43      	subs	r3, r0, #5
 8000a7e:	409d      	lsls	r5, r3
 8000a80:	2300      	movs	r3, #0
 8000a82:	427f      	negs	r7, r7
 8000a84:	4699      	mov	r9, r3
 8000a86:	469a      	mov	sl, r3
 8000a88:	1a3f      	subs	r7, r7, r0
 8000a8a:	e780      	b.n	800098e <__aeabi_fdiv+0x2e>
 8000a8c:	0018      	movs	r0, r3
 8000a8e:	f002 fb9d 	bl	80031cc <__clzsi2>
 8000a92:	4642      	mov	r2, r8
 8000a94:	1f43      	subs	r3, r0, #5
 8000a96:	2176      	movs	r1, #118	; 0x76
 8000a98:	409a      	lsls	r2, r3
 8000a9a:	4249      	negs	r1, r1
 8000a9c:	1a09      	subs	r1, r1, r0
 8000a9e:	4690      	mov	r8, r2
 8000aa0:	2000      	movs	r0, #0
 8000aa2:	e785      	b.n	80009b0 <__aeabi_fdiv+0x50>
 8000aa4:	21ff      	movs	r1, #255	; 0xff
 8000aa6:	2003      	movs	r0, #3
 8000aa8:	e782      	b.n	80009b0 <__aeabi_fdiv+0x50>
 8000aaa:	001e      	movs	r6, r3
 8000aac:	20ff      	movs	r0, #255	; 0xff
 8000aae:	2500      	movs	r5, #0
 8000ab0:	e7b5      	b.n	8000a1e <__aeabi_fdiv+0xbe>
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	1a1b      	subs	r3, r3, r0
 8000ab6:	2b1b      	cmp	r3, #27
 8000ab8:	dcaf      	bgt.n	8000a1a <__aeabi_fdiv+0xba>
 8000aba:	379e      	adds	r7, #158	; 0x9e
 8000abc:	0029      	movs	r1, r5
 8000abe:	40bd      	lsls	r5, r7
 8000ac0:	40d9      	lsrs	r1, r3
 8000ac2:	1e6a      	subs	r2, r5, #1
 8000ac4:	4195      	sbcs	r5, r2
 8000ac6:	430d      	orrs	r5, r1
 8000ac8:	076b      	lsls	r3, r5, #29
 8000aca:	d004      	beq.n	8000ad6 <__aeabi_fdiv+0x176>
 8000acc:	230f      	movs	r3, #15
 8000ace:	402b      	ands	r3, r5
 8000ad0:	2b04      	cmp	r3, #4
 8000ad2:	d000      	beq.n	8000ad6 <__aeabi_fdiv+0x176>
 8000ad4:	3504      	adds	r5, #4
 8000ad6:	016b      	lsls	r3, r5, #5
 8000ad8:	d544      	bpl.n	8000b64 <__aeabi_fdiv+0x204>
 8000ada:	2001      	movs	r0, #1
 8000adc:	2500      	movs	r5, #0
 8000ade:	e79e      	b.n	8000a1e <__aeabi_fdiv+0xbe>
 8000ae0:	20ff      	movs	r0, #255	; 0xff
 8000ae2:	2500      	movs	r5, #0
 8000ae4:	e79b      	b.n	8000a1e <__aeabi_fdiv+0xbe>
 8000ae6:	2580      	movs	r5, #128	; 0x80
 8000ae8:	2600      	movs	r6, #0
 8000aea:	20ff      	movs	r0, #255	; 0xff
 8000aec:	03ed      	lsls	r5, r5, #15
 8000aee:	e796      	b.n	8000a1e <__aeabi_fdiv+0xbe>
 8000af0:	2300      	movs	r3, #0
 8000af2:	4698      	mov	r8, r3
 8000af4:	2080      	movs	r0, #128	; 0x80
 8000af6:	03c0      	lsls	r0, r0, #15
 8000af8:	4205      	tst	r5, r0
 8000afa:	d009      	beq.n	8000b10 <__aeabi_fdiv+0x1b0>
 8000afc:	4643      	mov	r3, r8
 8000afe:	4203      	tst	r3, r0
 8000b00:	d106      	bne.n	8000b10 <__aeabi_fdiv+0x1b0>
 8000b02:	4645      	mov	r5, r8
 8000b04:	4305      	orrs	r5, r0
 8000b06:	026d      	lsls	r5, r5, #9
 8000b08:	0026      	movs	r6, r4
 8000b0a:	20ff      	movs	r0, #255	; 0xff
 8000b0c:	0a6d      	lsrs	r5, r5, #9
 8000b0e:	e786      	b.n	8000a1e <__aeabi_fdiv+0xbe>
 8000b10:	2080      	movs	r0, #128	; 0x80
 8000b12:	03c0      	lsls	r0, r0, #15
 8000b14:	4305      	orrs	r5, r0
 8000b16:	026d      	lsls	r5, r5, #9
 8000b18:	20ff      	movs	r0, #255	; 0xff
 8000b1a:	0a6d      	lsrs	r5, r5, #9
 8000b1c:	e77f      	b.n	8000a1e <__aeabi_fdiv+0xbe>
 8000b1e:	4641      	mov	r1, r8
 8000b20:	016a      	lsls	r2, r5, #5
 8000b22:	0148      	lsls	r0, r1, #5
 8000b24:	4282      	cmp	r2, r0
 8000b26:	d219      	bcs.n	8000b5c <__aeabi_fdiv+0x1fc>
 8000b28:	211b      	movs	r1, #27
 8000b2a:	2500      	movs	r5, #0
 8000b2c:	3f01      	subs	r7, #1
 8000b2e:	2601      	movs	r6, #1
 8000b30:	0014      	movs	r4, r2
 8000b32:	006d      	lsls	r5, r5, #1
 8000b34:	0052      	lsls	r2, r2, #1
 8000b36:	2c00      	cmp	r4, #0
 8000b38:	db01      	blt.n	8000b3e <__aeabi_fdiv+0x1de>
 8000b3a:	4290      	cmp	r0, r2
 8000b3c:	d801      	bhi.n	8000b42 <__aeabi_fdiv+0x1e2>
 8000b3e:	1a12      	subs	r2, r2, r0
 8000b40:	4335      	orrs	r5, r6
 8000b42:	3901      	subs	r1, #1
 8000b44:	2900      	cmp	r1, #0
 8000b46:	d1f3      	bne.n	8000b30 <__aeabi_fdiv+0x1d0>
 8000b48:	1e50      	subs	r0, r2, #1
 8000b4a:	4182      	sbcs	r2, r0
 8000b4c:	0038      	movs	r0, r7
 8000b4e:	307f      	adds	r0, #127	; 0x7f
 8000b50:	001e      	movs	r6, r3
 8000b52:	4315      	orrs	r5, r2
 8000b54:	2800      	cmp	r0, #0
 8000b56:	dd00      	ble.n	8000b5a <__aeabi_fdiv+0x1fa>
 8000b58:	e74b      	b.n	80009f2 <__aeabi_fdiv+0x92>
 8000b5a:	e7aa      	b.n	8000ab2 <__aeabi_fdiv+0x152>
 8000b5c:	211a      	movs	r1, #26
 8000b5e:	2501      	movs	r5, #1
 8000b60:	1a12      	subs	r2, r2, r0
 8000b62:	e7e4      	b.n	8000b2e <__aeabi_fdiv+0x1ce>
 8000b64:	01ad      	lsls	r5, r5, #6
 8000b66:	2000      	movs	r0, #0
 8000b68:	0a6d      	lsrs	r5, r5, #9
 8000b6a:	e758      	b.n	8000a1e <__aeabi_fdiv+0xbe>
 8000b6c:	0800b458 	.word	0x0800b458
 8000b70:	f7ffffff 	.word	0xf7ffffff
 8000b74:	0800b498 	.word	0x0800b498

08000b78 <__eqsf2>:
 8000b78:	b570      	push	{r4, r5, r6, lr}
 8000b7a:	0042      	lsls	r2, r0, #1
 8000b7c:	024e      	lsls	r6, r1, #9
 8000b7e:	004c      	lsls	r4, r1, #1
 8000b80:	0245      	lsls	r5, r0, #9
 8000b82:	0a6d      	lsrs	r5, r5, #9
 8000b84:	0e12      	lsrs	r2, r2, #24
 8000b86:	0fc3      	lsrs	r3, r0, #31
 8000b88:	0a76      	lsrs	r6, r6, #9
 8000b8a:	0e24      	lsrs	r4, r4, #24
 8000b8c:	0fc9      	lsrs	r1, r1, #31
 8000b8e:	2aff      	cmp	r2, #255	; 0xff
 8000b90:	d00f      	beq.n	8000bb2 <__eqsf2+0x3a>
 8000b92:	2cff      	cmp	r4, #255	; 0xff
 8000b94:	d011      	beq.n	8000bba <__eqsf2+0x42>
 8000b96:	2001      	movs	r0, #1
 8000b98:	42a2      	cmp	r2, r4
 8000b9a:	d000      	beq.n	8000b9e <__eqsf2+0x26>
 8000b9c:	bd70      	pop	{r4, r5, r6, pc}
 8000b9e:	42b5      	cmp	r5, r6
 8000ba0:	d1fc      	bne.n	8000b9c <__eqsf2+0x24>
 8000ba2:	428b      	cmp	r3, r1
 8000ba4:	d00d      	beq.n	8000bc2 <__eqsf2+0x4a>
 8000ba6:	2a00      	cmp	r2, #0
 8000ba8:	d1f8      	bne.n	8000b9c <__eqsf2+0x24>
 8000baa:	0028      	movs	r0, r5
 8000bac:	1e45      	subs	r5, r0, #1
 8000bae:	41a8      	sbcs	r0, r5
 8000bb0:	e7f4      	b.n	8000b9c <__eqsf2+0x24>
 8000bb2:	2001      	movs	r0, #1
 8000bb4:	2d00      	cmp	r5, #0
 8000bb6:	d1f1      	bne.n	8000b9c <__eqsf2+0x24>
 8000bb8:	e7eb      	b.n	8000b92 <__eqsf2+0x1a>
 8000bba:	2001      	movs	r0, #1
 8000bbc:	2e00      	cmp	r6, #0
 8000bbe:	d1ed      	bne.n	8000b9c <__eqsf2+0x24>
 8000bc0:	e7e9      	b.n	8000b96 <__eqsf2+0x1e>
 8000bc2:	2000      	movs	r0, #0
 8000bc4:	e7ea      	b.n	8000b9c <__eqsf2+0x24>
 8000bc6:	46c0      	nop			; (mov r8, r8)

08000bc8 <__gesf2>:
 8000bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bca:	0042      	lsls	r2, r0, #1
 8000bcc:	0246      	lsls	r6, r0, #9
 8000bce:	024d      	lsls	r5, r1, #9
 8000bd0:	004c      	lsls	r4, r1, #1
 8000bd2:	0fc3      	lsrs	r3, r0, #31
 8000bd4:	0a76      	lsrs	r6, r6, #9
 8000bd6:	0e12      	lsrs	r2, r2, #24
 8000bd8:	0a6d      	lsrs	r5, r5, #9
 8000bda:	0e24      	lsrs	r4, r4, #24
 8000bdc:	0fc8      	lsrs	r0, r1, #31
 8000bde:	2aff      	cmp	r2, #255	; 0xff
 8000be0:	d01f      	beq.n	8000c22 <__gesf2+0x5a>
 8000be2:	2cff      	cmp	r4, #255	; 0xff
 8000be4:	d010      	beq.n	8000c08 <__gesf2+0x40>
 8000be6:	2a00      	cmp	r2, #0
 8000be8:	d11f      	bne.n	8000c2a <__gesf2+0x62>
 8000bea:	4271      	negs	r1, r6
 8000bec:	4171      	adcs	r1, r6
 8000bee:	2c00      	cmp	r4, #0
 8000bf0:	d101      	bne.n	8000bf6 <__gesf2+0x2e>
 8000bf2:	2d00      	cmp	r5, #0
 8000bf4:	d01e      	beq.n	8000c34 <__gesf2+0x6c>
 8000bf6:	2900      	cmp	r1, #0
 8000bf8:	d10e      	bne.n	8000c18 <__gesf2+0x50>
 8000bfa:	4283      	cmp	r3, r0
 8000bfc:	d01e      	beq.n	8000c3c <__gesf2+0x74>
 8000bfe:	2102      	movs	r1, #2
 8000c00:	1e58      	subs	r0, r3, #1
 8000c02:	4008      	ands	r0, r1
 8000c04:	3801      	subs	r0, #1
 8000c06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c08:	2d00      	cmp	r5, #0
 8000c0a:	d126      	bne.n	8000c5a <__gesf2+0x92>
 8000c0c:	2a00      	cmp	r2, #0
 8000c0e:	d1f4      	bne.n	8000bfa <__gesf2+0x32>
 8000c10:	4271      	negs	r1, r6
 8000c12:	4171      	adcs	r1, r6
 8000c14:	2900      	cmp	r1, #0
 8000c16:	d0f0      	beq.n	8000bfa <__gesf2+0x32>
 8000c18:	2800      	cmp	r0, #0
 8000c1a:	d1f4      	bne.n	8000c06 <__gesf2+0x3e>
 8000c1c:	2001      	movs	r0, #1
 8000c1e:	4240      	negs	r0, r0
 8000c20:	e7f1      	b.n	8000c06 <__gesf2+0x3e>
 8000c22:	2e00      	cmp	r6, #0
 8000c24:	d119      	bne.n	8000c5a <__gesf2+0x92>
 8000c26:	2cff      	cmp	r4, #255	; 0xff
 8000c28:	d0ee      	beq.n	8000c08 <__gesf2+0x40>
 8000c2a:	2c00      	cmp	r4, #0
 8000c2c:	d1e5      	bne.n	8000bfa <__gesf2+0x32>
 8000c2e:	2d00      	cmp	r5, #0
 8000c30:	d1e3      	bne.n	8000bfa <__gesf2+0x32>
 8000c32:	e7e4      	b.n	8000bfe <__gesf2+0x36>
 8000c34:	2000      	movs	r0, #0
 8000c36:	2e00      	cmp	r6, #0
 8000c38:	d0e5      	beq.n	8000c06 <__gesf2+0x3e>
 8000c3a:	e7e0      	b.n	8000bfe <__gesf2+0x36>
 8000c3c:	42a2      	cmp	r2, r4
 8000c3e:	dc05      	bgt.n	8000c4c <__gesf2+0x84>
 8000c40:	dbea      	blt.n	8000c18 <__gesf2+0x50>
 8000c42:	42ae      	cmp	r6, r5
 8000c44:	d802      	bhi.n	8000c4c <__gesf2+0x84>
 8000c46:	d3e7      	bcc.n	8000c18 <__gesf2+0x50>
 8000c48:	2000      	movs	r0, #0
 8000c4a:	e7dc      	b.n	8000c06 <__gesf2+0x3e>
 8000c4c:	4241      	negs	r1, r0
 8000c4e:	4141      	adcs	r1, r0
 8000c50:	4248      	negs	r0, r1
 8000c52:	2102      	movs	r1, #2
 8000c54:	4008      	ands	r0, r1
 8000c56:	3801      	subs	r0, #1
 8000c58:	e7d5      	b.n	8000c06 <__gesf2+0x3e>
 8000c5a:	2002      	movs	r0, #2
 8000c5c:	4240      	negs	r0, r0
 8000c5e:	e7d2      	b.n	8000c06 <__gesf2+0x3e>

08000c60 <__lesf2>:
 8000c60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c62:	0042      	lsls	r2, r0, #1
 8000c64:	0246      	lsls	r6, r0, #9
 8000c66:	024d      	lsls	r5, r1, #9
 8000c68:	004c      	lsls	r4, r1, #1
 8000c6a:	0fc3      	lsrs	r3, r0, #31
 8000c6c:	0a76      	lsrs	r6, r6, #9
 8000c6e:	0e12      	lsrs	r2, r2, #24
 8000c70:	0a6d      	lsrs	r5, r5, #9
 8000c72:	0e24      	lsrs	r4, r4, #24
 8000c74:	0fc8      	lsrs	r0, r1, #31
 8000c76:	2aff      	cmp	r2, #255	; 0xff
 8000c78:	d00d      	beq.n	8000c96 <__lesf2+0x36>
 8000c7a:	2cff      	cmp	r4, #255	; 0xff
 8000c7c:	d00f      	beq.n	8000c9e <__lesf2+0x3e>
 8000c7e:	2a00      	cmp	r2, #0
 8000c80:	d123      	bne.n	8000cca <__lesf2+0x6a>
 8000c82:	4271      	negs	r1, r6
 8000c84:	4171      	adcs	r1, r6
 8000c86:	2c00      	cmp	r4, #0
 8000c88:	d10f      	bne.n	8000caa <__lesf2+0x4a>
 8000c8a:	2d00      	cmp	r5, #0
 8000c8c:	d10d      	bne.n	8000caa <__lesf2+0x4a>
 8000c8e:	2000      	movs	r0, #0
 8000c90:	2e00      	cmp	r6, #0
 8000c92:	d014      	beq.n	8000cbe <__lesf2+0x5e>
 8000c94:	e00d      	b.n	8000cb2 <__lesf2+0x52>
 8000c96:	2e00      	cmp	r6, #0
 8000c98:	d110      	bne.n	8000cbc <__lesf2+0x5c>
 8000c9a:	2cff      	cmp	r4, #255	; 0xff
 8000c9c:	d115      	bne.n	8000cca <__lesf2+0x6a>
 8000c9e:	2d00      	cmp	r5, #0
 8000ca0:	d10c      	bne.n	8000cbc <__lesf2+0x5c>
 8000ca2:	2a00      	cmp	r2, #0
 8000ca4:	d103      	bne.n	8000cae <__lesf2+0x4e>
 8000ca6:	4271      	negs	r1, r6
 8000ca8:	4171      	adcs	r1, r6
 8000caa:	2900      	cmp	r1, #0
 8000cac:	d108      	bne.n	8000cc0 <__lesf2+0x60>
 8000cae:	4283      	cmp	r3, r0
 8000cb0:	d010      	beq.n	8000cd4 <__lesf2+0x74>
 8000cb2:	2102      	movs	r1, #2
 8000cb4:	1e58      	subs	r0, r3, #1
 8000cb6:	4008      	ands	r0, r1
 8000cb8:	3801      	subs	r0, #1
 8000cba:	e000      	b.n	8000cbe <__lesf2+0x5e>
 8000cbc:	2002      	movs	r0, #2
 8000cbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cc0:	2800      	cmp	r0, #0
 8000cc2:	d1fc      	bne.n	8000cbe <__lesf2+0x5e>
 8000cc4:	2001      	movs	r0, #1
 8000cc6:	4240      	negs	r0, r0
 8000cc8:	e7f9      	b.n	8000cbe <__lesf2+0x5e>
 8000cca:	2c00      	cmp	r4, #0
 8000ccc:	d1ef      	bne.n	8000cae <__lesf2+0x4e>
 8000cce:	2d00      	cmp	r5, #0
 8000cd0:	d1ed      	bne.n	8000cae <__lesf2+0x4e>
 8000cd2:	e7ee      	b.n	8000cb2 <__lesf2+0x52>
 8000cd4:	42a2      	cmp	r2, r4
 8000cd6:	dc05      	bgt.n	8000ce4 <__lesf2+0x84>
 8000cd8:	dbf2      	blt.n	8000cc0 <__lesf2+0x60>
 8000cda:	42ae      	cmp	r6, r5
 8000cdc:	d802      	bhi.n	8000ce4 <__lesf2+0x84>
 8000cde:	d3ef      	bcc.n	8000cc0 <__lesf2+0x60>
 8000ce0:	2000      	movs	r0, #0
 8000ce2:	e7ec      	b.n	8000cbe <__lesf2+0x5e>
 8000ce4:	4241      	negs	r1, r0
 8000ce6:	4141      	adcs	r1, r0
 8000ce8:	4248      	negs	r0, r1
 8000cea:	2102      	movs	r1, #2
 8000cec:	4008      	ands	r0, r1
 8000cee:	3801      	subs	r0, #1
 8000cf0:	e7e5      	b.n	8000cbe <__lesf2+0x5e>
 8000cf2:	46c0      	nop			; (mov r8, r8)

08000cf4 <__aeabi_fmul>:
 8000cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cf6:	4657      	mov	r7, sl
 8000cf8:	464e      	mov	r6, r9
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	46de      	mov	lr, fp
 8000cfe:	0244      	lsls	r4, r0, #9
 8000d00:	b5e0      	push	{r5, r6, r7, lr}
 8000d02:	0045      	lsls	r5, r0, #1
 8000d04:	1c0f      	adds	r7, r1, #0
 8000d06:	0a64      	lsrs	r4, r4, #9
 8000d08:	0e2d      	lsrs	r5, r5, #24
 8000d0a:	0fc6      	lsrs	r6, r0, #31
 8000d0c:	2d00      	cmp	r5, #0
 8000d0e:	d047      	beq.n	8000da0 <__aeabi_fmul+0xac>
 8000d10:	2dff      	cmp	r5, #255	; 0xff
 8000d12:	d04d      	beq.n	8000db0 <__aeabi_fmul+0xbc>
 8000d14:	2300      	movs	r3, #0
 8000d16:	2080      	movs	r0, #128	; 0x80
 8000d18:	469a      	mov	sl, r3
 8000d1a:	469b      	mov	fp, r3
 8000d1c:	00e4      	lsls	r4, r4, #3
 8000d1e:	04c0      	lsls	r0, r0, #19
 8000d20:	4304      	orrs	r4, r0
 8000d22:	3d7f      	subs	r5, #127	; 0x7f
 8000d24:	0278      	lsls	r0, r7, #9
 8000d26:	0a43      	lsrs	r3, r0, #9
 8000d28:	4699      	mov	r9, r3
 8000d2a:	007a      	lsls	r2, r7, #1
 8000d2c:	0ffb      	lsrs	r3, r7, #31
 8000d2e:	4698      	mov	r8, r3
 8000d30:	0e12      	lsrs	r2, r2, #24
 8000d32:	464b      	mov	r3, r9
 8000d34:	d044      	beq.n	8000dc0 <__aeabi_fmul+0xcc>
 8000d36:	2aff      	cmp	r2, #255	; 0xff
 8000d38:	d011      	beq.n	8000d5e <__aeabi_fmul+0x6a>
 8000d3a:	00d8      	lsls	r0, r3, #3
 8000d3c:	2380      	movs	r3, #128	; 0x80
 8000d3e:	04db      	lsls	r3, r3, #19
 8000d40:	4303      	orrs	r3, r0
 8000d42:	4699      	mov	r9, r3
 8000d44:	2000      	movs	r0, #0
 8000d46:	3a7f      	subs	r2, #127	; 0x7f
 8000d48:	18ad      	adds	r5, r5, r2
 8000d4a:	4647      	mov	r7, r8
 8000d4c:	4653      	mov	r3, sl
 8000d4e:	4077      	eors	r7, r6
 8000d50:	1c69      	adds	r1, r5, #1
 8000d52:	2b0f      	cmp	r3, #15
 8000d54:	d83f      	bhi.n	8000dd6 <__aeabi_fmul+0xe2>
 8000d56:	4a72      	ldr	r2, [pc, #456]	; (8000f20 <__aeabi_fmul+0x22c>)
 8000d58:	009b      	lsls	r3, r3, #2
 8000d5a:	58d3      	ldr	r3, [r2, r3]
 8000d5c:	469f      	mov	pc, r3
 8000d5e:	35ff      	adds	r5, #255	; 0xff
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d000      	beq.n	8000d66 <__aeabi_fmul+0x72>
 8000d64:	e079      	b.n	8000e5a <__aeabi_fmul+0x166>
 8000d66:	4652      	mov	r2, sl
 8000d68:	2302      	movs	r3, #2
 8000d6a:	431a      	orrs	r2, r3
 8000d6c:	4692      	mov	sl, r2
 8000d6e:	2002      	movs	r0, #2
 8000d70:	e7eb      	b.n	8000d4a <__aeabi_fmul+0x56>
 8000d72:	4647      	mov	r7, r8
 8000d74:	464c      	mov	r4, r9
 8000d76:	4683      	mov	fp, r0
 8000d78:	465b      	mov	r3, fp
 8000d7a:	2b02      	cmp	r3, #2
 8000d7c:	d028      	beq.n	8000dd0 <__aeabi_fmul+0xdc>
 8000d7e:	2b03      	cmp	r3, #3
 8000d80:	d100      	bne.n	8000d84 <__aeabi_fmul+0x90>
 8000d82:	e0c6      	b.n	8000f12 <__aeabi_fmul+0x21e>
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	d14f      	bne.n	8000e28 <__aeabi_fmul+0x134>
 8000d88:	2000      	movs	r0, #0
 8000d8a:	2400      	movs	r4, #0
 8000d8c:	05c0      	lsls	r0, r0, #23
 8000d8e:	07ff      	lsls	r7, r7, #31
 8000d90:	4320      	orrs	r0, r4
 8000d92:	4338      	orrs	r0, r7
 8000d94:	bcf0      	pop	{r4, r5, r6, r7}
 8000d96:	46bb      	mov	fp, r7
 8000d98:	46b2      	mov	sl, r6
 8000d9a:	46a9      	mov	r9, r5
 8000d9c:	46a0      	mov	r8, r4
 8000d9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000da0:	2c00      	cmp	r4, #0
 8000da2:	d171      	bne.n	8000e88 <__aeabi_fmul+0x194>
 8000da4:	2304      	movs	r3, #4
 8000da6:	469a      	mov	sl, r3
 8000da8:	3b03      	subs	r3, #3
 8000daa:	2500      	movs	r5, #0
 8000dac:	469b      	mov	fp, r3
 8000dae:	e7b9      	b.n	8000d24 <__aeabi_fmul+0x30>
 8000db0:	2c00      	cmp	r4, #0
 8000db2:	d163      	bne.n	8000e7c <__aeabi_fmul+0x188>
 8000db4:	2308      	movs	r3, #8
 8000db6:	469a      	mov	sl, r3
 8000db8:	3b06      	subs	r3, #6
 8000dba:	25ff      	movs	r5, #255	; 0xff
 8000dbc:	469b      	mov	fp, r3
 8000dbe:	e7b1      	b.n	8000d24 <__aeabi_fmul+0x30>
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d150      	bne.n	8000e66 <__aeabi_fmul+0x172>
 8000dc4:	4652      	mov	r2, sl
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	431a      	orrs	r2, r3
 8000dca:	4692      	mov	sl, r2
 8000dcc:	2001      	movs	r0, #1
 8000dce:	e7bc      	b.n	8000d4a <__aeabi_fmul+0x56>
 8000dd0:	20ff      	movs	r0, #255	; 0xff
 8000dd2:	2400      	movs	r4, #0
 8000dd4:	e7da      	b.n	8000d8c <__aeabi_fmul+0x98>
 8000dd6:	4648      	mov	r0, r9
 8000dd8:	0c26      	lsrs	r6, r4, #16
 8000dda:	0424      	lsls	r4, r4, #16
 8000ddc:	0c22      	lsrs	r2, r4, #16
 8000dde:	0404      	lsls	r4, r0, #16
 8000de0:	0c24      	lsrs	r4, r4, #16
 8000de2:	464b      	mov	r3, r9
 8000de4:	0020      	movs	r0, r4
 8000de6:	0c1b      	lsrs	r3, r3, #16
 8000de8:	4350      	muls	r0, r2
 8000dea:	4374      	muls	r4, r6
 8000dec:	435a      	muls	r2, r3
 8000dee:	435e      	muls	r6, r3
 8000df0:	1912      	adds	r2, r2, r4
 8000df2:	0c03      	lsrs	r3, r0, #16
 8000df4:	189b      	adds	r3, r3, r2
 8000df6:	429c      	cmp	r4, r3
 8000df8:	d903      	bls.n	8000e02 <__aeabi_fmul+0x10e>
 8000dfa:	2280      	movs	r2, #128	; 0x80
 8000dfc:	0252      	lsls	r2, r2, #9
 8000dfe:	4694      	mov	ip, r2
 8000e00:	4466      	add	r6, ip
 8000e02:	0400      	lsls	r0, r0, #16
 8000e04:	041a      	lsls	r2, r3, #16
 8000e06:	0c00      	lsrs	r0, r0, #16
 8000e08:	1812      	adds	r2, r2, r0
 8000e0a:	0194      	lsls	r4, r2, #6
 8000e0c:	1e60      	subs	r0, r4, #1
 8000e0e:	4184      	sbcs	r4, r0
 8000e10:	0c1b      	lsrs	r3, r3, #16
 8000e12:	0e92      	lsrs	r2, r2, #26
 8000e14:	199b      	adds	r3, r3, r6
 8000e16:	4314      	orrs	r4, r2
 8000e18:	019b      	lsls	r3, r3, #6
 8000e1a:	431c      	orrs	r4, r3
 8000e1c:	011b      	lsls	r3, r3, #4
 8000e1e:	d572      	bpl.n	8000f06 <__aeabi_fmul+0x212>
 8000e20:	2001      	movs	r0, #1
 8000e22:	0863      	lsrs	r3, r4, #1
 8000e24:	4004      	ands	r4, r0
 8000e26:	431c      	orrs	r4, r3
 8000e28:	0008      	movs	r0, r1
 8000e2a:	307f      	adds	r0, #127	; 0x7f
 8000e2c:	2800      	cmp	r0, #0
 8000e2e:	dd3c      	ble.n	8000eaa <__aeabi_fmul+0x1b6>
 8000e30:	0763      	lsls	r3, r4, #29
 8000e32:	d004      	beq.n	8000e3e <__aeabi_fmul+0x14a>
 8000e34:	230f      	movs	r3, #15
 8000e36:	4023      	ands	r3, r4
 8000e38:	2b04      	cmp	r3, #4
 8000e3a:	d000      	beq.n	8000e3e <__aeabi_fmul+0x14a>
 8000e3c:	3404      	adds	r4, #4
 8000e3e:	0123      	lsls	r3, r4, #4
 8000e40:	d503      	bpl.n	8000e4a <__aeabi_fmul+0x156>
 8000e42:	3180      	adds	r1, #128	; 0x80
 8000e44:	0008      	movs	r0, r1
 8000e46:	4b37      	ldr	r3, [pc, #220]	; (8000f24 <__aeabi_fmul+0x230>)
 8000e48:	401c      	ands	r4, r3
 8000e4a:	28fe      	cmp	r0, #254	; 0xfe
 8000e4c:	dcc0      	bgt.n	8000dd0 <__aeabi_fmul+0xdc>
 8000e4e:	01a4      	lsls	r4, r4, #6
 8000e50:	0a64      	lsrs	r4, r4, #9
 8000e52:	b2c0      	uxtb	r0, r0
 8000e54:	e79a      	b.n	8000d8c <__aeabi_fmul+0x98>
 8000e56:	0037      	movs	r7, r6
 8000e58:	e78e      	b.n	8000d78 <__aeabi_fmul+0x84>
 8000e5a:	4652      	mov	r2, sl
 8000e5c:	2303      	movs	r3, #3
 8000e5e:	431a      	orrs	r2, r3
 8000e60:	4692      	mov	sl, r2
 8000e62:	2003      	movs	r0, #3
 8000e64:	e771      	b.n	8000d4a <__aeabi_fmul+0x56>
 8000e66:	4648      	mov	r0, r9
 8000e68:	f002 f9b0 	bl	80031cc <__clzsi2>
 8000e6c:	464a      	mov	r2, r9
 8000e6e:	1f43      	subs	r3, r0, #5
 8000e70:	409a      	lsls	r2, r3
 8000e72:	1a2d      	subs	r5, r5, r0
 8000e74:	4691      	mov	r9, r2
 8000e76:	2000      	movs	r0, #0
 8000e78:	3d76      	subs	r5, #118	; 0x76
 8000e7a:	e766      	b.n	8000d4a <__aeabi_fmul+0x56>
 8000e7c:	230c      	movs	r3, #12
 8000e7e:	469a      	mov	sl, r3
 8000e80:	3b09      	subs	r3, #9
 8000e82:	25ff      	movs	r5, #255	; 0xff
 8000e84:	469b      	mov	fp, r3
 8000e86:	e74d      	b.n	8000d24 <__aeabi_fmul+0x30>
 8000e88:	0020      	movs	r0, r4
 8000e8a:	f002 f99f 	bl	80031cc <__clzsi2>
 8000e8e:	2576      	movs	r5, #118	; 0x76
 8000e90:	1f43      	subs	r3, r0, #5
 8000e92:	409c      	lsls	r4, r3
 8000e94:	2300      	movs	r3, #0
 8000e96:	426d      	negs	r5, r5
 8000e98:	469a      	mov	sl, r3
 8000e9a:	469b      	mov	fp, r3
 8000e9c:	1a2d      	subs	r5, r5, r0
 8000e9e:	e741      	b.n	8000d24 <__aeabi_fmul+0x30>
 8000ea0:	2480      	movs	r4, #128	; 0x80
 8000ea2:	2700      	movs	r7, #0
 8000ea4:	20ff      	movs	r0, #255	; 0xff
 8000ea6:	03e4      	lsls	r4, r4, #15
 8000ea8:	e770      	b.n	8000d8c <__aeabi_fmul+0x98>
 8000eaa:	2301      	movs	r3, #1
 8000eac:	1a1b      	subs	r3, r3, r0
 8000eae:	2b1b      	cmp	r3, #27
 8000eb0:	dd00      	ble.n	8000eb4 <__aeabi_fmul+0x1c0>
 8000eb2:	e769      	b.n	8000d88 <__aeabi_fmul+0x94>
 8000eb4:	319e      	adds	r1, #158	; 0x9e
 8000eb6:	0020      	movs	r0, r4
 8000eb8:	408c      	lsls	r4, r1
 8000eba:	40d8      	lsrs	r0, r3
 8000ebc:	1e63      	subs	r3, r4, #1
 8000ebe:	419c      	sbcs	r4, r3
 8000ec0:	4304      	orrs	r4, r0
 8000ec2:	0763      	lsls	r3, r4, #29
 8000ec4:	d004      	beq.n	8000ed0 <__aeabi_fmul+0x1dc>
 8000ec6:	230f      	movs	r3, #15
 8000ec8:	4023      	ands	r3, r4
 8000eca:	2b04      	cmp	r3, #4
 8000ecc:	d000      	beq.n	8000ed0 <__aeabi_fmul+0x1dc>
 8000ece:	3404      	adds	r4, #4
 8000ed0:	0163      	lsls	r3, r4, #5
 8000ed2:	d51a      	bpl.n	8000f0a <__aeabi_fmul+0x216>
 8000ed4:	2001      	movs	r0, #1
 8000ed6:	2400      	movs	r4, #0
 8000ed8:	e758      	b.n	8000d8c <__aeabi_fmul+0x98>
 8000eda:	2080      	movs	r0, #128	; 0x80
 8000edc:	03c0      	lsls	r0, r0, #15
 8000ede:	4204      	tst	r4, r0
 8000ee0:	d009      	beq.n	8000ef6 <__aeabi_fmul+0x202>
 8000ee2:	464b      	mov	r3, r9
 8000ee4:	4203      	tst	r3, r0
 8000ee6:	d106      	bne.n	8000ef6 <__aeabi_fmul+0x202>
 8000ee8:	464c      	mov	r4, r9
 8000eea:	4304      	orrs	r4, r0
 8000eec:	0264      	lsls	r4, r4, #9
 8000eee:	4647      	mov	r7, r8
 8000ef0:	20ff      	movs	r0, #255	; 0xff
 8000ef2:	0a64      	lsrs	r4, r4, #9
 8000ef4:	e74a      	b.n	8000d8c <__aeabi_fmul+0x98>
 8000ef6:	2080      	movs	r0, #128	; 0x80
 8000ef8:	03c0      	lsls	r0, r0, #15
 8000efa:	4304      	orrs	r4, r0
 8000efc:	0264      	lsls	r4, r4, #9
 8000efe:	0037      	movs	r7, r6
 8000f00:	20ff      	movs	r0, #255	; 0xff
 8000f02:	0a64      	lsrs	r4, r4, #9
 8000f04:	e742      	b.n	8000d8c <__aeabi_fmul+0x98>
 8000f06:	0029      	movs	r1, r5
 8000f08:	e78e      	b.n	8000e28 <__aeabi_fmul+0x134>
 8000f0a:	01a4      	lsls	r4, r4, #6
 8000f0c:	2000      	movs	r0, #0
 8000f0e:	0a64      	lsrs	r4, r4, #9
 8000f10:	e73c      	b.n	8000d8c <__aeabi_fmul+0x98>
 8000f12:	2080      	movs	r0, #128	; 0x80
 8000f14:	03c0      	lsls	r0, r0, #15
 8000f16:	4304      	orrs	r4, r0
 8000f18:	0264      	lsls	r4, r4, #9
 8000f1a:	20ff      	movs	r0, #255	; 0xff
 8000f1c:	0a64      	lsrs	r4, r4, #9
 8000f1e:	e735      	b.n	8000d8c <__aeabi_fmul+0x98>
 8000f20:	0800b4d8 	.word	0x0800b4d8
 8000f24:	f7ffffff 	.word	0xf7ffffff

08000f28 <__aeabi_fsub>:
 8000f28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f2a:	4646      	mov	r6, r8
 8000f2c:	46d6      	mov	lr, sl
 8000f2e:	464f      	mov	r7, r9
 8000f30:	0243      	lsls	r3, r0, #9
 8000f32:	0a5b      	lsrs	r3, r3, #9
 8000f34:	00da      	lsls	r2, r3, #3
 8000f36:	4694      	mov	ip, r2
 8000f38:	024a      	lsls	r2, r1, #9
 8000f3a:	b5c0      	push	{r6, r7, lr}
 8000f3c:	0044      	lsls	r4, r0, #1
 8000f3e:	0a56      	lsrs	r6, r2, #9
 8000f40:	1c05      	adds	r5, r0, #0
 8000f42:	46b0      	mov	r8, r6
 8000f44:	0e24      	lsrs	r4, r4, #24
 8000f46:	004e      	lsls	r6, r1, #1
 8000f48:	0992      	lsrs	r2, r2, #6
 8000f4a:	001f      	movs	r7, r3
 8000f4c:	0020      	movs	r0, r4
 8000f4e:	4692      	mov	sl, r2
 8000f50:	0fed      	lsrs	r5, r5, #31
 8000f52:	0e36      	lsrs	r6, r6, #24
 8000f54:	0fc9      	lsrs	r1, r1, #31
 8000f56:	2eff      	cmp	r6, #255	; 0xff
 8000f58:	d100      	bne.n	8000f5c <__aeabi_fsub+0x34>
 8000f5a:	e07f      	b.n	800105c <__aeabi_fsub+0x134>
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	4051      	eors	r1, r2
 8000f60:	428d      	cmp	r5, r1
 8000f62:	d051      	beq.n	8001008 <__aeabi_fsub+0xe0>
 8000f64:	1ba2      	subs	r2, r4, r6
 8000f66:	4691      	mov	r9, r2
 8000f68:	2a00      	cmp	r2, #0
 8000f6a:	dc00      	bgt.n	8000f6e <__aeabi_fsub+0x46>
 8000f6c:	e07e      	b.n	800106c <__aeabi_fsub+0x144>
 8000f6e:	2e00      	cmp	r6, #0
 8000f70:	d100      	bne.n	8000f74 <__aeabi_fsub+0x4c>
 8000f72:	e099      	b.n	80010a8 <__aeabi_fsub+0x180>
 8000f74:	2cff      	cmp	r4, #255	; 0xff
 8000f76:	d100      	bne.n	8000f7a <__aeabi_fsub+0x52>
 8000f78:	e08c      	b.n	8001094 <__aeabi_fsub+0x16c>
 8000f7a:	2380      	movs	r3, #128	; 0x80
 8000f7c:	4652      	mov	r2, sl
 8000f7e:	04db      	lsls	r3, r3, #19
 8000f80:	431a      	orrs	r2, r3
 8000f82:	4692      	mov	sl, r2
 8000f84:	464a      	mov	r2, r9
 8000f86:	2301      	movs	r3, #1
 8000f88:	2a1b      	cmp	r2, #27
 8000f8a:	dc08      	bgt.n	8000f9e <__aeabi_fsub+0x76>
 8000f8c:	4653      	mov	r3, sl
 8000f8e:	2120      	movs	r1, #32
 8000f90:	40d3      	lsrs	r3, r2
 8000f92:	1a89      	subs	r1, r1, r2
 8000f94:	4652      	mov	r2, sl
 8000f96:	408a      	lsls	r2, r1
 8000f98:	1e51      	subs	r1, r2, #1
 8000f9a:	418a      	sbcs	r2, r1
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	4662      	mov	r2, ip
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	015a      	lsls	r2, r3, #5
 8000fa4:	d400      	bmi.n	8000fa8 <__aeabi_fsub+0x80>
 8000fa6:	e0f3      	b.n	8001190 <__aeabi_fsub+0x268>
 8000fa8:	019b      	lsls	r3, r3, #6
 8000faa:	099e      	lsrs	r6, r3, #6
 8000fac:	0030      	movs	r0, r6
 8000fae:	f002 f90d 	bl	80031cc <__clzsi2>
 8000fb2:	3805      	subs	r0, #5
 8000fb4:	4086      	lsls	r6, r0
 8000fb6:	4284      	cmp	r4, r0
 8000fb8:	dd00      	ble.n	8000fbc <__aeabi_fsub+0x94>
 8000fba:	e0f7      	b.n	80011ac <__aeabi_fsub+0x284>
 8000fbc:	0032      	movs	r2, r6
 8000fbe:	1b04      	subs	r4, r0, r4
 8000fc0:	2020      	movs	r0, #32
 8000fc2:	3401      	adds	r4, #1
 8000fc4:	40e2      	lsrs	r2, r4
 8000fc6:	1b04      	subs	r4, r0, r4
 8000fc8:	40a6      	lsls	r6, r4
 8000fca:	0033      	movs	r3, r6
 8000fcc:	1e5e      	subs	r6, r3, #1
 8000fce:	41b3      	sbcs	r3, r6
 8000fd0:	2400      	movs	r4, #0
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	075a      	lsls	r2, r3, #29
 8000fd6:	d004      	beq.n	8000fe2 <__aeabi_fsub+0xba>
 8000fd8:	220f      	movs	r2, #15
 8000fda:	401a      	ands	r2, r3
 8000fdc:	2a04      	cmp	r2, #4
 8000fde:	d000      	beq.n	8000fe2 <__aeabi_fsub+0xba>
 8000fe0:	3304      	adds	r3, #4
 8000fe2:	015a      	lsls	r2, r3, #5
 8000fe4:	d400      	bmi.n	8000fe8 <__aeabi_fsub+0xc0>
 8000fe6:	e0d6      	b.n	8001196 <__aeabi_fsub+0x26e>
 8000fe8:	1c62      	adds	r2, r4, #1
 8000fea:	2cfe      	cmp	r4, #254	; 0xfe
 8000fec:	d100      	bne.n	8000ff0 <__aeabi_fsub+0xc8>
 8000fee:	e0da      	b.n	80011a6 <__aeabi_fsub+0x27e>
 8000ff0:	019b      	lsls	r3, r3, #6
 8000ff2:	0a5f      	lsrs	r7, r3, #9
 8000ff4:	b2d0      	uxtb	r0, r2
 8000ff6:	05c0      	lsls	r0, r0, #23
 8000ff8:	4338      	orrs	r0, r7
 8000ffa:	07ed      	lsls	r5, r5, #31
 8000ffc:	4328      	orrs	r0, r5
 8000ffe:	bce0      	pop	{r5, r6, r7}
 8001000:	46ba      	mov	sl, r7
 8001002:	46b1      	mov	r9, r6
 8001004:	46a8      	mov	r8, r5
 8001006:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001008:	1ba2      	subs	r2, r4, r6
 800100a:	4691      	mov	r9, r2
 800100c:	2a00      	cmp	r2, #0
 800100e:	dd63      	ble.n	80010d8 <__aeabi_fsub+0x1b0>
 8001010:	2e00      	cmp	r6, #0
 8001012:	d100      	bne.n	8001016 <__aeabi_fsub+0xee>
 8001014:	e099      	b.n	800114a <__aeabi_fsub+0x222>
 8001016:	2cff      	cmp	r4, #255	; 0xff
 8001018:	d03c      	beq.n	8001094 <__aeabi_fsub+0x16c>
 800101a:	2380      	movs	r3, #128	; 0x80
 800101c:	4652      	mov	r2, sl
 800101e:	04db      	lsls	r3, r3, #19
 8001020:	431a      	orrs	r2, r3
 8001022:	4692      	mov	sl, r2
 8001024:	464a      	mov	r2, r9
 8001026:	2301      	movs	r3, #1
 8001028:	2a1b      	cmp	r2, #27
 800102a:	dc08      	bgt.n	800103e <__aeabi_fsub+0x116>
 800102c:	4653      	mov	r3, sl
 800102e:	2120      	movs	r1, #32
 8001030:	40d3      	lsrs	r3, r2
 8001032:	1a89      	subs	r1, r1, r2
 8001034:	4652      	mov	r2, sl
 8001036:	408a      	lsls	r2, r1
 8001038:	1e51      	subs	r1, r2, #1
 800103a:	418a      	sbcs	r2, r1
 800103c:	4313      	orrs	r3, r2
 800103e:	4463      	add	r3, ip
 8001040:	015a      	lsls	r2, r3, #5
 8001042:	d400      	bmi.n	8001046 <__aeabi_fsub+0x11e>
 8001044:	e0a4      	b.n	8001190 <__aeabi_fsub+0x268>
 8001046:	3401      	adds	r4, #1
 8001048:	2cff      	cmp	r4, #255	; 0xff
 800104a:	d100      	bne.n	800104e <__aeabi_fsub+0x126>
 800104c:	e0ab      	b.n	80011a6 <__aeabi_fsub+0x27e>
 800104e:	2201      	movs	r2, #1
 8001050:	4997      	ldr	r1, [pc, #604]	; (80012b0 <__aeabi_fsub+0x388>)
 8001052:	401a      	ands	r2, r3
 8001054:	085b      	lsrs	r3, r3, #1
 8001056:	400b      	ands	r3, r1
 8001058:	4313      	orrs	r3, r2
 800105a:	e7bb      	b.n	8000fd4 <__aeabi_fsub+0xac>
 800105c:	2a00      	cmp	r2, #0
 800105e:	d032      	beq.n	80010c6 <__aeabi_fsub+0x19e>
 8001060:	428d      	cmp	r5, r1
 8001062:	d035      	beq.n	80010d0 <__aeabi_fsub+0x1a8>
 8001064:	22ff      	movs	r2, #255	; 0xff
 8001066:	4252      	negs	r2, r2
 8001068:	4691      	mov	r9, r2
 800106a:	44a1      	add	r9, r4
 800106c:	464a      	mov	r2, r9
 800106e:	2a00      	cmp	r2, #0
 8001070:	d051      	beq.n	8001116 <__aeabi_fsub+0x1ee>
 8001072:	1b30      	subs	r0, r6, r4
 8001074:	2c00      	cmp	r4, #0
 8001076:	d000      	beq.n	800107a <__aeabi_fsub+0x152>
 8001078:	e09c      	b.n	80011b4 <__aeabi_fsub+0x28c>
 800107a:	4663      	mov	r3, ip
 800107c:	2b00      	cmp	r3, #0
 800107e:	d100      	bne.n	8001082 <__aeabi_fsub+0x15a>
 8001080:	e0df      	b.n	8001242 <__aeabi_fsub+0x31a>
 8001082:	3801      	subs	r0, #1
 8001084:	2800      	cmp	r0, #0
 8001086:	d100      	bne.n	800108a <__aeabi_fsub+0x162>
 8001088:	e0f7      	b.n	800127a <__aeabi_fsub+0x352>
 800108a:	2eff      	cmp	r6, #255	; 0xff
 800108c:	d000      	beq.n	8001090 <__aeabi_fsub+0x168>
 800108e:	e099      	b.n	80011c4 <__aeabi_fsub+0x29c>
 8001090:	000d      	movs	r5, r1
 8001092:	4643      	mov	r3, r8
 8001094:	2b00      	cmp	r3, #0
 8001096:	d100      	bne.n	800109a <__aeabi_fsub+0x172>
 8001098:	e085      	b.n	80011a6 <__aeabi_fsub+0x27e>
 800109a:	2780      	movs	r7, #128	; 0x80
 800109c:	03ff      	lsls	r7, r7, #15
 800109e:	431f      	orrs	r7, r3
 80010a0:	027f      	lsls	r7, r7, #9
 80010a2:	20ff      	movs	r0, #255	; 0xff
 80010a4:	0a7f      	lsrs	r7, r7, #9
 80010a6:	e7a6      	b.n	8000ff6 <__aeabi_fsub+0xce>
 80010a8:	4652      	mov	r2, sl
 80010aa:	2a00      	cmp	r2, #0
 80010ac:	d074      	beq.n	8001198 <__aeabi_fsub+0x270>
 80010ae:	2201      	movs	r2, #1
 80010b0:	4252      	negs	r2, r2
 80010b2:	4690      	mov	r8, r2
 80010b4:	44c1      	add	r9, r8
 80010b6:	464a      	mov	r2, r9
 80010b8:	2a00      	cmp	r2, #0
 80010ba:	d100      	bne.n	80010be <__aeabi_fsub+0x196>
 80010bc:	e0c8      	b.n	8001250 <__aeabi_fsub+0x328>
 80010be:	2cff      	cmp	r4, #255	; 0xff
 80010c0:	d000      	beq.n	80010c4 <__aeabi_fsub+0x19c>
 80010c2:	e75f      	b.n	8000f84 <__aeabi_fsub+0x5c>
 80010c4:	e7e6      	b.n	8001094 <__aeabi_fsub+0x16c>
 80010c6:	2201      	movs	r2, #1
 80010c8:	4051      	eors	r1, r2
 80010ca:	42a9      	cmp	r1, r5
 80010cc:	d000      	beq.n	80010d0 <__aeabi_fsub+0x1a8>
 80010ce:	e749      	b.n	8000f64 <__aeabi_fsub+0x3c>
 80010d0:	22ff      	movs	r2, #255	; 0xff
 80010d2:	4252      	negs	r2, r2
 80010d4:	4691      	mov	r9, r2
 80010d6:	44a1      	add	r9, r4
 80010d8:	464a      	mov	r2, r9
 80010da:	2a00      	cmp	r2, #0
 80010dc:	d043      	beq.n	8001166 <__aeabi_fsub+0x23e>
 80010de:	1b31      	subs	r1, r6, r4
 80010e0:	2c00      	cmp	r4, #0
 80010e2:	d100      	bne.n	80010e6 <__aeabi_fsub+0x1be>
 80010e4:	e08c      	b.n	8001200 <__aeabi_fsub+0x2d8>
 80010e6:	2eff      	cmp	r6, #255	; 0xff
 80010e8:	d100      	bne.n	80010ec <__aeabi_fsub+0x1c4>
 80010ea:	e092      	b.n	8001212 <__aeabi_fsub+0x2ea>
 80010ec:	2380      	movs	r3, #128	; 0x80
 80010ee:	4662      	mov	r2, ip
 80010f0:	04db      	lsls	r3, r3, #19
 80010f2:	431a      	orrs	r2, r3
 80010f4:	4694      	mov	ip, r2
 80010f6:	2301      	movs	r3, #1
 80010f8:	291b      	cmp	r1, #27
 80010fa:	dc09      	bgt.n	8001110 <__aeabi_fsub+0x1e8>
 80010fc:	2020      	movs	r0, #32
 80010fe:	4663      	mov	r3, ip
 8001100:	4662      	mov	r2, ip
 8001102:	40cb      	lsrs	r3, r1
 8001104:	1a41      	subs	r1, r0, r1
 8001106:	408a      	lsls	r2, r1
 8001108:	0011      	movs	r1, r2
 800110a:	1e48      	subs	r0, r1, #1
 800110c:	4181      	sbcs	r1, r0
 800110e:	430b      	orrs	r3, r1
 8001110:	0034      	movs	r4, r6
 8001112:	4453      	add	r3, sl
 8001114:	e794      	b.n	8001040 <__aeabi_fsub+0x118>
 8001116:	22fe      	movs	r2, #254	; 0xfe
 8001118:	1c66      	adds	r6, r4, #1
 800111a:	4232      	tst	r2, r6
 800111c:	d164      	bne.n	80011e8 <__aeabi_fsub+0x2c0>
 800111e:	2c00      	cmp	r4, #0
 8001120:	d000      	beq.n	8001124 <__aeabi_fsub+0x1fc>
 8001122:	e082      	b.n	800122a <__aeabi_fsub+0x302>
 8001124:	4663      	mov	r3, ip
 8001126:	2b00      	cmp	r3, #0
 8001128:	d100      	bne.n	800112c <__aeabi_fsub+0x204>
 800112a:	e0ab      	b.n	8001284 <__aeabi_fsub+0x35c>
 800112c:	4653      	mov	r3, sl
 800112e:	2b00      	cmp	r3, #0
 8001130:	d100      	bne.n	8001134 <__aeabi_fsub+0x20c>
 8001132:	e760      	b.n	8000ff6 <__aeabi_fsub+0xce>
 8001134:	4663      	mov	r3, ip
 8001136:	4652      	mov	r2, sl
 8001138:	1a9b      	subs	r3, r3, r2
 800113a:	015a      	lsls	r2, r3, #5
 800113c:	d400      	bmi.n	8001140 <__aeabi_fsub+0x218>
 800113e:	e0aa      	b.n	8001296 <__aeabi_fsub+0x36e>
 8001140:	4663      	mov	r3, ip
 8001142:	4652      	mov	r2, sl
 8001144:	000d      	movs	r5, r1
 8001146:	1ad3      	subs	r3, r2, r3
 8001148:	e744      	b.n	8000fd4 <__aeabi_fsub+0xac>
 800114a:	4652      	mov	r2, sl
 800114c:	2a00      	cmp	r2, #0
 800114e:	d023      	beq.n	8001198 <__aeabi_fsub+0x270>
 8001150:	2201      	movs	r2, #1
 8001152:	4252      	negs	r2, r2
 8001154:	4690      	mov	r8, r2
 8001156:	44c1      	add	r9, r8
 8001158:	464a      	mov	r2, r9
 800115a:	2a00      	cmp	r2, #0
 800115c:	d075      	beq.n	800124a <__aeabi_fsub+0x322>
 800115e:	2cff      	cmp	r4, #255	; 0xff
 8001160:	d000      	beq.n	8001164 <__aeabi_fsub+0x23c>
 8001162:	e75f      	b.n	8001024 <__aeabi_fsub+0xfc>
 8001164:	e796      	b.n	8001094 <__aeabi_fsub+0x16c>
 8001166:	26fe      	movs	r6, #254	; 0xfe
 8001168:	3401      	adds	r4, #1
 800116a:	4226      	tst	r6, r4
 800116c:	d153      	bne.n	8001216 <__aeabi_fsub+0x2ee>
 800116e:	2800      	cmp	r0, #0
 8001170:	d172      	bne.n	8001258 <__aeabi_fsub+0x330>
 8001172:	4663      	mov	r3, ip
 8001174:	2b00      	cmp	r3, #0
 8001176:	d100      	bne.n	800117a <__aeabi_fsub+0x252>
 8001178:	e093      	b.n	80012a2 <__aeabi_fsub+0x37a>
 800117a:	4653      	mov	r3, sl
 800117c:	2b00      	cmp	r3, #0
 800117e:	d100      	bne.n	8001182 <__aeabi_fsub+0x25a>
 8001180:	e739      	b.n	8000ff6 <__aeabi_fsub+0xce>
 8001182:	4463      	add	r3, ip
 8001184:	2400      	movs	r4, #0
 8001186:	015a      	lsls	r2, r3, #5
 8001188:	d502      	bpl.n	8001190 <__aeabi_fsub+0x268>
 800118a:	4a4a      	ldr	r2, [pc, #296]	; (80012b4 <__aeabi_fsub+0x38c>)
 800118c:	3401      	adds	r4, #1
 800118e:	4013      	ands	r3, r2
 8001190:	075a      	lsls	r2, r3, #29
 8001192:	d000      	beq.n	8001196 <__aeabi_fsub+0x26e>
 8001194:	e720      	b.n	8000fd8 <__aeabi_fsub+0xb0>
 8001196:	08db      	lsrs	r3, r3, #3
 8001198:	2cff      	cmp	r4, #255	; 0xff
 800119a:	d100      	bne.n	800119e <__aeabi_fsub+0x276>
 800119c:	e77a      	b.n	8001094 <__aeabi_fsub+0x16c>
 800119e:	025b      	lsls	r3, r3, #9
 80011a0:	0a5f      	lsrs	r7, r3, #9
 80011a2:	b2e0      	uxtb	r0, r4
 80011a4:	e727      	b.n	8000ff6 <__aeabi_fsub+0xce>
 80011a6:	20ff      	movs	r0, #255	; 0xff
 80011a8:	2700      	movs	r7, #0
 80011aa:	e724      	b.n	8000ff6 <__aeabi_fsub+0xce>
 80011ac:	4b41      	ldr	r3, [pc, #260]	; (80012b4 <__aeabi_fsub+0x38c>)
 80011ae:	1a24      	subs	r4, r4, r0
 80011b0:	4033      	ands	r3, r6
 80011b2:	e70f      	b.n	8000fd4 <__aeabi_fsub+0xac>
 80011b4:	2eff      	cmp	r6, #255	; 0xff
 80011b6:	d100      	bne.n	80011ba <__aeabi_fsub+0x292>
 80011b8:	e76a      	b.n	8001090 <__aeabi_fsub+0x168>
 80011ba:	2380      	movs	r3, #128	; 0x80
 80011bc:	4662      	mov	r2, ip
 80011be:	04db      	lsls	r3, r3, #19
 80011c0:	431a      	orrs	r2, r3
 80011c2:	4694      	mov	ip, r2
 80011c4:	2301      	movs	r3, #1
 80011c6:	281b      	cmp	r0, #27
 80011c8:	dc09      	bgt.n	80011de <__aeabi_fsub+0x2b6>
 80011ca:	2420      	movs	r4, #32
 80011cc:	4663      	mov	r3, ip
 80011ce:	4662      	mov	r2, ip
 80011d0:	40c3      	lsrs	r3, r0
 80011d2:	1a20      	subs	r0, r4, r0
 80011d4:	4082      	lsls	r2, r0
 80011d6:	0010      	movs	r0, r2
 80011d8:	1e44      	subs	r4, r0, #1
 80011da:	41a0      	sbcs	r0, r4
 80011dc:	4303      	orrs	r3, r0
 80011de:	4652      	mov	r2, sl
 80011e0:	000d      	movs	r5, r1
 80011e2:	0034      	movs	r4, r6
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	e6dc      	b.n	8000fa2 <__aeabi_fsub+0x7a>
 80011e8:	4663      	mov	r3, ip
 80011ea:	4652      	mov	r2, sl
 80011ec:	1a9e      	subs	r6, r3, r2
 80011ee:	0173      	lsls	r3, r6, #5
 80011f0:	d417      	bmi.n	8001222 <__aeabi_fsub+0x2fa>
 80011f2:	2e00      	cmp	r6, #0
 80011f4:	d000      	beq.n	80011f8 <__aeabi_fsub+0x2d0>
 80011f6:	e6d9      	b.n	8000fac <__aeabi_fsub+0x84>
 80011f8:	2500      	movs	r5, #0
 80011fa:	2000      	movs	r0, #0
 80011fc:	2700      	movs	r7, #0
 80011fe:	e6fa      	b.n	8000ff6 <__aeabi_fsub+0xce>
 8001200:	4663      	mov	r3, ip
 8001202:	2b00      	cmp	r3, #0
 8001204:	d044      	beq.n	8001290 <__aeabi_fsub+0x368>
 8001206:	3901      	subs	r1, #1
 8001208:	2900      	cmp	r1, #0
 800120a:	d04c      	beq.n	80012a6 <__aeabi_fsub+0x37e>
 800120c:	2eff      	cmp	r6, #255	; 0xff
 800120e:	d000      	beq.n	8001212 <__aeabi_fsub+0x2ea>
 8001210:	e771      	b.n	80010f6 <__aeabi_fsub+0x1ce>
 8001212:	4643      	mov	r3, r8
 8001214:	e73e      	b.n	8001094 <__aeabi_fsub+0x16c>
 8001216:	2cff      	cmp	r4, #255	; 0xff
 8001218:	d0c5      	beq.n	80011a6 <__aeabi_fsub+0x27e>
 800121a:	4652      	mov	r2, sl
 800121c:	4462      	add	r2, ip
 800121e:	0853      	lsrs	r3, r2, #1
 8001220:	e7b6      	b.n	8001190 <__aeabi_fsub+0x268>
 8001222:	4663      	mov	r3, ip
 8001224:	000d      	movs	r5, r1
 8001226:	1ad6      	subs	r6, r2, r3
 8001228:	e6c0      	b.n	8000fac <__aeabi_fsub+0x84>
 800122a:	4662      	mov	r2, ip
 800122c:	2a00      	cmp	r2, #0
 800122e:	d116      	bne.n	800125e <__aeabi_fsub+0x336>
 8001230:	4653      	mov	r3, sl
 8001232:	2b00      	cmp	r3, #0
 8001234:	d000      	beq.n	8001238 <__aeabi_fsub+0x310>
 8001236:	e72b      	b.n	8001090 <__aeabi_fsub+0x168>
 8001238:	2780      	movs	r7, #128	; 0x80
 800123a:	2500      	movs	r5, #0
 800123c:	20ff      	movs	r0, #255	; 0xff
 800123e:	03ff      	lsls	r7, r7, #15
 8001240:	e6d9      	b.n	8000ff6 <__aeabi_fsub+0xce>
 8001242:	000d      	movs	r5, r1
 8001244:	4643      	mov	r3, r8
 8001246:	0034      	movs	r4, r6
 8001248:	e7a6      	b.n	8001198 <__aeabi_fsub+0x270>
 800124a:	4653      	mov	r3, sl
 800124c:	4463      	add	r3, ip
 800124e:	e6f7      	b.n	8001040 <__aeabi_fsub+0x118>
 8001250:	4663      	mov	r3, ip
 8001252:	4652      	mov	r2, sl
 8001254:	1a9b      	subs	r3, r3, r2
 8001256:	e6a4      	b.n	8000fa2 <__aeabi_fsub+0x7a>
 8001258:	4662      	mov	r2, ip
 800125a:	2a00      	cmp	r2, #0
 800125c:	d0d9      	beq.n	8001212 <__aeabi_fsub+0x2ea>
 800125e:	4652      	mov	r2, sl
 8001260:	2a00      	cmp	r2, #0
 8001262:	d100      	bne.n	8001266 <__aeabi_fsub+0x33e>
 8001264:	e716      	b.n	8001094 <__aeabi_fsub+0x16c>
 8001266:	2280      	movs	r2, #128	; 0x80
 8001268:	03d2      	lsls	r2, r2, #15
 800126a:	4213      	tst	r3, r2
 800126c:	d100      	bne.n	8001270 <__aeabi_fsub+0x348>
 800126e:	e711      	b.n	8001094 <__aeabi_fsub+0x16c>
 8001270:	4640      	mov	r0, r8
 8001272:	4210      	tst	r0, r2
 8001274:	d000      	beq.n	8001278 <__aeabi_fsub+0x350>
 8001276:	e70d      	b.n	8001094 <__aeabi_fsub+0x16c>
 8001278:	e70a      	b.n	8001090 <__aeabi_fsub+0x168>
 800127a:	4652      	mov	r2, sl
 800127c:	000d      	movs	r5, r1
 800127e:	0034      	movs	r4, r6
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	e68e      	b.n	8000fa2 <__aeabi_fsub+0x7a>
 8001284:	4653      	mov	r3, sl
 8001286:	2b00      	cmp	r3, #0
 8001288:	d008      	beq.n	800129c <__aeabi_fsub+0x374>
 800128a:	000d      	movs	r5, r1
 800128c:	4647      	mov	r7, r8
 800128e:	e6b2      	b.n	8000ff6 <__aeabi_fsub+0xce>
 8001290:	4643      	mov	r3, r8
 8001292:	0034      	movs	r4, r6
 8001294:	e780      	b.n	8001198 <__aeabi_fsub+0x270>
 8001296:	2b00      	cmp	r3, #0
 8001298:	d000      	beq.n	800129c <__aeabi_fsub+0x374>
 800129a:	e779      	b.n	8001190 <__aeabi_fsub+0x268>
 800129c:	2500      	movs	r5, #0
 800129e:	2700      	movs	r7, #0
 80012a0:	e6a9      	b.n	8000ff6 <__aeabi_fsub+0xce>
 80012a2:	4647      	mov	r7, r8
 80012a4:	e6a7      	b.n	8000ff6 <__aeabi_fsub+0xce>
 80012a6:	4653      	mov	r3, sl
 80012a8:	0034      	movs	r4, r6
 80012aa:	4463      	add	r3, ip
 80012ac:	e6c8      	b.n	8001040 <__aeabi_fsub+0x118>
 80012ae:	46c0      	nop			; (mov r8, r8)
 80012b0:	7dffffff 	.word	0x7dffffff
 80012b4:	fbffffff 	.word	0xfbffffff

080012b8 <__aeabi_f2iz>:
 80012b8:	0241      	lsls	r1, r0, #9
 80012ba:	0042      	lsls	r2, r0, #1
 80012bc:	0fc3      	lsrs	r3, r0, #31
 80012be:	0a49      	lsrs	r1, r1, #9
 80012c0:	2000      	movs	r0, #0
 80012c2:	0e12      	lsrs	r2, r2, #24
 80012c4:	2a7e      	cmp	r2, #126	; 0x7e
 80012c6:	d903      	bls.n	80012d0 <__aeabi_f2iz+0x18>
 80012c8:	2a9d      	cmp	r2, #157	; 0x9d
 80012ca:	d902      	bls.n	80012d2 <__aeabi_f2iz+0x1a>
 80012cc:	4a09      	ldr	r2, [pc, #36]	; (80012f4 <__aeabi_f2iz+0x3c>)
 80012ce:	1898      	adds	r0, r3, r2
 80012d0:	4770      	bx	lr
 80012d2:	2080      	movs	r0, #128	; 0x80
 80012d4:	0400      	lsls	r0, r0, #16
 80012d6:	4301      	orrs	r1, r0
 80012d8:	2a95      	cmp	r2, #149	; 0x95
 80012da:	dc07      	bgt.n	80012ec <__aeabi_f2iz+0x34>
 80012dc:	2096      	movs	r0, #150	; 0x96
 80012de:	1a82      	subs	r2, r0, r2
 80012e0:	40d1      	lsrs	r1, r2
 80012e2:	4248      	negs	r0, r1
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d1f3      	bne.n	80012d0 <__aeabi_f2iz+0x18>
 80012e8:	0008      	movs	r0, r1
 80012ea:	e7f1      	b.n	80012d0 <__aeabi_f2iz+0x18>
 80012ec:	3a96      	subs	r2, #150	; 0x96
 80012ee:	4091      	lsls	r1, r2
 80012f0:	e7f7      	b.n	80012e2 <__aeabi_f2iz+0x2a>
 80012f2:	46c0      	nop			; (mov r8, r8)
 80012f4:	7fffffff 	.word	0x7fffffff

080012f8 <__aeabi_i2f>:
 80012f8:	b570      	push	{r4, r5, r6, lr}
 80012fa:	2800      	cmp	r0, #0
 80012fc:	d013      	beq.n	8001326 <__aeabi_i2f+0x2e>
 80012fe:	17c3      	asrs	r3, r0, #31
 8001300:	18c5      	adds	r5, r0, r3
 8001302:	405d      	eors	r5, r3
 8001304:	0fc4      	lsrs	r4, r0, #31
 8001306:	0028      	movs	r0, r5
 8001308:	f001 ff60 	bl	80031cc <__clzsi2>
 800130c:	239e      	movs	r3, #158	; 0x9e
 800130e:	0001      	movs	r1, r0
 8001310:	1a1b      	subs	r3, r3, r0
 8001312:	2b96      	cmp	r3, #150	; 0x96
 8001314:	dc0f      	bgt.n	8001336 <__aeabi_i2f+0x3e>
 8001316:	2808      	cmp	r0, #8
 8001318:	dd01      	ble.n	800131e <__aeabi_i2f+0x26>
 800131a:	3908      	subs	r1, #8
 800131c:	408d      	lsls	r5, r1
 800131e:	026d      	lsls	r5, r5, #9
 8001320:	0a6d      	lsrs	r5, r5, #9
 8001322:	b2d8      	uxtb	r0, r3
 8001324:	e002      	b.n	800132c <__aeabi_i2f+0x34>
 8001326:	2400      	movs	r4, #0
 8001328:	2000      	movs	r0, #0
 800132a:	2500      	movs	r5, #0
 800132c:	05c0      	lsls	r0, r0, #23
 800132e:	4328      	orrs	r0, r5
 8001330:	07e4      	lsls	r4, r4, #31
 8001332:	4320      	orrs	r0, r4
 8001334:	bd70      	pop	{r4, r5, r6, pc}
 8001336:	2b99      	cmp	r3, #153	; 0x99
 8001338:	dd0b      	ble.n	8001352 <__aeabi_i2f+0x5a>
 800133a:	2205      	movs	r2, #5
 800133c:	002e      	movs	r6, r5
 800133e:	1a12      	subs	r2, r2, r0
 8001340:	40d6      	lsrs	r6, r2
 8001342:	0002      	movs	r2, r0
 8001344:	321b      	adds	r2, #27
 8001346:	4095      	lsls	r5, r2
 8001348:	0028      	movs	r0, r5
 800134a:	1e45      	subs	r5, r0, #1
 800134c:	41a8      	sbcs	r0, r5
 800134e:	0035      	movs	r5, r6
 8001350:	4305      	orrs	r5, r0
 8001352:	2905      	cmp	r1, #5
 8001354:	dd01      	ble.n	800135a <__aeabi_i2f+0x62>
 8001356:	1f4a      	subs	r2, r1, #5
 8001358:	4095      	lsls	r5, r2
 800135a:	002a      	movs	r2, r5
 800135c:	4e08      	ldr	r6, [pc, #32]	; (8001380 <__aeabi_i2f+0x88>)
 800135e:	4032      	ands	r2, r6
 8001360:	0768      	lsls	r0, r5, #29
 8001362:	d009      	beq.n	8001378 <__aeabi_i2f+0x80>
 8001364:	200f      	movs	r0, #15
 8001366:	4028      	ands	r0, r5
 8001368:	2804      	cmp	r0, #4
 800136a:	d005      	beq.n	8001378 <__aeabi_i2f+0x80>
 800136c:	3204      	adds	r2, #4
 800136e:	0150      	lsls	r0, r2, #5
 8001370:	d502      	bpl.n	8001378 <__aeabi_i2f+0x80>
 8001372:	239f      	movs	r3, #159	; 0x9f
 8001374:	4032      	ands	r2, r6
 8001376:	1a5b      	subs	r3, r3, r1
 8001378:	0192      	lsls	r2, r2, #6
 800137a:	0a55      	lsrs	r5, r2, #9
 800137c:	b2d8      	uxtb	r0, r3
 800137e:	e7d5      	b.n	800132c <__aeabi_i2f+0x34>
 8001380:	fbffffff 	.word	0xfbffffff

08001384 <__aeabi_ui2f>:
 8001384:	b570      	push	{r4, r5, r6, lr}
 8001386:	1e05      	subs	r5, r0, #0
 8001388:	d00e      	beq.n	80013a8 <__aeabi_ui2f+0x24>
 800138a:	f001 ff1f 	bl	80031cc <__clzsi2>
 800138e:	239e      	movs	r3, #158	; 0x9e
 8001390:	0004      	movs	r4, r0
 8001392:	1a1b      	subs	r3, r3, r0
 8001394:	2b96      	cmp	r3, #150	; 0x96
 8001396:	dc0c      	bgt.n	80013b2 <__aeabi_ui2f+0x2e>
 8001398:	2808      	cmp	r0, #8
 800139a:	dd01      	ble.n	80013a0 <__aeabi_ui2f+0x1c>
 800139c:	3c08      	subs	r4, #8
 800139e:	40a5      	lsls	r5, r4
 80013a0:	026d      	lsls	r5, r5, #9
 80013a2:	0a6d      	lsrs	r5, r5, #9
 80013a4:	b2d8      	uxtb	r0, r3
 80013a6:	e001      	b.n	80013ac <__aeabi_ui2f+0x28>
 80013a8:	2000      	movs	r0, #0
 80013aa:	2500      	movs	r5, #0
 80013ac:	05c0      	lsls	r0, r0, #23
 80013ae:	4328      	orrs	r0, r5
 80013b0:	bd70      	pop	{r4, r5, r6, pc}
 80013b2:	2b99      	cmp	r3, #153	; 0x99
 80013b4:	dd09      	ble.n	80013ca <__aeabi_ui2f+0x46>
 80013b6:	0002      	movs	r2, r0
 80013b8:	0029      	movs	r1, r5
 80013ba:	321b      	adds	r2, #27
 80013bc:	4091      	lsls	r1, r2
 80013be:	1e4a      	subs	r2, r1, #1
 80013c0:	4191      	sbcs	r1, r2
 80013c2:	2205      	movs	r2, #5
 80013c4:	1a12      	subs	r2, r2, r0
 80013c6:	40d5      	lsrs	r5, r2
 80013c8:	430d      	orrs	r5, r1
 80013ca:	2c05      	cmp	r4, #5
 80013cc:	dd01      	ble.n	80013d2 <__aeabi_ui2f+0x4e>
 80013ce:	1f62      	subs	r2, r4, #5
 80013d0:	4095      	lsls	r5, r2
 80013d2:	0029      	movs	r1, r5
 80013d4:	4e08      	ldr	r6, [pc, #32]	; (80013f8 <__aeabi_ui2f+0x74>)
 80013d6:	4031      	ands	r1, r6
 80013d8:	076a      	lsls	r2, r5, #29
 80013da:	d009      	beq.n	80013f0 <__aeabi_ui2f+0x6c>
 80013dc:	200f      	movs	r0, #15
 80013de:	4028      	ands	r0, r5
 80013e0:	2804      	cmp	r0, #4
 80013e2:	d005      	beq.n	80013f0 <__aeabi_ui2f+0x6c>
 80013e4:	3104      	adds	r1, #4
 80013e6:	014a      	lsls	r2, r1, #5
 80013e8:	d502      	bpl.n	80013f0 <__aeabi_ui2f+0x6c>
 80013ea:	239f      	movs	r3, #159	; 0x9f
 80013ec:	4031      	ands	r1, r6
 80013ee:	1b1b      	subs	r3, r3, r4
 80013f0:	0189      	lsls	r1, r1, #6
 80013f2:	0a4d      	lsrs	r5, r1, #9
 80013f4:	b2d8      	uxtb	r0, r3
 80013f6:	e7d9      	b.n	80013ac <__aeabi_ui2f+0x28>
 80013f8:	fbffffff 	.word	0xfbffffff

080013fc <__aeabi_dadd>:
 80013fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013fe:	464f      	mov	r7, r9
 8001400:	46d6      	mov	lr, sl
 8001402:	4646      	mov	r6, r8
 8001404:	000d      	movs	r5, r1
 8001406:	0001      	movs	r1, r0
 8001408:	0018      	movs	r0, r3
 800140a:	b5c0      	push	{r6, r7, lr}
 800140c:	0017      	movs	r7, r2
 800140e:	032b      	lsls	r3, r5, #12
 8001410:	0a5a      	lsrs	r2, r3, #9
 8001412:	0f4b      	lsrs	r3, r1, #29
 8001414:	4313      	orrs	r3, r2
 8001416:	00ca      	lsls	r2, r1, #3
 8001418:	4691      	mov	r9, r2
 800141a:	0302      	lsls	r2, r0, #12
 800141c:	006e      	lsls	r6, r5, #1
 800141e:	0041      	lsls	r1, r0, #1
 8001420:	0a52      	lsrs	r2, r2, #9
 8001422:	0fec      	lsrs	r4, r5, #31
 8001424:	0f7d      	lsrs	r5, r7, #29
 8001426:	4315      	orrs	r5, r2
 8001428:	0d76      	lsrs	r6, r6, #21
 800142a:	0d49      	lsrs	r1, r1, #21
 800142c:	0fc0      	lsrs	r0, r0, #31
 800142e:	4682      	mov	sl, r0
 8001430:	46ac      	mov	ip, r5
 8001432:	00ff      	lsls	r7, r7, #3
 8001434:	1a72      	subs	r2, r6, r1
 8001436:	4284      	cmp	r4, r0
 8001438:	d100      	bne.n	800143c <__aeabi_dadd+0x40>
 800143a:	e098      	b.n	800156e <__aeabi_dadd+0x172>
 800143c:	2a00      	cmp	r2, #0
 800143e:	dc00      	bgt.n	8001442 <__aeabi_dadd+0x46>
 8001440:	e081      	b.n	8001546 <__aeabi_dadd+0x14a>
 8001442:	2900      	cmp	r1, #0
 8001444:	d100      	bne.n	8001448 <__aeabi_dadd+0x4c>
 8001446:	e0b6      	b.n	80015b6 <__aeabi_dadd+0x1ba>
 8001448:	49c9      	ldr	r1, [pc, #804]	; (8001770 <__aeabi_dadd+0x374>)
 800144a:	428e      	cmp	r6, r1
 800144c:	d100      	bne.n	8001450 <__aeabi_dadd+0x54>
 800144e:	e172      	b.n	8001736 <__aeabi_dadd+0x33a>
 8001450:	2180      	movs	r1, #128	; 0x80
 8001452:	0028      	movs	r0, r5
 8001454:	0409      	lsls	r1, r1, #16
 8001456:	4308      	orrs	r0, r1
 8001458:	4684      	mov	ip, r0
 800145a:	2a38      	cmp	r2, #56	; 0x38
 800145c:	dd00      	ble.n	8001460 <__aeabi_dadd+0x64>
 800145e:	e15e      	b.n	800171e <__aeabi_dadd+0x322>
 8001460:	2a1f      	cmp	r2, #31
 8001462:	dd00      	ble.n	8001466 <__aeabi_dadd+0x6a>
 8001464:	e1ee      	b.n	8001844 <__aeabi_dadd+0x448>
 8001466:	2020      	movs	r0, #32
 8001468:	0039      	movs	r1, r7
 800146a:	4665      	mov	r5, ip
 800146c:	1a80      	subs	r0, r0, r2
 800146e:	4087      	lsls	r7, r0
 8001470:	40d1      	lsrs	r1, r2
 8001472:	4085      	lsls	r5, r0
 8001474:	430d      	orrs	r5, r1
 8001476:	0039      	movs	r1, r7
 8001478:	1e4f      	subs	r7, r1, #1
 800147a:	41b9      	sbcs	r1, r7
 800147c:	4667      	mov	r7, ip
 800147e:	40d7      	lsrs	r7, r2
 8001480:	4329      	orrs	r1, r5
 8001482:	1bdb      	subs	r3, r3, r7
 8001484:	464a      	mov	r2, r9
 8001486:	1a55      	subs	r5, r2, r1
 8001488:	45a9      	cmp	r9, r5
 800148a:	4189      	sbcs	r1, r1
 800148c:	4249      	negs	r1, r1
 800148e:	1a5b      	subs	r3, r3, r1
 8001490:	4698      	mov	r8, r3
 8001492:	4643      	mov	r3, r8
 8001494:	021b      	lsls	r3, r3, #8
 8001496:	d400      	bmi.n	800149a <__aeabi_dadd+0x9e>
 8001498:	e0cc      	b.n	8001634 <__aeabi_dadd+0x238>
 800149a:	4643      	mov	r3, r8
 800149c:	025b      	lsls	r3, r3, #9
 800149e:	0a5b      	lsrs	r3, r3, #9
 80014a0:	4698      	mov	r8, r3
 80014a2:	4643      	mov	r3, r8
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d100      	bne.n	80014aa <__aeabi_dadd+0xae>
 80014a8:	e12c      	b.n	8001704 <__aeabi_dadd+0x308>
 80014aa:	4640      	mov	r0, r8
 80014ac:	f001 fe8e 	bl	80031cc <__clzsi2>
 80014b0:	0001      	movs	r1, r0
 80014b2:	3908      	subs	r1, #8
 80014b4:	2220      	movs	r2, #32
 80014b6:	0028      	movs	r0, r5
 80014b8:	4643      	mov	r3, r8
 80014ba:	1a52      	subs	r2, r2, r1
 80014bc:	408b      	lsls	r3, r1
 80014be:	40d0      	lsrs	r0, r2
 80014c0:	408d      	lsls	r5, r1
 80014c2:	4303      	orrs	r3, r0
 80014c4:	428e      	cmp	r6, r1
 80014c6:	dd00      	ble.n	80014ca <__aeabi_dadd+0xce>
 80014c8:	e117      	b.n	80016fa <__aeabi_dadd+0x2fe>
 80014ca:	1b8e      	subs	r6, r1, r6
 80014cc:	1c72      	adds	r2, r6, #1
 80014ce:	2a1f      	cmp	r2, #31
 80014d0:	dd00      	ble.n	80014d4 <__aeabi_dadd+0xd8>
 80014d2:	e1a7      	b.n	8001824 <__aeabi_dadd+0x428>
 80014d4:	2120      	movs	r1, #32
 80014d6:	0018      	movs	r0, r3
 80014d8:	002e      	movs	r6, r5
 80014da:	1a89      	subs	r1, r1, r2
 80014dc:	408d      	lsls	r5, r1
 80014de:	4088      	lsls	r0, r1
 80014e0:	40d6      	lsrs	r6, r2
 80014e2:	40d3      	lsrs	r3, r2
 80014e4:	1e69      	subs	r1, r5, #1
 80014e6:	418d      	sbcs	r5, r1
 80014e8:	4330      	orrs	r0, r6
 80014ea:	4698      	mov	r8, r3
 80014ec:	2600      	movs	r6, #0
 80014ee:	4305      	orrs	r5, r0
 80014f0:	076b      	lsls	r3, r5, #29
 80014f2:	d009      	beq.n	8001508 <__aeabi_dadd+0x10c>
 80014f4:	230f      	movs	r3, #15
 80014f6:	402b      	ands	r3, r5
 80014f8:	2b04      	cmp	r3, #4
 80014fa:	d005      	beq.n	8001508 <__aeabi_dadd+0x10c>
 80014fc:	1d2b      	adds	r3, r5, #4
 80014fe:	42ab      	cmp	r3, r5
 8001500:	41ad      	sbcs	r5, r5
 8001502:	426d      	negs	r5, r5
 8001504:	44a8      	add	r8, r5
 8001506:	001d      	movs	r5, r3
 8001508:	4643      	mov	r3, r8
 800150a:	021b      	lsls	r3, r3, #8
 800150c:	d400      	bmi.n	8001510 <__aeabi_dadd+0x114>
 800150e:	e094      	b.n	800163a <__aeabi_dadd+0x23e>
 8001510:	4b97      	ldr	r3, [pc, #604]	; (8001770 <__aeabi_dadd+0x374>)
 8001512:	1c72      	adds	r2, r6, #1
 8001514:	429a      	cmp	r2, r3
 8001516:	d100      	bne.n	800151a <__aeabi_dadd+0x11e>
 8001518:	e09d      	b.n	8001656 <__aeabi_dadd+0x25a>
 800151a:	4641      	mov	r1, r8
 800151c:	4b95      	ldr	r3, [pc, #596]	; (8001774 <__aeabi_dadd+0x378>)
 800151e:	08ed      	lsrs	r5, r5, #3
 8001520:	4019      	ands	r1, r3
 8001522:	000b      	movs	r3, r1
 8001524:	0552      	lsls	r2, r2, #21
 8001526:	0749      	lsls	r1, r1, #29
 8001528:	025b      	lsls	r3, r3, #9
 800152a:	4329      	orrs	r1, r5
 800152c:	0b1b      	lsrs	r3, r3, #12
 800152e:	0d52      	lsrs	r2, r2, #21
 8001530:	0512      	lsls	r2, r2, #20
 8001532:	4313      	orrs	r3, r2
 8001534:	07e4      	lsls	r4, r4, #31
 8001536:	4323      	orrs	r3, r4
 8001538:	0008      	movs	r0, r1
 800153a:	0019      	movs	r1, r3
 800153c:	bce0      	pop	{r5, r6, r7}
 800153e:	46ba      	mov	sl, r7
 8001540:	46b1      	mov	r9, r6
 8001542:	46a8      	mov	r8, r5
 8001544:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001546:	2a00      	cmp	r2, #0
 8001548:	d043      	beq.n	80015d2 <__aeabi_dadd+0x1d6>
 800154a:	1b8a      	subs	r2, r1, r6
 800154c:	2e00      	cmp	r6, #0
 800154e:	d000      	beq.n	8001552 <__aeabi_dadd+0x156>
 8001550:	e12a      	b.n	80017a8 <__aeabi_dadd+0x3ac>
 8001552:	464c      	mov	r4, r9
 8001554:	431c      	orrs	r4, r3
 8001556:	d100      	bne.n	800155a <__aeabi_dadd+0x15e>
 8001558:	e1d1      	b.n	80018fe <__aeabi_dadd+0x502>
 800155a:	1e54      	subs	r4, r2, #1
 800155c:	2a01      	cmp	r2, #1
 800155e:	d100      	bne.n	8001562 <__aeabi_dadd+0x166>
 8001560:	e21f      	b.n	80019a2 <__aeabi_dadd+0x5a6>
 8001562:	4d83      	ldr	r5, [pc, #524]	; (8001770 <__aeabi_dadd+0x374>)
 8001564:	42aa      	cmp	r2, r5
 8001566:	d100      	bne.n	800156a <__aeabi_dadd+0x16e>
 8001568:	e272      	b.n	8001a50 <__aeabi_dadd+0x654>
 800156a:	0022      	movs	r2, r4
 800156c:	e123      	b.n	80017b6 <__aeabi_dadd+0x3ba>
 800156e:	2a00      	cmp	r2, #0
 8001570:	dc00      	bgt.n	8001574 <__aeabi_dadd+0x178>
 8001572:	e098      	b.n	80016a6 <__aeabi_dadd+0x2aa>
 8001574:	2900      	cmp	r1, #0
 8001576:	d042      	beq.n	80015fe <__aeabi_dadd+0x202>
 8001578:	497d      	ldr	r1, [pc, #500]	; (8001770 <__aeabi_dadd+0x374>)
 800157a:	428e      	cmp	r6, r1
 800157c:	d100      	bne.n	8001580 <__aeabi_dadd+0x184>
 800157e:	e0da      	b.n	8001736 <__aeabi_dadd+0x33a>
 8001580:	2180      	movs	r1, #128	; 0x80
 8001582:	0028      	movs	r0, r5
 8001584:	0409      	lsls	r1, r1, #16
 8001586:	4308      	orrs	r0, r1
 8001588:	4684      	mov	ip, r0
 800158a:	2a38      	cmp	r2, #56	; 0x38
 800158c:	dd00      	ble.n	8001590 <__aeabi_dadd+0x194>
 800158e:	e129      	b.n	80017e4 <__aeabi_dadd+0x3e8>
 8001590:	2a1f      	cmp	r2, #31
 8001592:	dc00      	bgt.n	8001596 <__aeabi_dadd+0x19a>
 8001594:	e187      	b.n	80018a6 <__aeabi_dadd+0x4aa>
 8001596:	0011      	movs	r1, r2
 8001598:	4665      	mov	r5, ip
 800159a:	3920      	subs	r1, #32
 800159c:	40cd      	lsrs	r5, r1
 800159e:	2a20      	cmp	r2, #32
 80015a0:	d004      	beq.n	80015ac <__aeabi_dadd+0x1b0>
 80015a2:	2040      	movs	r0, #64	; 0x40
 80015a4:	4661      	mov	r1, ip
 80015a6:	1a82      	subs	r2, r0, r2
 80015a8:	4091      	lsls	r1, r2
 80015aa:	430f      	orrs	r7, r1
 80015ac:	0039      	movs	r1, r7
 80015ae:	1e4f      	subs	r7, r1, #1
 80015b0:	41b9      	sbcs	r1, r7
 80015b2:	430d      	orrs	r5, r1
 80015b4:	e11b      	b.n	80017ee <__aeabi_dadd+0x3f2>
 80015b6:	0029      	movs	r1, r5
 80015b8:	4339      	orrs	r1, r7
 80015ba:	d100      	bne.n	80015be <__aeabi_dadd+0x1c2>
 80015bc:	e0b5      	b.n	800172a <__aeabi_dadd+0x32e>
 80015be:	1e51      	subs	r1, r2, #1
 80015c0:	2a01      	cmp	r2, #1
 80015c2:	d100      	bne.n	80015c6 <__aeabi_dadd+0x1ca>
 80015c4:	e1ab      	b.n	800191e <__aeabi_dadd+0x522>
 80015c6:	486a      	ldr	r0, [pc, #424]	; (8001770 <__aeabi_dadd+0x374>)
 80015c8:	4282      	cmp	r2, r0
 80015ca:	d100      	bne.n	80015ce <__aeabi_dadd+0x1d2>
 80015cc:	e1b2      	b.n	8001934 <__aeabi_dadd+0x538>
 80015ce:	000a      	movs	r2, r1
 80015d0:	e743      	b.n	800145a <__aeabi_dadd+0x5e>
 80015d2:	4969      	ldr	r1, [pc, #420]	; (8001778 <__aeabi_dadd+0x37c>)
 80015d4:	1c75      	adds	r5, r6, #1
 80015d6:	420d      	tst	r5, r1
 80015d8:	d000      	beq.n	80015dc <__aeabi_dadd+0x1e0>
 80015da:	e0cf      	b.n	800177c <__aeabi_dadd+0x380>
 80015dc:	2e00      	cmp	r6, #0
 80015de:	d000      	beq.n	80015e2 <__aeabi_dadd+0x1e6>
 80015e0:	e193      	b.n	800190a <__aeabi_dadd+0x50e>
 80015e2:	4649      	mov	r1, r9
 80015e4:	4319      	orrs	r1, r3
 80015e6:	d100      	bne.n	80015ea <__aeabi_dadd+0x1ee>
 80015e8:	e1d1      	b.n	800198e <__aeabi_dadd+0x592>
 80015ea:	4661      	mov	r1, ip
 80015ec:	4339      	orrs	r1, r7
 80015ee:	d000      	beq.n	80015f2 <__aeabi_dadd+0x1f6>
 80015f0:	e1e3      	b.n	80019ba <__aeabi_dadd+0x5be>
 80015f2:	4649      	mov	r1, r9
 80015f4:	0758      	lsls	r0, r3, #29
 80015f6:	08c9      	lsrs	r1, r1, #3
 80015f8:	4301      	orrs	r1, r0
 80015fa:	08db      	lsrs	r3, r3, #3
 80015fc:	e026      	b.n	800164c <__aeabi_dadd+0x250>
 80015fe:	0029      	movs	r1, r5
 8001600:	4339      	orrs	r1, r7
 8001602:	d100      	bne.n	8001606 <__aeabi_dadd+0x20a>
 8001604:	e091      	b.n	800172a <__aeabi_dadd+0x32e>
 8001606:	1e51      	subs	r1, r2, #1
 8001608:	2a01      	cmp	r2, #1
 800160a:	d005      	beq.n	8001618 <__aeabi_dadd+0x21c>
 800160c:	4858      	ldr	r0, [pc, #352]	; (8001770 <__aeabi_dadd+0x374>)
 800160e:	4282      	cmp	r2, r0
 8001610:	d100      	bne.n	8001614 <__aeabi_dadd+0x218>
 8001612:	e18f      	b.n	8001934 <__aeabi_dadd+0x538>
 8001614:	000a      	movs	r2, r1
 8001616:	e7b8      	b.n	800158a <__aeabi_dadd+0x18e>
 8001618:	003d      	movs	r5, r7
 800161a:	444d      	add	r5, r9
 800161c:	454d      	cmp	r5, r9
 800161e:	4189      	sbcs	r1, r1
 8001620:	4463      	add	r3, ip
 8001622:	4698      	mov	r8, r3
 8001624:	4249      	negs	r1, r1
 8001626:	4488      	add	r8, r1
 8001628:	4643      	mov	r3, r8
 800162a:	2602      	movs	r6, #2
 800162c:	021b      	lsls	r3, r3, #8
 800162e:	d500      	bpl.n	8001632 <__aeabi_dadd+0x236>
 8001630:	e0eb      	b.n	800180a <__aeabi_dadd+0x40e>
 8001632:	3e01      	subs	r6, #1
 8001634:	076b      	lsls	r3, r5, #29
 8001636:	d000      	beq.n	800163a <__aeabi_dadd+0x23e>
 8001638:	e75c      	b.n	80014f4 <__aeabi_dadd+0xf8>
 800163a:	4643      	mov	r3, r8
 800163c:	08e9      	lsrs	r1, r5, #3
 800163e:	075a      	lsls	r2, r3, #29
 8001640:	4311      	orrs	r1, r2
 8001642:	0032      	movs	r2, r6
 8001644:	08db      	lsrs	r3, r3, #3
 8001646:	484a      	ldr	r0, [pc, #296]	; (8001770 <__aeabi_dadd+0x374>)
 8001648:	4282      	cmp	r2, r0
 800164a:	d021      	beq.n	8001690 <__aeabi_dadd+0x294>
 800164c:	031b      	lsls	r3, r3, #12
 800164e:	0552      	lsls	r2, r2, #21
 8001650:	0b1b      	lsrs	r3, r3, #12
 8001652:	0d52      	lsrs	r2, r2, #21
 8001654:	e76c      	b.n	8001530 <__aeabi_dadd+0x134>
 8001656:	2300      	movs	r3, #0
 8001658:	2100      	movs	r1, #0
 800165a:	e769      	b.n	8001530 <__aeabi_dadd+0x134>
 800165c:	002a      	movs	r2, r5
 800165e:	433a      	orrs	r2, r7
 8001660:	d069      	beq.n	8001736 <__aeabi_dadd+0x33a>
 8001662:	464a      	mov	r2, r9
 8001664:	0758      	lsls	r0, r3, #29
 8001666:	08d1      	lsrs	r1, r2, #3
 8001668:	08da      	lsrs	r2, r3, #3
 800166a:	2380      	movs	r3, #128	; 0x80
 800166c:	031b      	lsls	r3, r3, #12
 800166e:	4308      	orrs	r0, r1
 8001670:	421a      	tst	r2, r3
 8001672:	d007      	beq.n	8001684 <__aeabi_dadd+0x288>
 8001674:	0029      	movs	r1, r5
 8001676:	08ed      	lsrs	r5, r5, #3
 8001678:	421d      	tst	r5, r3
 800167a:	d103      	bne.n	8001684 <__aeabi_dadd+0x288>
 800167c:	002a      	movs	r2, r5
 800167e:	08ff      	lsrs	r7, r7, #3
 8001680:	0748      	lsls	r0, r1, #29
 8001682:	4338      	orrs	r0, r7
 8001684:	0f43      	lsrs	r3, r0, #29
 8001686:	00c1      	lsls	r1, r0, #3
 8001688:	075b      	lsls	r3, r3, #29
 800168a:	08c9      	lsrs	r1, r1, #3
 800168c:	4319      	orrs	r1, r3
 800168e:	0013      	movs	r3, r2
 8001690:	000a      	movs	r2, r1
 8001692:	431a      	orrs	r2, r3
 8001694:	d100      	bne.n	8001698 <__aeabi_dadd+0x29c>
 8001696:	e213      	b.n	8001ac0 <__aeabi_dadd+0x6c4>
 8001698:	2280      	movs	r2, #128	; 0x80
 800169a:	0312      	lsls	r2, r2, #12
 800169c:	4313      	orrs	r3, r2
 800169e:	031b      	lsls	r3, r3, #12
 80016a0:	4a33      	ldr	r2, [pc, #204]	; (8001770 <__aeabi_dadd+0x374>)
 80016a2:	0b1b      	lsrs	r3, r3, #12
 80016a4:	e744      	b.n	8001530 <__aeabi_dadd+0x134>
 80016a6:	2a00      	cmp	r2, #0
 80016a8:	d04b      	beq.n	8001742 <__aeabi_dadd+0x346>
 80016aa:	1b8a      	subs	r2, r1, r6
 80016ac:	2e00      	cmp	r6, #0
 80016ae:	d100      	bne.n	80016b2 <__aeabi_dadd+0x2b6>
 80016b0:	e0e7      	b.n	8001882 <__aeabi_dadd+0x486>
 80016b2:	482f      	ldr	r0, [pc, #188]	; (8001770 <__aeabi_dadd+0x374>)
 80016b4:	4281      	cmp	r1, r0
 80016b6:	d100      	bne.n	80016ba <__aeabi_dadd+0x2be>
 80016b8:	e195      	b.n	80019e6 <__aeabi_dadd+0x5ea>
 80016ba:	2080      	movs	r0, #128	; 0x80
 80016bc:	0400      	lsls	r0, r0, #16
 80016be:	4303      	orrs	r3, r0
 80016c0:	2a38      	cmp	r2, #56	; 0x38
 80016c2:	dd00      	ble.n	80016c6 <__aeabi_dadd+0x2ca>
 80016c4:	e143      	b.n	800194e <__aeabi_dadd+0x552>
 80016c6:	2a1f      	cmp	r2, #31
 80016c8:	dd00      	ble.n	80016cc <__aeabi_dadd+0x2d0>
 80016ca:	e1db      	b.n	8001a84 <__aeabi_dadd+0x688>
 80016cc:	2020      	movs	r0, #32
 80016ce:	001d      	movs	r5, r3
 80016d0:	464e      	mov	r6, r9
 80016d2:	1a80      	subs	r0, r0, r2
 80016d4:	4085      	lsls	r5, r0
 80016d6:	40d6      	lsrs	r6, r2
 80016d8:	4335      	orrs	r5, r6
 80016da:	464e      	mov	r6, r9
 80016dc:	4086      	lsls	r6, r0
 80016de:	0030      	movs	r0, r6
 80016e0:	40d3      	lsrs	r3, r2
 80016e2:	1e46      	subs	r6, r0, #1
 80016e4:	41b0      	sbcs	r0, r6
 80016e6:	449c      	add	ip, r3
 80016e8:	4305      	orrs	r5, r0
 80016ea:	19ed      	adds	r5, r5, r7
 80016ec:	42bd      	cmp	r5, r7
 80016ee:	419b      	sbcs	r3, r3
 80016f0:	425b      	negs	r3, r3
 80016f2:	4463      	add	r3, ip
 80016f4:	4698      	mov	r8, r3
 80016f6:	000e      	movs	r6, r1
 80016f8:	e07f      	b.n	80017fa <__aeabi_dadd+0x3fe>
 80016fa:	4a1e      	ldr	r2, [pc, #120]	; (8001774 <__aeabi_dadd+0x378>)
 80016fc:	1a76      	subs	r6, r6, r1
 80016fe:	4013      	ands	r3, r2
 8001700:	4698      	mov	r8, r3
 8001702:	e6f5      	b.n	80014f0 <__aeabi_dadd+0xf4>
 8001704:	0028      	movs	r0, r5
 8001706:	f001 fd61 	bl	80031cc <__clzsi2>
 800170a:	0001      	movs	r1, r0
 800170c:	3118      	adds	r1, #24
 800170e:	291f      	cmp	r1, #31
 8001710:	dc00      	bgt.n	8001714 <__aeabi_dadd+0x318>
 8001712:	e6cf      	b.n	80014b4 <__aeabi_dadd+0xb8>
 8001714:	002b      	movs	r3, r5
 8001716:	3808      	subs	r0, #8
 8001718:	4083      	lsls	r3, r0
 800171a:	2500      	movs	r5, #0
 800171c:	e6d2      	b.n	80014c4 <__aeabi_dadd+0xc8>
 800171e:	4662      	mov	r2, ip
 8001720:	433a      	orrs	r2, r7
 8001722:	0011      	movs	r1, r2
 8001724:	1e4f      	subs	r7, r1, #1
 8001726:	41b9      	sbcs	r1, r7
 8001728:	e6ac      	b.n	8001484 <__aeabi_dadd+0x88>
 800172a:	4649      	mov	r1, r9
 800172c:	0758      	lsls	r0, r3, #29
 800172e:	08c9      	lsrs	r1, r1, #3
 8001730:	4301      	orrs	r1, r0
 8001732:	08db      	lsrs	r3, r3, #3
 8001734:	e787      	b.n	8001646 <__aeabi_dadd+0x24a>
 8001736:	4649      	mov	r1, r9
 8001738:	075a      	lsls	r2, r3, #29
 800173a:	08c9      	lsrs	r1, r1, #3
 800173c:	4311      	orrs	r1, r2
 800173e:	08db      	lsrs	r3, r3, #3
 8001740:	e7a6      	b.n	8001690 <__aeabi_dadd+0x294>
 8001742:	490d      	ldr	r1, [pc, #52]	; (8001778 <__aeabi_dadd+0x37c>)
 8001744:	1c70      	adds	r0, r6, #1
 8001746:	4208      	tst	r0, r1
 8001748:	d000      	beq.n	800174c <__aeabi_dadd+0x350>
 800174a:	e0bb      	b.n	80018c4 <__aeabi_dadd+0x4c8>
 800174c:	2e00      	cmp	r6, #0
 800174e:	d000      	beq.n	8001752 <__aeabi_dadd+0x356>
 8001750:	e114      	b.n	800197c <__aeabi_dadd+0x580>
 8001752:	4649      	mov	r1, r9
 8001754:	4319      	orrs	r1, r3
 8001756:	d100      	bne.n	800175a <__aeabi_dadd+0x35e>
 8001758:	e175      	b.n	8001a46 <__aeabi_dadd+0x64a>
 800175a:	0029      	movs	r1, r5
 800175c:	4339      	orrs	r1, r7
 800175e:	d000      	beq.n	8001762 <__aeabi_dadd+0x366>
 8001760:	e17e      	b.n	8001a60 <__aeabi_dadd+0x664>
 8001762:	4649      	mov	r1, r9
 8001764:	0758      	lsls	r0, r3, #29
 8001766:	08c9      	lsrs	r1, r1, #3
 8001768:	4301      	orrs	r1, r0
 800176a:	08db      	lsrs	r3, r3, #3
 800176c:	e76e      	b.n	800164c <__aeabi_dadd+0x250>
 800176e:	46c0      	nop			; (mov r8, r8)
 8001770:	000007ff 	.word	0x000007ff
 8001774:	ff7fffff 	.word	0xff7fffff
 8001778:	000007fe 	.word	0x000007fe
 800177c:	4649      	mov	r1, r9
 800177e:	1bcd      	subs	r5, r1, r7
 8001780:	4661      	mov	r1, ip
 8001782:	1a58      	subs	r0, r3, r1
 8001784:	45a9      	cmp	r9, r5
 8001786:	4189      	sbcs	r1, r1
 8001788:	4249      	negs	r1, r1
 800178a:	4688      	mov	r8, r1
 800178c:	0001      	movs	r1, r0
 800178e:	4640      	mov	r0, r8
 8001790:	1a09      	subs	r1, r1, r0
 8001792:	4688      	mov	r8, r1
 8001794:	0209      	lsls	r1, r1, #8
 8001796:	d500      	bpl.n	800179a <__aeabi_dadd+0x39e>
 8001798:	e0a6      	b.n	80018e8 <__aeabi_dadd+0x4ec>
 800179a:	4641      	mov	r1, r8
 800179c:	4329      	orrs	r1, r5
 800179e:	d000      	beq.n	80017a2 <__aeabi_dadd+0x3a6>
 80017a0:	e67f      	b.n	80014a2 <__aeabi_dadd+0xa6>
 80017a2:	2300      	movs	r3, #0
 80017a4:	2400      	movs	r4, #0
 80017a6:	e751      	b.n	800164c <__aeabi_dadd+0x250>
 80017a8:	4cc7      	ldr	r4, [pc, #796]	; (8001ac8 <__aeabi_dadd+0x6cc>)
 80017aa:	42a1      	cmp	r1, r4
 80017ac:	d100      	bne.n	80017b0 <__aeabi_dadd+0x3b4>
 80017ae:	e0c7      	b.n	8001940 <__aeabi_dadd+0x544>
 80017b0:	2480      	movs	r4, #128	; 0x80
 80017b2:	0424      	lsls	r4, r4, #16
 80017b4:	4323      	orrs	r3, r4
 80017b6:	2a38      	cmp	r2, #56	; 0x38
 80017b8:	dc54      	bgt.n	8001864 <__aeabi_dadd+0x468>
 80017ba:	2a1f      	cmp	r2, #31
 80017bc:	dd00      	ble.n	80017c0 <__aeabi_dadd+0x3c4>
 80017be:	e0cc      	b.n	800195a <__aeabi_dadd+0x55e>
 80017c0:	2420      	movs	r4, #32
 80017c2:	4648      	mov	r0, r9
 80017c4:	1aa4      	subs	r4, r4, r2
 80017c6:	001d      	movs	r5, r3
 80017c8:	464e      	mov	r6, r9
 80017ca:	40a0      	lsls	r0, r4
 80017cc:	40d6      	lsrs	r6, r2
 80017ce:	40a5      	lsls	r5, r4
 80017d0:	0004      	movs	r4, r0
 80017d2:	40d3      	lsrs	r3, r2
 80017d4:	4662      	mov	r2, ip
 80017d6:	4335      	orrs	r5, r6
 80017d8:	1e66      	subs	r6, r4, #1
 80017da:	41b4      	sbcs	r4, r6
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	469c      	mov	ip, r3
 80017e0:	4325      	orrs	r5, r4
 80017e2:	e044      	b.n	800186e <__aeabi_dadd+0x472>
 80017e4:	4662      	mov	r2, ip
 80017e6:	433a      	orrs	r2, r7
 80017e8:	0015      	movs	r5, r2
 80017ea:	1e6f      	subs	r7, r5, #1
 80017ec:	41bd      	sbcs	r5, r7
 80017ee:	444d      	add	r5, r9
 80017f0:	454d      	cmp	r5, r9
 80017f2:	4189      	sbcs	r1, r1
 80017f4:	4249      	negs	r1, r1
 80017f6:	4688      	mov	r8, r1
 80017f8:	4498      	add	r8, r3
 80017fa:	4643      	mov	r3, r8
 80017fc:	021b      	lsls	r3, r3, #8
 80017fe:	d400      	bmi.n	8001802 <__aeabi_dadd+0x406>
 8001800:	e718      	b.n	8001634 <__aeabi_dadd+0x238>
 8001802:	4bb1      	ldr	r3, [pc, #708]	; (8001ac8 <__aeabi_dadd+0x6cc>)
 8001804:	3601      	adds	r6, #1
 8001806:	429e      	cmp	r6, r3
 8001808:	d049      	beq.n	800189e <__aeabi_dadd+0x4a2>
 800180a:	4642      	mov	r2, r8
 800180c:	4baf      	ldr	r3, [pc, #700]	; (8001acc <__aeabi_dadd+0x6d0>)
 800180e:	2101      	movs	r1, #1
 8001810:	401a      	ands	r2, r3
 8001812:	0013      	movs	r3, r2
 8001814:	086a      	lsrs	r2, r5, #1
 8001816:	400d      	ands	r5, r1
 8001818:	4315      	orrs	r5, r2
 800181a:	07d9      	lsls	r1, r3, #31
 800181c:	085b      	lsrs	r3, r3, #1
 800181e:	4698      	mov	r8, r3
 8001820:	430d      	orrs	r5, r1
 8001822:	e665      	b.n	80014f0 <__aeabi_dadd+0xf4>
 8001824:	0018      	movs	r0, r3
 8001826:	3e1f      	subs	r6, #31
 8001828:	40f0      	lsrs	r0, r6
 800182a:	2a20      	cmp	r2, #32
 800182c:	d003      	beq.n	8001836 <__aeabi_dadd+0x43a>
 800182e:	2140      	movs	r1, #64	; 0x40
 8001830:	1a8a      	subs	r2, r1, r2
 8001832:	4093      	lsls	r3, r2
 8001834:	431d      	orrs	r5, r3
 8001836:	1e69      	subs	r1, r5, #1
 8001838:	418d      	sbcs	r5, r1
 800183a:	2300      	movs	r3, #0
 800183c:	2600      	movs	r6, #0
 800183e:	4698      	mov	r8, r3
 8001840:	4305      	orrs	r5, r0
 8001842:	e6f7      	b.n	8001634 <__aeabi_dadd+0x238>
 8001844:	0011      	movs	r1, r2
 8001846:	4665      	mov	r5, ip
 8001848:	3920      	subs	r1, #32
 800184a:	40cd      	lsrs	r5, r1
 800184c:	2a20      	cmp	r2, #32
 800184e:	d004      	beq.n	800185a <__aeabi_dadd+0x45e>
 8001850:	2040      	movs	r0, #64	; 0x40
 8001852:	4661      	mov	r1, ip
 8001854:	1a82      	subs	r2, r0, r2
 8001856:	4091      	lsls	r1, r2
 8001858:	430f      	orrs	r7, r1
 800185a:	0039      	movs	r1, r7
 800185c:	1e4f      	subs	r7, r1, #1
 800185e:	41b9      	sbcs	r1, r7
 8001860:	4329      	orrs	r1, r5
 8001862:	e60f      	b.n	8001484 <__aeabi_dadd+0x88>
 8001864:	464a      	mov	r2, r9
 8001866:	4313      	orrs	r3, r2
 8001868:	001d      	movs	r5, r3
 800186a:	1e6b      	subs	r3, r5, #1
 800186c:	419d      	sbcs	r5, r3
 800186e:	1b7d      	subs	r5, r7, r5
 8001870:	42af      	cmp	r7, r5
 8001872:	419b      	sbcs	r3, r3
 8001874:	4662      	mov	r2, ip
 8001876:	425b      	negs	r3, r3
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	4698      	mov	r8, r3
 800187c:	4654      	mov	r4, sl
 800187e:	000e      	movs	r6, r1
 8001880:	e607      	b.n	8001492 <__aeabi_dadd+0x96>
 8001882:	4648      	mov	r0, r9
 8001884:	4318      	orrs	r0, r3
 8001886:	d100      	bne.n	800188a <__aeabi_dadd+0x48e>
 8001888:	e0b3      	b.n	80019f2 <__aeabi_dadd+0x5f6>
 800188a:	1e50      	subs	r0, r2, #1
 800188c:	2a01      	cmp	r2, #1
 800188e:	d100      	bne.n	8001892 <__aeabi_dadd+0x496>
 8001890:	e10d      	b.n	8001aae <__aeabi_dadd+0x6b2>
 8001892:	4d8d      	ldr	r5, [pc, #564]	; (8001ac8 <__aeabi_dadd+0x6cc>)
 8001894:	42aa      	cmp	r2, r5
 8001896:	d100      	bne.n	800189a <__aeabi_dadd+0x49e>
 8001898:	e0a5      	b.n	80019e6 <__aeabi_dadd+0x5ea>
 800189a:	0002      	movs	r2, r0
 800189c:	e710      	b.n	80016c0 <__aeabi_dadd+0x2c4>
 800189e:	0032      	movs	r2, r6
 80018a0:	2300      	movs	r3, #0
 80018a2:	2100      	movs	r1, #0
 80018a4:	e644      	b.n	8001530 <__aeabi_dadd+0x134>
 80018a6:	2120      	movs	r1, #32
 80018a8:	0038      	movs	r0, r7
 80018aa:	1a89      	subs	r1, r1, r2
 80018ac:	4665      	mov	r5, ip
 80018ae:	408f      	lsls	r7, r1
 80018b0:	408d      	lsls	r5, r1
 80018b2:	40d0      	lsrs	r0, r2
 80018b4:	1e79      	subs	r1, r7, #1
 80018b6:	418f      	sbcs	r7, r1
 80018b8:	4305      	orrs	r5, r0
 80018ba:	433d      	orrs	r5, r7
 80018bc:	4667      	mov	r7, ip
 80018be:	40d7      	lsrs	r7, r2
 80018c0:	19db      	adds	r3, r3, r7
 80018c2:	e794      	b.n	80017ee <__aeabi_dadd+0x3f2>
 80018c4:	4a80      	ldr	r2, [pc, #512]	; (8001ac8 <__aeabi_dadd+0x6cc>)
 80018c6:	4290      	cmp	r0, r2
 80018c8:	d100      	bne.n	80018cc <__aeabi_dadd+0x4d0>
 80018ca:	e0ec      	b.n	8001aa6 <__aeabi_dadd+0x6aa>
 80018cc:	0039      	movs	r1, r7
 80018ce:	4449      	add	r1, r9
 80018d0:	4549      	cmp	r1, r9
 80018d2:	4192      	sbcs	r2, r2
 80018d4:	4463      	add	r3, ip
 80018d6:	4252      	negs	r2, r2
 80018d8:	189b      	adds	r3, r3, r2
 80018da:	07dd      	lsls	r5, r3, #31
 80018dc:	0849      	lsrs	r1, r1, #1
 80018de:	085b      	lsrs	r3, r3, #1
 80018e0:	4698      	mov	r8, r3
 80018e2:	0006      	movs	r6, r0
 80018e4:	430d      	orrs	r5, r1
 80018e6:	e6a5      	b.n	8001634 <__aeabi_dadd+0x238>
 80018e8:	464a      	mov	r2, r9
 80018ea:	1abd      	subs	r5, r7, r2
 80018ec:	42af      	cmp	r7, r5
 80018ee:	4189      	sbcs	r1, r1
 80018f0:	4662      	mov	r2, ip
 80018f2:	4249      	negs	r1, r1
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	1a5b      	subs	r3, r3, r1
 80018f8:	4698      	mov	r8, r3
 80018fa:	4654      	mov	r4, sl
 80018fc:	e5d1      	b.n	80014a2 <__aeabi_dadd+0xa6>
 80018fe:	076c      	lsls	r4, r5, #29
 8001900:	08f9      	lsrs	r1, r7, #3
 8001902:	4321      	orrs	r1, r4
 8001904:	08eb      	lsrs	r3, r5, #3
 8001906:	0004      	movs	r4, r0
 8001908:	e69d      	b.n	8001646 <__aeabi_dadd+0x24a>
 800190a:	464a      	mov	r2, r9
 800190c:	431a      	orrs	r2, r3
 800190e:	d175      	bne.n	80019fc <__aeabi_dadd+0x600>
 8001910:	4661      	mov	r1, ip
 8001912:	4339      	orrs	r1, r7
 8001914:	d114      	bne.n	8001940 <__aeabi_dadd+0x544>
 8001916:	2380      	movs	r3, #128	; 0x80
 8001918:	2400      	movs	r4, #0
 800191a:	031b      	lsls	r3, r3, #12
 800191c:	e6bc      	b.n	8001698 <__aeabi_dadd+0x29c>
 800191e:	464a      	mov	r2, r9
 8001920:	1bd5      	subs	r5, r2, r7
 8001922:	45a9      	cmp	r9, r5
 8001924:	4189      	sbcs	r1, r1
 8001926:	4662      	mov	r2, ip
 8001928:	4249      	negs	r1, r1
 800192a:	1a9b      	subs	r3, r3, r2
 800192c:	1a5b      	subs	r3, r3, r1
 800192e:	4698      	mov	r8, r3
 8001930:	2601      	movs	r6, #1
 8001932:	e5ae      	b.n	8001492 <__aeabi_dadd+0x96>
 8001934:	464a      	mov	r2, r9
 8001936:	08d1      	lsrs	r1, r2, #3
 8001938:	075a      	lsls	r2, r3, #29
 800193a:	4311      	orrs	r1, r2
 800193c:	08db      	lsrs	r3, r3, #3
 800193e:	e6a7      	b.n	8001690 <__aeabi_dadd+0x294>
 8001940:	4663      	mov	r3, ip
 8001942:	08f9      	lsrs	r1, r7, #3
 8001944:	075a      	lsls	r2, r3, #29
 8001946:	4654      	mov	r4, sl
 8001948:	4311      	orrs	r1, r2
 800194a:	08db      	lsrs	r3, r3, #3
 800194c:	e6a0      	b.n	8001690 <__aeabi_dadd+0x294>
 800194e:	464a      	mov	r2, r9
 8001950:	4313      	orrs	r3, r2
 8001952:	001d      	movs	r5, r3
 8001954:	1e6b      	subs	r3, r5, #1
 8001956:	419d      	sbcs	r5, r3
 8001958:	e6c7      	b.n	80016ea <__aeabi_dadd+0x2ee>
 800195a:	0014      	movs	r4, r2
 800195c:	001e      	movs	r6, r3
 800195e:	3c20      	subs	r4, #32
 8001960:	40e6      	lsrs	r6, r4
 8001962:	2a20      	cmp	r2, #32
 8001964:	d005      	beq.n	8001972 <__aeabi_dadd+0x576>
 8001966:	2440      	movs	r4, #64	; 0x40
 8001968:	1aa2      	subs	r2, r4, r2
 800196a:	4093      	lsls	r3, r2
 800196c:	464a      	mov	r2, r9
 800196e:	431a      	orrs	r2, r3
 8001970:	4691      	mov	r9, r2
 8001972:	464d      	mov	r5, r9
 8001974:	1e6b      	subs	r3, r5, #1
 8001976:	419d      	sbcs	r5, r3
 8001978:	4335      	orrs	r5, r6
 800197a:	e778      	b.n	800186e <__aeabi_dadd+0x472>
 800197c:	464a      	mov	r2, r9
 800197e:	431a      	orrs	r2, r3
 8001980:	d000      	beq.n	8001984 <__aeabi_dadd+0x588>
 8001982:	e66b      	b.n	800165c <__aeabi_dadd+0x260>
 8001984:	076b      	lsls	r3, r5, #29
 8001986:	08f9      	lsrs	r1, r7, #3
 8001988:	4319      	orrs	r1, r3
 800198a:	08eb      	lsrs	r3, r5, #3
 800198c:	e680      	b.n	8001690 <__aeabi_dadd+0x294>
 800198e:	4661      	mov	r1, ip
 8001990:	4339      	orrs	r1, r7
 8001992:	d054      	beq.n	8001a3e <__aeabi_dadd+0x642>
 8001994:	4663      	mov	r3, ip
 8001996:	08f9      	lsrs	r1, r7, #3
 8001998:	075c      	lsls	r4, r3, #29
 800199a:	4321      	orrs	r1, r4
 800199c:	08db      	lsrs	r3, r3, #3
 800199e:	0004      	movs	r4, r0
 80019a0:	e654      	b.n	800164c <__aeabi_dadd+0x250>
 80019a2:	464a      	mov	r2, r9
 80019a4:	1abd      	subs	r5, r7, r2
 80019a6:	42af      	cmp	r7, r5
 80019a8:	4189      	sbcs	r1, r1
 80019aa:	4662      	mov	r2, ip
 80019ac:	4249      	negs	r1, r1
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	1a5b      	subs	r3, r3, r1
 80019b2:	4698      	mov	r8, r3
 80019b4:	0004      	movs	r4, r0
 80019b6:	2601      	movs	r6, #1
 80019b8:	e56b      	b.n	8001492 <__aeabi_dadd+0x96>
 80019ba:	464a      	mov	r2, r9
 80019bc:	1bd5      	subs	r5, r2, r7
 80019be:	45a9      	cmp	r9, r5
 80019c0:	4189      	sbcs	r1, r1
 80019c2:	4662      	mov	r2, ip
 80019c4:	4249      	negs	r1, r1
 80019c6:	1a9a      	subs	r2, r3, r2
 80019c8:	1a52      	subs	r2, r2, r1
 80019ca:	4690      	mov	r8, r2
 80019cc:	0212      	lsls	r2, r2, #8
 80019ce:	d532      	bpl.n	8001a36 <__aeabi_dadd+0x63a>
 80019d0:	464a      	mov	r2, r9
 80019d2:	1abd      	subs	r5, r7, r2
 80019d4:	42af      	cmp	r7, r5
 80019d6:	4189      	sbcs	r1, r1
 80019d8:	4662      	mov	r2, ip
 80019da:	4249      	negs	r1, r1
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	1a5b      	subs	r3, r3, r1
 80019e0:	4698      	mov	r8, r3
 80019e2:	0004      	movs	r4, r0
 80019e4:	e584      	b.n	80014f0 <__aeabi_dadd+0xf4>
 80019e6:	4663      	mov	r3, ip
 80019e8:	08f9      	lsrs	r1, r7, #3
 80019ea:	075a      	lsls	r2, r3, #29
 80019ec:	4311      	orrs	r1, r2
 80019ee:	08db      	lsrs	r3, r3, #3
 80019f0:	e64e      	b.n	8001690 <__aeabi_dadd+0x294>
 80019f2:	08f9      	lsrs	r1, r7, #3
 80019f4:	0768      	lsls	r0, r5, #29
 80019f6:	4301      	orrs	r1, r0
 80019f8:	08eb      	lsrs	r3, r5, #3
 80019fa:	e624      	b.n	8001646 <__aeabi_dadd+0x24a>
 80019fc:	4662      	mov	r2, ip
 80019fe:	433a      	orrs	r2, r7
 8001a00:	d100      	bne.n	8001a04 <__aeabi_dadd+0x608>
 8001a02:	e698      	b.n	8001736 <__aeabi_dadd+0x33a>
 8001a04:	464a      	mov	r2, r9
 8001a06:	08d1      	lsrs	r1, r2, #3
 8001a08:	075a      	lsls	r2, r3, #29
 8001a0a:	4311      	orrs	r1, r2
 8001a0c:	08da      	lsrs	r2, r3, #3
 8001a0e:	2380      	movs	r3, #128	; 0x80
 8001a10:	031b      	lsls	r3, r3, #12
 8001a12:	421a      	tst	r2, r3
 8001a14:	d008      	beq.n	8001a28 <__aeabi_dadd+0x62c>
 8001a16:	4660      	mov	r0, ip
 8001a18:	08c5      	lsrs	r5, r0, #3
 8001a1a:	421d      	tst	r5, r3
 8001a1c:	d104      	bne.n	8001a28 <__aeabi_dadd+0x62c>
 8001a1e:	4654      	mov	r4, sl
 8001a20:	002a      	movs	r2, r5
 8001a22:	08f9      	lsrs	r1, r7, #3
 8001a24:	0743      	lsls	r3, r0, #29
 8001a26:	4319      	orrs	r1, r3
 8001a28:	0f4b      	lsrs	r3, r1, #29
 8001a2a:	00c9      	lsls	r1, r1, #3
 8001a2c:	075b      	lsls	r3, r3, #29
 8001a2e:	08c9      	lsrs	r1, r1, #3
 8001a30:	4319      	orrs	r1, r3
 8001a32:	0013      	movs	r3, r2
 8001a34:	e62c      	b.n	8001690 <__aeabi_dadd+0x294>
 8001a36:	4641      	mov	r1, r8
 8001a38:	4329      	orrs	r1, r5
 8001a3a:	d000      	beq.n	8001a3e <__aeabi_dadd+0x642>
 8001a3c:	e5fa      	b.n	8001634 <__aeabi_dadd+0x238>
 8001a3e:	2300      	movs	r3, #0
 8001a40:	000a      	movs	r2, r1
 8001a42:	2400      	movs	r4, #0
 8001a44:	e602      	b.n	800164c <__aeabi_dadd+0x250>
 8001a46:	076b      	lsls	r3, r5, #29
 8001a48:	08f9      	lsrs	r1, r7, #3
 8001a4a:	4319      	orrs	r1, r3
 8001a4c:	08eb      	lsrs	r3, r5, #3
 8001a4e:	e5fd      	b.n	800164c <__aeabi_dadd+0x250>
 8001a50:	4663      	mov	r3, ip
 8001a52:	08f9      	lsrs	r1, r7, #3
 8001a54:	075b      	lsls	r3, r3, #29
 8001a56:	4319      	orrs	r1, r3
 8001a58:	4663      	mov	r3, ip
 8001a5a:	0004      	movs	r4, r0
 8001a5c:	08db      	lsrs	r3, r3, #3
 8001a5e:	e617      	b.n	8001690 <__aeabi_dadd+0x294>
 8001a60:	003d      	movs	r5, r7
 8001a62:	444d      	add	r5, r9
 8001a64:	4463      	add	r3, ip
 8001a66:	454d      	cmp	r5, r9
 8001a68:	4189      	sbcs	r1, r1
 8001a6a:	4698      	mov	r8, r3
 8001a6c:	4249      	negs	r1, r1
 8001a6e:	4488      	add	r8, r1
 8001a70:	4643      	mov	r3, r8
 8001a72:	021b      	lsls	r3, r3, #8
 8001a74:	d400      	bmi.n	8001a78 <__aeabi_dadd+0x67c>
 8001a76:	e5dd      	b.n	8001634 <__aeabi_dadd+0x238>
 8001a78:	4642      	mov	r2, r8
 8001a7a:	4b14      	ldr	r3, [pc, #80]	; (8001acc <__aeabi_dadd+0x6d0>)
 8001a7c:	2601      	movs	r6, #1
 8001a7e:	401a      	ands	r2, r3
 8001a80:	4690      	mov	r8, r2
 8001a82:	e5d7      	b.n	8001634 <__aeabi_dadd+0x238>
 8001a84:	0010      	movs	r0, r2
 8001a86:	001e      	movs	r6, r3
 8001a88:	3820      	subs	r0, #32
 8001a8a:	40c6      	lsrs	r6, r0
 8001a8c:	2a20      	cmp	r2, #32
 8001a8e:	d005      	beq.n	8001a9c <__aeabi_dadd+0x6a0>
 8001a90:	2040      	movs	r0, #64	; 0x40
 8001a92:	1a82      	subs	r2, r0, r2
 8001a94:	4093      	lsls	r3, r2
 8001a96:	464a      	mov	r2, r9
 8001a98:	431a      	orrs	r2, r3
 8001a9a:	4691      	mov	r9, r2
 8001a9c:	464d      	mov	r5, r9
 8001a9e:	1e6b      	subs	r3, r5, #1
 8001aa0:	419d      	sbcs	r5, r3
 8001aa2:	4335      	orrs	r5, r6
 8001aa4:	e621      	b.n	80016ea <__aeabi_dadd+0x2ee>
 8001aa6:	0002      	movs	r2, r0
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	2100      	movs	r1, #0
 8001aac:	e540      	b.n	8001530 <__aeabi_dadd+0x134>
 8001aae:	464a      	mov	r2, r9
 8001ab0:	19d5      	adds	r5, r2, r7
 8001ab2:	42bd      	cmp	r5, r7
 8001ab4:	4189      	sbcs	r1, r1
 8001ab6:	4463      	add	r3, ip
 8001ab8:	4698      	mov	r8, r3
 8001aba:	4249      	negs	r1, r1
 8001abc:	4488      	add	r8, r1
 8001abe:	e5b3      	b.n	8001628 <__aeabi_dadd+0x22c>
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	4a01      	ldr	r2, [pc, #4]	; (8001ac8 <__aeabi_dadd+0x6cc>)
 8001ac4:	000b      	movs	r3, r1
 8001ac6:	e533      	b.n	8001530 <__aeabi_dadd+0x134>
 8001ac8:	000007ff 	.word	0x000007ff
 8001acc:	ff7fffff 	.word	0xff7fffff

08001ad0 <__aeabi_ddiv>:
 8001ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ad2:	4657      	mov	r7, sl
 8001ad4:	464e      	mov	r6, r9
 8001ad6:	4645      	mov	r5, r8
 8001ad8:	46de      	mov	lr, fp
 8001ada:	b5e0      	push	{r5, r6, r7, lr}
 8001adc:	4681      	mov	r9, r0
 8001ade:	0005      	movs	r5, r0
 8001ae0:	030c      	lsls	r4, r1, #12
 8001ae2:	0048      	lsls	r0, r1, #1
 8001ae4:	4692      	mov	sl, r2
 8001ae6:	001f      	movs	r7, r3
 8001ae8:	b085      	sub	sp, #20
 8001aea:	0b24      	lsrs	r4, r4, #12
 8001aec:	0d40      	lsrs	r0, r0, #21
 8001aee:	0fce      	lsrs	r6, r1, #31
 8001af0:	2800      	cmp	r0, #0
 8001af2:	d059      	beq.n	8001ba8 <__aeabi_ddiv+0xd8>
 8001af4:	4b87      	ldr	r3, [pc, #540]	; (8001d14 <__aeabi_ddiv+0x244>)
 8001af6:	4298      	cmp	r0, r3
 8001af8:	d100      	bne.n	8001afc <__aeabi_ddiv+0x2c>
 8001afa:	e098      	b.n	8001c2e <__aeabi_ddiv+0x15e>
 8001afc:	0f6b      	lsrs	r3, r5, #29
 8001afe:	00e4      	lsls	r4, r4, #3
 8001b00:	431c      	orrs	r4, r3
 8001b02:	2380      	movs	r3, #128	; 0x80
 8001b04:	041b      	lsls	r3, r3, #16
 8001b06:	4323      	orrs	r3, r4
 8001b08:	4698      	mov	r8, r3
 8001b0a:	4b83      	ldr	r3, [pc, #524]	; (8001d18 <__aeabi_ddiv+0x248>)
 8001b0c:	00ed      	lsls	r5, r5, #3
 8001b0e:	469b      	mov	fp, r3
 8001b10:	2300      	movs	r3, #0
 8001b12:	4699      	mov	r9, r3
 8001b14:	4483      	add	fp, r0
 8001b16:	9300      	str	r3, [sp, #0]
 8001b18:	033c      	lsls	r4, r7, #12
 8001b1a:	007b      	lsls	r3, r7, #1
 8001b1c:	4650      	mov	r0, sl
 8001b1e:	0b24      	lsrs	r4, r4, #12
 8001b20:	0d5b      	lsrs	r3, r3, #21
 8001b22:	0fff      	lsrs	r7, r7, #31
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d067      	beq.n	8001bf8 <__aeabi_ddiv+0x128>
 8001b28:	4a7a      	ldr	r2, [pc, #488]	; (8001d14 <__aeabi_ddiv+0x244>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d018      	beq.n	8001b60 <__aeabi_ddiv+0x90>
 8001b2e:	497a      	ldr	r1, [pc, #488]	; (8001d18 <__aeabi_ddiv+0x248>)
 8001b30:	0f42      	lsrs	r2, r0, #29
 8001b32:	468c      	mov	ip, r1
 8001b34:	00e4      	lsls	r4, r4, #3
 8001b36:	4659      	mov	r1, fp
 8001b38:	4314      	orrs	r4, r2
 8001b3a:	2280      	movs	r2, #128	; 0x80
 8001b3c:	4463      	add	r3, ip
 8001b3e:	0412      	lsls	r2, r2, #16
 8001b40:	1acb      	subs	r3, r1, r3
 8001b42:	4314      	orrs	r4, r2
 8001b44:	469b      	mov	fp, r3
 8001b46:	00c2      	lsls	r2, r0, #3
 8001b48:	2000      	movs	r0, #0
 8001b4a:	0033      	movs	r3, r6
 8001b4c:	407b      	eors	r3, r7
 8001b4e:	469a      	mov	sl, r3
 8001b50:	464b      	mov	r3, r9
 8001b52:	2b0f      	cmp	r3, #15
 8001b54:	d900      	bls.n	8001b58 <__aeabi_ddiv+0x88>
 8001b56:	e0ef      	b.n	8001d38 <__aeabi_ddiv+0x268>
 8001b58:	4970      	ldr	r1, [pc, #448]	; (8001d1c <__aeabi_ddiv+0x24c>)
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	58cb      	ldr	r3, [r1, r3]
 8001b5e:	469f      	mov	pc, r3
 8001b60:	4b6f      	ldr	r3, [pc, #444]	; (8001d20 <__aeabi_ddiv+0x250>)
 8001b62:	4652      	mov	r2, sl
 8001b64:	469c      	mov	ip, r3
 8001b66:	4322      	orrs	r2, r4
 8001b68:	44e3      	add	fp, ip
 8001b6a:	2a00      	cmp	r2, #0
 8001b6c:	d000      	beq.n	8001b70 <__aeabi_ddiv+0xa0>
 8001b6e:	e095      	b.n	8001c9c <__aeabi_ddiv+0x1cc>
 8001b70:	4649      	mov	r1, r9
 8001b72:	2302      	movs	r3, #2
 8001b74:	4319      	orrs	r1, r3
 8001b76:	4689      	mov	r9, r1
 8001b78:	2400      	movs	r4, #0
 8001b7a:	2002      	movs	r0, #2
 8001b7c:	e7e5      	b.n	8001b4a <__aeabi_ddiv+0x7a>
 8001b7e:	2300      	movs	r3, #0
 8001b80:	2400      	movs	r4, #0
 8001b82:	2500      	movs	r5, #0
 8001b84:	4652      	mov	r2, sl
 8001b86:	051b      	lsls	r3, r3, #20
 8001b88:	4323      	orrs	r3, r4
 8001b8a:	07d2      	lsls	r2, r2, #31
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	0028      	movs	r0, r5
 8001b90:	0019      	movs	r1, r3
 8001b92:	b005      	add	sp, #20
 8001b94:	bcf0      	pop	{r4, r5, r6, r7}
 8001b96:	46bb      	mov	fp, r7
 8001b98:	46b2      	mov	sl, r6
 8001b9a:	46a9      	mov	r9, r5
 8001b9c:	46a0      	mov	r8, r4
 8001b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ba0:	2400      	movs	r4, #0
 8001ba2:	2500      	movs	r5, #0
 8001ba4:	4b5b      	ldr	r3, [pc, #364]	; (8001d14 <__aeabi_ddiv+0x244>)
 8001ba6:	e7ed      	b.n	8001b84 <__aeabi_ddiv+0xb4>
 8001ba8:	464b      	mov	r3, r9
 8001baa:	4323      	orrs	r3, r4
 8001bac:	4698      	mov	r8, r3
 8001bae:	d100      	bne.n	8001bb2 <__aeabi_ddiv+0xe2>
 8001bb0:	e089      	b.n	8001cc6 <__aeabi_ddiv+0x1f6>
 8001bb2:	2c00      	cmp	r4, #0
 8001bb4:	d100      	bne.n	8001bb8 <__aeabi_ddiv+0xe8>
 8001bb6:	e1e0      	b.n	8001f7a <__aeabi_ddiv+0x4aa>
 8001bb8:	0020      	movs	r0, r4
 8001bba:	f001 fb07 	bl	80031cc <__clzsi2>
 8001bbe:	0001      	movs	r1, r0
 8001bc0:	0002      	movs	r2, r0
 8001bc2:	390b      	subs	r1, #11
 8001bc4:	231d      	movs	r3, #29
 8001bc6:	1a5b      	subs	r3, r3, r1
 8001bc8:	4649      	mov	r1, r9
 8001bca:	0010      	movs	r0, r2
 8001bcc:	40d9      	lsrs	r1, r3
 8001bce:	3808      	subs	r0, #8
 8001bd0:	4084      	lsls	r4, r0
 8001bd2:	000b      	movs	r3, r1
 8001bd4:	464d      	mov	r5, r9
 8001bd6:	4323      	orrs	r3, r4
 8001bd8:	4698      	mov	r8, r3
 8001bda:	4085      	lsls	r5, r0
 8001bdc:	4851      	ldr	r0, [pc, #324]	; (8001d24 <__aeabi_ddiv+0x254>)
 8001bde:	033c      	lsls	r4, r7, #12
 8001be0:	1a83      	subs	r3, r0, r2
 8001be2:	469b      	mov	fp, r3
 8001be4:	2300      	movs	r3, #0
 8001be6:	4699      	mov	r9, r3
 8001be8:	9300      	str	r3, [sp, #0]
 8001bea:	007b      	lsls	r3, r7, #1
 8001bec:	4650      	mov	r0, sl
 8001bee:	0b24      	lsrs	r4, r4, #12
 8001bf0:	0d5b      	lsrs	r3, r3, #21
 8001bf2:	0fff      	lsrs	r7, r7, #31
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d197      	bne.n	8001b28 <__aeabi_ddiv+0x58>
 8001bf8:	4652      	mov	r2, sl
 8001bfa:	4322      	orrs	r2, r4
 8001bfc:	d055      	beq.n	8001caa <__aeabi_ddiv+0x1da>
 8001bfe:	2c00      	cmp	r4, #0
 8001c00:	d100      	bne.n	8001c04 <__aeabi_ddiv+0x134>
 8001c02:	e1ca      	b.n	8001f9a <__aeabi_ddiv+0x4ca>
 8001c04:	0020      	movs	r0, r4
 8001c06:	f001 fae1 	bl	80031cc <__clzsi2>
 8001c0a:	0002      	movs	r2, r0
 8001c0c:	3a0b      	subs	r2, #11
 8001c0e:	231d      	movs	r3, #29
 8001c10:	0001      	movs	r1, r0
 8001c12:	1a9b      	subs	r3, r3, r2
 8001c14:	4652      	mov	r2, sl
 8001c16:	3908      	subs	r1, #8
 8001c18:	40da      	lsrs	r2, r3
 8001c1a:	408c      	lsls	r4, r1
 8001c1c:	4314      	orrs	r4, r2
 8001c1e:	4652      	mov	r2, sl
 8001c20:	408a      	lsls	r2, r1
 8001c22:	4b41      	ldr	r3, [pc, #260]	; (8001d28 <__aeabi_ddiv+0x258>)
 8001c24:	4458      	add	r0, fp
 8001c26:	469b      	mov	fp, r3
 8001c28:	4483      	add	fp, r0
 8001c2a:	2000      	movs	r0, #0
 8001c2c:	e78d      	b.n	8001b4a <__aeabi_ddiv+0x7a>
 8001c2e:	464b      	mov	r3, r9
 8001c30:	4323      	orrs	r3, r4
 8001c32:	4698      	mov	r8, r3
 8001c34:	d140      	bne.n	8001cb8 <__aeabi_ddiv+0x1e8>
 8001c36:	2308      	movs	r3, #8
 8001c38:	4699      	mov	r9, r3
 8001c3a:	3b06      	subs	r3, #6
 8001c3c:	2500      	movs	r5, #0
 8001c3e:	4683      	mov	fp, r0
 8001c40:	9300      	str	r3, [sp, #0]
 8001c42:	e769      	b.n	8001b18 <__aeabi_ddiv+0x48>
 8001c44:	46b2      	mov	sl, r6
 8001c46:	9b00      	ldr	r3, [sp, #0]
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d0a9      	beq.n	8001ba0 <__aeabi_ddiv+0xd0>
 8001c4c:	2b03      	cmp	r3, #3
 8001c4e:	d100      	bne.n	8001c52 <__aeabi_ddiv+0x182>
 8001c50:	e211      	b.n	8002076 <__aeabi_ddiv+0x5a6>
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d093      	beq.n	8001b7e <__aeabi_ddiv+0xae>
 8001c56:	4a35      	ldr	r2, [pc, #212]	; (8001d2c <__aeabi_ddiv+0x25c>)
 8001c58:	445a      	add	r2, fp
 8001c5a:	2a00      	cmp	r2, #0
 8001c5c:	dc00      	bgt.n	8001c60 <__aeabi_ddiv+0x190>
 8001c5e:	e13c      	b.n	8001eda <__aeabi_ddiv+0x40a>
 8001c60:	076b      	lsls	r3, r5, #29
 8001c62:	d000      	beq.n	8001c66 <__aeabi_ddiv+0x196>
 8001c64:	e1a7      	b.n	8001fb6 <__aeabi_ddiv+0x4e6>
 8001c66:	08ed      	lsrs	r5, r5, #3
 8001c68:	4643      	mov	r3, r8
 8001c6a:	01db      	lsls	r3, r3, #7
 8001c6c:	d506      	bpl.n	8001c7c <__aeabi_ddiv+0x1ac>
 8001c6e:	4642      	mov	r2, r8
 8001c70:	4b2f      	ldr	r3, [pc, #188]	; (8001d30 <__aeabi_ddiv+0x260>)
 8001c72:	401a      	ands	r2, r3
 8001c74:	4690      	mov	r8, r2
 8001c76:	2280      	movs	r2, #128	; 0x80
 8001c78:	00d2      	lsls	r2, r2, #3
 8001c7a:	445a      	add	r2, fp
 8001c7c:	4b2d      	ldr	r3, [pc, #180]	; (8001d34 <__aeabi_ddiv+0x264>)
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	dc8e      	bgt.n	8001ba0 <__aeabi_ddiv+0xd0>
 8001c82:	4643      	mov	r3, r8
 8001c84:	0552      	lsls	r2, r2, #21
 8001c86:	0758      	lsls	r0, r3, #29
 8001c88:	025c      	lsls	r4, r3, #9
 8001c8a:	4305      	orrs	r5, r0
 8001c8c:	0b24      	lsrs	r4, r4, #12
 8001c8e:	0d53      	lsrs	r3, r2, #21
 8001c90:	e778      	b.n	8001b84 <__aeabi_ddiv+0xb4>
 8001c92:	46ba      	mov	sl, r7
 8001c94:	46a0      	mov	r8, r4
 8001c96:	0015      	movs	r5, r2
 8001c98:	9000      	str	r0, [sp, #0]
 8001c9a:	e7d4      	b.n	8001c46 <__aeabi_ddiv+0x176>
 8001c9c:	464a      	mov	r2, r9
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	431a      	orrs	r2, r3
 8001ca2:	4691      	mov	r9, r2
 8001ca4:	2003      	movs	r0, #3
 8001ca6:	4652      	mov	r2, sl
 8001ca8:	e74f      	b.n	8001b4a <__aeabi_ddiv+0x7a>
 8001caa:	4649      	mov	r1, r9
 8001cac:	2301      	movs	r3, #1
 8001cae:	4319      	orrs	r1, r3
 8001cb0:	4689      	mov	r9, r1
 8001cb2:	2400      	movs	r4, #0
 8001cb4:	2001      	movs	r0, #1
 8001cb6:	e748      	b.n	8001b4a <__aeabi_ddiv+0x7a>
 8001cb8:	230c      	movs	r3, #12
 8001cba:	4699      	mov	r9, r3
 8001cbc:	3b09      	subs	r3, #9
 8001cbe:	46a0      	mov	r8, r4
 8001cc0:	4683      	mov	fp, r0
 8001cc2:	9300      	str	r3, [sp, #0]
 8001cc4:	e728      	b.n	8001b18 <__aeabi_ddiv+0x48>
 8001cc6:	2304      	movs	r3, #4
 8001cc8:	4699      	mov	r9, r3
 8001cca:	2300      	movs	r3, #0
 8001ccc:	469b      	mov	fp, r3
 8001cce:	3301      	adds	r3, #1
 8001cd0:	2500      	movs	r5, #0
 8001cd2:	9300      	str	r3, [sp, #0]
 8001cd4:	e720      	b.n	8001b18 <__aeabi_ddiv+0x48>
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	2480      	movs	r4, #128	; 0x80
 8001cda:	469a      	mov	sl, r3
 8001cdc:	2500      	movs	r5, #0
 8001cde:	4b0d      	ldr	r3, [pc, #52]	; (8001d14 <__aeabi_ddiv+0x244>)
 8001ce0:	0324      	lsls	r4, r4, #12
 8001ce2:	e74f      	b.n	8001b84 <__aeabi_ddiv+0xb4>
 8001ce4:	2380      	movs	r3, #128	; 0x80
 8001ce6:	4641      	mov	r1, r8
 8001ce8:	031b      	lsls	r3, r3, #12
 8001cea:	4219      	tst	r1, r3
 8001cec:	d008      	beq.n	8001d00 <__aeabi_ddiv+0x230>
 8001cee:	421c      	tst	r4, r3
 8001cf0:	d106      	bne.n	8001d00 <__aeabi_ddiv+0x230>
 8001cf2:	431c      	orrs	r4, r3
 8001cf4:	0324      	lsls	r4, r4, #12
 8001cf6:	46ba      	mov	sl, r7
 8001cf8:	0015      	movs	r5, r2
 8001cfa:	4b06      	ldr	r3, [pc, #24]	; (8001d14 <__aeabi_ddiv+0x244>)
 8001cfc:	0b24      	lsrs	r4, r4, #12
 8001cfe:	e741      	b.n	8001b84 <__aeabi_ddiv+0xb4>
 8001d00:	2480      	movs	r4, #128	; 0x80
 8001d02:	4643      	mov	r3, r8
 8001d04:	0324      	lsls	r4, r4, #12
 8001d06:	431c      	orrs	r4, r3
 8001d08:	0324      	lsls	r4, r4, #12
 8001d0a:	46b2      	mov	sl, r6
 8001d0c:	4b01      	ldr	r3, [pc, #4]	; (8001d14 <__aeabi_ddiv+0x244>)
 8001d0e:	0b24      	lsrs	r4, r4, #12
 8001d10:	e738      	b.n	8001b84 <__aeabi_ddiv+0xb4>
 8001d12:	46c0      	nop			; (mov r8, r8)
 8001d14:	000007ff 	.word	0x000007ff
 8001d18:	fffffc01 	.word	0xfffffc01
 8001d1c:	0800b518 	.word	0x0800b518
 8001d20:	fffff801 	.word	0xfffff801
 8001d24:	fffffc0d 	.word	0xfffffc0d
 8001d28:	000003f3 	.word	0x000003f3
 8001d2c:	000003ff 	.word	0x000003ff
 8001d30:	feffffff 	.word	0xfeffffff
 8001d34:	000007fe 	.word	0x000007fe
 8001d38:	4544      	cmp	r4, r8
 8001d3a:	d200      	bcs.n	8001d3e <__aeabi_ddiv+0x26e>
 8001d3c:	e116      	b.n	8001f6c <__aeabi_ddiv+0x49c>
 8001d3e:	d100      	bne.n	8001d42 <__aeabi_ddiv+0x272>
 8001d40:	e111      	b.n	8001f66 <__aeabi_ddiv+0x496>
 8001d42:	2301      	movs	r3, #1
 8001d44:	425b      	negs	r3, r3
 8001d46:	469c      	mov	ip, r3
 8001d48:	002e      	movs	r6, r5
 8001d4a:	4640      	mov	r0, r8
 8001d4c:	2500      	movs	r5, #0
 8001d4e:	44e3      	add	fp, ip
 8001d50:	0223      	lsls	r3, r4, #8
 8001d52:	0e14      	lsrs	r4, r2, #24
 8001d54:	431c      	orrs	r4, r3
 8001d56:	0c1b      	lsrs	r3, r3, #16
 8001d58:	4699      	mov	r9, r3
 8001d5a:	0423      	lsls	r3, r4, #16
 8001d5c:	0c1f      	lsrs	r7, r3, #16
 8001d5e:	0212      	lsls	r2, r2, #8
 8001d60:	4649      	mov	r1, r9
 8001d62:	9200      	str	r2, [sp, #0]
 8001d64:	9701      	str	r7, [sp, #4]
 8001d66:	f7fe fa6f 	bl	8000248 <__aeabi_uidivmod>
 8001d6a:	0002      	movs	r2, r0
 8001d6c:	437a      	muls	r2, r7
 8001d6e:	040b      	lsls	r3, r1, #16
 8001d70:	0c31      	lsrs	r1, r6, #16
 8001d72:	4680      	mov	r8, r0
 8001d74:	4319      	orrs	r1, r3
 8001d76:	428a      	cmp	r2, r1
 8001d78:	d90b      	bls.n	8001d92 <__aeabi_ddiv+0x2c2>
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	425b      	negs	r3, r3
 8001d7e:	469c      	mov	ip, r3
 8001d80:	1909      	adds	r1, r1, r4
 8001d82:	44e0      	add	r8, ip
 8001d84:	428c      	cmp	r4, r1
 8001d86:	d804      	bhi.n	8001d92 <__aeabi_ddiv+0x2c2>
 8001d88:	428a      	cmp	r2, r1
 8001d8a:	d902      	bls.n	8001d92 <__aeabi_ddiv+0x2c2>
 8001d8c:	1e83      	subs	r3, r0, #2
 8001d8e:	4698      	mov	r8, r3
 8001d90:	1909      	adds	r1, r1, r4
 8001d92:	1a88      	subs	r0, r1, r2
 8001d94:	4649      	mov	r1, r9
 8001d96:	f7fe fa57 	bl	8000248 <__aeabi_uidivmod>
 8001d9a:	0409      	lsls	r1, r1, #16
 8001d9c:	468c      	mov	ip, r1
 8001d9e:	0431      	lsls	r1, r6, #16
 8001da0:	4666      	mov	r6, ip
 8001da2:	9a01      	ldr	r2, [sp, #4]
 8001da4:	0c09      	lsrs	r1, r1, #16
 8001da6:	4342      	muls	r2, r0
 8001da8:	0003      	movs	r3, r0
 8001daa:	4331      	orrs	r1, r6
 8001dac:	428a      	cmp	r2, r1
 8001dae:	d904      	bls.n	8001dba <__aeabi_ddiv+0x2ea>
 8001db0:	1909      	adds	r1, r1, r4
 8001db2:	3b01      	subs	r3, #1
 8001db4:	428c      	cmp	r4, r1
 8001db6:	d800      	bhi.n	8001dba <__aeabi_ddiv+0x2ea>
 8001db8:	e111      	b.n	8001fde <__aeabi_ddiv+0x50e>
 8001dba:	1a89      	subs	r1, r1, r2
 8001dbc:	4642      	mov	r2, r8
 8001dbe:	9e00      	ldr	r6, [sp, #0]
 8001dc0:	0412      	lsls	r2, r2, #16
 8001dc2:	431a      	orrs	r2, r3
 8001dc4:	0c33      	lsrs	r3, r6, #16
 8001dc6:	001f      	movs	r7, r3
 8001dc8:	0c10      	lsrs	r0, r2, #16
 8001dca:	4690      	mov	r8, r2
 8001dcc:	9302      	str	r3, [sp, #8]
 8001dce:	0413      	lsls	r3, r2, #16
 8001dd0:	0432      	lsls	r2, r6, #16
 8001dd2:	0c16      	lsrs	r6, r2, #16
 8001dd4:	0032      	movs	r2, r6
 8001dd6:	0c1b      	lsrs	r3, r3, #16
 8001dd8:	435a      	muls	r2, r3
 8001dda:	9603      	str	r6, [sp, #12]
 8001ddc:	437b      	muls	r3, r7
 8001dde:	4346      	muls	r6, r0
 8001de0:	4378      	muls	r0, r7
 8001de2:	0c17      	lsrs	r7, r2, #16
 8001de4:	46bc      	mov	ip, r7
 8001de6:	199b      	adds	r3, r3, r6
 8001de8:	4463      	add	r3, ip
 8001dea:	429e      	cmp	r6, r3
 8001dec:	d903      	bls.n	8001df6 <__aeabi_ddiv+0x326>
 8001dee:	2680      	movs	r6, #128	; 0x80
 8001df0:	0276      	lsls	r6, r6, #9
 8001df2:	46b4      	mov	ip, r6
 8001df4:	4460      	add	r0, ip
 8001df6:	0c1e      	lsrs	r6, r3, #16
 8001df8:	1830      	adds	r0, r6, r0
 8001dfa:	0416      	lsls	r6, r2, #16
 8001dfc:	041b      	lsls	r3, r3, #16
 8001dfe:	0c36      	lsrs	r6, r6, #16
 8001e00:	199e      	adds	r6, r3, r6
 8001e02:	4281      	cmp	r1, r0
 8001e04:	d200      	bcs.n	8001e08 <__aeabi_ddiv+0x338>
 8001e06:	e09c      	b.n	8001f42 <__aeabi_ddiv+0x472>
 8001e08:	d100      	bne.n	8001e0c <__aeabi_ddiv+0x33c>
 8001e0a:	e097      	b.n	8001f3c <__aeabi_ddiv+0x46c>
 8001e0c:	1bae      	subs	r6, r5, r6
 8001e0e:	1a09      	subs	r1, r1, r0
 8001e10:	42b5      	cmp	r5, r6
 8001e12:	4180      	sbcs	r0, r0
 8001e14:	4240      	negs	r0, r0
 8001e16:	1a08      	subs	r0, r1, r0
 8001e18:	4284      	cmp	r4, r0
 8001e1a:	d100      	bne.n	8001e1e <__aeabi_ddiv+0x34e>
 8001e1c:	e111      	b.n	8002042 <__aeabi_ddiv+0x572>
 8001e1e:	4649      	mov	r1, r9
 8001e20:	f7fe fa12 	bl	8000248 <__aeabi_uidivmod>
 8001e24:	9a01      	ldr	r2, [sp, #4]
 8001e26:	040b      	lsls	r3, r1, #16
 8001e28:	4342      	muls	r2, r0
 8001e2a:	0c31      	lsrs	r1, r6, #16
 8001e2c:	0005      	movs	r5, r0
 8001e2e:	4319      	orrs	r1, r3
 8001e30:	428a      	cmp	r2, r1
 8001e32:	d907      	bls.n	8001e44 <__aeabi_ddiv+0x374>
 8001e34:	1909      	adds	r1, r1, r4
 8001e36:	3d01      	subs	r5, #1
 8001e38:	428c      	cmp	r4, r1
 8001e3a:	d803      	bhi.n	8001e44 <__aeabi_ddiv+0x374>
 8001e3c:	428a      	cmp	r2, r1
 8001e3e:	d901      	bls.n	8001e44 <__aeabi_ddiv+0x374>
 8001e40:	1e85      	subs	r5, r0, #2
 8001e42:	1909      	adds	r1, r1, r4
 8001e44:	1a88      	subs	r0, r1, r2
 8001e46:	4649      	mov	r1, r9
 8001e48:	f7fe f9fe 	bl	8000248 <__aeabi_uidivmod>
 8001e4c:	0409      	lsls	r1, r1, #16
 8001e4e:	468c      	mov	ip, r1
 8001e50:	0431      	lsls	r1, r6, #16
 8001e52:	4666      	mov	r6, ip
 8001e54:	9a01      	ldr	r2, [sp, #4]
 8001e56:	0c09      	lsrs	r1, r1, #16
 8001e58:	4342      	muls	r2, r0
 8001e5a:	0003      	movs	r3, r0
 8001e5c:	4331      	orrs	r1, r6
 8001e5e:	428a      	cmp	r2, r1
 8001e60:	d907      	bls.n	8001e72 <__aeabi_ddiv+0x3a2>
 8001e62:	1909      	adds	r1, r1, r4
 8001e64:	3b01      	subs	r3, #1
 8001e66:	428c      	cmp	r4, r1
 8001e68:	d803      	bhi.n	8001e72 <__aeabi_ddiv+0x3a2>
 8001e6a:	428a      	cmp	r2, r1
 8001e6c:	d901      	bls.n	8001e72 <__aeabi_ddiv+0x3a2>
 8001e6e:	1e83      	subs	r3, r0, #2
 8001e70:	1909      	adds	r1, r1, r4
 8001e72:	9e03      	ldr	r6, [sp, #12]
 8001e74:	1a89      	subs	r1, r1, r2
 8001e76:	0032      	movs	r2, r6
 8001e78:	042d      	lsls	r5, r5, #16
 8001e7a:	431d      	orrs	r5, r3
 8001e7c:	9f02      	ldr	r7, [sp, #8]
 8001e7e:	042b      	lsls	r3, r5, #16
 8001e80:	0c1b      	lsrs	r3, r3, #16
 8001e82:	435a      	muls	r2, r3
 8001e84:	437b      	muls	r3, r7
 8001e86:	469c      	mov	ip, r3
 8001e88:	0c28      	lsrs	r0, r5, #16
 8001e8a:	4346      	muls	r6, r0
 8001e8c:	0c13      	lsrs	r3, r2, #16
 8001e8e:	44b4      	add	ip, r6
 8001e90:	4463      	add	r3, ip
 8001e92:	4378      	muls	r0, r7
 8001e94:	429e      	cmp	r6, r3
 8001e96:	d903      	bls.n	8001ea0 <__aeabi_ddiv+0x3d0>
 8001e98:	2680      	movs	r6, #128	; 0x80
 8001e9a:	0276      	lsls	r6, r6, #9
 8001e9c:	46b4      	mov	ip, r6
 8001e9e:	4460      	add	r0, ip
 8001ea0:	0c1e      	lsrs	r6, r3, #16
 8001ea2:	0412      	lsls	r2, r2, #16
 8001ea4:	041b      	lsls	r3, r3, #16
 8001ea6:	0c12      	lsrs	r2, r2, #16
 8001ea8:	1830      	adds	r0, r6, r0
 8001eaa:	189b      	adds	r3, r3, r2
 8001eac:	4281      	cmp	r1, r0
 8001eae:	d306      	bcc.n	8001ebe <__aeabi_ddiv+0x3ee>
 8001eb0:	d002      	beq.n	8001eb8 <__aeabi_ddiv+0x3e8>
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	431d      	orrs	r5, r3
 8001eb6:	e6ce      	b.n	8001c56 <__aeabi_ddiv+0x186>
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d100      	bne.n	8001ebe <__aeabi_ddiv+0x3ee>
 8001ebc:	e6cb      	b.n	8001c56 <__aeabi_ddiv+0x186>
 8001ebe:	1861      	adds	r1, r4, r1
 8001ec0:	1e6e      	subs	r6, r5, #1
 8001ec2:	42a1      	cmp	r1, r4
 8001ec4:	d200      	bcs.n	8001ec8 <__aeabi_ddiv+0x3f8>
 8001ec6:	e0a4      	b.n	8002012 <__aeabi_ddiv+0x542>
 8001ec8:	4281      	cmp	r1, r0
 8001eca:	d200      	bcs.n	8001ece <__aeabi_ddiv+0x3fe>
 8001ecc:	e0c9      	b.n	8002062 <__aeabi_ddiv+0x592>
 8001ece:	d100      	bne.n	8001ed2 <__aeabi_ddiv+0x402>
 8001ed0:	e0d9      	b.n	8002086 <__aeabi_ddiv+0x5b6>
 8001ed2:	0035      	movs	r5, r6
 8001ed4:	e7ed      	b.n	8001eb2 <__aeabi_ddiv+0x3e2>
 8001ed6:	2501      	movs	r5, #1
 8001ed8:	426d      	negs	r5, r5
 8001eda:	2101      	movs	r1, #1
 8001edc:	1a89      	subs	r1, r1, r2
 8001ede:	2938      	cmp	r1, #56	; 0x38
 8001ee0:	dd00      	ble.n	8001ee4 <__aeabi_ddiv+0x414>
 8001ee2:	e64c      	b.n	8001b7e <__aeabi_ddiv+0xae>
 8001ee4:	291f      	cmp	r1, #31
 8001ee6:	dc00      	bgt.n	8001eea <__aeabi_ddiv+0x41a>
 8001ee8:	e07f      	b.n	8001fea <__aeabi_ddiv+0x51a>
 8001eea:	231f      	movs	r3, #31
 8001eec:	425b      	negs	r3, r3
 8001eee:	1a9a      	subs	r2, r3, r2
 8001ef0:	4643      	mov	r3, r8
 8001ef2:	40d3      	lsrs	r3, r2
 8001ef4:	2920      	cmp	r1, #32
 8001ef6:	d004      	beq.n	8001f02 <__aeabi_ddiv+0x432>
 8001ef8:	4644      	mov	r4, r8
 8001efa:	4a65      	ldr	r2, [pc, #404]	; (8002090 <__aeabi_ddiv+0x5c0>)
 8001efc:	445a      	add	r2, fp
 8001efe:	4094      	lsls	r4, r2
 8001f00:	4325      	orrs	r5, r4
 8001f02:	1e6a      	subs	r2, r5, #1
 8001f04:	4195      	sbcs	r5, r2
 8001f06:	2207      	movs	r2, #7
 8001f08:	432b      	orrs	r3, r5
 8001f0a:	0015      	movs	r5, r2
 8001f0c:	2400      	movs	r4, #0
 8001f0e:	401d      	ands	r5, r3
 8001f10:	421a      	tst	r2, r3
 8001f12:	d100      	bne.n	8001f16 <__aeabi_ddiv+0x446>
 8001f14:	e0a1      	b.n	800205a <__aeabi_ddiv+0x58a>
 8001f16:	220f      	movs	r2, #15
 8001f18:	2400      	movs	r4, #0
 8001f1a:	401a      	ands	r2, r3
 8001f1c:	2a04      	cmp	r2, #4
 8001f1e:	d100      	bne.n	8001f22 <__aeabi_ddiv+0x452>
 8001f20:	e098      	b.n	8002054 <__aeabi_ddiv+0x584>
 8001f22:	1d1a      	adds	r2, r3, #4
 8001f24:	429a      	cmp	r2, r3
 8001f26:	419b      	sbcs	r3, r3
 8001f28:	425b      	negs	r3, r3
 8001f2a:	18e4      	adds	r4, r4, r3
 8001f2c:	0013      	movs	r3, r2
 8001f2e:	0222      	lsls	r2, r4, #8
 8001f30:	d400      	bmi.n	8001f34 <__aeabi_ddiv+0x464>
 8001f32:	e08f      	b.n	8002054 <__aeabi_ddiv+0x584>
 8001f34:	2301      	movs	r3, #1
 8001f36:	2400      	movs	r4, #0
 8001f38:	2500      	movs	r5, #0
 8001f3a:	e623      	b.n	8001b84 <__aeabi_ddiv+0xb4>
 8001f3c:	42b5      	cmp	r5, r6
 8001f3e:	d300      	bcc.n	8001f42 <__aeabi_ddiv+0x472>
 8001f40:	e764      	b.n	8001e0c <__aeabi_ddiv+0x33c>
 8001f42:	4643      	mov	r3, r8
 8001f44:	1e5a      	subs	r2, r3, #1
 8001f46:	9b00      	ldr	r3, [sp, #0]
 8001f48:	469c      	mov	ip, r3
 8001f4a:	4465      	add	r5, ip
 8001f4c:	001f      	movs	r7, r3
 8001f4e:	429d      	cmp	r5, r3
 8001f50:	419b      	sbcs	r3, r3
 8001f52:	425b      	negs	r3, r3
 8001f54:	191b      	adds	r3, r3, r4
 8001f56:	18c9      	adds	r1, r1, r3
 8001f58:	428c      	cmp	r4, r1
 8001f5a:	d23a      	bcs.n	8001fd2 <__aeabi_ddiv+0x502>
 8001f5c:	4288      	cmp	r0, r1
 8001f5e:	d863      	bhi.n	8002028 <__aeabi_ddiv+0x558>
 8001f60:	d060      	beq.n	8002024 <__aeabi_ddiv+0x554>
 8001f62:	4690      	mov	r8, r2
 8001f64:	e752      	b.n	8001e0c <__aeabi_ddiv+0x33c>
 8001f66:	42aa      	cmp	r2, r5
 8001f68:	d900      	bls.n	8001f6c <__aeabi_ddiv+0x49c>
 8001f6a:	e6ea      	b.n	8001d42 <__aeabi_ddiv+0x272>
 8001f6c:	4643      	mov	r3, r8
 8001f6e:	07de      	lsls	r6, r3, #31
 8001f70:	0858      	lsrs	r0, r3, #1
 8001f72:	086b      	lsrs	r3, r5, #1
 8001f74:	431e      	orrs	r6, r3
 8001f76:	07ed      	lsls	r5, r5, #31
 8001f78:	e6ea      	b.n	8001d50 <__aeabi_ddiv+0x280>
 8001f7a:	4648      	mov	r0, r9
 8001f7c:	f001 f926 	bl	80031cc <__clzsi2>
 8001f80:	0001      	movs	r1, r0
 8001f82:	0002      	movs	r2, r0
 8001f84:	3115      	adds	r1, #21
 8001f86:	3220      	adds	r2, #32
 8001f88:	291c      	cmp	r1, #28
 8001f8a:	dc00      	bgt.n	8001f8e <__aeabi_ddiv+0x4be>
 8001f8c:	e61a      	b.n	8001bc4 <__aeabi_ddiv+0xf4>
 8001f8e:	464b      	mov	r3, r9
 8001f90:	3808      	subs	r0, #8
 8001f92:	4083      	lsls	r3, r0
 8001f94:	2500      	movs	r5, #0
 8001f96:	4698      	mov	r8, r3
 8001f98:	e620      	b.n	8001bdc <__aeabi_ddiv+0x10c>
 8001f9a:	f001 f917 	bl	80031cc <__clzsi2>
 8001f9e:	0003      	movs	r3, r0
 8001fa0:	001a      	movs	r2, r3
 8001fa2:	3215      	adds	r2, #21
 8001fa4:	3020      	adds	r0, #32
 8001fa6:	2a1c      	cmp	r2, #28
 8001fa8:	dc00      	bgt.n	8001fac <__aeabi_ddiv+0x4dc>
 8001faa:	e630      	b.n	8001c0e <__aeabi_ddiv+0x13e>
 8001fac:	4654      	mov	r4, sl
 8001fae:	3b08      	subs	r3, #8
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	409c      	lsls	r4, r3
 8001fb4:	e635      	b.n	8001c22 <__aeabi_ddiv+0x152>
 8001fb6:	230f      	movs	r3, #15
 8001fb8:	402b      	ands	r3, r5
 8001fba:	2b04      	cmp	r3, #4
 8001fbc:	d100      	bne.n	8001fc0 <__aeabi_ddiv+0x4f0>
 8001fbe:	e652      	b.n	8001c66 <__aeabi_ddiv+0x196>
 8001fc0:	2305      	movs	r3, #5
 8001fc2:	425b      	negs	r3, r3
 8001fc4:	42ab      	cmp	r3, r5
 8001fc6:	419b      	sbcs	r3, r3
 8001fc8:	3504      	adds	r5, #4
 8001fca:	425b      	negs	r3, r3
 8001fcc:	08ed      	lsrs	r5, r5, #3
 8001fce:	4498      	add	r8, r3
 8001fd0:	e64a      	b.n	8001c68 <__aeabi_ddiv+0x198>
 8001fd2:	428c      	cmp	r4, r1
 8001fd4:	d1c5      	bne.n	8001f62 <__aeabi_ddiv+0x492>
 8001fd6:	42af      	cmp	r7, r5
 8001fd8:	d9c0      	bls.n	8001f5c <__aeabi_ddiv+0x48c>
 8001fda:	4690      	mov	r8, r2
 8001fdc:	e716      	b.n	8001e0c <__aeabi_ddiv+0x33c>
 8001fde:	428a      	cmp	r2, r1
 8001fe0:	d800      	bhi.n	8001fe4 <__aeabi_ddiv+0x514>
 8001fe2:	e6ea      	b.n	8001dba <__aeabi_ddiv+0x2ea>
 8001fe4:	1e83      	subs	r3, r0, #2
 8001fe6:	1909      	adds	r1, r1, r4
 8001fe8:	e6e7      	b.n	8001dba <__aeabi_ddiv+0x2ea>
 8001fea:	4a2a      	ldr	r2, [pc, #168]	; (8002094 <__aeabi_ddiv+0x5c4>)
 8001fec:	0028      	movs	r0, r5
 8001fee:	445a      	add	r2, fp
 8001ff0:	4643      	mov	r3, r8
 8001ff2:	4095      	lsls	r5, r2
 8001ff4:	4093      	lsls	r3, r2
 8001ff6:	40c8      	lsrs	r0, r1
 8001ff8:	1e6a      	subs	r2, r5, #1
 8001ffa:	4195      	sbcs	r5, r2
 8001ffc:	4644      	mov	r4, r8
 8001ffe:	4303      	orrs	r3, r0
 8002000:	432b      	orrs	r3, r5
 8002002:	40cc      	lsrs	r4, r1
 8002004:	075a      	lsls	r2, r3, #29
 8002006:	d092      	beq.n	8001f2e <__aeabi_ddiv+0x45e>
 8002008:	220f      	movs	r2, #15
 800200a:	401a      	ands	r2, r3
 800200c:	2a04      	cmp	r2, #4
 800200e:	d188      	bne.n	8001f22 <__aeabi_ddiv+0x452>
 8002010:	e78d      	b.n	8001f2e <__aeabi_ddiv+0x45e>
 8002012:	0035      	movs	r5, r6
 8002014:	4281      	cmp	r1, r0
 8002016:	d000      	beq.n	800201a <__aeabi_ddiv+0x54a>
 8002018:	e74b      	b.n	8001eb2 <__aeabi_ddiv+0x3e2>
 800201a:	9a00      	ldr	r2, [sp, #0]
 800201c:	4293      	cmp	r3, r2
 800201e:	d000      	beq.n	8002022 <__aeabi_ddiv+0x552>
 8002020:	e747      	b.n	8001eb2 <__aeabi_ddiv+0x3e2>
 8002022:	e618      	b.n	8001c56 <__aeabi_ddiv+0x186>
 8002024:	42ae      	cmp	r6, r5
 8002026:	d99c      	bls.n	8001f62 <__aeabi_ddiv+0x492>
 8002028:	2302      	movs	r3, #2
 800202a:	425b      	negs	r3, r3
 800202c:	469c      	mov	ip, r3
 800202e:	9b00      	ldr	r3, [sp, #0]
 8002030:	44e0      	add	r8, ip
 8002032:	469c      	mov	ip, r3
 8002034:	4465      	add	r5, ip
 8002036:	429d      	cmp	r5, r3
 8002038:	419b      	sbcs	r3, r3
 800203a:	425b      	negs	r3, r3
 800203c:	191b      	adds	r3, r3, r4
 800203e:	18c9      	adds	r1, r1, r3
 8002040:	e6e4      	b.n	8001e0c <__aeabi_ddiv+0x33c>
 8002042:	4a15      	ldr	r2, [pc, #84]	; (8002098 <__aeabi_ddiv+0x5c8>)
 8002044:	445a      	add	r2, fp
 8002046:	2a00      	cmp	r2, #0
 8002048:	dc00      	bgt.n	800204c <__aeabi_ddiv+0x57c>
 800204a:	e744      	b.n	8001ed6 <__aeabi_ddiv+0x406>
 800204c:	2301      	movs	r3, #1
 800204e:	2500      	movs	r5, #0
 8002050:	4498      	add	r8, r3
 8002052:	e609      	b.n	8001c68 <__aeabi_ddiv+0x198>
 8002054:	0765      	lsls	r5, r4, #29
 8002056:	0264      	lsls	r4, r4, #9
 8002058:	0b24      	lsrs	r4, r4, #12
 800205a:	08db      	lsrs	r3, r3, #3
 800205c:	431d      	orrs	r5, r3
 800205e:	2300      	movs	r3, #0
 8002060:	e590      	b.n	8001b84 <__aeabi_ddiv+0xb4>
 8002062:	9e00      	ldr	r6, [sp, #0]
 8002064:	3d02      	subs	r5, #2
 8002066:	0072      	lsls	r2, r6, #1
 8002068:	42b2      	cmp	r2, r6
 800206a:	41bf      	sbcs	r7, r7
 800206c:	427f      	negs	r7, r7
 800206e:	193c      	adds	r4, r7, r4
 8002070:	1909      	adds	r1, r1, r4
 8002072:	9200      	str	r2, [sp, #0]
 8002074:	e7ce      	b.n	8002014 <__aeabi_ddiv+0x544>
 8002076:	2480      	movs	r4, #128	; 0x80
 8002078:	4643      	mov	r3, r8
 800207a:	0324      	lsls	r4, r4, #12
 800207c:	431c      	orrs	r4, r3
 800207e:	0324      	lsls	r4, r4, #12
 8002080:	4b06      	ldr	r3, [pc, #24]	; (800209c <__aeabi_ddiv+0x5cc>)
 8002082:	0b24      	lsrs	r4, r4, #12
 8002084:	e57e      	b.n	8001b84 <__aeabi_ddiv+0xb4>
 8002086:	9a00      	ldr	r2, [sp, #0]
 8002088:	429a      	cmp	r2, r3
 800208a:	d3ea      	bcc.n	8002062 <__aeabi_ddiv+0x592>
 800208c:	0035      	movs	r5, r6
 800208e:	e7c4      	b.n	800201a <__aeabi_ddiv+0x54a>
 8002090:	0000043e 	.word	0x0000043e
 8002094:	0000041e 	.word	0x0000041e
 8002098:	000003ff 	.word	0x000003ff
 800209c:	000007ff 	.word	0x000007ff

080020a0 <__eqdf2>:
 80020a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020a2:	464f      	mov	r7, r9
 80020a4:	4646      	mov	r6, r8
 80020a6:	46d6      	mov	lr, sl
 80020a8:	4694      	mov	ip, r2
 80020aa:	4691      	mov	r9, r2
 80020ac:	031a      	lsls	r2, r3, #12
 80020ae:	0b12      	lsrs	r2, r2, #12
 80020b0:	4d18      	ldr	r5, [pc, #96]	; (8002114 <__eqdf2+0x74>)
 80020b2:	b5c0      	push	{r6, r7, lr}
 80020b4:	004c      	lsls	r4, r1, #1
 80020b6:	030f      	lsls	r7, r1, #12
 80020b8:	4692      	mov	sl, r2
 80020ba:	005a      	lsls	r2, r3, #1
 80020bc:	0006      	movs	r6, r0
 80020be:	4680      	mov	r8, r0
 80020c0:	0b3f      	lsrs	r7, r7, #12
 80020c2:	2001      	movs	r0, #1
 80020c4:	0d64      	lsrs	r4, r4, #21
 80020c6:	0fc9      	lsrs	r1, r1, #31
 80020c8:	0d52      	lsrs	r2, r2, #21
 80020ca:	0fdb      	lsrs	r3, r3, #31
 80020cc:	42ac      	cmp	r4, r5
 80020ce:	d00a      	beq.n	80020e6 <__eqdf2+0x46>
 80020d0:	42aa      	cmp	r2, r5
 80020d2:	d003      	beq.n	80020dc <__eqdf2+0x3c>
 80020d4:	4294      	cmp	r4, r2
 80020d6:	d101      	bne.n	80020dc <__eqdf2+0x3c>
 80020d8:	4557      	cmp	r7, sl
 80020da:	d00d      	beq.n	80020f8 <__eqdf2+0x58>
 80020dc:	bce0      	pop	{r5, r6, r7}
 80020de:	46ba      	mov	sl, r7
 80020e0:	46b1      	mov	r9, r6
 80020e2:	46a8      	mov	r8, r5
 80020e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020e6:	003d      	movs	r5, r7
 80020e8:	4335      	orrs	r5, r6
 80020ea:	d1f7      	bne.n	80020dc <__eqdf2+0x3c>
 80020ec:	42a2      	cmp	r2, r4
 80020ee:	d1f5      	bne.n	80020dc <__eqdf2+0x3c>
 80020f0:	4652      	mov	r2, sl
 80020f2:	4665      	mov	r5, ip
 80020f4:	432a      	orrs	r2, r5
 80020f6:	d1f1      	bne.n	80020dc <__eqdf2+0x3c>
 80020f8:	2001      	movs	r0, #1
 80020fa:	45c8      	cmp	r8, r9
 80020fc:	d1ee      	bne.n	80020dc <__eqdf2+0x3c>
 80020fe:	4299      	cmp	r1, r3
 8002100:	d006      	beq.n	8002110 <__eqdf2+0x70>
 8002102:	2c00      	cmp	r4, #0
 8002104:	d1ea      	bne.n	80020dc <__eqdf2+0x3c>
 8002106:	433e      	orrs	r6, r7
 8002108:	0030      	movs	r0, r6
 800210a:	1e46      	subs	r6, r0, #1
 800210c:	41b0      	sbcs	r0, r6
 800210e:	e7e5      	b.n	80020dc <__eqdf2+0x3c>
 8002110:	2000      	movs	r0, #0
 8002112:	e7e3      	b.n	80020dc <__eqdf2+0x3c>
 8002114:	000007ff 	.word	0x000007ff

08002118 <__gedf2>:
 8002118:	b5f0      	push	{r4, r5, r6, r7, lr}
 800211a:	464e      	mov	r6, r9
 800211c:	4645      	mov	r5, r8
 800211e:	4657      	mov	r7, sl
 8002120:	46de      	mov	lr, fp
 8002122:	0004      	movs	r4, r0
 8002124:	0018      	movs	r0, r3
 8002126:	b5e0      	push	{r5, r6, r7, lr}
 8002128:	0016      	movs	r6, r2
 800212a:	031b      	lsls	r3, r3, #12
 800212c:	0b1b      	lsrs	r3, r3, #12
 800212e:	4d32      	ldr	r5, [pc, #200]	; (80021f8 <__gedf2+0xe0>)
 8002130:	030f      	lsls	r7, r1, #12
 8002132:	004a      	lsls	r2, r1, #1
 8002134:	4699      	mov	r9, r3
 8002136:	0043      	lsls	r3, r0, #1
 8002138:	46a4      	mov	ip, r4
 800213a:	46b0      	mov	r8, r6
 800213c:	0b3f      	lsrs	r7, r7, #12
 800213e:	0d52      	lsrs	r2, r2, #21
 8002140:	0fc9      	lsrs	r1, r1, #31
 8002142:	0d5b      	lsrs	r3, r3, #21
 8002144:	0fc0      	lsrs	r0, r0, #31
 8002146:	42aa      	cmp	r2, r5
 8002148:	d029      	beq.n	800219e <__gedf2+0x86>
 800214a:	42ab      	cmp	r3, r5
 800214c:	d018      	beq.n	8002180 <__gedf2+0x68>
 800214e:	2a00      	cmp	r2, #0
 8002150:	d12a      	bne.n	80021a8 <__gedf2+0x90>
 8002152:	433c      	orrs	r4, r7
 8002154:	46a3      	mov	fp, r4
 8002156:	4265      	negs	r5, r4
 8002158:	4165      	adcs	r5, r4
 800215a:	2b00      	cmp	r3, #0
 800215c:	d102      	bne.n	8002164 <__gedf2+0x4c>
 800215e:	464c      	mov	r4, r9
 8002160:	4326      	orrs	r6, r4
 8002162:	d027      	beq.n	80021b4 <__gedf2+0x9c>
 8002164:	2d00      	cmp	r5, #0
 8002166:	d115      	bne.n	8002194 <__gedf2+0x7c>
 8002168:	4281      	cmp	r1, r0
 800216a:	d028      	beq.n	80021be <__gedf2+0xa6>
 800216c:	2002      	movs	r0, #2
 800216e:	3901      	subs	r1, #1
 8002170:	4008      	ands	r0, r1
 8002172:	3801      	subs	r0, #1
 8002174:	bcf0      	pop	{r4, r5, r6, r7}
 8002176:	46bb      	mov	fp, r7
 8002178:	46b2      	mov	sl, r6
 800217a:	46a9      	mov	r9, r5
 800217c:	46a0      	mov	r8, r4
 800217e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002180:	464d      	mov	r5, r9
 8002182:	432e      	orrs	r6, r5
 8002184:	d12f      	bne.n	80021e6 <__gedf2+0xce>
 8002186:	2a00      	cmp	r2, #0
 8002188:	d1ee      	bne.n	8002168 <__gedf2+0x50>
 800218a:	433c      	orrs	r4, r7
 800218c:	4265      	negs	r5, r4
 800218e:	4165      	adcs	r5, r4
 8002190:	2d00      	cmp	r5, #0
 8002192:	d0e9      	beq.n	8002168 <__gedf2+0x50>
 8002194:	2800      	cmp	r0, #0
 8002196:	d1ed      	bne.n	8002174 <__gedf2+0x5c>
 8002198:	2001      	movs	r0, #1
 800219a:	4240      	negs	r0, r0
 800219c:	e7ea      	b.n	8002174 <__gedf2+0x5c>
 800219e:	003d      	movs	r5, r7
 80021a0:	4325      	orrs	r5, r4
 80021a2:	d120      	bne.n	80021e6 <__gedf2+0xce>
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d0eb      	beq.n	8002180 <__gedf2+0x68>
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d1dd      	bne.n	8002168 <__gedf2+0x50>
 80021ac:	464c      	mov	r4, r9
 80021ae:	4326      	orrs	r6, r4
 80021b0:	d1da      	bne.n	8002168 <__gedf2+0x50>
 80021b2:	e7db      	b.n	800216c <__gedf2+0x54>
 80021b4:	465b      	mov	r3, fp
 80021b6:	2000      	movs	r0, #0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d0db      	beq.n	8002174 <__gedf2+0x5c>
 80021bc:	e7d6      	b.n	800216c <__gedf2+0x54>
 80021be:	429a      	cmp	r2, r3
 80021c0:	dc0a      	bgt.n	80021d8 <__gedf2+0xc0>
 80021c2:	dbe7      	blt.n	8002194 <__gedf2+0x7c>
 80021c4:	454f      	cmp	r7, r9
 80021c6:	d8d1      	bhi.n	800216c <__gedf2+0x54>
 80021c8:	d010      	beq.n	80021ec <__gedf2+0xd4>
 80021ca:	2000      	movs	r0, #0
 80021cc:	454f      	cmp	r7, r9
 80021ce:	d2d1      	bcs.n	8002174 <__gedf2+0x5c>
 80021d0:	2900      	cmp	r1, #0
 80021d2:	d0e1      	beq.n	8002198 <__gedf2+0x80>
 80021d4:	0008      	movs	r0, r1
 80021d6:	e7cd      	b.n	8002174 <__gedf2+0x5c>
 80021d8:	4243      	negs	r3, r0
 80021da:	4158      	adcs	r0, r3
 80021dc:	2302      	movs	r3, #2
 80021de:	4240      	negs	r0, r0
 80021e0:	4018      	ands	r0, r3
 80021e2:	3801      	subs	r0, #1
 80021e4:	e7c6      	b.n	8002174 <__gedf2+0x5c>
 80021e6:	2002      	movs	r0, #2
 80021e8:	4240      	negs	r0, r0
 80021ea:	e7c3      	b.n	8002174 <__gedf2+0x5c>
 80021ec:	45c4      	cmp	ip, r8
 80021ee:	d8bd      	bhi.n	800216c <__gedf2+0x54>
 80021f0:	2000      	movs	r0, #0
 80021f2:	45c4      	cmp	ip, r8
 80021f4:	d2be      	bcs.n	8002174 <__gedf2+0x5c>
 80021f6:	e7eb      	b.n	80021d0 <__gedf2+0xb8>
 80021f8:	000007ff 	.word	0x000007ff

080021fc <__ledf2>:
 80021fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021fe:	464e      	mov	r6, r9
 8002200:	4645      	mov	r5, r8
 8002202:	4657      	mov	r7, sl
 8002204:	46de      	mov	lr, fp
 8002206:	0004      	movs	r4, r0
 8002208:	0018      	movs	r0, r3
 800220a:	b5e0      	push	{r5, r6, r7, lr}
 800220c:	0016      	movs	r6, r2
 800220e:	031b      	lsls	r3, r3, #12
 8002210:	0b1b      	lsrs	r3, r3, #12
 8002212:	4d31      	ldr	r5, [pc, #196]	; (80022d8 <__ledf2+0xdc>)
 8002214:	030f      	lsls	r7, r1, #12
 8002216:	004a      	lsls	r2, r1, #1
 8002218:	4699      	mov	r9, r3
 800221a:	0043      	lsls	r3, r0, #1
 800221c:	46a4      	mov	ip, r4
 800221e:	46b0      	mov	r8, r6
 8002220:	0b3f      	lsrs	r7, r7, #12
 8002222:	0d52      	lsrs	r2, r2, #21
 8002224:	0fc9      	lsrs	r1, r1, #31
 8002226:	0d5b      	lsrs	r3, r3, #21
 8002228:	0fc0      	lsrs	r0, r0, #31
 800222a:	42aa      	cmp	r2, r5
 800222c:	d011      	beq.n	8002252 <__ledf2+0x56>
 800222e:	42ab      	cmp	r3, r5
 8002230:	d014      	beq.n	800225c <__ledf2+0x60>
 8002232:	2a00      	cmp	r2, #0
 8002234:	d12f      	bne.n	8002296 <__ledf2+0x9a>
 8002236:	433c      	orrs	r4, r7
 8002238:	46a3      	mov	fp, r4
 800223a:	4265      	negs	r5, r4
 800223c:	4165      	adcs	r5, r4
 800223e:	2b00      	cmp	r3, #0
 8002240:	d114      	bne.n	800226c <__ledf2+0x70>
 8002242:	464c      	mov	r4, r9
 8002244:	4326      	orrs	r6, r4
 8002246:	d111      	bne.n	800226c <__ledf2+0x70>
 8002248:	465b      	mov	r3, fp
 800224a:	2000      	movs	r0, #0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d017      	beq.n	8002280 <__ledf2+0x84>
 8002250:	e010      	b.n	8002274 <__ledf2+0x78>
 8002252:	003d      	movs	r5, r7
 8002254:	4325      	orrs	r5, r4
 8002256:	d112      	bne.n	800227e <__ledf2+0x82>
 8002258:	4293      	cmp	r3, r2
 800225a:	d11c      	bne.n	8002296 <__ledf2+0x9a>
 800225c:	464d      	mov	r5, r9
 800225e:	432e      	orrs	r6, r5
 8002260:	d10d      	bne.n	800227e <__ledf2+0x82>
 8002262:	2a00      	cmp	r2, #0
 8002264:	d104      	bne.n	8002270 <__ledf2+0x74>
 8002266:	433c      	orrs	r4, r7
 8002268:	4265      	negs	r5, r4
 800226a:	4165      	adcs	r5, r4
 800226c:	2d00      	cmp	r5, #0
 800226e:	d10d      	bne.n	800228c <__ledf2+0x90>
 8002270:	4281      	cmp	r1, r0
 8002272:	d016      	beq.n	80022a2 <__ledf2+0xa6>
 8002274:	2002      	movs	r0, #2
 8002276:	3901      	subs	r1, #1
 8002278:	4008      	ands	r0, r1
 800227a:	3801      	subs	r0, #1
 800227c:	e000      	b.n	8002280 <__ledf2+0x84>
 800227e:	2002      	movs	r0, #2
 8002280:	bcf0      	pop	{r4, r5, r6, r7}
 8002282:	46bb      	mov	fp, r7
 8002284:	46b2      	mov	sl, r6
 8002286:	46a9      	mov	r9, r5
 8002288:	46a0      	mov	r8, r4
 800228a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800228c:	2800      	cmp	r0, #0
 800228e:	d1f7      	bne.n	8002280 <__ledf2+0x84>
 8002290:	2001      	movs	r0, #1
 8002292:	4240      	negs	r0, r0
 8002294:	e7f4      	b.n	8002280 <__ledf2+0x84>
 8002296:	2b00      	cmp	r3, #0
 8002298:	d1ea      	bne.n	8002270 <__ledf2+0x74>
 800229a:	464c      	mov	r4, r9
 800229c:	4326      	orrs	r6, r4
 800229e:	d1e7      	bne.n	8002270 <__ledf2+0x74>
 80022a0:	e7e8      	b.n	8002274 <__ledf2+0x78>
 80022a2:	429a      	cmp	r2, r3
 80022a4:	dd06      	ble.n	80022b4 <__ledf2+0xb8>
 80022a6:	4243      	negs	r3, r0
 80022a8:	4158      	adcs	r0, r3
 80022aa:	2302      	movs	r3, #2
 80022ac:	4240      	negs	r0, r0
 80022ae:	4018      	ands	r0, r3
 80022b0:	3801      	subs	r0, #1
 80022b2:	e7e5      	b.n	8002280 <__ledf2+0x84>
 80022b4:	429a      	cmp	r2, r3
 80022b6:	dbe9      	blt.n	800228c <__ledf2+0x90>
 80022b8:	454f      	cmp	r7, r9
 80022ba:	d8db      	bhi.n	8002274 <__ledf2+0x78>
 80022bc:	d006      	beq.n	80022cc <__ledf2+0xd0>
 80022be:	2000      	movs	r0, #0
 80022c0:	454f      	cmp	r7, r9
 80022c2:	d2dd      	bcs.n	8002280 <__ledf2+0x84>
 80022c4:	2900      	cmp	r1, #0
 80022c6:	d0e3      	beq.n	8002290 <__ledf2+0x94>
 80022c8:	0008      	movs	r0, r1
 80022ca:	e7d9      	b.n	8002280 <__ledf2+0x84>
 80022cc:	45c4      	cmp	ip, r8
 80022ce:	d8d1      	bhi.n	8002274 <__ledf2+0x78>
 80022d0:	2000      	movs	r0, #0
 80022d2:	45c4      	cmp	ip, r8
 80022d4:	d2d4      	bcs.n	8002280 <__ledf2+0x84>
 80022d6:	e7f5      	b.n	80022c4 <__ledf2+0xc8>
 80022d8:	000007ff 	.word	0x000007ff

080022dc <__aeabi_dmul>:
 80022dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022de:	4657      	mov	r7, sl
 80022e0:	464e      	mov	r6, r9
 80022e2:	4645      	mov	r5, r8
 80022e4:	46de      	mov	lr, fp
 80022e6:	b5e0      	push	{r5, r6, r7, lr}
 80022e8:	4698      	mov	r8, r3
 80022ea:	030c      	lsls	r4, r1, #12
 80022ec:	004b      	lsls	r3, r1, #1
 80022ee:	0006      	movs	r6, r0
 80022f0:	4692      	mov	sl, r2
 80022f2:	b087      	sub	sp, #28
 80022f4:	0b24      	lsrs	r4, r4, #12
 80022f6:	0d5b      	lsrs	r3, r3, #21
 80022f8:	0fcf      	lsrs	r7, r1, #31
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d06c      	beq.n	80023d8 <__aeabi_dmul+0xfc>
 80022fe:	4add      	ldr	r2, [pc, #884]	; (8002674 <__aeabi_dmul+0x398>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d100      	bne.n	8002306 <__aeabi_dmul+0x2a>
 8002304:	e086      	b.n	8002414 <__aeabi_dmul+0x138>
 8002306:	0f42      	lsrs	r2, r0, #29
 8002308:	00e4      	lsls	r4, r4, #3
 800230a:	4314      	orrs	r4, r2
 800230c:	2280      	movs	r2, #128	; 0x80
 800230e:	0412      	lsls	r2, r2, #16
 8002310:	4314      	orrs	r4, r2
 8002312:	4ad9      	ldr	r2, [pc, #868]	; (8002678 <__aeabi_dmul+0x39c>)
 8002314:	00c5      	lsls	r5, r0, #3
 8002316:	4694      	mov	ip, r2
 8002318:	4463      	add	r3, ip
 800231a:	9300      	str	r3, [sp, #0]
 800231c:	2300      	movs	r3, #0
 800231e:	4699      	mov	r9, r3
 8002320:	469b      	mov	fp, r3
 8002322:	4643      	mov	r3, r8
 8002324:	4642      	mov	r2, r8
 8002326:	031e      	lsls	r6, r3, #12
 8002328:	0fd2      	lsrs	r2, r2, #31
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	4650      	mov	r0, sl
 800232e:	4690      	mov	r8, r2
 8002330:	0b36      	lsrs	r6, r6, #12
 8002332:	0d5b      	lsrs	r3, r3, #21
 8002334:	d100      	bne.n	8002338 <__aeabi_dmul+0x5c>
 8002336:	e078      	b.n	800242a <__aeabi_dmul+0x14e>
 8002338:	4ace      	ldr	r2, [pc, #824]	; (8002674 <__aeabi_dmul+0x398>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d01d      	beq.n	800237a <__aeabi_dmul+0x9e>
 800233e:	49ce      	ldr	r1, [pc, #824]	; (8002678 <__aeabi_dmul+0x39c>)
 8002340:	0f42      	lsrs	r2, r0, #29
 8002342:	468c      	mov	ip, r1
 8002344:	9900      	ldr	r1, [sp, #0]
 8002346:	4463      	add	r3, ip
 8002348:	00f6      	lsls	r6, r6, #3
 800234a:	468c      	mov	ip, r1
 800234c:	4316      	orrs	r6, r2
 800234e:	2280      	movs	r2, #128	; 0x80
 8002350:	449c      	add	ip, r3
 8002352:	0412      	lsls	r2, r2, #16
 8002354:	4663      	mov	r3, ip
 8002356:	4316      	orrs	r6, r2
 8002358:	00c2      	lsls	r2, r0, #3
 800235a:	2000      	movs	r0, #0
 800235c:	9300      	str	r3, [sp, #0]
 800235e:	9900      	ldr	r1, [sp, #0]
 8002360:	4643      	mov	r3, r8
 8002362:	3101      	adds	r1, #1
 8002364:	468c      	mov	ip, r1
 8002366:	4649      	mov	r1, r9
 8002368:	407b      	eors	r3, r7
 800236a:	9301      	str	r3, [sp, #4]
 800236c:	290f      	cmp	r1, #15
 800236e:	d900      	bls.n	8002372 <__aeabi_dmul+0x96>
 8002370:	e07e      	b.n	8002470 <__aeabi_dmul+0x194>
 8002372:	4bc2      	ldr	r3, [pc, #776]	; (800267c <__aeabi_dmul+0x3a0>)
 8002374:	0089      	lsls	r1, r1, #2
 8002376:	5859      	ldr	r1, [r3, r1]
 8002378:	468f      	mov	pc, r1
 800237a:	4652      	mov	r2, sl
 800237c:	9b00      	ldr	r3, [sp, #0]
 800237e:	4332      	orrs	r2, r6
 8002380:	d000      	beq.n	8002384 <__aeabi_dmul+0xa8>
 8002382:	e156      	b.n	8002632 <__aeabi_dmul+0x356>
 8002384:	49bb      	ldr	r1, [pc, #748]	; (8002674 <__aeabi_dmul+0x398>)
 8002386:	2600      	movs	r6, #0
 8002388:	468c      	mov	ip, r1
 800238a:	4463      	add	r3, ip
 800238c:	4649      	mov	r1, r9
 800238e:	9300      	str	r3, [sp, #0]
 8002390:	2302      	movs	r3, #2
 8002392:	4319      	orrs	r1, r3
 8002394:	4689      	mov	r9, r1
 8002396:	2002      	movs	r0, #2
 8002398:	e7e1      	b.n	800235e <__aeabi_dmul+0x82>
 800239a:	4643      	mov	r3, r8
 800239c:	9301      	str	r3, [sp, #4]
 800239e:	0034      	movs	r4, r6
 80023a0:	0015      	movs	r5, r2
 80023a2:	4683      	mov	fp, r0
 80023a4:	465b      	mov	r3, fp
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d05e      	beq.n	8002468 <__aeabi_dmul+0x18c>
 80023aa:	2b03      	cmp	r3, #3
 80023ac:	d100      	bne.n	80023b0 <__aeabi_dmul+0xd4>
 80023ae:	e1f3      	b.n	8002798 <__aeabi_dmul+0x4bc>
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d000      	beq.n	80023b6 <__aeabi_dmul+0xda>
 80023b4:	e118      	b.n	80025e8 <__aeabi_dmul+0x30c>
 80023b6:	2200      	movs	r2, #0
 80023b8:	2400      	movs	r4, #0
 80023ba:	2500      	movs	r5, #0
 80023bc:	9b01      	ldr	r3, [sp, #4]
 80023be:	0512      	lsls	r2, r2, #20
 80023c0:	4322      	orrs	r2, r4
 80023c2:	07db      	lsls	r3, r3, #31
 80023c4:	431a      	orrs	r2, r3
 80023c6:	0028      	movs	r0, r5
 80023c8:	0011      	movs	r1, r2
 80023ca:	b007      	add	sp, #28
 80023cc:	bcf0      	pop	{r4, r5, r6, r7}
 80023ce:	46bb      	mov	fp, r7
 80023d0:	46b2      	mov	sl, r6
 80023d2:	46a9      	mov	r9, r5
 80023d4:	46a0      	mov	r8, r4
 80023d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023d8:	0025      	movs	r5, r4
 80023da:	4305      	orrs	r5, r0
 80023dc:	d100      	bne.n	80023e0 <__aeabi_dmul+0x104>
 80023de:	e141      	b.n	8002664 <__aeabi_dmul+0x388>
 80023e0:	2c00      	cmp	r4, #0
 80023e2:	d100      	bne.n	80023e6 <__aeabi_dmul+0x10a>
 80023e4:	e1ad      	b.n	8002742 <__aeabi_dmul+0x466>
 80023e6:	0020      	movs	r0, r4
 80023e8:	f000 fef0 	bl	80031cc <__clzsi2>
 80023ec:	0001      	movs	r1, r0
 80023ee:	0002      	movs	r2, r0
 80023f0:	390b      	subs	r1, #11
 80023f2:	231d      	movs	r3, #29
 80023f4:	0010      	movs	r0, r2
 80023f6:	1a5b      	subs	r3, r3, r1
 80023f8:	0031      	movs	r1, r6
 80023fa:	0035      	movs	r5, r6
 80023fc:	3808      	subs	r0, #8
 80023fe:	4084      	lsls	r4, r0
 8002400:	40d9      	lsrs	r1, r3
 8002402:	4085      	lsls	r5, r0
 8002404:	430c      	orrs	r4, r1
 8002406:	489e      	ldr	r0, [pc, #632]	; (8002680 <__aeabi_dmul+0x3a4>)
 8002408:	1a83      	subs	r3, r0, r2
 800240a:	9300      	str	r3, [sp, #0]
 800240c:	2300      	movs	r3, #0
 800240e:	4699      	mov	r9, r3
 8002410:	469b      	mov	fp, r3
 8002412:	e786      	b.n	8002322 <__aeabi_dmul+0x46>
 8002414:	0005      	movs	r5, r0
 8002416:	4325      	orrs	r5, r4
 8002418:	d000      	beq.n	800241c <__aeabi_dmul+0x140>
 800241a:	e11c      	b.n	8002656 <__aeabi_dmul+0x37a>
 800241c:	2208      	movs	r2, #8
 800241e:	9300      	str	r3, [sp, #0]
 8002420:	2302      	movs	r3, #2
 8002422:	2400      	movs	r4, #0
 8002424:	4691      	mov	r9, r2
 8002426:	469b      	mov	fp, r3
 8002428:	e77b      	b.n	8002322 <__aeabi_dmul+0x46>
 800242a:	4652      	mov	r2, sl
 800242c:	4332      	orrs	r2, r6
 800242e:	d100      	bne.n	8002432 <__aeabi_dmul+0x156>
 8002430:	e10a      	b.n	8002648 <__aeabi_dmul+0x36c>
 8002432:	2e00      	cmp	r6, #0
 8002434:	d100      	bne.n	8002438 <__aeabi_dmul+0x15c>
 8002436:	e176      	b.n	8002726 <__aeabi_dmul+0x44a>
 8002438:	0030      	movs	r0, r6
 800243a:	f000 fec7 	bl	80031cc <__clzsi2>
 800243e:	0002      	movs	r2, r0
 8002440:	3a0b      	subs	r2, #11
 8002442:	231d      	movs	r3, #29
 8002444:	0001      	movs	r1, r0
 8002446:	1a9b      	subs	r3, r3, r2
 8002448:	4652      	mov	r2, sl
 800244a:	3908      	subs	r1, #8
 800244c:	40da      	lsrs	r2, r3
 800244e:	408e      	lsls	r6, r1
 8002450:	4316      	orrs	r6, r2
 8002452:	4652      	mov	r2, sl
 8002454:	408a      	lsls	r2, r1
 8002456:	9b00      	ldr	r3, [sp, #0]
 8002458:	4989      	ldr	r1, [pc, #548]	; (8002680 <__aeabi_dmul+0x3a4>)
 800245a:	1a18      	subs	r0, r3, r0
 800245c:	0003      	movs	r3, r0
 800245e:	468c      	mov	ip, r1
 8002460:	4463      	add	r3, ip
 8002462:	2000      	movs	r0, #0
 8002464:	9300      	str	r3, [sp, #0]
 8002466:	e77a      	b.n	800235e <__aeabi_dmul+0x82>
 8002468:	2400      	movs	r4, #0
 800246a:	2500      	movs	r5, #0
 800246c:	4a81      	ldr	r2, [pc, #516]	; (8002674 <__aeabi_dmul+0x398>)
 800246e:	e7a5      	b.n	80023bc <__aeabi_dmul+0xe0>
 8002470:	0c2f      	lsrs	r7, r5, #16
 8002472:	042d      	lsls	r5, r5, #16
 8002474:	0c2d      	lsrs	r5, r5, #16
 8002476:	002b      	movs	r3, r5
 8002478:	0c11      	lsrs	r1, r2, #16
 800247a:	0412      	lsls	r2, r2, #16
 800247c:	0c12      	lsrs	r2, r2, #16
 800247e:	4353      	muls	r3, r2
 8002480:	4698      	mov	r8, r3
 8002482:	0013      	movs	r3, r2
 8002484:	0028      	movs	r0, r5
 8002486:	437b      	muls	r3, r7
 8002488:	4699      	mov	r9, r3
 800248a:	4348      	muls	r0, r1
 800248c:	4448      	add	r0, r9
 800248e:	4683      	mov	fp, r0
 8002490:	4640      	mov	r0, r8
 8002492:	000b      	movs	r3, r1
 8002494:	0c00      	lsrs	r0, r0, #16
 8002496:	4682      	mov	sl, r0
 8002498:	4658      	mov	r0, fp
 800249a:	437b      	muls	r3, r7
 800249c:	4450      	add	r0, sl
 800249e:	9302      	str	r3, [sp, #8]
 80024a0:	4581      	cmp	r9, r0
 80024a2:	d906      	bls.n	80024b2 <__aeabi_dmul+0x1d6>
 80024a4:	469a      	mov	sl, r3
 80024a6:	2380      	movs	r3, #128	; 0x80
 80024a8:	025b      	lsls	r3, r3, #9
 80024aa:	4699      	mov	r9, r3
 80024ac:	44ca      	add	sl, r9
 80024ae:	4653      	mov	r3, sl
 80024b0:	9302      	str	r3, [sp, #8]
 80024b2:	0c03      	lsrs	r3, r0, #16
 80024b4:	469b      	mov	fp, r3
 80024b6:	4643      	mov	r3, r8
 80024b8:	041b      	lsls	r3, r3, #16
 80024ba:	0400      	lsls	r0, r0, #16
 80024bc:	0c1b      	lsrs	r3, r3, #16
 80024be:	4698      	mov	r8, r3
 80024c0:	0003      	movs	r3, r0
 80024c2:	4443      	add	r3, r8
 80024c4:	9304      	str	r3, [sp, #16]
 80024c6:	0c33      	lsrs	r3, r6, #16
 80024c8:	4699      	mov	r9, r3
 80024ca:	002b      	movs	r3, r5
 80024cc:	0436      	lsls	r6, r6, #16
 80024ce:	0c36      	lsrs	r6, r6, #16
 80024d0:	4373      	muls	r3, r6
 80024d2:	4698      	mov	r8, r3
 80024d4:	0033      	movs	r3, r6
 80024d6:	437b      	muls	r3, r7
 80024d8:	469a      	mov	sl, r3
 80024da:	464b      	mov	r3, r9
 80024dc:	435d      	muls	r5, r3
 80024de:	435f      	muls	r7, r3
 80024e0:	4643      	mov	r3, r8
 80024e2:	4455      	add	r5, sl
 80024e4:	0c18      	lsrs	r0, r3, #16
 80024e6:	1940      	adds	r0, r0, r5
 80024e8:	4582      	cmp	sl, r0
 80024ea:	d903      	bls.n	80024f4 <__aeabi_dmul+0x218>
 80024ec:	2380      	movs	r3, #128	; 0x80
 80024ee:	025b      	lsls	r3, r3, #9
 80024f0:	469a      	mov	sl, r3
 80024f2:	4457      	add	r7, sl
 80024f4:	0c05      	lsrs	r5, r0, #16
 80024f6:	19eb      	adds	r3, r5, r7
 80024f8:	9305      	str	r3, [sp, #20]
 80024fa:	4643      	mov	r3, r8
 80024fc:	041d      	lsls	r5, r3, #16
 80024fe:	0c2d      	lsrs	r5, r5, #16
 8002500:	0400      	lsls	r0, r0, #16
 8002502:	1940      	adds	r0, r0, r5
 8002504:	0c25      	lsrs	r5, r4, #16
 8002506:	0424      	lsls	r4, r4, #16
 8002508:	0c24      	lsrs	r4, r4, #16
 800250a:	0027      	movs	r7, r4
 800250c:	4357      	muls	r7, r2
 800250e:	436a      	muls	r2, r5
 8002510:	4690      	mov	r8, r2
 8002512:	002a      	movs	r2, r5
 8002514:	0c3b      	lsrs	r3, r7, #16
 8002516:	469a      	mov	sl, r3
 8002518:	434a      	muls	r2, r1
 800251a:	4361      	muls	r1, r4
 800251c:	4441      	add	r1, r8
 800251e:	4451      	add	r1, sl
 8002520:	4483      	add	fp, r0
 8002522:	4588      	cmp	r8, r1
 8002524:	d903      	bls.n	800252e <__aeabi_dmul+0x252>
 8002526:	2380      	movs	r3, #128	; 0x80
 8002528:	025b      	lsls	r3, r3, #9
 800252a:	4698      	mov	r8, r3
 800252c:	4442      	add	r2, r8
 800252e:	043f      	lsls	r7, r7, #16
 8002530:	0c0b      	lsrs	r3, r1, #16
 8002532:	0c3f      	lsrs	r7, r7, #16
 8002534:	0409      	lsls	r1, r1, #16
 8002536:	19c9      	adds	r1, r1, r7
 8002538:	0027      	movs	r7, r4
 800253a:	4698      	mov	r8, r3
 800253c:	464b      	mov	r3, r9
 800253e:	4377      	muls	r7, r6
 8002540:	435c      	muls	r4, r3
 8002542:	436e      	muls	r6, r5
 8002544:	435d      	muls	r5, r3
 8002546:	0c3b      	lsrs	r3, r7, #16
 8002548:	4699      	mov	r9, r3
 800254a:	19a4      	adds	r4, r4, r6
 800254c:	444c      	add	r4, r9
 800254e:	4442      	add	r2, r8
 8002550:	9503      	str	r5, [sp, #12]
 8002552:	42a6      	cmp	r6, r4
 8002554:	d904      	bls.n	8002560 <__aeabi_dmul+0x284>
 8002556:	2380      	movs	r3, #128	; 0x80
 8002558:	025b      	lsls	r3, r3, #9
 800255a:	4698      	mov	r8, r3
 800255c:	4445      	add	r5, r8
 800255e:	9503      	str	r5, [sp, #12]
 8002560:	9b02      	ldr	r3, [sp, #8]
 8002562:	043f      	lsls	r7, r7, #16
 8002564:	445b      	add	r3, fp
 8002566:	001e      	movs	r6, r3
 8002568:	4283      	cmp	r3, r0
 800256a:	4180      	sbcs	r0, r0
 800256c:	0423      	lsls	r3, r4, #16
 800256e:	4698      	mov	r8, r3
 8002570:	9b05      	ldr	r3, [sp, #20]
 8002572:	0c3f      	lsrs	r7, r7, #16
 8002574:	4447      	add	r7, r8
 8002576:	4698      	mov	r8, r3
 8002578:	1876      	adds	r6, r6, r1
 800257a:	428e      	cmp	r6, r1
 800257c:	4189      	sbcs	r1, r1
 800257e:	4447      	add	r7, r8
 8002580:	4240      	negs	r0, r0
 8002582:	183d      	adds	r5, r7, r0
 8002584:	46a8      	mov	r8, r5
 8002586:	4693      	mov	fp, r2
 8002588:	4249      	negs	r1, r1
 800258a:	468a      	mov	sl, r1
 800258c:	44c3      	add	fp, r8
 800258e:	429f      	cmp	r7, r3
 8002590:	41bf      	sbcs	r7, r7
 8002592:	4580      	cmp	r8, r0
 8002594:	4180      	sbcs	r0, r0
 8002596:	9b03      	ldr	r3, [sp, #12]
 8002598:	44da      	add	sl, fp
 800259a:	4698      	mov	r8, r3
 800259c:	4653      	mov	r3, sl
 800259e:	4240      	negs	r0, r0
 80025a0:	427f      	negs	r7, r7
 80025a2:	4307      	orrs	r7, r0
 80025a4:	0c24      	lsrs	r4, r4, #16
 80025a6:	4593      	cmp	fp, r2
 80025a8:	4192      	sbcs	r2, r2
 80025aa:	458a      	cmp	sl, r1
 80025ac:	4189      	sbcs	r1, r1
 80025ae:	193f      	adds	r7, r7, r4
 80025b0:	0ddc      	lsrs	r4, r3, #23
 80025b2:	9b04      	ldr	r3, [sp, #16]
 80025b4:	0275      	lsls	r5, r6, #9
 80025b6:	431d      	orrs	r5, r3
 80025b8:	1e68      	subs	r0, r5, #1
 80025ba:	4185      	sbcs	r5, r0
 80025bc:	4653      	mov	r3, sl
 80025be:	4252      	negs	r2, r2
 80025c0:	4249      	negs	r1, r1
 80025c2:	430a      	orrs	r2, r1
 80025c4:	18bf      	adds	r7, r7, r2
 80025c6:	4447      	add	r7, r8
 80025c8:	0df6      	lsrs	r6, r6, #23
 80025ca:	027f      	lsls	r7, r7, #9
 80025cc:	4335      	orrs	r5, r6
 80025ce:	025a      	lsls	r2, r3, #9
 80025d0:	433c      	orrs	r4, r7
 80025d2:	4315      	orrs	r5, r2
 80025d4:	01fb      	lsls	r3, r7, #7
 80025d6:	d400      	bmi.n	80025da <__aeabi_dmul+0x2fe>
 80025d8:	e0c1      	b.n	800275e <__aeabi_dmul+0x482>
 80025da:	2101      	movs	r1, #1
 80025dc:	086a      	lsrs	r2, r5, #1
 80025de:	400d      	ands	r5, r1
 80025e0:	4315      	orrs	r5, r2
 80025e2:	07e2      	lsls	r2, r4, #31
 80025e4:	4315      	orrs	r5, r2
 80025e6:	0864      	lsrs	r4, r4, #1
 80025e8:	4926      	ldr	r1, [pc, #152]	; (8002684 <__aeabi_dmul+0x3a8>)
 80025ea:	4461      	add	r1, ip
 80025ec:	2900      	cmp	r1, #0
 80025ee:	dd56      	ble.n	800269e <__aeabi_dmul+0x3c2>
 80025f0:	076b      	lsls	r3, r5, #29
 80025f2:	d009      	beq.n	8002608 <__aeabi_dmul+0x32c>
 80025f4:	220f      	movs	r2, #15
 80025f6:	402a      	ands	r2, r5
 80025f8:	2a04      	cmp	r2, #4
 80025fa:	d005      	beq.n	8002608 <__aeabi_dmul+0x32c>
 80025fc:	1d2a      	adds	r2, r5, #4
 80025fe:	42aa      	cmp	r2, r5
 8002600:	41ad      	sbcs	r5, r5
 8002602:	426d      	negs	r5, r5
 8002604:	1964      	adds	r4, r4, r5
 8002606:	0015      	movs	r5, r2
 8002608:	01e3      	lsls	r3, r4, #7
 800260a:	d504      	bpl.n	8002616 <__aeabi_dmul+0x33a>
 800260c:	2180      	movs	r1, #128	; 0x80
 800260e:	4a1e      	ldr	r2, [pc, #120]	; (8002688 <__aeabi_dmul+0x3ac>)
 8002610:	00c9      	lsls	r1, r1, #3
 8002612:	4014      	ands	r4, r2
 8002614:	4461      	add	r1, ip
 8002616:	4a1d      	ldr	r2, [pc, #116]	; (800268c <__aeabi_dmul+0x3b0>)
 8002618:	4291      	cmp	r1, r2
 800261a:	dd00      	ble.n	800261e <__aeabi_dmul+0x342>
 800261c:	e724      	b.n	8002468 <__aeabi_dmul+0x18c>
 800261e:	0762      	lsls	r2, r4, #29
 8002620:	08ed      	lsrs	r5, r5, #3
 8002622:	0264      	lsls	r4, r4, #9
 8002624:	0549      	lsls	r1, r1, #21
 8002626:	4315      	orrs	r5, r2
 8002628:	0b24      	lsrs	r4, r4, #12
 800262a:	0d4a      	lsrs	r2, r1, #21
 800262c:	e6c6      	b.n	80023bc <__aeabi_dmul+0xe0>
 800262e:	9701      	str	r7, [sp, #4]
 8002630:	e6b8      	b.n	80023a4 <__aeabi_dmul+0xc8>
 8002632:	4a10      	ldr	r2, [pc, #64]	; (8002674 <__aeabi_dmul+0x398>)
 8002634:	2003      	movs	r0, #3
 8002636:	4694      	mov	ip, r2
 8002638:	4463      	add	r3, ip
 800263a:	464a      	mov	r2, r9
 800263c:	9300      	str	r3, [sp, #0]
 800263e:	2303      	movs	r3, #3
 8002640:	431a      	orrs	r2, r3
 8002642:	4691      	mov	r9, r2
 8002644:	4652      	mov	r2, sl
 8002646:	e68a      	b.n	800235e <__aeabi_dmul+0x82>
 8002648:	4649      	mov	r1, r9
 800264a:	2301      	movs	r3, #1
 800264c:	4319      	orrs	r1, r3
 800264e:	4689      	mov	r9, r1
 8002650:	2600      	movs	r6, #0
 8002652:	2001      	movs	r0, #1
 8002654:	e683      	b.n	800235e <__aeabi_dmul+0x82>
 8002656:	220c      	movs	r2, #12
 8002658:	9300      	str	r3, [sp, #0]
 800265a:	2303      	movs	r3, #3
 800265c:	0005      	movs	r5, r0
 800265e:	4691      	mov	r9, r2
 8002660:	469b      	mov	fp, r3
 8002662:	e65e      	b.n	8002322 <__aeabi_dmul+0x46>
 8002664:	2304      	movs	r3, #4
 8002666:	4699      	mov	r9, r3
 8002668:	2300      	movs	r3, #0
 800266a:	9300      	str	r3, [sp, #0]
 800266c:	3301      	adds	r3, #1
 800266e:	2400      	movs	r4, #0
 8002670:	469b      	mov	fp, r3
 8002672:	e656      	b.n	8002322 <__aeabi_dmul+0x46>
 8002674:	000007ff 	.word	0x000007ff
 8002678:	fffffc01 	.word	0xfffffc01
 800267c:	0800b558 	.word	0x0800b558
 8002680:	fffffc0d 	.word	0xfffffc0d
 8002684:	000003ff 	.word	0x000003ff
 8002688:	feffffff 	.word	0xfeffffff
 800268c:	000007fe 	.word	0x000007fe
 8002690:	2300      	movs	r3, #0
 8002692:	2480      	movs	r4, #128	; 0x80
 8002694:	2500      	movs	r5, #0
 8002696:	4a44      	ldr	r2, [pc, #272]	; (80027a8 <__aeabi_dmul+0x4cc>)
 8002698:	9301      	str	r3, [sp, #4]
 800269a:	0324      	lsls	r4, r4, #12
 800269c:	e68e      	b.n	80023bc <__aeabi_dmul+0xe0>
 800269e:	2001      	movs	r0, #1
 80026a0:	1a40      	subs	r0, r0, r1
 80026a2:	2838      	cmp	r0, #56	; 0x38
 80026a4:	dd00      	ble.n	80026a8 <__aeabi_dmul+0x3cc>
 80026a6:	e686      	b.n	80023b6 <__aeabi_dmul+0xda>
 80026a8:	281f      	cmp	r0, #31
 80026aa:	dd5b      	ble.n	8002764 <__aeabi_dmul+0x488>
 80026ac:	221f      	movs	r2, #31
 80026ae:	0023      	movs	r3, r4
 80026b0:	4252      	negs	r2, r2
 80026b2:	1a51      	subs	r1, r2, r1
 80026b4:	40cb      	lsrs	r3, r1
 80026b6:	0019      	movs	r1, r3
 80026b8:	2820      	cmp	r0, #32
 80026ba:	d003      	beq.n	80026c4 <__aeabi_dmul+0x3e8>
 80026bc:	4a3b      	ldr	r2, [pc, #236]	; (80027ac <__aeabi_dmul+0x4d0>)
 80026be:	4462      	add	r2, ip
 80026c0:	4094      	lsls	r4, r2
 80026c2:	4325      	orrs	r5, r4
 80026c4:	1e6a      	subs	r2, r5, #1
 80026c6:	4195      	sbcs	r5, r2
 80026c8:	002a      	movs	r2, r5
 80026ca:	430a      	orrs	r2, r1
 80026cc:	2107      	movs	r1, #7
 80026ce:	000d      	movs	r5, r1
 80026d0:	2400      	movs	r4, #0
 80026d2:	4015      	ands	r5, r2
 80026d4:	4211      	tst	r1, r2
 80026d6:	d05b      	beq.n	8002790 <__aeabi_dmul+0x4b4>
 80026d8:	210f      	movs	r1, #15
 80026da:	2400      	movs	r4, #0
 80026dc:	4011      	ands	r1, r2
 80026de:	2904      	cmp	r1, #4
 80026e0:	d053      	beq.n	800278a <__aeabi_dmul+0x4ae>
 80026e2:	1d11      	adds	r1, r2, #4
 80026e4:	4291      	cmp	r1, r2
 80026e6:	4192      	sbcs	r2, r2
 80026e8:	4252      	negs	r2, r2
 80026ea:	18a4      	adds	r4, r4, r2
 80026ec:	000a      	movs	r2, r1
 80026ee:	0223      	lsls	r3, r4, #8
 80026f0:	d54b      	bpl.n	800278a <__aeabi_dmul+0x4ae>
 80026f2:	2201      	movs	r2, #1
 80026f4:	2400      	movs	r4, #0
 80026f6:	2500      	movs	r5, #0
 80026f8:	e660      	b.n	80023bc <__aeabi_dmul+0xe0>
 80026fa:	2380      	movs	r3, #128	; 0x80
 80026fc:	031b      	lsls	r3, r3, #12
 80026fe:	421c      	tst	r4, r3
 8002700:	d009      	beq.n	8002716 <__aeabi_dmul+0x43a>
 8002702:	421e      	tst	r6, r3
 8002704:	d107      	bne.n	8002716 <__aeabi_dmul+0x43a>
 8002706:	4333      	orrs	r3, r6
 8002708:	031c      	lsls	r4, r3, #12
 800270a:	4643      	mov	r3, r8
 800270c:	0015      	movs	r5, r2
 800270e:	0b24      	lsrs	r4, r4, #12
 8002710:	4a25      	ldr	r2, [pc, #148]	; (80027a8 <__aeabi_dmul+0x4cc>)
 8002712:	9301      	str	r3, [sp, #4]
 8002714:	e652      	b.n	80023bc <__aeabi_dmul+0xe0>
 8002716:	2280      	movs	r2, #128	; 0x80
 8002718:	0312      	lsls	r2, r2, #12
 800271a:	4314      	orrs	r4, r2
 800271c:	0324      	lsls	r4, r4, #12
 800271e:	4a22      	ldr	r2, [pc, #136]	; (80027a8 <__aeabi_dmul+0x4cc>)
 8002720:	0b24      	lsrs	r4, r4, #12
 8002722:	9701      	str	r7, [sp, #4]
 8002724:	e64a      	b.n	80023bc <__aeabi_dmul+0xe0>
 8002726:	f000 fd51 	bl	80031cc <__clzsi2>
 800272a:	0003      	movs	r3, r0
 800272c:	001a      	movs	r2, r3
 800272e:	3215      	adds	r2, #21
 8002730:	3020      	adds	r0, #32
 8002732:	2a1c      	cmp	r2, #28
 8002734:	dc00      	bgt.n	8002738 <__aeabi_dmul+0x45c>
 8002736:	e684      	b.n	8002442 <__aeabi_dmul+0x166>
 8002738:	4656      	mov	r6, sl
 800273a:	3b08      	subs	r3, #8
 800273c:	2200      	movs	r2, #0
 800273e:	409e      	lsls	r6, r3
 8002740:	e689      	b.n	8002456 <__aeabi_dmul+0x17a>
 8002742:	f000 fd43 	bl	80031cc <__clzsi2>
 8002746:	0001      	movs	r1, r0
 8002748:	0002      	movs	r2, r0
 800274a:	3115      	adds	r1, #21
 800274c:	3220      	adds	r2, #32
 800274e:	291c      	cmp	r1, #28
 8002750:	dc00      	bgt.n	8002754 <__aeabi_dmul+0x478>
 8002752:	e64e      	b.n	80023f2 <__aeabi_dmul+0x116>
 8002754:	0034      	movs	r4, r6
 8002756:	3808      	subs	r0, #8
 8002758:	2500      	movs	r5, #0
 800275a:	4084      	lsls	r4, r0
 800275c:	e653      	b.n	8002406 <__aeabi_dmul+0x12a>
 800275e:	9b00      	ldr	r3, [sp, #0]
 8002760:	469c      	mov	ip, r3
 8002762:	e741      	b.n	80025e8 <__aeabi_dmul+0x30c>
 8002764:	4912      	ldr	r1, [pc, #72]	; (80027b0 <__aeabi_dmul+0x4d4>)
 8002766:	0022      	movs	r2, r4
 8002768:	4461      	add	r1, ip
 800276a:	002e      	movs	r6, r5
 800276c:	408d      	lsls	r5, r1
 800276e:	408a      	lsls	r2, r1
 8002770:	40c6      	lsrs	r6, r0
 8002772:	1e69      	subs	r1, r5, #1
 8002774:	418d      	sbcs	r5, r1
 8002776:	4332      	orrs	r2, r6
 8002778:	432a      	orrs	r2, r5
 800277a:	40c4      	lsrs	r4, r0
 800277c:	0753      	lsls	r3, r2, #29
 800277e:	d0b6      	beq.n	80026ee <__aeabi_dmul+0x412>
 8002780:	210f      	movs	r1, #15
 8002782:	4011      	ands	r1, r2
 8002784:	2904      	cmp	r1, #4
 8002786:	d1ac      	bne.n	80026e2 <__aeabi_dmul+0x406>
 8002788:	e7b1      	b.n	80026ee <__aeabi_dmul+0x412>
 800278a:	0765      	lsls	r5, r4, #29
 800278c:	0264      	lsls	r4, r4, #9
 800278e:	0b24      	lsrs	r4, r4, #12
 8002790:	08d2      	lsrs	r2, r2, #3
 8002792:	4315      	orrs	r5, r2
 8002794:	2200      	movs	r2, #0
 8002796:	e611      	b.n	80023bc <__aeabi_dmul+0xe0>
 8002798:	2280      	movs	r2, #128	; 0x80
 800279a:	0312      	lsls	r2, r2, #12
 800279c:	4314      	orrs	r4, r2
 800279e:	0324      	lsls	r4, r4, #12
 80027a0:	4a01      	ldr	r2, [pc, #4]	; (80027a8 <__aeabi_dmul+0x4cc>)
 80027a2:	0b24      	lsrs	r4, r4, #12
 80027a4:	e60a      	b.n	80023bc <__aeabi_dmul+0xe0>
 80027a6:	46c0      	nop			; (mov r8, r8)
 80027a8:	000007ff 	.word	0x000007ff
 80027ac:	0000043e 	.word	0x0000043e
 80027b0:	0000041e 	.word	0x0000041e

080027b4 <__aeabi_dsub>:
 80027b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027b6:	4657      	mov	r7, sl
 80027b8:	464e      	mov	r6, r9
 80027ba:	4645      	mov	r5, r8
 80027bc:	46de      	mov	lr, fp
 80027be:	0004      	movs	r4, r0
 80027c0:	b5e0      	push	{r5, r6, r7, lr}
 80027c2:	001f      	movs	r7, r3
 80027c4:	0010      	movs	r0, r2
 80027c6:	030b      	lsls	r3, r1, #12
 80027c8:	0f62      	lsrs	r2, r4, #29
 80027ca:	004e      	lsls	r6, r1, #1
 80027cc:	0fcd      	lsrs	r5, r1, #31
 80027ce:	0a5b      	lsrs	r3, r3, #9
 80027d0:	0339      	lsls	r1, r7, #12
 80027d2:	4313      	orrs	r3, r2
 80027d4:	0a49      	lsrs	r1, r1, #9
 80027d6:	00e2      	lsls	r2, r4, #3
 80027d8:	0f44      	lsrs	r4, r0, #29
 80027da:	4321      	orrs	r1, r4
 80027dc:	4cc2      	ldr	r4, [pc, #776]	; (8002ae8 <__aeabi_dsub+0x334>)
 80027de:	4691      	mov	r9, r2
 80027e0:	4692      	mov	sl, r2
 80027e2:	00c0      	lsls	r0, r0, #3
 80027e4:	007a      	lsls	r2, r7, #1
 80027e6:	4680      	mov	r8, r0
 80027e8:	0d76      	lsrs	r6, r6, #21
 80027ea:	0d52      	lsrs	r2, r2, #21
 80027ec:	0fff      	lsrs	r7, r7, #31
 80027ee:	42a2      	cmp	r2, r4
 80027f0:	d100      	bne.n	80027f4 <__aeabi_dsub+0x40>
 80027f2:	e0b4      	b.n	800295e <__aeabi_dsub+0x1aa>
 80027f4:	2401      	movs	r4, #1
 80027f6:	4067      	eors	r7, r4
 80027f8:	46bb      	mov	fp, r7
 80027fa:	42bd      	cmp	r5, r7
 80027fc:	d100      	bne.n	8002800 <__aeabi_dsub+0x4c>
 80027fe:	e088      	b.n	8002912 <__aeabi_dsub+0x15e>
 8002800:	1ab4      	subs	r4, r6, r2
 8002802:	46a4      	mov	ip, r4
 8002804:	2c00      	cmp	r4, #0
 8002806:	dc00      	bgt.n	800280a <__aeabi_dsub+0x56>
 8002808:	e0b2      	b.n	8002970 <__aeabi_dsub+0x1bc>
 800280a:	2a00      	cmp	r2, #0
 800280c:	d100      	bne.n	8002810 <__aeabi_dsub+0x5c>
 800280e:	e0c5      	b.n	800299c <__aeabi_dsub+0x1e8>
 8002810:	4ab5      	ldr	r2, [pc, #724]	; (8002ae8 <__aeabi_dsub+0x334>)
 8002812:	4296      	cmp	r6, r2
 8002814:	d100      	bne.n	8002818 <__aeabi_dsub+0x64>
 8002816:	e28b      	b.n	8002d30 <__aeabi_dsub+0x57c>
 8002818:	2280      	movs	r2, #128	; 0x80
 800281a:	0412      	lsls	r2, r2, #16
 800281c:	4311      	orrs	r1, r2
 800281e:	4662      	mov	r2, ip
 8002820:	2a38      	cmp	r2, #56	; 0x38
 8002822:	dd00      	ble.n	8002826 <__aeabi_dsub+0x72>
 8002824:	e1a1      	b.n	8002b6a <__aeabi_dsub+0x3b6>
 8002826:	2a1f      	cmp	r2, #31
 8002828:	dd00      	ble.n	800282c <__aeabi_dsub+0x78>
 800282a:	e216      	b.n	8002c5a <__aeabi_dsub+0x4a6>
 800282c:	2720      	movs	r7, #32
 800282e:	000c      	movs	r4, r1
 8002830:	1abf      	subs	r7, r7, r2
 8002832:	40bc      	lsls	r4, r7
 8002834:	0002      	movs	r2, r0
 8002836:	46a0      	mov	r8, r4
 8002838:	4664      	mov	r4, ip
 800283a:	40b8      	lsls	r0, r7
 800283c:	40e2      	lsrs	r2, r4
 800283e:	4644      	mov	r4, r8
 8002840:	4314      	orrs	r4, r2
 8002842:	0002      	movs	r2, r0
 8002844:	1e50      	subs	r0, r2, #1
 8002846:	4182      	sbcs	r2, r0
 8002848:	4660      	mov	r0, ip
 800284a:	40c1      	lsrs	r1, r0
 800284c:	4322      	orrs	r2, r4
 800284e:	1a5b      	subs	r3, r3, r1
 8002850:	4649      	mov	r1, r9
 8002852:	1a8c      	subs	r4, r1, r2
 8002854:	45a1      	cmp	r9, r4
 8002856:	4192      	sbcs	r2, r2
 8002858:	4252      	negs	r2, r2
 800285a:	1a9b      	subs	r3, r3, r2
 800285c:	4698      	mov	r8, r3
 800285e:	4643      	mov	r3, r8
 8002860:	021b      	lsls	r3, r3, #8
 8002862:	d400      	bmi.n	8002866 <__aeabi_dsub+0xb2>
 8002864:	e117      	b.n	8002a96 <__aeabi_dsub+0x2e2>
 8002866:	4643      	mov	r3, r8
 8002868:	025b      	lsls	r3, r3, #9
 800286a:	0a5b      	lsrs	r3, r3, #9
 800286c:	4698      	mov	r8, r3
 800286e:	4643      	mov	r3, r8
 8002870:	2b00      	cmp	r3, #0
 8002872:	d100      	bne.n	8002876 <__aeabi_dsub+0xc2>
 8002874:	e16c      	b.n	8002b50 <__aeabi_dsub+0x39c>
 8002876:	4640      	mov	r0, r8
 8002878:	f000 fca8 	bl	80031cc <__clzsi2>
 800287c:	0002      	movs	r2, r0
 800287e:	3a08      	subs	r2, #8
 8002880:	2120      	movs	r1, #32
 8002882:	0020      	movs	r0, r4
 8002884:	4643      	mov	r3, r8
 8002886:	1a89      	subs	r1, r1, r2
 8002888:	4093      	lsls	r3, r2
 800288a:	40c8      	lsrs	r0, r1
 800288c:	4094      	lsls	r4, r2
 800288e:	4303      	orrs	r3, r0
 8002890:	4296      	cmp	r6, r2
 8002892:	dd00      	ble.n	8002896 <__aeabi_dsub+0xe2>
 8002894:	e157      	b.n	8002b46 <__aeabi_dsub+0x392>
 8002896:	1b96      	subs	r6, r2, r6
 8002898:	1c71      	adds	r1, r6, #1
 800289a:	291f      	cmp	r1, #31
 800289c:	dd00      	ble.n	80028a0 <__aeabi_dsub+0xec>
 800289e:	e1cb      	b.n	8002c38 <__aeabi_dsub+0x484>
 80028a0:	2220      	movs	r2, #32
 80028a2:	0018      	movs	r0, r3
 80028a4:	0026      	movs	r6, r4
 80028a6:	1a52      	subs	r2, r2, r1
 80028a8:	4094      	lsls	r4, r2
 80028aa:	4090      	lsls	r0, r2
 80028ac:	40ce      	lsrs	r6, r1
 80028ae:	40cb      	lsrs	r3, r1
 80028b0:	1e62      	subs	r2, r4, #1
 80028b2:	4194      	sbcs	r4, r2
 80028b4:	4330      	orrs	r0, r6
 80028b6:	4698      	mov	r8, r3
 80028b8:	2600      	movs	r6, #0
 80028ba:	4304      	orrs	r4, r0
 80028bc:	0763      	lsls	r3, r4, #29
 80028be:	d009      	beq.n	80028d4 <__aeabi_dsub+0x120>
 80028c0:	230f      	movs	r3, #15
 80028c2:	4023      	ands	r3, r4
 80028c4:	2b04      	cmp	r3, #4
 80028c6:	d005      	beq.n	80028d4 <__aeabi_dsub+0x120>
 80028c8:	1d23      	adds	r3, r4, #4
 80028ca:	42a3      	cmp	r3, r4
 80028cc:	41a4      	sbcs	r4, r4
 80028ce:	4264      	negs	r4, r4
 80028d0:	44a0      	add	r8, r4
 80028d2:	001c      	movs	r4, r3
 80028d4:	4643      	mov	r3, r8
 80028d6:	021b      	lsls	r3, r3, #8
 80028d8:	d400      	bmi.n	80028dc <__aeabi_dsub+0x128>
 80028da:	e0df      	b.n	8002a9c <__aeabi_dsub+0x2e8>
 80028dc:	4b82      	ldr	r3, [pc, #520]	; (8002ae8 <__aeabi_dsub+0x334>)
 80028de:	3601      	adds	r6, #1
 80028e0:	429e      	cmp	r6, r3
 80028e2:	d100      	bne.n	80028e6 <__aeabi_dsub+0x132>
 80028e4:	e0fb      	b.n	8002ade <__aeabi_dsub+0x32a>
 80028e6:	4642      	mov	r2, r8
 80028e8:	4b80      	ldr	r3, [pc, #512]	; (8002aec <__aeabi_dsub+0x338>)
 80028ea:	08e4      	lsrs	r4, r4, #3
 80028ec:	401a      	ands	r2, r3
 80028ee:	0013      	movs	r3, r2
 80028f0:	0571      	lsls	r1, r6, #21
 80028f2:	0752      	lsls	r2, r2, #29
 80028f4:	025b      	lsls	r3, r3, #9
 80028f6:	4322      	orrs	r2, r4
 80028f8:	0b1b      	lsrs	r3, r3, #12
 80028fa:	0d49      	lsrs	r1, r1, #21
 80028fc:	0509      	lsls	r1, r1, #20
 80028fe:	07ed      	lsls	r5, r5, #31
 8002900:	4319      	orrs	r1, r3
 8002902:	4329      	orrs	r1, r5
 8002904:	0010      	movs	r0, r2
 8002906:	bcf0      	pop	{r4, r5, r6, r7}
 8002908:	46bb      	mov	fp, r7
 800290a:	46b2      	mov	sl, r6
 800290c:	46a9      	mov	r9, r5
 800290e:	46a0      	mov	r8, r4
 8002910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002912:	1ab4      	subs	r4, r6, r2
 8002914:	46a4      	mov	ip, r4
 8002916:	2c00      	cmp	r4, #0
 8002918:	dd58      	ble.n	80029cc <__aeabi_dsub+0x218>
 800291a:	2a00      	cmp	r2, #0
 800291c:	d100      	bne.n	8002920 <__aeabi_dsub+0x16c>
 800291e:	e09e      	b.n	8002a5e <__aeabi_dsub+0x2aa>
 8002920:	4a71      	ldr	r2, [pc, #452]	; (8002ae8 <__aeabi_dsub+0x334>)
 8002922:	4296      	cmp	r6, r2
 8002924:	d100      	bne.n	8002928 <__aeabi_dsub+0x174>
 8002926:	e13b      	b.n	8002ba0 <__aeabi_dsub+0x3ec>
 8002928:	2280      	movs	r2, #128	; 0x80
 800292a:	0412      	lsls	r2, r2, #16
 800292c:	4311      	orrs	r1, r2
 800292e:	4662      	mov	r2, ip
 8002930:	2a38      	cmp	r2, #56	; 0x38
 8002932:	dd00      	ble.n	8002936 <__aeabi_dsub+0x182>
 8002934:	e0c1      	b.n	8002aba <__aeabi_dsub+0x306>
 8002936:	2a1f      	cmp	r2, #31
 8002938:	dc00      	bgt.n	800293c <__aeabi_dsub+0x188>
 800293a:	e1bb      	b.n	8002cb4 <__aeabi_dsub+0x500>
 800293c:	000c      	movs	r4, r1
 800293e:	3a20      	subs	r2, #32
 8002940:	40d4      	lsrs	r4, r2
 8002942:	0022      	movs	r2, r4
 8002944:	4664      	mov	r4, ip
 8002946:	2c20      	cmp	r4, #32
 8002948:	d004      	beq.n	8002954 <__aeabi_dsub+0x1a0>
 800294a:	2740      	movs	r7, #64	; 0x40
 800294c:	1b3f      	subs	r7, r7, r4
 800294e:	40b9      	lsls	r1, r7
 8002950:	4308      	orrs	r0, r1
 8002952:	4680      	mov	r8, r0
 8002954:	4644      	mov	r4, r8
 8002956:	1e61      	subs	r1, r4, #1
 8002958:	418c      	sbcs	r4, r1
 800295a:	4314      	orrs	r4, r2
 800295c:	e0b1      	b.n	8002ac2 <__aeabi_dsub+0x30e>
 800295e:	000c      	movs	r4, r1
 8002960:	4304      	orrs	r4, r0
 8002962:	d02a      	beq.n	80029ba <__aeabi_dsub+0x206>
 8002964:	46bb      	mov	fp, r7
 8002966:	42bd      	cmp	r5, r7
 8002968:	d02d      	beq.n	80029c6 <__aeabi_dsub+0x212>
 800296a:	4c61      	ldr	r4, [pc, #388]	; (8002af0 <__aeabi_dsub+0x33c>)
 800296c:	46a4      	mov	ip, r4
 800296e:	44b4      	add	ip, r6
 8002970:	4664      	mov	r4, ip
 8002972:	2c00      	cmp	r4, #0
 8002974:	d05c      	beq.n	8002a30 <__aeabi_dsub+0x27c>
 8002976:	1b94      	subs	r4, r2, r6
 8002978:	46a4      	mov	ip, r4
 800297a:	2e00      	cmp	r6, #0
 800297c:	d000      	beq.n	8002980 <__aeabi_dsub+0x1cc>
 800297e:	e115      	b.n	8002bac <__aeabi_dsub+0x3f8>
 8002980:	464d      	mov	r5, r9
 8002982:	431d      	orrs	r5, r3
 8002984:	d100      	bne.n	8002988 <__aeabi_dsub+0x1d4>
 8002986:	e1c3      	b.n	8002d10 <__aeabi_dsub+0x55c>
 8002988:	1e65      	subs	r5, r4, #1
 800298a:	2c01      	cmp	r4, #1
 800298c:	d100      	bne.n	8002990 <__aeabi_dsub+0x1dc>
 800298e:	e20c      	b.n	8002daa <__aeabi_dsub+0x5f6>
 8002990:	4e55      	ldr	r6, [pc, #340]	; (8002ae8 <__aeabi_dsub+0x334>)
 8002992:	42b4      	cmp	r4, r6
 8002994:	d100      	bne.n	8002998 <__aeabi_dsub+0x1e4>
 8002996:	e1f8      	b.n	8002d8a <__aeabi_dsub+0x5d6>
 8002998:	46ac      	mov	ip, r5
 800299a:	e10e      	b.n	8002bba <__aeabi_dsub+0x406>
 800299c:	000a      	movs	r2, r1
 800299e:	4302      	orrs	r2, r0
 80029a0:	d100      	bne.n	80029a4 <__aeabi_dsub+0x1f0>
 80029a2:	e136      	b.n	8002c12 <__aeabi_dsub+0x45e>
 80029a4:	0022      	movs	r2, r4
 80029a6:	3a01      	subs	r2, #1
 80029a8:	2c01      	cmp	r4, #1
 80029aa:	d100      	bne.n	80029ae <__aeabi_dsub+0x1fa>
 80029ac:	e1c6      	b.n	8002d3c <__aeabi_dsub+0x588>
 80029ae:	4c4e      	ldr	r4, [pc, #312]	; (8002ae8 <__aeabi_dsub+0x334>)
 80029b0:	45a4      	cmp	ip, r4
 80029b2:	d100      	bne.n	80029b6 <__aeabi_dsub+0x202>
 80029b4:	e0f4      	b.n	8002ba0 <__aeabi_dsub+0x3ec>
 80029b6:	4694      	mov	ip, r2
 80029b8:	e731      	b.n	800281e <__aeabi_dsub+0x6a>
 80029ba:	2401      	movs	r4, #1
 80029bc:	4067      	eors	r7, r4
 80029be:	46bb      	mov	fp, r7
 80029c0:	42bd      	cmp	r5, r7
 80029c2:	d000      	beq.n	80029c6 <__aeabi_dsub+0x212>
 80029c4:	e71c      	b.n	8002800 <__aeabi_dsub+0x4c>
 80029c6:	4c4a      	ldr	r4, [pc, #296]	; (8002af0 <__aeabi_dsub+0x33c>)
 80029c8:	46a4      	mov	ip, r4
 80029ca:	44b4      	add	ip, r6
 80029cc:	4664      	mov	r4, ip
 80029ce:	2c00      	cmp	r4, #0
 80029d0:	d100      	bne.n	80029d4 <__aeabi_dsub+0x220>
 80029d2:	e0cf      	b.n	8002b74 <__aeabi_dsub+0x3c0>
 80029d4:	1b94      	subs	r4, r2, r6
 80029d6:	46a4      	mov	ip, r4
 80029d8:	2e00      	cmp	r6, #0
 80029da:	d100      	bne.n	80029de <__aeabi_dsub+0x22a>
 80029dc:	e15c      	b.n	8002c98 <__aeabi_dsub+0x4e4>
 80029de:	4e42      	ldr	r6, [pc, #264]	; (8002ae8 <__aeabi_dsub+0x334>)
 80029e0:	42b2      	cmp	r2, r6
 80029e2:	d100      	bne.n	80029e6 <__aeabi_dsub+0x232>
 80029e4:	e1ec      	b.n	8002dc0 <__aeabi_dsub+0x60c>
 80029e6:	2680      	movs	r6, #128	; 0x80
 80029e8:	0436      	lsls	r6, r6, #16
 80029ea:	4333      	orrs	r3, r6
 80029ec:	4664      	mov	r4, ip
 80029ee:	2c38      	cmp	r4, #56	; 0x38
 80029f0:	dd00      	ble.n	80029f4 <__aeabi_dsub+0x240>
 80029f2:	e1b3      	b.n	8002d5c <__aeabi_dsub+0x5a8>
 80029f4:	2c1f      	cmp	r4, #31
 80029f6:	dd00      	ble.n	80029fa <__aeabi_dsub+0x246>
 80029f8:	e238      	b.n	8002e6c <__aeabi_dsub+0x6b8>
 80029fa:	2620      	movs	r6, #32
 80029fc:	1b36      	subs	r6, r6, r4
 80029fe:	001c      	movs	r4, r3
 8002a00:	40b4      	lsls	r4, r6
 8002a02:	464f      	mov	r7, r9
 8002a04:	46a0      	mov	r8, r4
 8002a06:	4664      	mov	r4, ip
 8002a08:	40e7      	lsrs	r7, r4
 8002a0a:	4644      	mov	r4, r8
 8002a0c:	433c      	orrs	r4, r7
 8002a0e:	464f      	mov	r7, r9
 8002a10:	40b7      	lsls	r7, r6
 8002a12:	003e      	movs	r6, r7
 8002a14:	1e77      	subs	r7, r6, #1
 8002a16:	41be      	sbcs	r6, r7
 8002a18:	4334      	orrs	r4, r6
 8002a1a:	4666      	mov	r6, ip
 8002a1c:	40f3      	lsrs	r3, r6
 8002a1e:	18c9      	adds	r1, r1, r3
 8002a20:	1824      	adds	r4, r4, r0
 8002a22:	4284      	cmp	r4, r0
 8002a24:	419b      	sbcs	r3, r3
 8002a26:	425b      	negs	r3, r3
 8002a28:	4698      	mov	r8, r3
 8002a2a:	0016      	movs	r6, r2
 8002a2c:	4488      	add	r8, r1
 8002a2e:	e04e      	b.n	8002ace <__aeabi_dsub+0x31a>
 8002a30:	4a30      	ldr	r2, [pc, #192]	; (8002af4 <__aeabi_dsub+0x340>)
 8002a32:	1c74      	adds	r4, r6, #1
 8002a34:	4214      	tst	r4, r2
 8002a36:	d000      	beq.n	8002a3a <__aeabi_dsub+0x286>
 8002a38:	e0d6      	b.n	8002be8 <__aeabi_dsub+0x434>
 8002a3a:	464a      	mov	r2, r9
 8002a3c:	431a      	orrs	r2, r3
 8002a3e:	2e00      	cmp	r6, #0
 8002a40:	d000      	beq.n	8002a44 <__aeabi_dsub+0x290>
 8002a42:	e15b      	b.n	8002cfc <__aeabi_dsub+0x548>
 8002a44:	2a00      	cmp	r2, #0
 8002a46:	d100      	bne.n	8002a4a <__aeabi_dsub+0x296>
 8002a48:	e1a5      	b.n	8002d96 <__aeabi_dsub+0x5e2>
 8002a4a:	000a      	movs	r2, r1
 8002a4c:	4302      	orrs	r2, r0
 8002a4e:	d000      	beq.n	8002a52 <__aeabi_dsub+0x29e>
 8002a50:	e1bb      	b.n	8002dca <__aeabi_dsub+0x616>
 8002a52:	464a      	mov	r2, r9
 8002a54:	0759      	lsls	r1, r3, #29
 8002a56:	08d2      	lsrs	r2, r2, #3
 8002a58:	430a      	orrs	r2, r1
 8002a5a:	08db      	lsrs	r3, r3, #3
 8002a5c:	e027      	b.n	8002aae <__aeabi_dsub+0x2fa>
 8002a5e:	000a      	movs	r2, r1
 8002a60:	4302      	orrs	r2, r0
 8002a62:	d100      	bne.n	8002a66 <__aeabi_dsub+0x2b2>
 8002a64:	e174      	b.n	8002d50 <__aeabi_dsub+0x59c>
 8002a66:	0022      	movs	r2, r4
 8002a68:	3a01      	subs	r2, #1
 8002a6a:	2c01      	cmp	r4, #1
 8002a6c:	d005      	beq.n	8002a7a <__aeabi_dsub+0x2c6>
 8002a6e:	4c1e      	ldr	r4, [pc, #120]	; (8002ae8 <__aeabi_dsub+0x334>)
 8002a70:	45a4      	cmp	ip, r4
 8002a72:	d100      	bne.n	8002a76 <__aeabi_dsub+0x2c2>
 8002a74:	e094      	b.n	8002ba0 <__aeabi_dsub+0x3ec>
 8002a76:	4694      	mov	ip, r2
 8002a78:	e759      	b.n	800292e <__aeabi_dsub+0x17a>
 8002a7a:	4448      	add	r0, r9
 8002a7c:	4548      	cmp	r0, r9
 8002a7e:	4192      	sbcs	r2, r2
 8002a80:	185b      	adds	r3, r3, r1
 8002a82:	4698      	mov	r8, r3
 8002a84:	0004      	movs	r4, r0
 8002a86:	4252      	negs	r2, r2
 8002a88:	4490      	add	r8, r2
 8002a8a:	4643      	mov	r3, r8
 8002a8c:	2602      	movs	r6, #2
 8002a8e:	021b      	lsls	r3, r3, #8
 8002a90:	d500      	bpl.n	8002a94 <__aeabi_dsub+0x2e0>
 8002a92:	e0c4      	b.n	8002c1e <__aeabi_dsub+0x46a>
 8002a94:	3e01      	subs	r6, #1
 8002a96:	0763      	lsls	r3, r4, #29
 8002a98:	d000      	beq.n	8002a9c <__aeabi_dsub+0x2e8>
 8002a9a:	e711      	b.n	80028c0 <__aeabi_dsub+0x10c>
 8002a9c:	4643      	mov	r3, r8
 8002a9e:	46b4      	mov	ip, r6
 8002aa0:	0759      	lsls	r1, r3, #29
 8002aa2:	08e2      	lsrs	r2, r4, #3
 8002aa4:	430a      	orrs	r2, r1
 8002aa6:	08db      	lsrs	r3, r3, #3
 8002aa8:	490f      	ldr	r1, [pc, #60]	; (8002ae8 <__aeabi_dsub+0x334>)
 8002aaa:	458c      	cmp	ip, r1
 8002aac:	d040      	beq.n	8002b30 <__aeabi_dsub+0x37c>
 8002aae:	4661      	mov	r1, ip
 8002ab0:	031b      	lsls	r3, r3, #12
 8002ab2:	0549      	lsls	r1, r1, #21
 8002ab4:	0b1b      	lsrs	r3, r3, #12
 8002ab6:	0d49      	lsrs	r1, r1, #21
 8002ab8:	e720      	b.n	80028fc <__aeabi_dsub+0x148>
 8002aba:	4301      	orrs	r1, r0
 8002abc:	000c      	movs	r4, r1
 8002abe:	1e61      	subs	r1, r4, #1
 8002ac0:	418c      	sbcs	r4, r1
 8002ac2:	444c      	add	r4, r9
 8002ac4:	454c      	cmp	r4, r9
 8002ac6:	4192      	sbcs	r2, r2
 8002ac8:	4252      	negs	r2, r2
 8002aca:	4690      	mov	r8, r2
 8002acc:	4498      	add	r8, r3
 8002ace:	4643      	mov	r3, r8
 8002ad0:	021b      	lsls	r3, r3, #8
 8002ad2:	d5e0      	bpl.n	8002a96 <__aeabi_dsub+0x2e2>
 8002ad4:	4b04      	ldr	r3, [pc, #16]	; (8002ae8 <__aeabi_dsub+0x334>)
 8002ad6:	3601      	adds	r6, #1
 8002ad8:	429e      	cmp	r6, r3
 8002ada:	d000      	beq.n	8002ade <__aeabi_dsub+0x32a>
 8002adc:	e09f      	b.n	8002c1e <__aeabi_dsub+0x46a>
 8002ade:	0031      	movs	r1, r6
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	e70a      	b.n	80028fc <__aeabi_dsub+0x148>
 8002ae6:	46c0      	nop			; (mov r8, r8)
 8002ae8:	000007ff 	.word	0x000007ff
 8002aec:	ff7fffff 	.word	0xff7fffff
 8002af0:	fffff801 	.word	0xfffff801
 8002af4:	000007fe 	.word	0x000007fe
 8002af8:	2a00      	cmp	r2, #0
 8002afa:	d100      	bne.n	8002afe <__aeabi_dsub+0x34a>
 8002afc:	e160      	b.n	8002dc0 <__aeabi_dsub+0x60c>
 8002afe:	000a      	movs	r2, r1
 8002b00:	4302      	orrs	r2, r0
 8002b02:	d04d      	beq.n	8002ba0 <__aeabi_dsub+0x3ec>
 8002b04:	464a      	mov	r2, r9
 8002b06:	075c      	lsls	r4, r3, #29
 8002b08:	08d2      	lsrs	r2, r2, #3
 8002b0a:	4322      	orrs	r2, r4
 8002b0c:	2480      	movs	r4, #128	; 0x80
 8002b0e:	08db      	lsrs	r3, r3, #3
 8002b10:	0324      	lsls	r4, r4, #12
 8002b12:	4223      	tst	r3, r4
 8002b14:	d007      	beq.n	8002b26 <__aeabi_dsub+0x372>
 8002b16:	08ce      	lsrs	r6, r1, #3
 8002b18:	4226      	tst	r6, r4
 8002b1a:	d104      	bne.n	8002b26 <__aeabi_dsub+0x372>
 8002b1c:	465d      	mov	r5, fp
 8002b1e:	0033      	movs	r3, r6
 8002b20:	08c2      	lsrs	r2, r0, #3
 8002b22:	0749      	lsls	r1, r1, #29
 8002b24:	430a      	orrs	r2, r1
 8002b26:	0f51      	lsrs	r1, r2, #29
 8002b28:	00d2      	lsls	r2, r2, #3
 8002b2a:	08d2      	lsrs	r2, r2, #3
 8002b2c:	0749      	lsls	r1, r1, #29
 8002b2e:	430a      	orrs	r2, r1
 8002b30:	0011      	movs	r1, r2
 8002b32:	4319      	orrs	r1, r3
 8002b34:	d100      	bne.n	8002b38 <__aeabi_dsub+0x384>
 8002b36:	e1c8      	b.n	8002eca <__aeabi_dsub+0x716>
 8002b38:	2180      	movs	r1, #128	; 0x80
 8002b3a:	0309      	lsls	r1, r1, #12
 8002b3c:	430b      	orrs	r3, r1
 8002b3e:	031b      	lsls	r3, r3, #12
 8002b40:	49d5      	ldr	r1, [pc, #852]	; (8002e98 <__aeabi_dsub+0x6e4>)
 8002b42:	0b1b      	lsrs	r3, r3, #12
 8002b44:	e6da      	b.n	80028fc <__aeabi_dsub+0x148>
 8002b46:	49d5      	ldr	r1, [pc, #852]	; (8002e9c <__aeabi_dsub+0x6e8>)
 8002b48:	1ab6      	subs	r6, r6, r2
 8002b4a:	400b      	ands	r3, r1
 8002b4c:	4698      	mov	r8, r3
 8002b4e:	e6b5      	b.n	80028bc <__aeabi_dsub+0x108>
 8002b50:	0020      	movs	r0, r4
 8002b52:	f000 fb3b 	bl	80031cc <__clzsi2>
 8002b56:	0002      	movs	r2, r0
 8002b58:	3218      	adds	r2, #24
 8002b5a:	2a1f      	cmp	r2, #31
 8002b5c:	dc00      	bgt.n	8002b60 <__aeabi_dsub+0x3ac>
 8002b5e:	e68f      	b.n	8002880 <__aeabi_dsub+0xcc>
 8002b60:	0023      	movs	r3, r4
 8002b62:	3808      	subs	r0, #8
 8002b64:	4083      	lsls	r3, r0
 8002b66:	2400      	movs	r4, #0
 8002b68:	e692      	b.n	8002890 <__aeabi_dsub+0xdc>
 8002b6a:	4308      	orrs	r0, r1
 8002b6c:	0002      	movs	r2, r0
 8002b6e:	1e50      	subs	r0, r2, #1
 8002b70:	4182      	sbcs	r2, r0
 8002b72:	e66d      	b.n	8002850 <__aeabi_dsub+0x9c>
 8002b74:	4cca      	ldr	r4, [pc, #808]	; (8002ea0 <__aeabi_dsub+0x6ec>)
 8002b76:	1c72      	adds	r2, r6, #1
 8002b78:	4222      	tst	r2, r4
 8002b7a:	d000      	beq.n	8002b7e <__aeabi_dsub+0x3ca>
 8002b7c:	e0ad      	b.n	8002cda <__aeabi_dsub+0x526>
 8002b7e:	464a      	mov	r2, r9
 8002b80:	431a      	orrs	r2, r3
 8002b82:	2e00      	cmp	r6, #0
 8002b84:	d1b8      	bne.n	8002af8 <__aeabi_dsub+0x344>
 8002b86:	2a00      	cmp	r2, #0
 8002b88:	d100      	bne.n	8002b8c <__aeabi_dsub+0x3d8>
 8002b8a:	e158      	b.n	8002e3e <__aeabi_dsub+0x68a>
 8002b8c:	000a      	movs	r2, r1
 8002b8e:	4302      	orrs	r2, r0
 8002b90:	d000      	beq.n	8002b94 <__aeabi_dsub+0x3e0>
 8002b92:	e159      	b.n	8002e48 <__aeabi_dsub+0x694>
 8002b94:	464a      	mov	r2, r9
 8002b96:	0759      	lsls	r1, r3, #29
 8002b98:	08d2      	lsrs	r2, r2, #3
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	08db      	lsrs	r3, r3, #3
 8002b9e:	e786      	b.n	8002aae <__aeabi_dsub+0x2fa>
 8002ba0:	464a      	mov	r2, r9
 8002ba2:	0759      	lsls	r1, r3, #29
 8002ba4:	08d2      	lsrs	r2, r2, #3
 8002ba6:	430a      	orrs	r2, r1
 8002ba8:	08db      	lsrs	r3, r3, #3
 8002baa:	e7c1      	b.n	8002b30 <__aeabi_dsub+0x37c>
 8002bac:	4dba      	ldr	r5, [pc, #744]	; (8002e98 <__aeabi_dsub+0x6e4>)
 8002bae:	42aa      	cmp	r2, r5
 8002bb0:	d100      	bne.n	8002bb4 <__aeabi_dsub+0x400>
 8002bb2:	e11e      	b.n	8002df2 <__aeabi_dsub+0x63e>
 8002bb4:	2580      	movs	r5, #128	; 0x80
 8002bb6:	042d      	lsls	r5, r5, #16
 8002bb8:	432b      	orrs	r3, r5
 8002bba:	4664      	mov	r4, ip
 8002bbc:	2c38      	cmp	r4, #56	; 0x38
 8002bbe:	dc5d      	bgt.n	8002c7c <__aeabi_dsub+0x4c8>
 8002bc0:	2c1f      	cmp	r4, #31
 8002bc2:	dd00      	ble.n	8002bc6 <__aeabi_dsub+0x412>
 8002bc4:	e0d0      	b.n	8002d68 <__aeabi_dsub+0x5b4>
 8002bc6:	2520      	movs	r5, #32
 8002bc8:	4667      	mov	r7, ip
 8002bca:	1b2d      	subs	r5, r5, r4
 8002bcc:	464e      	mov	r6, r9
 8002bce:	001c      	movs	r4, r3
 8002bd0:	40fe      	lsrs	r6, r7
 8002bd2:	40ac      	lsls	r4, r5
 8002bd4:	4334      	orrs	r4, r6
 8002bd6:	464e      	mov	r6, r9
 8002bd8:	40ae      	lsls	r6, r5
 8002bda:	0035      	movs	r5, r6
 8002bdc:	40fb      	lsrs	r3, r7
 8002bde:	1e6e      	subs	r6, r5, #1
 8002be0:	41b5      	sbcs	r5, r6
 8002be2:	1ac9      	subs	r1, r1, r3
 8002be4:	432c      	orrs	r4, r5
 8002be6:	e04e      	b.n	8002c86 <__aeabi_dsub+0x4d2>
 8002be8:	464a      	mov	r2, r9
 8002bea:	1a14      	subs	r4, r2, r0
 8002bec:	45a1      	cmp	r9, r4
 8002bee:	4192      	sbcs	r2, r2
 8002bf0:	4252      	negs	r2, r2
 8002bf2:	4690      	mov	r8, r2
 8002bf4:	1a5f      	subs	r7, r3, r1
 8002bf6:	003a      	movs	r2, r7
 8002bf8:	4647      	mov	r7, r8
 8002bfa:	1bd2      	subs	r2, r2, r7
 8002bfc:	4690      	mov	r8, r2
 8002bfe:	0212      	lsls	r2, r2, #8
 8002c00:	d500      	bpl.n	8002c04 <__aeabi_dsub+0x450>
 8002c02:	e08b      	b.n	8002d1c <__aeabi_dsub+0x568>
 8002c04:	4642      	mov	r2, r8
 8002c06:	4322      	orrs	r2, r4
 8002c08:	d000      	beq.n	8002c0c <__aeabi_dsub+0x458>
 8002c0a:	e630      	b.n	800286e <__aeabi_dsub+0xba>
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	2500      	movs	r5, #0
 8002c10:	e74d      	b.n	8002aae <__aeabi_dsub+0x2fa>
 8002c12:	464a      	mov	r2, r9
 8002c14:	0759      	lsls	r1, r3, #29
 8002c16:	08d2      	lsrs	r2, r2, #3
 8002c18:	430a      	orrs	r2, r1
 8002c1a:	08db      	lsrs	r3, r3, #3
 8002c1c:	e744      	b.n	8002aa8 <__aeabi_dsub+0x2f4>
 8002c1e:	4642      	mov	r2, r8
 8002c20:	4b9e      	ldr	r3, [pc, #632]	; (8002e9c <__aeabi_dsub+0x6e8>)
 8002c22:	0861      	lsrs	r1, r4, #1
 8002c24:	401a      	ands	r2, r3
 8002c26:	0013      	movs	r3, r2
 8002c28:	2201      	movs	r2, #1
 8002c2a:	4014      	ands	r4, r2
 8002c2c:	430c      	orrs	r4, r1
 8002c2e:	07da      	lsls	r2, r3, #31
 8002c30:	085b      	lsrs	r3, r3, #1
 8002c32:	4698      	mov	r8, r3
 8002c34:	4314      	orrs	r4, r2
 8002c36:	e641      	b.n	80028bc <__aeabi_dsub+0x108>
 8002c38:	001a      	movs	r2, r3
 8002c3a:	3e1f      	subs	r6, #31
 8002c3c:	40f2      	lsrs	r2, r6
 8002c3e:	0016      	movs	r6, r2
 8002c40:	2920      	cmp	r1, #32
 8002c42:	d003      	beq.n	8002c4c <__aeabi_dsub+0x498>
 8002c44:	2240      	movs	r2, #64	; 0x40
 8002c46:	1a51      	subs	r1, r2, r1
 8002c48:	408b      	lsls	r3, r1
 8002c4a:	431c      	orrs	r4, r3
 8002c4c:	1e62      	subs	r2, r4, #1
 8002c4e:	4194      	sbcs	r4, r2
 8002c50:	2300      	movs	r3, #0
 8002c52:	4334      	orrs	r4, r6
 8002c54:	4698      	mov	r8, r3
 8002c56:	2600      	movs	r6, #0
 8002c58:	e71d      	b.n	8002a96 <__aeabi_dsub+0x2e2>
 8002c5a:	000c      	movs	r4, r1
 8002c5c:	3a20      	subs	r2, #32
 8002c5e:	40d4      	lsrs	r4, r2
 8002c60:	0022      	movs	r2, r4
 8002c62:	4664      	mov	r4, ip
 8002c64:	2c20      	cmp	r4, #32
 8002c66:	d004      	beq.n	8002c72 <__aeabi_dsub+0x4be>
 8002c68:	2740      	movs	r7, #64	; 0x40
 8002c6a:	1b3f      	subs	r7, r7, r4
 8002c6c:	40b9      	lsls	r1, r7
 8002c6e:	4308      	orrs	r0, r1
 8002c70:	4680      	mov	r8, r0
 8002c72:	4644      	mov	r4, r8
 8002c74:	1e61      	subs	r1, r4, #1
 8002c76:	418c      	sbcs	r4, r1
 8002c78:	4322      	orrs	r2, r4
 8002c7a:	e5e9      	b.n	8002850 <__aeabi_dsub+0x9c>
 8002c7c:	464c      	mov	r4, r9
 8002c7e:	4323      	orrs	r3, r4
 8002c80:	001c      	movs	r4, r3
 8002c82:	1e63      	subs	r3, r4, #1
 8002c84:	419c      	sbcs	r4, r3
 8002c86:	1b04      	subs	r4, r0, r4
 8002c88:	42a0      	cmp	r0, r4
 8002c8a:	419b      	sbcs	r3, r3
 8002c8c:	425b      	negs	r3, r3
 8002c8e:	1acb      	subs	r3, r1, r3
 8002c90:	4698      	mov	r8, r3
 8002c92:	465d      	mov	r5, fp
 8002c94:	0016      	movs	r6, r2
 8002c96:	e5e2      	b.n	800285e <__aeabi_dsub+0xaa>
 8002c98:	464e      	mov	r6, r9
 8002c9a:	431e      	orrs	r6, r3
 8002c9c:	d100      	bne.n	8002ca0 <__aeabi_dsub+0x4ec>
 8002c9e:	e0ae      	b.n	8002dfe <__aeabi_dsub+0x64a>
 8002ca0:	1e66      	subs	r6, r4, #1
 8002ca2:	2c01      	cmp	r4, #1
 8002ca4:	d100      	bne.n	8002ca8 <__aeabi_dsub+0x4f4>
 8002ca6:	e0fd      	b.n	8002ea4 <__aeabi_dsub+0x6f0>
 8002ca8:	4f7b      	ldr	r7, [pc, #492]	; (8002e98 <__aeabi_dsub+0x6e4>)
 8002caa:	42bc      	cmp	r4, r7
 8002cac:	d100      	bne.n	8002cb0 <__aeabi_dsub+0x4fc>
 8002cae:	e107      	b.n	8002ec0 <__aeabi_dsub+0x70c>
 8002cb0:	46b4      	mov	ip, r6
 8002cb2:	e69b      	b.n	80029ec <__aeabi_dsub+0x238>
 8002cb4:	4664      	mov	r4, ip
 8002cb6:	2220      	movs	r2, #32
 8002cb8:	1b12      	subs	r2, r2, r4
 8002cba:	000c      	movs	r4, r1
 8002cbc:	4094      	lsls	r4, r2
 8002cbe:	0007      	movs	r7, r0
 8002cc0:	4090      	lsls	r0, r2
 8002cc2:	46a0      	mov	r8, r4
 8002cc4:	4664      	mov	r4, ip
 8002cc6:	1e42      	subs	r2, r0, #1
 8002cc8:	4190      	sbcs	r0, r2
 8002cca:	4662      	mov	r2, ip
 8002ccc:	40e7      	lsrs	r7, r4
 8002cce:	4644      	mov	r4, r8
 8002cd0:	40d1      	lsrs	r1, r2
 8002cd2:	433c      	orrs	r4, r7
 8002cd4:	4304      	orrs	r4, r0
 8002cd6:	185b      	adds	r3, r3, r1
 8002cd8:	e6f3      	b.n	8002ac2 <__aeabi_dsub+0x30e>
 8002cda:	4c6f      	ldr	r4, [pc, #444]	; (8002e98 <__aeabi_dsub+0x6e4>)
 8002cdc:	42a2      	cmp	r2, r4
 8002cde:	d100      	bne.n	8002ce2 <__aeabi_dsub+0x52e>
 8002ce0:	e0d5      	b.n	8002e8e <__aeabi_dsub+0x6da>
 8002ce2:	4448      	add	r0, r9
 8002ce4:	185b      	adds	r3, r3, r1
 8002ce6:	4548      	cmp	r0, r9
 8002ce8:	4189      	sbcs	r1, r1
 8002cea:	4249      	negs	r1, r1
 8002cec:	185b      	adds	r3, r3, r1
 8002cee:	07dc      	lsls	r4, r3, #31
 8002cf0:	0840      	lsrs	r0, r0, #1
 8002cf2:	085b      	lsrs	r3, r3, #1
 8002cf4:	4698      	mov	r8, r3
 8002cf6:	0016      	movs	r6, r2
 8002cf8:	4304      	orrs	r4, r0
 8002cfa:	e6cc      	b.n	8002a96 <__aeabi_dsub+0x2e2>
 8002cfc:	2a00      	cmp	r2, #0
 8002cfe:	d000      	beq.n	8002d02 <__aeabi_dsub+0x54e>
 8002d00:	e082      	b.n	8002e08 <__aeabi_dsub+0x654>
 8002d02:	000a      	movs	r2, r1
 8002d04:	4302      	orrs	r2, r0
 8002d06:	d140      	bne.n	8002d8a <__aeabi_dsub+0x5d6>
 8002d08:	2380      	movs	r3, #128	; 0x80
 8002d0a:	2500      	movs	r5, #0
 8002d0c:	031b      	lsls	r3, r3, #12
 8002d0e:	e713      	b.n	8002b38 <__aeabi_dsub+0x384>
 8002d10:	074b      	lsls	r3, r1, #29
 8002d12:	08c2      	lsrs	r2, r0, #3
 8002d14:	431a      	orrs	r2, r3
 8002d16:	465d      	mov	r5, fp
 8002d18:	08cb      	lsrs	r3, r1, #3
 8002d1a:	e6c5      	b.n	8002aa8 <__aeabi_dsub+0x2f4>
 8002d1c:	464a      	mov	r2, r9
 8002d1e:	1a84      	subs	r4, r0, r2
 8002d20:	42a0      	cmp	r0, r4
 8002d22:	4192      	sbcs	r2, r2
 8002d24:	1acb      	subs	r3, r1, r3
 8002d26:	4252      	negs	r2, r2
 8002d28:	1a9b      	subs	r3, r3, r2
 8002d2a:	4698      	mov	r8, r3
 8002d2c:	465d      	mov	r5, fp
 8002d2e:	e59e      	b.n	800286e <__aeabi_dsub+0xba>
 8002d30:	464a      	mov	r2, r9
 8002d32:	0759      	lsls	r1, r3, #29
 8002d34:	08d2      	lsrs	r2, r2, #3
 8002d36:	430a      	orrs	r2, r1
 8002d38:	08db      	lsrs	r3, r3, #3
 8002d3a:	e6f9      	b.n	8002b30 <__aeabi_dsub+0x37c>
 8002d3c:	464a      	mov	r2, r9
 8002d3e:	1a14      	subs	r4, r2, r0
 8002d40:	45a1      	cmp	r9, r4
 8002d42:	4192      	sbcs	r2, r2
 8002d44:	1a5b      	subs	r3, r3, r1
 8002d46:	4252      	negs	r2, r2
 8002d48:	1a9b      	subs	r3, r3, r2
 8002d4a:	4698      	mov	r8, r3
 8002d4c:	2601      	movs	r6, #1
 8002d4e:	e586      	b.n	800285e <__aeabi_dsub+0xaa>
 8002d50:	464a      	mov	r2, r9
 8002d52:	0759      	lsls	r1, r3, #29
 8002d54:	08d2      	lsrs	r2, r2, #3
 8002d56:	430a      	orrs	r2, r1
 8002d58:	08db      	lsrs	r3, r3, #3
 8002d5a:	e6a5      	b.n	8002aa8 <__aeabi_dsub+0x2f4>
 8002d5c:	464c      	mov	r4, r9
 8002d5e:	4323      	orrs	r3, r4
 8002d60:	001c      	movs	r4, r3
 8002d62:	1e63      	subs	r3, r4, #1
 8002d64:	419c      	sbcs	r4, r3
 8002d66:	e65b      	b.n	8002a20 <__aeabi_dsub+0x26c>
 8002d68:	4665      	mov	r5, ip
 8002d6a:	001e      	movs	r6, r3
 8002d6c:	3d20      	subs	r5, #32
 8002d6e:	40ee      	lsrs	r6, r5
 8002d70:	2c20      	cmp	r4, #32
 8002d72:	d005      	beq.n	8002d80 <__aeabi_dsub+0x5cc>
 8002d74:	2540      	movs	r5, #64	; 0x40
 8002d76:	1b2d      	subs	r5, r5, r4
 8002d78:	40ab      	lsls	r3, r5
 8002d7a:	464c      	mov	r4, r9
 8002d7c:	431c      	orrs	r4, r3
 8002d7e:	46a2      	mov	sl, r4
 8002d80:	4654      	mov	r4, sl
 8002d82:	1e63      	subs	r3, r4, #1
 8002d84:	419c      	sbcs	r4, r3
 8002d86:	4334      	orrs	r4, r6
 8002d88:	e77d      	b.n	8002c86 <__aeabi_dsub+0x4d2>
 8002d8a:	074b      	lsls	r3, r1, #29
 8002d8c:	08c2      	lsrs	r2, r0, #3
 8002d8e:	431a      	orrs	r2, r3
 8002d90:	465d      	mov	r5, fp
 8002d92:	08cb      	lsrs	r3, r1, #3
 8002d94:	e6cc      	b.n	8002b30 <__aeabi_dsub+0x37c>
 8002d96:	000a      	movs	r2, r1
 8002d98:	4302      	orrs	r2, r0
 8002d9a:	d100      	bne.n	8002d9e <__aeabi_dsub+0x5ea>
 8002d9c:	e736      	b.n	8002c0c <__aeabi_dsub+0x458>
 8002d9e:	074b      	lsls	r3, r1, #29
 8002da0:	08c2      	lsrs	r2, r0, #3
 8002da2:	431a      	orrs	r2, r3
 8002da4:	465d      	mov	r5, fp
 8002da6:	08cb      	lsrs	r3, r1, #3
 8002da8:	e681      	b.n	8002aae <__aeabi_dsub+0x2fa>
 8002daa:	464a      	mov	r2, r9
 8002dac:	1a84      	subs	r4, r0, r2
 8002dae:	42a0      	cmp	r0, r4
 8002db0:	4192      	sbcs	r2, r2
 8002db2:	1acb      	subs	r3, r1, r3
 8002db4:	4252      	negs	r2, r2
 8002db6:	1a9b      	subs	r3, r3, r2
 8002db8:	4698      	mov	r8, r3
 8002dba:	465d      	mov	r5, fp
 8002dbc:	2601      	movs	r6, #1
 8002dbe:	e54e      	b.n	800285e <__aeabi_dsub+0xaa>
 8002dc0:	074b      	lsls	r3, r1, #29
 8002dc2:	08c2      	lsrs	r2, r0, #3
 8002dc4:	431a      	orrs	r2, r3
 8002dc6:	08cb      	lsrs	r3, r1, #3
 8002dc8:	e6b2      	b.n	8002b30 <__aeabi_dsub+0x37c>
 8002dca:	464a      	mov	r2, r9
 8002dcc:	1a14      	subs	r4, r2, r0
 8002dce:	45a1      	cmp	r9, r4
 8002dd0:	4192      	sbcs	r2, r2
 8002dd2:	1a5f      	subs	r7, r3, r1
 8002dd4:	4252      	negs	r2, r2
 8002dd6:	1aba      	subs	r2, r7, r2
 8002dd8:	4690      	mov	r8, r2
 8002dda:	0212      	lsls	r2, r2, #8
 8002ddc:	d56b      	bpl.n	8002eb6 <__aeabi_dsub+0x702>
 8002dde:	464a      	mov	r2, r9
 8002de0:	1a84      	subs	r4, r0, r2
 8002de2:	42a0      	cmp	r0, r4
 8002de4:	4192      	sbcs	r2, r2
 8002de6:	1acb      	subs	r3, r1, r3
 8002de8:	4252      	negs	r2, r2
 8002dea:	1a9b      	subs	r3, r3, r2
 8002dec:	4698      	mov	r8, r3
 8002dee:	465d      	mov	r5, fp
 8002df0:	e564      	b.n	80028bc <__aeabi_dsub+0x108>
 8002df2:	074b      	lsls	r3, r1, #29
 8002df4:	08c2      	lsrs	r2, r0, #3
 8002df6:	431a      	orrs	r2, r3
 8002df8:	465d      	mov	r5, fp
 8002dfa:	08cb      	lsrs	r3, r1, #3
 8002dfc:	e698      	b.n	8002b30 <__aeabi_dsub+0x37c>
 8002dfe:	074b      	lsls	r3, r1, #29
 8002e00:	08c2      	lsrs	r2, r0, #3
 8002e02:	431a      	orrs	r2, r3
 8002e04:	08cb      	lsrs	r3, r1, #3
 8002e06:	e64f      	b.n	8002aa8 <__aeabi_dsub+0x2f4>
 8002e08:	000a      	movs	r2, r1
 8002e0a:	4302      	orrs	r2, r0
 8002e0c:	d090      	beq.n	8002d30 <__aeabi_dsub+0x57c>
 8002e0e:	464a      	mov	r2, r9
 8002e10:	075c      	lsls	r4, r3, #29
 8002e12:	08d2      	lsrs	r2, r2, #3
 8002e14:	4314      	orrs	r4, r2
 8002e16:	2280      	movs	r2, #128	; 0x80
 8002e18:	08db      	lsrs	r3, r3, #3
 8002e1a:	0312      	lsls	r2, r2, #12
 8002e1c:	4213      	tst	r3, r2
 8002e1e:	d008      	beq.n	8002e32 <__aeabi_dsub+0x67e>
 8002e20:	08ce      	lsrs	r6, r1, #3
 8002e22:	4216      	tst	r6, r2
 8002e24:	d105      	bne.n	8002e32 <__aeabi_dsub+0x67e>
 8002e26:	08c0      	lsrs	r0, r0, #3
 8002e28:	0749      	lsls	r1, r1, #29
 8002e2a:	4308      	orrs	r0, r1
 8002e2c:	0004      	movs	r4, r0
 8002e2e:	465d      	mov	r5, fp
 8002e30:	0033      	movs	r3, r6
 8002e32:	0f61      	lsrs	r1, r4, #29
 8002e34:	00e2      	lsls	r2, r4, #3
 8002e36:	0749      	lsls	r1, r1, #29
 8002e38:	08d2      	lsrs	r2, r2, #3
 8002e3a:	430a      	orrs	r2, r1
 8002e3c:	e678      	b.n	8002b30 <__aeabi_dsub+0x37c>
 8002e3e:	074b      	lsls	r3, r1, #29
 8002e40:	08c2      	lsrs	r2, r0, #3
 8002e42:	431a      	orrs	r2, r3
 8002e44:	08cb      	lsrs	r3, r1, #3
 8002e46:	e632      	b.n	8002aae <__aeabi_dsub+0x2fa>
 8002e48:	4448      	add	r0, r9
 8002e4a:	185b      	adds	r3, r3, r1
 8002e4c:	4548      	cmp	r0, r9
 8002e4e:	4192      	sbcs	r2, r2
 8002e50:	4698      	mov	r8, r3
 8002e52:	4252      	negs	r2, r2
 8002e54:	4490      	add	r8, r2
 8002e56:	4643      	mov	r3, r8
 8002e58:	0004      	movs	r4, r0
 8002e5a:	021b      	lsls	r3, r3, #8
 8002e5c:	d400      	bmi.n	8002e60 <__aeabi_dsub+0x6ac>
 8002e5e:	e61a      	b.n	8002a96 <__aeabi_dsub+0x2e2>
 8002e60:	4642      	mov	r2, r8
 8002e62:	4b0e      	ldr	r3, [pc, #56]	; (8002e9c <__aeabi_dsub+0x6e8>)
 8002e64:	2601      	movs	r6, #1
 8002e66:	401a      	ands	r2, r3
 8002e68:	4690      	mov	r8, r2
 8002e6a:	e614      	b.n	8002a96 <__aeabi_dsub+0x2e2>
 8002e6c:	4666      	mov	r6, ip
 8002e6e:	001f      	movs	r7, r3
 8002e70:	3e20      	subs	r6, #32
 8002e72:	40f7      	lsrs	r7, r6
 8002e74:	2c20      	cmp	r4, #32
 8002e76:	d005      	beq.n	8002e84 <__aeabi_dsub+0x6d0>
 8002e78:	2640      	movs	r6, #64	; 0x40
 8002e7a:	1b36      	subs	r6, r6, r4
 8002e7c:	40b3      	lsls	r3, r6
 8002e7e:	464c      	mov	r4, r9
 8002e80:	431c      	orrs	r4, r3
 8002e82:	46a2      	mov	sl, r4
 8002e84:	4654      	mov	r4, sl
 8002e86:	1e63      	subs	r3, r4, #1
 8002e88:	419c      	sbcs	r4, r3
 8002e8a:	433c      	orrs	r4, r7
 8002e8c:	e5c8      	b.n	8002a20 <__aeabi_dsub+0x26c>
 8002e8e:	0011      	movs	r1, r2
 8002e90:	2300      	movs	r3, #0
 8002e92:	2200      	movs	r2, #0
 8002e94:	e532      	b.n	80028fc <__aeabi_dsub+0x148>
 8002e96:	46c0      	nop			; (mov r8, r8)
 8002e98:	000007ff 	.word	0x000007ff
 8002e9c:	ff7fffff 	.word	0xff7fffff
 8002ea0:	000007fe 	.word	0x000007fe
 8002ea4:	464a      	mov	r2, r9
 8002ea6:	1814      	adds	r4, r2, r0
 8002ea8:	4284      	cmp	r4, r0
 8002eaa:	4192      	sbcs	r2, r2
 8002eac:	185b      	adds	r3, r3, r1
 8002eae:	4698      	mov	r8, r3
 8002eb0:	4252      	negs	r2, r2
 8002eb2:	4490      	add	r8, r2
 8002eb4:	e5e9      	b.n	8002a8a <__aeabi_dsub+0x2d6>
 8002eb6:	4642      	mov	r2, r8
 8002eb8:	4322      	orrs	r2, r4
 8002eba:	d100      	bne.n	8002ebe <__aeabi_dsub+0x70a>
 8002ebc:	e6a6      	b.n	8002c0c <__aeabi_dsub+0x458>
 8002ebe:	e5ea      	b.n	8002a96 <__aeabi_dsub+0x2e2>
 8002ec0:	074b      	lsls	r3, r1, #29
 8002ec2:	08c2      	lsrs	r2, r0, #3
 8002ec4:	431a      	orrs	r2, r3
 8002ec6:	08cb      	lsrs	r3, r1, #3
 8002ec8:	e632      	b.n	8002b30 <__aeabi_dsub+0x37c>
 8002eca:	2200      	movs	r2, #0
 8002ecc:	4901      	ldr	r1, [pc, #4]	; (8002ed4 <__aeabi_dsub+0x720>)
 8002ece:	0013      	movs	r3, r2
 8002ed0:	e514      	b.n	80028fc <__aeabi_dsub+0x148>
 8002ed2:	46c0      	nop			; (mov r8, r8)
 8002ed4:	000007ff 	.word	0x000007ff

08002ed8 <__aeabi_dcmpun>:
 8002ed8:	b570      	push	{r4, r5, r6, lr}
 8002eda:	0005      	movs	r5, r0
 8002edc:	480c      	ldr	r0, [pc, #48]	; (8002f10 <__aeabi_dcmpun+0x38>)
 8002ede:	030c      	lsls	r4, r1, #12
 8002ee0:	0016      	movs	r6, r2
 8002ee2:	0049      	lsls	r1, r1, #1
 8002ee4:	031a      	lsls	r2, r3, #12
 8002ee6:	005b      	lsls	r3, r3, #1
 8002ee8:	0b24      	lsrs	r4, r4, #12
 8002eea:	0d49      	lsrs	r1, r1, #21
 8002eec:	0b12      	lsrs	r2, r2, #12
 8002eee:	0d5b      	lsrs	r3, r3, #21
 8002ef0:	4281      	cmp	r1, r0
 8002ef2:	d008      	beq.n	8002f06 <__aeabi_dcmpun+0x2e>
 8002ef4:	4906      	ldr	r1, [pc, #24]	; (8002f10 <__aeabi_dcmpun+0x38>)
 8002ef6:	2000      	movs	r0, #0
 8002ef8:	428b      	cmp	r3, r1
 8002efa:	d103      	bne.n	8002f04 <__aeabi_dcmpun+0x2c>
 8002efc:	4332      	orrs	r2, r6
 8002efe:	0010      	movs	r0, r2
 8002f00:	1e42      	subs	r2, r0, #1
 8002f02:	4190      	sbcs	r0, r2
 8002f04:	bd70      	pop	{r4, r5, r6, pc}
 8002f06:	2001      	movs	r0, #1
 8002f08:	432c      	orrs	r4, r5
 8002f0a:	d1fb      	bne.n	8002f04 <__aeabi_dcmpun+0x2c>
 8002f0c:	e7f2      	b.n	8002ef4 <__aeabi_dcmpun+0x1c>
 8002f0e:	46c0      	nop			; (mov r8, r8)
 8002f10:	000007ff 	.word	0x000007ff

08002f14 <__aeabi_d2iz>:
 8002f14:	000a      	movs	r2, r1
 8002f16:	b530      	push	{r4, r5, lr}
 8002f18:	4c13      	ldr	r4, [pc, #76]	; (8002f68 <__aeabi_d2iz+0x54>)
 8002f1a:	0053      	lsls	r3, r2, #1
 8002f1c:	0309      	lsls	r1, r1, #12
 8002f1e:	0005      	movs	r5, r0
 8002f20:	0b09      	lsrs	r1, r1, #12
 8002f22:	2000      	movs	r0, #0
 8002f24:	0d5b      	lsrs	r3, r3, #21
 8002f26:	0fd2      	lsrs	r2, r2, #31
 8002f28:	42a3      	cmp	r3, r4
 8002f2a:	dd04      	ble.n	8002f36 <__aeabi_d2iz+0x22>
 8002f2c:	480f      	ldr	r0, [pc, #60]	; (8002f6c <__aeabi_d2iz+0x58>)
 8002f2e:	4283      	cmp	r3, r0
 8002f30:	dd02      	ble.n	8002f38 <__aeabi_d2iz+0x24>
 8002f32:	4b0f      	ldr	r3, [pc, #60]	; (8002f70 <__aeabi_d2iz+0x5c>)
 8002f34:	18d0      	adds	r0, r2, r3
 8002f36:	bd30      	pop	{r4, r5, pc}
 8002f38:	2080      	movs	r0, #128	; 0x80
 8002f3a:	0340      	lsls	r0, r0, #13
 8002f3c:	4301      	orrs	r1, r0
 8002f3e:	480d      	ldr	r0, [pc, #52]	; (8002f74 <__aeabi_d2iz+0x60>)
 8002f40:	1ac0      	subs	r0, r0, r3
 8002f42:	281f      	cmp	r0, #31
 8002f44:	dd08      	ble.n	8002f58 <__aeabi_d2iz+0x44>
 8002f46:	480c      	ldr	r0, [pc, #48]	; (8002f78 <__aeabi_d2iz+0x64>)
 8002f48:	1ac3      	subs	r3, r0, r3
 8002f4a:	40d9      	lsrs	r1, r3
 8002f4c:	000b      	movs	r3, r1
 8002f4e:	4258      	negs	r0, r3
 8002f50:	2a00      	cmp	r2, #0
 8002f52:	d1f0      	bne.n	8002f36 <__aeabi_d2iz+0x22>
 8002f54:	0018      	movs	r0, r3
 8002f56:	e7ee      	b.n	8002f36 <__aeabi_d2iz+0x22>
 8002f58:	4c08      	ldr	r4, [pc, #32]	; (8002f7c <__aeabi_d2iz+0x68>)
 8002f5a:	40c5      	lsrs	r5, r0
 8002f5c:	46a4      	mov	ip, r4
 8002f5e:	4463      	add	r3, ip
 8002f60:	4099      	lsls	r1, r3
 8002f62:	000b      	movs	r3, r1
 8002f64:	432b      	orrs	r3, r5
 8002f66:	e7f2      	b.n	8002f4e <__aeabi_d2iz+0x3a>
 8002f68:	000003fe 	.word	0x000003fe
 8002f6c:	0000041d 	.word	0x0000041d
 8002f70:	7fffffff 	.word	0x7fffffff
 8002f74:	00000433 	.word	0x00000433
 8002f78:	00000413 	.word	0x00000413
 8002f7c:	fffffbed 	.word	0xfffffbed

08002f80 <__aeabi_i2d>:
 8002f80:	b570      	push	{r4, r5, r6, lr}
 8002f82:	2800      	cmp	r0, #0
 8002f84:	d016      	beq.n	8002fb4 <__aeabi_i2d+0x34>
 8002f86:	17c3      	asrs	r3, r0, #31
 8002f88:	18c5      	adds	r5, r0, r3
 8002f8a:	405d      	eors	r5, r3
 8002f8c:	0fc4      	lsrs	r4, r0, #31
 8002f8e:	0028      	movs	r0, r5
 8002f90:	f000 f91c 	bl	80031cc <__clzsi2>
 8002f94:	4a11      	ldr	r2, [pc, #68]	; (8002fdc <__aeabi_i2d+0x5c>)
 8002f96:	1a12      	subs	r2, r2, r0
 8002f98:	280a      	cmp	r0, #10
 8002f9a:	dc16      	bgt.n	8002fca <__aeabi_i2d+0x4a>
 8002f9c:	0003      	movs	r3, r0
 8002f9e:	002e      	movs	r6, r5
 8002fa0:	3315      	adds	r3, #21
 8002fa2:	409e      	lsls	r6, r3
 8002fa4:	230b      	movs	r3, #11
 8002fa6:	1a18      	subs	r0, r3, r0
 8002fa8:	40c5      	lsrs	r5, r0
 8002faa:	0553      	lsls	r3, r2, #21
 8002fac:	032d      	lsls	r5, r5, #12
 8002fae:	0b2d      	lsrs	r5, r5, #12
 8002fb0:	0d5b      	lsrs	r3, r3, #21
 8002fb2:	e003      	b.n	8002fbc <__aeabi_i2d+0x3c>
 8002fb4:	2400      	movs	r4, #0
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	2500      	movs	r5, #0
 8002fba:	2600      	movs	r6, #0
 8002fbc:	051b      	lsls	r3, r3, #20
 8002fbe:	432b      	orrs	r3, r5
 8002fc0:	07e4      	lsls	r4, r4, #31
 8002fc2:	4323      	orrs	r3, r4
 8002fc4:	0030      	movs	r0, r6
 8002fc6:	0019      	movs	r1, r3
 8002fc8:	bd70      	pop	{r4, r5, r6, pc}
 8002fca:	380b      	subs	r0, #11
 8002fcc:	4085      	lsls	r5, r0
 8002fce:	0553      	lsls	r3, r2, #21
 8002fd0:	032d      	lsls	r5, r5, #12
 8002fd2:	2600      	movs	r6, #0
 8002fd4:	0b2d      	lsrs	r5, r5, #12
 8002fd6:	0d5b      	lsrs	r3, r3, #21
 8002fd8:	e7f0      	b.n	8002fbc <__aeabi_i2d+0x3c>
 8002fda:	46c0      	nop			; (mov r8, r8)
 8002fdc:	0000041e 	.word	0x0000041e

08002fe0 <__aeabi_ui2d>:
 8002fe0:	b510      	push	{r4, lr}
 8002fe2:	1e04      	subs	r4, r0, #0
 8002fe4:	d010      	beq.n	8003008 <__aeabi_ui2d+0x28>
 8002fe6:	f000 f8f1 	bl	80031cc <__clzsi2>
 8002fea:	4b0f      	ldr	r3, [pc, #60]	; (8003028 <__aeabi_ui2d+0x48>)
 8002fec:	1a1b      	subs	r3, r3, r0
 8002fee:	280a      	cmp	r0, #10
 8002ff0:	dc11      	bgt.n	8003016 <__aeabi_ui2d+0x36>
 8002ff2:	220b      	movs	r2, #11
 8002ff4:	0021      	movs	r1, r4
 8002ff6:	1a12      	subs	r2, r2, r0
 8002ff8:	40d1      	lsrs	r1, r2
 8002ffa:	3015      	adds	r0, #21
 8002ffc:	030a      	lsls	r2, r1, #12
 8002ffe:	055b      	lsls	r3, r3, #21
 8003000:	4084      	lsls	r4, r0
 8003002:	0b12      	lsrs	r2, r2, #12
 8003004:	0d5b      	lsrs	r3, r3, #21
 8003006:	e001      	b.n	800300c <__aeabi_ui2d+0x2c>
 8003008:	2300      	movs	r3, #0
 800300a:	2200      	movs	r2, #0
 800300c:	051b      	lsls	r3, r3, #20
 800300e:	4313      	orrs	r3, r2
 8003010:	0020      	movs	r0, r4
 8003012:	0019      	movs	r1, r3
 8003014:	bd10      	pop	{r4, pc}
 8003016:	0022      	movs	r2, r4
 8003018:	380b      	subs	r0, #11
 800301a:	4082      	lsls	r2, r0
 800301c:	055b      	lsls	r3, r3, #21
 800301e:	0312      	lsls	r2, r2, #12
 8003020:	2400      	movs	r4, #0
 8003022:	0b12      	lsrs	r2, r2, #12
 8003024:	0d5b      	lsrs	r3, r3, #21
 8003026:	e7f1      	b.n	800300c <__aeabi_ui2d+0x2c>
 8003028:	0000041e 	.word	0x0000041e

0800302c <__aeabi_f2d>:
 800302c:	b570      	push	{r4, r5, r6, lr}
 800302e:	0043      	lsls	r3, r0, #1
 8003030:	0246      	lsls	r6, r0, #9
 8003032:	0fc4      	lsrs	r4, r0, #31
 8003034:	20fe      	movs	r0, #254	; 0xfe
 8003036:	0e1b      	lsrs	r3, r3, #24
 8003038:	1c59      	adds	r1, r3, #1
 800303a:	0a75      	lsrs	r5, r6, #9
 800303c:	4208      	tst	r0, r1
 800303e:	d00c      	beq.n	800305a <__aeabi_f2d+0x2e>
 8003040:	22e0      	movs	r2, #224	; 0xe0
 8003042:	0092      	lsls	r2, r2, #2
 8003044:	4694      	mov	ip, r2
 8003046:	076d      	lsls	r5, r5, #29
 8003048:	0b36      	lsrs	r6, r6, #12
 800304a:	4463      	add	r3, ip
 800304c:	051b      	lsls	r3, r3, #20
 800304e:	4333      	orrs	r3, r6
 8003050:	07e4      	lsls	r4, r4, #31
 8003052:	4323      	orrs	r3, r4
 8003054:	0028      	movs	r0, r5
 8003056:	0019      	movs	r1, r3
 8003058:	bd70      	pop	{r4, r5, r6, pc}
 800305a:	2b00      	cmp	r3, #0
 800305c:	d114      	bne.n	8003088 <__aeabi_f2d+0x5c>
 800305e:	2d00      	cmp	r5, #0
 8003060:	d01b      	beq.n	800309a <__aeabi_f2d+0x6e>
 8003062:	0028      	movs	r0, r5
 8003064:	f000 f8b2 	bl	80031cc <__clzsi2>
 8003068:	280a      	cmp	r0, #10
 800306a:	dc1c      	bgt.n	80030a6 <__aeabi_f2d+0x7a>
 800306c:	230b      	movs	r3, #11
 800306e:	002a      	movs	r2, r5
 8003070:	1a1b      	subs	r3, r3, r0
 8003072:	40da      	lsrs	r2, r3
 8003074:	0003      	movs	r3, r0
 8003076:	3315      	adds	r3, #21
 8003078:	409d      	lsls	r5, r3
 800307a:	4b0e      	ldr	r3, [pc, #56]	; (80030b4 <__aeabi_f2d+0x88>)
 800307c:	0312      	lsls	r2, r2, #12
 800307e:	1a1b      	subs	r3, r3, r0
 8003080:	055b      	lsls	r3, r3, #21
 8003082:	0b16      	lsrs	r6, r2, #12
 8003084:	0d5b      	lsrs	r3, r3, #21
 8003086:	e7e1      	b.n	800304c <__aeabi_f2d+0x20>
 8003088:	2d00      	cmp	r5, #0
 800308a:	d009      	beq.n	80030a0 <__aeabi_f2d+0x74>
 800308c:	0b32      	lsrs	r2, r6, #12
 800308e:	2680      	movs	r6, #128	; 0x80
 8003090:	0336      	lsls	r6, r6, #12
 8003092:	4b09      	ldr	r3, [pc, #36]	; (80030b8 <__aeabi_f2d+0x8c>)
 8003094:	076d      	lsls	r5, r5, #29
 8003096:	4316      	orrs	r6, r2
 8003098:	e7d8      	b.n	800304c <__aeabi_f2d+0x20>
 800309a:	2300      	movs	r3, #0
 800309c:	2600      	movs	r6, #0
 800309e:	e7d5      	b.n	800304c <__aeabi_f2d+0x20>
 80030a0:	2600      	movs	r6, #0
 80030a2:	4b05      	ldr	r3, [pc, #20]	; (80030b8 <__aeabi_f2d+0x8c>)
 80030a4:	e7d2      	b.n	800304c <__aeabi_f2d+0x20>
 80030a6:	0003      	movs	r3, r0
 80030a8:	002a      	movs	r2, r5
 80030aa:	3b0b      	subs	r3, #11
 80030ac:	409a      	lsls	r2, r3
 80030ae:	2500      	movs	r5, #0
 80030b0:	e7e3      	b.n	800307a <__aeabi_f2d+0x4e>
 80030b2:	46c0      	nop			; (mov r8, r8)
 80030b4:	00000389 	.word	0x00000389
 80030b8:	000007ff 	.word	0x000007ff

080030bc <__aeabi_d2f>:
 80030bc:	0002      	movs	r2, r0
 80030be:	004b      	lsls	r3, r1, #1
 80030c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030c2:	0308      	lsls	r0, r1, #12
 80030c4:	0d5b      	lsrs	r3, r3, #21
 80030c6:	4e3d      	ldr	r6, [pc, #244]	; (80031bc <__aeabi_d2f+0x100>)
 80030c8:	0fcc      	lsrs	r4, r1, #31
 80030ca:	0a40      	lsrs	r0, r0, #9
 80030cc:	0f51      	lsrs	r1, r2, #29
 80030ce:	1c5f      	adds	r7, r3, #1
 80030d0:	4308      	orrs	r0, r1
 80030d2:	00d5      	lsls	r5, r2, #3
 80030d4:	4237      	tst	r7, r6
 80030d6:	d00a      	beq.n	80030ee <__aeabi_d2f+0x32>
 80030d8:	4939      	ldr	r1, [pc, #228]	; (80031c0 <__aeabi_d2f+0x104>)
 80030da:	185e      	adds	r6, r3, r1
 80030dc:	2efe      	cmp	r6, #254	; 0xfe
 80030de:	dd16      	ble.n	800310e <__aeabi_d2f+0x52>
 80030e0:	23ff      	movs	r3, #255	; 0xff
 80030e2:	2100      	movs	r1, #0
 80030e4:	05db      	lsls	r3, r3, #23
 80030e6:	430b      	orrs	r3, r1
 80030e8:	07e0      	lsls	r0, r4, #31
 80030ea:	4318      	orrs	r0, r3
 80030ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d106      	bne.n	8003100 <__aeabi_d2f+0x44>
 80030f2:	4328      	orrs	r0, r5
 80030f4:	d027      	beq.n	8003146 <__aeabi_d2f+0x8a>
 80030f6:	2105      	movs	r1, #5
 80030f8:	0189      	lsls	r1, r1, #6
 80030fa:	0a49      	lsrs	r1, r1, #9
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	e7f1      	b.n	80030e4 <__aeabi_d2f+0x28>
 8003100:	4305      	orrs	r5, r0
 8003102:	d0ed      	beq.n	80030e0 <__aeabi_d2f+0x24>
 8003104:	2180      	movs	r1, #128	; 0x80
 8003106:	03c9      	lsls	r1, r1, #15
 8003108:	23ff      	movs	r3, #255	; 0xff
 800310a:	4301      	orrs	r1, r0
 800310c:	e7ea      	b.n	80030e4 <__aeabi_d2f+0x28>
 800310e:	2e00      	cmp	r6, #0
 8003110:	dd1c      	ble.n	800314c <__aeabi_d2f+0x90>
 8003112:	0192      	lsls	r2, r2, #6
 8003114:	0011      	movs	r1, r2
 8003116:	1e4a      	subs	r2, r1, #1
 8003118:	4191      	sbcs	r1, r2
 800311a:	00c0      	lsls	r0, r0, #3
 800311c:	0f6d      	lsrs	r5, r5, #29
 800311e:	4301      	orrs	r1, r0
 8003120:	4329      	orrs	r1, r5
 8003122:	074b      	lsls	r3, r1, #29
 8003124:	d048      	beq.n	80031b8 <__aeabi_d2f+0xfc>
 8003126:	230f      	movs	r3, #15
 8003128:	400b      	ands	r3, r1
 800312a:	2b04      	cmp	r3, #4
 800312c:	d000      	beq.n	8003130 <__aeabi_d2f+0x74>
 800312e:	3104      	adds	r1, #4
 8003130:	2380      	movs	r3, #128	; 0x80
 8003132:	04db      	lsls	r3, r3, #19
 8003134:	400b      	ands	r3, r1
 8003136:	d03f      	beq.n	80031b8 <__aeabi_d2f+0xfc>
 8003138:	1c72      	adds	r2, r6, #1
 800313a:	2efe      	cmp	r6, #254	; 0xfe
 800313c:	d0d0      	beq.n	80030e0 <__aeabi_d2f+0x24>
 800313e:	0189      	lsls	r1, r1, #6
 8003140:	0a49      	lsrs	r1, r1, #9
 8003142:	b2d3      	uxtb	r3, r2
 8003144:	e7ce      	b.n	80030e4 <__aeabi_d2f+0x28>
 8003146:	2300      	movs	r3, #0
 8003148:	2100      	movs	r1, #0
 800314a:	e7cb      	b.n	80030e4 <__aeabi_d2f+0x28>
 800314c:	0032      	movs	r2, r6
 800314e:	3217      	adds	r2, #23
 8003150:	db22      	blt.n	8003198 <__aeabi_d2f+0xdc>
 8003152:	2180      	movs	r1, #128	; 0x80
 8003154:	221e      	movs	r2, #30
 8003156:	0409      	lsls	r1, r1, #16
 8003158:	4308      	orrs	r0, r1
 800315a:	1b92      	subs	r2, r2, r6
 800315c:	2a1f      	cmp	r2, #31
 800315e:	dd1d      	ble.n	800319c <__aeabi_d2f+0xe0>
 8003160:	2102      	movs	r1, #2
 8003162:	4249      	negs	r1, r1
 8003164:	1b8e      	subs	r6, r1, r6
 8003166:	0001      	movs	r1, r0
 8003168:	40f1      	lsrs	r1, r6
 800316a:	000e      	movs	r6, r1
 800316c:	2a20      	cmp	r2, #32
 800316e:	d004      	beq.n	800317a <__aeabi_d2f+0xbe>
 8003170:	4a14      	ldr	r2, [pc, #80]	; (80031c4 <__aeabi_d2f+0x108>)
 8003172:	4694      	mov	ip, r2
 8003174:	4463      	add	r3, ip
 8003176:	4098      	lsls	r0, r3
 8003178:	4305      	orrs	r5, r0
 800317a:	0029      	movs	r1, r5
 800317c:	1e4d      	subs	r5, r1, #1
 800317e:	41a9      	sbcs	r1, r5
 8003180:	4331      	orrs	r1, r6
 8003182:	2600      	movs	r6, #0
 8003184:	074b      	lsls	r3, r1, #29
 8003186:	d1ce      	bne.n	8003126 <__aeabi_d2f+0x6a>
 8003188:	2080      	movs	r0, #128	; 0x80
 800318a:	000b      	movs	r3, r1
 800318c:	04c0      	lsls	r0, r0, #19
 800318e:	2201      	movs	r2, #1
 8003190:	4003      	ands	r3, r0
 8003192:	4201      	tst	r1, r0
 8003194:	d1d3      	bne.n	800313e <__aeabi_d2f+0x82>
 8003196:	e7af      	b.n	80030f8 <__aeabi_d2f+0x3c>
 8003198:	2300      	movs	r3, #0
 800319a:	e7ac      	b.n	80030f6 <__aeabi_d2f+0x3a>
 800319c:	490a      	ldr	r1, [pc, #40]	; (80031c8 <__aeabi_d2f+0x10c>)
 800319e:	468c      	mov	ip, r1
 80031a0:	0029      	movs	r1, r5
 80031a2:	4463      	add	r3, ip
 80031a4:	40d1      	lsrs	r1, r2
 80031a6:	409d      	lsls	r5, r3
 80031a8:	000a      	movs	r2, r1
 80031aa:	0029      	movs	r1, r5
 80031ac:	4098      	lsls	r0, r3
 80031ae:	1e4d      	subs	r5, r1, #1
 80031b0:	41a9      	sbcs	r1, r5
 80031b2:	4301      	orrs	r1, r0
 80031b4:	4311      	orrs	r1, r2
 80031b6:	e7e4      	b.n	8003182 <__aeabi_d2f+0xc6>
 80031b8:	0033      	movs	r3, r6
 80031ba:	e79d      	b.n	80030f8 <__aeabi_d2f+0x3c>
 80031bc:	000007fe 	.word	0x000007fe
 80031c0:	fffffc80 	.word	0xfffffc80
 80031c4:	fffffca2 	.word	0xfffffca2
 80031c8:	fffffc82 	.word	0xfffffc82

080031cc <__clzsi2>:
 80031cc:	211c      	movs	r1, #28
 80031ce:	2301      	movs	r3, #1
 80031d0:	041b      	lsls	r3, r3, #16
 80031d2:	4298      	cmp	r0, r3
 80031d4:	d301      	bcc.n	80031da <__clzsi2+0xe>
 80031d6:	0c00      	lsrs	r0, r0, #16
 80031d8:	3910      	subs	r1, #16
 80031da:	0a1b      	lsrs	r3, r3, #8
 80031dc:	4298      	cmp	r0, r3
 80031de:	d301      	bcc.n	80031e4 <__clzsi2+0x18>
 80031e0:	0a00      	lsrs	r0, r0, #8
 80031e2:	3908      	subs	r1, #8
 80031e4:	091b      	lsrs	r3, r3, #4
 80031e6:	4298      	cmp	r0, r3
 80031e8:	d301      	bcc.n	80031ee <__clzsi2+0x22>
 80031ea:	0900      	lsrs	r0, r0, #4
 80031ec:	3904      	subs	r1, #4
 80031ee:	a202      	add	r2, pc, #8	; (adr r2, 80031f8 <__clzsi2+0x2c>)
 80031f0:	5c10      	ldrb	r0, [r2, r0]
 80031f2:	1840      	adds	r0, r0, r1
 80031f4:	4770      	bx	lr
 80031f6:	46c0      	nop			; (mov r8, r8)
 80031f8:	02020304 	.word	0x02020304
 80031fc:	01010101 	.word	0x01010101
	...

08003208 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003208:	b530      	push	{r4, r5, lr}
 800320a:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800320c:	2214      	movs	r2, #20
 800320e:	2100      	movs	r1, #0
 8003210:	a805      	add	r0, sp, #20
 8003212:	f003 fb4a 	bl	80068aa <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003216:	2080      	movs	r0, #128	; 0x80
 8003218:	4b2a      	ldr	r3, [pc, #168]	; (80032c4 <MX_GPIO_Init+0xbc>)
 800321a:	0300      	lsls	r0, r0, #12
 800321c:	6959      	ldr	r1, [r3, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800321e:	2490      	movs	r4, #144	; 0x90
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003220:	4301      	orrs	r1, r0
 8003222:	6159      	str	r1, [r3, #20]
 8003224:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003226:	05e4      	lsls	r4, r4, #23
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003228:	4002      	ands	r2, r0
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800322a:	2080      	movs	r0, #128	; 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800322c:	9201      	str	r2, [sp, #4]
 800322e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003230:	6959      	ldr	r1, [r3, #20]
 8003232:	03c0      	lsls	r0, r0, #15
 8003234:	4301      	orrs	r1, r0
 8003236:	6159      	str	r1, [r3, #20]
 8003238:	695a      	ldr	r2, [r3, #20]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800323a:	2500      	movs	r5, #0
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800323c:	4002      	ands	r2, r0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800323e:	2080      	movs	r0, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003240:	9202      	str	r2, [sp, #8]
 8003242:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003244:	6959      	ldr	r1, [r3, #20]
 8003246:	0280      	lsls	r0, r0, #10
 8003248:	4301      	orrs	r1, r0
 800324a:	6159      	str	r1, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800324c:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800324e:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003250:	02c9      	lsls	r1, r1, #11
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003252:	4002      	ands	r2, r0
 8003254:	9203      	str	r2, [sp, #12]
 8003256:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003258:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800325a:	0020      	movs	r0, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800325c:	430a      	orrs	r2, r1
 800325e:	615a      	str	r2, [r3, #20]
 8003260:	695b      	ldr	r3, [r3, #20]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003262:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003264:	400b      	ands	r3, r1
 8003266:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003268:	2120      	movs	r1, #32
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800326a:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800326c:	f000 fe38 	bl	8003ee0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 8003270:	2380      	movs	r3, #128	; 0x80
 8003272:	019b      	lsls	r3, r3, #6
 8003274:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003276:	4b14      	ldr	r3, [pc, #80]	; (80032c8 <MX_GPIO_Init+0xc0>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003278:	a905      	add	r1, sp, #20
 800327a:	4814      	ldr	r0, [pc, #80]	; (80032cc <MX_GPIO_Init+0xc4>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800327c:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800327e:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003280:	f000 fd38 	bl	8003cf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8003284:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003286:	0020      	movs	r0, r4
  GPIO_InitStruct.Pin = LD2_Pin;
 8003288:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800328a:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800328c:	3b1f      	subs	r3, #31
 800328e:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003290:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003292:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003294:	f000 fd2e 	bl	8003cf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003298:	2380      	movs	r3, #128	; 0x80
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800329e:	4b0c      	ldr	r3, [pc, #48]	; (80032d0 <MX_GPIO_Init+0xc8>)
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032a0:	0020      	movs	r0, r4
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80032a2:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80032a4:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032a6:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80032a8:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032aa:	f000 fd23 	bl	8003cf4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80032ae:	2200      	movs	r2, #0
 80032b0:	2100      	movs	r1, #0
 80032b2:	2007      	movs	r0, #7
 80032b4:	f000 fcc6 	bl	8003c44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80032b8:	2007      	movs	r0, #7
 80032ba:	f000 fcf5 	bl	8003ca8 <HAL_NVIC_EnableIRQ>

}
 80032be:	b00b      	add	sp, #44	; 0x2c
 80032c0:	bd30      	pop	{r4, r5, pc}
 80032c2:	46c0      	nop			; (mov r8, r8)
 80032c4:	40021000 	.word	0x40021000
 80032c8:	10210000 	.word	0x10210000
 80032cc:	48000800 	.word	0x48000800
 80032d0:	10110000 	.word	0x10110000

080032d4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80032d4:	b510      	push	{r4, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80032d6:	4b19      	ldr	r3, [pc, #100]	; (800333c <MX_I2C1_Init+0x68>)
 80032d8:	4c19      	ldr	r4, [pc, #100]	; (8003340 <MX_I2C1_Init+0x6c>)
  hi2c1.Init.Timing = 0x0000020B;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80032da:	2201      	movs	r2, #1
  hi2c1.Instance = I2C1;
 80032dc:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x0000020B;
 80032de:	4b19      	ldr	r3, [pc, #100]	; (8003344 <MX_I2C1_Init+0x70>)
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80032e0:	0020      	movs	r0, r4
  hi2c1.Init.Timing = 0x0000020B;
 80032e2:	6063      	str	r3, [r4, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80032e4:	2300      	movs	r3, #0
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80032e6:	60e2      	str	r2, [r4, #12]
  hi2c1.Init.OwnAddress1 = 0;
 80032e8:	60a3      	str	r3, [r4, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80032ea:	6123      	str	r3, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80032ec:	6163      	str	r3, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80032ee:	61a3      	str	r3, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80032f0:	61e3      	str	r3, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80032f2:	6223      	str	r3, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80032f4:	f000 ff62 	bl	80041bc <HAL_I2C_Init>
 80032f8:	2800      	cmp	r0, #0
 80032fa:	d10c      	bne.n	8003316 <MX_I2C1_Init+0x42>
  {
    Error_Handler();
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80032fc:	2100      	movs	r1, #0
 80032fe:	0020      	movs	r0, r4
 8003300:	f001 f97a 	bl	80045f8 <HAL_I2CEx_ConfigAnalogFilter>
 8003304:	2800      	cmp	r0, #0
 8003306:	d10e      	bne.n	8003326 <MX_I2C1_Init+0x52>
  {
    Error_Handler();
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003308:	2100      	movs	r1, #0
 800330a:	0020      	movs	r0, r4
 800330c:	f001 f99c 	bl	8004648 <HAL_I2CEx_ConfigDigitalFilter>
 8003310:	2800      	cmp	r0, #0
 8003312:	d110      	bne.n	8003336 <MX_I2C1_Init+0x62>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003314:	bd10      	pop	{r4, pc}
    Error_Handler();
 8003316:	f000 fa63 	bl	80037e0 <Error_Handler>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800331a:	2100      	movs	r1, #0
 800331c:	0020      	movs	r0, r4
 800331e:	f001 f96b 	bl	80045f8 <HAL_I2CEx_ConfigAnalogFilter>
 8003322:	2800      	cmp	r0, #0
 8003324:	d0f0      	beq.n	8003308 <MX_I2C1_Init+0x34>
    Error_Handler();
 8003326:	f000 fa5b 	bl	80037e0 <Error_Handler>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800332a:	2100      	movs	r1, #0
 800332c:	0020      	movs	r0, r4
 800332e:	f001 f98b 	bl	8004648 <HAL_I2CEx_ConfigDigitalFilter>
 8003332:	2800      	cmp	r0, #0
 8003334:	d0ee      	beq.n	8003314 <MX_I2C1_Init+0x40>
    Error_Handler();
 8003336:	f000 fa53 	bl	80037e0 <Error_Handler>
}
 800333a:	e7eb      	b.n	8003314 <MX_I2C1_Init+0x40>
 800333c:	40005400 	.word	0x40005400
 8003340:	200002c0 	.word	0x200002c0
 8003344:	0000020b 	.word	0x0000020b

08003348 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003348:	b510      	push	{r4, lr}
 800334a:	0004      	movs	r4, r0
 800334c:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800334e:	2214      	movs	r2, #20
 8003350:	2100      	movs	r1, #0
 8003352:	a803      	add	r0, sp, #12
 8003354:	f003 faa9 	bl	80068aa <memset>
  if(i2cHandle->Instance==I2C1)
 8003358:	4b13      	ldr	r3, [pc, #76]	; (80033a8 <HAL_I2C_MspInit+0x60>)
 800335a:	6822      	ldr	r2, [r4, #0]
 800335c:	429a      	cmp	r2, r3
 800335e:	d001      	beq.n	8003364 <HAL_I2C_MspInit+0x1c>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003360:	b008      	add	sp, #32
 8003362:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003364:	2180      	movs	r1, #128	; 0x80
 8003366:	4c11      	ldr	r4, [pc, #68]	; (80033ac <HAL_I2C_MspInit+0x64>)
 8003368:	02c9      	lsls	r1, r1, #11
 800336a:	6962      	ldr	r2, [r4, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800336c:	4810      	ldr	r0, [pc, #64]	; (80033b0 <HAL_I2C_MspInit+0x68>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800336e:	430a      	orrs	r2, r1
 8003370:	6162      	str	r2, [r4, #20]
 8003372:	6963      	ldr	r3, [r4, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003374:	2203      	movs	r2, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003376:	400b      	ands	r3, r1
 8003378:	9301      	str	r3, [sp, #4]
 800337a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800337c:	23c0      	movs	r3, #192	; 0xc0
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003382:	2312      	movs	r3, #18
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003384:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003386:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003388:	3b11      	subs	r3, #17
 800338a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800338c:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800338e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003390:	f000 fcb0 	bl	8003cf4 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003394:	2180      	movs	r1, #128	; 0x80
 8003396:	69e2      	ldr	r2, [r4, #28]
 8003398:	0389      	lsls	r1, r1, #14
 800339a:	430a      	orrs	r2, r1
 800339c:	61e2      	str	r2, [r4, #28]
 800339e:	69e3      	ldr	r3, [r4, #28]
 80033a0:	400b      	ands	r3, r1
 80033a2:	9302      	str	r3, [sp, #8]
 80033a4:	9b02      	ldr	r3, [sp, #8]
}
 80033a6:	e7db      	b.n	8003360 <HAL_I2C_MspInit+0x18>
 80033a8:	40005400 	.word	0x40005400
 80033ac:	40021000 	.word	0x40021000
 80033b0:	48000400 	.word	0x48000400

080033b4 <MX_IWDG_Init>:
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80033b4:	4808      	ldr	r0, [pc, #32]	; (80033d8 <MX_IWDG_Init+0x24>)
 80033b6:	4b09      	ldr	r3, [pc, #36]	; (80033dc <MX_IWDG_Init+0x28>)
{
 80033b8:	b510      	push	{r4, lr}
  hiwdg.Instance = IWDG;
 80033ba:	6003      	str	r3, [r0, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_16;
 80033bc:	2302      	movs	r3, #2
 80033be:	6043      	str	r3, [r0, #4]
  hiwdg.Init.Window = 4095;
 80033c0:	4b07      	ldr	r3, [pc, #28]	; (80033e0 <MX_IWDG_Init+0x2c>)
 80033c2:	60c3      	str	r3, [r0, #12]
  hiwdg.Init.Reload = 2500;
 80033c4:	4b07      	ldr	r3, [pc, #28]	; (80033e4 <MX_IWDG_Init+0x30>)
 80033c6:	6083      	str	r3, [r0, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80033c8:	f001 f964 	bl	8004694 <HAL_IWDG_Init>
 80033cc:	2800      	cmp	r0, #0
 80033ce:	d100      	bne.n	80033d2 <MX_IWDG_Init+0x1e>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80033d0:	bd10      	pop	{r4, pc}
    Error_Handler();
 80033d2:	f000 fa05 	bl	80037e0 <Error_Handler>
}
 80033d6:	e7fb      	b.n	80033d0 <MX_IWDG_Init+0x1c>
 80033d8:	2000030c 	.word	0x2000030c
 80033dc:	40003000 	.word	0x40003000
 80033e0:	00000fff 	.word	0x00000fff
 80033e4:	000009c4 	.word	0x000009c4

080033e8 <_ZN7MPU605013dmpInitializeEv>:
#define MPU6050_DMP_FIFO_RATE_DIVISOR 0x01 // The New instance of the Firmware has this as the default 
#endif

// this is the most basic initialization I can create. with the intent that we access the register bytes as few times as needed to get the job done.
// for detailed descriptins of all registers and there purpose google "MPU-6000/MPU-6050 Register Map and Descriptions"
uint8_t MPU6050::dmpInitialize() { // Lets get it over with fast Write everything once and set it up necely
 80033e8:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t val;
	uint16_t ival;
  // Reset procedure per instructions in the "MPU-6000/MPU-6050 Register Map and Descriptions" page 41
	I2Cdev::writeBit(devAddr,0x6B, 7, (val = 1)); //PWR_MGMT_1: reset with 100ms delay
 80033ea:	240d      	movs	r4, #13
 80033ec:	2601      	movs	r6, #1
uint8_t MPU6050::dmpInitialize() { // Lets get it over with fast Write everything once and set it up necely
 80033ee:	b085      	sub	sp, #20
	I2Cdev::writeBit(devAddr,0x6B, 7, (val = 1)); //PWR_MGMT_1: reset with 100ms delay
 80033f0:	446c      	add	r4, sp
uint8_t MPU6050::dmpInitialize() { // Lets get it over with fast Write everything once and set it up necely
 80033f2:	0005      	movs	r5, r0
	I2Cdev::writeBit(devAddr,0x6B, 7, (val = 1)); //PWR_MGMT_1: reset with 100ms delay
 80033f4:	2301      	movs	r3, #1
 80033f6:	2207      	movs	r2, #7
 80033f8:	216b      	movs	r1, #107	; 0x6b
 80033fa:	7800      	ldrb	r0, [r0, #0]
 80033fc:	7026      	strb	r6, [r4, #0]
 80033fe:	f002 fc09 	bl	8005c14 <_ZN6I2Cdev8writeBitEhhhh>
	delay(100);
 8003402:	2064      	movs	r0, #100	; 0x64
 8003404:	f000 fc0c 	bl	8003c20 <HAL_Delay>
	I2Cdev::writeBits(devAddr,0x6A, 2, 3, (val = 0b111)); // full SIGNAL_PATH_RESET: with another 100ms delay
 8003408:	2307      	movs	r3, #7
	delay(100);         
	I2Cdev::writeBytes(devAddr,0x6B, 1, &(val = 0x01)); // 1000 0001 PWR_MGMT_1:Clock Source Select PLL_X_gyro
	I2Cdev::writeBytes(devAddr,0x38, 1, &(val = 0x00)); // 0000 0000 INT_ENABLE: no Interrupt
 800340a:	2700      	movs	r7, #0
	I2Cdev::writeBits(devAddr,0x6A, 2, 3, (val = 0b111)); // full SIGNAL_PATH_RESET: with another 100ms delay
 800340c:	2202      	movs	r2, #2
 800340e:	216a      	movs	r1, #106	; 0x6a
 8003410:	7023      	strb	r3, [r4, #0]
 8003412:	7828      	ldrb	r0, [r5, #0]
 8003414:	9300      	str	r3, [sp, #0]
 8003416:	3b04      	subs	r3, #4
 8003418:	f002 fc30 	bl	8005c7c <_ZN6I2Cdev9writeBitsEhhhhh>
	delay(100);         
 800341c:	2064      	movs	r0, #100	; 0x64
 800341e:	f000 fbff 	bl	8003c20 <HAL_Delay>
	I2Cdev::writeBytes(devAddr,0x6B, 1, &(val = 0x01)); // 1000 0001 PWR_MGMT_1:Clock Source Select PLL_X_gyro
 8003422:	0023      	movs	r3, r4
 8003424:	2201      	movs	r2, #1
 8003426:	216b      	movs	r1, #107	; 0x6b
 8003428:	7828      	ldrb	r0, [r5, #0]
 800342a:	7026      	strb	r6, [r4, #0]
 800342c:	f002 fc7e 	bl	8005d2c <_ZN6I2Cdev10writeBytesEhhhPh>
	I2Cdev::writeBytes(devAddr,0x38, 1, &(val = 0x00)); // 0000 0000 INT_ENABLE: no Interrupt
 8003430:	0023      	movs	r3, r4
 8003432:	2201      	movs	r2, #1
 8003434:	2138      	movs	r1, #56	; 0x38
 8003436:	7828      	ldrb	r0, [r5, #0]
 8003438:	7027      	strb	r7, [r4, #0]
 800343a:	f002 fc77 	bl	8005d2c <_ZN6I2Cdev10writeBytesEhhhPh>
	I2Cdev::writeBytes(devAddr,0x23, 1, &(val = 0x00)); // 0000 0000 MPU FIFO_EN: (all off) Using DMP's FIFO instead
 800343e:	0023      	movs	r3, r4
 8003440:	2201      	movs	r2, #1
 8003442:	2123      	movs	r1, #35	; 0x23
 8003444:	7828      	ldrb	r0, [r5, #0]
 8003446:	7027      	strb	r7, [r4, #0]
 8003448:	f002 fc70 	bl	8005d2c <_ZN6I2Cdev10writeBytesEhhhPh>
	I2Cdev::writeBytes(devAddr,0x1C, 1, &(val = 0x00)); // 0000 0000 ACCEL_CONFIG: 0 =  Accel Full Scale Select: 2g
 800344c:	0023      	movs	r3, r4
 800344e:	2201      	movs	r2, #1
 8003450:	211c      	movs	r1, #28
 8003452:	7828      	ldrb	r0, [r5, #0]
 8003454:	7027      	strb	r7, [r4, #0]
 8003456:	f002 fc69 	bl	8005d2c <_ZN6I2Cdev10writeBytesEhhhPh>
	I2Cdev::writeBytes(devAddr,0x37, 1, &(val = 0x80)); // 1001 0000 INT_PIN_CFG: ACTL The logic level for int pin is active low. and interrupt status bits are cleared on any read
 800345a:	2380      	movs	r3, #128	; 0x80
 800345c:	2201      	movs	r2, #1
 800345e:	2137      	movs	r1, #55	; 0x37
 8003460:	7023      	strb	r3, [r4, #0]
 8003462:	7828      	ldrb	r0, [r5, #0]
 8003464:	0023      	movs	r3, r4
 8003466:	f002 fc61 	bl	8005d2c <_ZN6I2Cdev10writeBytesEhhhPh>
	I2Cdev::writeBytes(devAddr,0x6B, 1, &(val = 0x01)); // 0000 0001 PWR_MGMT_1: Clock Source Select PLL_X_gyro
 800346a:	0023      	movs	r3, r4
 800346c:	2201      	movs	r2, #1
 800346e:	216b      	movs	r1, #107	; 0x6b
 8003470:	7828      	ldrb	r0, [r5, #0]
 8003472:	7026      	strb	r6, [r4, #0]
 8003474:	f002 fc5a 	bl	8005d2c <_ZN6I2Cdev10writeBytesEhhhPh>
	I2Cdev::writeBytes(devAddr,0x19, 1, &(val = 0x04)); // 0000 0100 SMPLRT_DIV: Divides the internal sample rate 400Hz ( Sample Rate = Gyroscope Output Rate / (1 + SMPLRT_DIV))
 8003478:	2304      	movs	r3, #4
 800347a:	2201      	movs	r2, #1
 800347c:	2119      	movs	r1, #25
 800347e:	7023      	strb	r3, [r4, #0]
 8003480:	7828      	ldrb	r0, [r5, #0]
 8003482:	0023      	movs	r3, r4
 8003484:	f002 fc52 	bl	8005d2c <_ZN6I2Cdev10writeBytesEhhhPh>
	I2Cdev::writeBytes(devAddr,0x1A, 1, &(val = 0x01)); // 0000 0001 CONFIG: Digital Low Pass Filter (DLPF) Configuration 188HZ  //Im betting this will be the beat
 8003488:	0023      	movs	r3, r4
 800348a:	2201      	movs	r2, #1
 800348c:	211a      	movs	r1, #26
 800348e:	7828      	ldrb	r0, [r5, #0]
 8003490:	7026      	strb	r6, [r4, #0]
 8003492:	f002 fc4b 	bl	8005d2c <_ZN6I2Cdev10writeBytesEhhhPh>
	if (!writeProgMemoryBlock(dmpMemory, MPU6050_DMP_CODE_SIZE)) return 1; // Loads the DMP image into the MPU6050 Memory // Should Never Fail
 8003496:	2300      	movs	r3, #0
 8003498:	0028      	movs	r0, r5
 800349a:	4a1d      	ldr	r2, [pc, #116]	; (8003510 <_ZN7MPU605013dmpInitializeEv+0x128>)
 800349c:	491d      	ldr	r1, [pc, #116]	; (8003514 <_ZN7MPU605013dmpInitializeEv+0x12c>)
 800349e:	9601      	str	r6, [sp, #4]
 80034a0:	9700      	str	r7, [sp, #0]
 80034a2:	f002 feb9 	bl	8006218 <_ZN7MPU605020writeProgMemoryBlockEPKhthhb>
 80034a6:	2301      	movs	r3, #1
 80034a8:	2800      	cmp	r0, #0
 80034aa:	d02e      	beq.n	800350a <_ZN7MPU605013dmpInitializeEv+0x122>
	I2Cdev::writeWords(devAddr, 0x70, 1, &(ival = 0x0400)); // DMP Program Start Address
 80034ac:	2280      	movs	r2, #128	; 0x80
 80034ae:	330d      	adds	r3, #13
 80034b0:	446b      	add	r3, sp
 80034b2:	00d2      	lsls	r2, r2, #3
 80034b4:	801a      	strh	r2, [r3, #0]
 80034b6:	2170      	movs	r1, #112	; 0x70
 80034b8:	2201      	movs	r2, #1
 80034ba:	7828      	ldrb	r0, [r5, #0]
 80034bc:	f002 fc4a 	bl	8005d54 <_ZN6I2Cdev10writeWordsEhhhPt>
	I2Cdev::writeBytes(devAddr,0x1B, 1, &(val = 0x18)); // 0001 1000 GYRO_CONFIG: 3 = +2000 Deg/sec
 80034c0:	2318      	movs	r3, #24
 80034c2:	2201      	movs	r2, #1
 80034c4:	211b      	movs	r1, #27
 80034c6:	7023      	strb	r3, [r4, #0]
 80034c8:	7828      	ldrb	r0, [r5, #0]
 80034ca:	0023      	movs	r3, r4
 80034cc:	f002 fc2e 	bl	8005d2c <_ZN6I2Cdev10writeBytesEhhhPh>
	I2Cdev::writeBytes(devAddr,0x6A, 1, &(val = 0xC0)); // 1100 1100 USER_CTRL: Enable Fifo and Reset Fifo
 80034d0:	23c0      	movs	r3, #192	; 0xc0
 80034d2:	2201      	movs	r2, #1
 80034d4:	216a      	movs	r1, #106	; 0x6a
 80034d6:	7023      	strb	r3, [r4, #0]
 80034d8:	7828      	ldrb	r0, [r5, #0]
 80034da:	0023      	movs	r3, r4
 80034dc:	f002 fc26 	bl	8005d2c <_ZN6I2Cdev10writeBytesEhhhPh>
	I2Cdev::writeBytes(devAddr,0x38, 1, &(val = 0x02)); // 0000 0010 INT_ENABLE: RAW_DMP_INT_EN on
 80034e0:	2302      	movs	r3, #2
 80034e2:	2201      	movs	r2, #1
 80034e4:	2138      	movs	r1, #56	; 0x38
 80034e6:	7023      	strb	r3, [r4, #0]
 80034e8:	7828      	ldrb	r0, [r5, #0]
 80034ea:	0023      	movs	r3, r4
 80034ec:	f002 fc1e 	bl	8005d2c <_ZN6I2Cdev10writeBytesEhhhPh>
	I2Cdev::writeBit(devAddr,0x6A, 2, 1);      // Reset FIFO one last time just for kicks. (MPUi2cWrite reads 0x6A first and only alters 1 bit and then saves the byte)
 80034f0:	2301      	movs	r3, #1
 80034f2:	2202      	movs	r2, #2
 80034f4:	216a      	movs	r1, #106	; 0x6a
 80034f6:	7828      	ldrb	r0, [r5, #0]
 80034f8:	f002 fb8c 	bl	8005c14 <_ZN6I2Cdev8writeBitEhhhh>

  setDMPEnabled(false); // disable DMP for compatibility with the MPU6050 library
 80034fc:	2100      	movs	r1, #0
 80034fe:	0028      	movs	r0, r5
 8003500:	f002 fdb2 	bl	8006068 <_ZN7MPU605013setDMPEnabledEb>
/*
    dmpPacketSize += 16;//DMP_FEATURE_6X_LP_QUAT
    dmpPacketSize += 6;//DMP_FEATURE_SEND_RAW_ACCEL
    dmpPacketSize += 6;//DMP_FEATURE_SEND_RAW_GYRO
*/
	dmpPacketSize = 28;
 8003504:	231c      	movs	r3, #28
 8003506:	82ab      	strh	r3, [r5, #20]
	return 0;
 8003508:	2300      	movs	r3, #0
}
 800350a:	0018      	movs	r0, r3
 800350c:	b005      	add	sp, #20
 800350e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003510:	00000bf6 	.word	0x00000bf6
 8003514:	0800b68c 	.word	0x0800b68c

08003518 <_Z8MPU_Initv>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int MPU_Init() {
 8003518:	b510      	push	{r4, lr}

	// initialize device
	printf(F("Initializing I2C devices...\n"));           //F(x)=x
 800351a:	4832      	ldr	r0, [pc, #200]	; (80035e4 <_Z8MPU_Initv+0xcc>)
 800351c:	f004 f998 	bl	8007850 <puts>
	mpu.initialize();
 8003520:	4c31      	ldr	r4, [pc, #196]	; (80035e8 <_Z8MPU_Initv+0xd0>)
 8003522:	0020      	movs	r0, r4
 8003524:	f002 fc6c 	bl	8005e00 <_ZN7MPU605010initializeEv>

	// verify connection
	printf(F("Testing device connections...\n"));
 8003528:	4830      	ldr	r0, [pc, #192]	; (80035ec <_Z8MPU_Initv+0xd4>)
 800352a:	f004 f991 	bl	8007850 <puts>
	//        HAL_Delay(250);
	//        HAL_UART_Transmit(&huart1,(uint8_t *)".",1,100);
	//        //HAL_NVIC_SystemReset();
	//    }

	if (!mpu.testConnection()) {
 800352e:	0020      	movs	r0, r4
 8003530:	f002 fc88 	bl	8005e44 <_ZN7MPU605014testConnectionEv>
 8003534:	2800      	cmp	r0, #0
 8003536:	d041      	beq.n	80035bc <_Z8MPU_Initv+0xa4>
	}

	// wait for ready

	// load and configure the DMP
	printf(F("Initializing DMP...\n"));
 8003538:	482d      	ldr	r0, [pc, #180]	; (80035f0 <_Z8MPU_Initv+0xd8>)
 800353a:	f004 f989 	bl	8007850 <puts>

	// supply your own gyro offsets here, scaled for min sensitivity
	mpu.setXGyroOffset(30);
 800353e:	211e      	movs	r1, #30
 8003540:	0020      	movs	r0, r4
 8003542:	f002 fd79 	bl	8006038 <_ZN7MPU605014setXGyroOffsetEs>
	mpu.setYGyroOffset(58);
 8003546:	213a      	movs	r1, #58	; 0x3a
 8003548:	0020      	movs	r0, r4
 800354a:	f002 fd7d 	bl	8006048 <_ZN7MPU605014setYGyroOffsetEs>
	mpu.setZGyroOffset(21);
 800354e:	2115      	movs	r1, #21
 8003550:	0020      	movs	r0, r4
 8003552:	f002 fd81 	bl	8006058 <_ZN7MPU605014setZGyroOffsetEs>
	mpu.setXAccelOffset(0);
 8003556:	2100      	movs	r1, #0
 8003558:	0020      	movs	r0, r4
 800355a:	f002 fd19 	bl	8005f90 <_ZN7MPU605015setXAccelOffsetEs>
	mpu.setYAccelOffset(0);
 800355e:	2100      	movs	r1, #0
 8003560:	0020      	movs	r0, r4
 8003562:	f002 fd31 	bl	8005fc8 <_ZN7MPU605015setYAccelOffsetEs>
	mpu.setZAccelOffset(0);
 8003566:	0020      	movs	r0, r4
 8003568:	2100      	movs	r1, #0
 800356a:	f002 fd49 	bl	8006000 <_ZN7MPU605015setZAccelOffsetEs>

	if (mpu.dmpInitialize()) {
 800356e:	0020      	movs	r0, r4
 8003570:	f7ff ff3a 	bl	80033e8 <_ZN7MPU605013dmpInitializeEv>
 8003574:	2800      	cmp	r0, #0
 8003576:	d127      	bne.n	80035c8 <_Z8MPU_Initv+0xb0>
		printf(F(")\n"));
		return -1;
	}

	// Calibration Time: generate offsets and calibrate our MPU6050
	mpu.CalibrateAccel(6);
 8003578:	2106      	movs	r1, #6
 800357a:	0020      	movs	r0, r4
 800357c:	f003 f878 	bl	8006670 <_ZN7MPU605014CalibrateAccelEh>
	mpu.CalibrateGyro(6);
 8003580:	2106      	movs	r1, #6
 8003582:	0020      	movs	r0, r4
 8003584:	f003 f828 	bl	80065d8 <_ZN7MPU605013CalibrateGyroEh>
	mpu.PrintActiveOffsets();
 8003588:	0020      	movs	r0, r4
 800358a:	f003 f8ab 	bl	80066e4 <_ZN7MPU605018PrintActiveOffsetsEv>
	// turn on the DMP, now that it's ready
	printf(F("Enabling DMP...\n"));
 800358e:	4819      	ldr	r0, [pc, #100]	; (80035f4 <_Z8MPU_Initv+0xdc>)
 8003590:	f004 f95e 	bl	8007850 <puts>
	mpu.setDMPEnabled(true);
 8003594:	2101      	movs	r1, #1
 8003596:	0020      	movs	r0, r4
 8003598:	f002 fd66 	bl	8006068 <_ZN7MPU605013setDMPEnabledEb>

	// enable Arduino interrupt detection
	mpuIntStatus = mpu.getIntStatus();
 800359c:	0020      	movs	r0, r4
 800359e:	f002 fc69 	bl	8005e74 <_ZN7MPU605012getIntStatusEv>
 80035a2:	4b15      	ldr	r3, [pc, #84]	; (80035f8 <_Z8MPU_Initv+0xe0>)
 80035a4:	7018      	strb	r0, [r3, #0]

	// set our DMP Ready flag so the main loop() function knows it's okay to use it
	printf(F("DMP ready! Waiting for first interrupt...\n"));
 80035a6:	4815      	ldr	r0, [pc, #84]	; (80035fc <_Z8MPU_Initv+0xe4>)
 80035a8:	f004 f952 	bl	8007850 <puts>
	dmpReady = true;
 80035ac:	2201      	movs	r2, #1

	// get expected DMP packet size for later comparison
	packetSize = mpu.dmpGetFIFOPacketSize();

	return 0;
 80035ae:	2000      	movs	r0, #0
	dmpReady = true;
 80035b0:	4b13      	ldr	r3, [pc, #76]	; (8003600 <_Z8MPU_Initv+0xe8>)
 80035b2:	701a      	strb	r2, [r3, #0]
	packetSize = mpu.dmpGetFIFOPacketSize();
 80035b4:	8aa2      	ldrh	r2, [r4, #20]
 80035b6:	4b13      	ldr	r3, [pc, #76]	; (8003604 <_Z8MPU_Initv+0xec>)
 80035b8:	801a      	strh	r2, [r3, #0]
}
 80035ba:	bd10      	pop	{r4, pc}
		printf(F("MPU6050 connection failed\n"));
 80035bc:	4812      	ldr	r0, [pc, #72]	; (8003608 <_Z8MPU_Initv+0xf0>)
 80035be:	f004 f947 	bl	8007850 <puts>
		return -1;
 80035c2:	2001      	movs	r0, #1
 80035c4:	4240      	negs	r0, r0
 80035c6:	e7f8      	b.n	80035ba <_Z8MPU_Initv+0xa2>
		printf(F("DMP Initialization failed (code "));
 80035c8:	4810      	ldr	r0, [pc, #64]	; (800360c <_Z8MPU_Initv+0xf4>)
 80035ca:	f004 f8a1 	bl	8007710 <iprintf>
		printf("%d", devStatus);
 80035ce:	4b10      	ldr	r3, [pc, #64]	; (8003610 <_Z8MPU_Initv+0xf8>)
 80035d0:	4810      	ldr	r0, [pc, #64]	; (8003614 <_Z8MPU_Initv+0xfc>)
 80035d2:	7819      	ldrb	r1, [r3, #0]
 80035d4:	f004 f89c 	bl	8007710 <iprintf>
		printf(F(")\n"));
 80035d8:	480f      	ldr	r0, [pc, #60]	; (8003618 <_Z8MPU_Initv+0x100>)
 80035da:	f004 f939 	bl	8007850 <puts>
		return -1;
 80035de:	2001      	movs	r0, #1
 80035e0:	4240      	negs	r0, r0
 80035e2:	e7ea      	b.n	80035ba <_Z8MPU_Initv+0xa2>
 80035e4:	0800b598 	.word	0x0800b598
 80035e8:	20000288 	.word	0x20000288
 80035ec:	0800b5b4 	.word	0x0800b5b4
 80035f0:	0800b5f0 	.word	0x0800b5f0
 80035f4:	0800b630 	.word	0x0800b630
 80035f8:	200002a0 	.word	0x200002a0
 80035fc:	0800b640 	.word	0x0800b640
 8003600:	2000022f 	.word	0x2000022f
 8003604:	200002a2 	.word	0x200002a2
 8003608:	0800b5d4 	.word	0x0800b5d4
 800360c:	0800b604 	.word	0x0800b604
 8003610:	2000022e 	.word	0x2000022e
 8003614:	0800b628 	.word	0x0800b628
 8003618:	0800b62c 	.word	0x0800b62c

0800361c <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800361c:	b510      	push	{r4, lr}
 800361e:	b098      	sub	sp, #96	; 0x60
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8003620:	221c      	movs	r2, #28
 8003622:	2100      	movs	r1, #0
 8003624:	a80d      	add	r0, sp, #52	; 0x34
 8003626:	f003 f940 	bl	80068aa <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800362a:	2210      	movs	r2, #16
 800362c:	2100      	movs	r1, #0
 800362e:	4668      	mov	r0, sp
 8003630:	f003 f93b 	bl	80068aa <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8003634:	221c      	movs	r2, #28
 8003636:	2100      	movs	r1, #0
 8003638:	a804      	add	r0, sp, #16
 800363a:	f003 f936 	bl	80068aa <memset>
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800363e:	2210      	movs	r2, #16
 8003640:	920f      	str	r2, [sp, #60]	; 0x3c
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003642:	2280      	movs	r2, #128	; 0x80
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
 8003644:	230b      	movs	r3, #11
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003646:	0252      	lsls	r2, r2, #9
 8003648:	9215      	str	r2, [sp, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800364a:	22a0      	movs	r2, #160	; 0xa0
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800364c:	2402      	movs	r4, #2
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
 800364e:	930b      	str	r3, [sp, #44]	; 0x2c
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003650:	3b06      	subs	r3, #6
 8003652:	930c      	str	r3, [sp, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8003654:	0392      	lsls	r2, r2, #14
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003656:	3b04      	subs	r3, #4
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003658:	a80b      	add	r0, sp, #44	; 0x2c
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800365a:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800365c:	9312      	str	r3, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800365e:	9414      	str	r4, [sp, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8003660:	9216      	str	r2, [sp, #88]	; 0x58
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 8003662:	9317      	str	r3, [sp, #92]	; 0x5c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003664:	f001 f84c 	bl	8004700 <HAL_RCC_OscConfig>
 8003668:	2800      	cmp	r0, #0
 800366a:	d001      	beq.n	8003670 <_Z18SystemClock_Configv+0x54>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800366c:	b672      	cpsid	i
 */
void Error_Handler(void) {
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800366e:	e7fe      	b.n	800366e <_Z18SystemClock_Configv+0x52>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
 8003670:	2307      	movs	r3, #7
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003672:	9002      	str	r0, [sp, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003674:	9003      	str	r0, [sp, #12]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8003676:	2101      	movs	r1, #1
 8003678:	4668      	mov	r0, sp
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
 800367a:	9300      	str	r3, [sp, #0]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800367c:	9401      	str	r4, [sp, #4]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 800367e:	f001 fb33 	bl	8004ce8 <HAL_RCC_ClockConfig>
 8003682:	2800      	cmp	r0, #0
 8003684:	d001      	beq.n	800368a <_Z18SystemClock_Configv+0x6e>
 8003686:	b672      	cpsid	i
	while (1) {
 8003688:	e7fe      	b.n	8003688 <_Z18SystemClock_Configv+0x6c>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_I2C1;
 800368a:	2322      	movs	r3, #34	; 0x22
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800368c:	9007      	str	r0, [sp, #28]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800368e:	9009      	str	r0, [sp, #36]	; 0x24
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8003690:	a804      	add	r0, sp, #16
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_I2C1;
 8003692:	9304      	str	r3, [sp, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8003694:	f001 fbcc 	bl	8004e30 <HAL_RCCEx_PeriphCLKConfig>
 8003698:	2800      	cmp	r0, #0
 800369a:	d001      	beq.n	80036a0 <_Z18SystemClock_Configv+0x84>
 800369c:	b672      	cpsid	i
	while (1) {
 800369e:	e7fe      	b.n	800369e <_Z18SystemClock_Configv+0x82>
}
 80036a0:	b018      	add	sp, #96	; 0x60
 80036a2:	bd10      	pop	{r4, pc}

080036a4 <main>:
int main(void) {
 80036a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036a6:	46de      	mov	lr, fp
 80036a8:	4657      	mov	r7, sl
 80036aa:	464e      	mov	r6, r9
 80036ac:	4645      	mov	r5, r8
 80036ae:	b5e0      	push	{r5, r6, r7, lr}
	HAL_Init();
 80036b0:	f000 fa94 	bl	8003bdc <HAL_Init>
	SystemClock_Config();
 80036b4:	f7ff ffb2 	bl	800361c <_Z18SystemClock_Configv>
	MX_GPIO_Init();
 80036b8:	f7ff fda6 	bl	8003208 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80036bc:	f000 f9ee 	bl	8003a9c <MX_USART2_UART_Init>
	MX_I2C1_Init();
 80036c0:	f7ff fe08 	bl	80032d4 <MX_I2C1_Init>
	MX_TIM3_Init();
 80036c4:	f000 f98a 	bl	80039dc <MX_TIM3_Init>
	while (MPU_Init()) {
 80036c8:	f7ff ff26 	bl	8003518 <_Z8MPU_Initv>
 80036cc:	2800      	cmp	r0, #0
 80036ce:	d00b      	beq.n	80036e8 <main+0x44>
		printf("failed, restarting the cpu... \n");
 80036d0:	482b      	ldr	r0, [pc, #172]	; (8003780 <main+0xdc>)
 80036d2:	f004 f8bd 	bl	8007850 <puts>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80036d6:	f3bf 8f4f 	dsb	sy
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036da:	4b2a      	ldr	r3, [pc, #168]	; (8003784 <main+0xe0>)
 80036dc:	4a2a      	ldr	r2, [pc, #168]	; (8003788 <main+0xe4>)
 80036de:	60da      	str	r2, [r3, #12]
 80036e0:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80036e4:	46c0      	nop			; (mov r8, r8)
  for(;;)                                                           /* wait until reset */
 80036e6:	e7fd      	b.n	80036e4 <main+0x40>
	MX_IWDG_Init();
 80036e8:	f7ff fe64 	bl	80033b4 <MX_IWDG_Init>
 80036ec:	4b27      	ldr	r3, [pc, #156]	; (800378c <main+0xe8>)
 80036ee:	4c28      	ldr	r4, [pc, #160]	; (8003790 <main+0xec>)
 80036f0:	4699      	mov	r9, r3
 80036f2:	4b28      	ldr	r3, [pc, #160]	; (8003794 <main+0xf0>)
 80036f4:	4f28      	ldr	r7, [pc, #160]	; (8003798 <main+0xf4>)
 80036f6:	469b      	mov	fp, r3
 80036f8:	4b28      	ldr	r3, [pc, #160]	; (800379c <main+0xf8>)
 80036fa:	4d29      	ldr	r5, [pc, #164]	; (80037a0 <main+0xfc>)
 80036fc:	469a      	mov	sl, r3
			dataReady = false;
 80036fe:	2300      	movs	r3, #0
 8003700:	4698      	mov	r8, r3
 8003702:	4e28      	ldr	r6, [pc, #160]	; (80037a4 <main+0x100>)
		if (!dmpReady) {
 8003704:	464b      	mov	r3, r9
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d032      	beq.n	8003772 <main+0xce>
		if (dataReady) {
 800370c:	7822      	ldrb	r2, [r4, #0]
 800370e:	2a00      	cmp	r2, #0
 8003710:	d0fa      	beq.n	8003708 <main+0x64>
			dataReady = false;
 8003712:	4643      	mov	r3, r8
 8003714:	7023      	strb	r3, [r4, #0]



uint8_t MPU6050::dmpGetCurrentFIFOPacket(uint8_t *data) { // overflow proof
    //printf("%d",dmpPacketSize);
    return(GetCurrentFIFOPacket(data, dmpPacketSize));
 8003716:	0029      	movs	r1, r5
 8003718:	0038      	movs	r0, r7
 800371a:	7d3a      	ldrb	r2, [r7, #20]
 800371c:	f002 fbcc 	bl	8005eb8 <_ZN7MPU605020GetCurrentFIFOPacketEPhh>
			if (mpu.dmpGetCurrentFIFOPacket(fifoBuffer)) {
 8003720:	2800      	cmp	r0, #0
 8003722:	d0ef      	beq.n	8003704 <main+0x60>
				if (cnt++ % 10 == 0) {
 8003724:	465b      	mov	r3, fp
 8003726:	465a      	mov	r2, fp
 8003728:	6818      	ldr	r0, [r3, #0]
 800372a:	210a      	movs	r1, #10
 800372c:	1c43      	adds	r3, r0, #1
 800372e:	6013      	str	r3, [r2, #0]
 8003730:	f7fc fe74 	bl	800041c <__aeabi_idivmod>
 8003734:	2900      	cmp	r1, #0
 8003736:	d01d      	beq.n	8003774 <main+0xd0>
				teapotPacket[2] = fifoBuffer[0];
 8003738:	882b      	ldrh	r3, [r5, #0]
				HAL_UART_Transmit(&huart2, teapotPacket, sizeof(teapotPacket), 100);
 800373a:	220e      	movs	r2, #14
				teapotPacket[2] = fifoBuffer[0];
 800373c:	8073      	strh	r3, [r6, #2]
				teapotPacket[4] = fifoBuffer[4];
 800373e:	88ab      	ldrh	r3, [r5, #4]
				HAL_UART_Transmit(&huart2, teapotPacket, sizeof(teapotPacket), 100);
 8003740:	0031      	movs	r1, r6
				teapotPacket[4] = fifoBuffer[4];
 8003742:	80b3      	strh	r3, [r6, #4]
				teapotPacket[6] = fifoBuffer[8];
 8003744:	892b      	ldrh	r3, [r5, #8]
				HAL_UART_Transmit(&huart2, teapotPacket, sizeof(teapotPacket), 100);
 8003746:	4818      	ldr	r0, [pc, #96]	; (80037a8 <main+0x104>)
				teapotPacket[6] = fifoBuffer[8];
 8003748:	80f3      	strh	r3, [r6, #6]
				teapotPacket[8] = fifoBuffer[12];
 800374a:	89ab      	ldrh	r3, [r5, #12]
 800374c:	8133      	strh	r3, [r6, #8]
				HAL_UART_Transmit(&huart2, teapotPacket, sizeof(teapotPacket), 100);
 800374e:	2364      	movs	r3, #100	; 0x64
 8003750:	f002 f8be 	bl	80058d0 <HAL_UART_Transmit>
				HAL_IWDG_Refresh(&hiwdg);
 8003754:	4815      	ldr	r0, [pc, #84]	; (80037ac <main+0x108>)
 8003756:	f000 ffcb 	bl	80046f0 <HAL_IWDG_Refresh>
				dt = HAL_GetTick() - lsti;
 800375a:	f000 fa5b 	bl	8003c14 <HAL_GetTick>
 800375e:	4653      	mov	r3, sl
 8003760:	881b      	ldrh	r3, [r3, #0]
 8003762:	1ac0      	subs	r0, r0, r3
 8003764:	4b12      	ldr	r3, [pc, #72]	; (80037b0 <main+0x10c>)
 8003766:	8018      	strh	r0, [r3, #0]
				lsti = HAL_GetTick();
 8003768:	f000 fa54 	bl	8003c14 <HAL_GetTick>
 800376c:	4653      	mov	r3, sl
 800376e:	8018      	strh	r0, [r3, #0]
 8003770:	e7c8      	b.n	8003704 <main+0x60>
 8003772:	e7fe      	b.n	8003772 <main+0xce>
					HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8003774:	2090      	movs	r0, #144	; 0x90
 8003776:	3120      	adds	r1, #32
 8003778:	05c0      	lsls	r0, r0, #23
 800377a:	f000 fbb7 	bl	8003eec <HAL_GPIO_TogglePin>
 800377e:	e7db      	b.n	8003738 <main+0x94>
 8003780:	0800b66c 	.word	0x0800b66c
 8003784:	e000ed00 	.word	0xe000ed00
 8003788:	05fa0004 	.word	0x05fa0004
 800378c:	2000022f 	.word	0x2000022f
 8003790:	2000022d 	.word	0x2000022d
 8003794:	20000228 	.word	0x20000228
 8003798:	20000288 	.word	0x20000288
 800379c:	20000286 	.word	0x20000286
 80037a0:	20000234 	.word	0x20000234
 80037a4:	20000000 	.word	0x20000000
 80037a8:	20000364 	.word	0x20000364
 80037ac:	2000030c 	.word	0x2000030c
 80037b0:	20000230 	.word	0x20000230

080037b4 <HAL_GPIO_EXTI_Callback>:
	if (GPIO_Pin == GPIO_PIN_9) {
 80037b4:	2380      	movs	r3, #128	; 0x80
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	4298      	cmp	r0, r3
 80037ba:	d000      	beq.n	80037be <HAL_GPIO_EXTI_Callback+0xa>
}
 80037bc:	4770      	bx	lr
		if (++cnti >= 2) {
 80037be:	4a06      	ldr	r2, [pc, #24]	; (80037d8 <HAL_GPIO_EXTI_Callback+0x24>)
 80037c0:	7813      	ldrb	r3, [r2, #0]
 80037c2:	3301      	adds	r3, #1
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	7013      	strb	r3, [r2, #0]
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d9f7      	bls.n	80037bc <HAL_GPIO_EXTI_Callback+0x8>
			dataReady = true;
 80037cc:	2101      	movs	r1, #1
 80037ce:	4b03      	ldr	r3, [pc, #12]	; (80037dc <HAL_GPIO_EXTI_Callback+0x28>)
 80037d0:	7019      	strb	r1, [r3, #0]
			cnti = 0;
 80037d2:	2300      	movs	r3, #0
 80037d4:	7013      	strb	r3, [r2, #0]
}
 80037d6:	e7f1      	b.n	80037bc <HAL_GPIO_EXTI_Callback+0x8>
 80037d8:	2000022c 	.word	0x2000022c
 80037dc:	2000022d 	.word	0x2000022d

080037e0 <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 80037e0:	b672      	cpsid	i
	while (1) {
 80037e2:	e7fe      	b.n	80037e2 <Error_Handler+0x2>

080037e4 <_GLOBAL__sub_I__ZN7MPU605013dmpInitializeEv>:
MPU6050 mpu;
 80037e4:	2168      	movs	r1, #104	; 0x68
	}
	/* USER CODE END Error_Handler_Debug */
}
 80037e6:	b510      	push	{r4, lr}
MPU6050 mpu;
 80037e8:	480e      	ldr	r0, [pc, #56]	; (8003824 <_GLOBAL__sub_I__ZN7MPU605013dmpInitializeEv+0x40>)
 80037ea:	f002 fb07 	bl	8005dfc <_ZN7MPU6050C1Eh>
        float x;
        float y;
        float z;
        
        Quaternion() {
            w = 1.0f;
 80037ee:	22fe      	movs	r2, #254	; 0xfe
 80037f0:	4b0d      	ldr	r3, [pc, #52]	; (8003828 <_GLOBAL__sub_I__ZN7MPU605013dmpInitializeEv+0x44>)
 80037f2:	0592      	lsls	r2, r2, #22
 80037f4:	601a      	str	r2, [r3, #0]
            x = 0.0f;
 80037f6:	2200      	movs	r2, #0
 80037f8:	605a      	str	r2, [r3, #4]
            y = 0.0f;
 80037fa:	609a      	str	r2, [r3, #8]
            z = 0.0f;
 80037fc:	60da      	str	r2, [r3, #12]
        int16_t x;
        int16_t y;
        int16_t z;

        VectorInt16() {
            x = 0;
 80037fe:	2300      	movs	r3, #0
 8003800:	490a      	ldr	r1, [pc, #40]	; (800382c <_GLOBAL__sub_I__ZN7MPU605013dmpInitializeEv+0x48>)
 8003802:	600b      	str	r3, [r1, #0]
            y = 0;
            z = 0;
 8003804:	808b      	strh	r3, [r1, #4]
            x = 0;
 8003806:	490a      	ldr	r1, [pc, #40]	; (8003830 <_GLOBAL__sub_I__ZN7MPU605013dmpInitializeEv+0x4c>)
 8003808:	600b      	str	r3, [r1, #0]
            z = 0;
 800380a:	808b      	strh	r3, [r1, #4]
            x = 0;
 800380c:	4909      	ldr	r1, [pc, #36]	; (8003834 <_GLOBAL__sub_I__ZN7MPU605013dmpInitializeEv+0x50>)
 800380e:	600b      	str	r3, [r1, #0]
            z = 0;
 8003810:	808b      	strh	r3, [r1, #4]
            x = 0;
 8003812:	4909      	ldr	r1, [pc, #36]	; (8003838 <_GLOBAL__sub_I__ZN7MPU605013dmpInitializeEv+0x54>)
 8003814:	600b      	str	r3, [r1, #0]
            z = 0;
 8003816:	808b      	strh	r3, [r1, #4]
        float x;
        float y;
        float z;

        VectorFloat() {
            x = 0;
 8003818:	4b08      	ldr	r3, [pc, #32]	; (800383c <_GLOBAL__sub_I__ZN7MPU605013dmpInitializeEv+0x58>)
 800381a:	601a      	str	r2, [r3, #0]
            y = 0;
 800381c:	605a      	str	r2, [r3, #4]
            z = 0;
 800381e:	609a      	str	r2, [r3, #8]
}
 8003820:	bd10      	pop	{r4, pc}
 8003822:	46c0      	nop			; (mov r8, r8)
 8003824:	20000288 	.word	0x20000288
 8003828:	200002a4 	.word	0x200002a4
 800382c:	20000210 	.word	0x20000210
 8003830:	20000280 	.word	0x20000280
 8003834:	20000218 	.word	0x20000218
 8003838:	20000220 	.word	0x20000220
 800383c:	20000274 	.word	0x20000274

08003840 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003840:	2201      	movs	r2, #1
 8003842:	4b0a      	ldr	r3, [pc, #40]	; (800386c <HAL_MspInit+0x2c>)
{
 8003844:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003846:	6999      	ldr	r1, [r3, #24]
 8003848:	4311      	orrs	r1, r2
 800384a:	6199      	str	r1, [r3, #24]
 800384c:	6999      	ldr	r1, [r3, #24]
 800384e:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 8003850:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003852:	9200      	str	r2, [sp, #0]
 8003854:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003856:	69da      	ldr	r2, [r3, #28]
 8003858:	0549      	lsls	r1, r1, #21
 800385a:	430a      	orrs	r2, r1
 800385c:	61da      	str	r2, [r3, #28]
 800385e:	69db      	ldr	r3, [r3, #28]
 8003860:	400b      	ands	r3, r1
 8003862:	9301      	str	r3, [sp, #4]
 8003864:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003866:	b002      	add	sp, #8
 8003868:	4770      	bx	lr
 800386a:	46c0      	nop			; (mov r8, r8)
 800386c:	40021000 	.word	0x40021000

08003870 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003870:	e7fe      	b.n	8003870 <NMI_Handler>
 8003872:	46c0      	nop			; (mov r8, r8)

08003874 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003874:	e7fe      	b.n	8003874 <HardFault_Handler>
 8003876:	46c0      	nop			; (mov r8, r8)

08003878 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003878:	4770      	bx	lr
 800387a:	46c0      	nop			; (mov r8, r8)

0800387c <PendSV_Handler>:
 800387c:	4770      	bx	lr
 800387e:	46c0      	nop			; (mov r8, r8)

08003880 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003880:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003882:	f000 f9bb 	bl	8003bfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003886:	bd10      	pop	{r4, pc}

08003888 <EXTI4_15_IRQHandler>:
void EXTI4_15_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8003888:	2080      	movs	r0, #128	; 0x80
{
 800388a:	b510      	push	{r4, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 800388c:	0080      	lsls	r0, r0, #2
 800388e:	f000 fb35 	bl	8003efc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003892:	2080      	movs	r0, #128	; 0x80
 8003894:	0180      	lsls	r0, r0, #6
 8003896:	f000 fb31 	bl	8003efc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800389a:	bd10      	pop	{r4, pc}

0800389c <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 800389c:	2001      	movs	r0, #1
 800389e:	4770      	bx	lr

080038a0 <_kill>:

int _kill(int pid, int sig)
{
 80038a0:	b510      	push	{r4, lr}
	errno = EINVAL;
 80038a2:	f002 ffad 	bl	8006800 <__errno>
 80038a6:	2316      	movs	r3, #22
 80038a8:	6003      	str	r3, [r0, #0]
	return -1;
 80038aa:	2001      	movs	r0, #1
}
 80038ac:	4240      	negs	r0, r0
 80038ae:	bd10      	pop	{r4, pc}

080038b0 <_exit>:

void _exit (int status)
{
 80038b0:	b510      	push	{r4, lr}
	errno = EINVAL;
 80038b2:	f002 ffa5 	bl	8006800 <__errno>
 80038b6:	2316      	movs	r3, #22
 80038b8:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 80038ba:	e7fe      	b.n	80038ba <_exit+0xa>

080038bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80038bc:	b570      	push	{r4, r5, r6, lr}
 80038be:	1e16      	subs	r6, r2, #0
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038c0:	dd07      	ble.n	80038d2 <_read+0x16>
 80038c2:	000c      	movs	r4, r1
 80038c4:	188d      	adds	r5, r1, r2
	{
		*ptr++ = __io_getchar();
 80038c6:	e000      	b.n	80038ca <_read+0xe>
 80038c8:	bf00      	nop
 80038ca:	7020      	strb	r0, [r4, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038cc:	3401      	adds	r4, #1
 80038ce:	42ac      	cmp	r4, r5
 80038d0:	d1f9      	bne.n	80038c6 <_read+0xa>
	}

return len;
}
 80038d2:	0030      	movs	r0, r6
 80038d4:	bd70      	pop	{r4, r5, r6, pc}
 80038d6:	46c0      	nop			; (mov r8, r8)

080038d8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80038d8:	b570      	push	{r4, r5, r6, lr}
 80038da:	1e16      	subs	r6, r2, #0
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038dc:	dd07      	ble.n	80038ee <_write+0x16>
 80038de:	000c      	movs	r4, r1
 80038e0:	188d      	adds	r5, r1, r2
	{
		__io_putchar(*ptr++);
 80038e2:	7820      	ldrb	r0, [r4, #0]
 80038e4:	3401      	adds	r4, #1
 80038e6:	f002 f8fb 	bl	8005ae0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038ea:	42ac      	cmp	r4, r5
 80038ec:	d1f9      	bne.n	80038e2 <_write+0xa>
	}
	return len;
}
 80038ee:	0030      	movs	r0, r6
 80038f0:	bd70      	pop	{r4, r5, r6, pc}
 80038f2:	46c0      	nop			; (mov r8, r8)

080038f4 <_close>:

int _close(int file)
{
	return -1;
 80038f4:	2001      	movs	r0, #1
}
 80038f6:	4240      	negs	r0, r0
 80038f8:	4770      	bx	lr
 80038fa:	46c0      	nop			; (mov r8, r8)

080038fc <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80038fc:	2380      	movs	r3, #128	; 0x80
 80038fe:	019b      	lsls	r3, r3, #6
	return 0;
}
 8003900:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8003902:	604b      	str	r3, [r1, #4]
}
 8003904:	4770      	bx	lr
 8003906:	46c0      	nop			; (mov r8, r8)

08003908 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8003908:	2001      	movs	r0, #1
 800390a:	4770      	bx	lr

0800390c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800390c:	2000      	movs	r0, #0
 800390e:	4770      	bx	lr

08003910 <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003910:	490c      	ldr	r1, [pc, #48]	; (8003944 <_sbrk+0x34>)
 8003912:	4a0d      	ldr	r2, [pc, #52]	; (8003948 <_sbrk+0x38>)
{
 8003914:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003916:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003918:	490c      	ldr	r1, [pc, #48]	; (800394c <_sbrk+0x3c>)
{
 800391a:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 800391c:	6808      	ldr	r0, [r1, #0]
 800391e:	2800      	cmp	r0, #0
 8003920:	d004      	beq.n	800392c <_sbrk+0x1c>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003922:	18c3      	adds	r3, r0, r3
 8003924:	4293      	cmp	r3, r2
 8003926:	d806      	bhi.n	8003936 <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8003928:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 800392a:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800392c:	4808      	ldr	r0, [pc, #32]	; (8003950 <_sbrk+0x40>)
  if (__sbrk_heap_end + incr > max_heap)
 800392e:	18c3      	adds	r3, r0, r3
    __sbrk_heap_end = &_end;
 8003930:	6008      	str	r0, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8003932:	4293      	cmp	r3, r2
 8003934:	d9f8      	bls.n	8003928 <_sbrk+0x18>
    errno = ENOMEM;
 8003936:	f002 ff63 	bl	8006800 <__errno>
 800393a:	230c      	movs	r3, #12
 800393c:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800393e:	2001      	movs	r0, #1
 8003940:	4240      	negs	r0, r0
 8003942:	e7f2      	b.n	800392a <_sbrk+0x1a>
 8003944:	00000400 	.word	0x00000400
 8003948:	20008000 	.word	0x20008000
 800394c:	200002b4 	.word	0x200002b4
 8003950:	20000400 	.word	0x20000400

08003954 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8003954:	4770      	bx	lr
 8003956:	46c0      	nop			; (mov r8, r8)

08003958 <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM3)
 8003958:	4b08      	ldr	r3, [pc, #32]	; (800397c <HAL_TIM_Base_MspInit+0x24>)
 800395a:	6802      	ldr	r2, [r0, #0]
{
 800395c:	b082      	sub	sp, #8
  if(tim_baseHandle->Instance==TIM3)
 800395e:	429a      	cmp	r2, r3
 8003960:	d001      	beq.n	8003966 <HAL_TIM_Base_MspInit+0xe>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8003962:	b002      	add	sp, #8
 8003964:	4770      	bx	lr
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003966:	2302      	movs	r3, #2
 8003968:	4a05      	ldr	r2, [pc, #20]	; (8003980 <HAL_TIM_Base_MspInit+0x28>)
 800396a:	69d1      	ldr	r1, [r2, #28]
 800396c:	4319      	orrs	r1, r3
 800396e:	61d1      	str	r1, [r2, #28]
 8003970:	69d2      	ldr	r2, [r2, #28]
 8003972:	4013      	ands	r3, r2
 8003974:	9301      	str	r3, [sp, #4]
 8003976:	9b01      	ldr	r3, [sp, #4]
}
 8003978:	e7f3      	b.n	8003962 <HAL_TIM_Base_MspInit+0xa>
 800397a:	46c0      	nop			; (mov r8, r8)
 800397c:	40000400 	.word	0x40000400
 8003980:	40021000 	.word	0x40021000

08003984 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003984:	b510      	push	{r4, lr}
 8003986:	0004      	movs	r4, r0
 8003988:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800398a:	2214      	movs	r2, #20
 800398c:	2100      	movs	r1, #0
 800398e:	a801      	add	r0, sp, #4
 8003990:	f002 ff8b 	bl	80068aa <memset>
  if(timHandle->Instance==TIM3)
 8003994:	4b0e      	ldr	r3, [pc, #56]	; (80039d0 <HAL_TIM_MspPostInit+0x4c>)
 8003996:	6822      	ldr	r2, [r4, #0]
 8003998:	429a      	cmp	r2, r3
 800399a:	d001      	beq.n	80039a0 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800399c:	b006      	add	sp, #24
 800399e:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039a0:	2080      	movs	r0, #128	; 0x80
 80039a2:	4a0c      	ldr	r2, [pc, #48]	; (80039d4 <HAL_TIM_MspPostInit+0x50>)
 80039a4:	02c0      	lsls	r0, r0, #11
 80039a6:	6951      	ldr	r1, [r2, #20]
 80039a8:	4301      	orrs	r1, r0
 80039aa:	6151      	str	r1, [r2, #20]
 80039ac:	6953      	ldr	r3, [r2, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039ae:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039b0:	4003      	ands	r3, r0
 80039b2:	9300      	str	r3, [sp, #0]
 80039b4:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80039b6:	2310      	movs	r3, #16
 80039b8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039ba:	3b0e      	subs	r3, #14
 80039bc:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80039be:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80039c0:	3301      	adds	r3, #1
 80039c2:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039c4:	4804      	ldr	r0, [pc, #16]	; (80039d8 <HAL_TIM_MspPostInit+0x54>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80039c6:	3b02      	subs	r3, #2
 80039c8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039ca:	f000 f993 	bl	8003cf4 <HAL_GPIO_Init>
}
 80039ce:	e7e5      	b.n	800399c <HAL_TIM_MspPostInit+0x18>
 80039d0:	40000400 	.word	0x40000400
 80039d4:	40021000 	.word	0x40021000
 80039d8:	48000400 	.word	0x48000400

080039dc <MX_TIM3_Init>:
{
 80039dc:	b510      	push	{r4, lr}
 80039de:	b08e      	sub	sp, #56	; 0x38
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80039e0:	2210      	movs	r2, #16
 80039e2:	2100      	movs	r1, #0
 80039e4:	a803      	add	r0, sp, #12
 80039e6:	f002 ff60 	bl	80068aa <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039ea:	2208      	movs	r2, #8
 80039ec:	2100      	movs	r1, #0
 80039ee:	a801      	add	r0, sp, #4
 80039f0:	f002 ff5b 	bl	80068aa <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80039f4:	221c      	movs	r2, #28
 80039f6:	2100      	movs	r1, #0
 80039f8:	a807      	add	r0, sp, #28
 80039fa:	f002 ff56 	bl	80068aa <memset>
  htim3.Instance = TIM3;
 80039fe:	4c24      	ldr	r4, [pc, #144]	; (8003a90 <MX_TIM3_Init+0xb4>)
 8003a00:	4b24      	ldr	r3, [pc, #144]	; (8003a94 <MX_TIM3_Init+0xb8>)
  htim3.Init.Period = 20000;
 8003a02:	4a25      	ldr	r2, [pc, #148]	; (8003a98 <MX_TIM3_Init+0xbc>)
  htim3.Instance = TIM3;
 8003a04:	6023      	str	r3, [r4, #0]
  htim3.Init.Prescaler = 48-1;
 8003a06:	232f      	movs	r3, #47	; 0x2f
 8003a08:	6063      	str	r3, [r4, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a0a:	2300      	movs	r3, #0
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003a0c:	0020      	movs	r0, r4
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a0e:	60a3      	str	r3, [r4, #8]
  htim3.Init.Period = 20000;
 8003a10:	60e2      	str	r2, [r4, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a12:	6123      	str	r3, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a14:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003a16:	f001 fc71 	bl	80052fc <HAL_TIM_Base_Init>
 8003a1a:	2800      	cmp	r0, #0
 8003a1c:	d128      	bne.n	8003a70 <MX_TIM3_Init+0x94>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a1e:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003a20:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a22:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003a24:	a903      	add	r1, sp, #12
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a26:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003a28:	f001 fb72 	bl	8005110 <HAL_TIM_ConfigClockSource>
 8003a2c:	2800      	cmp	r0, #0
 8003a2e:	d12b      	bne.n	8003a88 <MX_TIM3_Init+0xac>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003a30:	0020      	movs	r0, r4
 8003a32:	f001 fc8f 	bl	8005354 <HAL_TIM_PWM_Init>
 8003a36:	2800      	cmp	r0, #0
 8003a38:	d123      	bne.n	8003a82 <MX_TIM3_Init+0xa6>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a3a:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003a3c:	0020      	movs	r0, r4
 8003a3e:	a901      	add	r1, sp, #4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a40:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a42:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003a44:	f001 fd54 	bl	80054f0 <HAL_TIMEx_MasterConfigSynchronization>
 8003a48:	2800      	cmp	r0, #0
 8003a4a:	d117      	bne.n	8003a7c <MX_TIM3_Init+0xa0>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a4c:	2360      	movs	r3, #96	; 0x60
 8003a4e:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = 0;
 8003a50:	2300      	movs	r3, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003a52:	2200      	movs	r2, #0
 8003a54:	0020      	movs	r0, r4
 8003a56:	a907      	add	r1, sp, #28
  sConfigOC.Pulse = 0;
 8003a58:	9308      	str	r3, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a5a:	9309      	str	r3, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a5c:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003a5e:	f001 fce5 	bl	800542c <HAL_TIM_PWM_ConfigChannel>
 8003a62:	2800      	cmp	r0, #0
 8003a64:	d107      	bne.n	8003a76 <MX_TIM3_Init+0x9a>
  HAL_TIM_MspPostInit(&htim3);
 8003a66:	0020      	movs	r0, r4
 8003a68:	f7ff ff8c 	bl	8003984 <HAL_TIM_MspPostInit>
}
 8003a6c:	b00e      	add	sp, #56	; 0x38
 8003a6e:	bd10      	pop	{r4, pc}
    Error_Handler();
 8003a70:	f7ff feb6 	bl	80037e0 <Error_Handler>
 8003a74:	e7d3      	b.n	8003a1e <MX_TIM3_Init+0x42>
    Error_Handler();
 8003a76:	f7ff feb3 	bl	80037e0 <Error_Handler>
 8003a7a:	e7f4      	b.n	8003a66 <MX_TIM3_Init+0x8a>
    Error_Handler();
 8003a7c:	f7ff feb0 	bl	80037e0 <Error_Handler>
 8003a80:	e7e4      	b.n	8003a4c <MX_TIM3_Init+0x70>
    Error_Handler();
 8003a82:	f7ff fead 	bl	80037e0 <Error_Handler>
 8003a86:	e7d8      	b.n	8003a3a <MX_TIM3_Init+0x5e>
    Error_Handler();
 8003a88:	f7ff feaa 	bl	80037e0 <Error_Handler>
 8003a8c:	e7d0      	b.n	8003a30 <MX_TIM3_Init+0x54>
 8003a8e:	46c0      	nop			; (mov r8, r8)
 8003a90:	2000031c 	.word	0x2000031c
 8003a94:	40000400 	.word	0x40000400
 8003a98:	00004e20 	.word	0x00004e20

08003a9c <MX_USART2_UART_Init>:
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003a9c:	480c      	ldr	r0, [pc, #48]	; (8003ad0 <MX_USART2_UART_Init+0x34>)
 8003a9e:	4b0d      	ldr	r3, [pc, #52]	; (8003ad4 <MX_USART2_UART_Init+0x38>)
{
 8003aa0:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 8003aa2:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8003aa4:	23e1      	movs	r3, #225	; 0xe1
 8003aa6:	025b      	lsls	r3, r3, #9
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003aa8:	220c      	movs	r2, #12
  huart2.Init.BaudRate = 115200;
 8003aaa:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003aac:	2300      	movs	r3, #0
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003aae:	6142      	str	r2, [r0, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003ab0:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003ab2:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003ab4:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003ab6:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ab8:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003aba:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003abc:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003abe:	f001 ffb7 	bl	8005a30 <HAL_UART_Init>
 8003ac2:	2800      	cmp	r0, #0
 8003ac4:	d100      	bne.n	8003ac8 <MX_USART2_UART_Init+0x2c>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003ac6:	bd10      	pop	{r4, pc}
    Error_Handler();
 8003ac8:	f7ff fe8a 	bl	80037e0 <Error_Handler>
}
 8003acc:	e7fb      	b.n	8003ac6 <MX_USART2_UART_Init+0x2a>
 8003ace:	46c0      	nop			; (mov r8, r8)
 8003ad0:	20000364 	.word	0x20000364
 8003ad4:	40004400 	.word	0x40004400

08003ad8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003ad8:	b510      	push	{r4, lr}
 8003ada:	0004      	movs	r4, r0
 8003adc:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ade:	2214      	movs	r2, #20
 8003ae0:	2100      	movs	r1, #0
 8003ae2:	a803      	add	r0, sp, #12
 8003ae4:	f002 fee1 	bl	80068aa <memset>
  if(uartHandle->Instance==USART2)
 8003ae8:	4b12      	ldr	r3, [pc, #72]	; (8003b34 <HAL_UART_MspInit+0x5c>)
 8003aea:	6822      	ldr	r2, [r4, #0]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d001      	beq.n	8003af4 <HAL_UART_MspInit+0x1c>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003af0:	b008      	add	sp, #32
 8003af2:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8003af4:	2280      	movs	r2, #128	; 0x80
 8003af6:	4b10      	ldr	r3, [pc, #64]	; (8003b38 <HAL_UART_MspInit+0x60>)
 8003af8:	0292      	lsls	r2, r2, #10
 8003afa:	69d9      	ldr	r1, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003afc:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_USART2_CLK_ENABLE();
 8003afe:	4311      	orrs	r1, r2
 8003b00:	61d9      	str	r1, [r3, #28]
 8003b02:	69d9      	ldr	r1, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b04:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_USART2_CLK_ENABLE();
 8003b06:	4011      	ands	r1, r2
 8003b08:	9101      	str	r1, [sp, #4]
 8003b0a:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b0c:	6959      	ldr	r1, [r3, #20]
 8003b0e:	4311      	orrs	r1, r2
 8003b10:	6159      	str	r1, [r3, #20]
 8003b12:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b14:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b16:	401a      	ands	r2, r3
 8003b18:	9202      	str	r2, [sp, #8]
 8003b1a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003b1c:	230c      	movs	r3, #12
 8003b1e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b20:	3b0a      	subs	r3, #10
 8003b22:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b24:	2300      	movs	r3, #0
 8003b26:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b28:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b2e:	f000 f8e1 	bl	8003cf4 <HAL_GPIO_Init>
}
 8003b32:	e7dd      	b.n	8003af0 <HAL_UART_MspInit+0x18>
 8003b34:	40004400 	.word	0x40004400
 8003b38:	40021000 	.word	0x40021000

08003b3c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003b3c:	480d      	ldr	r0, [pc, #52]	; (8003b74 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003b3e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003b40:	f7ff ff08 	bl	8003954 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003b44:	480c      	ldr	r0, [pc, #48]	; (8003b78 <LoopForever+0x6>)
  ldr r1, =_edata
 8003b46:	490d      	ldr	r1, [pc, #52]	; (8003b7c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003b48:	4a0d      	ldr	r2, [pc, #52]	; (8003b80 <LoopForever+0xe>)
  movs r3, #0
 8003b4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b4c:	e002      	b.n	8003b54 <LoopCopyDataInit>

08003b4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b52:	3304      	adds	r3, #4

08003b54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b58:	d3f9      	bcc.n	8003b4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b5a:	4a0a      	ldr	r2, [pc, #40]	; (8003b84 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003b5c:	4c0a      	ldr	r4, [pc, #40]	; (8003b88 <LoopForever+0x16>)
  movs r3, #0
 8003b5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b60:	e001      	b.n	8003b66 <LoopFillZerobss>

08003b62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b64:	3204      	adds	r2, #4

08003b66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b68:	d3fb      	bcc.n	8003b62 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003b6a:	f002 fe4f 	bl	800680c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003b6e:	f7ff fd99 	bl	80036a4 <main>

08003b72 <LoopForever>:

LoopForever:
    b LoopForever
 8003b72:	e7fe      	b.n	8003b72 <LoopForever>
  ldr   r0, =_estack
 8003b74:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003b78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b7c:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8003b80:	0800c828 	.word	0x0800c828
  ldr r2, =_sbss
 8003b84:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8003b88:	200003fc 	.word	0x200003fc

08003b8c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003b8c:	e7fe      	b.n	8003b8c <ADC1_COMP_IRQHandler>
	...

08003b90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b90:	b510      	push	{r4, lr}
 8003b92:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b94:	20fa      	movs	r0, #250	; 0xfa
 8003b96:	4b0e      	ldr	r3, [pc, #56]	; (8003bd0 <HAL_InitTick+0x40>)
 8003b98:	0080      	lsls	r0, r0, #2
 8003b9a:	7819      	ldrb	r1, [r3, #0]
 8003b9c:	f7fc face 	bl	800013c <__udivsi3>
 8003ba0:	4b0c      	ldr	r3, [pc, #48]	; (8003bd4 <HAL_InitTick+0x44>)
 8003ba2:	0001      	movs	r1, r0
 8003ba4:	6818      	ldr	r0, [r3, #0]
 8003ba6:	f7fc fac9 	bl	800013c <__udivsi3>
 8003baa:	f000 f889 	bl	8003cc0 <HAL_SYSTICK_Config>
 8003bae:	2800      	cmp	r0, #0
 8003bb0:	d10c      	bne.n	8003bcc <HAL_InitTick+0x3c>
  {
    return HAL_ERROR;
 8003bb2:	3001      	adds	r0, #1
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003bb4:	2c03      	cmp	r4, #3
 8003bb6:	d900      	bls.n	8003bba <HAL_InitTick+0x2a>
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 8003bb8:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003bba:	3802      	subs	r0, #2
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	0021      	movs	r1, r4
 8003bc0:	f000 f840 	bl	8003c44 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003bc4:	4b04      	ldr	r3, [pc, #16]	; (8003bd8 <HAL_InitTick+0x48>)
 8003bc6:	2000      	movs	r0, #0
 8003bc8:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 8003bca:	e7f5      	b.n	8003bb8 <HAL_InitTick+0x28>
    return HAL_ERROR;
 8003bcc:	2001      	movs	r0, #1
 8003bce:	e7f3      	b.n	8003bb8 <HAL_InitTick+0x28>
 8003bd0:	20000014 	.word	0x20000014
 8003bd4:	20000010 	.word	0x20000010
 8003bd8:	20000018 	.word	0x20000018

08003bdc <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003bdc:	2110      	movs	r1, #16
 8003bde:	4a06      	ldr	r2, [pc, #24]	; (8003bf8 <HAL_Init+0x1c>)
{
 8003be0:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003be2:	6813      	ldr	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8003be4:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003be6:	430b      	orrs	r3, r1
 8003be8:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8003bea:	f7ff ffd1 	bl	8003b90 <HAL_InitTick>
  HAL_MspInit();
 8003bee:	f7ff fe27 	bl	8003840 <HAL_MspInit>
}
 8003bf2:	2000      	movs	r0, #0
 8003bf4:	bd10      	pop	{r4, pc}
 8003bf6:	46c0      	nop			; (mov r8, r8)
 8003bf8:	40022000 	.word	0x40022000

08003bfc <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003bfc:	4a03      	ldr	r2, [pc, #12]	; (8003c0c <HAL_IncTick+0x10>)
 8003bfe:	4b04      	ldr	r3, [pc, #16]	; (8003c10 <HAL_IncTick+0x14>)
 8003c00:	6811      	ldr	r1, [r2, #0]
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	185b      	adds	r3, r3, r1
 8003c06:	6013      	str	r3, [r2, #0]
}
 8003c08:	4770      	bx	lr
 8003c0a:	46c0      	nop			; (mov r8, r8)
 8003c0c:	200003e8 	.word	0x200003e8
 8003c10:	20000014 	.word	0x20000014

08003c14 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003c14:	4b01      	ldr	r3, [pc, #4]	; (8003c1c <HAL_GetTick+0x8>)
 8003c16:	6818      	ldr	r0, [r3, #0]
}
 8003c18:	4770      	bx	lr
 8003c1a:	46c0      	nop			; (mov r8, r8)
 8003c1c:	200003e8 	.word	0x200003e8

08003c20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c20:	b570      	push	{r4, r5, r6, lr}
 8003c22:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003c24:	f7ff fff6 	bl	8003c14 <HAL_GetTick>
 8003c28:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c2a:	1c63      	adds	r3, r4, #1
 8003c2c:	d002      	beq.n	8003c34 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c2e:	4b04      	ldr	r3, [pc, #16]	; (8003c40 <HAL_Delay+0x20>)
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003c34:	f7ff ffee 	bl	8003c14 <HAL_GetTick>
 8003c38:	1b40      	subs	r0, r0, r5
 8003c3a:	42a0      	cmp	r0, r4
 8003c3c:	d3fa      	bcc.n	8003c34 <HAL_Delay+0x14>
  {
  }
}
 8003c3e:	bd70      	pop	{r4, r5, r6, pc}
 8003c40:	20000014 	.word	0x20000014

08003c44 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c44:	b570      	push	{r4, r5, r6, lr}
  if ((int32_t)(IRQn) >= 0)
 8003c46:	2800      	cmp	r0, #0
 8003c48:	db14      	blt.n	8003c74 <HAL_NVIC_SetPriority+0x30>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003c4a:	4b15      	ldr	r3, [pc, #84]	; (8003ca0 <HAL_NVIC_SetPriority+0x5c>)
 8003c4c:	2203      	movs	r2, #3
 8003c4e:	469c      	mov	ip, r3
 8003c50:	23ff      	movs	r3, #255	; 0xff
 8003c52:	0884      	lsrs	r4, r0, #2
 8003c54:	4010      	ands	r0, r2
 8003c56:	001a      	movs	r2, r3
 8003c58:	26c0      	movs	r6, #192	; 0xc0
 8003c5a:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003c5c:	0189      	lsls	r1, r1, #6
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003c5e:	4082      	lsls	r2, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003c60:	400b      	ands	r3, r1
 8003c62:	4083      	lsls	r3, r0
 8003c64:	00a4      	lsls	r4, r4, #2
 8003c66:	4464      	add	r4, ip
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003c68:	00b6      	lsls	r6, r6, #2
 8003c6a:	59a5      	ldr	r5, [r4, r6]
 8003c6c:	4395      	bics	r5, r2
 8003c6e:	432b      	orrs	r3, r5
 8003c70:	51a3      	str	r3, [r4, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8003c72:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003c74:	4a0b      	ldr	r2, [pc, #44]	; (8003ca4 <HAL_NVIC_SetPriority+0x60>)
 8003c76:	230f      	movs	r3, #15
 8003c78:	4694      	mov	ip, r2
 8003c7a:	2203      	movs	r2, #3
 8003c7c:	4003      	ands	r3, r0
 8003c7e:	4010      	ands	r0, r2
 8003c80:	32fc      	adds	r2, #252	; 0xfc
 8003c82:	0015      	movs	r5, r2
 8003c84:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003c86:	0189      	lsls	r1, r1, #6
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003c88:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003c8a:	400a      	ands	r2, r1
 8003c8c:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003c8e:	3b08      	subs	r3, #8
 8003c90:	089b      	lsrs	r3, r3, #2
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	4463      	add	r3, ip
 8003c96:	69dc      	ldr	r4, [r3, #28]
 8003c98:	43ac      	bics	r4, r5
 8003c9a:	4322      	orrs	r2, r4
 8003c9c:	61da      	str	r2, [r3, #28]
 8003c9e:	e7e8      	b.n	8003c72 <HAL_NVIC_SetPriority+0x2e>
 8003ca0:	e000e100 	.word	0xe000e100
 8003ca4:	e000ed00 	.word	0xe000ed00

08003ca8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003ca8:	2800      	cmp	r0, #0
 8003caa:	db05      	blt.n	8003cb8 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cac:	231f      	movs	r3, #31
 8003cae:	4018      	ands	r0, r3
 8003cb0:	3b1e      	subs	r3, #30
 8003cb2:	4083      	lsls	r3, r0
 8003cb4:	4a01      	ldr	r2, [pc, #4]	; (8003cbc <HAL_NVIC_EnableIRQ+0x14>)
 8003cb6:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003cb8:	4770      	bx	lr
 8003cba:	46c0      	nop			; (mov r8, r8)
 8003cbc:	e000e100 	.word	0xe000e100

08003cc0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003cc0:	2280      	movs	r2, #128	; 0x80
 8003cc2:	1e43      	subs	r3, r0, #1
 8003cc4:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8003cc6:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d20e      	bcs.n	8003cea <HAL_SYSTICK_Config+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003ccc:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003cce:	4a07      	ldr	r2, [pc, #28]	; (8003cec <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003cd0:	4807      	ldr	r0, [pc, #28]	; (8003cf0 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003cd2:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003cd4:	6a03      	ldr	r3, [r0, #32]
 8003cd6:	0609      	lsls	r1, r1, #24
 8003cd8:	021b      	lsls	r3, r3, #8
 8003cda:	0a1b      	lsrs	r3, r3, #8
 8003cdc:	430b      	orrs	r3, r1
 8003cde:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ce0:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ce2:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ce4:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ce6:	3307      	adds	r3, #7
 8003ce8:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003cea:	4770      	bx	lr
 8003cec:	e000e010 	.word	0xe000e010
 8003cf0:	e000ed00 	.word	0xe000ed00

08003cf4 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cf4:	680b      	ldr	r3, [r1, #0]
{ 
 8003cf6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cf8:	464e      	mov	r6, r9
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cfa:	4699      	mov	r9, r3
{ 
 8003cfc:	46de      	mov	lr, fp
 8003cfe:	4657      	mov	r7, sl
 8003d00:	4645      	mov	r5, r8
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d02:	464a      	mov	r2, r9
{ 
 8003d04:	b5e0      	push	{r5, r6, r7, lr}
  uint32_t position = 0x00u;
 8003d06:	2300      	movs	r3, #0
{ 
 8003d08:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d0a:	2a00      	cmp	r2, #0
 8003d0c:	d100      	bne.n	8003d10 <HAL_GPIO_Init+0x1c>
 8003d0e:	e07f      	b.n	8003e10 <HAL_GPIO_Init+0x11c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003d10:	2201      	movs	r2, #1
 8003d12:	4692      	mov	sl, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d14:	4a6b      	ldr	r2, [pc, #428]	; (8003ec4 <HAL_GPIO_Init+0x1d0>)
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d16:	46c8      	mov	r8, r9
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d18:	4693      	mov	fp, r2
        temp = EXTI->IMR;
 8003d1a:	4f6b      	ldr	r7, [pc, #428]	; (8003ec8 <HAL_GPIO_Init+0x1d4>)
 8003d1c:	9101      	str	r1, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003d1e:	4652      	mov	r2, sl
 8003d20:	4644      	mov	r4, r8
 8003d22:	409a      	lsls	r2, r3
 8003d24:	4014      	ands	r4, r2
 8003d26:	9402      	str	r4, [sp, #8]
    if (iocurrent != 0x00u)
 8003d28:	4644      	mov	r4, r8
 8003d2a:	4214      	tst	r4, r2
 8003d2c:	d06c      	beq.n	8003e08 <HAL_GPIO_Init+0x114>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d2e:	9901      	ldr	r1, [sp, #4]
 8003d30:	6849      	ldr	r1, [r1, #4]
 8003d32:	000e      	movs	r6, r1
 8003d34:	4689      	mov	r9, r1
 8003d36:	2110      	movs	r1, #16
 8003d38:	438e      	bics	r6, r1
 8003d3a:	1e74      	subs	r4, r6, #1
 8003d3c:	2c01      	cmp	r4, #1
 8003d3e:	d96e      	bls.n	8003e1e <HAL_GPIO_Init+0x12a>
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003d40:	2503      	movs	r5, #3
 8003d42:	005c      	lsls	r4, r3, #1
 8003d44:	40a5      	lsls	r5, r4
      temp = GPIOx->PUPDR;
 8003d46:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003d48:	43e9      	mvns	r1, r5
 8003d4a:	43aa      	bics	r2, r5
 8003d4c:	0015      	movs	r5, r2
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003d4e:	9a01      	ldr	r2, [sp, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003d50:	9103      	str	r1, [sp, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003d52:	6892      	ldr	r2, [r2, #8]
 8003d54:	40a2      	lsls	r2, r4
 8003d56:	432a      	orrs	r2, r5
      GPIOx->PUPDR = temp;
 8003d58:	60c2      	str	r2, [r0, #12]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003d5a:	4649      	mov	r1, r9
 8003d5c:	2603      	movs	r6, #3
      temp = GPIOx->MODER;
 8003d5e:	6802      	ldr	r2, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003d60:	400e      	ands	r6, r1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003d62:	9d03      	ldr	r5, [sp, #12]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003d64:	40a6      	lsls	r6, r4
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003d66:	2180      	movs	r1, #128	; 0x80
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003d68:	4015      	ands	r5, r2
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003d6a:	464a      	mov	r2, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003d6c:	432e      	orrs	r6, r5
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003d6e:	0549      	lsls	r1, r1, #21
      GPIOx->MODER = temp;
 8003d70:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003d72:	420a      	tst	r2, r1
 8003d74:	d048      	beq.n	8003e08 <HAL_GPIO_Init+0x114>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d76:	465a      	mov	r2, fp
 8003d78:	4651      	mov	r1, sl
 8003d7a:	6992      	ldr	r2, [r2, #24]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003d7c:	2503      	movs	r5, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d7e:	430a      	orrs	r2, r1
 8003d80:	4659      	mov	r1, fp
 8003d82:	618a      	str	r2, [r1, #24]
 8003d84:	698a      	ldr	r2, [r1, #24]
 8003d86:	4651      	mov	r1, sl
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003d88:	260f      	movs	r6, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d8a:	400a      	ands	r2, r1
 8003d8c:	494f      	ldr	r1, [pc, #316]	; (8003ecc <HAL_GPIO_Init+0x1d8>)
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003d8e:	401d      	ands	r5, r3
 8003d90:	468c      	mov	ip, r1
 8003d92:	00ad      	lsls	r5, r5, #2
 8003d94:	40ae      	lsls	r6, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003d96:	2190      	movs	r1, #144	; 0x90
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d98:	9205      	str	r2, [sp, #20]
 8003d9a:	9a05      	ldr	r2, [sp, #20]
        temp = SYSCFG->EXTICR[position >> 2u];
 8003d9c:	089a      	lsrs	r2, r3, #2
 8003d9e:	0092      	lsls	r2, r2, #2
 8003da0:	4462      	add	r2, ip
 8003da2:	6894      	ldr	r4, [r2, #8]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003da4:	05c9      	lsls	r1, r1, #23
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003da6:	43b4      	bics	r4, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003da8:	4288      	cmp	r0, r1
 8003daa:	d012      	beq.n	8003dd2 <HAL_GPIO_Init+0xde>
 8003dac:	4e48      	ldr	r6, [pc, #288]	; (8003ed0 <HAL_GPIO_Init+0x1dc>)
 8003dae:	42b0      	cmp	r0, r6
 8003db0:	d100      	bne.n	8003db4 <HAL_GPIO_Init+0xc0>
 8003db2:	e07b      	b.n	8003eac <HAL_GPIO_Init+0x1b8>
 8003db4:	4e47      	ldr	r6, [pc, #284]	; (8003ed4 <HAL_GPIO_Init+0x1e0>)
 8003db6:	42b0      	cmp	r0, r6
 8003db8:	d100      	bne.n	8003dbc <HAL_GPIO_Init+0xc8>
 8003dba:	e07b      	b.n	8003eb4 <HAL_GPIO_Init+0x1c0>
 8003dbc:	4e46      	ldr	r6, [pc, #280]	; (8003ed8 <HAL_GPIO_Init+0x1e4>)
 8003dbe:	42b0      	cmp	r0, r6
 8003dc0:	d100      	bne.n	8003dc4 <HAL_GPIO_Init+0xd0>
 8003dc2:	e06f      	b.n	8003ea4 <HAL_GPIO_Init+0x1b0>
 8003dc4:	4e45      	ldr	r6, [pc, #276]	; (8003edc <HAL_GPIO_Init+0x1e8>)
 8003dc6:	42b0      	cmp	r0, r6
 8003dc8:	d100      	bne.n	8003dcc <HAL_GPIO_Init+0xd8>
 8003dca:	e077      	b.n	8003ebc <HAL_GPIO_Init+0x1c8>
 8003dcc:	2605      	movs	r6, #5
 8003dce:	40ae      	lsls	r6, r5
 8003dd0:	4334      	orrs	r4, r6
        temp &= ~(iocurrent);
 8003dd2:	9902      	ldr	r1, [sp, #8]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003dd4:	6094      	str	r4, [r2, #8]
        temp &= ~(iocurrent);
 8003dd6:	43cd      	mvns	r5, r1
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003dd8:	4649      	mov	r1, r9
        temp = EXTI->IMR;
 8003dda:	683a      	ldr	r2, [r7, #0]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003ddc:	03c9      	lsls	r1, r1, #15
 8003dde:	d45e      	bmi.n	8003e9e <HAL_GPIO_Init+0x1aa>
        temp &= ~(iocurrent);
 8003de0:	402a      	ands	r2, r5
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003de2:	4649      	mov	r1, r9
        EXTI->IMR = temp;
 8003de4:	603a      	str	r2, [r7, #0]
        temp = EXTI->EMR;
 8003de6:	687a      	ldr	r2, [r7, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003de8:	0389      	lsls	r1, r1, #14
 8003dea:	d455      	bmi.n	8003e98 <HAL_GPIO_Init+0x1a4>
        temp &= ~(iocurrent);
 8003dec:	402a      	ands	r2, r5
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8003dee:	607a      	str	r2, [r7, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003df0:	464a      	mov	r2, r9
        temp = EXTI->RTSR;
 8003df2:	68bc      	ldr	r4, [r7, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003df4:	02d2      	lsls	r2, r2, #11
 8003df6:	d44c      	bmi.n	8003e92 <HAL_GPIO_Init+0x19e>
        temp &= ~(iocurrent);
 8003df8:	402c      	ands	r4, r5
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003dfa:	4649      	mov	r1, r9
        EXTI->RTSR = temp;
 8003dfc:	60bc      	str	r4, [r7, #8]
        temp = EXTI->FTSR;
 8003dfe:	68fa      	ldr	r2, [r7, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003e00:	0289      	lsls	r1, r1, #10
 8003e02:	d441      	bmi.n	8003e88 <HAL_GPIO_Init+0x194>
        temp &= ~(iocurrent);
 8003e04:	402a      	ands	r2, r5
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 8003e06:	60fa      	str	r2, [r7, #12]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e08:	4642      	mov	r2, r8
      }
    }

    position++;
 8003e0a:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e0c:	40da      	lsrs	r2, r3
 8003e0e:	d186      	bne.n	8003d1e <HAL_GPIO_Init+0x2a>
  } 
}
 8003e10:	b007      	add	sp, #28
 8003e12:	bcf0      	pop	{r4, r5, r6, r7}
 8003e14:	46bb      	mov	fp, r7
 8003e16:	46b2      	mov	sl, r6
 8003e18:	46a9      	mov	r9, r5
 8003e1a:	46a0      	mov	r8, r4
 8003e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003e1e:	2103      	movs	r1, #3
 8003e20:	005c      	lsls	r4, r3, #1
 8003e22:	40a1      	lsls	r1, r4
 8003e24:	468c      	mov	ip, r1
 8003e26:	43c9      	mvns	r1, r1
 8003e28:	9103      	str	r1, [sp, #12]
 8003e2a:	4661      	mov	r1, ip
        temp = GPIOx->OSPEEDR;
 8003e2c:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003e2e:	438d      	bics	r5, r1
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003e30:	9901      	ldr	r1, [sp, #4]
 8003e32:	68c9      	ldr	r1, [r1, #12]
 8003e34:	40a1      	lsls	r1, r4
 8003e36:	430d      	orrs	r5, r1
        GPIOx->OSPEEDR = temp;
 8003e38:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 8003e3a:	6845      	ldr	r5, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003e3c:	4651      	mov	r1, sl
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e3e:	4395      	bics	r5, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003e40:	464a      	mov	r2, r9
 8003e42:	0912      	lsrs	r2, r2, #4
 8003e44:	400a      	ands	r2, r1
 8003e46:	409a      	lsls	r2, r3
 8003e48:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 8003e4a:	6042      	str	r2, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003e4c:	4662      	mov	r2, ip
      temp = GPIOx->PUPDR;
 8003e4e:	68c5      	ldr	r5, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003e50:	9901      	ldr	r1, [sp, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003e52:	4395      	bics	r5, r2
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003e54:	688a      	ldr	r2, [r1, #8]
 8003e56:	40a2      	lsls	r2, r4
 8003e58:	432a      	orrs	r2, r5
      GPIOx->PUPDR = temp;
 8003e5a:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e5c:	2e02      	cmp	r6, #2
 8003e5e:	d000      	beq.n	8003e62 <HAL_GPIO_Init+0x16e>
 8003e60:	e77b      	b.n	8003d5a <HAL_GPIO_Init+0x66>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003e62:	2507      	movs	r5, #7
 8003e64:	401d      	ands	r5, r3
 8003e66:	00ad      	lsls	r5, r5, #2
 8003e68:	360d      	adds	r6, #13
 8003e6a:	40ae      	lsls	r6, r5
        temp = GPIOx->AFR[position >> 3u];
 8003e6c:	08da      	lsrs	r2, r3, #3
 8003e6e:	0092      	lsls	r2, r2, #2
 8003e70:	1882      	adds	r2, r0, r2
 8003e72:	6a11      	ldr	r1, [r2, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003e74:	43b1      	bics	r1, r6
 8003e76:	468c      	mov	ip, r1
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003e78:	9901      	ldr	r1, [sp, #4]
 8003e7a:	6909      	ldr	r1, [r1, #16]
 8003e7c:	40a9      	lsls	r1, r5
 8003e7e:	000d      	movs	r5, r1
 8003e80:	4661      	mov	r1, ip
 8003e82:	430d      	orrs	r5, r1
        GPIOx->AFR[position >> 3u] = temp;
 8003e84:	6215      	str	r5, [r2, #32]
 8003e86:	e768      	b.n	8003d5a <HAL_GPIO_Init+0x66>
          temp |= iocurrent;
 8003e88:	9902      	ldr	r1, [sp, #8]
 8003e8a:	4311      	orrs	r1, r2
 8003e8c:	000a      	movs	r2, r1
        EXTI->FTSR = temp;
 8003e8e:	60fa      	str	r2, [r7, #12]
 8003e90:	e7ba      	b.n	8003e08 <HAL_GPIO_Init+0x114>
          temp |= iocurrent;
 8003e92:	9a02      	ldr	r2, [sp, #8]
 8003e94:	4314      	orrs	r4, r2
 8003e96:	e7b0      	b.n	8003dfa <HAL_GPIO_Init+0x106>
          temp |= iocurrent;
 8003e98:	9902      	ldr	r1, [sp, #8]
 8003e9a:	430a      	orrs	r2, r1
 8003e9c:	e7a7      	b.n	8003dee <HAL_GPIO_Init+0xfa>
          temp |= iocurrent;
 8003e9e:	9902      	ldr	r1, [sp, #8]
 8003ea0:	430a      	orrs	r2, r1
 8003ea2:	e79e      	b.n	8003de2 <HAL_GPIO_Init+0xee>
 8003ea4:	2103      	movs	r1, #3
 8003ea6:	40a9      	lsls	r1, r5
 8003ea8:	430c      	orrs	r4, r1
 8003eaa:	e792      	b.n	8003dd2 <HAL_GPIO_Init+0xde>
 8003eac:	4651      	mov	r1, sl
 8003eae:	40a9      	lsls	r1, r5
 8003eb0:	430c      	orrs	r4, r1
 8003eb2:	e78e      	b.n	8003dd2 <HAL_GPIO_Init+0xde>
 8003eb4:	2602      	movs	r6, #2
 8003eb6:	40ae      	lsls	r6, r5
 8003eb8:	4334      	orrs	r4, r6
 8003eba:	e78a      	b.n	8003dd2 <HAL_GPIO_Init+0xde>
 8003ebc:	2604      	movs	r6, #4
 8003ebe:	40ae      	lsls	r6, r5
 8003ec0:	4334      	orrs	r4, r6
 8003ec2:	e786      	b.n	8003dd2 <HAL_GPIO_Init+0xde>
 8003ec4:	40021000 	.word	0x40021000
 8003ec8:	40010400 	.word	0x40010400
 8003ecc:	40010000 	.word	0x40010000
 8003ed0:	48000400 	.word	0x48000400
 8003ed4:	48000800 	.word	0x48000800
 8003ed8:	48000c00 	.word	0x48000c00
 8003edc:	48001000 	.word	0x48001000

08003ee0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ee0:	2a00      	cmp	r2, #0
 8003ee2:	d001      	beq.n	8003ee8 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003ee4:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ee6:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003ee8:	6281      	str	r1, [r0, #40]	; 0x28
}
 8003eea:	e7fc      	b.n	8003ee6 <HAL_GPIO_WritePin+0x6>

08003eec <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003eec:	6942      	ldr	r2, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003eee:	0013      	movs	r3, r2
 8003ef0:	400b      	ands	r3, r1
 8003ef2:	041b      	lsls	r3, r3, #16
 8003ef4:	4391      	bics	r1, r2
 8003ef6:	4319      	orrs	r1, r3
 8003ef8:	6181      	str	r1, [r0, #24]
}
 8003efa:	4770      	bx	lr

08003efc <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003efc:	4b04      	ldr	r3, [pc, #16]	; (8003f10 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 8003efe:	b510      	push	{r4, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003f00:	695a      	ldr	r2, [r3, #20]
 8003f02:	4210      	tst	r0, r2
 8003f04:	d100      	bne.n	8003f08 <HAL_GPIO_EXTI_IRQHandler+0xc>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8003f06:	bd10      	pop	{r4, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003f08:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003f0a:	f7ff fc53 	bl	80037b4 <HAL_GPIO_EXTI_Callback>
}
 8003f0e:	e7fa      	b.n	8003f06 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8003f10:	40010400 	.word	0x40010400

08003f14 <I2C_IsAcknowledgeFailed.part.0>:
  *                the configuration information for the specified I2C.
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
 8003f14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f16:	46c6      	mov	lr, r8
 8003f18:	0007      	movs	r7, r0
 8003f1a:	000d      	movs	r5, r1
 8003f1c:	4690      	mov	r8, r2
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f1e:	2620      	movs	r6, #32
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
 8003f20:	b500      	push	{lr}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f22:	683c      	ldr	r4, [r7, #0]
 8003f24:	e001      	b.n	8003f2a <I2C_IsAcknowledgeFailed.part.0+0x16>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003f26:	1c6b      	adds	r3, r5, #1
 8003f28:	d122      	bne.n	8003f70 <I2C_IsAcknowledgeFailed.part.0+0x5c>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f2a:	69a3      	ldr	r3, [r4, #24]
 8003f2c:	421e      	tst	r6, r3
 8003f2e:	d0fa      	beq.n	8003f26 <I2C_IsAcknowledgeFailed.part.0+0x12>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f30:	2310      	movs	r3, #16
 8003f32:	61e3      	str	r3, [r4, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f34:	61e6      	str	r6, [r4, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003f36:	69a3      	ldr	r3, [r4, #24]
 8003f38:	079b      	lsls	r3, r3, #30
 8003f3a:	d501      	bpl.n	8003f40 <I2C_IsAcknowledgeFailed.part.0+0x2c>
    hi2c->Instance->TXDR = 0x00U;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	62a3      	str	r3, [r4, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f40:	2301      	movs	r3, #1
 8003f42:	69a2      	ldr	r2, [r4, #24]
 8003f44:	4213      	tst	r3, r2
 8003f46:	d021      	beq.n	8003f8c <I2C_IsAcknowledgeFailed.part.0+0x78>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f48:	6863      	ldr	r3, [r4, #4]
 8003f4a:	4a12      	ldr	r2, [pc, #72]	; (8003f94 <I2C_IsAcknowledgeFailed.part.0+0x80>)
 8003f4c:	4013      	ands	r3, r2

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003f4e:	2204      	movs	r2, #4
    I2C_RESET_CR2(hi2c);
 8003f50:	6063      	str	r3, [r4, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003f52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f54:	4313      	orrs	r3, r2
 8003f56:	647b      	str	r3, [r7, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003f58:	2341      	movs	r3, #65	; 0x41
 8003f5a:	321c      	adds	r2, #28
 8003f5c:	54fa      	strb	r2, [r7, r3]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	3222      	adds	r2, #34	; 0x22
 8003f62:	54bb      	strb	r3, [r7, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f64:	3a02      	subs	r2, #2

    return HAL_ERROR;
  }
  return HAL_OK;
}
 8003f66:	2001      	movs	r0, #1
    __HAL_UNLOCK(hi2c);
 8003f68:	54bb      	strb	r3, [r7, r2]
}
 8003f6a:	bc80      	pop	{r7}
 8003f6c:	46b8      	mov	r8, r7
 8003f6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f70:	f7ff fe50 	bl	8003c14 <HAL_GetTick>
 8003f74:	4643      	mov	r3, r8
 8003f76:	1ac0      	subs	r0, r0, r3
 8003f78:	4285      	cmp	r5, r0
 8003f7a:	d301      	bcc.n	8003f80 <I2C_IsAcknowledgeFailed.part.0+0x6c>
 8003f7c:	2d00      	cmp	r5, #0
 8003f7e:	d1d0      	bne.n	8003f22 <I2C_IsAcknowledgeFailed.part.0+0xe>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f80:	2220      	movs	r2, #32
 8003f82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f84:	4313      	orrs	r3, r2
 8003f86:	647b      	str	r3, [r7, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003f88:	2341      	movs	r3, #65	; 0x41
 8003f8a:	e7e7      	b.n	8003f5c <I2C_IsAcknowledgeFailed.part.0+0x48>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003f8c:	69a2      	ldr	r2, [r4, #24]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	61a3      	str	r3, [r4, #24]
 8003f92:	e7d9      	b.n	8003f48 <I2C_IsAcknowledgeFailed.part.0+0x34>
 8003f94:	fe00e800 	.word	0xfe00e800

08003f98 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8003f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f9a:	4647      	mov	r7, r8
 8003f9c:	46ce      	mov	lr, r9
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f9e:	2310      	movs	r3, #16
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	0006      	movs	r6, r0
 8003fa4:	000d      	movs	r5, r1
 8003fa6:	4691      	mov	r9, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003fa8:	2702      	movs	r7, #2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003faa:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003fac:	e00c      	b.n	8003fc8 <I2C_WaitOnTXISFlagUntilTimeout+0x30>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003fae:	4642      	mov	r2, r8
 8003fb0:	699b      	ldr	r3, [r3, #24]
 8003fb2:	421a      	tst	r2, r3
 8003fb4:	d006      	beq.n	8003fc4 <I2C_WaitOnTXISFlagUntilTimeout+0x2c>
 8003fb6:	464a      	mov	r2, r9
 8003fb8:	0029      	movs	r1, r5
 8003fba:	0030      	movs	r0, r6
 8003fbc:	f7ff ffaa 	bl	8003f14 <I2C_IsAcknowledgeFailed.part.0>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fc0:	2800      	cmp	r0, #0
 8003fc2:	d11f      	bne.n	8004004 <I2C_WaitOnTXISFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 8003fc4:	1c6b      	adds	r3, r5, #1
 8003fc6:	d108      	bne.n	8003fda <I2C_WaitOnTXISFlagUntilTimeout+0x42>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003fc8:	6833      	ldr	r3, [r6, #0]
 8003fca:	699c      	ldr	r4, [r3, #24]
 8003fcc:	4227      	tst	r7, r4
 8003fce:	d0ee      	beq.n	8003fae <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 8003fd0:	2000      	movs	r0, #0
}
 8003fd2:	bcc0      	pop	{r6, r7}
 8003fd4:	46b9      	mov	r9, r7
 8003fd6:	46b0      	mov	r8, r6
 8003fd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fda:	f7ff fe1b 	bl	8003c14 <HAL_GetTick>
 8003fde:	464b      	mov	r3, r9
 8003fe0:	1ac0      	subs	r0, r0, r3
 8003fe2:	42a8      	cmp	r0, r5
 8003fe4:	d801      	bhi.n	8003fea <I2C_WaitOnTXISFlagUntilTimeout+0x52>
 8003fe6:	2d00      	cmp	r5, #0
 8003fe8:	d1ee      	bne.n	8003fc8 <I2C_WaitOnTXISFlagUntilTimeout+0x30>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003fea:	2220      	movs	r2, #32
 8003fec:	6c73      	ldr	r3, [r6, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8003fee:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	6473      	str	r3, [r6, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ff4:	2341      	movs	r3, #65	; 0x41
 8003ff6:	54f2      	strb	r2, [r6, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	3222      	adds	r2, #34	; 0x22
 8003ffc:	54b3      	strb	r3, [r6, r2]
        __HAL_UNLOCK(hi2c);
 8003ffe:	3a02      	subs	r2, #2
 8004000:	54b3      	strb	r3, [r6, r2]
        return HAL_ERROR;
 8004002:	e7e6      	b.n	8003fd2 <I2C_WaitOnTXISFlagUntilTimeout+0x3a>
      return HAL_ERROR;
 8004004:	2001      	movs	r0, #1
 8004006:	e7e4      	b.n	8003fd2 <I2C_WaitOnTXISFlagUntilTimeout+0x3a>

08004008 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8004008:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800400a:	2310      	movs	r3, #16
{
 800400c:	46c6      	mov	lr, r8
 800400e:	0005      	movs	r5, r0
 8004010:	000c      	movs	r4, r1
 8004012:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004014:	2720      	movs	r7, #32
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004016:	4698      	mov	r8, r3
{
 8004018:	b500      	push	{lr}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800401a:	e011      	b.n	8004040 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800401c:	4642      	mov	r2, r8
 800401e:	699b      	ldr	r3, [r3, #24]
 8004020:	421a      	tst	r2, r3
 8004022:	d006      	beq.n	8004032 <I2C_WaitOnSTOPFlagUntilTimeout+0x2a>
 8004024:	0032      	movs	r2, r6
 8004026:	0021      	movs	r1, r4
 8004028:	0028      	movs	r0, r5
 800402a:	f7ff ff73 	bl	8003f14 <I2C_IsAcknowledgeFailed.part.0>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800402e:	2800      	cmp	r0, #0
 8004030:	d11b      	bne.n	800406a <I2C_WaitOnSTOPFlagUntilTimeout+0x62>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004032:	f7ff fdef 	bl	8003c14 <HAL_GetTick>
 8004036:	1b80      	subs	r0, r0, r6
 8004038:	42a0      	cmp	r0, r4
 800403a:	d807      	bhi.n	800404c <I2C_WaitOnSTOPFlagUntilTimeout+0x44>
 800403c:	2c00      	cmp	r4, #0
 800403e:	d005      	beq.n	800404c <I2C_WaitOnSTOPFlagUntilTimeout+0x44>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004040:	682b      	ldr	r3, [r5, #0]
 8004042:	699a      	ldr	r2, [r3, #24]
 8004044:	4217      	tst	r7, r2
 8004046:	d0e9      	beq.n	800401c <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8004048:	2000      	movs	r0, #0
 800404a:	e00b      	b.n	8004064 <I2C_WaitOnSTOPFlagUntilTimeout+0x5c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800404c:	2220      	movs	r2, #32
 800404e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8004050:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004052:	4313      	orrs	r3, r2
 8004054:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004056:	2341      	movs	r3, #65	; 0x41
 8004058:	54ea      	strb	r2, [r5, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800405a:	2300      	movs	r3, #0
 800405c:	3222      	adds	r2, #34	; 0x22
 800405e:	54ab      	strb	r3, [r5, r2]
        __HAL_UNLOCK(hi2c);
 8004060:	3a02      	subs	r2, #2
 8004062:	54ab      	strb	r3, [r5, r2]
}
 8004064:	bc80      	pop	{r7}
 8004066:	46b8      	mov	r8, r7
 8004068:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_ERROR;
 800406a:	2001      	movs	r0, #1
 800406c:	e7fa      	b.n	8004064 <I2C_WaitOnSTOPFlagUntilTimeout+0x5c>
 800406e:	46c0      	nop			; (mov r8, r8)

08004070 <I2C_WaitOnFlagUntilTimeout>:
{
 8004070:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004072:	46c6      	mov	lr, r8
 8004074:	000d      	movs	r5, r1
 8004076:	4680      	mov	r8, r0
 8004078:	0017      	movs	r7, r2
 800407a:	001e      	movs	r6, r3
 800407c:	b500      	push	{lr}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800407e:	4643      	mov	r3, r8
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	e001      	b.n	8004088 <I2C_WaitOnFlagUntilTimeout+0x18>
    if (Timeout != HAL_MAX_DELAY)
 8004084:	1c72      	adds	r2, r6, #1
 8004086:	d10a      	bne.n	800409e <I2C_WaitOnFlagUntilTimeout+0x2e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004088:	699c      	ldr	r4, [r3, #24]
 800408a:	402c      	ands	r4, r5
 800408c:	1b64      	subs	r4, r4, r5
 800408e:	4262      	negs	r2, r4
 8004090:	4154      	adcs	r4, r2
 8004092:	42bc      	cmp	r4, r7
 8004094:	d0f6      	beq.n	8004084 <I2C_WaitOnFlagUntilTimeout+0x14>
  return HAL_OK;
 8004096:	2000      	movs	r0, #0
}
 8004098:	bc80      	pop	{r7}
 800409a:	46b8      	mov	r8, r7
 800409c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800409e:	f7ff fdb9 	bl	8003c14 <HAL_GetTick>
 80040a2:	9b06      	ldr	r3, [sp, #24]
 80040a4:	1ac0      	subs	r0, r0, r3
 80040a6:	42b0      	cmp	r0, r6
 80040a8:	d801      	bhi.n	80040ae <I2C_WaitOnFlagUntilTimeout+0x3e>
 80040aa:	2e00      	cmp	r6, #0
 80040ac:	d1e7      	bne.n	800407e <I2C_WaitOnFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040ae:	4643      	mov	r3, r8
 80040b0:	2220      	movs	r2, #32
 80040b2:	4641      	mov	r1, r8
 80040b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 80040b6:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040b8:	4313      	orrs	r3, r2
 80040ba:	644b      	str	r3, [r1, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80040bc:	2341      	movs	r3, #65	; 0x41
 80040be:	54ca      	strb	r2, [r1, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80040c0:	2300      	movs	r3, #0
 80040c2:	3222      	adds	r2, #34	; 0x22
 80040c4:	548b      	strb	r3, [r1, r2]
        __HAL_UNLOCK(hi2c);
 80040c6:	3a02      	subs	r2, #2
 80040c8:	548b      	strb	r3, [r1, r2]
        return HAL_ERROR;
 80040ca:	e7e5      	b.n	8004098 <I2C_WaitOnFlagUntilTimeout+0x28>

080040cc <I2C_RequestMemoryWrite>:
{
 80040cc:	b570      	push	{r4, r5, r6, lr}
 80040ce:	001e      	movs	r6, r3
 80040d0:	0004      	movs	r4, r0
 80040d2:	0015      	movs	r5, r2
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80040d4:	0589      	lsls	r1, r1, #22
 80040d6:	6802      	ldr	r2, [r0, #0]
 80040d8:	b2f0      	uxtb	r0, r6
 80040da:	0400      	lsls	r0, r0, #16
 80040dc:	0d89      	lsrs	r1, r1, #22
 80040de:	6853      	ldr	r3, [r2, #4]
 80040e0:	4301      	orrs	r1, r0
 80040e2:	4816      	ldr	r0, [pc, #88]	; (800413c <I2C_RequestMemoryWrite+0x70>)
{
 80040e4:	b082      	sub	sp, #8
  MODIFY_REG(hi2c->Instance->CR2,
 80040e6:	4003      	ands	r3, r0
 80040e8:	4319      	orrs	r1, r3
 80040ea:	4b15      	ldr	r3, [pc, #84]	; (8004140 <I2C_RequestMemoryWrite+0x74>)
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040ec:	0020      	movs	r0, r4
  MODIFY_REG(hi2c->Instance->CR2,
 80040ee:	4319      	orrs	r1, r3
 80040f0:	6051      	str	r1, [r2, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040f2:	9a07      	ldr	r2, [sp, #28]
 80040f4:	9906      	ldr	r1, [sp, #24]
 80040f6:	f7ff ff4f 	bl	8003f98 <I2C_WaitOnTXISFlagUntilTimeout>
 80040fa:	2800      	cmp	r0, #0
 80040fc:	d11c      	bne.n	8004138 <I2C_RequestMemoryWrite+0x6c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80040fe:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004100:	2e01      	cmp	r6, #1
 8004102:	d10e      	bne.n	8004122 <I2C_RequestMemoryWrite+0x56>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004104:	b2ed      	uxtb	r5, r5
 8004106:	629d      	str	r5, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004108:	9b07      	ldr	r3, [sp, #28]
 800410a:	2200      	movs	r2, #0
 800410c:	9300      	str	r3, [sp, #0]
 800410e:	2180      	movs	r1, #128	; 0x80
 8004110:	9b06      	ldr	r3, [sp, #24]
 8004112:	0020      	movs	r0, r4
 8004114:	f7ff ffac 	bl	8004070 <I2C_WaitOnFlagUntilTimeout>
 8004118:	1e43      	subs	r3, r0, #1
 800411a:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 800411c:	b2c0      	uxtb	r0, r0
}
 800411e:	b002      	add	sp, #8
 8004120:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004122:	0a2a      	lsrs	r2, r5, #8
 8004124:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004126:	0020      	movs	r0, r4
 8004128:	9a07      	ldr	r2, [sp, #28]
 800412a:	9906      	ldr	r1, [sp, #24]
 800412c:	f7ff ff34 	bl	8003f98 <I2C_WaitOnTXISFlagUntilTimeout>
 8004130:	2800      	cmp	r0, #0
 8004132:	d101      	bne.n	8004138 <I2C_RequestMemoryWrite+0x6c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004134:	6823      	ldr	r3, [r4, #0]
 8004136:	e7e5      	b.n	8004104 <I2C_RequestMemoryWrite+0x38>
    return HAL_ERROR;
 8004138:	2001      	movs	r0, #1
 800413a:	e7f0      	b.n	800411e <I2C_RequestMemoryWrite+0x52>
 800413c:	fc009800 	.word	0xfc009800
 8004140:	81002000 	.word	0x81002000

08004144 <I2C_RequestMemoryRead>:
{
 8004144:	b570      	push	{r4, r5, r6, lr}
 8004146:	001e      	movs	r6, r3
 8004148:	0004      	movs	r4, r0
 800414a:	0015      	movs	r5, r2
  MODIFY_REG(hi2c->Instance->CR2,
 800414c:	0589      	lsls	r1, r1, #22
 800414e:	6802      	ldr	r2, [r0, #0]
 8004150:	b2f0      	uxtb	r0, r6
 8004152:	0400      	lsls	r0, r0, #16
 8004154:	0d89      	lsrs	r1, r1, #22
 8004156:	6853      	ldr	r3, [r2, #4]
 8004158:	4301      	orrs	r1, r0
 800415a:	4816      	ldr	r0, [pc, #88]	; (80041b4 <I2C_RequestMemoryRead+0x70>)
{
 800415c:	b082      	sub	sp, #8
  MODIFY_REG(hi2c->Instance->CR2,
 800415e:	4003      	ands	r3, r0
 8004160:	4319      	orrs	r1, r3
 8004162:	4b15      	ldr	r3, [pc, #84]	; (80041b8 <I2C_RequestMemoryRead+0x74>)
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004164:	0020      	movs	r0, r4
  MODIFY_REG(hi2c->Instance->CR2,
 8004166:	4319      	orrs	r1, r3
 8004168:	6051      	str	r1, [r2, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800416a:	9a07      	ldr	r2, [sp, #28]
 800416c:	9906      	ldr	r1, [sp, #24]
 800416e:	f7ff ff13 	bl	8003f98 <I2C_WaitOnTXISFlagUntilTimeout>
 8004172:	2800      	cmp	r0, #0
 8004174:	d11c      	bne.n	80041b0 <I2C_RequestMemoryRead+0x6c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004176:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004178:	2e01      	cmp	r6, #1
 800417a:	d10e      	bne.n	800419a <I2C_RequestMemoryRead+0x56>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800417c:	b2ed      	uxtb	r5, r5
 800417e:	629d      	str	r5, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004180:	9b07      	ldr	r3, [sp, #28]
 8004182:	2200      	movs	r2, #0
 8004184:	9300      	str	r3, [sp, #0]
 8004186:	2140      	movs	r1, #64	; 0x40
 8004188:	9b06      	ldr	r3, [sp, #24]
 800418a:	0020      	movs	r0, r4
 800418c:	f7ff ff70 	bl	8004070 <I2C_WaitOnFlagUntilTimeout>
 8004190:	1e43      	subs	r3, r0, #1
 8004192:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 8004194:	b2c0      	uxtb	r0, r0
}
 8004196:	b002      	add	sp, #8
 8004198:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800419a:	0a2a      	lsrs	r2, r5, #8
 800419c:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800419e:	0020      	movs	r0, r4
 80041a0:	9a07      	ldr	r2, [sp, #28]
 80041a2:	9906      	ldr	r1, [sp, #24]
 80041a4:	f7ff fef8 	bl	8003f98 <I2C_WaitOnTXISFlagUntilTimeout>
 80041a8:	2800      	cmp	r0, #0
 80041aa:	d101      	bne.n	80041b0 <I2C_RequestMemoryRead+0x6c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80041ac:	6823      	ldr	r3, [r4, #0]
 80041ae:	e7e5      	b.n	800417c <I2C_RequestMemoryRead+0x38>
    return HAL_ERROR;
 80041b0:	2001      	movs	r0, #1
 80041b2:	e7f0      	b.n	8004196 <I2C_RequestMemoryRead+0x52>
 80041b4:	fc009800 	.word	0xfc009800
 80041b8:	80002000 	.word	0x80002000

080041bc <HAL_I2C_Init>:
{
 80041bc:	b510      	push	{r4, lr}
 80041be:	1e04      	subs	r4, r0, #0
  if (hi2c == NULL)
 80041c0:	d04d      	beq.n	800425e <HAL_I2C_Init+0xa2>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80041c2:	2341      	movs	r3, #65	; 0x41
 80041c4:	5cc3      	ldrb	r3, [r0, r3]
 80041c6:	b2da      	uxtb	r2, r3
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d043      	beq.n	8004254 <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80041cc:	2341      	movs	r3, #65	; 0x41
 80041ce:	2224      	movs	r2, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 80041d0:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 80041d2:	54e2      	strb	r2, [r4, r3]
  __HAL_I2C_DISABLE(hi2c);
 80041d4:	6823      	ldr	r3, [r4, #0]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	438a      	bics	r2, r1
 80041da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80041dc:	6861      	ldr	r1, [r4, #4]
 80041de:	4a21      	ldr	r2, [pc, #132]	; (8004264 <HAL_I2C_Init+0xa8>)
 80041e0:	400a      	ands	r2, r1
 80041e2:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80041e4:	689a      	ldr	r2, [r3, #8]
 80041e6:	4920      	ldr	r1, [pc, #128]	; (8004268 <HAL_I2C_Init+0xac>)
 80041e8:	400a      	ands	r2, r1
 80041ea:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80041ec:	68e2      	ldr	r2, [r4, #12]
 80041ee:	2a01      	cmp	r2, #1
 80041f0:	d02a      	beq.n	8004248 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80041f2:	2184      	movs	r1, #132	; 0x84
 80041f4:	68a0      	ldr	r0, [r4, #8]
 80041f6:	0209      	lsls	r1, r1, #8
 80041f8:	4301      	orrs	r1, r0
 80041fa:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80041fc:	2a02      	cmp	r2, #2
 80041fe:	d102      	bne.n	8004206 <HAL_I2C_Init+0x4a>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004200:	2280      	movs	r2, #128	; 0x80
 8004202:	0112      	lsls	r2, r2, #4
 8004204:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004206:	6859      	ldr	r1, [r3, #4]
 8004208:	4a18      	ldr	r2, [pc, #96]	; (800426c <HAL_I2C_Init+0xb0>)
  return HAL_OK;
 800420a:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800420c:	430a      	orrs	r2, r1
 800420e:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004210:	68da      	ldr	r2, [r3, #12]
 8004212:	4915      	ldr	r1, [pc, #84]	; (8004268 <HAL_I2C_Init+0xac>)
 8004214:	400a      	ands	r2, r1
 8004216:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004218:	6961      	ldr	r1, [r4, #20]
 800421a:	6922      	ldr	r2, [r4, #16]
 800421c:	430a      	orrs	r2, r1
 800421e:	69a1      	ldr	r1, [r4, #24]
 8004220:	0209      	lsls	r1, r1, #8
 8004222:	430a      	orrs	r2, r1
 8004224:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004226:	6a21      	ldr	r1, [r4, #32]
 8004228:	69e2      	ldr	r2, [r4, #28]
 800422a:	430a      	orrs	r2, r1
  __HAL_I2C_ENABLE(hi2c);
 800422c:	2101      	movs	r1, #1
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800422e:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	430a      	orrs	r2, r1
 8004234:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004236:	2300      	movs	r3, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8004238:	2241      	movs	r2, #65	; 0x41
 800423a:	311f      	adds	r1, #31
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800423c:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800423e:	54a1      	strb	r1, [r4, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004240:	3201      	adds	r2, #1
  hi2c->PreviousState = I2C_STATE_NONE;
 8004242:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004244:	54a3      	strb	r3, [r4, r2]
}
 8004246:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004248:	2280      	movs	r2, #128	; 0x80
 800424a:	68a1      	ldr	r1, [r4, #8]
 800424c:	0212      	lsls	r2, r2, #8
 800424e:	430a      	orrs	r2, r1
 8004250:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004252:	e7d8      	b.n	8004206 <HAL_I2C_Init+0x4a>
    hi2c->Lock = HAL_UNLOCKED;
 8004254:	3340      	adds	r3, #64	; 0x40
 8004256:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_MspInit(hi2c);
 8004258:	f7ff f876 	bl	8003348 <HAL_I2C_MspInit>
 800425c:	e7b6      	b.n	80041cc <HAL_I2C_Init+0x10>
    return HAL_ERROR;
 800425e:	2001      	movs	r0, #1
 8004260:	e7f1      	b.n	8004246 <HAL_I2C_Init+0x8a>
 8004262:	46c0      	nop			; (mov r8, r8)
 8004264:	f0ffffff 	.word	0xf0ffffff
 8004268:	ffff7fff 	.word	0xffff7fff
 800426c:	02008000 	.word	0x02008000

08004270 <HAL_I2C_Mem_Write>:
{
 8004270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004272:	464e      	mov	r6, r9
 8004274:	4645      	mov	r5, r8
 8004276:	46de      	mov	lr, fp
 8004278:	4657      	mov	r7, sl
 800427a:	b5e0      	push	{r5, r6, r7, lr}
 800427c:	b085      	sub	sp, #20
 800427e:	001e      	movs	r6, r3
 8004280:	ab0e      	add	r3, sp, #56	; 0x38
 8004282:	0015      	movs	r5, r2
 8004284:	cb04      	ldmia	r3!, {r2}
 8004286:	0004      	movs	r4, r0
 8004288:	881b      	ldrh	r3, [r3, #0]
 800428a:	468b      	mov	fp, r1
 800428c:	469a      	mov	sl, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800428e:	2341      	movs	r3, #65	; 0x41
 8004290:	4698      	mov	r8, r3
 8004292:	5cc3      	ldrb	r3, [r0, r3]
{
 8004294:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004296:	2b20      	cmp	r3, #32
 8004298:	d125      	bne.n	80042e6 <HAL_I2C_Mem_Write+0x76>
    if ((pData == NULL) || (Size == 0U))
 800429a:	2a00      	cmp	r2, #0
 800429c:	d018      	beq.n	80042d0 <HAL_I2C_Mem_Write+0x60>
 800429e:	4653      	mov	r3, sl
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d015      	beq.n	80042d0 <HAL_I2C_Mem_Write+0x60>
    __HAL_LOCK(hi2c);
 80042a4:	2240      	movs	r2, #64	; 0x40
 80042a6:	5c83      	ldrb	r3, [r0, r2]
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d01c      	beq.n	80042e6 <HAL_I2C_Mem_Write+0x76>
 80042ac:	2301      	movs	r3, #1
 80042ae:	5483      	strb	r3, [r0, r2]
    tickstart = HAL_GetTick();
 80042b0:	f7ff fcb0 	bl	8003c14 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80042b4:	2180      	movs	r1, #128	; 0x80
 80042b6:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 80042b8:	0007      	movs	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80042ba:	2319      	movs	r3, #25
 80042bc:	2201      	movs	r2, #1
 80042be:	0020      	movs	r0, r4
 80042c0:	0209      	lsls	r1, r1, #8
 80042c2:	f7ff fed5 	bl	8004070 <I2C_WaitOnFlagUntilTimeout>
 80042c6:	9003      	str	r0, [sp, #12]
 80042c8:	2800      	cmp	r0, #0
 80042ca:	d00e      	beq.n	80042ea <HAL_I2C_Mem_Write+0x7a>
      return HAL_ERROR;
 80042cc:	2001      	movs	r0, #1
 80042ce:	e003      	b.n	80042d8 <HAL_I2C_Mem_Write+0x68>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80042d0:	2380      	movs	r3, #128	; 0x80
      return  HAL_ERROR;
 80042d2:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	6463      	str	r3, [r4, #68]	; 0x44
}
 80042d8:	b005      	add	sp, #20
 80042da:	bcf0      	pop	{r4, r5, r6, r7}
 80042dc:	46bb      	mov	fp, r7
 80042de:	46b2      	mov	sl, r6
 80042e0:	46a9      	mov	r9, r5
 80042e2:	46a0      	mov	r8, r4
 80042e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 80042e6:	2002      	movs	r0, #2
 80042e8:	e7f6      	b.n	80042d8 <HAL_I2C_Mem_Write+0x68>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80042ea:	2321      	movs	r3, #33	; 0x21
 80042ec:	4642      	mov	r2, r8
 80042ee:	54a3      	strb	r3, [r4, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80042f0:	2240      	movs	r2, #64	; 0x40
 80042f2:	3321      	adds	r3, #33	; 0x21
 80042f4:	54e2      	strb	r2, [r4, r3]
    hi2c->pBuffPtr  = pData;
 80042f6:	464a      	mov	r2, r9
 80042f8:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80042fa:	4652      	mov	r2, sl
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042fc:	9b03      	ldr	r3, [sp, #12]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80042fe:	4659      	mov	r1, fp
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004300:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->XferISR   = NULL;
 8004302:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004304:	9b10      	ldr	r3, [sp, #64]	; 0x40
    hi2c->XferCount = Size;
 8004306:	8562      	strh	r2, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004308:	9300      	str	r3, [sp, #0]
 800430a:	002a      	movs	r2, r5
 800430c:	0033      	movs	r3, r6
 800430e:	0020      	movs	r0, r4
 8004310:	9701      	str	r7, [sp, #4]
 8004312:	f7ff fedb 	bl	80040cc <I2C_RequestMemoryWrite>
 8004316:	2800      	cmp	r0, #0
 8004318:	d167      	bne.n	80043ea <HAL_I2C_Mem_Write+0x17a>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800431a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800431c:	2bff      	cmp	r3, #255	; 0xff
 800431e:	d847      	bhi.n	80043b0 <HAL_I2C_Mem_Write+0x140>
  MODIFY_REG(hi2c->Instance->CR2,
 8004320:	465a      	mov	r2, fp
      hi2c->XferSize = hi2c->XferCount;
 8004322:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2,
 8004324:	6821      	ldr	r1, [r4, #0]
      hi2c->XferSize = hi2c->XferCount;
 8004326:	b29b      	uxth	r3, r3
 8004328:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 800432a:	0595      	lsls	r5, r2, #22
 800432c:	b2db      	uxtb	r3, r3
 800432e:	0daa      	lsrs	r2, r5, #22
 8004330:	041b      	lsls	r3, r3, #16
 8004332:	6848      	ldr	r0, [r1, #4]
 8004334:	4313      	orrs	r3, r2
 8004336:	4a3a      	ldr	r2, [pc, #232]	; (8004420 <HAL_I2C_Mem_Write+0x1b0>)
 8004338:	4002      	ands	r2, r0
 800433a:	4313      	orrs	r3, r2
 800433c:	2280      	movs	r2, #128	; 0x80
 800433e:	0492      	lsls	r2, r2, #18
 8004340:	4313      	orrs	r3, r2
 8004342:	604b      	str	r3, [r1, #4]
 8004344:	4e36      	ldr	r6, [pc, #216]	; (8004420 <HAL_I2C_Mem_Write+0x1b0>)
 8004346:	0dad      	lsrs	r5, r5, #22
 8004348:	e002      	b.n	8004350 <HAL_I2C_Mem_Write+0xe0>
    } while (hi2c->XferCount > 0U);
 800434a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800434c:	2b00      	cmp	r3, #0
 800434e:	d051      	beq.n	80043f4 <HAL_I2C_Mem_Write+0x184>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004350:	003a      	movs	r2, r7
 8004352:	0020      	movs	r0, r4
 8004354:	9910      	ldr	r1, [sp, #64]	; 0x40
 8004356:	f7ff fe1f 	bl	8003f98 <I2C_WaitOnTXISFlagUntilTimeout>
 800435a:	2800      	cmp	r0, #0
 800435c:	d1b6      	bne.n	80042cc <HAL_I2C_Mem_Write+0x5c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800435e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004360:	6822      	ldr	r2, [r4, #0]
 8004362:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8004364:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004366:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8004368:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800436a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800436c:	3b01      	subs	r3, #1
 800436e:	b29b      	uxth	r3, r3
 8004370:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8004372:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004374:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8004376:	3b01      	subs	r3, #1
 8004378:	b29b      	uxth	r3, r3
 800437a:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800437c:	2a00      	cmp	r2, #0
 800437e:	d0e4      	beq.n	800434a <HAL_I2C_Mem_Write+0xda>
 8004380:	2b00      	cmp	r3, #0
 8004382:	d1e2      	bne.n	800434a <HAL_I2C_Mem_Write+0xda>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004384:	2200      	movs	r2, #0
 8004386:	2180      	movs	r1, #128	; 0x80
 8004388:	0020      	movs	r0, r4
 800438a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800438c:	9700      	str	r7, [sp, #0]
 800438e:	f7ff fe6f 	bl	8004070 <I2C_WaitOnFlagUntilTimeout>
 8004392:	2800      	cmp	r0, #0
 8004394:	d19a      	bne.n	80042cc <HAL_I2C_Mem_Write+0x5c>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004396:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004398:	2bff      	cmp	r3, #255	; 0xff
 800439a:	d917      	bls.n	80043cc <HAL_I2C_Mem_Write+0x15c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800439c:	23ff      	movs	r3, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2,
 800439e:	6821      	ldr	r1, [r4, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80043a0:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 80043a2:	684b      	ldr	r3, [r1, #4]
 80043a4:	4a1f      	ldr	r2, [pc, #124]	; (8004424 <HAL_I2C_Mem_Write+0x1b4>)
 80043a6:	4033      	ands	r3, r6
 80043a8:	432b      	orrs	r3, r5
 80043aa:	4313      	orrs	r3, r2
 80043ac:	604b      	str	r3, [r1, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80043ae:	e7cc      	b.n	800434a <HAL_I2C_Mem_Write+0xda>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80043b0:	23ff      	movs	r3, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2,
 80043b2:	6821      	ldr	r1, [r4, #0]
 80043b4:	4a1a      	ldr	r2, [pc, #104]	; (8004420 <HAL_I2C_Mem_Write+0x1b0>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80043b6:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 80043b8:	684b      	ldr	r3, [r1, #4]
 80043ba:	4013      	ands	r3, r2
 80043bc:	465a      	mov	r2, fp
 80043be:	0595      	lsls	r5, r2, #22
 80043c0:	0daa      	lsrs	r2, r5, #22
 80043c2:	4313      	orrs	r3, r2
 80043c4:	4a17      	ldr	r2, [pc, #92]	; (8004424 <HAL_I2C_Mem_Write+0x1b4>)
 80043c6:	4313      	orrs	r3, r2
 80043c8:	604b      	str	r3, [r1, #4]
}
 80043ca:	e7bb      	b.n	8004344 <HAL_I2C_Mem_Write+0xd4>
          hi2c->XferSize = hi2c->XferCount;
 80043cc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2,
 80043ce:	6821      	ldr	r1, [r4, #0]
          hi2c->XferSize = hi2c->XferCount;
 80043d0:	b29b      	uxth	r3, r3
  MODIFY_REG(hi2c->Instance->CR2,
 80043d2:	684a      	ldr	r2, [r1, #4]
          hi2c->XferSize = hi2c->XferCount;
 80043d4:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	041b      	lsls	r3, r3, #16
 80043da:	4032      	ands	r2, r6
 80043dc:	432b      	orrs	r3, r5
 80043de:	4313      	orrs	r3, r2
 80043e0:	2280      	movs	r2, #128	; 0x80
 80043e2:	0492      	lsls	r2, r2, #18
 80043e4:	4313      	orrs	r3, r2
 80043e6:	604b      	str	r3, [r1, #4]
}
 80043e8:	e7af      	b.n	800434a <HAL_I2C_Mem_Write+0xda>
      __HAL_UNLOCK(hi2c);
 80043ea:	2340      	movs	r3, #64	; 0x40
 80043ec:	9a03      	ldr	r2, [sp, #12]
      return HAL_ERROR;
 80043ee:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
 80043f0:	54e2      	strb	r2, [r4, r3]
      return HAL_ERROR;
 80043f2:	e771      	b.n	80042d8 <HAL_I2C_Mem_Write+0x68>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043f4:	003a      	movs	r2, r7
 80043f6:	0020      	movs	r0, r4
 80043f8:	9910      	ldr	r1, [sp, #64]	; 0x40
 80043fa:	f7ff fe05 	bl	8004008 <I2C_WaitOnSTOPFlagUntilTimeout>
 80043fe:	2800      	cmp	r0, #0
 8004400:	d000      	beq.n	8004404 <HAL_I2C_Mem_Write+0x194>
 8004402:	e763      	b.n	80042cc <HAL_I2C_Mem_Write+0x5c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004404:	2120      	movs	r1, #32
 8004406:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8004408:	4d07      	ldr	r5, [pc, #28]	; (8004428 <HAL_I2C_Mem_Write+0x1b8>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800440a:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800440c:	685a      	ldr	r2, [r3, #4]
 800440e:	402a      	ands	r2, r5
 8004410:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004412:	2341      	movs	r3, #65	; 0x41
 8004414:	54e1      	strb	r1, [r4, r3]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004416:	3301      	adds	r3, #1
 8004418:	54e0      	strb	r0, [r4, r3]
    __HAL_UNLOCK(hi2c);
 800441a:	3b02      	subs	r3, #2
 800441c:	54e0      	strb	r0, [r4, r3]
    return HAL_OK;
 800441e:	e75b      	b.n	80042d8 <HAL_I2C_Mem_Write+0x68>
 8004420:	fc009c00 	.word	0xfc009c00
 8004424:	01ff0000 	.word	0x01ff0000
 8004428:	fe00e800 	.word	0xfe00e800

0800442c <HAL_I2C_Mem_Read>:
{
 800442c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800442e:	464e      	mov	r6, r9
 8004430:	4645      	mov	r5, r8
 8004432:	46de      	mov	lr, fp
 8004434:	4657      	mov	r7, sl
 8004436:	b5e0      	push	{r5, r6, r7, lr}
 8004438:	b085      	sub	sp, #20
 800443a:	001e      	movs	r6, r3
 800443c:	ab0e      	add	r3, sp, #56	; 0x38
 800443e:	0015      	movs	r5, r2
 8004440:	cb04      	ldmia	r3!, {r2}
 8004442:	0004      	movs	r4, r0
 8004444:	881b      	ldrh	r3, [r3, #0]
 8004446:	468b      	mov	fp, r1
 8004448:	469a      	mov	sl, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800444a:	2341      	movs	r3, #65	; 0x41
 800444c:	4698      	mov	r8, r3
 800444e:	5cc3      	ldrb	r3, [r0, r3]
{
 8004450:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004452:	2b20      	cmp	r3, #32
 8004454:	d125      	bne.n	80044a2 <HAL_I2C_Mem_Read+0x76>
    if ((pData == NULL) || (Size == 0U))
 8004456:	2a00      	cmp	r2, #0
 8004458:	d018      	beq.n	800448c <HAL_I2C_Mem_Read+0x60>
 800445a:	4653      	mov	r3, sl
 800445c:	2b00      	cmp	r3, #0
 800445e:	d015      	beq.n	800448c <HAL_I2C_Mem_Read+0x60>
    __HAL_LOCK(hi2c);
 8004460:	2240      	movs	r2, #64	; 0x40
 8004462:	5c83      	ldrb	r3, [r0, r2]
 8004464:	2b01      	cmp	r3, #1
 8004466:	d01c      	beq.n	80044a2 <HAL_I2C_Mem_Read+0x76>
 8004468:	2301      	movs	r3, #1
 800446a:	5483      	strb	r3, [r0, r2]
    tickstart = HAL_GetTick();
 800446c:	f7ff fbd2 	bl	8003c14 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004470:	2180      	movs	r1, #128	; 0x80
 8004472:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8004474:	0007      	movs	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004476:	2319      	movs	r3, #25
 8004478:	2201      	movs	r2, #1
 800447a:	0020      	movs	r0, r4
 800447c:	0209      	lsls	r1, r1, #8
 800447e:	f7ff fdf7 	bl	8004070 <I2C_WaitOnFlagUntilTimeout>
 8004482:	9003      	str	r0, [sp, #12]
 8004484:	2800      	cmp	r0, #0
 8004486:	d00e      	beq.n	80044a6 <HAL_I2C_Mem_Read+0x7a>
      return HAL_ERROR;
 8004488:	2001      	movs	r0, #1
 800448a:	e003      	b.n	8004494 <HAL_I2C_Mem_Read+0x68>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800448c:	2380      	movs	r3, #128	; 0x80
      return  HAL_ERROR;
 800448e:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	6463      	str	r3, [r4, #68]	; 0x44
}
 8004494:	b005      	add	sp, #20
 8004496:	bcf0      	pop	{r4, r5, r6, r7}
 8004498:	46bb      	mov	fp, r7
 800449a:	46b2      	mov	sl, r6
 800449c:	46a9      	mov	r9, r5
 800449e:	46a0      	mov	r8, r4
 80044a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 80044a2:	2002      	movs	r0, #2
 80044a4:	e7f6      	b.n	8004494 <HAL_I2C_Mem_Read+0x68>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80044a6:	2322      	movs	r3, #34	; 0x22
 80044a8:	4642      	mov	r2, r8
 80044aa:	54a3      	strb	r3, [r4, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80044ac:	2240      	movs	r2, #64	; 0x40
 80044ae:	3320      	adds	r3, #32
 80044b0:	54e2      	strb	r2, [r4, r3]
    hi2c->pBuffPtr  = pData;
 80044b2:	464a      	mov	r2, r9
 80044b4:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80044b6:	4652      	mov	r2, sl
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044b8:	9b03      	ldr	r3, [sp, #12]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80044ba:	4659      	mov	r1, fp
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044bc:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->XferISR   = NULL;
 80044be:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80044c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    hi2c->XferCount = Size;
 80044c2:	8562      	strh	r2, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80044c4:	9300      	str	r3, [sp, #0]
 80044c6:	002a      	movs	r2, r5
 80044c8:	0033      	movs	r3, r6
 80044ca:	0020      	movs	r0, r4
 80044cc:	9701      	str	r7, [sp, #4]
 80044ce:	f7ff fe39 	bl	8004144 <I2C_RequestMemoryRead>
 80044d2:	2800      	cmp	r0, #0
 80044d4:	d169      	bne.n	80045aa <HAL_I2C_Mem_Read+0x17e>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80044d6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80044d8:	2bff      	cmp	r3, #255	; 0xff
 80044da:	d849      	bhi.n	8004570 <HAL_I2C_Mem_Read+0x144>
  MODIFY_REG(hi2c->Instance->CR2,
 80044dc:	465a      	mov	r2, fp
      hi2c->XferSize = hi2c->XferCount;
 80044de:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2,
 80044e0:	6821      	ldr	r1, [r4, #0]
      hi2c->XferSize = hi2c->XferCount;
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 80044e6:	0595      	lsls	r5, r2, #22
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	0daa      	lsrs	r2, r5, #22
 80044ec:	041b      	lsls	r3, r3, #16
 80044ee:	6848      	ldr	r0, [r1, #4]
 80044f0:	4313      	orrs	r3, r2
 80044f2:	4a3b      	ldr	r2, [pc, #236]	; (80045e0 <HAL_I2C_Mem_Read+0x1b4>)
 80044f4:	4002      	ands	r2, r0
 80044f6:	4313      	orrs	r3, r2
 80044f8:	4a3a      	ldr	r2, [pc, #232]	; (80045e4 <HAL_I2C_Mem_Read+0x1b8>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	604b      	str	r3, [r1, #4]
 80044fe:	4e3a      	ldr	r6, [pc, #232]	; (80045e8 <HAL_I2C_Mem_Read+0x1bc>)
 8004500:	0dad      	lsrs	r5, r5, #22
 8004502:	e002      	b.n	800450a <HAL_I2C_Mem_Read+0xde>
    } while (hi2c->XferCount > 0U);
 8004504:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004506:	2b00      	cmp	r3, #0
 8004508:	d054      	beq.n	80045b4 <HAL_I2C_Mem_Read+0x188>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800450a:	2200      	movs	r2, #0
 800450c:	2104      	movs	r1, #4
 800450e:	0020      	movs	r0, r4
 8004510:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004512:	9700      	str	r7, [sp, #0]
 8004514:	f7ff fdac 	bl	8004070 <I2C_WaitOnFlagUntilTimeout>
 8004518:	2800      	cmp	r0, #0
 800451a:	d1b5      	bne.n	8004488 <HAL_I2C_Mem_Read+0x5c>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800451c:	6823      	ldr	r3, [r4, #0]
 800451e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004522:	7013      	strb	r3, [r2, #0]
      hi2c->XferCount--;
 8004524:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8004526:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8004528:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 800452a:	3301      	adds	r3, #1
      hi2c->XferCount--;
 800452c:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 800452e:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8004530:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8004532:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8004534:	3b01      	subs	r3, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004536:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8004538:	b29b      	uxth	r3, r3
 800453a:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800453c:	2a00      	cmp	r2, #0
 800453e:	d0e1      	beq.n	8004504 <HAL_I2C_Mem_Read+0xd8>
 8004540:	2b00      	cmp	r3, #0
 8004542:	d1df      	bne.n	8004504 <HAL_I2C_Mem_Read+0xd8>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004544:	2200      	movs	r2, #0
 8004546:	2180      	movs	r1, #128	; 0x80
 8004548:	0020      	movs	r0, r4
 800454a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800454c:	9700      	str	r7, [sp, #0]
 800454e:	f7ff fd8f 	bl	8004070 <I2C_WaitOnFlagUntilTimeout>
 8004552:	2800      	cmp	r0, #0
 8004554:	d198      	bne.n	8004488 <HAL_I2C_Mem_Read+0x5c>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004556:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004558:	2bff      	cmp	r3, #255	; 0xff
 800455a:	d917      	bls.n	800458c <HAL_I2C_Mem_Read+0x160>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800455c:	23ff      	movs	r3, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2,
 800455e:	6821      	ldr	r1, [r4, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004560:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 8004562:	684b      	ldr	r3, [r1, #4]
 8004564:	4a21      	ldr	r2, [pc, #132]	; (80045ec <HAL_I2C_Mem_Read+0x1c0>)
 8004566:	4033      	ands	r3, r6
 8004568:	432b      	orrs	r3, r5
 800456a:	4313      	orrs	r3, r2
 800456c:	604b      	str	r3, [r1, #4]
}
 800456e:	e7c9      	b.n	8004504 <HAL_I2C_Mem_Read+0xd8>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004570:	23ff      	movs	r3, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2,
 8004572:	6821      	ldr	r1, [r4, #0]
 8004574:	4a1a      	ldr	r2, [pc, #104]	; (80045e0 <HAL_I2C_Mem_Read+0x1b4>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004576:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 8004578:	684b      	ldr	r3, [r1, #4]
 800457a:	4013      	ands	r3, r2
 800457c:	465a      	mov	r2, fp
 800457e:	0595      	lsls	r5, r2, #22
 8004580:	0daa      	lsrs	r2, r5, #22
 8004582:	4313      	orrs	r3, r2
 8004584:	4a1a      	ldr	r2, [pc, #104]	; (80045f0 <HAL_I2C_Mem_Read+0x1c4>)
 8004586:	4313      	orrs	r3, r2
 8004588:	604b      	str	r3, [r1, #4]
}
 800458a:	e7b8      	b.n	80044fe <HAL_I2C_Mem_Read+0xd2>
          hi2c->XferSize = hi2c->XferCount;
 800458c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2,
 800458e:	6821      	ldr	r1, [r4, #0]
          hi2c->XferSize = hi2c->XferCount;
 8004590:	b29b      	uxth	r3, r3
  MODIFY_REG(hi2c->Instance->CR2,
 8004592:	684a      	ldr	r2, [r1, #4]
          hi2c->XferSize = hi2c->XferCount;
 8004594:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 8004596:	b2db      	uxtb	r3, r3
 8004598:	041b      	lsls	r3, r3, #16
 800459a:	4032      	ands	r2, r6
 800459c:	432b      	orrs	r3, r5
 800459e:	4313      	orrs	r3, r2
 80045a0:	2280      	movs	r2, #128	; 0x80
 80045a2:	0492      	lsls	r2, r2, #18
 80045a4:	4313      	orrs	r3, r2
 80045a6:	604b      	str	r3, [r1, #4]
}
 80045a8:	e7ac      	b.n	8004504 <HAL_I2C_Mem_Read+0xd8>
      __HAL_UNLOCK(hi2c);
 80045aa:	2340      	movs	r3, #64	; 0x40
 80045ac:	9a03      	ldr	r2, [sp, #12]
      return HAL_ERROR;
 80045ae:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
 80045b0:	54e2      	strb	r2, [r4, r3]
      return HAL_ERROR;
 80045b2:	e76f      	b.n	8004494 <HAL_I2C_Mem_Read+0x68>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045b4:	003a      	movs	r2, r7
 80045b6:	0020      	movs	r0, r4
 80045b8:	9910      	ldr	r1, [sp, #64]	; 0x40
 80045ba:	f7ff fd25 	bl	8004008 <I2C_WaitOnSTOPFlagUntilTimeout>
 80045be:	2800      	cmp	r0, #0
 80045c0:	d000      	beq.n	80045c4 <HAL_I2C_Mem_Read+0x198>
 80045c2:	e761      	b.n	8004488 <HAL_I2C_Mem_Read+0x5c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045c4:	2120      	movs	r1, #32
 80045c6:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 80045c8:	4d0a      	ldr	r5, [pc, #40]	; (80045f4 <HAL_I2C_Mem_Read+0x1c8>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045ca:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80045cc:	685a      	ldr	r2, [r3, #4]
 80045ce:	402a      	ands	r2, r5
 80045d0:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80045d2:	2341      	movs	r3, #65	; 0x41
 80045d4:	54e1      	strb	r1, [r4, r3]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80045d6:	3301      	adds	r3, #1
 80045d8:	54e0      	strb	r0, [r4, r3]
    __HAL_UNLOCK(hi2c);
 80045da:	3b02      	subs	r3, #2
 80045dc:	54e0      	strb	r0, [r4, r3]
    return HAL_OK;
 80045de:	e759      	b.n	8004494 <HAL_I2C_Mem_Read+0x68>
 80045e0:	fc009800 	.word	0xfc009800
 80045e4:	82002400 	.word	0x82002400
 80045e8:	fc009c00 	.word	0xfc009c00
 80045ec:	01ff0000 	.word	0x01ff0000
 80045f0:	81ff2400 	.word	0x81ff2400
 80045f4:	fe00e800 	.word	0xfe00e800

080045f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80045f8:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045fa:	2541      	movs	r5, #65	; 0x41
 80045fc:	5d43      	ldrb	r3, [r0, r5]
{
 80045fe:	000a      	movs	r2, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004600:	b2de      	uxtb	r6, r3
 8004602:	2b20      	cmp	r3, #32
 8004604:	d11b      	bne.n	800463e <HAL_I2CEx_ConfigAnalogFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004606:	2740      	movs	r7, #64	; 0x40
 8004608:	5dc3      	ldrb	r3, [r0, r7]
 800460a:	2b01      	cmp	r3, #1
 800460c:	d017      	beq.n	800463e <HAL_I2CEx_ConfigAnalogFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800460e:	2101      	movs	r1, #1
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004610:	2324      	movs	r3, #36	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 8004612:	468c      	mov	ip, r1
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004614:	5543      	strb	r3, [r0, r5]
    __HAL_I2C_DISABLE(hi2c);
 8004616:	6803      	ldr	r3, [r0, #0]
 8004618:	681c      	ldr	r4, [r3, #0]
 800461a:	438c      	bics	r4, r1
 800461c:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800461e:	681c      	ldr	r4, [r3, #0]
 8004620:	4908      	ldr	r1, [pc, #32]	; (8004644 <HAL_I2CEx_ConfigAnalogFilter+0x4c>)
 8004622:	400c      	ands	r4, r1
 8004624:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004626:	6819      	ldr	r1, [r3, #0]
 8004628:	4311      	orrs	r1, r2
 800462a:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800462c:	4661      	mov	r1, ip
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	430a      	orrs	r2, r1
 8004632:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004634:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8004636:	5546      	strb	r6, [r0, r5]
    __HAL_UNLOCK(hi2c);
 8004638:	55c3      	strb	r3, [r0, r7]

    return HAL_OK;
 800463a:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 800463c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 800463e:	2002      	movs	r0, #2
 8004640:	e7fc      	b.n	800463c <HAL_I2CEx_ConfigAnalogFilter+0x44>
 8004642:	46c0      	nop			; (mov r8, r8)
 8004644:	ffffefff 	.word	0xffffefff

08004648 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004648:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800464a:	2541      	movs	r5, #65	; 0x41
 800464c:	5d43      	ldrb	r3, [r0, r5]
 800464e:	b2de      	uxtb	r6, r3
 8004650:	2b20      	cmp	r3, #32
 8004652:	d11a      	bne.n	800468a <HAL_I2CEx_ConfigDigitalFilter+0x42>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004654:	2740      	movs	r7, #64	; 0x40
 8004656:	5dc3      	ldrb	r3, [r0, r7]
 8004658:	2b01      	cmp	r3, #1
 800465a:	d016      	beq.n	800468a <HAL_I2CEx_ConfigDigitalFilter+0x42>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800465c:	2324      	movs	r3, #36	; 0x24
 800465e:	5543      	strb	r3, [r0, r5]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004660:	3b23      	subs	r3, #35	; 0x23
 8004662:	469c      	mov	ip, r3
 8004664:	6804      	ldr	r4, [r0, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004666:	0209      	lsls	r1, r1, #8
    __HAL_I2C_DISABLE(hi2c);
 8004668:	6822      	ldr	r2, [r4, #0]
 800466a:	439a      	bics	r2, r3
 800466c:	6022      	str	r2, [r4, #0]
    tmpreg = hi2c->Instance->CR1;
 800466e:	6822      	ldr	r2, [r4, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8004670:	4b07      	ldr	r3, [pc, #28]	; (8004690 <HAL_I2CEx_ConfigDigitalFilter+0x48>)
 8004672:	401a      	ands	r2, r3
    tmpreg |= DigitalFilter << 8U;
 8004674:	4311      	orrs	r1, r2

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;

    __HAL_I2C_ENABLE(hi2c);
 8004676:	4662      	mov	r2, ip
    hi2c->Instance->CR1 = tmpreg;
 8004678:	6021      	str	r1, [r4, #0]
    __HAL_I2C_ENABLE(hi2c);
 800467a:	6823      	ldr	r3, [r4, #0]
 800467c:	4313      	orrs	r3, r2
 800467e:	6023      	str	r3, [r4, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004680:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8004682:	5546      	strb	r6, [r0, r5]
    __HAL_UNLOCK(hi2c);
 8004684:	55c3      	strb	r3, [r0, r7]

    return HAL_OK;
 8004686:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8004688:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 800468a:	2002      	movs	r0, #2
 800468c:	e7fc      	b.n	8004688 <HAL_I2CEx_ConfigDigitalFilter+0x40>
 800468e:	46c0      	nop			; (mov r8, r8)
 8004690:	fffff0ff 	.word	0xfffff0ff

08004694 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8004694:	b570      	push	{r4, r5, r6, lr}
 8004696:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8004698:	d01e      	beq.n	80046d8 <HAL_IWDG_Init+0x44>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800469a:	6803      	ldr	r3, [r0, #0]
 800469c:	4a11      	ldr	r2, [pc, #68]	; (80046e4 <HAL_IWDG_Init+0x50>)
 800469e:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80046a0:	4a11      	ldr	r2, [pc, #68]	; (80046e8 <HAL_IWDG_Init+0x54>)
 80046a2:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80046a4:	6842      	ldr	r2, [r0, #4]
 80046a6:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80046a8:	6882      	ldr	r2, [r0, #8]
 80046aa:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80046ac:	f7ff fab2 	bl	8003c14 <HAL_GetTick>
 80046b0:	0005      	movs	r5, r0

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 80046b2:	e004      	b.n	80046be <HAL_IWDG_Init+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80046b4:	f7ff faae 	bl	8003c14 <HAL_GetTick>
 80046b8:	1b40      	subs	r0, r0, r5
 80046ba:	2826      	cmp	r0, #38	; 0x26
 80046bc:	d80a      	bhi.n	80046d4 <HAL_IWDG_Init+0x40>
  while (hiwdg->Instance->SR != 0x00u)
 80046be:	6823      	ldr	r3, [r4, #0]
 80046c0:	68da      	ldr	r2, [r3, #12]
 80046c2:	2a00      	cmp	r2, #0
 80046c4:	d1f6      	bne.n	80046b4 <HAL_IWDG_Init+0x20>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 80046c6:	6919      	ldr	r1, [r3, #16]
 80046c8:	68e2      	ldr	r2, [r4, #12]
 80046ca:	4291      	cmp	r1, r2
 80046cc:	d006      	beq.n	80046dc <HAL_IWDG_Init+0x48>
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
  }

  /* Return function status */
  return HAL_OK;
 80046ce:	2000      	movs	r0, #0
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 80046d0:	611a      	str	r2, [r3, #16]
}
 80046d2:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_TIMEOUT;
 80046d4:	2003      	movs	r0, #3
 80046d6:	e7fc      	b.n	80046d2 <HAL_IWDG_Init+0x3e>
    return HAL_ERROR;
 80046d8:	2001      	movs	r0, #1
 80046da:	e7fa      	b.n	80046d2 <HAL_IWDG_Init+0x3e>
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80046dc:	4a03      	ldr	r2, [pc, #12]	; (80046ec <HAL_IWDG_Init+0x58>)
  return HAL_OK;
 80046de:	2000      	movs	r0, #0
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80046e0:	601a      	str	r2, [r3, #0]
 80046e2:	e7f6      	b.n	80046d2 <HAL_IWDG_Init+0x3e>
 80046e4:	0000cccc 	.word	0x0000cccc
 80046e8:	00005555 	.word	0x00005555
 80046ec:	0000aaaa 	.word	0x0000aaaa

080046f0 <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80046f0:	6803      	ldr	r3, [r0, #0]
 80046f2:	4a02      	ldr	r2, [pc, #8]	; (80046fc <HAL_IWDG_Refresh+0xc>)

  /* Return function status */
  return HAL_OK;
}
 80046f4:	2000      	movs	r0, #0
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80046f6:	601a      	str	r2, [r3, #0]
}
 80046f8:	4770      	bx	lr
 80046fa:	46c0      	nop			; (mov r8, r8)
 80046fc:	0000aaaa 	.word	0x0000aaaa

08004700 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004700:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004702:	46ce      	mov	lr, r9
 8004704:	4647      	mov	r7, r8
 8004706:	b580      	push	{r7, lr}
 8004708:	0004      	movs	r4, r0
 800470a:	b083      	sub	sp, #12
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800470c:	2800      	cmp	r0, #0
 800470e:	d100      	bne.n	8004712 <HAL_RCC_OscConfig+0x12>
 8004710:	e118      	b.n	8004944 <HAL_RCC_OscConfig+0x244>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004712:	6803      	ldr	r3, [r0, #0]
 8004714:	07da      	lsls	r2, r3, #31
 8004716:	d52f      	bpl.n	8004778 <HAL_RCC_OscConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004718:	210c      	movs	r1, #12
 800471a:	48c2      	ldr	r0, [pc, #776]	; (8004a24 <HAL_RCC_OscConfig+0x324>)
 800471c:	6842      	ldr	r2, [r0, #4]
 800471e:	400a      	ands	r2, r1
 8004720:	2a04      	cmp	r2, #4
 8004722:	d100      	bne.n	8004726 <HAL_RCC_OscConfig+0x26>
 8004724:	e14c      	b.n	80049c0 <HAL_RCC_OscConfig+0x2c0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004726:	6842      	ldr	r2, [r0, #4]
 8004728:	4011      	ands	r1, r2
 800472a:	2908      	cmp	r1, #8
 800472c:	d100      	bne.n	8004730 <HAL_RCC_OscConfig+0x30>
 800472e:	e13e      	b.n	80049ae <HAL_RCC_OscConfig+0x2ae>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004730:	6863      	ldr	r3, [r4, #4]
 8004732:	2b01      	cmp	r3, #1
 8004734:	d100      	bne.n	8004738 <HAL_RCC_OscConfig+0x38>
 8004736:	e14d      	b.n	80049d4 <HAL_RCC_OscConfig+0x2d4>
 8004738:	2b00      	cmp	r3, #0
 800473a:	d100      	bne.n	800473e <HAL_RCC_OscConfig+0x3e>
 800473c:	e163      	b.n	8004a06 <HAL_RCC_OscConfig+0x306>
 800473e:	2b05      	cmp	r3, #5
 8004740:	d100      	bne.n	8004744 <HAL_RCC_OscConfig+0x44>
 8004742:	e270      	b.n	8004c26 <HAL_RCC_OscConfig+0x526>
 8004744:	4bb7      	ldr	r3, [pc, #732]	; (8004a24 <HAL_RCC_OscConfig+0x324>)
 8004746:	49b8      	ldr	r1, [pc, #736]	; (8004a28 <HAL_RCC_OscConfig+0x328>)
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	400a      	ands	r2, r1
 800474c:	601a      	str	r2, [r3, #0]
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	49b6      	ldr	r1, [pc, #728]	; (8004a2c <HAL_RCC_OscConfig+0x32c>)
 8004752:	400a      	ands	r2, r1
 8004754:	601a      	str	r2, [r3, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004756:	f7ff fa5d 	bl	8003c14 <HAL_GetTick>
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800475a:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 800475c:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800475e:	4fb1      	ldr	r7, [pc, #708]	; (8004a24 <HAL_RCC_OscConfig+0x324>)
 8004760:	02b6      	lsls	r6, r6, #10
 8004762:	e005      	b.n	8004770 <HAL_RCC_OscConfig+0x70>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004764:	f7ff fa56 	bl	8003c14 <HAL_GetTick>
 8004768:	1b40      	subs	r0, r0, r5
 800476a:	2864      	cmp	r0, #100	; 0x64
 800476c:	d900      	bls.n	8004770 <HAL_RCC_OscConfig+0x70>
 800476e:	e148      	b.n	8004a02 <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	4233      	tst	r3, r6
 8004774:	d0f6      	beq.n	8004764 <HAL_RCC_OscConfig+0x64>
 8004776:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004778:	079a      	lsls	r2, r3, #30
 800477a:	d529      	bpl.n	80047d0 <HAL_RCC_OscConfig+0xd0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800477c:	220c      	movs	r2, #12
 800477e:	49a9      	ldr	r1, [pc, #676]	; (8004a24 <HAL_RCC_OscConfig+0x324>)
 8004780:	6848      	ldr	r0, [r1, #4]
 8004782:	4202      	tst	r2, r0
 8004784:	d100      	bne.n	8004788 <HAL_RCC_OscConfig+0x88>
 8004786:	e0ec      	b.n	8004962 <HAL_RCC_OscConfig+0x262>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004788:	6848      	ldr	r0, [r1, #4]
 800478a:	4002      	ands	r2, r0
 800478c:	2a08      	cmp	r2, #8
 800478e:	d100      	bne.n	8004792 <HAL_RCC_OscConfig+0x92>
 8004790:	e0de      	b.n	8004950 <HAL_RCC_OscConfig+0x250>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004792:	68e3      	ldr	r3, [r4, #12]
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004794:	4da3      	ldr	r5, [pc, #652]	; (8004a24 <HAL_RCC_OscConfig+0x324>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004796:	2b00      	cmp	r3, #0
 8004798:	d100      	bne.n	800479c <HAL_RCC_OscConfig+0x9c>
 800479a:	e175      	b.n	8004a88 <HAL_RCC_OscConfig+0x388>
        __HAL_RCC_HSI_ENABLE();
 800479c:	2201      	movs	r2, #1
 800479e:	682b      	ldr	r3, [r5, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047a0:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 80047a2:	4313      	orrs	r3, r2
 80047a4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80047a6:	f7ff fa35 	bl	8003c14 <HAL_GetTick>
 80047aa:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047ac:	e005      	b.n	80047ba <HAL_RCC_OscConfig+0xba>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047ae:	f7ff fa31 	bl	8003c14 <HAL_GetTick>
 80047b2:	1b80      	subs	r0, r0, r6
 80047b4:	2802      	cmp	r0, #2
 80047b6:	d900      	bls.n	80047ba <HAL_RCC_OscConfig+0xba>
 80047b8:	e123      	b.n	8004a02 <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047ba:	682b      	ldr	r3, [r5, #0]
 80047bc:	421f      	tst	r7, r3
 80047be:	d0f6      	beq.n	80047ae <HAL_RCC_OscConfig+0xae>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047c0:	21f8      	movs	r1, #248	; 0xf8
 80047c2:	682a      	ldr	r2, [r5, #0]
 80047c4:	6923      	ldr	r3, [r4, #16]
 80047c6:	438a      	bics	r2, r1
 80047c8:	00db      	lsls	r3, r3, #3
 80047ca:	4313      	orrs	r3, r2
 80047cc:	602b      	str	r3, [r5, #0]
 80047ce:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047d0:	071a      	lsls	r2, r3, #28
 80047d2:	d42d      	bmi.n	8004830 <HAL_RCC_OscConfig+0x130>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047d4:	075a      	lsls	r2, r3, #29
 80047d6:	d545      	bpl.n	8004864 <HAL_RCC_OscConfig+0x164>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047d8:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80047da:	2000      	movs	r0, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047dc:	4b91      	ldr	r3, [pc, #580]	; (8004a24 <HAL_RCC_OscConfig+0x324>)
 80047de:	0552      	lsls	r2, r2, #21
 80047e0:	69d9      	ldr	r1, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 80047e2:	4681      	mov	r9, r0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047e4:	4211      	tst	r1, r2
 80047e6:	d108      	bne.n	80047fa <HAL_RCC_OscConfig+0xfa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047e8:	69d9      	ldr	r1, [r3, #28]
 80047ea:	4311      	orrs	r1, r2
 80047ec:	61d9      	str	r1, [r3, #28]
 80047ee:	69db      	ldr	r3, [r3, #28]
 80047f0:	401a      	ands	r2, r3
 80047f2:	9201      	str	r2, [sp, #4]
 80047f4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80047f6:	2301      	movs	r3, #1
 80047f8:	4699      	mov	r9, r3
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047fa:	2780      	movs	r7, #128	; 0x80
 80047fc:	4e8c      	ldr	r6, [pc, #560]	; (8004a30 <HAL_RCC_OscConfig+0x330>)
 80047fe:	007f      	lsls	r7, r7, #1
 8004800:	6833      	ldr	r3, [r6, #0]
 8004802:	423b      	tst	r3, r7
 8004804:	d100      	bne.n	8004808 <HAL_RCC_OscConfig+0x108>
 8004806:	e0ec      	b.n	80049e2 <HAL_RCC_OscConfig+0x2e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004808:	68a3      	ldr	r3, [r4, #8]
 800480a:	2b01      	cmp	r3, #1
 800480c:	d100      	bne.n	8004810 <HAL_RCC_OscConfig+0x110>
 800480e:	e14e      	b.n	8004aae <HAL_RCC_OscConfig+0x3ae>
 8004810:	2b00      	cmp	r3, #0
 8004812:	d100      	bne.n	8004816 <HAL_RCC_OscConfig+0x116>
 8004814:	e11a      	b.n	8004a4c <HAL_RCC_OscConfig+0x34c>
 8004816:	2b05      	cmp	r3, #5
 8004818:	d100      	bne.n	800481c <HAL_RCC_OscConfig+0x11c>
 800481a:	e1db      	b.n	8004bd4 <HAL_RCC_OscConfig+0x4d4>
 800481c:	2101      	movs	r1, #1
 800481e:	4b81      	ldr	r3, [pc, #516]	; (8004a24 <HAL_RCC_OscConfig+0x324>)
 8004820:	6a1a      	ldr	r2, [r3, #32]
 8004822:	438a      	bics	r2, r1
 8004824:	621a      	str	r2, [r3, #32]
 8004826:	6a1a      	ldr	r2, [r3, #32]
 8004828:	3103      	adds	r1, #3
 800482a:	438a      	bics	r2, r1
 800482c:	621a      	str	r2, [r3, #32]
 800482e:	e142      	b.n	8004ab6 <HAL_RCC_OscConfig+0x3b6>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004830:	69e3      	ldr	r3, [r4, #28]
      __HAL_RCC_LSI_ENABLE();
 8004832:	4d7c      	ldr	r5, [pc, #496]	; (8004a24 <HAL_RCC_OscConfig+0x324>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004834:	2b00      	cmp	r3, #0
 8004836:	d100      	bne.n	800483a <HAL_RCC_OscConfig+0x13a>
 8004838:	e0a6      	b.n	8004988 <HAL_RCC_OscConfig+0x288>
      __HAL_RCC_LSI_ENABLE();
 800483a:	2201      	movs	r2, #1
 800483c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800483e:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 8004840:	4313      	orrs	r3, r2
 8004842:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8004844:	f7ff f9e6 	bl	8003c14 <HAL_GetTick>
 8004848:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800484a:	e005      	b.n	8004858 <HAL_RCC_OscConfig+0x158>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800484c:	f7ff f9e2 	bl	8003c14 <HAL_GetTick>
 8004850:	1b80      	subs	r0, r0, r6
 8004852:	2802      	cmp	r0, #2
 8004854:	d900      	bls.n	8004858 <HAL_RCC_OscConfig+0x158>
 8004856:	e0d4      	b.n	8004a02 <HAL_RCC_OscConfig+0x302>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004858:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800485a:	421f      	tst	r7, r3
 800485c:	d0f6      	beq.n	800484c <HAL_RCC_OscConfig+0x14c>
 800485e:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004860:	075a      	lsls	r2, r3, #29
 8004862:	d4b9      	bmi.n	80047d8 <HAL_RCC_OscConfig+0xd8>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004864:	06da      	lsls	r2, r3, #27
 8004866:	d512      	bpl.n	800488e <HAL_RCC_OscConfig+0x18e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004868:	6962      	ldr	r2, [r4, #20]
 800486a:	2a01      	cmp	r2, #1
 800486c:	d100      	bne.n	8004870 <HAL_RCC_OscConfig+0x170>
 800486e:	e1bb      	b.n	8004be8 <HAL_RCC_OscConfig+0x4e8>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004870:	3205      	adds	r2, #5
 8004872:	d000      	beq.n	8004876 <HAL_RCC_OscConfig+0x176>
 8004874:	e131      	b.n	8004ada <HAL_RCC_OscConfig+0x3da>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004876:	2004      	movs	r0, #4

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004878:	25f8      	movs	r5, #248	; 0xf8
      __HAL_RCC_HSI14ADC_ENABLE();
 800487a:	496a      	ldr	r1, [pc, #424]	; (8004a24 <HAL_RCC_OscConfig+0x324>)
 800487c:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 800487e:	4382      	bics	r2, r0
 8004880:	634a      	str	r2, [r1, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004882:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8004884:	69a2      	ldr	r2, [r4, #24]
 8004886:	43a8      	bics	r0, r5
 8004888:	00d2      	lsls	r2, r2, #3
 800488a:	4302      	orrs	r2, r0
 800488c:	634a      	str	r2, [r1, #52]	; 0x34
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800488e:	069b      	lsls	r3, r3, #26
 8004890:	d522      	bpl.n	80048d8 <HAL_RCC_OscConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004892:	220c      	movs	r2, #12
 8004894:	4963      	ldr	r1, [pc, #396]	; (8004a24 <HAL_RCC_OscConfig+0x324>)
 8004896:	684b      	ldr	r3, [r1, #4]
 8004898:	4013      	ands	r3, r2
 800489a:	2b0c      	cmp	r3, #12
 800489c:	d100      	bne.n	80048a0 <HAL_RCC_OscConfig+0x1a0>
 800489e:	e13c      	b.n	8004b1a <HAL_RCC_OscConfig+0x41a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80048a0:	684b      	ldr	r3, [r1, #4]
 80048a2:	401a      	ands	r2, r3
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80048a4:	2a08      	cmp	r2, #8
 80048a6:	d100      	bne.n	80048aa <HAL_RCC_OscConfig+0x1aa>
 80048a8:	e130      	b.n	8004b0c <HAL_RCC_OscConfig+0x40c>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80048aa:	6a23      	ldr	r3, [r4, #32]
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80048ac:	4d5d      	ldr	r5, [pc, #372]	; (8004a24 <HAL_RCC_OscConfig+0x324>)
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d100      	bne.n	80048b4 <HAL_RCC_OscConfig+0x1b4>
 80048b2:	e13c      	b.n	8004b2e <HAL_RCC_OscConfig+0x42e>
        __HAL_RCC_HSI48_ENABLE();
 80048b4:	2680      	movs	r6, #128	; 0x80
 80048b6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80048b8:	0276      	lsls	r6, r6, #9
 80048ba:	4333      	orrs	r3, r6
 80048bc:	636b      	str	r3, [r5, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048be:	f7ff f9a9 	bl	8003c14 <HAL_GetTick>
 80048c2:	0007      	movs	r7, r0
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80048c4:	e005      	b.n	80048d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048c6:	f7ff f9a5 	bl	8003c14 <HAL_GetTick>
 80048ca:	1bc0      	subs	r0, r0, r7
 80048cc:	2802      	cmp	r0, #2
 80048ce:	d900      	bls.n	80048d2 <HAL_RCC_OscConfig+0x1d2>
 80048d0:	e097      	b.n	8004a02 <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80048d2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80048d4:	4233      	tst	r3, r6
 80048d6:	d0f6      	beq.n	80048c6 <HAL_RCC_OscConfig+0x1c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d01b      	beq.n	8004916 <HAL_RCC_OscConfig+0x216>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048de:	220c      	movs	r2, #12
 80048e0:	4e50      	ldr	r6, [pc, #320]	; (8004a24 <HAL_RCC_OscConfig+0x324>)
 80048e2:	6871      	ldr	r1, [r6, #4]
 80048e4:	400a      	ands	r2, r1
 80048e6:	2a08      	cmp	r2, #8
 80048e8:	d017      	beq.n	800491a <HAL_RCC_OscConfig+0x21a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	d100      	bne.n	80048f0 <HAL_RCC_OscConfig+0x1f0>
 80048ee:	e139      	b.n	8004b64 <HAL_RCC_OscConfig+0x464>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048f0:	6833      	ldr	r3, [r6, #0]
 80048f2:	4a50      	ldr	r2, [pc, #320]	; (8004a34 <HAL_RCC_OscConfig+0x334>)
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048f4:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80048f6:	4013      	ands	r3, r2
 80048f8:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80048fa:	f7ff f98b 	bl	8003c14 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048fe:	04ad      	lsls	r5, r5, #18
        tickstart = HAL_GetTick();
 8004900:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004902:	e005      	b.n	8004910 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004904:	f7ff f986 	bl	8003c14 <HAL_GetTick>
 8004908:	1b00      	subs	r0, r0, r4
 800490a:	2802      	cmp	r0, #2
 800490c:	d900      	bls.n	8004910 <HAL_RCC_OscConfig+0x210>
 800490e:	e078      	b.n	8004a02 <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004910:	6833      	ldr	r3, [r6, #0]
 8004912:	422b      	tst	r3, r5
 8004914:	d1f6      	bne.n	8004904 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }

  return HAL_OK;
 8004916:	2000      	movs	r0, #0
 8004918:	e015      	b.n	8004946 <HAL_RCC_OscConfig+0x246>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800491a:	2b01      	cmp	r3, #1
 800491c:	d012      	beq.n	8004944 <HAL_RCC_OscConfig+0x244>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800491e:	23c0      	movs	r3, #192	; 0xc0
        pll_config  = RCC->CFGR;
 8004920:	6872      	ldr	r2, [r6, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004922:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004924:	025b      	lsls	r3, r3, #9
        pll_config2 = RCC->CFGR2;
 8004926:	6af1      	ldr	r1, [r6, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004928:	4013      	ands	r3, r2
 800492a:	4283      	cmp	r3, r0
 800492c:	d10a      	bne.n	8004944 <HAL_RCC_OscConfig+0x244>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800492e:	230f      	movs	r3, #15
 8004930:	400b      	ands	r3, r1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004932:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004934:	428b      	cmp	r3, r1
 8004936:	d105      	bne.n	8004944 <HAL_RCC_OscConfig+0x244>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004938:	23f0      	movs	r3, #240	; 0xf0
 800493a:	039b      	lsls	r3, r3, #14
 800493c:	401a      	ands	r2, r3
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800493e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004940:	429a      	cmp	r2, r3
 8004942:	d0e8      	beq.n	8004916 <HAL_RCC_OscConfig+0x216>
    return HAL_ERROR;
 8004944:	2001      	movs	r0, #1
}
 8004946:	b003      	add	sp, #12
 8004948:	bcc0      	pop	{r6, r7}
 800494a:	46b9      	mov	r9, r7
 800494c:	46b0      	mov	r8, r6
 800494e:	bdf0      	pop	{r4, r5, r6, r7, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004950:	684a      	ldr	r2, [r1, #4]
 8004952:	21c0      	movs	r1, #192	; 0xc0
 8004954:	0249      	lsls	r1, r1, #9
 8004956:	400a      	ands	r2, r1
 8004958:	2180      	movs	r1, #128	; 0x80
 800495a:	0209      	lsls	r1, r1, #8
 800495c:	428a      	cmp	r2, r1
 800495e:	d000      	beq.n	8004962 <HAL_RCC_OscConfig+0x262>
 8004960:	e717      	b.n	8004792 <HAL_RCC_OscConfig+0x92>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004962:	4a30      	ldr	r2, [pc, #192]	; (8004a24 <HAL_RCC_OscConfig+0x324>)
 8004964:	6812      	ldr	r2, [r2, #0]
 8004966:	0792      	lsls	r2, r2, #30
 8004968:	d502      	bpl.n	8004970 <HAL_RCC_OscConfig+0x270>
 800496a:	68e2      	ldr	r2, [r4, #12]
 800496c:	2a01      	cmp	r2, #1
 800496e:	d1e9      	bne.n	8004944 <HAL_RCC_OscConfig+0x244>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004970:	25f8      	movs	r5, #248	; 0xf8
 8004972:	482c      	ldr	r0, [pc, #176]	; (8004a24 <HAL_RCC_OscConfig+0x324>)
 8004974:	6922      	ldr	r2, [r4, #16]
 8004976:	6801      	ldr	r1, [r0, #0]
 8004978:	00d2      	lsls	r2, r2, #3
 800497a:	43a9      	bics	r1, r5
 800497c:	430a      	orrs	r2, r1
 800497e:	6002      	str	r2, [r0, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004980:	071a      	lsls	r2, r3, #28
 8004982:	d400      	bmi.n	8004986 <HAL_RCC_OscConfig+0x286>
 8004984:	e726      	b.n	80047d4 <HAL_RCC_OscConfig+0xd4>
 8004986:	e753      	b.n	8004830 <HAL_RCC_OscConfig+0x130>
      __HAL_RCC_LSI_DISABLE();
 8004988:	2201      	movs	r2, #1
 800498a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800498c:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 800498e:	4393      	bics	r3, r2
 8004990:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8004992:	f7ff f93f 	bl	8003c14 <HAL_GetTick>
 8004996:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004998:	e004      	b.n	80049a4 <HAL_RCC_OscConfig+0x2a4>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800499a:	f7ff f93b 	bl	8003c14 <HAL_GetTick>
 800499e:	1b80      	subs	r0, r0, r6
 80049a0:	2802      	cmp	r0, #2
 80049a2:	d82e      	bhi.n	8004a02 <HAL_RCC_OscConfig+0x302>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049a4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80049a6:	421f      	tst	r7, r3
 80049a8:	d1f7      	bne.n	800499a <HAL_RCC_OscConfig+0x29a>
 80049aa:	6823      	ldr	r3, [r4, #0]
 80049ac:	e758      	b.n	8004860 <HAL_RCC_OscConfig+0x160>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80049ae:	21c0      	movs	r1, #192	; 0xc0
 80049b0:	6842      	ldr	r2, [r0, #4]
 80049b2:	0249      	lsls	r1, r1, #9
 80049b4:	400a      	ands	r2, r1
 80049b6:	2180      	movs	r1, #128	; 0x80
 80049b8:	0249      	lsls	r1, r1, #9
 80049ba:	428a      	cmp	r2, r1
 80049bc:	d000      	beq.n	80049c0 <HAL_RCC_OscConfig+0x2c0>
 80049be:	e6b7      	b.n	8004730 <HAL_RCC_OscConfig+0x30>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049c0:	4a18      	ldr	r2, [pc, #96]	; (8004a24 <HAL_RCC_OscConfig+0x324>)
 80049c2:	6812      	ldr	r2, [r2, #0]
 80049c4:	0392      	lsls	r2, r2, #14
 80049c6:	d400      	bmi.n	80049ca <HAL_RCC_OscConfig+0x2ca>
 80049c8:	e6d6      	b.n	8004778 <HAL_RCC_OscConfig+0x78>
 80049ca:	6862      	ldr	r2, [r4, #4]
 80049cc:	2a00      	cmp	r2, #0
 80049ce:	d000      	beq.n	80049d2 <HAL_RCC_OscConfig+0x2d2>
 80049d0:	e6d2      	b.n	8004778 <HAL_RCC_OscConfig+0x78>
 80049d2:	e7b7      	b.n	8004944 <HAL_RCC_OscConfig+0x244>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049d4:	2380      	movs	r3, #128	; 0x80
 80049d6:	4a13      	ldr	r2, [pc, #76]	; (8004a24 <HAL_RCC_OscConfig+0x324>)
 80049d8:	025b      	lsls	r3, r3, #9
 80049da:	6811      	ldr	r1, [r2, #0]
 80049dc:	430b      	orrs	r3, r1
 80049de:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049e0:	e6b9      	b.n	8004756 <HAL_RCC_OscConfig+0x56>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049e2:	6833      	ldr	r3, [r6, #0]
 80049e4:	433b      	orrs	r3, r7
 80049e6:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80049e8:	f7ff f914 	bl	8003c14 <HAL_GetTick>
 80049ec:	0005      	movs	r5, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049ee:	e004      	b.n	80049fa <HAL_RCC_OscConfig+0x2fa>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049f0:	f7ff f910 	bl	8003c14 <HAL_GetTick>
 80049f4:	1b40      	subs	r0, r0, r5
 80049f6:	2864      	cmp	r0, #100	; 0x64
 80049f8:	d803      	bhi.n	8004a02 <HAL_RCC_OscConfig+0x302>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049fa:	6833      	ldr	r3, [r6, #0]
 80049fc:	423b      	tst	r3, r7
 80049fe:	d0f7      	beq.n	80049f0 <HAL_RCC_OscConfig+0x2f0>
 8004a00:	e702      	b.n	8004808 <HAL_RCC_OscConfig+0x108>
            return HAL_TIMEOUT;
 8004a02:	2003      	movs	r0, #3
 8004a04:	e79f      	b.n	8004946 <HAL_RCC_OscConfig+0x246>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a06:	4d07      	ldr	r5, [pc, #28]	; (8004a24 <HAL_RCC_OscConfig+0x324>)
 8004a08:	4a07      	ldr	r2, [pc, #28]	; (8004a28 <HAL_RCC_OscConfig+0x328>)
 8004a0a:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a0c:	2780      	movs	r7, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a0e:	4013      	ands	r3, r2
 8004a10:	602b      	str	r3, [r5, #0]
 8004a12:	682b      	ldr	r3, [r5, #0]
 8004a14:	4a05      	ldr	r2, [pc, #20]	; (8004a2c <HAL_RCC_OscConfig+0x32c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a16:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a18:	4013      	ands	r3, r2
 8004a1a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004a1c:	f7ff f8fa 	bl	8003c14 <HAL_GetTick>
 8004a20:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a22:	e00e      	b.n	8004a42 <HAL_RCC_OscConfig+0x342>
 8004a24:	40021000 	.word	0x40021000
 8004a28:	fffeffff 	.word	0xfffeffff
 8004a2c:	fffbffff 	.word	0xfffbffff
 8004a30:	40007000 	.word	0x40007000
 8004a34:	feffffff 	.word	0xfeffffff
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a38:	f7ff f8ec 	bl	8003c14 <HAL_GetTick>
 8004a3c:	1b80      	subs	r0, r0, r6
 8004a3e:	2864      	cmp	r0, #100	; 0x64
 8004a40:	d8df      	bhi.n	8004a02 <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a42:	682b      	ldr	r3, [r5, #0]
 8004a44:	423b      	tst	r3, r7
 8004a46:	d1f7      	bne.n	8004a38 <HAL_RCC_OscConfig+0x338>
 8004a48:	6823      	ldr	r3, [r4, #0]
 8004a4a:	e695      	b.n	8004778 <HAL_RCC_OscConfig+0x78>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	4e7c      	ldr	r6, [pc, #496]	; (8004c40 <HAL_RCC_OscConfig+0x540>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a50:	4d7c      	ldr	r5, [pc, #496]	; (8004c44 <HAL_RCC_OscConfig+0x544>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a52:	6a33      	ldr	r3, [r6, #32]
 8004a54:	4393      	bics	r3, r2
 8004a56:	6233      	str	r3, [r6, #32]
 8004a58:	6a33      	ldr	r3, [r6, #32]
 8004a5a:	3203      	adds	r2, #3
 8004a5c:	4393      	bics	r3, r2
 8004a5e:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 8004a60:	f7ff f8d8 	bl	8003c14 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a64:	2302      	movs	r3, #2
      tickstart = HAL_GetTick();
 8004a66:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a68:	4698      	mov	r8, r3
 8004a6a:	e004      	b.n	8004a76 <HAL_RCC_OscConfig+0x376>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a6c:	f7ff f8d2 	bl	8003c14 <HAL_GetTick>
 8004a70:	1bc0      	subs	r0, r0, r7
 8004a72:	42a8      	cmp	r0, r5
 8004a74:	d8c5      	bhi.n	8004a02 <HAL_RCC_OscConfig+0x302>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a76:	4642      	mov	r2, r8
 8004a78:	6a33      	ldr	r3, [r6, #32]
 8004a7a:	421a      	tst	r2, r3
 8004a7c:	d1f6      	bne.n	8004a6c <HAL_RCC_OscConfig+0x36c>
    if(pwrclkchanged == SET)
 8004a7e:	464b      	mov	r3, r9
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d068      	beq.n	8004b56 <HAL_RCC_OscConfig+0x456>
 8004a84:	6823      	ldr	r3, [r4, #0]
 8004a86:	e6ed      	b.n	8004864 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 8004a88:	2201      	movs	r2, #1
 8004a8a:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a8c:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 8004a8e:	4393      	bics	r3, r2
 8004a90:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004a92:	f7ff f8bf 	bl	8003c14 <HAL_GetTick>
 8004a96:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a98:	e004      	b.n	8004aa4 <HAL_RCC_OscConfig+0x3a4>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a9a:	f7ff f8bb 	bl	8003c14 <HAL_GetTick>
 8004a9e:	1b80      	subs	r0, r0, r6
 8004aa0:	2802      	cmp	r0, #2
 8004aa2:	d8ae      	bhi.n	8004a02 <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004aa4:	682b      	ldr	r3, [r5, #0]
 8004aa6:	421f      	tst	r7, r3
 8004aa8:	d1f7      	bne.n	8004a9a <HAL_RCC_OscConfig+0x39a>
 8004aaa:	6823      	ldr	r3, [r4, #0]
 8004aac:	e690      	b.n	80047d0 <HAL_RCC_OscConfig+0xd0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004aae:	4964      	ldr	r1, [pc, #400]	; (8004c40 <HAL_RCC_OscConfig+0x540>)
 8004ab0:	6a0a      	ldr	r2, [r1, #32]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 8004ab6:	f7ff f8ad 	bl	8003c14 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004aba:	4b61      	ldr	r3, [pc, #388]	; (8004c40 <HAL_RCC_OscConfig+0x540>)
      tickstart = HAL_GetTick();
 8004abc:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004abe:	4698      	mov	r8, r3
 8004ac0:	2702      	movs	r7, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ac2:	4d60      	ldr	r5, [pc, #384]	; (8004c44 <HAL_RCC_OscConfig+0x544>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ac4:	e004      	b.n	8004ad0 <HAL_RCC_OscConfig+0x3d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ac6:	f7ff f8a5 	bl	8003c14 <HAL_GetTick>
 8004aca:	1b80      	subs	r0, r0, r6
 8004acc:	42a8      	cmp	r0, r5
 8004ace:	d898      	bhi.n	8004a02 <HAL_RCC_OscConfig+0x302>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ad0:	4643      	mov	r3, r8
 8004ad2:	6a1b      	ldr	r3, [r3, #32]
 8004ad4:	421f      	tst	r7, r3
 8004ad6:	d0f6      	beq.n	8004ac6 <HAL_RCC_OscConfig+0x3c6>
 8004ad8:	e7d1      	b.n	8004a7e <HAL_RCC_OscConfig+0x37e>
      __HAL_RCC_HSI14ADC_DISABLE();
 8004ada:	2204      	movs	r2, #4
 8004adc:	4d58      	ldr	r5, [pc, #352]	; (8004c40 <HAL_RCC_OscConfig+0x540>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004ade:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8004ae0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8004ae6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8004ae8:	3a03      	subs	r2, #3
 8004aea:	4393      	bics	r3, r2
 8004aec:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8004aee:	f7ff f891 	bl	8003c14 <HAL_GetTick>
 8004af2:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004af4:	e005      	b.n	8004b02 <HAL_RCC_OscConfig+0x402>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004af6:	f7ff f88d 	bl	8003c14 <HAL_GetTick>
 8004afa:	1b80      	subs	r0, r0, r6
 8004afc:	2802      	cmp	r0, #2
 8004afe:	d900      	bls.n	8004b02 <HAL_RCC_OscConfig+0x402>
 8004b00:	e77f      	b.n	8004a02 <HAL_RCC_OscConfig+0x302>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004b02:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8004b04:	421f      	tst	r7, r3
 8004b06:	d1f6      	bne.n	8004af6 <HAL_RCC_OscConfig+0x3f6>
 8004b08:	6823      	ldr	r3, [r4, #0]
 8004b0a:	e6c0      	b.n	800488e <HAL_RCC_OscConfig+0x18e>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004b0c:	22c0      	movs	r2, #192	; 0xc0
 8004b0e:	684b      	ldr	r3, [r1, #4]
 8004b10:	0252      	lsls	r2, r2, #9
 8004b12:	4013      	ands	r3, r2
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d000      	beq.n	8004b1a <HAL_RCC_OscConfig+0x41a>
 8004b18:	e6c7      	b.n	80048aa <HAL_RCC_OscConfig+0x1aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004b1a:	4b49      	ldr	r3, [pc, #292]	; (8004c40 <HAL_RCC_OscConfig+0x540>)
 8004b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b1e:	03db      	lsls	r3, r3, #15
 8004b20:	d400      	bmi.n	8004b24 <HAL_RCC_OscConfig+0x424>
 8004b22:	e6d9      	b.n	80048d8 <HAL_RCC_OscConfig+0x1d8>
 8004b24:	6a23      	ldr	r3, [r4, #32]
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d000      	beq.n	8004b2c <HAL_RCC_OscConfig+0x42c>
 8004b2a:	e70b      	b.n	8004944 <HAL_RCC_OscConfig+0x244>
 8004b2c:	e6d4      	b.n	80048d8 <HAL_RCC_OscConfig+0x1d8>
        __HAL_RCC_HSI48_DISABLE();
 8004b2e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8004b30:	4a45      	ldr	r2, [pc, #276]	; (8004c48 <HAL_RCC_OscConfig+0x548>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004b32:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_HSI48_DISABLE();
 8004b34:	4013      	ands	r3, r2
 8004b36:	636b      	str	r3, [r5, #52]	; 0x34
        tickstart = HAL_GetTick();
 8004b38:	f7ff f86c 	bl	8003c14 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004b3c:	027f      	lsls	r7, r7, #9
        tickstart = HAL_GetTick();
 8004b3e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004b40:	e005      	b.n	8004b4e <HAL_RCC_OscConfig+0x44e>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b42:	f7ff f867 	bl	8003c14 <HAL_GetTick>
 8004b46:	1b80      	subs	r0, r0, r6
 8004b48:	2802      	cmp	r0, #2
 8004b4a:	d900      	bls.n	8004b4e <HAL_RCC_OscConfig+0x44e>
 8004b4c:	e759      	b.n	8004a02 <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004b4e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8004b50:	423b      	tst	r3, r7
 8004b52:	d1f6      	bne.n	8004b42 <HAL_RCC_OscConfig+0x442>
 8004b54:	e6c0      	b.n	80048d8 <HAL_RCC_OscConfig+0x1d8>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b56:	4a3a      	ldr	r2, [pc, #232]	; (8004c40 <HAL_RCC_OscConfig+0x540>)
 8004b58:	493c      	ldr	r1, [pc, #240]	; (8004c4c <HAL_RCC_OscConfig+0x54c>)
 8004b5a:	69d3      	ldr	r3, [r2, #28]
 8004b5c:	400b      	ands	r3, r1
 8004b5e:	61d3      	str	r3, [r2, #28]
 8004b60:	6823      	ldr	r3, [r4, #0]
 8004b62:	e67f      	b.n	8004864 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_PLL_DISABLE();
 8004b64:	6833      	ldr	r3, [r6, #0]
 8004b66:	4a3a      	ldr	r2, [pc, #232]	; (8004c50 <HAL_RCC_OscConfig+0x550>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b68:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8004b6e:	f7ff f851 	bl	8003c14 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b72:	04bf      	lsls	r7, r7, #18
        tickstart = HAL_GetTick();
 8004b74:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b76:	e005      	b.n	8004b84 <HAL_RCC_OscConfig+0x484>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b78:	f7ff f84c 	bl	8003c14 <HAL_GetTick>
 8004b7c:	1b40      	subs	r0, r0, r5
 8004b7e:	2802      	cmp	r0, #2
 8004b80:	d900      	bls.n	8004b84 <HAL_RCC_OscConfig+0x484>
 8004b82:	e73e      	b.n	8004a02 <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b84:	6833      	ldr	r3, [r6, #0]
 8004b86:	423b      	tst	r3, r7
 8004b88:	d1f6      	bne.n	8004b78 <HAL_RCC_OscConfig+0x478>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b8a:	220f      	movs	r2, #15
 8004b8c:	6af3      	ldr	r3, [r6, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b8e:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b90:	4393      	bics	r3, r2
 8004b92:	6b22      	ldr	r2, [r4, #48]	; 0x30
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b94:	04ad      	lsls	r5, r5, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b96:	4313      	orrs	r3, r2
 8004b98:	62f3      	str	r3, [r6, #44]	; 0x2c
 8004b9a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004b9c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004b9e:	6872      	ldr	r2, [r6, #4]
 8004ba0:	430b      	orrs	r3, r1
 8004ba2:	492c      	ldr	r1, [pc, #176]	; (8004c54 <HAL_RCC_OscConfig+0x554>)
 8004ba4:	400a      	ands	r2, r1
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	6073      	str	r3, [r6, #4]
        __HAL_RCC_PLL_ENABLE();
 8004baa:	2380      	movs	r3, #128	; 0x80
 8004bac:	6832      	ldr	r2, [r6, #0]
 8004bae:	045b      	lsls	r3, r3, #17
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8004bb4:	f7ff f82e 	bl	8003c14 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004bb8:	4e21      	ldr	r6, [pc, #132]	; (8004c40 <HAL_RCC_OscConfig+0x540>)
        tickstart = HAL_GetTick();
 8004bba:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004bbc:	e005      	b.n	8004bca <HAL_RCC_OscConfig+0x4ca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bbe:	f7ff f829 	bl	8003c14 <HAL_GetTick>
 8004bc2:	1b00      	subs	r0, r0, r4
 8004bc4:	2802      	cmp	r0, #2
 8004bc6:	d900      	bls.n	8004bca <HAL_RCC_OscConfig+0x4ca>
 8004bc8:	e71b      	b.n	8004a02 <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004bca:	6833      	ldr	r3, [r6, #0]
 8004bcc:	422b      	tst	r3, r5
 8004bce:	d0f6      	beq.n	8004bbe <HAL_RCC_OscConfig+0x4be>
  return HAL_OK;
 8004bd0:	2000      	movs	r0, #0
 8004bd2:	e6b8      	b.n	8004946 <HAL_RCC_OscConfig+0x246>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bd4:	2104      	movs	r1, #4
 8004bd6:	4b1a      	ldr	r3, [pc, #104]	; (8004c40 <HAL_RCC_OscConfig+0x540>)
 8004bd8:	6a1a      	ldr	r2, [r3, #32]
 8004bda:	430a      	orrs	r2, r1
 8004bdc:	621a      	str	r2, [r3, #32]
 8004bde:	6a1a      	ldr	r2, [r3, #32]
 8004be0:	3903      	subs	r1, #3
 8004be2:	430a      	orrs	r2, r1
 8004be4:	621a      	str	r2, [r3, #32]
 8004be6:	e766      	b.n	8004ab6 <HAL_RCC_OscConfig+0x3b6>
      __HAL_RCC_HSI14ADC_DISABLE();
 8004be8:	2104      	movs	r1, #4
 8004bea:	4e15      	ldr	r6, [pc, #84]	; (8004c40 <HAL_RCC_OscConfig+0x540>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004bec:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8004bee:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8004bf0:	430b      	orrs	r3, r1
 8004bf2:	6373      	str	r3, [r6, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8004bf4:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8004bf6:	431a      	orrs	r2, r3
 8004bf8:	6372      	str	r2, [r6, #52]	; 0x34
      tickstart = HAL_GetTick();
 8004bfa:	f7ff f80b 	bl	8003c14 <HAL_GetTick>
 8004bfe:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004c00:	e005      	b.n	8004c0e <HAL_RCC_OscConfig+0x50e>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004c02:	f7ff f807 	bl	8003c14 <HAL_GetTick>
 8004c06:	1b40      	subs	r0, r0, r5
 8004c08:	2802      	cmp	r0, #2
 8004c0a:	d900      	bls.n	8004c0e <HAL_RCC_OscConfig+0x50e>
 8004c0c:	e6f9      	b.n	8004a02 <HAL_RCC_OscConfig+0x302>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004c0e:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8004c10:	421f      	tst	r7, r3
 8004c12:	d0f6      	beq.n	8004c02 <HAL_RCC_OscConfig+0x502>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004c14:	21f8      	movs	r1, #248	; 0xf8
 8004c16:	6b72      	ldr	r2, [r6, #52]	; 0x34
 8004c18:	69a3      	ldr	r3, [r4, #24]
 8004c1a:	438a      	bics	r2, r1
 8004c1c:	00db      	lsls	r3, r3, #3
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	6373      	str	r3, [r6, #52]	; 0x34
 8004c22:	6823      	ldr	r3, [r4, #0]
 8004c24:	e633      	b.n	800488e <HAL_RCC_OscConfig+0x18e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c26:	2280      	movs	r2, #128	; 0x80
 8004c28:	4b05      	ldr	r3, [pc, #20]	; (8004c40 <HAL_RCC_OscConfig+0x540>)
 8004c2a:	02d2      	lsls	r2, r2, #11
 8004c2c:	6819      	ldr	r1, [r3, #0]
 8004c2e:	430a      	orrs	r2, r1
 8004c30:	601a      	str	r2, [r3, #0]
 8004c32:	2280      	movs	r2, #128	; 0x80
 8004c34:	6819      	ldr	r1, [r3, #0]
 8004c36:	0252      	lsls	r2, r2, #9
 8004c38:	430a      	orrs	r2, r1
 8004c3a:	601a      	str	r2, [r3, #0]
 8004c3c:	e58b      	b.n	8004756 <HAL_RCC_OscConfig+0x56>
 8004c3e:	46c0      	nop			; (mov r8, r8)
 8004c40:	40021000 	.word	0x40021000
 8004c44:	00001388 	.word	0x00001388
 8004c48:	fffeffff 	.word	0xfffeffff
 8004c4c:	efffffff 	.word	0xefffffff
 8004c50:	feffffff 	.word	0xfeffffff
 8004c54:	ffc27fff 	.word	0xffc27fff

08004c58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c58:	b570      	push	{r4, r5, r6, lr}
 8004c5a:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8004c5c:	4669      	mov	r1, sp
 8004c5e:	000a      	movs	r2, r1
 8004c60:	4b1b      	ldr	r3, [pc, #108]	; (8004cd0 <HAL_RCC_GetSysClockFreq+0x78>)
 8004c62:	cb31      	ldmia	r3!, {r0, r4, r5}
 8004c64:	c231      	stmia	r2!, {r0, r4, r5}
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	6013      	str	r3, [r2, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004c6a:	aa04      	add	r2, sp, #16
 8004c6c:	0010      	movs	r0, r2
 8004c6e:	4b19      	ldr	r3, [pc, #100]	; (8004cd4 <HAL_RCC_GetSysClockFreq+0x7c>)
 8004c70:	cb70      	ldmia	r3!, {r4, r5, r6}
 8004c72:	c070      	stmia	r0!, {r4, r5, r6}
 8004c74:	681b      	ldr	r3, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8004c76:	4d18      	ldr	r5, [pc, #96]	; (8004cd8 <HAL_RCC_GetSysClockFreq+0x80>)
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004c78:	6003      	str	r3, [r0, #0]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004c7a:	200c      	movs	r0, #12
  tmpreg = RCC->CFGR;
 8004c7c:	686b      	ldr	r3, [r5, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8004c7e:	4018      	ands	r0, r3
 8004c80:	2808      	cmp	r0, #8
 8004c82:	d00a      	beq.n	8004c9a <HAL_RCC_GetSysClockFreq+0x42>
 8004c84:	380c      	subs	r0, #12
 8004c86:	1e43      	subs	r3, r0, #1
 8004c88:	4198      	sbcs	r0, r3
 8004c8a:	4b14      	ldr	r3, [pc, #80]	; (8004cdc <HAL_RCC_GetSysClockFreq+0x84>)
 8004c8c:	4240      	negs	r0, r0
 8004c8e:	4018      	ands	r0, r3
 8004c90:	4b13      	ldr	r3, [pc, #76]	; (8004ce0 <HAL_RCC_GetSysClockFreq+0x88>)
 8004c92:	469c      	mov	ip, r3
 8004c94:	4460      	add	r0, ip
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8004c96:	b008      	add	sp, #32
 8004c98:	bd70      	pop	{r4, r5, r6, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004c9a:	200f      	movs	r0, #15
 8004c9c:	0c9c      	lsrs	r4, r3, #18
 8004c9e:	4004      	ands	r4, r0
 8004ca0:	5d0c      	ldrb	r4, [r1, r4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004ca2:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8004ca4:	4008      	ands	r0, r1
 8004ca6:	5c11      	ldrb	r1, [r2, r0]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004ca8:	22c0      	movs	r2, #192	; 0xc0
 8004caa:	2080      	movs	r0, #128	; 0x80
 8004cac:	0252      	lsls	r2, r2, #9
 8004cae:	4013      	ands	r3, r2
 8004cb0:	0240      	lsls	r0, r0, #9
 8004cb2:	4283      	cmp	r3, r0
 8004cb4:	d001      	beq.n	8004cba <HAL_RCC_GetSysClockFreq+0x62>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d004      	beq.n	8004cc4 <HAL_RCC_GetSysClockFreq+0x6c>
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004cba:	480a      	ldr	r0, [pc, #40]	; (8004ce4 <HAL_RCC_GetSysClockFreq+0x8c>)
 8004cbc:	f7fb fa3e 	bl	800013c <__udivsi3>
 8004cc0:	4360      	muls	r0, r4
 8004cc2:	e7e8      	b.n	8004c96 <HAL_RCC_GetSysClockFreq+0x3e>
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004cc4:	4806      	ldr	r0, [pc, #24]	; (8004ce0 <HAL_RCC_GetSysClockFreq+0x88>)
 8004cc6:	f7fb fa39 	bl	800013c <__udivsi3>
 8004cca:	4360      	muls	r0, r4
 8004ccc:	e7e3      	b.n	8004c96 <HAL_RCC_GetSysClockFreq+0x3e>
 8004cce:	46c0      	nop			; (mov r8, r8)
 8004cd0:	0800c29c 	.word	0x0800c29c
 8004cd4:	0800c2b0 	.word	0x0800c2b0
 8004cd8:	40021000 	.word	0x40021000
 8004cdc:	fd9da600 	.word	0xfd9da600
 8004ce0:	02dc6c00 	.word	0x02dc6c00
 8004ce4:	007a1200 	.word	0x007a1200

08004ce8 <HAL_RCC_ClockConfig>:
{
 8004ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cea:	46ce      	mov	lr, r9
 8004cec:	4647      	mov	r7, r8
 8004cee:	0004      	movs	r4, r0
 8004cf0:	000d      	movs	r5, r1
 8004cf2:	b580      	push	{r7, lr}
  if(RCC_ClkInitStruct == NULL)
 8004cf4:	2800      	cmp	r0, #0
 8004cf6:	d00d      	beq.n	8004d14 <HAL_RCC_ClockConfig+0x2c>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	493f      	ldr	r1, [pc, #252]	; (8004df8 <HAL_RCC_ClockConfig+0x110>)
 8004cfc:	680a      	ldr	r2, [r1, #0]
 8004cfe:	401a      	ands	r2, r3
 8004d00:	42aa      	cmp	r2, r5
 8004d02:	d20c      	bcs.n	8004d1e <HAL_RCC_ClockConfig+0x36>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d04:	680a      	ldr	r2, [r1, #0]
 8004d06:	439a      	bics	r2, r3
 8004d08:	432a      	orrs	r2, r5
 8004d0a:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d0c:	680a      	ldr	r2, [r1, #0]
 8004d0e:	4013      	ands	r3, r2
 8004d10:	42ab      	cmp	r3, r5
 8004d12:	d004      	beq.n	8004d1e <HAL_RCC_ClockConfig+0x36>
    return HAL_ERROR;
 8004d14:	2001      	movs	r0, #1
}
 8004d16:	bcc0      	pop	{r6, r7}
 8004d18:	46b9      	mov	r9, r7
 8004d1a:	46b0      	mov	r8, r6
 8004d1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d1e:	6823      	ldr	r3, [r4, #0]
 8004d20:	079a      	lsls	r2, r3, #30
 8004d22:	d50e      	bpl.n	8004d42 <HAL_RCC_ClockConfig+0x5a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d24:	075a      	lsls	r2, r3, #29
 8004d26:	d505      	bpl.n	8004d34 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004d28:	22e0      	movs	r2, #224	; 0xe0
 8004d2a:	4934      	ldr	r1, [pc, #208]	; (8004dfc <HAL_RCC_ClockConfig+0x114>)
 8004d2c:	00d2      	lsls	r2, r2, #3
 8004d2e:	6848      	ldr	r0, [r1, #4]
 8004d30:	4302      	orrs	r2, r0
 8004d32:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d34:	20f0      	movs	r0, #240	; 0xf0
 8004d36:	4931      	ldr	r1, [pc, #196]	; (8004dfc <HAL_RCC_ClockConfig+0x114>)
 8004d38:	684a      	ldr	r2, [r1, #4]
 8004d3a:	4382      	bics	r2, r0
 8004d3c:	68a0      	ldr	r0, [r4, #8]
 8004d3e:	4302      	orrs	r2, r0
 8004d40:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d42:	07db      	lsls	r3, r3, #31
 8004d44:	d524      	bpl.n	8004d90 <HAL_RCC_ClockConfig+0xa8>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d46:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d48:	4b2c      	ldr	r3, [pc, #176]	; (8004dfc <HAL_RCC_ClockConfig+0x114>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d4a:	2a01      	cmp	r2, #1
 8004d4c:	d04a      	beq.n	8004de4 <HAL_RCC_ClockConfig+0xfc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d4e:	2a02      	cmp	r2, #2
 8004d50:	d044      	beq.n	8004ddc <HAL_RCC_ClockConfig+0xf4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8004d52:	2a03      	cmp	r2, #3
 8004d54:	d04c      	beq.n	8004df0 <HAL_RCC_ClockConfig+0x108>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	079b      	lsls	r3, r3, #30
 8004d5a:	d5db      	bpl.n	8004d14 <HAL_RCC_ClockConfig+0x2c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d5c:	2103      	movs	r1, #3
 8004d5e:	4e27      	ldr	r6, [pc, #156]	; (8004dfc <HAL_RCC_ClockConfig+0x114>)
 8004d60:	6873      	ldr	r3, [r6, #4]
 8004d62:	438b      	bics	r3, r1
 8004d64:	4313      	orrs	r3, r2
 8004d66:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8004d68:	f7fe ff54 	bl	8003c14 <HAL_GetTick>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d6c:	230c      	movs	r3, #12
 8004d6e:	4698      	mov	r8, r3
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d70:	4b23      	ldr	r3, [pc, #140]	; (8004e00 <HAL_RCC_ClockConfig+0x118>)
    tickstart = HAL_GetTick();
 8004d72:	0007      	movs	r7, r0
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d74:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d76:	e004      	b.n	8004d82 <HAL_RCC_ClockConfig+0x9a>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d78:	f7fe ff4c 	bl	8003c14 <HAL_GetTick>
 8004d7c:	1bc0      	subs	r0, r0, r7
 8004d7e:	4548      	cmp	r0, r9
 8004d80:	d834      	bhi.n	8004dec <HAL_RCC_ClockConfig+0x104>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d82:	4643      	mov	r3, r8
 8004d84:	6872      	ldr	r2, [r6, #4]
 8004d86:	401a      	ands	r2, r3
 8004d88:	6863      	ldr	r3, [r4, #4]
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d1f3      	bne.n	8004d78 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d90:	2101      	movs	r1, #1
 8004d92:	4a19      	ldr	r2, [pc, #100]	; (8004df8 <HAL_RCC_ClockConfig+0x110>)
 8004d94:	6813      	ldr	r3, [r2, #0]
 8004d96:	400b      	ands	r3, r1
 8004d98:	42ab      	cmp	r3, r5
 8004d9a:	d905      	bls.n	8004da8 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d9c:	6813      	ldr	r3, [r2, #0]
 8004d9e:	438b      	bics	r3, r1
 8004da0:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004da2:	6813      	ldr	r3, [r2, #0]
 8004da4:	4219      	tst	r1, r3
 8004da6:	d1b5      	bne.n	8004d14 <HAL_RCC_ClockConfig+0x2c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004da8:	6823      	ldr	r3, [r4, #0]
 8004daa:	075b      	lsls	r3, r3, #29
 8004dac:	d506      	bpl.n	8004dbc <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004dae:	4a13      	ldr	r2, [pc, #76]	; (8004dfc <HAL_RCC_ClockConfig+0x114>)
 8004db0:	4914      	ldr	r1, [pc, #80]	; (8004e04 <HAL_RCC_ClockConfig+0x11c>)
 8004db2:	6853      	ldr	r3, [r2, #4]
 8004db4:	400b      	ands	r3, r1
 8004db6:	68e1      	ldr	r1, [r4, #12]
 8004db8:	430b      	orrs	r3, r1
 8004dba:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004dbc:	f7ff ff4c 	bl	8004c58 <HAL_RCC_GetSysClockFreq>
 8004dc0:	4b0e      	ldr	r3, [pc, #56]	; (8004dfc <HAL_RCC_ClockConfig+0x114>)
 8004dc2:	4a11      	ldr	r2, [pc, #68]	; (8004e08 <HAL_RCC_ClockConfig+0x120>)
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	061b      	lsls	r3, r3, #24
 8004dc8:	0f1b      	lsrs	r3, r3, #28
 8004dca:	5cd3      	ldrb	r3, [r2, r3]
 8004dcc:	40d8      	lsrs	r0, r3
 8004dce:	4b0f      	ldr	r3, [pc, #60]	; (8004e0c <HAL_RCC_ClockConfig+0x124>)
 8004dd0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8004dd2:	2000      	movs	r0, #0
 8004dd4:	f7fe fedc 	bl	8003b90 <HAL_InitTick>
  return HAL_OK;
 8004dd8:	2000      	movs	r0, #0
 8004dda:	e79c      	b.n	8004d16 <HAL_RCC_ClockConfig+0x2e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	019b      	lsls	r3, r3, #6
 8004de0:	d4bc      	bmi.n	8004d5c <HAL_RCC_ClockConfig+0x74>
 8004de2:	e797      	b.n	8004d14 <HAL_RCC_ClockConfig+0x2c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	039b      	lsls	r3, r3, #14
 8004de8:	d4b8      	bmi.n	8004d5c <HAL_RCC_ClockConfig+0x74>
 8004dea:	e793      	b.n	8004d14 <HAL_RCC_ClockConfig+0x2c>
        return HAL_TIMEOUT;
 8004dec:	2003      	movs	r0, #3
 8004dee:	e792      	b.n	8004d16 <HAL_RCC_ClockConfig+0x2e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004df2:	03db      	lsls	r3, r3, #15
 8004df4:	d4b2      	bmi.n	8004d5c <HAL_RCC_ClockConfig+0x74>
 8004df6:	e78d      	b.n	8004d14 <HAL_RCC_ClockConfig+0x2c>
 8004df8:	40022000 	.word	0x40022000
 8004dfc:	40021000 	.word	0x40021000
 8004e00:	00001388 	.word	0x00001388
 8004e04:	fffff8ff 	.word	0xfffff8ff
 8004e08:	0800c284 	.word	0x0800c284
 8004e0c:	20000010 	.word	0x20000010

08004e10 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004e10:	4b04      	ldr	r3, [pc, #16]	; (8004e24 <HAL_RCC_GetPCLK1Freq+0x14>)
 8004e12:	4a05      	ldr	r2, [pc, #20]	; (8004e28 <HAL_RCC_GetPCLK1Freq+0x18>)
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	055b      	lsls	r3, r3, #21
 8004e18:	0f5b      	lsrs	r3, r3, #29
 8004e1a:	5cd3      	ldrb	r3, [r2, r3]
 8004e1c:	4a03      	ldr	r2, [pc, #12]	; (8004e2c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004e1e:	6810      	ldr	r0, [r2, #0]
 8004e20:	40d8      	lsrs	r0, r3
}    
 8004e22:	4770      	bx	lr
 8004e24:	40021000 	.word	0x40021000
 8004e28:	0800c294 	.word	0x0800c294
 8004e2c:	20000010 	.word	0x20000010

08004e30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e32:	46ce      	mov	lr, r9
 8004e34:	4647      	mov	r7, r8
 8004e36:	b580      	push	{r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004e38:	6803      	ldr	r3, [r0, #0]
{
 8004e3a:	0004      	movs	r4, r0
 8004e3c:	b083      	sub	sp, #12
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004e3e:	03da      	lsls	r2, r3, #15
 8004e40:	d533      	bpl.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x7a>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e42:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8004e44:	2000      	movs	r0, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e46:	4b4e      	ldr	r3, [pc, #312]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004e48:	0552      	lsls	r2, r2, #21
 8004e4a:	69d9      	ldr	r1, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 8004e4c:	4680      	mov	r8, r0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e4e:	4211      	tst	r1, r2
 8004e50:	d05e      	beq.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e52:	2680      	movs	r6, #128	; 0x80
 8004e54:	4d4b      	ldr	r5, [pc, #300]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8004e56:	0076      	lsls	r6, r6, #1
 8004e58:	682b      	ldr	r3, [r5, #0]
 8004e5a:	4233      	tst	r3, r6
 8004e5c:	d067      	beq.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004e5e:	4d48      	ldr	r5, [pc, #288]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004e60:	22c0      	movs	r2, #192	; 0xc0
 8004e62:	6a2b      	ldr	r3, [r5, #32]
 8004e64:	0092      	lsls	r2, r2, #2
 8004e66:	0018      	movs	r0, r3
 8004e68:	4010      	ands	r0, r2
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e6a:	4213      	tst	r3, r2
 8004e6c:	d100      	bne.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004e6e:	e07e      	b.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8004e70:	6861      	ldr	r1, [r4, #4]
 8004e72:	400a      	ands	r2, r1
 8004e74:	4282      	cmp	r2, r0
 8004e76:	d00e      	beq.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e78:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e7a:	6a28      	ldr	r0, [r5, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e7c:	6a2e      	ldr	r6, [r5, #32]
 8004e7e:	0252      	lsls	r2, r2, #9
 8004e80:	4332      	orrs	r2, r6
 8004e82:	622a      	str	r2, [r5, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e84:	6a2a      	ldr	r2, [r5, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e86:	4b40      	ldr	r3, [pc, #256]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x158>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e88:	4e40      	ldr	r6, [pc, #256]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e8a:	4003      	ands	r3, r0
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e8c:	4032      	ands	r2, r6
 8004e8e:	622a      	str	r2, [r5, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004e90:	622b      	str	r3, [r5, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004e92:	07c3      	lsls	r3, r0, #31
 8004e94:	d45c      	bmi.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x120>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e96:	4a3a      	ldr	r2, [pc, #232]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004e98:	483b      	ldr	r0, [pc, #236]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8004e9a:	6a13      	ldr	r3, [r2, #32]
 8004e9c:	4003      	ands	r3, r0
 8004e9e:	430b      	orrs	r3, r1
 8004ea0:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004ea2:	4643      	mov	r3, r8
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d064      	beq.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8004ea8:	6823      	ldr	r3, [r4, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004eaa:	07da      	lsls	r2, r3, #31
 8004eac:	d506      	bpl.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004eae:	2003      	movs	r0, #3
 8004eb0:	4933      	ldr	r1, [pc, #204]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004eb2:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8004eb4:	4382      	bics	r2, r0
 8004eb6:	68a0      	ldr	r0, [r4, #8]
 8004eb8:	4302      	orrs	r2, r0
 8004eba:	630a      	str	r2, [r1, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004ebc:	079a      	lsls	r2, r3, #30
 8004ebe:	d506      	bpl.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ec0:	492f      	ldr	r1, [pc, #188]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004ec2:	4833      	ldr	r0, [pc, #204]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ec4:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8004ec6:	4002      	ands	r2, r0
 8004ec8:	68e0      	ldr	r0, [r4, #12]
 8004eca:	4302      	orrs	r2, r0
 8004ecc:	630a      	str	r2, [r1, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004ece:	035a      	lsls	r2, r3, #13
 8004ed0:	d506      	bpl.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004ed2:	492b      	ldr	r1, [pc, #172]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004ed4:	482f      	ldr	r0, [pc, #188]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ed6:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8004ed8:	4002      	ands	r2, r0
 8004eda:	6920      	ldr	r0, [r4, #16]
 8004edc:	4302      	orrs	r2, r0
 8004ede:	630a      	str	r2, [r1, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ee0:	069a      	lsls	r2, r3, #26
 8004ee2:	d506      	bpl.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ee4:	2010      	movs	r0, #16
 8004ee6:	4926      	ldr	r1, [pc, #152]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004ee8:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8004eea:	4382      	bics	r2, r0
 8004eec:	6960      	ldr	r0, [r4, #20]
 8004eee:	4302      	orrs	r2, r0
 8004ef0:	630a      	str	r2, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004ef2:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004ef4:	055b      	lsls	r3, r3, #21
 8004ef6:	d506      	bpl.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004ef8:	2140      	movs	r1, #64	; 0x40
 8004efa:	4a21      	ldr	r2, [pc, #132]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004efc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004efe:	438b      	bics	r3, r1
 8004f00:	69a1      	ldr	r1, [r4, #24]
 8004f02:	430b      	orrs	r3, r1
 8004f04:	6313      	str	r3, [r2, #48]	; 0x30
}
 8004f06:	b003      	add	sp, #12
 8004f08:	bcc0      	pop	{r6, r7}
 8004f0a:	46b9      	mov	r9, r7
 8004f0c:	46b0      	mov	r8, r6
 8004f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f10:	69d9      	ldr	r1, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f12:	2680      	movs	r6, #128	; 0x80
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f14:	4311      	orrs	r1, r2
 8004f16:	61d9      	str	r1, [r3, #28]
 8004f18:	69db      	ldr	r3, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f1a:	4d1a      	ldr	r5, [pc, #104]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x154>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f1c:	401a      	ands	r2, r3
 8004f1e:	9201      	str	r2, [sp, #4]
 8004f20:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004f22:	2301      	movs	r3, #1
 8004f24:	4698      	mov	r8, r3
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f26:	682b      	ldr	r3, [r5, #0]
 8004f28:	0076      	lsls	r6, r6, #1
 8004f2a:	4233      	tst	r3, r6
 8004f2c:	d197      	bne.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f2e:	682b      	ldr	r3, [r5, #0]
 8004f30:	4333      	orrs	r3, r6
 8004f32:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8004f34:	f7fe fe6e 	bl	8003c14 <HAL_GetTick>
 8004f38:	0007      	movs	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f3a:	682b      	ldr	r3, [r5, #0]
 8004f3c:	4233      	tst	r3, r6
 8004f3e:	d000      	beq.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004f40:	e78d      	b.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x2e>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f42:	f7fe fe67 	bl	8003c14 <HAL_GetTick>
 8004f46:	1bc0      	subs	r0, r0, r7
 8004f48:	2864      	cmp	r0, #100	; 0x64
 8004f4a:	d9f6      	bls.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x10a>
          return HAL_TIMEOUT;
 8004f4c:	2003      	movs	r0, #3
 8004f4e:	e7da      	b.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0xd6>
        tickstart = HAL_GetTick();
 8004f50:	f7fe fe60 	bl	8003c14 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f54:	4b10      	ldr	r3, [pc, #64]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x168>)
        tickstart = HAL_GetTick();
 8004f56:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f58:	2702      	movs	r7, #2
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f5a:	4699      	mov	r9, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f5c:	e004      	b.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x138>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f5e:	f7fe fe59 	bl	8003c14 <HAL_GetTick>
 8004f62:	1b80      	subs	r0, r0, r6
 8004f64:	4548      	cmp	r0, r9
 8004f66:	d8f1      	bhi.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x11c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f68:	6a2b      	ldr	r3, [r5, #32]
 8004f6a:	421f      	tst	r7, r3
 8004f6c:	d0f7      	beq.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x12e>
 8004f6e:	6861      	ldr	r1, [r4, #4]
 8004f70:	e791      	b.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x66>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f72:	69d3      	ldr	r3, [r2, #28]
 8004f74:	4909      	ldr	r1, [pc, #36]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x16c>)
 8004f76:	400b      	ands	r3, r1
 8004f78:	61d3      	str	r3, [r2, #28]
 8004f7a:	6823      	ldr	r3, [r4, #0]
 8004f7c:	e795      	b.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004f7e:	46c0      	nop			; (mov r8, r8)
 8004f80:	40021000 	.word	0x40021000
 8004f84:	40007000 	.word	0x40007000
 8004f88:	fffffcff 	.word	0xfffffcff
 8004f8c:	fffeffff 	.word	0xfffeffff
 8004f90:	fffcffff 	.word	0xfffcffff
 8004f94:	fff3ffff 	.word	0xfff3ffff
 8004f98:	00001388 	.word	0x00001388
 8004f9c:	efffffff 	.word	0xefffffff

08004fa0 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fa0:	2201      	movs	r2, #1
{
 8004fa2:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004fa4:	2573      	movs	r5, #115	; 0x73
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fa6:	6a03      	ldr	r3, [r0, #32]
 8004fa8:	4393      	bics	r3, r2
 8004faa:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8004fac:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8004fae:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8004fb0:	6984      	ldr	r4, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004fb2:	43ac      	bics	r4, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fb4:	680d      	ldr	r5, [r1, #0]
 8004fb6:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004fb8:	2502      	movs	r5, #2
 8004fba:	43ab      	bics	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004fbc:	688d      	ldr	r5, [r1, #8]
 8004fbe:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004fc0:	4d0e      	ldr	r5, [pc, #56]	; (8004ffc <TIM_OC1_SetConfig+0x5c>)
 8004fc2:	42a8      	cmp	r0, r5
 8004fc4:	d008      	beq.n	8004fd8 <TIM_OC1_SetConfig+0x38>
 8004fc6:	4d0e      	ldr	r5, [pc, #56]	; (8005000 <TIM_OC1_SetConfig+0x60>)
 8004fc8:	42a8      	cmp	r0, r5
 8004fca:	d005      	beq.n	8004fd8 <TIM_OC1_SetConfig+0x38>
 8004fcc:	4d0d      	ldr	r5, [pc, #52]	; (8005004 <TIM_OC1_SetConfig+0x64>)
 8004fce:	42a8      	cmp	r0, r5
 8004fd0:	d002      	beq.n	8004fd8 <TIM_OC1_SetConfig+0x38>
 8004fd2:	4d0d      	ldr	r5, [pc, #52]	; (8005008 <TIM_OC1_SetConfig+0x68>)
 8004fd4:	42a8      	cmp	r0, r5
 8004fd6:	d10b      	bne.n	8004ff0 <TIM_OC1_SetConfig+0x50>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004fd8:	2508      	movs	r5, #8
 8004fda:	43ab      	bics	r3, r5
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004fdc:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004fde:	698e      	ldr	r6, [r1, #24]
    tmpccer |= OC_Config->OCNPolarity;
 8004fe0:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8004fe2:	2504      	movs	r5, #4
 8004fe4:	43ab      	bics	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004fe6:	4d09      	ldr	r5, [pc, #36]	; (800500c <TIM_OC1_SetConfig+0x6c>)
 8004fe8:	402a      	ands	r2, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8004fea:	694d      	ldr	r5, [r1, #20]
 8004fec:	4335      	orrs	r5, r6
 8004fee:	432a      	orrs	r2, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ff0:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ff2:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004ff4:	6184      	str	r4, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8004ff6:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ff8:	6203      	str	r3, [r0, #32]
}
 8004ffa:	bd70      	pop	{r4, r5, r6, pc}
 8004ffc:	40012c00 	.word	0x40012c00
 8005000:	40014000 	.word	0x40014000
 8005004:	40014400 	.word	0x40014400
 8005008:	40014800 	.word	0x40014800
 800500c:	fffffcff 	.word	0xfffffcff

08005010 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005010:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005012:	2473      	movs	r4, #115	; 0x73
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005014:	6a03      	ldr	r3, [r0, #32]
 8005016:	4a17      	ldr	r2, [pc, #92]	; (8005074 <TIM_OC3_SetConfig+0x64>)
 8005018:	4013      	ands	r3, r2
 800501a:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800501c:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800501e:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8005020:	69c5      	ldr	r5, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005022:	43a5      	bics	r5, r4
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005024:	680c      	ldr	r4, [r1, #0]
 8005026:	4325      	orrs	r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005028:	4c13      	ldr	r4, [pc, #76]	; (8005078 <TIM_OC3_SetConfig+0x68>)
 800502a:	4023      	ands	r3, r4
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800502c:	688c      	ldr	r4, [r1, #8]
 800502e:	0224      	lsls	r4, r4, #8
 8005030:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005032:	4c12      	ldr	r4, [pc, #72]	; (800507c <TIM_OC3_SetConfig+0x6c>)
 8005034:	42a0      	cmp	r0, r4
 8005036:	d015      	beq.n	8005064 <TIM_OC3_SetConfig+0x54>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005038:	4c11      	ldr	r4, [pc, #68]	; (8005080 <TIM_OC3_SetConfig+0x70>)
 800503a:	42a0      	cmp	r0, r4
 800503c:	d005      	beq.n	800504a <TIM_OC3_SetConfig+0x3a>
 800503e:	4c11      	ldr	r4, [pc, #68]	; (8005084 <TIM_OC3_SetConfig+0x74>)
 8005040:	42a0      	cmp	r0, r4
 8005042:	d002      	beq.n	800504a <TIM_OC3_SetConfig+0x3a>
 8005044:	4c10      	ldr	r4, [pc, #64]	; (8005088 <TIM_OC3_SetConfig+0x78>)
 8005046:	42a0      	cmp	r0, r4
 8005048:	d106      	bne.n	8005058 <TIM_OC3_SetConfig+0x48>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800504a:	4c10      	ldr	r4, [pc, #64]	; (800508c <TIM_OC3_SetConfig+0x7c>)
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800504c:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800504e:	4014      	ands	r4, r2
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005050:	698a      	ldr	r2, [r1, #24]
 8005052:	4332      	orrs	r2, r6
 8005054:	0112      	lsls	r2, r2, #4
 8005056:	4322      	orrs	r2, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005058:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800505a:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 800505c:	61c5      	str	r5, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800505e:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005060:	6203      	str	r3, [r0, #32]
}
 8005062:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer &= ~TIM_CCER_CC3NP;
 8005064:	4c0a      	ldr	r4, [pc, #40]	; (8005090 <TIM_OC3_SetConfig+0x80>)
 8005066:	401c      	ands	r4, r3
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005068:	68cb      	ldr	r3, [r1, #12]
 800506a:	021b      	lsls	r3, r3, #8
 800506c:	4323      	orrs	r3, r4
    tmpccer &= ~TIM_CCER_CC3NE;
 800506e:	4c09      	ldr	r4, [pc, #36]	; (8005094 <TIM_OC3_SetConfig+0x84>)
 8005070:	4023      	ands	r3, r4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005072:	e7ea      	b.n	800504a <TIM_OC3_SetConfig+0x3a>
 8005074:	fffffeff 	.word	0xfffffeff
 8005078:	fffffdff 	.word	0xfffffdff
 800507c:	40012c00 	.word	0x40012c00
 8005080:	40014000 	.word	0x40014000
 8005084:	40014400 	.word	0x40014400
 8005088:	40014800 	.word	0x40014800
 800508c:	ffffcfff 	.word	0xffffcfff
 8005090:	fffff7ff 	.word	0xfffff7ff
 8005094:	fffffbff 	.word	0xfffffbff

08005098 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005098:	6a03      	ldr	r3, [r0, #32]
 800509a:	4a14      	ldr	r2, [pc, #80]	; (80050ec <TIM_OC4_SetConfig+0x54>)
{
 800509c:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800509e:	4013      	ands	r3, r2
 80050a0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050a2:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80050a4:	4d12      	ldr	r5, [pc, #72]	; (80050f0 <TIM_OC4_SetConfig+0x58>)
  tmpcr2 =  TIMx->CR2;
 80050a6:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 80050a8:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80050aa:	402c      	ands	r4, r5

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050ac:	680d      	ldr	r5, [r1, #0]
 80050ae:	022d      	lsls	r5, r5, #8
 80050b0:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80050b2:	4d10      	ldr	r5, [pc, #64]	; (80050f4 <TIM_OC4_SetConfig+0x5c>)
 80050b4:	4015      	ands	r5, r2
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80050b6:	688a      	ldr	r2, [r1, #8]
 80050b8:	0312      	lsls	r2, r2, #12
 80050ba:	432a      	orrs	r2, r5

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050bc:	4d0e      	ldr	r5, [pc, #56]	; (80050f8 <TIM_OC4_SetConfig+0x60>)
 80050be:	42a8      	cmp	r0, r5
 80050c0:	d008      	beq.n	80050d4 <TIM_OC4_SetConfig+0x3c>
 80050c2:	4d0e      	ldr	r5, [pc, #56]	; (80050fc <TIM_OC4_SetConfig+0x64>)
 80050c4:	42a8      	cmp	r0, r5
 80050c6:	d005      	beq.n	80050d4 <TIM_OC4_SetConfig+0x3c>
 80050c8:	4d0d      	ldr	r5, [pc, #52]	; (8005100 <TIM_OC4_SetConfig+0x68>)
 80050ca:	42a8      	cmp	r0, r5
 80050cc:	d002      	beq.n	80050d4 <TIM_OC4_SetConfig+0x3c>
 80050ce:	4d0d      	ldr	r5, [pc, #52]	; (8005104 <TIM_OC4_SetConfig+0x6c>)
 80050d0:	42a8      	cmp	r0, r5
 80050d2:	d104      	bne.n	80050de <TIM_OC4_SetConfig+0x46>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80050d4:	4d0c      	ldr	r5, [pc, #48]	; (8005108 <TIM_OC4_SetConfig+0x70>)
 80050d6:	402b      	ands	r3, r5

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80050d8:	694d      	ldr	r5, [r1, #20]
 80050da:	01ad      	lsls	r5, r5, #6
 80050dc:	432b      	orrs	r3, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050de:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80050e0:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 80050e2:	61c4      	str	r4, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 80050e4:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050e6:	6202      	str	r2, [r0, #32]
}
 80050e8:	bd30      	pop	{r4, r5, pc}
 80050ea:	46c0      	nop			; (mov r8, r8)
 80050ec:	ffffefff 	.word	0xffffefff
 80050f0:	ffff8cff 	.word	0xffff8cff
 80050f4:	ffffdfff 	.word	0xffffdfff
 80050f8:	40012c00 	.word	0x40012c00
 80050fc:	40014000 	.word	0x40014000
 8005100:	40014400 	.word	0x40014400
 8005104:	40014800 	.word	0x40014800
 8005108:	ffffbfff 	.word	0xffffbfff

0800510c <HAL_TIM_PWM_MspInit>:
 800510c:	4770      	bx	lr
 800510e:	46c0      	nop			; (mov r8, r8)

08005110 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8005110:	233c      	movs	r3, #60	; 0x3c
{
 8005112:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8005114:	5cc2      	ldrb	r2, [r0, r3]
 8005116:	2a01      	cmp	r2, #1
 8005118:	d100      	bne.n	800511c <HAL_TIM_ConfigClockSource+0xc>
 800511a:	e070      	b.n	80051fe <HAL_TIM_ConfigClockSource+0xee>
 800511c:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800511e:	2202      	movs	r2, #2
  __HAL_LOCK(htim);
 8005120:	54c4      	strb	r4, [r0, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 8005122:	3301      	adds	r3, #1
 8005124:	54c2      	strb	r2, [r0, r3]
  tmpsmcr = htim->Instance->SMCR;
 8005126:	6802      	ldr	r2, [r0, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005128:	4d4a      	ldr	r5, [pc, #296]	; (8005254 <HAL_TIM_ConfigClockSource+0x144>)
  tmpsmcr = htim->Instance->SMCR;
 800512a:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800512c:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 800512e:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8005130:	680b      	ldr	r3, [r1, #0]
 8005132:	2b60      	cmp	r3, #96	; 0x60
 8005134:	d065      	beq.n	8005202 <HAL_TIM_ConfigClockSource+0xf2>
 8005136:	d82f      	bhi.n	8005198 <HAL_TIM_ConfigClockSource+0x88>
 8005138:	2b40      	cmp	r3, #64	; 0x40
 800513a:	d049      	beq.n	80051d0 <HAL_TIM_ConfigClockSource+0xc0>
 800513c:	d91f      	bls.n	800517e <HAL_TIM_ConfigClockSource+0x6e>
 800513e:	2b50      	cmp	r3, #80	; 0x50
 8005140:	d115      	bne.n	800516e <HAL_TIM_ConfigClockSource+0x5e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005142:	684d      	ldr	r5, [r1, #4]
 8005144:	68cb      	ldr	r3, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005146:	6a11      	ldr	r1, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005148:	6a16      	ldr	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800514a:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800514c:	43a6      	bics	r6, r4
 800514e:	6216      	str	r6, [r2, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005150:	26f0      	movs	r6, #240	; 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8005152:	6994      	ldr	r4, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005154:	43b4      	bics	r4, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005156:	4323      	orrs	r3, r4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005158:	240a      	movs	r4, #10
 800515a:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 800515c:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800515e:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 8005160:	6211      	str	r1, [r2, #32]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005162:	2170      	movs	r1, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8005164:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005166:	438b      	bics	r3, r1
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005168:	3919      	subs	r1, #25
 800516a:	430b      	orrs	r3, r1
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800516c:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 800516e:	233d      	movs	r3, #61	; 0x3d
 8005170:	2201      	movs	r2, #1
 8005172:	54c2      	strb	r2, [r0, r3]
  __HAL_UNLOCK(htim);
 8005174:	2200      	movs	r2, #0
 8005176:	3b01      	subs	r3, #1
 8005178:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 800517a:	2000      	movs	r0, #0
}
 800517c:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 800517e:	2b20      	cmp	r3, #32
 8005180:	d002      	beq.n	8005188 <HAL_TIM_ConfigClockSource+0x78>
 8005182:	d920      	bls.n	80051c6 <HAL_TIM_ConfigClockSource+0xb6>
 8005184:	2b30      	cmp	r3, #48	; 0x30
 8005186:	d1f2      	bne.n	800516e <HAL_TIM_ConfigClockSource+0x5e>
  tmpsmcr &= ~TIM_SMCR_TS;
 8005188:	2470      	movs	r4, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 800518a:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800518c:	43a1      	bics	r1, r4
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800518e:	430b      	orrs	r3, r1
 8005190:	2107      	movs	r1, #7
 8005192:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8005194:	6093      	str	r3, [r2, #8]
}
 8005196:	e7ea      	b.n	800516e <HAL_TIM_ConfigClockSource+0x5e>
  switch (sClockSourceConfig->ClockSource)
 8005198:	2b70      	cmp	r3, #112	; 0x70
 800519a:	d04b      	beq.n	8005234 <HAL_TIM_ConfigClockSource+0x124>
 800519c:	2480      	movs	r4, #128	; 0x80
 800519e:	01a4      	lsls	r4, r4, #6
 80051a0:	42a3      	cmp	r3, r4
 80051a2:	d1e4      	bne.n	800516e <HAL_TIM_ConfigClockSource+0x5e>
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80051a4:	6893      	ldr	r3, [r2, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051a6:	4c2c      	ldr	r4, [pc, #176]	; (8005258 <HAL_TIM_ConfigClockSource+0x148>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80051a8:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051aa:	401c      	ands	r4, r3
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80051ac:	688b      	ldr	r3, [r1, #8]
 80051ae:	68c9      	ldr	r1, [r1, #12]
 80051b0:	432b      	orrs	r3, r5
 80051b2:	0209      	lsls	r1, r1, #8
 80051b4:	430b      	orrs	r3, r1
 80051b6:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051b8:	6093      	str	r3, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80051ba:	2380      	movs	r3, #128	; 0x80
 80051bc:	6891      	ldr	r1, [r2, #8]
 80051be:	01db      	lsls	r3, r3, #7
 80051c0:	430b      	orrs	r3, r1
 80051c2:	6093      	str	r3, [r2, #8]
      break;
 80051c4:	e7d3      	b.n	800516e <HAL_TIM_ConfigClockSource+0x5e>
  switch (sClockSourceConfig->ClockSource)
 80051c6:	2110      	movs	r1, #16
 80051c8:	001c      	movs	r4, r3
 80051ca:	438c      	bics	r4, r1
 80051cc:	d1cf      	bne.n	800516e <HAL_TIM_ConfigClockSource+0x5e>
 80051ce:	e7db      	b.n	8005188 <HAL_TIM_ConfigClockSource+0x78>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80051d0:	684d      	ldr	r5, [r1, #4]
 80051d2:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 80051d4:	6a11      	ldr	r1, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051d6:	6a16      	ldr	r6, [r2, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80051d8:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051da:	43a6      	bics	r6, r4
 80051dc:	6216      	str	r6, [r2, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051de:	26f0      	movs	r6, #240	; 0xf0
  tmpccmr1 = TIMx->CCMR1;
 80051e0:	6994      	ldr	r4, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051e2:	43b4      	bics	r4, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80051e4:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051e6:	240a      	movs	r4, #10
 80051e8:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 80051ea:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 80051ec:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 80051ee:	6211      	str	r1, [r2, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 80051f0:	2170      	movs	r1, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 80051f2:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80051f4:	438b      	bics	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80051f6:	3929      	subs	r1, #41	; 0x29
 80051f8:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 80051fa:	6093      	str	r3, [r2, #8]
}
 80051fc:	e7b7      	b.n	800516e <HAL_TIM_ConfigClockSource+0x5e>
  __HAL_LOCK(htim);
 80051fe:	2002      	movs	r0, #2
 8005200:	e7bc      	b.n	800517c <HAL_TIM_ConfigClockSource+0x6c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005202:	2510      	movs	r5, #16
 8005204:	6a14      	ldr	r4, [r2, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005206:	684b      	ldr	r3, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005208:	43ac      	bics	r4, r5
      TIM_TI2_ConfigInputStage(htim->Instance,
 800520a:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800520c:	6214      	str	r4, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 800520e:	6995      	ldr	r5, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005210:	4e12      	ldr	r6, [pc, #72]	; (800525c <HAL_TIM_ConfigClockSource+0x14c>)
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005212:	0309      	lsls	r1, r1, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005214:	4035      	ands	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005216:	4329      	orrs	r1, r5
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005218:	25a0      	movs	r5, #160	; 0xa0
  tmpccer = TIMx->CCER;
 800521a:	6a14      	ldr	r4, [r2, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 800521c:	6191      	str	r1, [r2, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 800521e:	2170      	movs	r1, #112	; 0x70
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005220:	43ac      	bics	r4, r5
  tmpccer |= (TIM_ICPolarity << 4U);
 8005222:	011b      	lsls	r3, r3, #4
 8005224:	4323      	orrs	r3, r4
  TIMx->CCER = tmpccer;
 8005226:	6213      	str	r3, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8005228:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800522a:	438b      	bics	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800522c:	3909      	subs	r1, #9
 800522e:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8005230:	6093      	str	r3, [r2, #8]
}
 8005232:	e79c      	b.n	800516e <HAL_TIM_ConfigClockSource+0x5e>
  tmpsmcr = TIMx->SMCR;
 8005234:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005236:	4c08      	ldr	r4, [pc, #32]	; (8005258 <HAL_TIM_ConfigClockSource+0x148>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005238:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800523a:	401c      	ands	r4, r3
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800523c:	688b      	ldr	r3, [r1, #8]
 800523e:	68c9      	ldr	r1, [r1, #12]
 8005240:	432b      	orrs	r3, r5
 8005242:	0209      	lsls	r1, r1, #8
 8005244:	430b      	orrs	r3, r1
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005246:	2177      	movs	r1, #119	; 0x77
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005248:	4323      	orrs	r3, r4
  TIMx->SMCR = tmpsmcr;
 800524a:	6093      	str	r3, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 800524c:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800524e:	430b      	orrs	r3, r1
      htim->Instance->SMCR = tmpsmcr;
 8005250:	6093      	str	r3, [r2, #8]
      break;
 8005252:	e78c      	b.n	800516e <HAL_TIM_ConfigClockSource+0x5e>
 8005254:	ffff0088 	.word	0xffff0088
 8005258:	ffff00ff 	.word	0xffff00ff
 800525c:	ffff0fff 	.word	0xffff0fff

08005260 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005260:	4a1f      	ldr	r2, [pc, #124]	; (80052e0 <TIM_Base_SetConfig+0x80>)
  tmpcr1 = TIMx->CR1;
 8005262:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005264:	4290      	cmp	r0, r2
 8005266:	d027      	beq.n	80052b8 <TIM_Base_SetConfig+0x58>
 8005268:	2280      	movs	r2, #128	; 0x80
 800526a:	05d2      	lsls	r2, r2, #23
 800526c:	4290      	cmp	r0, r2
 800526e:	d01a      	beq.n	80052a6 <TIM_Base_SetConfig+0x46>
 8005270:	4a1c      	ldr	r2, [pc, #112]	; (80052e4 <TIM_Base_SetConfig+0x84>)
 8005272:	4290      	cmp	r0, r2
 8005274:	d017      	beq.n	80052a6 <TIM_Base_SetConfig+0x46>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005276:	4a1c      	ldr	r2, [pc, #112]	; (80052e8 <TIM_Base_SetConfig+0x88>)
 8005278:	4290      	cmp	r0, r2
 800527a:	d018      	beq.n	80052ae <TIM_Base_SetConfig+0x4e>
 800527c:	4a1b      	ldr	r2, [pc, #108]	; (80052ec <TIM_Base_SetConfig+0x8c>)
 800527e:	4290      	cmp	r0, r2
 8005280:	d01e      	beq.n	80052c0 <TIM_Base_SetConfig+0x60>
 8005282:	4a1b      	ldr	r2, [pc, #108]	; (80052f0 <TIM_Base_SetConfig+0x90>)
 8005284:	4290      	cmp	r0, r2
 8005286:	d01b      	beq.n	80052c0 <TIM_Base_SetConfig+0x60>
 8005288:	4a1a      	ldr	r2, [pc, #104]	; (80052f4 <TIM_Base_SetConfig+0x94>)
 800528a:	4290      	cmp	r0, r2
 800528c:	d018      	beq.n	80052c0 <TIM_Base_SetConfig+0x60>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800528e:	2280      	movs	r2, #128	; 0x80
 8005290:	4393      	bics	r3, r2
 8005292:	694a      	ldr	r2, [r1, #20]
 8005294:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8005296:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005298:	688b      	ldr	r3, [r1, #8]
 800529a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800529c:	680b      	ldr	r3, [r1, #0]
 800529e:	6283      	str	r3, [r0, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 80052a0:	2301      	movs	r3, #1
 80052a2:	6143      	str	r3, [r0, #20]
}
 80052a4:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052a6:	2270      	movs	r2, #112	; 0x70
 80052a8:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 80052aa:	684a      	ldr	r2, [r1, #4]
 80052ac:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 80052ae:	4a12      	ldr	r2, [pc, #72]	; (80052f8 <TIM_Base_SetConfig+0x98>)
 80052b0:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052b2:	68ca      	ldr	r2, [r1, #12]
 80052b4:	4313      	orrs	r3, r2
 80052b6:	e7ea      	b.n	800528e <TIM_Base_SetConfig+0x2e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052b8:	2270      	movs	r2, #112	; 0x70
 80052ba:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 80052bc:	684a      	ldr	r2, [r1, #4]
 80052be:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 80052c0:	4a0d      	ldr	r2, [pc, #52]	; (80052f8 <TIM_Base_SetConfig+0x98>)
 80052c2:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052c4:	68ca      	ldr	r2, [r1, #12]
 80052c6:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052c8:	2280      	movs	r2, #128	; 0x80
 80052ca:	4393      	bics	r3, r2
 80052cc:	694a      	ldr	r2, [r1, #20]
 80052ce:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80052d0:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052d2:	688b      	ldr	r3, [r1, #8]
 80052d4:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80052d6:	680b      	ldr	r3, [r1, #0]
 80052d8:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80052da:	690b      	ldr	r3, [r1, #16]
 80052dc:	6303      	str	r3, [r0, #48]	; 0x30
 80052de:	e7df      	b.n	80052a0 <TIM_Base_SetConfig+0x40>
 80052e0:	40012c00 	.word	0x40012c00
 80052e4:	40000400 	.word	0x40000400
 80052e8:	40002000 	.word	0x40002000
 80052ec:	40014000 	.word	0x40014000
 80052f0:	40014400 	.word	0x40014400
 80052f4:	40014800 	.word	0x40014800
 80052f8:	fffffcff 	.word	0xfffffcff

080052fc <HAL_TIM_Base_Init>:
{
 80052fc:	b570      	push	{r4, r5, r6, lr}
 80052fe:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8005300:	d026      	beq.n	8005350 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8005302:	233d      	movs	r3, #61	; 0x3d
 8005304:	5cc3      	ldrb	r3, [r0, r3]
 8005306:	b2da      	uxtb	r2, r3
 8005308:	2b00      	cmp	r3, #0
 800530a:	d01c      	beq.n	8005346 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 800530c:	2302      	movs	r3, #2
 800530e:	253d      	movs	r5, #61	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005310:	0021      	movs	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8005312:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005314:	c901      	ldmia	r1!, {r0}
 8005316:	f7ff ffa3 	bl	8005260 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800531a:	2301      	movs	r3, #1
 800531c:	2246      	movs	r2, #70	; 0x46
  return HAL_OK;
 800531e:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005320:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005322:	3a08      	subs	r2, #8
 8005324:	54a3      	strb	r3, [r4, r2]
 8005326:	3201      	adds	r2, #1
 8005328:	54a3      	strb	r3, [r4, r2]
 800532a:	3201      	adds	r2, #1
 800532c:	54a3      	strb	r3, [r4, r2]
 800532e:	3201      	adds	r2, #1
 8005330:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005332:	3201      	adds	r2, #1
 8005334:	54a3      	strb	r3, [r4, r2]
 8005336:	3201      	adds	r2, #1
 8005338:	54a3      	strb	r3, [r4, r2]
 800533a:	3201      	adds	r2, #1
 800533c:	54a3      	strb	r3, [r4, r2]
 800533e:	3201      	adds	r2, #1
 8005340:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8005342:	5563      	strb	r3, [r4, r5]
}
 8005344:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8005346:	333c      	adds	r3, #60	; 0x3c
 8005348:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 800534a:	f7fe fb05 	bl	8003958 <HAL_TIM_Base_MspInit>
 800534e:	e7dd      	b.n	800530c <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 8005350:	2001      	movs	r0, #1
 8005352:	e7f7      	b.n	8005344 <HAL_TIM_Base_Init+0x48>

08005354 <HAL_TIM_PWM_Init>:
{
 8005354:	b570      	push	{r4, r5, r6, lr}
 8005356:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8005358:	d026      	beq.n	80053a8 <HAL_TIM_PWM_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 800535a:	233d      	movs	r3, #61	; 0x3d
 800535c:	5cc3      	ldrb	r3, [r0, r3]
 800535e:	b2da      	uxtb	r2, r3
 8005360:	2b00      	cmp	r3, #0
 8005362:	d01c      	beq.n	800539e <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8005364:	2302      	movs	r3, #2
 8005366:	253d      	movs	r5, #61	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005368:	0021      	movs	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 800536a:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800536c:	c901      	ldmia	r1!, {r0}
 800536e:	f7ff ff77 	bl	8005260 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005372:	2301      	movs	r3, #1
 8005374:	2246      	movs	r2, #70	; 0x46
  return HAL_OK;
 8005376:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005378:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800537a:	3a08      	subs	r2, #8
 800537c:	54a3      	strb	r3, [r4, r2]
 800537e:	3201      	adds	r2, #1
 8005380:	54a3      	strb	r3, [r4, r2]
 8005382:	3201      	adds	r2, #1
 8005384:	54a3      	strb	r3, [r4, r2]
 8005386:	3201      	adds	r2, #1
 8005388:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800538a:	3201      	adds	r2, #1
 800538c:	54a3      	strb	r3, [r4, r2]
 800538e:	3201      	adds	r2, #1
 8005390:	54a3      	strb	r3, [r4, r2]
 8005392:	3201      	adds	r2, #1
 8005394:	54a3      	strb	r3, [r4, r2]
 8005396:	3201      	adds	r2, #1
 8005398:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 800539a:	5563      	strb	r3, [r4, r5]
}
 800539c:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 800539e:	333c      	adds	r3, #60	; 0x3c
 80053a0:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_PWM_MspInit(htim);
 80053a2:	f7ff feb3 	bl	800510c <HAL_TIM_PWM_MspInit>
 80053a6:	e7dd      	b.n	8005364 <HAL_TIM_PWM_Init+0x10>
    return HAL_ERROR;
 80053a8:	2001      	movs	r0, #1
 80053aa:	e7f7      	b.n	800539c <HAL_TIM_PWM_Init+0x48>

080053ac <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053ac:	2210      	movs	r2, #16
 80053ae:	6a03      	ldr	r3, [r0, #32]
{
 80053b0:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053b2:	4393      	bics	r3, r2
 80053b4:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80053b6:	6a02      	ldr	r2, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80053b8:	4c16      	ldr	r4, [pc, #88]	; (8005414 <TIM_OC2_SetConfig+0x68>)
  tmpcr2 =  TIMx->CR2;
 80053ba:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80053bc:	6985      	ldr	r5, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80053be:	4025      	ands	r5, r4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053c0:	680c      	ldr	r4, [r1, #0]
 80053c2:	0224      	lsls	r4, r4, #8
 80053c4:	4325      	orrs	r5, r4
  tmpccer &= ~TIM_CCER_CC2P;
 80053c6:	2420      	movs	r4, #32
 80053c8:	43a2      	bics	r2, r4
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80053ca:	688c      	ldr	r4, [r1, #8]
 80053cc:	0124      	lsls	r4, r4, #4
 80053ce:	4322      	orrs	r2, r4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80053d0:	4c11      	ldr	r4, [pc, #68]	; (8005418 <TIM_OC2_SetConfig+0x6c>)
 80053d2:	42a0      	cmp	r0, r4
 80053d4:	d015      	beq.n	8005402 <TIM_OC2_SetConfig+0x56>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053d6:	4c11      	ldr	r4, [pc, #68]	; (800541c <TIM_OC2_SetConfig+0x70>)
 80053d8:	42a0      	cmp	r0, r4
 80053da:	d005      	beq.n	80053e8 <TIM_OC2_SetConfig+0x3c>
 80053dc:	4c10      	ldr	r4, [pc, #64]	; (8005420 <TIM_OC2_SetConfig+0x74>)
 80053de:	42a0      	cmp	r0, r4
 80053e0:	d002      	beq.n	80053e8 <TIM_OC2_SetConfig+0x3c>
 80053e2:	4c10      	ldr	r4, [pc, #64]	; (8005424 <TIM_OC2_SetConfig+0x78>)
 80053e4:	42a0      	cmp	r0, r4
 80053e6:	d106      	bne.n	80053f6 <TIM_OC2_SetConfig+0x4a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80053e8:	4c0f      	ldr	r4, [pc, #60]	; (8005428 <TIM_OC2_SetConfig+0x7c>)
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80053ea:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80053ec:	401c      	ands	r4, r3
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80053ee:	698b      	ldr	r3, [r1, #24]
 80053f0:	4333      	orrs	r3, r6
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	4323      	orrs	r3, r4
  TIMx->CR2 = tmpcr2;
 80053f6:	6043      	str	r3, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 80053f8:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 80053fa:	6185      	str	r5, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80053fc:	6383      	str	r3, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80053fe:	6202      	str	r2, [r0, #32]
}
 8005400:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer &= ~TIM_CCER_CC2NP;
 8005402:	2480      	movs	r4, #128	; 0x80
 8005404:	43a2      	bics	r2, r4
 8005406:	0014      	movs	r4, r2
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005408:	68ca      	ldr	r2, [r1, #12]
 800540a:	0112      	lsls	r2, r2, #4
 800540c:	4322      	orrs	r2, r4
    tmpccer &= ~TIM_CCER_CC2NE;
 800540e:	2440      	movs	r4, #64	; 0x40
 8005410:	43a2      	bics	r2, r4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005412:	e7e9      	b.n	80053e8 <TIM_OC2_SetConfig+0x3c>
 8005414:	ffff8cff 	.word	0xffff8cff
 8005418:	40012c00 	.word	0x40012c00
 800541c:	40014000 	.word	0x40014000
 8005420:	40014400 	.word	0x40014400
 8005424:	40014800 	.word	0x40014800
 8005428:	fffff3ff 	.word	0xfffff3ff

0800542c <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 800542c:	233c      	movs	r3, #60	; 0x3c
{
 800542e:	b570      	push	{r4, r5, r6, lr}
 8005430:	0014      	movs	r4, r2
  __HAL_LOCK(htim);
 8005432:	5cc2      	ldrb	r2, [r0, r3]
{
 8005434:	0005      	movs	r5, r0
 8005436:	000e      	movs	r6, r1
  __HAL_LOCK(htim);
 8005438:	2a01      	cmp	r2, #1
 800543a:	d055      	beq.n	80054e8 <HAL_TIM_PWM_ConfigChannel+0xbc>
 800543c:	2201      	movs	r2, #1
 800543e:	54c2      	strb	r2, [r0, r3]
  switch (Channel)
 8005440:	2c08      	cmp	r4, #8
 8005442:	d030      	beq.n	80054a6 <HAL_TIM_PWM_ConfigChannel+0x7a>
 8005444:	d81a      	bhi.n	800547c <HAL_TIM_PWM_ConfigChannel+0x50>
 8005446:	2c00      	cmp	r4, #0
 8005448:	d03d      	beq.n	80054c6 <HAL_TIM_PWM_ConfigChannel+0x9a>
 800544a:	2c04      	cmp	r4, #4
 800544c:	d111      	bne.n	8005472 <HAL_TIM_PWM_ConfigChannel+0x46>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800544e:	6800      	ldr	r0, [r0, #0]
 8005450:	f7ff ffac 	bl	80053ac <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005454:	2280      	movs	r2, #128	; 0x80
 8005456:	682b      	ldr	r3, [r5, #0]
 8005458:	0112      	lsls	r2, r2, #4
 800545a:	6999      	ldr	r1, [r3, #24]
 800545c:	430a      	orrs	r2, r1
 800545e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005460:	699a      	ldr	r2, [r3, #24]
 8005462:	4922      	ldr	r1, [pc, #136]	; (80054ec <HAL_TIM_PWM_ConfigChannel+0xc0>)
 8005464:	400a      	ands	r2, r1
 8005466:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005468:	6932      	ldr	r2, [r6, #16]
 800546a:	6999      	ldr	r1, [r3, #24]
 800546c:	0212      	lsls	r2, r2, #8
 800546e:	430a      	orrs	r2, r1
 8005470:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8005472:	233c      	movs	r3, #60	; 0x3c
 8005474:	2200      	movs	r2, #0
  return HAL_OK;
 8005476:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 8005478:	54ea      	strb	r2, [r5, r3]
}
 800547a:	bd70      	pop	{r4, r5, r6, pc}
  switch (Channel)
 800547c:	2c0c      	cmp	r4, #12
 800547e:	d1f8      	bne.n	8005472 <HAL_TIM_PWM_ConfigChannel+0x46>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005480:	6800      	ldr	r0, [r0, #0]
 8005482:	f7ff fe09 	bl	8005098 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005486:	2280      	movs	r2, #128	; 0x80
 8005488:	682b      	ldr	r3, [r5, #0]
 800548a:	0112      	lsls	r2, r2, #4
 800548c:	69d9      	ldr	r1, [r3, #28]
 800548e:	430a      	orrs	r2, r1
 8005490:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005492:	69da      	ldr	r2, [r3, #28]
 8005494:	4915      	ldr	r1, [pc, #84]	; (80054ec <HAL_TIM_PWM_ConfigChannel+0xc0>)
 8005496:	400a      	ands	r2, r1
 8005498:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800549a:	6932      	ldr	r2, [r6, #16]
 800549c:	69d9      	ldr	r1, [r3, #28]
 800549e:	0212      	lsls	r2, r2, #8
 80054a0:	430a      	orrs	r2, r1
 80054a2:	61da      	str	r2, [r3, #28]
      break;
 80054a4:	e7e5      	b.n	8005472 <HAL_TIM_PWM_ConfigChannel+0x46>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80054a6:	6800      	ldr	r0, [r0, #0]
 80054a8:	f7ff fdb2 	bl	8005010 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80054ac:	2104      	movs	r1, #4
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80054ae:	682b      	ldr	r3, [r5, #0]
 80054b0:	69da      	ldr	r2, [r3, #28]
 80054b2:	4314      	orrs	r4, r2
 80054b4:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80054b6:	69da      	ldr	r2, [r3, #28]
 80054b8:	438a      	bics	r2, r1
 80054ba:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80054bc:	69da      	ldr	r2, [r3, #28]
 80054be:	6931      	ldr	r1, [r6, #16]
 80054c0:	430a      	orrs	r2, r1
 80054c2:	61da      	str	r2, [r3, #28]
      break;
 80054c4:	e7d5      	b.n	8005472 <HAL_TIM_PWM_ConfigChannel+0x46>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80054c6:	6800      	ldr	r0, [r0, #0]
 80054c8:	f7ff fd6a 	bl	8004fa0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80054cc:	2108      	movs	r1, #8
 80054ce:	682b      	ldr	r3, [r5, #0]
 80054d0:	699a      	ldr	r2, [r3, #24]
 80054d2:	430a      	orrs	r2, r1
 80054d4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80054d6:	699a      	ldr	r2, [r3, #24]
 80054d8:	3904      	subs	r1, #4
 80054da:	438a      	bics	r2, r1
 80054dc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80054de:	699a      	ldr	r2, [r3, #24]
 80054e0:	6931      	ldr	r1, [r6, #16]
 80054e2:	430a      	orrs	r2, r1
 80054e4:	619a      	str	r2, [r3, #24]
      break;
 80054e6:	e7c4      	b.n	8005472 <HAL_TIM_PWM_ConfigChannel+0x46>
  __HAL_LOCK(htim);
 80054e8:	2002      	movs	r0, #2
 80054ea:	e7c6      	b.n	800547a <HAL_TIM_PWM_ConfigChannel+0x4e>
 80054ec:	fffffbff 	.word	0xfffffbff

080054f0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054f0:	233c      	movs	r3, #60	; 0x3c
{
 80054f2:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 80054f4:	5cc3      	ldrb	r3, [r0, r3]
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d024      	beq.n	8005544 <HAL_TIMEx_MasterConfigSynchronization+0x54>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054fa:	233d      	movs	r3, #61	; 0x3d
 80054fc:	2202      	movs	r2, #2

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054fe:	2570      	movs	r5, #112	; 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 8005500:	54c2      	strb	r2, [r0, r3]
  tmpcr2 = htim->Instance->CR2;
 8005502:	6803      	ldr	r3, [r0, #0]
 8005504:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8005506:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8005508:	43aa      	bics	r2, r5
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800550a:	680d      	ldr	r5, [r1, #0]
 800550c:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800550e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005510:	4a0d      	ldr	r2, [pc, #52]	; (8005548 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d009      	beq.n	800552a <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 8005516:	2280      	movs	r2, #128	; 0x80
 8005518:	05d2      	lsls	r2, r2, #23
 800551a:	4293      	cmp	r3, r2
 800551c:	d005      	beq.n	800552a <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 800551e:	4a0b      	ldr	r2, [pc, #44]	; (800554c <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d002      	beq.n	800552a <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 8005524:	4a0a      	ldr	r2, [pc, #40]	; (8005550 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d104      	bne.n	8005534 <HAL_TIMEx_MasterConfigSynchronization+0x44>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800552a:	2280      	movs	r2, #128	; 0x80
 800552c:	4394      	bics	r4, r2
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800552e:	684a      	ldr	r2, [r1, #4]
 8005530:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005532:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005534:	233d      	movs	r3, #61	; 0x3d
 8005536:	2201      	movs	r2, #1
 8005538:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 800553a:	2200      	movs	r2, #0
 800553c:	3b01      	subs	r3, #1
 800553e:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 8005540:	2000      	movs	r0, #0
}
 8005542:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 8005544:	2002      	movs	r0, #2
 8005546:	e7fc      	b.n	8005542 <HAL_TIMEx_MasterConfigSynchronization+0x52>
 8005548:	40012c00 	.word	0x40012c00
 800554c:	40000400 	.word	0x40000400
 8005550:	40014000 	.word	0x40014000

08005554 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005554:	b570      	push	{r4, r5, r6, lr}
 8005556:	0004      	movs	r4, r0
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005558:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800555a:	69c5      	ldr	r5, [r0, #28]
 800555c:	6882      	ldr	r2, [r0, #8]
 800555e:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005560:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005562:	4302      	orrs	r2, r0
 8005564:	6960      	ldr	r0, [r4, #20]
 8005566:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005568:	4865      	ldr	r0, [pc, #404]	; (8005700 <UART_SetConfig+0x1ac>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800556a:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800556c:	4001      	ands	r1, r0
 800556e:	430a      	orrs	r2, r1
 8005570:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005572:	685a      	ldr	r2, [r3, #4]
 8005574:	4963      	ldr	r1, [pc, #396]	; (8005704 <UART_SetConfig+0x1b0>)
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  tmpreg |= huart->Init.OneBitSampling;
 8005576:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005578:	400a      	ands	r2, r1
 800557a:	68e1      	ldr	r1, [r4, #12]
 800557c:	430a      	orrs	r2, r1
 800557e:	605a      	str	r2, [r3, #4]
  tmpreg |= huart->Init.OneBitSampling;
 8005580:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005582:	6899      	ldr	r1, [r3, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8005584:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005586:	4860      	ldr	r0, [pc, #384]	; (8005708 <UART_SetConfig+0x1b4>)
 8005588:	4001      	ands	r1, r0
 800558a:	430a      	orrs	r2, r1
 800558c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800558e:	4a5f      	ldr	r2, [pc, #380]	; (800570c <UART_SetConfig+0x1b8>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d034      	beq.n	80055fe <UART_SetConfig+0xaa>
 8005594:	4a5e      	ldr	r2, [pc, #376]	; (8005710 <UART_SetConfig+0x1bc>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d014      	beq.n	80055c4 <UART_SetConfig+0x70>
 800559a:	4a5e      	ldr	r2, [pc, #376]	; (8005714 <UART_SetConfig+0x1c0>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d100      	bne.n	80055a2 <UART_SetConfig+0x4e>
 80055a0:	e084      	b.n	80056ac <UART_SetConfig+0x158>
 80055a2:	4a5d      	ldr	r2, [pc, #372]	; (8005718 <UART_SetConfig+0x1c4>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d031      	beq.n	800560c <UART_SetConfig+0xb8>
 80055a8:	4a5c      	ldr	r2, [pc, #368]	; (800571c <UART_SetConfig+0x1c8>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d02e      	beq.n	800560c <UART_SetConfig+0xb8>
 80055ae:	4a5c      	ldr	r2, [pc, #368]	; (8005720 <UART_SetConfig+0x1cc>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d02b      	beq.n	800560c <UART_SetConfig+0xb8>
 80055b4:	4a5b      	ldr	r2, [pc, #364]	; (8005724 <UART_SetConfig+0x1d0>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d028      	beq.n	800560c <UART_SetConfig+0xb8>
 80055ba:	4a5b      	ldr	r2, [pc, #364]	; (8005728 <UART_SetConfig+0x1d4>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d025      	beq.n	800560c <UART_SetConfig+0xb8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80055c0:	2001      	movs	r0, #1
 80055c2:	e018      	b.n	80055f6 <UART_SetConfig+0xa2>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80055c4:	22c0      	movs	r2, #192	; 0xc0
 80055c6:	2180      	movs	r1, #128	; 0x80
 80055c8:	4b58      	ldr	r3, [pc, #352]	; (800572c <UART_SetConfig+0x1d8>)
 80055ca:	0292      	lsls	r2, r2, #10
 80055cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ce:	0289      	lsls	r1, r1, #10
 80055d0:	4013      	ands	r3, r2
 80055d2:	428b      	cmp	r3, r1
 80055d4:	d046      	beq.n	8005664 <UART_SetConfig+0x110>
 80055d6:	d831      	bhi.n	800563c <UART_SetConfig+0xe8>
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d017      	beq.n	800560c <UART_SetConfig+0xb8>
 80055dc:	2280      	movs	r2, #128	; 0x80
 80055de:	0252      	lsls	r2, r2, #9
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d1ed      	bne.n	80055c0 <UART_SetConfig+0x6c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055e4:	2380      	movs	r3, #128	; 0x80
 80055e6:	021b      	lsls	r3, r3, #8
 80055e8:	429d      	cmp	r5, r3
 80055ea:	d044      	beq.n	8005676 <UART_SetConfig+0x122>
        break;
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055ec:	f7ff fb34 	bl	8004c58 <HAL_RCC_GetSysClockFreq>
        pclk = 0U;
        ret = HAL_ERROR;
        break;
    }

    if (pclk != 0U)
 80055f0:	2800      	cmp	r0, #0
 80055f2:	d113      	bne.n	800561c <UART_SetConfig+0xc8>
 80055f4:	2000      	movs	r0, #0
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80055f6:	2300      	movs	r3, #0
 80055f8:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 80055fa:	66a3      	str	r3, [r4, #104]	; 0x68

  return ret;
}
 80055fc:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80055fe:	4b4b      	ldr	r3, [pc, #300]	; (800572c <UART_SetConfig+0x1d8>)
 8005600:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005602:	2303      	movs	r3, #3
 8005604:	4013      	ands	r3, r2
 8005606:	3b01      	subs	r3, #1
 8005608:	2b02      	cmp	r3, #2
 800560a:	d91f      	bls.n	800564c <UART_SetConfig+0xf8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800560c:	2380      	movs	r3, #128	; 0x80
 800560e:	021b      	lsls	r3, r3, #8
 8005610:	429d      	cmp	r5, r3
 8005612:	d065      	beq.n	80056e0 <UART_SetConfig+0x18c>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005614:	f7ff fbfc 	bl	8004e10 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005618:	2800      	cmp	r0, #0
 800561a:	d0eb      	beq.n	80055f4 <UART_SetConfig+0xa0>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800561c:	6863      	ldr	r3, [r4, #4]
 800561e:	6861      	ldr	r1, [r4, #4]
 8005620:	085b      	lsrs	r3, r3, #1
 8005622:	1818      	adds	r0, r3, r0
 8005624:	f7fa fd8a 	bl	800013c <__udivsi3>
 8005628:	0400      	lsls	r0, r0, #16
 800562a:	0c00      	lsrs	r0, r0, #16
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800562c:	0002      	movs	r2, r0
 800562e:	4b40      	ldr	r3, [pc, #256]	; (8005730 <UART_SetConfig+0x1dc>)
 8005630:	3a10      	subs	r2, #16
 8005632:	429a      	cmp	r2, r3
 8005634:	d8c4      	bhi.n	80055c0 <UART_SetConfig+0x6c>
        huart->Instance->BRR = usartdiv;
 8005636:	6823      	ldr	r3, [r4, #0]
 8005638:	60d8      	str	r0, [r3, #12]
 800563a:	e7db      	b.n	80055f4 <UART_SetConfig+0xa0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800563c:	4293      	cmp	r3, r2
 800563e:	d1bf      	bne.n	80055c0 <UART_SetConfig+0x6c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005640:	2380      	movs	r3, #128	; 0x80
 8005642:	021b      	lsls	r3, r3, #8
 8005644:	429d      	cmp	r5, r3
 8005646:	d058      	beq.n	80056fa <UART_SetConfig+0x1a6>
    switch (clocksource)
 8005648:	483a      	ldr	r0, [pc, #232]	; (8005734 <UART_SetConfig+0x1e0>)
 800564a:	e7e7      	b.n	800561c <UART_SetConfig+0xc8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800564c:	2080      	movs	r0, #128	; 0x80
 800564e:	4a3a      	ldr	r2, [pc, #232]	; (8005738 <UART_SetConfig+0x1e4>)
 8005650:	0200      	lsls	r0, r0, #8
 8005652:	5cd3      	ldrb	r3, [r2, r3]
 8005654:	4285      	cmp	r5, r0
 8005656:	d00c      	beq.n	8005672 <UART_SetConfig+0x11e>
    switch (clocksource)
 8005658:	2b04      	cmp	r3, #4
 800565a:	d0c7      	beq.n	80055ec <UART_SetConfig+0x98>
 800565c:	d939      	bls.n	80056d2 <UART_SetConfig+0x17e>
 800565e:	2b08      	cmp	r3, #8
 8005660:	d0dc      	beq.n	800561c <UART_SetConfig+0xc8>
 8005662:	e7ad      	b.n	80055c0 <UART_SetConfig+0x6c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005664:	2080      	movs	r0, #128	; 0x80
 8005666:	0200      	lsls	r0, r0, #8
 8005668:	4285      	cmp	r5, r0
 800566a:	d1d7      	bne.n	800561c <UART_SetConfig+0xc8>
    switch (clocksource)
 800566c:	2080      	movs	r0, #128	; 0x80
 800566e:	0240      	lsls	r0, r0, #9
 8005670:	e006      	b.n	8005680 <UART_SetConfig+0x12c>
 8005672:	2b04      	cmp	r3, #4
 8005674:	d137      	bne.n	80056e6 <UART_SetConfig+0x192>
        pclk = HAL_RCC_GetSysClockFreq();
 8005676:	f7ff faef 	bl	8004c58 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 800567a:	2800      	cmp	r0, #0
 800567c:	d0ba      	beq.n	80055f4 <UART_SetConfig+0xa0>
 800567e:	0040      	lsls	r0, r0, #1
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005680:	6863      	ldr	r3, [r4, #4]
 8005682:	6861      	ldr	r1, [r4, #4]
 8005684:	085b      	lsrs	r3, r3, #1
 8005686:	1818      	adds	r0, r3, r0
 8005688:	f7fa fd58 	bl	800013c <__udivsi3>
 800568c:	0403      	lsls	r3, r0, #16
 800568e:	0c1a      	lsrs	r2, r3, #16
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005690:	4927      	ldr	r1, [pc, #156]	; (8005730 <UART_SetConfig+0x1dc>)
 8005692:	3a10      	subs	r2, #16
 8005694:	428a      	cmp	r2, r1
 8005696:	d900      	bls.n	800569a <UART_SetConfig+0x146>
 8005698:	e792      	b.n	80055c0 <UART_SetConfig+0x6c>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800569a:	4a28      	ldr	r2, [pc, #160]	; (800573c <UART_SetConfig+0x1e8>)
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800569c:	031b      	lsls	r3, r3, #12
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800569e:	4010      	ands	r0, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80056a0:	0f5b      	lsrs	r3, r3, #29
        huart->Instance->BRR = brrtemp;
 80056a2:	6822      	ldr	r2, [r4, #0]
 80056a4:	4318      	orrs	r0, r3
 80056a6:	60d0      	str	r0, [r2, #12]
 80056a8:	2000      	movs	r0, #0
 80056aa:	e7a4      	b.n	80055f6 <UART_SetConfig+0xa2>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80056ac:	22c0      	movs	r2, #192	; 0xc0
 80056ae:	2180      	movs	r1, #128	; 0x80
 80056b0:	4b1e      	ldr	r3, [pc, #120]	; (800572c <UART_SetConfig+0x1d8>)
 80056b2:	0312      	lsls	r2, r2, #12
 80056b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b6:	0309      	lsls	r1, r1, #12
 80056b8:	4013      	ands	r3, r2
 80056ba:	428b      	cmp	r3, r1
 80056bc:	d0d2      	beq.n	8005664 <UART_SetConfig+0x110>
 80056be:	d8bd      	bhi.n	800563c <UART_SetConfig+0xe8>
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d0a3      	beq.n	800560c <UART_SetConfig+0xb8>
 80056c4:	2280      	movs	r2, #128	; 0x80
 80056c6:	02d2      	lsls	r2, r2, #11
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d100      	bne.n	80056ce <UART_SetConfig+0x17a>
 80056cc:	e78a      	b.n	80055e4 <UART_SetConfig+0x90>
    switch (clocksource)
 80056ce:	2001      	movs	r0, #1
 80056d0:	e791      	b.n	80055f6 <UART_SetConfig+0xa2>
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d09e      	beq.n	8005614 <UART_SetConfig+0xc0>
 80056d6:	2b02      	cmp	r3, #2
 80056d8:	d000      	beq.n	80056dc <UART_SetConfig+0x188>
 80056da:	e771      	b.n	80055c0 <UART_SetConfig+0x6c>
 80056dc:	4815      	ldr	r0, [pc, #84]	; (8005734 <UART_SetConfig+0x1e0>)
 80056de:	e79d      	b.n	800561c <UART_SetConfig+0xc8>
        pclk = HAL_RCC_GetPCLK1Freq();
 80056e0:	f7ff fb96 	bl	8004e10 <HAL_RCC_GetPCLK1Freq>
        break;
 80056e4:	e7c9      	b.n	800567a <UART_SetConfig+0x126>
    switch (clocksource)
 80056e6:	2b04      	cmp	r3, #4
 80056e8:	d902      	bls.n	80056f0 <UART_SetConfig+0x19c>
 80056ea:	2b08      	cmp	r3, #8
 80056ec:	d0be      	beq.n	800566c <UART_SetConfig+0x118>
 80056ee:	e767      	b.n	80055c0 <UART_SetConfig+0x6c>
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d0f5      	beq.n	80056e0 <UART_SetConfig+0x18c>
 80056f4:	2b02      	cmp	r3, #2
 80056f6:	d000      	beq.n	80056fa <UART_SetConfig+0x1a6>
 80056f8:	e762      	b.n	80055c0 <UART_SetConfig+0x6c>
 80056fa:	4811      	ldr	r0, [pc, #68]	; (8005740 <UART_SetConfig+0x1ec>)
 80056fc:	e7c0      	b.n	8005680 <UART_SetConfig+0x12c>
 80056fe:	46c0      	nop			; (mov r8, r8)
 8005700:	efff69f3 	.word	0xefff69f3
 8005704:	ffffcfff 	.word	0xffffcfff
 8005708:	fffff4ff 	.word	0xfffff4ff
 800570c:	40013800 	.word	0x40013800
 8005710:	40004400 	.word	0x40004400
 8005714:	40004800 	.word	0x40004800
 8005718:	40004c00 	.word	0x40004c00
 800571c:	40005000 	.word	0x40005000
 8005720:	40011400 	.word	0x40011400
 8005724:	40011800 	.word	0x40011800
 8005728:	40011c00 	.word	0x40011c00
 800572c:	40021000 	.word	0x40021000
 8005730:	0000ffef 	.word	0x0000ffef
 8005734:	007a1200 	.word	0x007a1200
 8005738:	0800c2c4 	.word	0x0800c2c4
 800573c:	0000fff0 	.word	0x0000fff0
 8005740:	00f42400 	.word	0x00f42400

08005744 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005744:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8005746:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005748:	07da      	lsls	r2, r3, #31
 800574a:	d506      	bpl.n	800575a <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800574c:	6801      	ldr	r1, [r0, #0]
 800574e:	4c28      	ldr	r4, [pc, #160]	; (80057f0 <UART_AdvFeatureConfig+0xac>)
 8005750:	684a      	ldr	r2, [r1, #4]
 8005752:	4022      	ands	r2, r4
 8005754:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8005756:	4322      	orrs	r2, r4
 8005758:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800575a:	079a      	lsls	r2, r3, #30
 800575c:	d506      	bpl.n	800576c <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800575e:	6801      	ldr	r1, [r0, #0]
 8005760:	4c24      	ldr	r4, [pc, #144]	; (80057f4 <UART_AdvFeatureConfig+0xb0>)
 8005762:	684a      	ldr	r2, [r1, #4]
 8005764:	4022      	ands	r2, r4
 8005766:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8005768:	4322      	orrs	r2, r4
 800576a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800576c:	075a      	lsls	r2, r3, #29
 800576e:	d506      	bpl.n	800577e <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005770:	6801      	ldr	r1, [r0, #0]
 8005772:	4c21      	ldr	r4, [pc, #132]	; (80057f8 <UART_AdvFeatureConfig+0xb4>)
 8005774:	684a      	ldr	r2, [r1, #4]
 8005776:	4022      	ands	r2, r4
 8005778:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800577a:	4322      	orrs	r2, r4
 800577c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800577e:	071a      	lsls	r2, r3, #28
 8005780:	d506      	bpl.n	8005790 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005782:	6801      	ldr	r1, [r0, #0]
 8005784:	4c1d      	ldr	r4, [pc, #116]	; (80057fc <UART_AdvFeatureConfig+0xb8>)
 8005786:	684a      	ldr	r2, [r1, #4]
 8005788:	4022      	ands	r2, r4
 800578a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800578c:	4322      	orrs	r2, r4
 800578e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005790:	06da      	lsls	r2, r3, #27
 8005792:	d506      	bpl.n	80057a2 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005794:	6801      	ldr	r1, [r0, #0]
 8005796:	4c1a      	ldr	r4, [pc, #104]	; (8005800 <UART_AdvFeatureConfig+0xbc>)
 8005798:	688a      	ldr	r2, [r1, #8]
 800579a:	4022      	ands	r2, r4
 800579c:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800579e:	4322      	orrs	r2, r4
 80057a0:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80057a2:	069a      	lsls	r2, r3, #26
 80057a4:	d506      	bpl.n	80057b4 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80057a6:	6801      	ldr	r1, [r0, #0]
 80057a8:	4c16      	ldr	r4, [pc, #88]	; (8005804 <UART_AdvFeatureConfig+0xc0>)
 80057aa:	688a      	ldr	r2, [r1, #8]
 80057ac:	4022      	ands	r2, r4
 80057ae:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80057b0:	4322      	orrs	r2, r4
 80057b2:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80057b4:	065a      	lsls	r2, r3, #25
 80057b6:	d50a      	bpl.n	80057ce <UART_AdvFeatureConfig+0x8a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80057b8:	6801      	ldr	r1, [r0, #0]
 80057ba:	4d13      	ldr	r5, [pc, #76]	; (8005808 <UART_AdvFeatureConfig+0xc4>)
 80057bc:	684a      	ldr	r2, [r1, #4]
 80057be:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80057c0:	402a      	ands	r2, r5
 80057c2:	4322      	orrs	r2, r4
 80057c4:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80057c6:	2280      	movs	r2, #128	; 0x80
 80057c8:	0352      	lsls	r2, r2, #13
 80057ca:	4294      	cmp	r4, r2
 80057cc:	d009      	beq.n	80057e2 <UART_AdvFeatureConfig+0x9e>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80057ce:	061b      	lsls	r3, r3, #24
 80057d0:	d506      	bpl.n	80057e0 <UART_AdvFeatureConfig+0x9c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80057d2:	6802      	ldr	r2, [r0, #0]
 80057d4:	490d      	ldr	r1, [pc, #52]	; (800580c <UART_AdvFeatureConfig+0xc8>)
 80057d6:	6853      	ldr	r3, [r2, #4]
 80057d8:	400b      	ands	r3, r1
 80057da:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80057dc:	430b      	orrs	r3, r1
 80057de:	6053      	str	r3, [r2, #4]
  }
}
 80057e0:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80057e2:	684a      	ldr	r2, [r1, #4]
 80057e4:	4c0a      	ldr	r4, [pc, #40]	; (8005810 <UART_AdvFeatureConfig+0xcc>)
 80057e6:	4022      	ands	r2, r4
 80057e8:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80057ea:	4322      	orrs	r2, r4
 80057ec:	604a      	str	r2, [r1, #4]
 80057ee:	e7ee      	b.n	80057ce <UART_AdvFeatureConfig+0x8a>
 80057f0:	fffdffff 	.word	0xfffdffff
 80057f4:	fffeffff 	.word	0xfffeffff
 80057f8:	fffbffff 	.word	0xfffbffff
 80057fc:	ffff7fff 	.word	0xffff7fff
 8005800:	ffffefff 	.word	0xffffefff
 8005804:	ffffdfff 	.word	0xffffdfff
 8005808:	ffefffff 	.word	0xffefffff
 800580c:	fff7ffff 	.word	0xfff7ffff
 8005810:	ff9fffff 	.word	0xff9fffff

08005814 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005816:	4657      	mov	r7, sl
 8005818:	464e      	mov	r6, r9
 800581a:	4645      	mov	r5, r8
 800581c:	46de      	mov	lr, fp
 800581e:	b5e0      	push	{r5, r6, r7, lr}
 8005820:	0016      	movs	r6, r2
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005822:	2204      	movs	r2, #4
 8005824:	4692      	mov	sl, r2
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005826:	2280      	movs	r2, #128	; 0x80
 8005828:	0112      	lsls	r2, r2, #4
{
 800582a:	4699      	mov	r9, r3
 800582c:	4680      	mov	r8, r0
 800582e:	000d      	movs	r5, r1
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005830:	4693      	mov	fp, r2
{
 8005832:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8005834:	6803      	ldr	r3, [r0, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005836:	e001      	b.n	800583c <UART_WaitOnFlagUntilTimeout+0x28>
    if (Timeout != HAL_MAX_DELAY)
 8005838:	1c7a      	adds	r2, r7, #1
 800583a:	d10d      	bne.n	8005858 <UART_WaitOnFlagUntilTimeout+0x44>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800583c:	69dc      	ldr	r4, [r3, #28]
 800583e:	402c      	ands	r4, r5
 8005840:	1b64      	subs	r4, r4, r5
 8005842:	4262      	negs	r2, r4
 8005844:	4154      	adcs	r4, r2
 8005846:	42b4      	cmp	r4, r6
 8005848:	d0f6      	beq.n	8005838 <UART_WaitOnFlagUntilTimeout+0x24>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 800584a:	2000      	movs	r0, #0
}
 800584c:	bcf0      	pop	{r4, r5, r6, r7}
 800584e:	46bb      	mov	fp, r7
 8005850:	46b2      	mov	sl, r6
 8005852:	46a9      	mov	r9, r5
 8005854:	46a0      	mov	r8, r4
 8005856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005858:	f7fe f9dc 	bl	8003c14 <HAL_GetTick>
 800585c:	464b      	mov	r3, r9
 800585e:	1ac0      	subs	r0, r0, r3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005860:	4643      	mov	r3, r8
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005866:	42b8      	cmp	r0, r7
 8005868:	d81e      	bhi.n	80058a8 <UART_WaitOnFlagUntilTimeout+0x94>
 800586a:	2f00      	cmp	r7, #0
 800586c:	d01c      	beq.n	80058a8 <UART_WaitOnFlagUntilTimeout+0x94>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800586e:	4651      	mov	r1, sl
 8005870:	4211      	tst	r1, r2
 8005872:	d0e3      	beq.n	800583c <UART_WaitOnFlagUntilTimeout+0x28>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005874:	4659      	mov	r1, fp
 8005876:	69da      	ldr	r2, [r3, #28]
 8005878:	420a      	tst	r2, r1
 800587a:	d0df      	beq.n	800583c <UART_WaitOnFlagUntilTimeout+0x28>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800587c:	6219      	str	r1, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	4912      	ldr	r1, [pc, #72]	; (80058cc <UART_WaitOnFlagUntilTimeout+0xb8>)
          return HAL_TIMEOUT;
 8005882:	2003      	movs	r0, #3
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005884:	400a      	ands	r2, r1
 8005886:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005888:	689a      	ldr	r2, [r3, #8]
 800588a:	31a3      	adds	r1, #163	; 0xa3
 800588c:	31ff      	adds	r1, #255	; 0xff
 800588e:	438a      	bics	r2, r1
 8005890:	609a      	str	r2, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 8005892:	2320      	movs	r3, #32
 8005894:	4642      	mov	r2, r8
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005896:	4641      	mov	r1, r8
          huart->gState = HAL_UART_STATE_READY;
 8005898:	6793      	str	r3, [r2, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800589a:	67d3      	str	r3, [r2, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800589c:	2280      	movs	r2, #128	; 0x80
 800589e:	508b      	str	r3, [r1, r2]
          __HAL_UNLOCK(huart);
 80058a0:	2200      	movs	r2, #0
 80058a2:	3354      	adds	r3, #84	; 0x54
 80058a4:	54ca      	strb	r2, [r1, r3]
          return HAL_TIMEOUT;
 80058a6:	e7d1      	b.n	800584c <UART_WaitOnFlagUntilTimeout+0x38>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80058a8:	4908      	ldr	r1, [pc, #32]	; (80058cc <UART_WaitOnFlagUntilTimeout+0xb8>)
        __HAL_UNLOCK(huart);
 80058aa:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80058ac:	400a      	ands	r2, r1
 80058ae:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058b0:	689a      	ldr	r2, [r3, #8]
 80058b2:	31a3      	adds	r1, #163	; 0xa3
 80058b4:	31ff      	adds	r1, #255	; 0xff
 80058b6:	438a      	bics	r2, r1
 80058b8:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80058ba:	2320      	movs	r3, #32
 80058bc:	4642      	mov	r2, r8
        __HAL_UNLOCK(huart);
 80058be:	4641      	mov	r1, r8
        huart->gState = HAL_UART_STATE_READY;
 80058c0:	6793      	str	r3, [r2, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80058c2:	67d3      	str	r3, [r2, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 80058c4:	2200      	movs	r2, #0
 80058c6:	3354      	adds	r3, #84	; 0x54
 80058c8:	54ca      	strb	r2, [r1, r3]
        return HAL_TIMEOUT;
 80058ca:	e7bf      	b.n	800584c <UART_WaitOnFlagUntilTimeout+0x38>
 80058cc:	fffffe5f 	.word	0xfffffe5f

080058d0 <HAL_UART_Transmit>:
{
 80058d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058d2:	4647      	mov	r7, r8
 80058d4:	46ce      	mov	lr, r9
 80058d6:	b580      	push	{r7, lr}
 80058d8:	001f      	movs	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80058da:	6f83      	ldr	r3, [r0, #120]	; 0x78
{
 80058dc:	0004      	movs	r4, r0
 80058de:	000d      	movs	r5, r1
 80058e0:	0016      	movs	r6, r2
 80058e2:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 80058e4:	2b20      	cmp	r3, #32
 80058e6:	d155      	bne.n	8005994 <HAL_UART_Transmit+0xc4>
    if ((pData == NULL) || (Size == 0U))
 80058e8:	2900      	cmp	r1, #0
 80058ea:	d04d      	beq.n	8005988 <HAL_UART_Transmit+0xb8>
 80058ec:	2a00      	cmp	r2, #0
 80058ee:	d04b      	beq.n	8005988 <HAL_UART_Transmit+0xb8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058f0:	2380      	movs	r3, #128	; 0x80
 80058f2:	6882      	ldr	r2, [r0, #8]
 80058f4:	015b      	lsls	r3, r3, #5
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d041      	beq.n	800597e <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 80058fa:	2374      	movs	r3, #116	; 0x74
 80058fc:	5ce2      	ldrb	r2, [r4, r3]
 80058fe:	2a01      	cmp	r2, #1
 8005900:	d048      	beq.n	8005994 <HAL_UART_Transmit+0xc4>
 8005902:	2201      	movs	r2, #1
 8005904:	54e2      	strb	r2, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005906:	2200      	movs	r2, #0
 8005908:	330c      	adds	r3, #12
 800590a:	50e2      	str	r2, [r4, r3]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800590c:	3b5f      	subs	r3, #95	; 0x5f
 800590e:	67a3      	str	r3, [r4, #120]	; 0x78
    tickstart = HAL_GetTick();
 8005910:	f7fe f980 	bl	8003c14 <HAL_GetTick>
    huart->TxXferSize  = Size;
 8005914:	2350      	movs	r3, #80	; 0x50
      pdata16bits = NULL;
 8005916:	2200      	movs	r2, #0
    huart->TxXferSize  = Size;
 8005918:	52e6      	strh	r6, [r4, r3]
    huart->TxXferCount = Size;
 800591a:	3302      	adds	r3, #2
 800591c:	52e6      	strh	r6, [r4, r3]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800591e:	2380      	movs	r3, #128	; 0x80
      pdata16bits = NULL;
 8005920:	4691      	mov	r9, r2
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005922:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 8005924:	4680      	mov	r8, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005926:	015b      	lsls	r3, r3, #5
 8005928:	429a      	cmp	r2, r3
 800592a:	d035      	beq.n	8005998 <HAL_UART_Transmit+0xc8>
    __HAL_UNLOCK(huart);
 800592c:	2374      	movs	r3, #116	; 0x74
 800592e:	2200      	movs	r2, #0
 8005930:	54e2      	strb	r2, [r4, r3]
    while (huart->TxXferCount > 0U)
 8005932:	3b22      	subs	r3, #34	; 0x22
 8005934:	5ae3      	ldrh	r3, [r4, r3]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d036      	beq.n	80059a8 <HAL_UART_Transmit+0xd8>
      huart->TxXferCount--;
 800593a:	2652      	movs	r6, #82	; 0x52
 800593c:	e00a      	b.n	8005954 <HAL_UART_Transmit+0x84>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800593e:	782b      	ldrb	r3, [r5, #0]
 8005940:	6822      	ldr	r2, [r4, #0]
        pdata8bits++;
 8005942:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005944:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8005946:	5ba2      	ldrh	r2, [r4, r6]
 8005948:	3a01      	subs	r2, #1
 800594a:	b292      	uxth	r2, r2
 800594c:	53a2      	strh	r2, [r4, r6]
    while (huart->TxXferCount > 0U)
 800594e:	5ba3      	ldrh	r3, [r4, r6]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d029      	beq.n	80059a8 <HAL_UART_Transmit+0xd8>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005954:	4643      	mov	r3, r8
 8005956:	2200      	movs	r2, #0
 8005958:	2180      	movs	r1, #128	; 0x80
 800595a:	0020      	movs	r0, r4
 800595c:	9700      	str	r7, [sp, #0]
 800595e:	f7ff ff59 	bl	8005814 <UART_WaitOnFlagUntilTimeout>
 8005962:	2800      	cmp	r0, #0
 8005964:	d11e      	bne.n	80059a4 <HAL_UART_Transmit+0xd4>
      if (pdata8bits == NULL)
 8005966:	2d00      	cmp	r5, #0
 8005968:	d1e9      	bne.n	800593e <HAL_UART_Transmit+0x6e>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800596a:	464b      	mov	r3, r9
 800596c:	881b      	ldrh	r3, [r3, #0]
 800596e:	6822      	ldr	r2, [r4, #0]
 8005970:	05db      	lsls	r3, r3, #23
 8005972:	0ddb      	lsrs	r3, r3, #23
 8005974:	8513      	strh	r3, [r2, #40]	; 0x28
        pdata16bits++;
 8005976:	2302      	movs	r3, #2
 8005978:	469c      	mov	ip, r3
 800597a:	44e1      	add	r9, ip
 800597c:	e7e3      	b.n	8005946 <HAL_UART_Transmit+0x76>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800597e:	6903      	ldr	r3, [r0, #16]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d1ba      	bne.n	80058fa <HAL_UART_Transmit+0x2a>
      if ((((uint32_t)pData) & 1U) != 0U)
 8005984:	07cb      	lsls	r3, r1, #31
 8005986:	d5b8      	bpl.n	80058fa <HAL_UART_Transmit+0x2a>
      return  HAL_ERROR;
 8005988:	2001      	movs	r0, #1
}
 800598a:	b003      	add	sp, #12
 800598c:	bcc0      	pop	{r6, r7}
 800598e:	46b9      	mov	r9, r7
 8005990:	46b0      	mov	r8, r6
 8005992:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8005994:	2002      	movs	r0, #2
 8005996:	e7f8      	b.n	800598a <HAL_UART_Transmit+0xba>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005998:	6923      	ldr	r3, [r4, #16]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d1c6      	bne.n	800592c <HAL_UART_Transmit+0x5c>
 800599e:	46a9      	mov	r9, r5
      pdata8bits  = NULL;
 80059a0:	2500      	movs	r5, #0
 80059a2:	e7c3      	b.n	800592c <HAL_UART_Transmit+0x5c>
        return HAL_TIMEOUT;
 80059a4:	2003      	movs	r0, #3
 80059a6:	e7f0      	b.n	800598a <HAL_UART_Transmit+0xba>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80059a8:	4643      	mov	r3, r8
 80059aa:	2200      	movs	r2, #0
 80059ac:	2140      	movs	r1, #64	; 0x40
 80059ae:	0020      	movs	r0, r4
 80059b0:	9700      	str	r7, [sp, #0]
 80059b2:	f7ff ff2f 	bl	8005814 <UART_WaitOnFlagUntilTimeout>
 80059b6:	2800      	cmp	r0, #0
 80059b8:	d1f4      	bne.n	80059a4 <HAL_UART_Transmit+0xd4>
    huart->gState = HAL_UART_STATE_READY;
 80059ba:	2320      	movs	r3, #32
 80059bc:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 80059be:	e7e4      	b.n	800598a <HAL_UART_Transmit+0xba>

080059c0 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059c0:	2380      	movs	r3, #128	; 0x80
 80059c2:	2200      	movs	r2, #0
{
 80059c4:	b530      	push	{r4, r5, lr}
 80059c6:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059c8:	50c2      	str	r2, [r0, r3]
{
 80059ca:	b083      	sub	sp, #12
  tickstart = HAL_GetTick();
 80059cc:	f7fe f922 	bl	8003c14 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80059d0:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80059d2:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	0712      	lsls	r2, r2, #28
 80059d8:	d40c      	bmi.n	80059f4 <UART_CheckIdleState+0x34>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	075b      	lsls	r3, r3, #29
 80059de:	d418      	bmi.n	8005a12 <UART_CheckIdleState+0x52>
  huart->gState = HAL_UART_STATE_READY;
 80059e0:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 80059e2:	2274      	movs	r2, #116	; 0x74
  huart->gState = HAL_UART_STATE_READY;
 80059e4:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80059e6:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059e8:	2300      	movs	r3, #0
  return HAL_OK;
 80059ea:	2000      	movs	r0, #0
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059ec:	6623      	str	r3, [r4, #96]	; 0x60
  __HAL_UNLOCK(huart);
 80059ee:	54a3      	strb	r3, [r4, r2]
}
 80059f0:	b003      	add	sp, #12
 80059f2:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059f4:	2180      	movs	r1, #128	; 0x80
 80059f6:	4b0d      	ldr	r3, [pc, #52]	; (8005a2c <UART_CheckIdleState+0x6c>)
 80059f8:	2200      	movs	r2, #0
 80059fa:	9300      	str	r3, [sp, #0]
 80059fc:	0389      	lsls	r1, r1, #14
 80059fe:	0003      	movs	r3, r0
 8005a00:	0020      	movs	r0, r4
 8005a02:	f7ff ff07 	bl	8005814 <UART_WaitOnFlagUntilTimeout>
 8005a06:	2800      	cmp	r0, #0
 8005a08:	d10e      	bne.n	8005a28 <UART_CheckIdleState+0x68>
 8005a0a:	6823      	ldr	r3, [r4, #0]
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	075b      	lsls	r3, r3, #29
 8005a10:	d5e6      	bpl.n	80059e0 <UART_CheckIdleState+0x20>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a12:	2180      	movs	r1, #128	; 0x80
 8005a14:	4b05      	ldr	r3, [pc, #20]	; (8005a2c <UART_CheckIdleState+0x6c>)
 8005a16:	2200      	movs	r2, #0
 8005a18:	9300      	str	r3, [sp, #0]
 8005a1a:	0020      	movs	r0, r4
 8005a1c:	002b      	movs	r3, r5
 8005a1e:	03c9      	lsls	r1, r1, #15
 8005a20:	f7ff fef8 	bl	8005814 <UART_WaitOnFlagUntilTimeout>
 8005a24:	2800      	cmp	r0, #0
 8005a26:	d0db      	beq.n	80059e0 <UART_CheckIdleState+0x20>
      return HAL_TIMEOUT;
 8005a28:	2003      	movs	r0, #3
 8005a2a:	e7e1      	b.n	80059f0 <UART_CheckIdleState+0x30>
 8005a2c:	01ffffff 	.word	0x01ffffff

08005a30 <HAL_UART_Init>:
{
 8005a30:	b510      	push	{r4, lr}
 8005a32:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8005a34:	d026      	beq.n	8005a84 <HAL_UART_Init+0x54>
  if (huart->gState == HAL_UART_STATE_RESET)
 8005a36:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d025      	beq.n	8005a88 <HAL_UART_Init+0x58>
  huart->gState = HAL_UART_STATE_BUSY;
 8005a3c:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8005a3e:	2101      	movs	r1, #1
 8005a40:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005a42:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8005a44:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a46:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8005a48:	438b      	bics	r3, r1
 8005a4a:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a4c:	f7ff fd82 	bl	8005554 <UART_SetConfig>
 8005a50:	2801      	cmp	r0, #1
 8005a52:	d017      	beq.n	8005a84 <HAL_UART_Init+0x54>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d110      	bne.n	8005a7c <HAL_UART_Init+0x4c>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a5a:	6823      	ldr	r3, [r4, #0]
 8005a5c:	490d      	ldr	r1, [pc, #52]	; (8005a94 <HAL_UART_Init+0x64>)
 8005a5e:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8005a60:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a62:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a64:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a66:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a68:	689a      	ldr	r2, [r3, #8]
 8005a6a:	438a      	bics	r2, r1
 8005a6c:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	3929      	subs	r1, #41	; 0x29
 8005a72:	430a      	orrs	r2, r1
 8005a74:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8005a76:	f7ff ffa3 	bl	80059c0 <UART_CheckIdleState>
}
 8005a7a:	bd10      	pop	{r4, pc}
    UART_AdvFeatureConfig(huart);
 8005a7c:	0020      	movs	r0, r4
 8005a7e:	f7ff fe61 	bl	8005744 <UART_AdvFeatureConfig>
 8005a82:	e7ea      	b.n	8005a5a <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8005a84:	2001      	movs	r0, #1
 8005a86:	e7f8      	b.n	8005a7a <HAL_UART_Init+0x4a>
    huart->Lock = HAL_UNLOCKED;
 8005a88:	2274      	movs	r2, #116	; 0x74
 8005a8a:	5483      	strb	r3, [r0, r2]
    HAL_UART_MspInit(huart);
 8005a8c:	f7fe f824 	bl	8003ad8 <HAL_UART_MspInit>
 8005a90:	e7d4      	b.n	8005a3c <HAL_UART_Init+0xc>
 8005a92:	46c0      	nop			; (mov r8, r8)
 8005a94:	ffffb7ff 	.word	0xffffb7ff

08005a98 <_Z10mapArduinofffff>:
//
// Created by hu on 2020/7/11.
//
#include <ArduinoWrapper.hpp>

float mapArduino(float val, float I_Min, float I_Max, float O_Min, float O_Max) {
 8005a98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a9a:	46c6      	mov	lr, r8
 8005a9c:	b500      	push	{lr}
 8005a9e:	1c0d      	adds	r5, r1, #0
 8005aa0:	1c07      	adds	r7, r0, #0
    return (((val - I_Min) * ((O_Max - O_Min) / (I_Max - I_Min))) + O_Min);
 8005aa2:	1c19      	adds	r1, r3, #0
 8005aa4:	9806      	ldr	r0, [sp, #24]
float mapArduino(float val, float I_Min, float I_Max, float O_Min, float O_Max) {
 8005aa6:	4690      	mov	r8, r2
 8005aa8:	1c1c      	adds	r4, r3, #0
    return (((val - I_Min) * ((O_Max - O_Min) / (I_Max - I_Min))) + O_Min);
 8005aaa:	f7fb fa3d 	bl	8000f28 <__aeabi_fsub>
 8005aae:	1c29      	adds	r1, r5, #0
 8005ab0:	1c06      	adds	r6, r0, #0
 8005ab2:	4640      	mov	r0, r8
 8005ab4:	f7fb fa38 	bl	8000f28 <__aeabi_fsub>
 8005ab8:	1c01      	adds	r1, r0, #0
 8005aba:	1c30      	adds	r0, r6, #0
 8005abc:	f7fa ff50 	bl	8000960 <__aeabi_fdiv>
 8005ac0:	1c29      	adds	r1, r5, #0
 8005ac2:	1c06      	adds	r6, r0, #0
 8005ac4:	1c38      	adds	r0, r7, #0
 8005ac6:	f7fb fa2f 	bl	8000f28 <__aeabi_fsub>
 8005aca:	1c01      	adds	r1, r0, #0
 8005acc:	1c30      	adds	r0, r6, #0
 8005ace:	f7fb f911 	bl	8000cf4 <__aeabi_fmul>
 8005ad2:	1c21      	adds	r1, r4, #0
 8005ad4:	f7fa fda8 	bl	8000628 <__aeabi_fadd>
}
 8005ad8:	bc80      	pop	{r7}
 8005ada:	46b8      	mov	r8, r7
 8005adc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ade:	46c0      	nop			; (mov r8, r8)

08005ae0 <__io_putchar>:

PUTCHAR_PROTOTYPE
{
 8005ae0:	b500      	push	{lr}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	9001      	str	r0, [sp, #4]
    /* Place your implementation of fputc here */
    /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
    HAL_UART_Transmit(&huart2, (uint8_t *) &ch, 1, 0xFFFF);
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	4b03      	ldr	r3, [pc, #12]	; (8005af8 <__io_putchar+0x18>)
 8005aea:	a901      	add	r1, sp, #4
 8005aec:	4803      	ldr	r0, [pc, #12]	; (8005afc <__io_putchar+0x1c>)
 8005aee:	f7ff feef 	bl	80058d0 <HAL_UART_Transmit>

    return ch;
}
 8005af2:	9801      	ldr	r0, [sp, #4]
 8005af4:	b003      	add	sp, #12
 8005af6:	bd00      	pop	{pc}
 8005af8:	0000ffff 	.word	0x0000ffff
 8005afc:	20000364 	.word	0x20000364

08005b00 <_ZN6I2Cdev9readBytesEhhhPht>:
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev::readTimeout)
 * @return Number of bytes read (-1 indicates failure)
 */
int8_t I2Cdev::readBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length,
                         uint8_t *data, uint16_t timeout)
{
 8005b00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b02:	46c6      	mov	lr, r8
 8005b04:	b500      	push	{lr}
 8005b06:	b084      	sub	sp, #16
 8005b08:	001f      	movs	r7, r3
 8005b0a:	ab0a      	add	r3, sp, #40	; 0x28
 8005b0c:	881b      	ldrh	r3, [r3, #0]
 8005b0e:	000e      	movs	r6, r1
 8005b10:	4698      	mov	r8, r3
 8005b12:	0014      	movs	r4, r2
 8005b14:	0005      	movs	r5, r0
    Serial.print(regAddr, HEX);
    Serial.print("...");
#endif

    int8_t count = 0;
    uint32_t t1 = millis();
 8005b16:	f7fe f87d 	bl	8003c14 <HAL_GetTick>

    I2C_readBytesFromAddress(devAddr, regAddr, length, data);

    count = length; //TODO implement something meaningful, for now just making sure no error is thrown
#elif (I2CDEV_IMPLEMENTATION == I2CDEV_STM32_HAL)
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, devAddr << 1, regAddr,
 8005b1a:	4643      	mov	r3, r8
 8005b1c:	4809      	ldr	r0, [pc, #36]	; (8005b44 <_ZN6I2Cdev9readBytesEhhhPht+0x44>)
 8005b1e:	9302      	str	r3, [sp, #8]
 8005b20:	b2b2      	uxth	r2, r6
 8005b22:	2301      	movs	r3, #1
 8005b24:	0069      	lsls	r1, r5, #1
 8005b26:	9401      	str	r4, [sp, #4]
 8005b28:	9700      	str	r7, [sp, #0]
 8005b2a:	f7fe fc7f 	bl	800442c <HAL_I2C_Mem_Read>
                                                I2C_MEMADD_SIZE_8BIT, data, length, timeout);
    if (status == HAL_OK)
 8005b2e:	2800      	cmp	r0, #0
 8005b30:	d104      	bne.n	8005b3c <_ZN6I2Cdev9readBytesEhhhPht+0x3c>
    {
        count = length;
 8005b32:	b260      	sxtb	r0, r4
    Serial.print(count, DEC);
    Serial.println(" read).");
#endif

    return count;
}
 8005b34:	b004      	add	sp, #16
 8005b36:	bc80      	pop	{r7}
 8005b38:	46b8      	mov	r8, r7
 8005b3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        count = -1;
 8005b3c:	2001      	movs	r0, #1
 8005b3e:	4240      	negs	r0, r0
 8005b40:	e7f8      	b.n	8005b34 <_ZN6I2Cdev9readBytesEhhhPht+0x34>
 8005b42:	46c0      	nop			; (mov r8, r8)
 8005b44:	200002c0 	.word	0x200002c0

08005b48 <_ZN6I2Cdev8readByteEhhPht>:
{
 8005b48:	b500      	push	{lr}
 8005b4a:	b083      	sub	sp, #12
    return readBytes(devAddr, regAddr, 1, data, timeout);
 8005b4c:	9300      	str	r3, [sp, #0]
 8005b4e:	0013      	movs	r3, r2
 8005b50:	2201      	movs	r2, #1
 8005b52:	f7ff ffd5 	bl	8005b00 <_ZN6I2Cdev9readBytesEhhhPht>
}
 8005b56:	b003      	add	sp, #12
 8005b58:	bd00      	pop	{pc}
 8005b5a:	46c0      	nop			; (mov r8, r8)

08005b5c <_ZN6I2Cdev8readBitsEhhhhPht>:
{
 8005b5c:	b570      	push	{r4, r5, r6, lr}
 8005b5e:	b084      	sub	sp, #16
 8005b60:	001e      	movs	r6, r3
 8005b62:	ab08      	add	r3, sp, #32
 8005b64:	cb20      	ldmia	r3!, {r5}
 8005b66:	0014      	movs	r4, r2
 8005b68:	881b      	ldrh	r3, [r3, #0]
    return readBytes(devAddr, regAddr, 1, data, timeout);
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	9300      	str	r3, [sp, #0]
 8005b6e:	230f      	movs	r3, #15
 8005b70:	446b      	add	r3, sp
 8005b72:	f7ff ffc5 	bl	8005b00 <_ZN6I2Cdev9readBytesEhhhPht>
    if ((count = readByte(devAddr, regAddr, &b, timeout)) != 0)
 8005b76:	2800      	cmp	r0, #0
 8005b78:	d00a      	beq.n	8005b90 <_ZN6I2Cdev8readBitsEhhhhPht+0x34>
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	40b3      	lsls	r3, r6
        b &= mask;
 8005b7e:	466a      	mov	r2, sp
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
 8005b80:	1ba4      	subs	r4, r4, r6
 8005b82:	3401      	adds	r4, #1
 8005b84:	3b01      	subs	r3, #1
 8005b86:	40a3      	lsls	r3, r4
        b &= mask;
 8005b88:	7bd2      	ldrb	r2, [r2, #15]
        b >>= (bitStart - length + 1);
 8005b8a:	4013      	ands	r3, r2
 8005b8c:	4123      	asrs	r3, r4
 8005b8e:	702b      	strb	r3, [r5, #0]
}
 8005b90:	b004      	add	sp, #16
 8005b92:	bd70      	pop	{r4, r5, r6, pc}

08005b94 <_ZN6I2Cdev9readWordsEhhhPtt>:
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev::readTimeout)
 * @return Number of words read (0 indicates failure)
 */
int8_t I2Cdev::readWords(uint8_t devAddr, uint8_t regAddr, uint8_t length,
                         uint16_t *data, uint16_t timeout)
{
 8005b94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b96:	46d6      	mov	lr, sl
 8005b98:	464f      	mov	r7, r9
 8005b9a:	4646      	mov	r6, r8
 8005b9c:	b5c0      	push	{r6, r7, lr}
 8005b9e:	b084      	sub	sp, #16
 8005ba0:	4698      	mov	r8, r3
 8005ba2:	ab0c      	add	r3, sp, #48	; 0x30
 8005ba4:	0017      	movs	r7, r2
 8005ba6:	881b      	ldrh	r3, [r3, #0]

#elif (I2CDEV_IMPLEMENTATION == I2CDEV_MSP430)
    //TODO implement

#elif (I2CDEV_IMPLEMENTATION == I2CDEV_STM32_HAL)
    uint8_t * cache=(uint8_t*)malloc(sizeof(uint8_t)*2*length);
 8005ba8:	007e      	lsls	r6, r7, #1
{
 8005baa:	469a      	mov	sl, r3
 8005bac:	000d      	movs	r5, r1
 8005bae:	0004      	movs	r4, r0
    uint32_t t1 = millis();
 8005bb0:	f7fe f830 	bl	8003c14 <HAL_GetTick>
    uint8_t * cache=(uint8_t*)malloc(sizeof(uint8_t)*2*length);
 8005bb4:	0030      	movs	r0, r6
 8005bb6:	f000 fe4d 	bl	8006854 <malloc>
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, devAddr << 1, regAddr,
 8005bba:	4653      	mov	r3, sl
    uint8_t * cache=(uint8_t*)malloc(sizeof(uint8_t)*2*length);
 8005bbc:	4681      	mov	r9, r0
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, devAddr << 1, regAddr,
 8005bbe:	9302      	str	r3, [sp, #8]
 8005bc0:	9000      	str	r0, [sp, #0]
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	4812      	ldr	r0, [pc, #72]	; (8005c10 <_ZN6I2Cdev9readWordsEhhhPtt+0x7c>)
 8005bc6:	b2aa      	uxth	r2, r5
 8005bc8:	0061      	lsls	r1, r4, #1
 8005bca:	9601      	str	r6, [sp, #4]
 8005bcc:	f7fe fc2e 	bl	800442c <HAL_I2C_Mem_Read>
                                                I2C_MEMADD_SIZE_8BIT, cache, length*2, timeout);
    if (status == HAL_OK)
 8005bd0:	2800      	cmp	r0, #0
 8005bd2:	d119      	bne.n	8005c08 <_ZN6I2Cdev9readWordsEhhhPtt+0x74>
    {
        for (int i = 0; i < length; ++i)
 8005bd4:	2f00      	cmp	r7, #0
 8005bd6:	d00c      	beq.n	8005bf2 <_ZN6I2Cdev9readWordsEhhhPtt+0x5e>
 8005bd8:	464c      	mov	r4, r9
 8005bda:	2100      	movs	r1, #0
        {
            *(data+i)=(uint16_t)(*(cache+2*i)<<8)+(*(cache+2*i+1));
 8005bdc:	4642      	mov	r2, r8
 8005bde:	7826      	ldrb	r6, [r4, #0]
 8005be0:	7865      	ldrb	r5, [r4, #1]
 8005be2:	0236      	lsls	r6, r6, #8
 8005be4:	004b      	lsls	r3, r1, #1
 8005be6:	19ad      	adds	r5, r5, r6
        for (int i = 0; i < length; ++i)
 8005be8:	3101      	adds	r1, #1
            *(data+i)=(uint16_t)(*(cache+2*i)<<8)+(*(cache+2*i+1));
 8005bea:	52d5      	strh	r5, [r2, r3]
        for (int i = 0; i < length; ++i)
 8005bec:	3402      	adds	r4, #2
 8005bee:	42b9      	cmp	r1, r7
 8005bf0:	dbf4      	blt.n	8005bdc <_ZN6I2Cdev9readWordsEhhhPtt+0x48>
        }
        count = length;
 8005bf2:	b27f      	sxtb	r7, r7
#ifdef I2CDEV_SERIAL_DEBUG
    Serial.print(". Done (");
    Serial.print(count, DEC);
    Serial.println(" read).");
#endif
    free(cache);
 8005bf4:	4648      	mov	r0, r9
 8005bf6:	f000 fe37 	bl	8006868 <free>
    return count;
}
 8005bfa:	0038      	movs	r0, r7
 8005bfc:	b004      	add	sp, #16
 8005bfe:	bce0      	pop	{r5, r6, r7}
 8005c00:	46ba      	mov	sl, r7
 8005c02:	46b1      	mov	r9, r6
 8005c04:	46a8      	mov	r8, r5
 8005c06:	bdf0      	pop	{r4, r5, r6, r7, pc}
        count = -1;
 8005c08:	2701      	movs	r7, #1
 8005c0a:	427f      	negs	r7, r7
 8005c0c:	e7f2      	b.n	8005bf4 <_ZN6I2Cdev9readWordsEhhhPtt+0x60>
 8005c0e:	46c0      	nop			; (mov r8, r8)
 8005c10:	200002c0 	.word	0x200002c0

08005c14 <_ZN6I2Cdev8writeBitEhhhh>:
 * @param value New bit value to write
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum,
                      uint8_t data)
{
 8005c14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c16:	001f      	movs	r7, r3
    uint8_t b;
    readByte(devAddr, regAddr, &b);
 8005c18:	4b16      	ldr	r3, [pc, #88]	; (8005c74 <_ZN6I2Cdev8writeBitEhhhh+0x60>)
{
 8005c1a:	b087      	sub	sp, #28
    return readBytes(devAddr, regAddr, 1, data, timeout);
 8005c1c:	881b      	ldrh	r3, [r3, #0]
{
 8005c1e:	0016      	movs	r6, r2
    return readBytes(devAddr, regAddr, 1, data, timeout);
 8005c20:	9300      	str	r3, [sp, #0]
 8005c22:	2316      	movs	r3, #22
 8005c24:	2201      	movs	r2, #1
 8005c26:	446b      	add	r3, sp
{
 8005c28:	0004      	movs	r4, r0
 8005c2a:	000d      	movs	r5, r1
    return readBytes(devAddr, regAddr, 1, data, timeout);
 8005c2c:	f7ff ff68 	bl	8005b00 <_ZN6I2Cdev9readBytesEhhhPht>
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
 8005c30:	2f00      	cmp	r7, #0
 8005c32:	d019      	beq.n	8005c68 <_ZN6I2Cdev8writeBitEhhhh+0x54>
 8005c34:	2301      	movs	r3, #1
 8005c36:	466a      	mov	r2, sp
 8005c38:	40b3      	lsls	r3, r6
 8005c3a:	7d92      	ldrb	r2, [r2, #22]
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	2017      	movs	r0, #23
 8005c42:	466a      	mov	r2, sp
 8005c44:	4468      	add	r0, sp
 8005c46:	7593      	strb	r3, [r2, #22]
    return writeByte(devAddr, regAddr, b);
 8005c48:	7003      	strb	r3, [r0, #0]
    //        USCI_I2C_transmit(length,data);       // start transmitting

      I2C_writeBytesToAddress(devAddr, regAddr, length, data);

#elif (I2CDEV_IMPLEMENTATION == I2CDEV_STM32_HAL)
    status = HAL_I2C_Mem_Write(&hi2c1, devAddr << 1, regAddr,
 8005c4a:	2364      	movs	r3, #100	; 0x64
 8005c4c:	9302      	str	r3, [sp, #8]
 8005c4e:	3b63      	subs	r3, #99	; 0x63
 8005c50:	9301      	str	r3, [sp, #4]
 8005c52:	9000      	str	r0, [sp, #0]
 8005c54:	b2aa      	uxth	r2, r5
 8005c56:	0061      	lsls	r1, r4, #1
 8005c58:	4807      	ldr	r0, [pc, #28]	; (8005c78 <_ZN6I2Cdev8writeBitEhhhh+0x64>)
 8005c5a:	f7fe fb09 	bl	8004270 <HAL_I2C_Mem_Write>
                               I2C_MEMADD_SIZE_8BIT, data, length, I2CDEV_DEFAULT_WRITE_TIMEOUT);
#endif
    return status == 0;
 8005c5e:	4243      	negs	r3, r0
 8005c60:	4158      	adcs	r0, r3
    return writeByte(devAddr, regAddr, b);
 8005c62:	b2c0      	uxtb	r0, r0
}
 8005c64:	b007      	add	sp, #28
 8005c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
 8005c68:	2201      	movs	r2, #1
 8005c6a:	466b      	mov	r3, sp
 8005c6c:	40b2      	lsls	r2, r6
 8005c6e:	7d9b      	ldrb	r3, [r3, #22]
 8005c70:	4393      	bics	r3, r2
 8005c72:	e7e5      	b.n	8005c40 <_ZN6I2Cdev8writeBitEhhhh+0x2c>
 8005c74:	2000001c 	.word	0x2000001c
 8005c78:	200002c0 	.word	0x200002c0

08005c7c <_ZN6I2Cdev9writeBitsEhhhhh>:
{
 8005c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c7e:	46c6      	mov	lr, r8
 8005c80:	b500      	push	{lr}
 8005c82:	b086      	sub	sp, #24
 8005c84:	4698      	mov	r8, r3
 8005c86:	ab0c      	add	r3, sp, #48	; 0x30
 8005c88:	781f      	ldrb	r7, [r3, #0]
    if (readByte(devAddr, regAddr, &b) != 0)
 8005c8a:	4b1a      	ldr	r3, [pc, #104]	; (8005cf4 <_ZN6I2Cdev9writeBitsEhhhhh+0x78>)
{
 8005c8c:	0014      	movs	r4, r2
    return readBytes(devAddr, regAddr, 1, data, timeout);
 8005c8e:	881b      	ldrh	r3, [r3, #0]
 8005c90:	2201      	movs	r2, #1
 8005c92:	9300      	str	r3, [sp, #0]
 8005c94:	2316      	movs	r3, #22
 8005c96:	446b      	add	r3, sp
{
 8005c98:	0005      	movs	r5, r0
 8005c9a:	000e      	movs	r6, r1
    return readBytes(devAddr, regAddr, 1, data, timeout);
 8005c9c:	f7ff ff30 	bl	8005b00 <_ZN6I2Cdev9readBytesEhhhPht>
 8005ca0:	0003      	movs	r3, r0
        return false;
 8005ca2:	2000      	movs	r0, #0
    if (readByte(devAddr, regAddr, &b) != 0)
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d021      	beq.n	8005cec <_ZN6I2Cdev9writeBitsEhhhhh+0x70>
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
 8005ca8:	4643      	mov	r3, r8
 8005caa:	3001      	adds	r0, #1
 8005cac:	4642      	mov	r2, r8
 8005cae:	1ae4      	subs	r4, r4, r3
 8005cb0:	0003      	movs	r3, r0
 8005cb2:	4093      	lsls	r3, r2
 8005cb4:	3401      	adds	r4, #1
        b &= ~(mask); // zero all important bits in existing byte
 8005cb6:	466a      	mov	r2, sp
        data <<= (bitStart - length + 1); // shift data into correct position
 8005cb8:	40a7      	lsls	r7, r4
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
 8005cba:	3b01      	subs	r3, #1
 8005cbc:	40a3      	lsls	r3, r4
        b &= ~(mask); // zero all important bits in existing byte
 8005cbe:	7d92      	ldrb	r2, [r2, #22]
        data <<= (bitStart - length + 1); // shift data into correct position
 8005cc0:	b2ff      	uxtb	r7, r7
        b &= ~(mask); // zero all important bits in existing byte
 8005cc2:	439a      	bics	r2, r3
 8005cc4:	2417      	movs	r4, #23
        data &= mask; // zero all non-important bits in data
 8005cc6:	403b      	ands	r3, r7
        b |= data; // combine data with existing byte
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	466a      	mov	r2, sp
 8005ccc:	446c      	add	r4, sp
 8005cce:	7593      	strb	r3, [r2, #22]
        return writeByte(devAddr, regAddr, b);
 8005cd0:	7023      	strb	r3, [r4, #0]
    status = HAL_I2C_Mem_Write(&hi2c1, devAddr << 1, regAddr,
 8005cd2:	2364      	movs	r3, #100	; 0x64
 8005cd4:	9001      	str	r0, [sp, #4]
 8005cd6:	9302      	str	r3, [sp, #8]
 8005cd8:	4807      	ldr	r0, [pc, #28]	; (8005cf8 <_ZN6I2Cdev9writeBitsEhhhhh+0x7c>)
 8005cda:	3b63      	subs	r3, #99	; 0x63
 8005cdc:	b2b2      	uxth	r2, r6
 8005cde:	0069      	lsls	r1, r5, #1
 8005ce0:	9400      	str	r4, [sp, #0]
 8005ce2:	f7fe fac5 	bl	8004270 <HAL_I2C_Mem_Write>
    return status == 0;
 8005ce6:	4243      	negs	r3, r0
 8005ce8:	4158      	adcs	r0, r3
 8005cea:	b2c0      	uxtb	r0, r0
}
 8005cec:	b006      	add	sp, #24
 8005cee:	bc80      	pop	{r7}
 8005cf0:	46b8      	mov	r8, r7
 8005cf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cf4:	2000001c 	.word	0x2000001c
 8005cf8:	200002c0 	.word	0x200002c0

08005cfc <_ZN6I2Cdev9writeByteEhhh>:
{
 8005cfc:	2317      	movs	r3, #23
 8005cfe:	b500      	push	{lr}
 8005d00:	b087      	sub	sp, #28
 8005d02:	446b      	add	r3, sp
 8005d04:	701a      	strb	r2, [r3, #0]
    status = HAL_I2C_Mem_Write(&hi2c1, devAddr << 1, regAddr,
 8005d06:	000a      	movs	r2, r1
 8005d08:	0041      	lsls	r1, r0, #1
 8005d0a:	2064      	movs	r0, #100	; 0x64
 8005d0c:	9002      	str	r0, [sp, #8]
 8005d0e:	3863      	subs	r0, #99	; 0x63
 8005d10:	9001      	str	r0, [sp, #4]
 8005d12:	9300      	str	r3, [sp, #0]
 8005d14:	4804      	ldr	r0, [pc, #16]	; (8005d28 <_ZN6I2Cdev9writeByteEhhh+0x2c>)
 8005d16:	2301      	movs	r3, #1
 8005d18:	f7fe faaa 	bl	8004270 <HAL_I2C_Mem_Write>
    return status == 0;
 8005d1c:	4243      	negs	r3, r0
 8005d1e:	4158      	adcs	r0, r3
    return writeBytes(devAddr, regAddr, 1, &data);
 8005d20:	b2c0      	uxtb	r0, r0
}
 8005d22:	b007      	add	sp, #28
 8005d24:	bd00      	pop	{pc}
 8005d26:	46c0      	nop			; (mov r8, r8)
 8005d28:	200002c0 	.word	0x200002c0

08005d2c <_ZN6I2Cdev10writeBytesEhhhPh>:
{
 8005d2c:	b510      	push	{r4, lr}
 8005d2e:	0014      	movs	r4, r2
    status = HAL_I2C_Mem_Write(&hi2c1, devAddr << 1, regAddr,
 8005d30:	000a      	movs	r2, r1
 8005d32:	0041      	lsls	r1, r0, #1
 8005d34:	2064      	movs	r0, #100	; 0x64
{
 8005d36:	b084      	sub	sp, #16
    status = HAL_I2C_Mem_Write(&hi2c1, devAddr << 1, regAddr,
 8005d38:	9002      	str	r0, [sp, #8]
 8005d3a:	9300      	str	r3, [sp, #0]
 8005d3c:	9401      	str	r4, [sp, #4]
 8005d3e:	2301      	movs	r3, #1
 8005d40:	4803      	ldr	r0, [pc, #12]	; (8005d50 <_ZN6I2Cdev10writeBytesEhhhPh+0x24>)
 8005d42:	f7fe fa95 	bl	8004270 <HAL_I2C_Mem_Write>
    return status == 0;
 8005d46:	4243      	negs	r3, r0
 8005d48:	4158      	adcs	r0, r3
 8005d4a:	b2c0      	uxtb	r0, r0
}
 8005d4c:	b004      	add	sp, #16
 8005d4e:	bd10      	pop	{r4, pc}
 8005d50:	200002c0 	.word	0x200002c0

08005d54 <_ZN6I2Cdev10writeWordsEhhhPt>:
 * @param data Buffer to copy new data from
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeWords(uint8_t devAddr, uint8_t regAddr, uint8_t length,
                        uint16_t *data)
{
 8005d54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d56:	46ce      	mov	lr, r9
 8005d58:	4647      	mov	r7, r8
 8005d5a:	b580      	push	{r7, lr}
 8005d5c:	4681      	mov	r9, r0
 8005d5e:	b085      	sub	sp, #20
    Serial.print(" words to 0x");
    Serial.print(regAddr, HEX);
    Serial.print("...");
#endif
    uint8_t status = 0;
    uint8_t *cache=(uint8_t*)malloc(sizeof(uint8_t)*length);
 8005d60:	0010      	movs	r0, r2
{
 8005d62:	0015      	movs	r5, r2
 8005d64:	4688      	mov	r8, r1
 8005d66:	001e      	movs	r6, r3
    uint8_t *cache=(uint8_t*)malloc(sizeof(uint8_t)*length);
 8005d68:	f000 fd74 	bl	8006854 <malloc>
    //		//Delay until transmission completes
    //		while (I2C_isBusBusy()) ;
    //todo implement

#endif
    for (uint8_t i = 0; i < length * 2; i++)
 8005d6c:	2400      	movs	r4, #0
    uint8_t *cache=(uint8_t*)malloc(sizeof(uint8_t)*length);
 8005d6e:	0007      	movs	r7, r0
    for (uint8_t i = 0; i < length * 2; i++)
 8005d70:	0068      	lsls	r0, r5, #1
 8005d72:	2d00      	cmp	r5, #0
 8005d74:	d010      	beq.n	8005d98 <_ZN6I2Cdev10writeWordsEhhhPt+0x44>
 8005d76:	3401      	adds	r4, #1
 8005d78:	b2e4      	uxtb	r4, r4
 8005d7a:	4284      	cmp	r4, r0
 8005d7c:	dbfb      	blt.n	8005d76 <_ZN6I2Cdev10writeWordsEhhhPt+0x22>
    //    	//Disable TX interrupt
    //    	I2C_disableInterrupt(I2C_TRANSMIT_INTERRUPT);
    //    	//Disable I2C Module to stop operations
    //    	I2C_disable();
#elif (I2CDEV_IMPLEMENTATION == I2CDEV_STM32_HAL)
    for (int j = 0; j < length; ++j)
 8005d7e:	003b      	movs	r3, r7
 8005d80:	2400      	movs	r4, #0
 8005d82:	2d00      	cmp	r5, #0
 8005d84:	d008      	beq.n	8005d98 <_ZN6I2Cdev10writeWordsEhhhPt+0x44>
    {
        *(cache+2*j)=(uint8_t)(*(data+j)>>8);
 8005d86:	0062      	lsls	r2, r4, #1
 8005d88:	5ab2      	ldrh	r2, [r6, r2]
    for (int j = 0; j < length; ++j)
 8005d8a:	3401      	adds	r4, #1
        *(cache+2*j)=(uint8_t)(*(data+j)>>8);
 8005d8c:	1211      	asrs	r1, r2, #8
 8005d8e:	7019      	strb	r1, [r3, #0]
        *(cache+2*j+1)=(uint8_t)(*(data+j));
 8005d90:	705a      	strb	r2, [r3, #1]
    for (int j = 0; j < length; ++j)
 8005d92:	3302      	adds	r3, #2
 8005d94:	42ac      	cmp	r4, r5
 8005d96:	dbf6      	blt.n	8005d86 <_ZN6I2Cdev10writeWordsEhhhPt+0x32>
    }
    status = HAL_I2C_Mem_Write(&hi2c1, devAddr << 1, regAddr,
 8005d98:	4643      	mov	r3, r8
 8005d9a:	b29a      	uxth	r2, r3
 8005d9c:	464b      	mov	r3, r9
 8005d9e:	0059      	lsls	r1, r3, #1
 8005da0:	2364      	movs	r3, #100	; 0x64
 8005da2:	9001      	str	r0, [sp, #4]
 8005da4:	9302      	str	r3, [sp, #8]
 8005da6:	9700      	str	r7, [sp, #0]
 8005da8:	3b63      	subs	r3, #99	; 0x63
 8005daa:	4807      	ldr	r0, [pc, #28]	; (8005dc8 <_ZN6I2Cdev10writeWordsEhhhPt+0x74>)
 8005dac:	f7fe fa60 	bl	8004270 <HAL_I2C_Mem_Write>
 8005db0:	0004      	movs	r4, r0
                               I2C_MEMADD_SIZE_8BIT, (uint8_t *) cache, length*2, I2CDEV_DEFAULT_WRITE_TIMEOUT);
#endif
#ifdef I2CDEV_SERIAL_DEBUG
    Serial.println(". Done.");
#endif
    free(cache);
 8005db2:	0038      	movs	r0, r7
 8005db4:	f000 fd58 	bl	8006868 <free>
    return status == 0;
 8005db8:	4260      	negs	r0, r4
 8005dba:	4160      	adcs	r0, r4
 8005dbc:	b2c0      	uxtb	r0, r0
}
 8005dbe:	b005      	add	sp, #20
 8005dc0:	bcc0      	pop	{r6, r7}
 8005dc2:	46b9      	mov	r9, r7
 8005dc4:	46b0      	mov	r8, r6
 8005dc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005dc8:	200002c0 	.word	0x200002c0

08005dcc <_ZN6I2Cdev9writeWordEhht>:
{
 8005dcc:	b500      	push	{lr}
 8005dce:	b083      	sub	sp, #12
 8005dd0:	466b      	mov	r3, sp
 8005dd2:	3306      	adds	r3, #6
 8005dd4:	801a      	strh	r2, [r3, #0]
    return writeWords(devAddr, regAddr, 1, &data);
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f7ff ffbc 	bl	8005d54 <_ZN6I2Cdev10writeWordsEhhhPt>
}
 8005ddc:	b003      	add	sp, #12
 8005dde:	bd00      	pop	{pc}

08005de0 <_ZN7MPU605012getFIFOBytesEPhh.part.0>:
 */
uint8_t MPU6050::getFIFOByte() {
    I2Cdev::readByte(devAddr, MPU6050_RA_FIFO_R_W, buffer);
    return buffer[0];
}
void MPU6050::getFIFOBytes(uint8_t *data, uint8_t length) {
 8005de0:	b500      	push	{lr}
 8005de2:	000b      	movs	r3, r1
    if(length > 0){
        I2Cdev::readBytes(devAddr, MPU6050_RA_FIFO_R_W, length, data);
 8005de4:	4904      	ldr	r1, [pc, #16]	; (8005df8 <_ZN7MPU605012getFIFOBytesEPhh.part.0+0x18>)
void MPU6050::getFIFOBytes(uint8_t *data, uint8_t length) {
 8005de6:	b083      	sub	sp, #12
        I2Cdev::readBytes(devAddr, MPU6050_RA_FIFO_R_W, length, data);
 8005de8:	8809      	ldrh	r1, [r1, #0]
 8005dea:	7800      	ldrb	r0, [r0, #0]
 8005dec:	9100      	str	r1, [sp, #0]
 8005dee:	2174      	movs	r1, #116	; 0x74
 8005df0:	f7ff fe86 	bl	8005b00 <_ZN6I2Cdev9readBytesEhhhPht>
    } else {
        *data = 0;
    }
}
 8005df4:	b003      	add	sp, #12
 8005df6:	bd00      	pop	{pc}
 8005df8:	2000001c 	.word	0x2000001c

08005dfc <_ZN7MPU6050C1Eh>:
MPU6050::MPU6050(uint8_t address):devAddr(address) {
 8005dfc:	7001      	strb	r1, [r0, #0]
}
 8005dfe:	4770      	bx	lr

08005e00 <_ZN7MPU605010initializeEv>:
    I2Cdev::writeBits(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, source);
 8005e00:	2301      	movs	r3, #1
void MPU6050::initialize() {
 8005e02:	b530      	push	{r4, r5, lr}
 8005e04:	0004      	movs	r4, r0
    I2Cdev::writeBits(devAddr, MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, range);
 8005e06:	2500      	movs	r5, #0
void MPU6050::initialize() {
 8005e08:	b083      	sub	sp, #12
    I2Cdev::writeBits(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, source);
 8005e0a:	2202      	movs	r2, #2
 8005e0c:	216b      	movs	r1, #107	; 0x6b
 8005e0e:	7800      	ldrb	r0, [r0, #0]
 8005e10:	9300      	str	r3, [sp, #0]
 8005e12:	3302      	adds	r3, #2
 8005e14:	f7ff ff32 	bl	8005c7c <_ZN6I2Cdev9writeBitsEhhhhh>
    I2Cdev::writeBits(devAddr, MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, range);
 8005e18:	2302      	movs	r3, #2
 8005e1a:	2204      	movs	r2, #4
 8005e1c:	211b      	movs	r1, #27
 8005e1e:	7820      	ldrb	r0, [r4, #0]
 8005e20:	9500      	str	r5, [sp, #0]
 8005e22:	f7ff ff2b 	bl	8005c7c <_ZN6I2Cdev9writeBitsEhhhhh>
    I2Cdev::writeBits(devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, range);
 8005e26:	2302      	movs	r3, #2
 8005e28:	2204      	movs	r2, #4
 8005e2a:	211c      	movs	r1, #28
 8005e2c:	7820      	ldrb	r0, [r4, #0]
 8005e2e:	9500      	str	r5, [sp, #0]
 8005e30:	f7ff ff24 	bl	8005c7c <_ZN6I2Cdev9writeBitsEhhhhh>
    I2Cdev::writeBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, enabled);
 8005e34:	2300      	movs	r3, #0
 8005e36:	2206      	movs	r2, #6
 8005e38:	216b      	movs	r1, #107	; 0x6b
 8005e3a:	7820      	ldrb	r0, [r4, #0]
 8005e3c:	f7ff feea 	bl	8005c14 <_ZN6I2Cdev8writeBitEhhhh>
}
 8005e40:	b003      	add	sp, #12
 8005e42:	bd30      	pop	{r4, r5, pc}

08005e44 <_ZN7MPU605014testConnectionEv>:
bool MPU6050::testConnection() {
 8005e44:	b510      	push	{r4, lr}
 8005e46:	0004      	movs	r4, r0
 * @see MPU6050_RA_WHO_AM_I
 * @see MPU6050_WHO_AM_I_BIT
 * @see MPU6050_WHO_AM_I_LENGTH
 */
uint8_t MPU6050::getDeviceID() {
    I2Cdev::readBits(devAddr, MPU6050_RA_WHO_AM_I, MPU6050_WHO_AM_I_BIT, MPU6050_WHO_AM_I_LENGTH, buffer);
 8005e48:	4b09      	ldr	r3, [pc, #36]	; (8005e70 <_ZN7MPU605014testConnectionEv+0x2c>)
bool MPU6050::testConnection() {
 8005e4a:	b082      	sub	sp, #8
    I2Cdev::readBits(devAddr, MPU6050_RA_WHO_AM_I, MPU6050_WHO_AM_I_BIT, MPU6050_WHO_AM_I_LENGTH, buffer);
 8005e4c:	881b      	ldrh	r3, [r3, #0]
 8005e4e:	7800      	ldrb	r0, [r0, #0]
 8005e50:	9301      	str	r3, [sp, #4]
 8005e52:	1c63      	adds	r3, r4, #1
 8005e54:	9300      	str	r3, [sp, #0]
 8005e56:	2206      	movs	r2, #6
 8005e58:	2306      	movs	r3, #6
 8005e5a:	2175      	movs	r1, #117	; 0x75
 8005e5c:	f7ff fe7e 	bl	8005b5c <_ZN6I2Cdev8readBitsEhhhhPht>
    return getDeviceID() == 0x34;
 8005e60:	7860      	ldrb	r0, [r4, #1]
 8005e62:	3834      	subs	r0, #52	; 0x34
 8005e64:	4243      	negs	r3, r0
 8005e66:	4158      	adcs	r0, r3
 8005e68:	b2c0      	uxtb	r0, r0
}
 8005e6a:	b002      	add	sp, #8
 8005e6c:	bd10      	pop	{r4, pc}
 8005e6e:	46c0      	nop			; (mov r8, r8)
 8005e70:	2000001c 	.word	0x2000001c

08005e74 <_ZN7MPU605012getIntStatusEv>:
uint8_t MPU6050::getIntStatus() {
 8005e74:	b510      	push	{r4, lr}
 8005e76:	0004      	movs	r4, r0
    I2Cdev::readByte(devAddr, MPU6050_RA_INT_STATUS, buffer);
 8005e78:	4b04      	ldr	r3, [pc, #16]	; (8005e8c <_ZN7MPU605012getIntStatusEv+0x18>)
 8005e7a:	1c42      	adds	r2, r0, #1
 8005e7c:	213a      	movs	r1, #58	; 0x3a
 8005e7e:	881b      	ldrh	r3, [r3, #0]
 8005e80:	7800      	ldrb	r0, [r0, #0]
 8005e82:	f7ff fe61 	bl	8005b48 <_ZN6I2Cdev8readByteEhhPht>
    return buffer[0];
 8005e86:	7860      	ldrb	r0, [r4, #1]
}
 8005e88:	bd10      	pop	{r4, pc}
 8005e8a:	46c0      	nop			; (mov r8, r8)
 8005e8c:	2000001c 	.word	0x2000001c

08005e90 <_ZN7MPU605012getFIFOCountEv>:
uint16_t MPU6050::getFIFOCount() {
 8005e90:	b510      	push	{r4, lr}
    I2Cdev::readBytes(devAddr, MPU6050_RA_FIFO_COUNTH, 2, buffer);
 8005e92:	4a08      	ldr	r2, [pc, #32]	; (8005eb4 <_ZN7MPU605012getFIFOCountEv+0x24>)
uint16_t MPU6050::getFIFOCount() {
 8005e94:	0004      	movs	r4, r0
    I2Cdev::readBytes(devAddr, MPU6050_RA_FIFO_COUNTH, 2, buffer);
 8005e96:	8812      	ldrh	r2, [r2, #0]
uint16_t MPU6050::getFIFOCount() {
 8005e98:	b082      	sub	sp, #8
    I2Cdev::readBytes(devAddr, MPU6050_RA_FIFO_COUNTH, 2, buffer);
 8005e9a:	1c43      	adds	r3, r0, #1
 8005e9c:	2172      	movs	r1, #114	; 0x72
 8005e9e:	7800      	ldrb	r0, [r0, #0]
 8005ea0:	9200      	str	r2, [sp, #0]
 8005ea2:	2202      	movs	r2, #2
 8005ea4:	f7ff fe2c 	bl	8005b00 <_ZN6I2Cdev9readBytesEhhhPht>
    return (((uint16_t)buffer[0]) << 8) | buffer[1];
 8005ea8:	7863      	ldrb	r3, [r4, #1]
 8005eaa:	78a0      	ldrb	r0, [r4, #2]
 8005eac:	021b      	lsls	r3, r3, #8
 8005eae:	4318      	orrs	r0, r3
}
 8005eb0:	b002      	add	sp, #8
 8005eb2:	bd10      	pop	{r4, pc}
 8005eb4:	2000001c 	.word	0x2000001c

08005eb8 <_ZN7MPU605020GetCurrentFIFOPacketEPhh>:
{ // overflow proof
 8005eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005eba:	46ce      	mov	lr, r9
 8005ebc:	4647      	mov	r7, r8
 8005ebe:	b580      	push	{r7, lr}
 8005ec0:	b089      	sub	sp, #36	; 0x24
 8005ec2:	0005      	movs	r5, r0
 8005ec4:	4688      	mov	r8, r1
 8005ec6:	0016      	movs	r6, r2
    uint32_t BreakTimer = millis();
 8005ec8:	f7fd fea4 	bl	8003c14 <HAL_GetTick>
 8005ecc:	4681      	mov	r9, r0
        if ((fifoC = getFIFOCount()) > length)//when FIFOCount more than 28
 8005ece:	0028      	movs	r0, r5
 8005ed0:	f7ff ffde 	bl	8005e90 <_ZN7MPU605012getFIFOCountEv>
 8005ed4:	b204      	sxth	r4, r0
 8005ed6:	42b4      	cmp	r4, r6
 8005ed8:	dd1f      	ble.n	8005f1a <_ZN7MPU605020GetCurrentFIFOPacketEPhh+0x62>
            if (fifoC > 200)
 8005eda:	2cc8      	cmp	r4, #200	; 0xc8
 8005edc:	dc2d      	bgt.n	8005f3a <_ZN7MPU605020GetCurrentFIFOPacketEPhh+0x82>
                while ((fifoC = getFIFOCount()) > length)
 8005ede:	0028      	movs	r0, r5
 8005ee0:	f7ff ffd6 	bl	8005e90 <_ZN7MPU605012getFIFOCountEv>
 8005ee4:	b204      	sxth	r4, r0
 8005ee6:	42b4      	cmp	r4, r6
 8005ee8:	dd17      	ble.n	8005f1a <_ZN7MPU605020GetCurrentFIFOPacketEPhh+0x62>
                    fifoC = fifoC - length; // Save the last packet
 8005eea:	1b80      	subs	r0, r0, r6
 8005eec:	b204      	sxth	r4, r0
                    while (fifoC)
 8005eee:	2c00      	cmp	r4, #0
 8005ef0:	d106      	bne.n	8005f00 <_ZN7MPU605020GetCurrentFIFOPacketEPhh+0x48>
 8005ef2:	e7f4      	b.n	8005ede <_ZN7MPU605020GetCurrentFIFOPacketEPhh+0x26>
        *data = 0;
 8005ef4:	466b      	mov	r3, sp
 8005ef6:	701a      	strb	r2, [r3, #0]
                        fifoC -= RemoveBytes;
 8005ef8:	1be4      	subs	r4, r4, r7
 8005efa:	b224      	sxth	r4, r4
                    while (fifoC)
 8005efc:	2c00      	cmp	r4, #0
 8005efe:	d0ee      	beq.n	8005ede <_ZN7MPU605020GetCurrentFIFOPacketEPhh+0x26>
                        RemoveBytes = (int) fifoC < BUFFER_LENGTH ? (int) fifoC
 8005f00:	1c22      	adds	r2, r4, #0
 8005f02:	2c20      	cmp	r4, #32
 8005f04:	dd00      	ble.n	8005f08 <_ZN7MPU605020GetCurrentFIFOPacketEPhh+0x50>
 8005f06:	2220      	movs	r2, #32
 8005f08:	b297      	uxth	r7, r2
                        getFIFOBytes(Trash, (uint8_t) RemoveBytes);
 8005f0a:	b2d2      	uxtb	r2, r2
    if(length > 0){
 8005f0c:	2a00      	cmp	r2, #0
 8005f0e:	d0f1      	beq.n	8005ef4 <_ZN7MPU605020GetCurrentFIFOPacketEPhh+0x3c>
 8005f10:	4669      	mov	r1, sp
 8005f12:	0028      	movs	r0, r5
 8005f14:	f7ff ff64 	bl	8005de0 <_ZN7MPU605012getFIFOBytesEPhh.part.0>
 8005f18:	e7ee      	b.n	8005ef8 <_ZN7MPU605020GetCurrentFIFOPacketEPhh+0x40>
        if (!fifoC)
 8005f1a:	2c00      	cmp	r4, #0
 8005f1c:	d01f      	beq.n	8005f5e <_ZN7MPU605020GetCurrentFIFOPacketEPhh+0xa6>
        if ((millis() - BreakTimer) > (11))
 8005f1e:	f7fd fe79 	bl	8003c14 <HAL_GetTick>
 8005f22:	464b      	mov	r3, r9
 8005f24:	1ac0      	subs	r0, r0, r3
 8005f26:	280b      	cmp	r0, #11
 8005f28:	d822      	bhi.n	8005f70 <_ZN7MPU605020GetCurrentFIFOPacketEPhh+0xb8>
    while (fifoC != length);
 8005f2a:	42b4      	cmp	r4, r6
 8005f2c:	d1cf      	bne.n	8005ece <_ZN7MPU605020GetCurrentFIFOPacketEPhh+0x16>
    if(length > 0){
 8005f2e:	2c00      	cmp	r4, #0
 8005f30:	d123      	bne.n	8005f7a <_ZN7MPU605020GetCurrentFIFOPacketEPhh+0xc2>
        *data = 0;
 8005f32:	4643      	mov	r3, r8
    return 1;
 8005f34:	2001      	movs	r0, #1
        *data = 0;
 8005f36:	701c      	strb	r4, [r3, #0]
 8005f38:	e015      	b.n	8005f66 <_ZN7MPU605020GetCurrentFIFOPacketEPhh+0xae>
    I2Cdev::writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_FIFO_RESET_BIT, true);
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	2202      	movs	r2, #2
 8005f3e:	216a      	movs	r1, #106	; 0x6a
 8005f40:	7828      	ldrb	r0, [r5, #0]
 8005f42:	f7ff fe67 	bl	8005c14 <_ZN6I2Cdev8writeBitEhhhh>
                while (!(fifoC = getFIFOCount()) && ((millis() - BreakTimer) <= (11))); // Get Next New Packet
 8005f46:	0028      	movs	r0, r5
 8005f48:	f7ff ffa2 	bl	8005e90 <_ZN7MPU605012getFIFOCountEv>
 8005f4c:	b204      	sxth	r4, r0
 8005f4e:	2c00      	cmp	r4, #0
 8005f50:	d1e5      	bne.n	8005f1e <_ZN7MPU605020GetCurrentFIFOPacketEPhh+0x66>
 8005f52:	f7fd fe5f 	bl	8003c14 <HAL_GetTick>
 8005f56:	464b      	mov	r3, r9
 8005f58:	1ac0      	subs	r0, r0, r3
 8005f5a:	280b      	cmp	r0, #11
 8005f5c:	d9f3      	bls.n	8005f46 <_ZN7MPU605020GetCurrentFIFOPacketEPhh+0x8e>
            printf("fifo no data!\n");
 8005f5e:	480a      	ldr	r0, [pc, #40]	; (8005f88 <_ZN7MPU605020GetCurrentFIFOPacketEPhh+0xd0>)
 8005f60:	f001 fc76 	bl	8007850 <puts>
            return 0; // Called too early no data or we timed out after FIFO Reset
 8005f64:	2000      	movs	r0, #0
}
 8005f66:	b009      	add	sp, #36	; 0x24
 8005f68:	bcc0      	pop	{r6, r7}
 8005f6a:	46b9      	mov	r9, r7
 8005f6c:	46b0      	mov	r8, r6
 8005f6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            printf("fifo wait too long!\n");
 8005f70:	4806      	ldr	r0, [pc, #24]	; (8005f8c <_ZN7MPU605020GetCurrentFIFOPacketEPhh+0xd4>)
 8005f72:	f001 fc6d 	bl	8007850 <puts>
            return 0;
 8005f76:	2000      	movs	r0, #0
 8005f78:	e7f5      	b.n	8005f66 <_ZN7MPU605020GetCurrentFIFOPacketEPhh+0xae>
 8005f7a:	0028      	movs	r0, r5
 8005f7c:	0022      	movs	r2, r4
 8005f7e:	4641      	mov	r1, r8
 8005f80:	f7ff ff2e 	bl	8005de0 <_ZN7MPU605012getFIFOBytesEPhh.part.0>
    return 1;
 8005f84:	2001      	movs	r0, #1
 8005f86:	e7ee      	b.n	8005f66 <_ZN7MPU605020GetCurrentFIFOPacketEPhh+0xae>
 8005f88:	0800c2c8 	.word	0x0800c2c8
 8005f8c:	0800c2d8 	.word	0x0800c2d8

08005f90 <_ZN7MPU605015setXAccelOffsetEs>:
int16_t MPU6050::getXAccelOffset() {
    uint8_t SaveAddress = ((getDeviceID() < 0x38 )? MPU6050_RA_XA_OFFS_H:0x77); // MPU6050,MPU9150 Vs MPU6500,MPU9250
    I2Cdev::readBytes(devAddr, SaveAddress, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setXAccelOffset(int16_t offset) {
 8005f90:	b530      	push	{r4, r5, lr}
 8005f92:	0004      	movs	r4, r0
    I2Cdev::readBits(devAddr, MPU6050_RA_WHO_AM_I, MPU6050_WHO_AM_I_BIT, MPU6050_WHO_AM_I_LENGTH, buffer);
 8005f94:	4b0b      	ldr	r3, [pc, #44]	; (8005fc4 <_ZN7MPU605015setXAccelOffsetEs+0x34>)
void MPU6050::setXAccelOffset(int16_t offset) {
 8005f96:	b083      	sub	sp, #12
    I2Cdev::readBits(devAddr, MPU6050_RA_WHO_AM_I, MPU6050_WHO_AM_I_BIT, MPU6050_WHO_AM_I_LENGTH, buffer);
 8005f98:	881b      	ldrh	r3, [r3, #0]
 8005f9a:	7800      	ldrb	r0, [r0, #0]
 8005f9c:	9301      	str	r3, [sp, #4]
 8005f9e:	1c63      	adds	r3, r4, #1
 8005fa0:	9300      	str	r3, [sp, #0]
void MPU6050::setXAccelOffset(int16_t offset) {
 8005fa2:	000d      	movs	r5, r1
    I2Cdev::readBits(devAddr, MPU6050_RA_WHO_AM_I, MPU6050_WHO_AM_I_BIT, MPU6050_WHO_AM_I_LENGTH, buffer);
 8005fa4:	2306      	movs	r3, #6
 8005fa6:	2175      	movs	r1, #117	; 0x75
 8005fa8:	2206      	movs	r2, #6
 8005faa:	f7ff fdd7 	bl	8005b5c <_ZN6I2Cdev8readBitsEhhhhPht>
    uint8_t SaveAddress = ((getDeviceID() < 0x38 )? MPU6050_RA_XA_OFFS_H:0x77); // MPU6050,MPU9150 Vs MPU6500,MPU9250
 8005fae:	7863      	ldrb	r3, [r4, #1]
 8005fb0:	2106      	movs	r1, #6
 8005fb2:	2b37      	cmp	r3, #55	; 0x37
 8005fb4:	d900      	bls.n	8005fb8 <_ZN7MPU605015setXAccelOffsetEs+0x28>
 8005fb6:	3171      	adds	r1, #113	; 0x71
    I2Cdev::writeWord(devAddr, SaveAddress, offset);
 8005fb8:	7820      	ldrb	r0, [r4, #0]
 8005fba:	b2aa      	uxth	r2, r5
 8005fbc:	f7ff ff06 	bl	8005dcc <_ZN6I2Cdev9writeWordEhht>
}
 8005fc0:	b003      	add	sp, #12
 8005fc2:	bd30      	pop	{r4, r5, pc}
 8005fc4:	2000001c 	.word	0x2000001c

08005fc8 <_ZN7MPU605015setYAccelOffsetEs>:
int16_t MPU6050::getYAccelOffset() {
    uint8_t SaveAddress = ((getDeviceID() < 0x38 )? MPU6050_RA_YA_OFFS_H:0x7A); // MPU6050,MPU9150 Vs MPU6500,MPU9250
    I2Cdev::readBytes(devAddr, SaveAddress, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setYAccelOffset(int16_t offset) {
 8005fc8:	b530      	push	{r4, r5, lr}
 8005fca:	0004      	movs	r4, r0
    I2Cdev::readBits(devAddr, MPU6050_RA_WHO_AM_I, MPU6050_WHO_AM_I_BIT, MPU6050_WHO_AM_I_LENGTH, buffer);
 8005fcc:	4b0b      	ldr	r3, [pc, #44]	; (8005ffc <_ZN7MPU605015setYAccelOffsetEs+0x34>)
void MPU6050::setYAccelOffset(int16_t offset) {
 8005fce:	b083      	sub	sp, #12
    I2Cdev::readBits(devAddr, MPU6050_RA_WHO_AM_I, MPU6050_WHO_AM_I_BIT, MPU6050_WHO_AM_I_LENGTH, buffer);
 8005fd0:	881b      	ldrh	r3, [r3, #0]
 8005fd2:	7800      	ldrb	r0, [r0, #0]
 8005fd4:	9301      	str	r3, [sp, #4]
 8005fd6:	1c63      	adds	r3, r4, #1
 8005fd8:	9300      	str	r3, [sp, #0]
void MPU6050::setYAccelOffset(int16_t offset) {
 8005fda:	000d      	movs	r5, r1
    I2Cdev::readBits(devAddr, MPU6050_RA_WHO_AM_I, MPU6050_WHO_AM_I_BIT, MPU6050_WHO_AM_I_LENGTH, buffer);
 8005fdc:	2306      	movs	r3, #6
 8005fde:	2175      	movs	r1, #117	; 0x75
 8005fe0:	2206      	movs	r2, #6
 8005fe2:	f7ff fdbb 	bl	8005b5c <_ZN6I2Cdev8readBitsEhhhhPht>
    uint8_t SaveAddress = ((getDeviceID() < 0x38 )? MPU6050_RA_YA_OFFS_H:0x7A); // MPU6050,MPU9150 Vs MPU6500,MPU9250
 8005fe6:	7863      	ldrb	r3, [r4, #1]
 8005fe8:	2108      	movs	r1, #8
 8005fea:	2b37      	cmp	r3, #55	; 0x37
 8005fec:	d900      	bls.n	8005ff0 <_ZN7MPU605015setYAccelOffsetEs+0x28>
 8005fee:	3172      	adds	r1, #114	; 0x72
    I2Cdev::writeWord(devAddr, SaveAddress, offset);
 8005ff0:	7820      	ldrb	r0, [r4, #0]
 8005ff2:	b2aa      	uxth	r2, r5
 8005ff4:	f7ff feea 	bl	8005dcc <_ZN6I2Cdev9writeWordEhht>
}
 8005ff8:	b003      	add	sp, #12
 8005ffa:	bd30      	pop	{r4, r5, pc}
 8005ffc:	2000001c 	.word	0x2000001c

08006000 <_ZN7MPU605015setZAccelOffsetEs>:
int16_t MPU6050::getZAccelOffset() {
    uint8_t SaveAddress = ((getDeviceID() < 0x38 )? MPU6050_RA_ZA_OFFS_H:0x7D); // MPU6050,MPU9150 Vs MPU6500,MPU9250
    I2Cdev::readBytes(devAddr, SaveAddress, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setZAccelOffset(int16_t offset) {
 8006000:	b530      	push	{r4, r5, lr}
 8006002:	0004      	movs	r4, r0
    I2Cdev::readBits(devAddr, MPU6050_RA_WHO_AM_I, MPU6050_WHO_AM_I_BIT, MPU6050_WHO_AM_I_LENGTH, buffer);
 8006004:	4b0b      	ldr	r3, [pc, #44]	; (8006034 <_ZN7MPU605015setZAccelOffsetEs+0x34>)
void MPU6050::setZAccelOffset(int16_t offset) {
 8006006:	b083      	sub	sp, #12
    I2Cdev::readBits(devAddr, MPU6050_RA_WHO_AM_I, MPU6050_WHO_AM_I_BIT, MPU6050_WHO_AM_I_LENGTH, buffer);
 8006008:	881b      	ldrh	r3, [r3, #0]
 800600a:	7800      	ldrb	r0, [r0, #0]
 800600c:	9301      	str	r3, [sp, #4]
 800600e:	1c63      	adds	r3, r4, #1
 8006010:	9300      	str	r3, [sp, #0]
void MPU6050::setZAccelOffset(int16_t offset) {
 8006012:	000d      	movs	r5, r1
    I2Cdev::readBits(devAddr, MPU6050_RA_WHO_AM_I, MPU6050_WHO_AM_I_BIT, MPU6050_WHO_AM_I_LENGTH, buffer);
 8006014:	2306      	movs	r3, #6
 8006016:	2175      	movs	r1, #117	; 0x75
 8006018:	2206      	movs	r2, #6
 800601a:	f7ff fd9f 	bl	8005b5c <_ZN6I2Cdev8readBitsEhhhhPht>
    uint8_t SaveAddress = ((getDeviceID() < 0x38 )? MPU6050_RA_ZA_OFFS_H:0x7D); // MPU6050,MPU9150 Vs MPU6500,MPU9250
 800601e:	7863      	ldrb	r3, [r4, #1]
 8006020:	210a      	movs	r1, #10
 8006022:	2b37      	cmp	r3, #55	; 0x37
 8006024:	d900      	bls.n	8006028 <_ZN7MPU605015setZAccelOffsetEs+0x28>
 8006026:	3173      	adds	r1, #115	; 0x73
    I2Cdev::writeWord(devAddr, SaveAddress, offset);
 8006028:	7820      	ldrb	r0, [r4, #0]
 800602a:	b2aa      	uxth	r2, r5
 800602c:	f7ff fece 	bl	8005dcc <_ZN6I2Cdev9writeWordEhht>
}
 8006030:	b003      	add	sp, #12
 8006032:	bd30      	pop	{r4, r5, pc}
 8006034:	2000001c 	.word	0x2000001c

08006038 <_ZN7MPU605014setXGyroOffsetEs>:

int16_t MPU6050::getXGyroOffset() {
    I2Cdev::readBytes(devAddr, MPU6050_RA_XG_OFFS_USRH, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setXGyroOffset(int16_t offset) {
 8006038:	b510      	push	{r4, lr}
    I2Cdev::writeWord(devAddr, MPU6050_RA_XG_OFFS_USRH, offset);
 800603a:	b28a      	uxth	r2, r1
 800603c:	7800      	ldrb	r0, [r0, #0]
 800603e:	2113      	movs	r1, #19
 8006040:	f7ff fec4 	bl	8005dcc <_ZN6I2Cdev9writeWordEhht>
}
 8006044:	bd10      	pop	{r4, pc}
 8006046:	46c0      	nop			; (mov r8, r8)

08006048 <_ZN7MPU605014setYGyroOffsetEs>:

int16_t MPU6050::getYGyroOffset() {
    I2Cdev::readBytes(devAddr, MPU6050_RA_YG_OFFS_USRH, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setYGyroOffset(int16_t offset) {
 8006048:	b510      	push	{r4, lr}
    I2Cdev::writeWord(devAddr, MPU6050_RA_YG_OFFS_USRH, offset);
 800604a:	b28a      	uxth	r2, r1
 800604c:	7800      	ldrb	r0, [r0, #0]
 800604e:	2115      	movs	r1, #21
 8006050:	f7ff febc 	bl	8005dcc <_ZN6I2Cdev9writeWordEhht>
}
 8006054:	bd10      	pop	{r4, pc}
 8006056:	46c0      	nop			; (mov r8, r8)

08006058 <_ZN7MPU605014setZGyroOffsetEs>:

int16_t MPU6050::getZGyroOffset() {
    I2Cdev::readBytes(devAddr, MPU6050_RA_ZG_OFFS_USRH, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setZGyroOffset(int16_t offset) {
 8006058:	b510      	push	{r4, lr}
    I2Cdev::writeWord(devAddr, MPU6050_RA_ZG_OFFS_USRH, offset);
 800605a:	b28a      	uxth	r2, r1
 800605c:	7800      	ldrb	r0, [r0, #0]
 800605e:	2117      	movs	r1, #23
 8006060:	f7ff feb4 	bl	8005dcc <_ZN6I2Cdev9writeWordEhht>
}
 8006064:	bd10      	pop	{r4, pc}
 8006066:	46c0      	nop			; (mov r8, r8)

08006068 <_ZN7MPU605013setDMPEnabledEb>:

bool MPU6050::getDMPEnabled() {
    I2Cdev::readBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_EN_BIT, buffer);
    return buffer[0];
}
void MPU6050::setDMPEnabled(bool enabled) {
 8006068:	b510      	push	{r4, lr}
 800606a:	000b      	movs	r3, r1
    I2Cdev::writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_EN_BIT, enabled);
 800606c:	2207      	movs	r2, #7
 800606e:	216a      	movs	r1, #106	; 0x6a
 8006070:	7800      	ldrb	r0, [r0, #0]
 8006072:	f7ff fdcf 	bl	8005c14 <_ZN6I2Cdev8writeBitEhhhh>
}
 8006076:	bd10      	pop	{r4, pc}

08006078 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>:
            setMemoryBank(bank);
            setMemoryStartAddress(address);
        }
    }
}
bool MPU6050::writeMemoryBlock(const uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address, bool verify, bool useProgMem) {
 8006078:	b5f0      	push	{r4, r5, r6, r7, lr}
 800607a:	46de      	mov	lr, fp
 800607c:	4645      	mov	r5, r8
 800607e:	4657      	mov	r7, sl
 8006080:	464e      	mov	r6, r9
 8006082:	469a      	mov	sl, r3
 8006084:	b5e0      	push	{r5, r6, r7, lr}
 8006086:	b087      	sub	sp, #28
 8006088:	ab10      	add	r3, sp, #64	; 0x40
 800608a:	781d      	ldrb	r5, [r3, #0]
 800608c:	ab11      	add	r3, sp, #68	; 0x44
 800608e:	781c      	ldrb	r4, [r3, #0]
 8006090:	ab12      	add	r3, sp, #72	; 0x48
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	4691      	mov	r9, r2
 8006096:	9303      	str	r3, [sp, #12]
    I2Cdev::writeByte(devAddr, MPU6050_RA_BANK_SEL, bank);
 8006098:	221f      	movs	r2, #31
 800609a:	4653      	mov	r3, sl
bool MPU6050::writeMemoryBlock(const uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address, bool verify, bool useProgMem) {
 800609c:	4680      	mov	r8, r0
    I2Cdev::writeByte(devAddr, MPU6050_RA_BANK_SEL, bank);
 800609e:	401a      	ands	r2, r3
bool MPU6050::writeMemoryBlock(const uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address, bool verify, bool useProgMem) {
 80060a0:	9105      	str	r1, [sp, #20]
    I2Cdev::writeByte(devAddr, MPU6050_RA_BANK_SEL, bank);
 80060a2:	7800      	ldrb	r0, [r0, #0]
 80060a4:	216d      	movs	r1, #109	; 0x6d
bool MPU6050::writeMemoryBlock(const uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address, bool verify, bool useProgMem) {
 80060a6:	9404      	str	r4, [sp, #16]
    I2Cdev::writeByte(devAddr, MPU6050_RA_BANK_SEL, bank);
 80060a8:	f7ff fe28 	bl	8005cfc <_ZN6I2Cdev9writeByteEhhh>
    I2Cdev::writeByte(devAddr, MPU6050_RA_MEM_START_ADDR, address);
 80060ac:	4643      	mov	r3, r8
 80060ae:	002a      	movs	r2, r5
 80060b0:	7818      	ldrb	r0, [r3, #0]
 80060b2:	216e      	movs	r1, #110	; 0x6e
 80060b4:	f7ff fe22 	bl	8005cfc <_ZN6I2Cdev9writeByteEhhh>
    setMemoryBank(bank);
    setMemoryStartAddress(address);
    uint8_t chunkSize;
    uint8_t *verifyBuffer=0;
 80060b8:	2300      	movs	r3, #0
 80060ba:	469b      	mov	fp, r3
    uint8_t *progBuffer=0;
    uint16_t i;
    uint8_t j;
    if (verify) verifyBuffer = (uint8_t *)malloc(MPU6050_DMP_MEMORY_CHUNK_SIZE);
 80060bc:	2c00      	cmp	r4, #0
 80060be:	d000      	beq.n	80060c2 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x4a>
 80060c0:	e086      	b.n	80061d0 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x158>
    if (useProgMem) progBuffer = (uint8_t *)malloc(MPU6050_DMP_MEMORY_CHUNK_SIZE);
 80060c2:	9b03      	ldr	r3, [sp, #12]
    uint8_t *progBuffer=0;
 80060c4:	2700      	movs	r7, #0
    if (useProgMem) progBuffer = (uint8_t *)malloc(MPU6050_DMP_MEMORY_CHUNK_SIZE);
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d000      	beq.n	80060cc <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x54>
 80060ca:	e08a      	b.n	80061e2 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x16a>
    for (i = 0; i < dataSize;) {
 80060cc:	464b      	mov	r3, r9
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d03f      	beq.n	8006152 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0xda>
 80060d2:	2600      	movs	r6, #0
        // determine correct chunk size according to bank position and data size
        chunkSize = MPU6050_DMP_MEMORY_CHUNK_SIZE;

        // make sure we don't go past the data size
        if (i + chunkSize > dataSize) chunkSize = dataSize - i;
 80060d4:	0033      	movs	r3, r6
 80060d6:	3310      	adds	r3, #16
 80060d8:	454b      	cmp	r3, r9
 80060da:	dc49      	bgt.n	8006170 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0xf8>

        // make sure this chunk doesn't go past the bank boundary (256 bytes)
        if (chunkSize > 256 - address) chunkSize = 256 - address;
 80060dc:	2380      	movs	r3, #128	; 0x80
 80060de:	005b      	lsls	r3, r3, #1
 80060e0:	1b5b      	subs	r3, r3, r5
 80060e2:	2b0f      	cmp	r3, #15
 80060e4:	dd4c      	ble.n	8006180 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x108>

        if (useProgMem) {
 80060e6:	9b03      	ldr	r3, [sp, #12]
        chunkSize = MPU6050_DMP_MEMORY_CHUNK_SIZE;
 80060e8:	2410      	movs	r4, #16
        if (useProgMem) {
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d14f      	bne.n	800618e <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x116>
            // write the chunk of data as specified
            for (j = 0; j < chunkSize; j++) progBuffer[j] = pgm_read_byte(data + i + j);
        } else {
            // write the chunk of data as specified
            progBuffer = (uint8_t *)data + i;
 80060ee:	9b05      	ldr	r3, [sp, #20]
 80060f0:	199f      	adds	r7, r3, r6
        }

        I2Cdev::writeBytes(devAddr, MPU6050_RA_MEM_R_W, chunkSize, progBuffer);
 80060f2:	4643      	mov	r3, r8
 80060f4:	0022      	movs	r2, r4
 80060f6:	7818      	ldrb	r0, [r3, #0]
 80060f8:	216f      	movs	r1, #111	; 0x6f
 80060fa:	003b      	movs	r3, r7
 80060fc:	f7ff fe16 	bl	8005d2c <_ZN6I2Cdev10writeBytesEhhhPh>

        // verify data if needed
        if (verify && verifyBuffer) {
 8006100:	9b04      	ldr	r3, [sp, #16]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d021      	beq.n	800614a <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0xd2>
 8006106:	465b      	mov	r3, fp
 8006108:	2b00      	cmp	r3, #0
 800610a:	d01e      	beq.n	800614a <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0xd2>
    I2Cdev::writeByte(devAddr, MPU6050_RA_BANK_SEL, bank);
 800610c:	4653      	mov	r3, sl
 800610e:	221f      	movs	r2, #31
 8006110:	401a      	ands	r2, r3
 8006112:	4643      	mov	r3, r8
 8006114:	216d      	movs	r1, #109	; 0x6d
 8006116:	7818      	ldrb	r0, [r3, #0]
 8006118:	f7ff fdf0 	bl	8005cfc <_ZN6I2Cdev9writeByteEhhh>
    I2Cdev::writeByte(devAddr, MPU6050_RA_MEM_START_ADDR, address);
 800611c:	4643      	mov	r3, r8
 800611e:	002a      	movs	r2, r5
 8006120:	216e      	movs	r1, #110	; 0x6e
 8006122:	7818      	ldrb	r0, [r3, #0]
 8006124:	f7ff fdea 	bl	8005cfc <_ZN6I2Cdev9writeByteEhhh>
            setMemoryBank(bank);
            setMemoryStartAddress(address);
            I2Cdev::readBytes(devAddr, MPU6050_RA_MEM_R_W, chunkSize, verifyBuffer);
 8006128:	4643      	mov	r3, r8
 800612a:	7818      	ldrb	r0, [r3, #0]
 800612c:	4b39      	ldr	r3, [pc, #228]	; (8006214 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x19c>)
 800612e:	0022      	movs	r2, r4
 8006130:	881b      	ldrh	r3, [r3, #0]
 8006132:	216f      	movs	r1, #111	; 0x6f
 8006134:	9300      	str	r3, [sp, #0]
 8006136:	465b      	mov	r3, fp
 8006138:	f7ff fce2 	bl	8005b00 <_ZN6I2Cdev9readBytesEhhhPht>
            if (memcmp(progBuffer, verifyBuffer, chunkSize) != 0) {
 800613c:	0022      	movs	r2, r4
 800613e:	4659      	mov	r1, fp
 8006140:	0038      	movs	r0, r7
 8006142:	f000 fb9b 	bl	800687c <memcmp>
 8006146:	2800      	cmp	r0, #0
 8006148:	d159      	bne.n	80061fe <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x186>
                return false; // uh oh.
            }
        }

        // increase byte index by [chunkSize]
        i += chunkSize;
 800614a:	1936      	adds	r6, r6, r4
 800614c:	b2b6      	uxth	r6, r6

        // uint8_t automatically wraps to 0 at 256
        address += chunkSize;

        // if we aren't done, update bank (if necessary) and address
        if (i < dataSize) {
 800614e:	45b1      	cmp	r9, r6
 8006150:	d827      	bhi.n	80061a2 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x12a>
            if (address == 0) bank++;
            setMemoryBank(bank);
            setMemoryStartAddress(address);
        }
    }
    if (verify) free(verifyBuffer);
 8006152:	9b04      	ldr	r3, [sp, #16]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d14e      	bne.n	80061f6 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x17e>
    if (useProgMem) free(progBuffer);
 8006158:	9b03      	ldr	r3, [sp, #12]
    return true;
 800615a:	2401      	movs	r4, #1
    if (useProgMem) free(progBuffer);
 800615c:	2b00      	cmp	r3, #0
 800615e:	d145      	bne.n	80061ec <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x174>
}
 8006160:	0020      	movs	r0, r4
 8006162:	b007      	add	sp, #28
 8006164:	bcf0      	pop	{r4, r5, r6, r7}
 8006166:	46bb      	mov	fp, r7
 8006168:	46b2      	mov	sl, r6
 800616a:	46a9      	mov	r9, r5
 800616c:	46a0      	mov	r8, r4
 800616e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (i + chunkSize > dataSize) chunkSize = dataSize - i;
 8006170:	464b      	mov	r3, r9
 8006172:	1b9c      	subs	r4, r3, r6
        if (chunkSize > 256 - address) chunkSize = 256 - address;
 8006174:	2380      	movs	r3, #128	; 0x80
        if (i + chunkSize > dataSize) chunkSize = dataSize - i;
 8006176:	b2e4      	uxtb	r4, r4
        if (chunkSize > 256 - address) chunkSize = 256 - address;
 8006178:	005b      	lsls	r3, r3, #1
 800617a:	1b5b      	subs	r3, r3, r5
 800617c:	429c      	cmp	r4, r3
 800617e:	dd01      	ble.n	8006184 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x10c>
 8006180:	426c      	negs	r4, r5
 8006182:	b2e4      	uxtb	r4, r4
        if (useProgMem) {
 8006184:	9b03      	ldr	r3, [sp, #12]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d0b1      	beq.n	80060ee <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x76>
            for (j = 0; j < chunkSize; j++) progBuffer[j] = pgm_read_byte(data + i + j);
 800618a:	2c00      	cmp	r4, #0
 800618c:	d0b1      	beq.n	80060f2 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x7a>
        chunkSize = MPU6050_DMP_MEMORY_CHUNK_SIZE;
 800618e:	2300      	movs	r3, #0
 8006190:	9a05      	ldr	r2, [sp, #20]
 8006192:	1991      	adds	r1, r2, r6
            for (j = 0; j < chunkSize; j++) progBuffer[j] = pgm_read_byte(data + i + j);
 8006194:	5cca      	ldrb	r2, [r1, r3]
 8006196:	54fa      	strb	r2, [r7, r3]
 8006198:	3301      	adds	r3, #1
 800619a:	b2da      	uxtb	r2, r3
 800619c:	42a2      	cmp	r2, r4
 800619e:	d3f9      	bcc.n	8006194 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x11c>
 80061a0:	e7a7      	b.n	80060f2 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x7a>
        address += chunkSize;
 80061a2:	1965      	adds	r5, r4, r5
 80061a4:	b2ed      	uxtb	r5, r5
            if (address == 0) bank++;
 80061a6:	2d00      	cmp	r5, #0
 80061a8:	d103      	bne.n	80061b2 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x13a>
 80061aa:	4653      	mov	r3, sl
 80061ac:	3301      	adds	r3, #1
 80061ae:	b2db      	uxtb	r3, r3
 80061b0:	469a      	mov	sl, r3
    I2Cdev::writeByte(devAddr, MPU6050_RA_BANK_SEL, bank);
 80061b2:	4653      	mov	r3, sl
 80061b4:	221f      	movs	r2, #31
 80061b6:	401a      	ands	r2, r3
 80061b8:	4643      	mov	r3, r8
 80061ba:	216d      	movs	r1, #109	; 0x6d
 80061bc:	7818      	ldrb	r0, [r3, #0]
 80061be:	f7ff fd9d 	bl	8005cfc <_ZN6I2Cdev9writeByteEhhh>
    I2Cdev::writeByte(devAddr, MPU6050_RA_MEM_START_ADDR, address);
 80061c2:	4643      	mov	r3, r8
 80061c4:	002a      	movs	r2, r5
 80061c6:	216e      	movs	r1, #110	; 0x6e
 80061c8:	7818      	ldrb	r0, [r3, #0]
 80061ca:	f7ff fd97 	bl	8005cfc <_ZN6I2Cdev9writeByteEhhh>
    for (i = 0; i < dataSize;) {
 80061ce:	e781      	b.n	80060d4 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x5c>
    if (verify) verifyBuffer = (uint8_t *)malloc(MPU6050_DMP_MEMORY_CHUNK_SIZE);
 80061d0:	2010      	movs	r0, #16
 80061d2:	f000 fb3f 	bl	8006854 <malloc>
    if (useProgMem) progBuffer = (uint8_t *)malloc(MPU6050_DMP_MEMORY_CHUNK_SIZE);
 80061d6:	9b03      	ldr	r3, [sp, #12]
    if (verify) verifyBuffer = (uint8_t *)malloc(MPU6050_DMP_MEMORY_CHUNK_SIZE);
 80061d8:	4683      	mov	fp, r0
    uint8_t *progBuffer=0;
 80061da:	2700      	movs	r7, #0
    if (useProgMem) progBuffer = (uint8_t *)malloc(MPU6050_DMP_MEMORY_CHUNK_SIZE);
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d100      	bne.n	80061e2 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x16a>
 80061e0:	e774      	b.n	80060cc <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x54>
 80061e2:	2010      	movs	r0, #16
 80061e4:	f000 fb36 	bl	8006854 <malloc>
 80061e8:	0007      	movs	r7, r0
 80061ea:	e76f      	b.n	80060cc <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x54>
    if (useProgMem) free(progBuffer);
 80061ec:	0038      	movs	r0, r7
 80061ee:	f000 fb3b 	bl	8006868 <free>
    return true;
 80061f2:	9c03      	ldr	r4, [sp, #12]
 80061f4:	e7b4      	b.n	8006160 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0xe8>
    if (verify) free(verifyBuffer);
 80061f6:	4658      	mov	r0, fp
 80061f8:	f000 fb36 	bl	8006868 <free>
 80061fc:	e7ac      	b.n	8006158 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0xe0>
                free(verifyBuffer);
 80061fe:	4658      	mov	r0, fp
 8006200:	f000 fb32 	bl	8006868 <free>
                if (useProgMem) free(progBuffer);
 8006204:	9b03      	ldr	r3, [sp, #12]
                return false; // uh oh.
 8006206:	2400      	movs	r4, #0
                if (useProgMem) free(progBuffer);
 8006208:	2b00      	cmp	r3, #0
 800620a:	d0a9      	beq.n	8006160 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0xe8>
 800620c:	0038      	movs	r0, r7
 800620e:	f000 fb2b 	bl	8006868 <free>
 8006212:	e7a5      	b.n	8006160 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0xe8>
 8006214:	2000001c 	.word	0x2000001c

08006218 <_ZN7MPU605020writeProgMemoryBlockEPKhthhb>:
bool MPU6050::writeProgMemoryBlock(const uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address, bool verify) {
 8006218:	b570      	push	{r4, r5, r6, lr}
    return writeMemoryBlock(data, dataSize, bank, address, verify, true);
 800621a:	2601      	movs	r6, #1
bool MPU6050::writeProgMemoryBlock(const uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address, bool verify) {
 800621c:	b084      	sub	sp, #16
 800621e:	ac08      	add	r4, sp, #32
 8006220:	ad09      	add	r5, sp, #36	; 0x24
 8006222:	7824      	ldrb	r4, [r4, #0]
 8006224:	782d      	ldrb	r5, [r5, #0]
    return writeMemoryBlock(data, dataSize, bank, address, verify, true);
 8006226:	9602      	str	r6, [sp, #8]
 8006228:	9501      	str	r5, [sp, #4]
 800622a:	9400      	str	r4, [sp, #0]
 800622c:	f7ff ff24 	bl	8006078 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>
}
 8006230:	b004      	add	sp, #16
 8006232:	bd70      	pop	{r4, r5, r6, pc}

08006234 <_ZN7MPU60503PIDEhffh>:
    kP *= x;
    kI *= x;
    PID( 0x3B, kP, kI,  Loops);
}

void MPU6050::PID(uint8_t ReadAddress, float kP, float kI, uint8_t Loops) {
 8006234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006236:	46de      	mov	lr, fp
 8006238:	4657      	mov	r7, sl
 800623a:	464e      	mov	r6, r9
 800623c:	4645      	mov	r5, r8
 800623e:	b5e0      	push	{r5, r6, r7, lr}
 8006240:	b097      	sub	sp, #92	; 0x5c
 8006242:	9308      	str	r3, [sp, #32]
 8006244:	ab20      	add	r3, sp, #128	; 0x80
 8006246:	781b      	ldrb	r3, [r3, #0]
 8006248:	468b      	mov	fp, r1
 800624a:	9002      	str	r0, [sp, #8]
 800624c:	9207      	str	r2, [sp, #28]
 800624e:	930f      	str	r3, [sp, #60]	; 0x3c

	bool cal_accel = ReadAddress == 0x3B;
	uint8_t SaveAddress = cal_accel ? ((getDeviceID() < 0x38) ? 0x06 : 0x77) : 0x13;
 8006250:	293b      	cmp	r1, #59	; 0x3b
 8006252:	d100      	bne.n	8006256 <_ZN7MPU60503PIDEhffh+0x22>
 8006254:	e196      	b.n	8006584 <_ZN7MPU60503PIDEhffh+0x350>
 8006256:	2313      	movs	r3, #19
 8006258:	930b      	str	r3, [sp, #44]	; 0x2c
	uint8_t shift = (SaveAddress == 0x77) ? 3 : 2;
 800625a:	3b11      	subs	r3, #17
 800625c:	9306      	str	r3, [sp, #24]
 800625e:	4bd6      	ldr	r3, [pc, #856]	; (80065b8 <_ZN7MPU60503PIDEhffh+0x384>)
 8006260:	9309      	str	r3, [sp, #36]	; 0x24
	int16_t BitZero[3];
	float Error, PTerm, ITerm[3];
	int16_t eSample;
	uint32_t eSum;

	printf(">");
 8006262:	203e      	movs	r0, #62	; 0x3e
 8006264:	f001 fa6e 	bl	8007744 <putchar>
 8006268:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800626a:	250a      	movs	r5, #10
 800626c:	4699      	mov	r9, r3
 800626e:	ab0e      	add	r3, sp, #56	; 0x38
 8006270:	469c      	mov	ip, r3
	for (int i = 0; i < 3; i++) {
		I2Cdev::readWords(devAddr, SaveAddress + (i * shift), 1, (uint16_t*) &Data);
		Reading = Data;
		if (cal_accel) {
			// Capture Bit Zero to properly handle Accelerometer calibration
			BitZero[i] = Data & 1;
 8006272:	ab11      	add	r3, sp, #68	; 0x44
	for (int i = 0; i < 3; i++) {
 8006274:	2700      	movs	r7, #0
			BitZero[i] = Data & 1;
 8006276:	4698      	mov	r8, r3
 8006278:	464c      	mov	r4, r9
	printf(">");
 800627a:	ae13      	add	r6, sp, #76	; 0x4c
 800627c:	4465      	add	r5, ip
		I2Cdev::readWords(devAddr, SaveAddress + (i * shift), 1, (uint16_t*) &Data);
 800627e:	9b02      	ldr	r3, [sp, #8]
 8006280:	2201      	movs	r2, #1
 8006282:	7818      	ldrb	r0, [r3, #0]
 8006284:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006286:	0021      	movs	r1, r4
 8006288:	881b      	ldrh	r3, [r3, #0]
 800628a:	9300      	str	r3, [sp, #0]
 800628c:	002b      	movs	r3, r5
 800628e:	f7ff fc81 	bl	8005b94 <_ZN6I2Cdev9readWordsEhhhPtt>
		Reading = Data;
 8006292:	2200      	movs	r2, #0
 8006294:	5eab      	ldrsh	r3, [r5, r2]
 8006296:	0018      	movs	r0, r3
 8006298:	4699      	mov	r9, r3
 800629a:	f7fb f82d 	bl	80012f8 <__aeabi_i2f>
		if (cal_accel) {
 800629e:	465b      	mov	r3, fp
 80062a0:	2b3b      	cmp	r3, #59	; 0x3b
 80062a2:	d100      	bne.n	80062a6 <_ZN7MPU60503PIDEhffh+0x72>
 80062a4:	e15d      	b.n	8006562 <_ZN7MPU60503PIDEhffh+0x32e>
			ITerm[i] = ((float) Reading) * 8;
		} else {
			ITerm[i] = Reading * 4;
 80062a6:	2181      	movs	r1, #129	; 0x81
 80062a8:	05c9      	lsls	r1, r1, #23
 80062aa:	f7fa fd23 	bl	8000cf4 <__aeabi_fmul>
 80062ae:	6030      	str	r0, [r6, #0]
	for (int i = 0; i < 3; i++) {
 80062b0:	9b06      	ldr	r3, [sp, #24]
 80062b2:	3701      	adds	r7, #1
 80062b4:	469c      	mov	ip, r3
 80062b6:	4464      	add	r4, ip
 80062b8:	b2e4      	uxtb	r4, r4
 80062ba:	3604      	adds	r6, #4
 80062bc:	2f03      	cmp	r7, #3
 80062be:	d1de      	bne.n	800627e <_ZN7MPU60503PIDEhffh+0x4a>
		}
	}

	for (int L = 0; L < Loops; L++) {
 80062c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d100      	bne.n	80062c8 <_ZN7MPU60503PIDEhffh+0x94>
 80062c6:	e0e4      	b.n	8006492 <_ZN7MPU60503PIDEhffh+0x25e>
 80062c8:	465b      	mov	r3, fp
 80062ca:	2b3b      	cmp	r3, #59	; 0x3b
 80062cc:	d100      	bne.n	80062d0 <_ZN7MPU60503PIDEhffh+0x9c>
 80062ce:	e154      	b.n	800657a <_ZN7MPU60503PIDEhffh+0x346>
 80062d0:	2300      	movs	r3, #0
 80062d2:	4cba      	ldr	r4, [pc, #744]	; (80065bc <_ZN7MPU60503PIDEhffh+0x388>)
 80062d4:	930c      	str	r3, [sp, #48]	; 0x30
 80062d6:	940d      	str	r4, [sp, #52]	; 0x34
 80062d8:	2300      	movs	r3, #0
 80062da:	930e      	str	r3, [sp, #56]	; 0x38
		eSample = 0;
		// 100 PI Calculations
		for (int c = 0; c < 100; c++) {
 80062dc:	2300      	movs	r3, #0
		eSample = 0;
 80062de:	46da      	mov	sl, fp
		for (int c = 0; c < 100; c++) {
 80062e0:	9305      	str	r3, [sp, #20]
		eSample = 0;
 80062e2:	930a      	str	r3, [sp, #40]	; 0x28
 80062e4:	ab13      	add	r3, sp, #76	; 0x4c
 80062e6:	4698      	mov	r8, r3
 80062e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
			eSum = 0;
 80062ea:	2400      	movs	r4, #0
		eSample = 0;
 80062ec:	4699      	mov	r9, r3
				//printf("I:%.1f ",ITerm[i]);

				if (cal_accel) {
					//printf("%f",(PTerm + ITerm[i]) / 8);
					Data = round((PTerm + ITerm[i]) / 8); 	//Compute PID Output
					Data = ((Data) & 0xFFFE) | BitZero[i]; // Insert Bit0 Saved at beginning
 80062ee:	4653      	mov	r3, sl
 80062f0:	46ca      	mov	sl, r9
 80062f2:	469b      	mov	fp, r3
 80062f4:	46a1      	mov	r9, r4
				I2Cdev::readWords(devAddr, ReadAddress + (i * 2), 1, (uint16_t*) &Data);
 80062f6:	0063      	lsls	r3, r4, #1
 80062f8:	9304      	str	r3, [sp, #16]
 80062fa:	445b      	add	r3, fp
 80062fc:	b2d9      	uxtb	r1, r3
 80062fe:	9b02      	ldr	r3, [sp, #8]
 8006300:	2201      	movs	r2, #1
 8006302:	7818      	ldrb	r0, [r3, #0]
 8006304:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006306:	881b      	ldrh	r3, [r3, #0]
 8006308:	9300      	str	r3, [sp, #0]
 800630a:	002b      	movs	r3, r5
 800630c:	f7ff fc42 	bl	8005b94 <_ZN6I2Cdev9readWordsEhhhPtt>
				Reading = Data;
 8006310:	2300      	movs	r3, #0
 8006312:	5ee8      	ldrsh	r0, [r5, r3]
 8006314:	f7fa fff0 	bl	80012f8 <__aeabi_i2f>
				if (cal_accel && (i == 2))
 8006318:	465b      	mov	r3, fp
				Reading = Data;
 800631a:	1c07      	adds	r7, r0, #0
				if (cal_accel && (i == 2))
 800631c:	2b3b      	cmp	r3, #59	; 0x3b
 800631e:	d100      	bne.n	8006322 <_ZN7MPU60503PIDEhffh+0xee>
 8006320:	e0e2      	b.n	80064e8 <_ZN7MPU60503PIDEhffh+0x2b4>
				Error = -Reading;
 8006322:	2380      	movs	r3, #128	; 0x80
				eSum += abs(Reading);
 8006324:	4648      	mov	r0, r9
				Error = -Reading;
 8006326:	061b      	lsls	r3, r3, #24
 8006328:	18fe      	adds	r6, r7, r3
				eSum += abs(Reading);
 800632a:	f7fb f82b 	bl	8001384 <__aeabi_ui2f>
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 800632e:	0079      	lsls	r1, r7, #1
 8006330:	0849      	lsrs	r1, r1, #1
 8006332:	f7fa f979 	bl	8000628 <__aeabi_fadd>
 8006336:	f7fa f8ef 	bl	8000518 <__aeabi_f2uiz>
				PTerm = kP * Error;
 800633a:	9907      	ldr	r1, [sp, #28]
				eSum += abs(Reading);
 800633c:	4681      	mov	r9, r0
				PTerm = kP * Error;
 800633e:	1c30      	adds	r0, r6, #0
 8006340:	f7fa fcd8 	bl	8000cf4 <__aeabi_fmul>
 8006344:	9003      	str	r0, [sp, #12]
				ITerm[i] += (Error * 0.001) * kI;
 8006346:	1c30      	adds	r0, r6, #0
 8006348:	f7fc fe70 	bl	800302c <__aeabi_f2d>
 800634c:	4a9c      	ldr	r2, [pc, #624]	; (80065c0 <_ZN7MPU60503PIDEhffh+0x38c>)
 800634e:	4b9d      	ldr	r3, [pc, #628]	; (80065c4 <_ZN7MPU60503PIDEhffh+0x390>)
 8006350:	f7fb ffc4 	bl	80022dc <__aeabi_dmul>
 8006354:	0006      	movs	r6, r0
 8006356:	9808      	ldr	r0, [sp, #32]
 8006358:	000f      	movs	r7, r1
 800635a:	f7fc fe67 	bl	800302c <__aeabi_f2d>
 800635e:	0002      	movs	r2, r0
 8006360:	000b      	movs	r3, r1
 8006362:	0030      	movs	r0, r6
 8006364:	0039      	movs	r1, r7
 8006366:	f7fb ffb9 	bl	80022dc <__aeabi_dmul>
 800636a:	4643      	mov	r3, r8
 800636c:	0006      	movs	r6, r0
 800636e:	6818      	ldr	r0, [r3, #0]
 8006370:	000f      	movs	r7, r1
 8006372:	f7fc fe5b 	bl	800302c <__aeabi_f2d>
 8006376:	000b      	movs	r3, r1
 8006378:	0002      	movs	r2, r0
 800637a:	0039      	movs	r1, r7
 800637c:	0030      	movs	r0, r6
 800637e:	f7fb f83d 	bl	80013fc <__aeabi_dadd>
 8006382:	f7fc fe9b 	bl	80030bc <__aeabi_d2f>
 8006386:	4643      	mov	r3, r8
 8006388:	6018      	str	r0, [r3, #0]
				if (cal_accel) {
 800638a:	465b      	mov	r3, fp
					Data = round((PTerm + ITerm[i]) / 8); 	//Compute PID Output
 800638c:	9903      	ldr	r1, [sp, #12]
				if (cal_accel) {
 800638e:	2b3b      	cmp	r3, #59	; 0x3b
 8006390:	d100      	bne.n	8006394 <_ZN7MPU60503PIDEhffh+0x160>
 8006392:	e095      	b.n	80064c0 <_ZN7MPU60503PIDEhffh+0x28c>
				} else {
					Data = round((PTerm + ITerm[i]) / 4);	//Compute PID Output
 8006394:	f7fa f948 	bl	8000628 <__aeabi_fadd>
 8006398:	21fa      	movs	r1, #250	; 0xfa
 800639a:	0589      	lsls	r1, r1, #22
 800639c:	f7fa fcaa 	bl	8000cf4 <__aeabi_fmul>
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 80063a0:	f000 fa08 	bl	80067b4 <roundf>
 80063a4:	f7fa ff88 	bl	80012b8 <__aeabi_f2iz>
 80063a8:	b200      	sxth	r0, r0
				}

				I2Cdev::writeWords(devAddr, SaveAddress + (i * shift), 1, (uint16_t*) &Data);
 80063aa:	9b02      	ldr	r3, [sp, #8]
 80063ac:	4651      	mov	r1, sl
 80063ae:	8028      	strh	r0, [r5, #0]
 80063b0:	2201      	movs	r2, #1
 80063b2:	7818      	ldrb	r0, [r3, #0]
 80063b4:	002b      	movs	r3, r5
 80063b6:	f7ff fccd 	bl	8005d54 <_ZN6I2Cdev10writeWordsEhhhPt>
			for (int i = 0; i < 3; i++) {
 80063ba:	9b06      	ldr	r3, [sp, #24]
 80063bc:	3401      	adds	r4, #1
 80063be:	4453      	add	r3, sl
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	469a      	mov	sl, r3
 80063c4:	2304      	movs	r3, #4
 80063c6:	469c      	mov	ip, r3
 80063c8:	44e0      	add	r8, ip
 80063ca:	2c03      	cmp	r4, #3
 80063cc:	d193      	bne.n	80062f6 <_ZN7MPU60503PIDEhffh+0xc2>
			}

			//printf("\n");

			// Error is still to great to continue
			if ((c == 99) && eSum > 1000) {
 80063ce:	9b05      	ldr	r3, [sp, #20]
 80063d0:	464c      	mov	r4, r9
 80063d2:	46da      	mov	sl, fp
 80063d4:	2b63      	cmp	r3, #99	; 0x63
 80063d6:	d100      	bne.n	80063da <_ZN7MPU60503PIDEhffh+0x1a6>
 80063d8:	e08f      	b.n	80064fa <_ZN7MPU60503PIDEhffh+0x2c6>
				printf("Error still : %d\n", (int) eSum);
				printf("*");
			}

			// Successfully found offsets prepare to  advance
			if ((eSum * (cal_accel ? .05 : 1)) < 5){
 80063da:	0020      	movs	r0, r4
 80063dc:	f7fc fe00 	bl	8002fe0 <__aeabi_ui2d>
 80063e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80063e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80063e4:	f7fb ff7a 	bl	80022dc <__aeabi_dmul>
 80063e8:	2200      	movs	r2, #0
 80063ea:	4b77      	ldr	r3, [pc, #476]	; (80065c8 <_ZN7MPU60503PIDEhffh+0x394>)
 80063ec:	f7fa f832 	bl	8000454 <__aeabi_dcmplt>
 80063f0:	2800      	cmp	r0, #0
 80063f2:	d003      	beq.n	80063fc <_ZN7MPU60503PIDEhffh+0x1c8>
				eSample++;
 80063f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063f6:	3301      	adds	r3, #1
 80063f8:	b21b      	sxth	r3, r3
 80063fa:	930a      	str	r3, [sp, #40]	; 0x28
			}

			// Advance to next Loop
			if ((eSum < 100) && (c > 10) && (eSample >= 10)){
 80063fc:	2c63      	cmp	r4, #99	; 0x63
 80063fe:	d805      	bhi.n	800640c <_ZN7MPU60503PIDEhffh+0x1d8>
 8006400:	9b05      	ldr	r3, [sp, #20]
 8006402:	2b0a      	cmp	r3, #10
 8006404:	dd02      	ble.n	800640c <_ZN7MPU60503PIDEhffh+0x1d8>
 8006406:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006408:	2b09      	cmp	r3, #9
 800640a:	dc08      	bgt.n	800641e <_ZN7MPU60503PIDEhffh+0x1ea>
				break;
			}

			delay(1);
 800640c:	2001      	movs	r0, #1
 800640e:	f7fd fc07 	bl	8003c20 <HAL_Delay>
		for (int c = 0; c < 100; c++) {
 8006412:	9b05      	ldr	r3, [sp, #20]
 8006414:	3301      	adds	r3, #1
 8006416:	9305      	str	r3, [sp, #20]
 8006418:	2b64      	cmp	r3, #100	; 0x64
 800641a:	d000      	beq.n	800641e <_ZN7MPU60503PIDEhffh+0x1ea>
 800641c:	e762      	b.n	80062e4 <_ZN7MPU60503PIDEhffh+0xb0>
		}

		printf(".");
 800641e:	202e      	movs	r0, #46	; 0x2e
 8006420:	f001 f990 	bl	8007744 <putchar>

		kP *= .75;
 8006424:	21fd      	movs	r1, #253	; 0xfd
 8006426:	9807      	ldr	r0, [sp, #28]
 8006428:	0589      	lsls	r1, r1, #22
 800642a:	f7fa fc63 	bl	8000cf4 <__aeabi_fmul>
		kI *= .75;
 800642e:	21fd      	movs	r1, #253	; 0xfd
		kP *= .75;
 8006430:	9007      	str	r0, [sp, #28]
		kI *= .75;
 8006432:	0589      	lsls	r1, r1, #22
 8006434:	9808      	ldr	r0, [sp, #32]
 8006436:	f7fa fc5d 	bl	8000cf4 <__aeabi_fmul>
		for (int i = 0; i < 3; i++) {
			if (cal_accel) {
				//Compute PID Output
				Data = round((ITerm[i]) / 8);
				// Insert Bit0 Saved at beginning
				Data = ((Data) & 0xFFFE) | BitZero[i];
 800643a:	2301      	movs	r3, #1
 800643c:	46d3      	mov	fp, sl
		for (int i = 0; i < 3; i++) {
 800643e:	2700      	movs	r7, #0
				Data = ((Data) & 0xFFFE) | BitZero[i];
 8006440:	4698      	mov	r8, r3
		kI *= .75;
 8006442:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8006444:	9008      	str	r0, [sp, #32]
 8006446:	ae13      	add	r6, sp, #76	; 0x4c
			if (cal_accel) {
 8006448:	465b      	mov	r3, fp
 800644a:	2b3b      	cmp	r3, #59	; 0x3b
 800644c:	d100      	bne.n	8006450 <_ZN7MPU60503PIDEhffh+0x21c>
 800644e:	e077      	b.n	8006540 <_ZN7MPU60503PIDEhffh+0x30c>
			} else {
				Data = round((ITerm[i]) / 4);
 8006450:	21fa      	movs	r1, #250	; 0xfa
 8006452:	6830      	ldr	r0, [r6, #0]
 8006454:	0589      	lsls	r1, r1, #22
 8006456:	f7fa fc4d 	bl	8000cf4 <__aeabi_fmul>
 800645a:	f000 f9ab 	bl	80067b4 <roundf>
 800645e:	f7fa ff2b 	bl	80012b8 <__aeabi_f2iz>
 8006462:	b200      	sxth	r0, r0
			}

			I2Cdev::writeWords(devAddr, SaveAddress + (i * shift), 1, (uint16_t*) &Data);
 8006464:	9b02      	ldr	r3, [sp, #8]
 8006466:	0021      	movs	r1, r4
 8006468:	8028      	strh	r0, [r5, #0]
 800646a:	2201      	movs	r2, #1
 800646c:	7818      	ldrb	r0, [r3, #0]
 800646e:	002b      	movs	r3, r5
 8006470:	f7ff fc70 	bl	8005d54 <_ZN6I2Cdev10writeWordsEhhhPt>
		for (int i = 0; i < 3; i++) {
 8006474:	9b06      	ldr	r3, [sp, #24]
 8006476:	3701      	adds	r7, #1
 8006478:	469c      	mov	ip, r3
 800647a:	4464      	add	r4, ip
 800647c:	b2e4      	uxtb	r4, r4
 800647e:	3604      	adds	r6, #4
 8006480:	2f03      	cmp	r7, #3
 8006482:	d1e1      	bne.n	8006448 <_ZN7MPU60503PIDEhffh+0x214>
	for (int L = 0; L < Loops; L++) {
 8006484:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006486:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006488:	3301      	adds	r3, #1
 800648a:	930e      	str	r3, [sp, #56]	; 0x38
 800648c:	429a      	cmp	r2, r3
 800648e:	dd00      	ble.n	8006492 <_ZN7MPU60503PIDEhffh+0x25e>
 8006490:	e724      	b.n	80062dc <_ZN7MPU60503PIDEhffh+0xa8>
		}
	}

	printf("\n");
 8006492:	200a      	movs	r0, #10
 8006494:	f001 f956 	bl	8007744 <putchar>
    I2Cdev::writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_FIFO_RESET_BIT, true);
 8006498:	9c02      	ldr	r4, [sp, #8]
 800649a:	2301      	movs	r3, #1
 800649c:	2202      	movs	r2, #2
 800649e:	216a      	movs	r1, #106	; 0x6a
 80064a0:	7820      	ldrb	r0, [r4, #0]
 80064a2:	f7ff fbb7 	bl	8005c14 <_ZN6I2Cdev8writeBitEhhhh>
    I2Cdev::writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_RESET_BIT, true);
 80064a6:	2301      	movs	r3, #1
 80064a8:	2203      	movs	r2, #3
 80064aa:	216a      	movs	r1, #106	; 0x6a
 80064ac:	7820      	ldrb	r0, [r4, #0]
 80064ae:	f7ff fbb1 	bl	8005c14 <_ZN6I2Cdev8writeBitEhhhh>
	resetFIFO();
	resetDMP();
}
 80064b2:	b017      	add	sp, #92	; 0x5c
 80064b4:	bcf0      	pop	{r4, r5, r6, r7}
 80064b6:	46bb      	mov	fp, r7
 80064b8:	46b2      	mov	sl, r6
 80064ba:	46a9      	mov	r9, r5
 80064bc:	46a0      	mov	r8, r4
 80064be:	bdf0      	pop	{r4, r5, r6, r7, pc}
					Data = round((PTerm + ITerm[i]) / 8); 	//Compute PID Output
 80064c0:	f7fa f8b2 	bl	8000628 <__aeabi_fadd>
 80064c4:	21f8      	movs	r1, #248	; 0xf8
 80064c6:	0589      	lsls	r1, r1, #22
 80064c8:	f7fa fc14 	bl	8000cf4 <__aeabi_fmul>
 80064cc:	f000 f972 	bl	80067b4 <roundf>
 80064d0:	f7fa fef2 	bl	80012b8 <__aeabi_f2iz>
					Data = ((Data) & 0xFFFE) | BitZero[i]; // Insert Bit0 Saved at beginning
 80064d4:	2301      	movs	r3, #1
 80064d6:	210c      	movs	r1, #12
 80064d8:	4398      	bics	r0, r3
 80064da:	9a04      	ldr	r2, [sp, #16]
 80064dc:	ab0e      	add	r3, sp, #56	; 0x38
 80064de:	185b      	adds	r3, r3, r1
 80064e0:	5a9b      	ldrh	r3, [r3, r2]
 80064e2:	4318      	orrs	r0, r3
 80064e4:	b200      	sxth	r0, r0
 80064e6:	e760      	b.n	80063aa <_ZN7MPU60503PIDEhffh+0x176>
				if (cal_accel && (i == 2))
 80064e8:	2c02      	cmp	r4, #2
 80064ea:	d000      	beq.n	80064ee <_ZN7MPU60503PIDEhffh+0x2ba>
 80064ec:	e719      	b.n	8006322 <_ZN7MPU60503PIDEhffh+0xee>
					Reading -= 16384.0;
 80064ee:	218d      	movs	r1, #141	; 0x8d
 80064f0:	05c9      	lsls	r1, r1, #23
 80064f2:	f7fa fd19 	bl	8000f28 <__aeabi_fsub>
 80064f6:	1c07      	adds	r7, r0, #0
 80064f8:	e713      	b.n	8006322 <_ZN7MPU60503PIDEhffh+0xee>
			if ((c == 99) && eSum > 1000) {
 80064fa:	23fa      	movs	r3, #250	; 0xfa
 80064fc:	009b      	lsls	r3, r3, #2
 80064fe:	429c      	cmp	r4, r3
 8006500:	d800      	bhi.n	8006504 <_ZN7MPU60503PIDEhffh+0x2d0>
 8006502:	e76a      	b.n	80063da <_ZN7MPU60503PIDEhffh+0x1a6>
				printf("Error still : %d\n", (int) eSum);
 8006504:	4649      	mov	r1, r9
 8006506:	4831      	ldr	r0, [pc, #196]	; (80065cc <_ZN7MPU60503PIDEhffh+0x398>)
 8006508:	f001 f902 	bl	8007710 <iprintf>
				printf("*");
 800650c:	202a      	movs	r0, #42	; 0x2a
 800650e:	f001 f919 	bl	8007744 <putchar>
			if ((eSum * (cal_accel ? .05 : 1)) < 5){
 8006512:	4648      	mov	r0, r9
 8006514:	f7fc fd64 	bl	8002fe0 <__aeabi_ui2d>
 8006518:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800651a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800651c:	f7fb fede 	bl	80022dc <__aeabi_dmul>
 8006520:	2200      	movs	r2, #0
 8006522:	4b29      	ldr	r3, [pc, #164]	; (80065c8 <_ZN7MPU60503PIDEhffh+0x394>)
 8006524:	f7f9 ff96 	bl	8000454 <__aeabi_dcmplt>
 8006528:	2800      	cmp	r0, #0
 800652a:	d003      	beq.n	8006534 <_ZN7MPU60503PIDEhffh+0x300>
				eSample++;
 800652c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800652e:	3301      	adds	r3, #1
 8006530:	b21b      	sxth	r3, r3
 8006532:	930a      	str	r3, [sp, #40]	; 0x28
			delay(1);
 8006534:	2001      	movs	r0, #1
 8006536:	f7fd fb73 	bl	8003c20 <HAL_Delay>
		for (int c = 0; c < 100; c++) {
 800653a:	2301      	movs	r3, #1
 800653c:	9305      	str	r3, [sp, #20]
 800653e:	e6d1      	b.n	80062e4 <_ZN7MPU60503PIDEhffh+0xb0>
				Data = round((ITerm[i]) / 8);
 8006540:	21f8      	movs	r1, #248	; 0xf8
 8006542:	6830      	ldr	r0, [r6, #0]
 8006544:	0589      	lsls	r1, r1, #22
 8006546:	f7fa fbd5 	bl	8000cf4 <__aeabi_fmul>
 800654a:	f000 f933 	bl	80067b4 <roundf>
 800654e:	f7fa feb3 	bl	80012b8 <__aeabi_f2iz>
				Data = ((Data) & 0xFFFE) | BitZero[i];
 8006552:	4643      	mov	r3, r8
 8006554:	aa11      	add	r2, sp, #68	; 0x44
 8006556:	4398      	bics	r0, r3
 8006558:	007b      	lsls	r3, r7, #1
 800655a:	5a9b      	ldrh	r3, [r3, r2]
 800655c:	4318      	orrs	r0, r3
 800655e:	b200      	sxth	r0, r0
 8006560:	e780      	b.n	8006464 <_ZN7MPU60503PIDEhffh+0x230>
			BitZero[i] = Data & 1;
 8006562:	4649      	mov	r1, r9
 8006564:	2201      	movs	r2, #1
 8006566:	400a      	ands	r2, r1
 8006568:	4641      	mov	r1, r8
 800656a:	007b      	lsls	r3, r7, #1
 800656c:	525a      	strh	r2, [r3, r1]
			ITerm[i] = ((float) Reading) * 8;
 800656e:	2182      	movs	r1, #130	; 0x82
 8006570:	05c9      	lsls	r1, r1, #23
 8006572:	f7fa fbbf 	bl	8000cf4 <__aeabi_fmul>
 8006576:	6030      	str	r0, [r6, #0]
 8006578:	e69a      	b.n	80062b0 <_ZN7MPU60503PIDEhffh+0x7c>
 800657a:	4b15      	ldr	r3, [pc, #84]	; (80065d0 <_ZN7MPU60503PIDEhffh+0x39c>)
 800657c:	4c15      	ldr	r4, [pc, #84]	; (80065d4 <_ZN7MPU60503PIDEhffh+0x3a0>)
 800657e:	930c      	str	r3, [sp, #48]	; 0x30
 8006580:	940d      	str	r4, [sp, #52]	; 0x34
 8006582:	e6a9      	b.n	80062d8 <_ZN7MPU60503PIDEhffh+0xa4>
    I2Cdev::readBits(devAddr, MPU6050_RA_WHO_AM_I, MPU6050_WHO_AM_I_BIT, MPU6050_WHO_AM_I_LENGTH, buffer);
 8006584:	0004      	movs	r4, r0
 8006586:	4b0c      	ldr	r3, [pc, #48]	; (80065b8 <_ZN7MPU60503PIDEhffh+0x384>)
 8006588:	7800      	ldrb	r0, [r0, #0]
 800658a:	9309      	str	r3, [sp, #36]	; 0x24
 800658c:	881b      	ldrh	r3, [r3, #0]
 800658e:	2206      	movs	r2, #6
 8006590:	9301      	str	r3, [sp, #4]
 8006592:	1c63      	adds	r3, r4, #1
 8006594:	9300      	str	r3, [sp, #0]
 8006596:	2175      	movs	r1, #117	; 0x75
 8006598:	2306      	movs	r3, #6
 800659a:	f7ff fadf 	bl	8005b5c <_ZN6I2Cdev8readBitsEhhhhPht>
	uint8_t SaveAddress = cal_accel ? ((getDeviceID() < 0x38) ? 0x06 : 0x77) : 0x13;
 800659e:	7863      	ldrb	r3, [r4, #1]
 80065a0:	2b37      	cmp	r3, #55	; 0x37
 80065a2:	d804      	bhi.n	80065ae <_ZN7MPU60503PIDEhffh+0x37a>
 80065a4:	2306      	movs	r3, #6
 80065a6:	930b      	str	r3, [sp, #44]	; 0x2c
	uint8_t shift = (SaveAddress == 0x77) ? 3 : 2;
 80065a8:	3b04      	subs	r3, #4
 80065aa:	9306      	str	r3, [sp, #24]
 80065ac:	e659      	b.n	8006262 <_ZN7MPU60503PIDEhffh+0x2e>
	uint8_t SaveAddress = cal_accel ? ((getDeviceID() < 0x38) ? 0x06 : 0x77) : 0x13;
 80065ae:	2377      	movs	r3, #119	; 0x77
 80065b0:	930b      	str	r3, [sp, #44]	; 0x2c
	uint8_t shift = (SaveAddress == 0x77) ? 3 : 2;
 80065b2:	3b74      	subs	r3, #116	; 0x74
 80065b4:	9306      	str	r3, [sp, #24]
 80065b6:	e654      	b.n	8006262 <_ZN7MPU60503PIDEhffh+0x2e>
 80065b8:	2000001c 	.word	0x2000001c
 80065bc:	3ff00000 	.word	0x3ff00000
 80065c0:	d2f1a9fc 	.word	0xd2f1a9fc
 80065c4:	3f50624d 	.word	0x3f50624d
 80065c8:	40140000 	.word	0x40140000
 80065cc:	0800c2ec 	.word	0x0800c2ec
 80065d0:	9999999a 	.word	0x9999999a
 80065d4:	3fa99999 	.word	0x3fa99999

080065d8 <_ZN7MPU605013CalibrateGyroEh>:
void MPU6050::CalibrateGyro(uint8_t Loops ) {
 80065d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065da:	46c6      	mov	lr, r8
 80065dc:	b500      	push	{lr}
 80065de:	0005      	movs	r5, r0
 80065e0:	b082      	sub	sp, #8
    x = (100 - mapArduino(Loops, 1, 5, 20, 0)) * .01;
 80065e2:	0008      	movs	r0, r1
void MPU6050::CalibrateGyro(uint8_t Loops ) {
 80065e4:	000c      	movs	r4, r1
    x = (100 - mapArduino(Loops, 1, 5, 20, 0)) * .01;
 80065e6:	f7fa fecd 	bl	8001384 <__aeabi_ui2f>
 80065ea:	2300      	movs	r3, #0
 80065ec:	21fe      	movs	r1, #254	; 0xfe
 80065ee:	4a18      	ldr	r2, [pc, #96]	; (8006650 <_ZN7MPU605013CalibrateGyroEh+0x78>)
 80065f0:	9300      	str	r3, [sp, #0]
 80065f2:	0589      	lsls	r1, r1, #22
 80065f4:	4b17      	ldr	r3, [pc, #92]	; (8006654 <_ZN7MPU605013CalibrateGyroEh+0x7c>)
 80065f6:	f7ff fa4f 	bl	8005a98 <_Z10mapArduinofffff>
 80065fa:	1c01      	adds	r1, r0, #0
 80065fc:	4816      	ldr	r0, [pc, #88]	; (8006658 <_ZN7MPU605013CalibrateGyroEh+0x80>)
 80065fe:	f7fa fc93 	bl	8000f28 <__aeabi_fsub>
 8006602:	f7fc fd13 	bl	800302c <__aeabi_f2d>
 8006606:	4a15      	ldr	r2, [pc, #84]	; (800665c <_ZN7MPU605013CalibrateGyroEh+0x84>)
 8006608:	4b15      	ldr	r3, [pc, #84]	; (8006660 <_ZN7MPU605013CalibrateGyroEh+0x88>)
 800660a:	f7fb fe67 	bl	80022dc <__aeabi_dmul>
 800660e:	f7fc fd55 	bl	80030bc <__aeabi_d2f>
    kP *= x;
 8006612:	f7fc fd0b 	bl	800302c <__aeabi_f2d>
    kI *= x;
 8006616:	2200      	movs	r2, #0
 8006618:	4b12      	ldr	r3, [pc, #72]	; (8006664 <_ZN7MPU605013CalibrateGyroEh+0x8c>)
    kP *= x;
 800661a:	0006      	movs	r6, r0
 800661c:	000f      	movs	r7, r1
    kI *= x;
 800661e:	f7fb fe5d 	bl	80022dc <__aeabi_dmul>
    PID( 0x43,  kP, kI,  Loops);
 8006622:	f7fc fd4b 	bl	80030bc <__aeabi_d2f>
    kP *= x;
 8006626:	4a10      	ldr	r2, [pc, #64]	; (8006668 <_ZN7MPU605013CalibrateGyroEh+0x90>)
    PID( 0x43,  kP, kI,  Loops);
 8006628:	4680      	mov	r8, r0
    kP *= x;
 800662a:	4b10      	ldr	r3, [pc, #64]	; (800666c <_ZN7MPU605013CalibrateGyroEh+0x94>)
 800662c:	0030      	movs	r0, r6
 800662e:	0039      	movs	r1, r7
 8006630:	f7fb fe54 	bl	80022dc <__aeabi_dmul>
    PID( 0x43,  kP, kI,  Loops);
 8006634:	f7fc fd42 	bl	80030bc <__aeabi_d2f>
 8006638:	4643      	mov	r3, r8
 800663a:	1c02      	adds	r2, r0, #0
 800663c:	2143      	movs	r1, #67	; 0x43
 800663e:	0028      	movs	r0, r5
 8006640:	9400      	str	r4, [sp, #0]
 8006642:	f7ff fdf7 	bl	8006234 <_ZN7MPU60503PIDEhffh>
}
 8006646:	b002      	add	sp, #8
 8006648:	bc80      	pop	{r7}
 800664a:	46b8      	mov	r8, r7
 800664c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800664e:	46c0      	nop			; (mov r8, r8)
 8006650:	40a00000 	.word	0x40a00000
 8006654:	41a00000 	.word	0x41a00000
 8006658:	42c80000 	.word	0x42c80000
 800665c:	47ae147b 	.word	0x47ae147b
 8006660:	3f847ae1 	.word	0x3f847ae1
 8006664:	40568000 	.word	0x40568000
 8006668:	33333333 	.word	0x33333333
 800666c:	3fd33333 	.word	0x3fd33333

08006670 <_ZN7MPU605014CalibrateAccelEh>:
void MPU6050::CalibrateAccel(uint8_t Loops ) {
 8006670:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006672:	0006      	movs	r6, r0
 8006674:	b083      	sub	sp, #12
    x = (100 - mapArduino(Loops, 1, 5, 20, 0)) * .01;
 8006676:	0008      	movs	r0, r1
void MPU6050::CalibrateAccel(uint8_t Loops ) {
 8006678:	000c      	movs	r4, r1
    x = (100 - mapArduino(Loops, 1, 5, 20, 0)) * .01;
 800667a:	f7fa fe83 	bl	8001384 <__aeabi_ui2f>
 800667e:	2300      	movs	r3, #0
 8006680:	21fe      	movs	r1, #254	; 0xfe
 8006682:	4f12      	ldr	r7, [pc, #72]	; (80066cc <_ZN7MPU605014CalibrateAccelEh+0x5c>)
 8006684:	4a12      	ldr	r2, [pc, #72]	; (80066d0 <_ZN7MPU605014CalibrateAccelEh+0x60>)
 8006686:	9300      	str	r3, [sp, #0]
 8006688:	0589      	lsls	r1, r1, #22
 800668a:	1c3b      	adds	r3, r7, #0
 800668c:	f7ff fa04 	bl	8005a98 <_Z10mapArduinofffff>
 8006690:	1c01      	adds	r1, r0, #0
 8006692:	4810      	ldr	r0, [pc, #64]	; (80066d4 <_ZN7MPU605014CalibrateAccelEh+0x64>)
 8006694:	f7fa fc48 	bl	8000f28 <__aeabi_fsub>
 8006698:	f7fc fcc8 	bl	800302c <__aeabi_f2d>
 800669c:	4a0e      	ldr	r2, [pc, #56]	; (80066d8 <_ZN7MPU605014CalibrateAccelEh+0x68>)
 800669e:	4b0f      	ldr	r3, [pc, #60]	; (80066dc <_ZN7MPU605014CalibrateAccelEh+0x6c>)
 80066a0:	f7fb fe1c 	bl	80022dc <__aeabi_dmul>
 80066a4:	f7fc fd0a 	bl	80030bc <__aeabi_d2f>
    kI *= x;
 80066a8:	1c39      	adds	r1, r7, #0
    x = (100 - mapArduino(Loops, 1, 5, 20, 0)) * .01;
 80066aa:	1c05      	adds	r5, r0, #0
    kI *= x;
 80066ac:	f7fa fb22 	bl	8000cf4 <__aeabi_fmul>
    kP *= x;
 80066b0:	490b      	ldr	r1, [pc, #44]	; (80066e0 <_ZN7MPU605014CalibrateAccelEh+0x70>)
    kI *= x;
 80066b2:	1c07      	adds	r7, r0, #0
    kP *= x;
 80066b4:	1c28      	adds	r0, r5, #0
 80066b6:	f7fa fb1d 	bl	8000cf4 <__aeabi_fmul>
    PID( 0x3B, kP, kI,  Loops);
 80066ba:	213b      	movs	r1, #59	; 0x3b
    kP *= x;
 80066bc:	1c02      	adds	r2, r0, #0
    PID( 0x3B, kP, kI,  Loops);
 80066be:	9400      	str	r4, [sp, #0]
 80066c0:	0030      	movs	r0, r6
 80066c2:	1c3b      	adds	r3, r7, #0
 80066c4:	f7ff fdb6 	bl	8006234 <_ZN7MPU60503PIDEhffh>
}
 80066c8:	b003      	add	sp, #12
 80066ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066cc:	41a00000 	.word	0x41a00000
 80066d0:	40a00000 	.word	0x40a00000
 80066d4:	42c80000 	.word	0x42c80000
 80066d8:	47ae147b 	.word	0x47ae147b
 80066dc:	3f847ae1 	.word	0x3f847ae1
 80066e0:	3e99999a 	.word	0x3e99999a

080066e4 <_ZN7MPU605018PrintActiveOffsetsEv>:

void MPU6050::PrintActiveOffsets() {
 80066e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066e6:	0005      	movs	r5, r0
    I2Cdev::readBits(devAddr, MPU6050_RA_WHO_AM_I, MPU6050_WHO_AM_I_BIT, MPU6050_WHO_AM_I_LENGTH, buffer);
 80066e8:	4f2e      	ldr	r7, [pc, #184]	; (80067a4 <_ZN7MPU605018PrintActiveOffsetsEv+0xc0>)
void MPU6050::PrintActiveOffsets() {
 80066ea:	b085      	sub	sp, #20
    I2Cdev::readBits(devAddr, MPU6050_RA_WHO_AM_I, MPU6050_WHO_AM_I_BIT, MPU6050_WHO_AM_I_LENGTH, buffer);
 80066ec:	883b      	ldrh	r3, [r7, #0]
 80066ee:	7800      	ldrb	r0, [r0, #0]
 80066f0:	9301      	str	r3, [sp, #4]
 80066f2:	1c6b      	adds	r3, r5, #1
 80066f4:	9300      	str	r3, [sp, #0]
 80066f6:	2206      	movs	r2, #6
 80066f8:	2306      	movs	r3, #6
 80066fa:	2175      	movs	r1, #117	; 0x75
 80066fc:	f7ff fa2e 	bl	8005b5c <_ZN6I2Cdev8readBitsEhhhhPht>

	int16_t Data[3];
	uint8_t AOffsetRegister = (getDeviceID() < 0x38) ? MPU6050_RA_XA_OFFS_H : 0x77;
 8006700:	786b      	ldrb	r3, [r5, #1]

	if (AOffsetRegister == 0x06) {
		I2Cdev::readWords(devAddr, AOffsetRegister, 3, (uint16_t*) Data);
 8006702:	7828      	ldrb	r0, [r5, #0]
 8006704:	ac02      	add	r4, sp, #8
	uint8_t AOffsetRegister = (getDeviceID() < 0x38) ? MPU6050_RA_XA_OFFS_H : 0x77;
 8006706:	2b37      	cmp	r3, #55	; 0x37
 8006708:	d832      	bhi.n	8006770 <_ZN7MPU605018PrintActiveOffsetsEv+0x8c>
		I2Cdev::readWords(devAddr, AOffsetRegister, 3, (uint16_t*) Data);
 800670a:	883b      	ldrh	r3, [r7, #0]
 800670c:	2203      	movs	r2, #3
 800670e:	9300      	str	r3, [sp, #0]
 8006710:	2106      	movs	r1, #6
 8006712:	0023      	movs	r3, r4
 8006714:	f7ff fa3e 	bl	8005b94 <_ZN6I2Cdev9readWordsEhhhPtt>
		I2Cdev::readWords(devAddr, AOffsetRegister, 1, (uint16_t*) Data);
		I2Cdev::readWords(devAddr, AOffsetRegister + 3, 1, (uint16_t*) Data + 1);
		I2Cdev::readWords(devAddr, AOffsetRegister + 6, 1, (uint16_t*) Data + 2);
	}

	printf("//           X Accel  Y Accel  Z Accel   X Gyro   Y Gyro   Z Gyro\n//OFFSETS   ");
 8006718:	4823      	ldr	r0, [pc, #140]	; (80067a8 <_ZN7MPU605018PrintActiveOffsetsEv+0xc4>)
 800671a:	f000 fff9 	bl	8007710 <iprintf>
	printf("%d     ,  ", Data[0]);
 800671e:	4e23      	ldr	r6, [pc, #140]	; (80067ac <_ZN7MPU605018PrintActiveOffsetsEv+0xc8>)
 8006720:	2300      	movs	r3, #0
 8006722:	5ee1      	ldrsh	r1, [r4, r3]
 8006724:	0030      	movs	r0, r6
 8006726:	f000 fff3 	bl	8007710 <iprintf>
	printf("%d     ,  ", Data[1]);
 800672a:	2302      	movs	r3, #2
 800672c:	5ee1      	ldrsh	r1, [r4, r3]
 800672e:	0030      	movs	r0, r6
 8006730:	f000 ffee 	bl	8007710 <iprintf>
	printf("%d     ,  ", Data[2]);
 8006734:	2304      	movs	r3, #4
 8006736:	5ee1      	ldrsh	r1, [r4, r3]
 8006738:	0030      	movs	r0, r6
 800673a:	f000 ffe9 	bl	8007710 <iprintf>

	I2Cdev::readWords(devAddr, 0x13, 3, (uint16_t*) Data);
 800673e:	883b      	ldrh	r3, [r7, #0]
 8006740:	2203      	movs	r2, #3
 8006742:	9300      	str	r3, [sp, #0]
 8006744:	2113      	movs	r1, #19
 8006746:	0023      	movs	r3, r4
 8006748:	7828      	ldrb	r0, [r5, #0]
 800674a:	f7ff fa23 	bl	8005b94 <_ZN6I2Cdev9readWordsEhhhPtt>
	printf("%d     ,  ", Data[0]);
 800674e:	2300      	movs	r3, #0
 8006750:	5ee1      	ldrsh	r1, [r4, r3]
 8006752:	0030      	movs	r0, r6
 8006754:	f000 ffdc 	bl	8007710 <iprintf>
	printf("%d     ,  ", Data[1]);
 8006758:	2302      	movs	r3, #2
 800675a:	5ee1      	ldrsh	r1, [r4, r3]
 800675c:	0030      	movs	r0, r6
 800675e:	f000 ffd7 	bl	8007710 <iprintf>
	printf("%d     \n", Data[2]);
 8006762:	2304      	movs	r3, #4
 8006764:	5ee1      	ldrsh	r1, [r4, r3]
 8006766:	4812      	ldr	r0, [pc, #72]	; (80067b0 <_ZN7MPU605018PrintActiveOffsetsEv+0xcc>)
 8006768:	f000 ffd2 	bl	8007710 <iprintf>
}
 800676c:	b005      	add	sp, #20
 800676e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		I2Cdev::readWords(devAddr, AOffsetRegister, 1, (uint16_t*) Data);
 8006770:	883b      	ldrh	r3, [r7, #0]
 8006772:	2201      	movs	r2, #1
 8006774:	9300      	str	r3, [sp, #0]
 8006776:	2177      	movs	r1, #119	; 0x77
 8006778:	0023      	movs	r3, r4
 800677a:	f7ff fa0b 	bl	8005b94 <_ZN6I2Cdev9readWordsEhhhPtt>
		I2Cdev::readWords(devAddr, AOffsetRegister + 3, 1, (uint16_t*) Data + 1);
 800677e:	883b      	ldrh	r3, [r7, #0]
 8006780:	2201      	movs	r2, #1
 8006782:	9300      	str	r3, [sp, #0]
 8006784:	230a      	movs	r3, #10
 8006786:	217a      	movs	r1, #122	; 0x7a
 8006788:	446b      	add	r3, sp
 800678a:	7828      	ldrb	r0, [r5, #0]
 800678c:	f7ff fa02 	bl	8005b94 <_ZN6I2Cdev9readWordsEhhhPtt>
		I2Cdev::readWords(devAddr, AOffsetRegister + 6, 1, (uint16_t*) Data + 2);
 8006790:	883b      	ldrh	r3, [r7, #0]
 8006792:	2201      	movs	r2, #1
 8006794:	9300      	str	r3, [sp, #0]
 8006796:	217d      	movs	r1, #125	; 0x7d
 8006798:	7828      	ldrb	r0, [r5, #0]
 800679a:	ab03      	add	r3, sp, #12
 800679c:	f7ff f9fa 	bl	8005b94 <_ZN6I2Cdev9readWordsEhhhPtt>
 80067a0:	e7ba      	b.n	8006718 <_ZN7MPU605018PrintActiveOffsetsEv+0x34>
 80067a2:	46c0      	nop			; (mov r8, r8)
 80067a4:	2000001c 	.word	0x2000001c
 80067a8:	0800c300 	.word	0x0800c300
 80067ac:	0800c350 	.word	0x0800c350
 80067b0:	0800c35c 	.word	0x0800c35c

080067b4 <roundf>:
 80067b4:	0dc3      	lsrs	r3, r0, #23
 80067b6:	b2db      	uxtb	r3, r3
 80067b8:	3b7f      	subs	r3, #127	; 0x7f
 80067ba:	0001      	movs	r1, r0
 80067bc:	b510      	push	{r4, lr}
 80067be:	2b16      	cmp	r3, #22
 80067c0:	dc13      	bgt.n	80067ea <roundf+0x36>
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	da07      	bge.n	80067d6 <roundf+0x22>
 80067c6:	0fc0      	lsrs	r0, r0, #31
 80067c8:	07c0      	lsls	r0, r0, #31
 80067ca:	3301      	adds	r3, #1
 80067cc:	d102      	bne.n	80067d4 <roundf+0x20>
 80067ce:	23fe      	movs	r3, #254	; 0xfe
 80067d0:	059b      	lsls	r3, r3, #22
 80067d2:	4318      	orrs	r0, r3
 80067d4:	bd10      	pop	{r4, pc}
 80067d6:	4a07      	ldr	r2, [pc, #28]	; (80067f4 <roundf+0x40>)
 80067d8:	411a      	asrs	r2, r3
 80067da:	4202      	tst	r2, r0
 80067dc:	d0fa      	beq.n	80067d4 <roundf+0x20>
 80067de:	2080      	movs	r0, #128	; 0x80
 80067e0:	03c0      	lsls	r0, r0, #15
 80067e2:	4118      	asrs	r0, r3
 80067e4:	1840      	adds	r0, r0, r1
 80067e6:	4390      	bics	r0, r2
 80067e8:	e7f4      	b.n	80067d4 <roundf+0x20>
 80067ea:	2b80      	cmp	r3, #128	; 0x80
 80067ec:	d1f2      	bne.n	80067d4 <roundf+0x20>
 80067ee:	f7f9 ff1b 	bl	8000628 <__aeabi_fadd>
 80067f2:	e7ef      	b.n	80067d4 <roundf+0x20>
 80067f4:	007fffff 	.word	0x007fffff

080067f8 <nanf>:
 80067f8:	4800      	ldr	r0, [pc, #0]	; (80067fc <nanf+0x4>)
 80067fa:	4770      	bx	lr
 80067fc:	7fc00000 	.word	0x7fc00000

08006800 <__errno>:
 8006800:	4b01      	ldr	r3, [pc, #4]	; (8006808 <__errno+0x8>)
 8006802:	6818      	ldr	r0, [r3, #0]
 8006804:	4770      	bx	lr
 8006806:	46c0      	nop			; (mov r8, r8)
 8006808:	20000020 	.word	0x20000020

0800680c <__libc_init_array>:
 800680c:	b570      	push	{r4, r5, r6, lr}
 800680e:	2600      	movs	r6, #0
 8006810:	4d0c      	ldr	r5, [pc, #48]	; (8006844 <__libc_init_array+0x38>)
 8006812:	4c0d      	ldr	r4, [pc, #52]	; (8006848 <__libc_init_array+0x3c>)
 8006814:	1b64      	subs	r4, r4, r5
 8006816:	10a4      	asrs	r4, r4, #2
 8006818:	42a6      	cmp	r6, r4
 800681a:	d109      	bne.n	8006830 <__libc_init_array+0x24>
 800681c:	2600      	movs	r6, #0
 800681e:	f004 fe0d 	bl	800b43c <_init>
 8006822:	4d0a      	ldr	r5, [pc, #40]	; (800684c <__libc_init_array+0x40>)
 8006824:	4c0a      	ldr	r4, [pc, #40]	; (8006850 <__libc_init_array+0x44>)
 8006826:	1b64      	subs	r4, r4, r5
 8006828:	10a4      	asrs	r4, r4, #2
 800682a:	42a6      	cmp	r6, r4
 800682c:	d105      	bne.n	800683a <__libc_init_array+0x2e>
 800682e:	bd70      	pop	{r4, r5, r6, pc}
 8006830:	00b3      	lsls	r3, r6, #2
 8006832:	58eb      	ldr	r3, [r5, r3]
 8006834:	4798      	blx	r3
 8006836:	3601      	adds	r6, #1
 8006838:	e7ee      	b.n	8006818 <__libc_init_array+0xc>
 800683a:	00b3      	lsls	r3, r6, #2
 800683c:	58eb      	ldr	r3, [r5, r3]
 800683e:	4798      	blx	r3
 8006840:	3601      	adds	r6, #1
 8006842:	e7f2      	b.n	800682a <__libc_init_array+0x1e>
 8006844:	0800c81c 	.word	0x0800c81c
 8006848:	0800c81c 	.word	0x0800c81c
 800684c:	0800c81c 	.word	0x0800c81c
 8006850:	0800c824 	.word	0x0800c824

08006854 <malloc>:
 8006854:	b510      	push	{r4, lr}
 8006856:	4b03      	ldr	r3, [pc, #12]	; (8006864 <malloc+0x10>)
 8006858:	0001      	movs	r1, r0
 800685a:	6818      	ldr	r0, [r3, #0]
 800685c:	f000 f878 	bl	8006950 <_malloc_r>
 8006860:	bd10      	pop	{r4, pc}
 8006862:	46c0      	nop			; (mov r8, r8)
 8006864:	20000020 	.word	0x20000020

08006868 <free>:
 8006868:	b510      	push	{r4, lr}
 800686a:	4b03      	ldr	r3, [pc, #12]	; (8006878 <free+0x10>)
 800686c:	0001      	movs	r1, r0
 800686e:	6818      	ldr	r0, [r3, #0]
 8006870:	f000 f824 	bl	80068bc <_free_r>
 8006874:	bd10      	pop	{r4, pc}
 8006876:	46c0      	nop			; (mov r8, r8)
 8006878:	20000020 	.word	0x20000020

0800687c <memcmp>:
 800687c:	b530      	push	{r4, r5, lr}
 800687e:	2400      	movs	r4, #0
 8006880:	3901      	subs	r1, #1
 8006882:	42a2      	cmp	r2, r4
 8006884:	d101      	bne.n	800688a <memcmp+0xe>
 8006886:	2000      	movs	r0, #0
 8006888:	e005      	b.n	8006896 <memcmp+0x1a>
 800688a:	5d03      	ldrb	r3, [r0, r4]
 800688c:	3401      	adds	r4, #1
 800688e:	5d0d      	ldrb	r5, [r1, r4]
 8006890:	42ab      	cmp	r3, r5
 8006892:	d0f6      	beq.n	8006882 <memcmp+0x6>
 8006894:	1b58      	subs	r0, r3, r5
 8006896:	bd30      	pop	{r4, r5, pc}

08006898 <memcpy>:
 8006898:	2300      	movs	r3, #0
 800689a:	b510      	push	{r4, lr}
 800689c:	429a      	cmp	r2, r3
 800689e:	d100      	bne.n	80068a2 <memcpy+0xa>
 80068a0:	bd10      	pop	{r4, pc}
 80068a2:	5ccc      	ldrb	r4, [r1, r3]
 80068a4:	54c4      	strb	r4, [r0, r3]
 80068a6:	3301      	adds	r3, #1
 80068a8:	e7f8      	b.n	800689c <memcpy+0x4>

080068aa <memset>:
 80068aa:	0003      	movs	r3, r0
 80068ac:	1882      	adds	r2, r0, r2
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d100      	bne.n	80068b4 <memset+0xa>
 80068b2:	4770      	bx	lr
 80068b4:	7019      	strb	r1, [r3, #0]
 80068b6:	3301      	adds	r3, #1
 80068b8:	e7f9      	b.n	80068ae <memset+0x4>
	...

080068bc <_free_r>:
 80068bc:	b570      	push	{r4, r5, r6, lr}
 80068be:	0005      	movs	r5, r0
 80068c0:	2900      	cmp	r1, #0
 80068c2:	d010      	beq.n	80068e6 <_free_r+0x2a>
 80068c4:	1f0c      	subs	r4, r1, #4
 80068c6:	6823      	ldr	r3, [r4, #0]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	da00      	bge.n	80068ce <_free_r+0x12>
 80068cc:	18e4      	adds	r4, r4, r3
 80068ce:	0028      	movs	r0, r5
 80068d0:	f003 fc1a 	bl	800a108 <__malloc_lock>
 80068d4:	4a1d      	ldr	r2, [pc, #116]	; (800694c <_free_r+0x90>)
 80068d6:	6813      	ldr	r3, [r2, #0]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d105      	bne.n	80068e8 <_free_r+0x2c>
 80068dc:	6063      	str	r3, [r4, #4]
 80068de:	6014      	str	r4, [r2, #0]
 80068e0:	0028      	movs	r0, r5
 80068e2:	f003 fc19 	bl	800a118 <__malloc_unlock>
 80068e6:	bd70      	pop	{r4, r5, r6, pc}
 80068e8:	42a3      	cmp	r3, r4
 80068ea:	d908      	bls.n	80068fe <_free_r+0x42>
 80068ec:	6821      	ldr	r1, [r4, #0]
 80068ee:	1860      	adds	r0, r4, r1
 80068f0:	4283      	cmp	r3, r0
 80068f2:	d1f3      	bne.n	80068dc <_free_r+0x20>
 80068f4:	6818      	ldr	r0, [r3, #0]
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	1841      	adds	r1, r0, r1
 80068fa:	6021      	str	r1, [r4, #0]
 80068fc:	e7ee      	b.n	80068dc <_free_r+0x20>
 80068fe:	001a      	movs	r2, r3
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d001      	beq.n	800690a <_free_r+0x4e>
 8006906:	42a3      	cmp	r3, r4
 8006908:	d9f9      	bls.n	80068fe <_free_r+0x42>
 800690a:	6811      	ldr	r1, [r2, #0]
 800690c:	1850      	adds	r0, r2, r1
 800690e:	42a0      	cmp	r0, r4
 8006910:	d10b      	bne.n	800692a <_free_r+0x6e>
 8006912:	6820      	ldr	r0, [r4, #0]
 8006914:	1809      	adds	r1, r1, r0
 8006916:	1850      	adds	r0, r2, r1
 8006918:	6011      	str	r1, [r2, #0]
 800691a:	4283      	cmp	r3, r0
 800691c:	d1e0      	bne.n	80068e0 <_free_r+0x24>
 800691e:	6818      	ldr	r0, [r3, #0]
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	1841      	adds	r1, r0, r1
 8006924:	6011      	str	r1, [r2, #0]
 8006926:	6053      	str	r3, [r2, #4]
 8006928:	e7da      	b.n	80068e0 <_free_r+0x24>
 800692a:	42a0      	cmp	r0, r4
 800692c:	d902      	bls.n	8006934 <_free_r+0x78>
 800692e:	230c      	movs	r3, #12
 8006930:	602b      	str	r3, [r5, #0]
 8006932:	e7d5      	b.n	80068e0 <_free_r+0x24>
 8006934:	6821      	ldr	r1, [r4, #0]
 8006936:	1860      	adds	r0, r4, r1
 8006938:	4283      	cmp	r3, r0
 800693a:	d103      	bne.n	8006944 <_free_r+0x88>
 800693c:	6818      	ldr	r0, [r3, #0]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	1841      	adds	r1, r0, r1
 8006942:	6021      	str	r1, [r4, #0]
 8006944:	6063      	str	r3, [r4, #4]
 8006946:	6054      	str	r4, [r2, #4]
 8006948:	e7ca      	b.n	80068e0 <_free_r+0x24>
 800694a:	46c0      	nop			; (mov r8, r8)
 800694c:	200002b8 	.word	0x200002b8

08006950 <_malloc_r>:
 8006950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006952:	2303      	movs	r3, #3
 8006954:	1ccd      	adds	r5, r1, #3
 8006956:	439d      	bics	r5, r3
 8006958:	3508      	adds	r5, #8
 800695a:	0006      	movs	r6, r0
 800695c:	2d0c      	cmp	r5, #12
 800695e:	d21f      	bcs.n	80069a0 <_malloc_r+0x50>
 8006960:	250c      	movs	r5, #12
 8006962:	42a9      	cmp	r1, r5
 8006964:	d81e      	bhi.n	80069a4 <_malloc_r+0x54>
 8006966:	0030      	movs	r0, r6
 8006968:	f003 fbce 	bl	800a108 <__malloc_lock>
 800696c:	4925      	ldr	r1, [pc, #148]	; (8006a04 <_malloc_r+0xb4>)
 800696e:	680a      	ldr	r2, [r1, #0]
 8006970:	0014      	movs	r4, r2
 8006972:	2c00      	cmp	r4, #0
 8006974:	d11a      	bne.n	80069ac <_malloc_r+0x5c>
 8006976:	4f24      	ldr	r7, [pc, #144]	; (8006a08 <_malloc_r+0xb8>)
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d104      	bne.n	8006988 <_malloc_r+0x38>
 800697e:	0021      	movs	r1, r4
 8006980:	0030      	movs	r0, r6
 8006982:	f000 ff6f 	bl	8007864 <_sbrk_r>
 8006986:	6038      	str	r0, [r7, #0]
 8006988:	0029      	movs	r1, r5
 800698a:	0030      	movs	r0, r6
 800698c:	f000 ff6a 	bl	8007864 <_sbrk_r>
 8006990:	1c43      	adds	r3, r0, #1
 8006992:	d12b      	bne.n	80069ec <_malloc_r+0x9c>
 8006994:	230c      	movs	r3, #12
 8006996:	0030      	movs	r0, r6
 8006998:	6033      	str	r3, [r6, #0]
 800699a:	f003 fbbd 	bl	800a118 <__malloc_unlock>
 800699e:	e003      	b.n	80069a8 <_malloc_r+0x58>
 80069a0:	2d00      	cmp	r5, #0
 80069a2:	dade      	bge.n	8006962 <_malloc_r+0x12>
 80069a4:	230c      	movs	r3, #12
 80069a6:	6033      	str	r3, [r6, #0]
 80069a8:	2000      	movs	r0, #0
 80069aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069ac:	6823      	ldr	r3, [r4, #0]
 80069ae:	1b5b      	subs	r3, r3, r5
 80069b0:	d419      	bmi.n	80069e6 <_malloc_r+0x96>
 80069b2:	2b0b      	cmp	r3, #11
 80069b4:	d903      	bls.n	80069be <_malloc_r+0x6e>
 80069b6:	6023      	str	r3, [r4, #0]
 80069b8:	18e4      	adds	r4, r4, r3
 80069ba:	6025      	str	r5, [r4, #0]
 80069bc:	e003      	b.n	80069c6 <_malloc_r+0x76>
 80069be:	6863      	ldr	r3, [r4, #4]
 80069c0:	42a2      	cmp	r2, r4
 80069c2:	d10e      	bne.n	80069e2 <_malloc_r+0x92>
 80069c4:	600b      	str	r3, [r1, #0]
 80069c6:	0030      	movs	r0, r6
 80069c8:	f003 fba6 	bl	800a118 <__malloc_unlock>
 80069cc:	0020      	movs	r0, r4
 80069ce:	2207      	movs	r2, #7
 80069d0:	300b      	adds	r0, #11
 80069d2:	1d23      	adds	r3, r4, #4
 80069d4:	4390      	bics	r0, r2
 80069d6:	1ac2      	subs	r2, r0, r3
 80069d8:	4298      	cmp	r0, r3
 80069da:	d0e6      	beq.n	80069aa <_malloc_r+0x5a>
 80069dc:	1a1b      	subs	r3, r3, r0
 80069de:	50a3      	str	r3, [r4, r2]
 80069e0:	e7e3      	b.n	80069aa <_malloc_r+0x5a>
 80069e2:	6053      	str	r3, [r2, #4]
 80069e4:	e7ef      	b.n	80069c6 <_malloc_r+0x76>
 80069e6:	0022      	movs	r2, r4
 80069e8:	6864      	ldr	r4, [r4, #4]
 80069ea:	e7c2      	b.n	8006972 <_malloc_r+0x22>
 80069ec:	2303      	movs	r3, #3
 80069ee:	1cc4      	adds	r4, r0, #3
 80069f0:	439c      	bics	r4, r3
 80069f2:	42a0      	cmp	r0, r4
 80069f4:	d0e1      	beq.n	80069ba <_malloc_r+0x6a>
 80069f6:	1a21      	subs	r1, r4, r0
 80069f8:	0030      	movs	r0, r6
 80069fa:	f000 ff33 	bl	8007864 <_sbrk_r>
 80069fe:	1c43      	adds	r3, r0, #1
 8006a00:	d1db      	bne.n	80069ba <_malloc_r+0x6a>
 8006a02:	e7c7      	b.n	8006994 <_malloc_r+0x44>
 8006a04:	200002b8 	.word	0x200002b8
 8006a08:	200002bc 	.word	0x200002bc

08006a0c <__cvt>:
 8006a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a0e:	001e      	movs	r6, r3
 8006a10:	2300      	movs	r3, #0
 8006a12:	0014      	movs	r4, r2
 8006a14:	b08b      	sub	sp, #44	; 0x2c
 8006a16:	429e      	cmp	r6, r3
 8006a18:	da04      	bge.n	8006a24 <__cvt+0x18>
 8006a1a:	2180      	movs	r1, #128	; 0x80
 8006a1c:	0609      	lsls	r1, r1, #24
 8006a1e:	1873      	adds	r3, r6, r1
 8006a20:	001e      	movs	r6, r3
 8006a22:	232d      	movs	r3, #45	; 0x2d
 8006a24:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006a26:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006a28:	7013      	strb	r3, [r2, #0]
 8006a2a:	2320      	movs	r3, #32
 8006a2c:	2203      	movs	r2, #3
 8006a2e:	439f      	bics	r7, r3
 8006a30:	2f46      	cmp	r7, #70	; 0x46
 8006a32:	d007      	beq.n	8006a44 <__cvt+0x38>
 8006a34:	003b      	movs	r3, r7
 8006a36:	3b45      	subs	r3, #69	; 0x45
 8006a38:	4259      	negs	r1, r3
 8006a3a:	414b      	adcs	r3, r1
 8006a3c:	9910      	ldr	r1, [sp, #64]	; 0x40
 8006a3e:	3a01      	subs	r2, #1
 8006a40:	18cb      	adds	r3, r1, r3
 8006a42:	9310      	str	r3, [sp, #64]	; 0x40
 8006a44:	ab09      	add	r3, sp, #36	; 0x24
 8006a46:	9304      	str	r3, [sp, #16]
 8006a48:	ab08      	add	r3, sp, #32
 8006a4a:	9303      	str	r3, [sp, #12]
 8006a4c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006a4e:	9200      	str	r2, [sp, #0]
 8006a50:	9302      	str	r3, [sp, #8]
 8006a52:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006a54:	0022      	movs	r2, r4
 8006a56:	9301      	str	r3, [sp, #4]
 8006a58:	0033      	movs	r3, r6
 8006a5a:	f001 ff65 	bl	8008928 <_dtoa_r>
 8006a5e:	0005      	movs	r5, r0
 8006a60:	2f47      	cmp	r7, #71	; 0x47
 8006a62:	d102      	bne.n	8006a6a <__cvt+0x5e>
 8006a64:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006a66:	07db      	lsls	r3, r3, #31
 8006a68:	d528      	bpl.n	8006abc <__cvt+0xb0>
 8006a6a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006a6c:	18eb      	adds	r3, r5, r3
 8006a6e:	9307      	str	r3, [sp, #28]
 8006a70:	2f46      	cmp	r7, #70	; 0x46
 8006a72:	d114      	bne.n	8006a9e <__cvt+0x92>
 8006a74:	782b      	ldrb	r3, [r5, #0]
 8006a76:	2b30      	cmp	r3, #48	; 0x30
 8006a78:	d10c      	bne.n	8006a94 <__cvt+0x88>
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	0020      	movs	r0, r4
 8006a80:	0031      	movs	r1, r6
 8006a82:	f7f9 fce1 	bl	8000448 <__aeabi_dcmpeq>
 8006a86:	2800      	cmp	r0, #0
 8006a88:	d104      	bne.n	8006a94 <__cvt+0x88>
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006a8e:	1a9b      	subs	r3, r3, r2
 8006a90:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006a92:	6013      	str	r3, [r2, #0]
 8006a94:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006a96:	9a07      	ldr	r2, [sp, #28]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	18d3      	adds	r3, r2, r3
 8006a9c:	9307      	str	r3, [sp, #28]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	0020      	movs	r0, r4
 8006aa4:	0031      	movs	r1, r6
 8006aa6:	f7f9 fccf 	bl	8000448 <__aeabi_dcmpeq>
 8006aaa:	2800      	cmp	r0, #0
 8006aac:	d001      	beq.n	8006ab2 <__cvt+0xa6>
 8006aae:	9b07      	ldr	r3, [sp, #28]
 8006ab0:	9309      	str	r3, [sp, #36]	; 0x24
 8006ab2:	2230      	movs	r2, #48	; 0x30
 8006ab4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ab6:	9907      	ldr	r1, [sp, #28]
 8006ab8:	428b      	cmp	r3, r1
 8006aba:	d306      	bcc.n	8006aca <__cvt+0xbe>
 8006abc:	0028      	movs	r0, r5
 8006abe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ac0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006ac2:	1b5b      	subs	r3, r3, r5
 8006ac4:	6013      	str	r3, [r2, #0]
 8006ac6:	b00b      	add	sp, #44	; 0x2c
 8006ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006aca:	1c59      	adds	r1, r3, #1
 8006acc:	9109      	str	r1, [sp, #36]	; 0x24
 8006ace:	701a      	strb	r2, [r3, #0]
 8006ad0:	e7f0      	b.n	8006ab4 <__cvt+0xa8>

08006ad2 <__exponent>:
 8006ad2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ad4:	1c83      	adds	r3, r0, #2
 8006ad6:	b087      	sub	sp, #28
 8006ad8:	9303      	str	r3, [sp, #12]
 8006ada:	0005      	movs	r5, r0
 8006adc:	000c      	movs	r4, r1
 8006ade:	232b      	movs	r3, #43	; 0x2b
 8006ae0:	7002      	strb	r2, [r0, #0]
 8006ae2:	2900      	cmp	r1, #0
 8006ae4:	da01      	bge.n	8006aea <__exponent+0x18>
 8006ae6:	424c      	negs	r4, r1
 8006ae8:	3302      	adds	r3, #2
 8006aea:	706b      	strb	r3, [r5, #1]
 8006aec:	2c09      	cmp	r4, #9
 8006aee:	dd31      	ble.n	8006b54 <__exponent+0x82>
 8006af0:	270a      	movs	r7, #10
 8006af2:	ab04      	add	r3, sp, #16
 8006af4:	1dde      	adds	r6, r3, #7
 8006af6:	0020      	movs	r0, r4
 8006af8:	0039      	movs	r1, r7
 8006afa:	9601      	str	r6, [sp, #4]
 8006afc:	f7f9 fc8e 	bl	800041c <__aeabi_idivmod>
 8006b00:	3e01      	subs	r6, #1
 8006b02:	3130      	adds	r1, #48	; 0x30
 8006b04:	0020      	movs	r0, r4
 8006b06:	7031      	strb	r1, [r6, #0]
 8006b08:	0039      	movs	r1, r7
 8006b0a:	9402      	str	r4, [sp, #8]
 8006b0c:	f7f9 fba0 	bl	8000250 <__divsi3>
 8006b10:	9b02      	ldr	r3, [sp, #8]
 8006b12:	0004      	movs	r4, r0
 8006b14:	2b63      	cmp	r3, #99	; 0x63
 8006b16:	dcee      	bgt.n	8006af6 <__exponent+0x24>
 8006b18:	9b01      	ldr	r3, [sp, #4]
 8006b1a:	3430      	adds	r4, #48	; 0x30
 8006b1c:	1e9a      	subs	r2, r3, #2
 8006b1e:	0013      	movs	r3, r2
 8006b20:	9903      	ldr	r1, [sp, #12]
 8006b22:	7014      	strb	r4, [r2, #0]
 8006b24:	a804      	add	r0, sp, #16
 8006b26:	3007      	adds	r0, #7
 8006b28:	4298      	cmp	r0, r3
 8006b2a:	d80e      	bhi.n	8006b4a <__exponent+0x78>
 8006b2c:	ab04      	add	r3, sp, #16
 8006b2e:	3307      	adds	r3, #7
 8006b30:	2000      	movs	r0, #0
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d804      	bhi.n	8006b40 <__exponent+0x6e>
 8006b36:	ab04      	add	r3, sp, #16
 8006b38:	3009      	adds	r0, #9
 8006b3a:	18c0      	adds	r0, r0, r3
 8006b3c:	9b01      	ldr	r3, [sp, #4]
 8006b3e:	1ac0      	subs	r0, r0, r3
 8006b40:	9b03      	ldr	r3, [sp, #12]
 8006b42:	1818      	adds	r0, r3, r0
 8006b44:	1b40      	subs	r0, r0, r5
 8006b46:	b007      	add	sp, #28
 8006b48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b4a:	7818      	ldrb	r0, [r3, #0]
 8006b4c:	3301      	adds	r3, #1
 8006b4e:	7008      	strb	r0, [r1, #0]
 8006b50:	3101      	adds	r1, #1
 8006b52:	e7e7      	b.n	8006b24 <__exponent+0x52>
 8006b54:	2330      	movs	r3, #48	; 0x30
 8006b56:	18e4      	adds	r4, r4, r3
 8006b58:	70ab      	strb	r3, [r5, #2]
 8006b5a:	1d28      	adds	r0, r5, #4
 8006b5c:	70ec      	strb	r4, [r5, #3]
 8006b5e:	e7f1      	b.n	8006b44 <__exponent+0x72>

08006b60 <_printf_float>:
 8006b60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b62:	b095      	sub	sp, #84	; 0x54
 8006b64:	000c      	movs	r4, r1
 8006b66:	9208      	str	r2, [sp, #32]
 8006b68:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8006b6a:	9309      	str	r3, [sp, #36]	; 0x24
 8006b6c:	0007      	movs	r7, r0
 8006b6e:	f003 fa39 	bl	8009fe4 <_localeconv_r>
 8006b72:	6803      	ldr	r3, [r0, #0]
 8006b74:	0018      	movs	r0, r3
 8006b76:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b78:	f7f9 fac4 	bl	8000104 <strlen>
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	9312      	str	r3, [sp, #72]	; 0x48
 8006b80:	7e23      	ldrb	r3, [r4, #24]
 8006b82:	2207      	movs	r2, #7
 8006b84:	001e      	movs	r6, r3
 8006b86:	6823      	ldr	r3, [r4, #0]
 8006b88:	900d      	str	r0, [sp, #52]	; 0x34
 8006b8a:	930c      	str	r3, [sp, #48]	; 0x30
 8006b8c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006b8e:	682b      	ldr	r3, [r5, #0]
 8006b90:	05c9      	lsls	r1, r1, #23
 8006b92:	d547      	bpl.n	8006c24 <_printf_float+0xc4>
 8006b94:	189b      	adds	r3, r3, r2
 8006b96:	4393      	bics	r3, r2
 8006b98:	001a      	movs	r2, r3
 8006b9a:	3208      	adds	r2, #8
 8006b9c:	602a      	str	r2, [r5, #0]
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	64a2      	str	r2, [r4, #72]	; 0x48
 8006ba4:	64e3      	str	r3, [r4, #76]	; 0x4c
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006baa:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8006bac:	930a      	str	r3, [sp, #40]	; 0x28
 8006bae:	006b      	lsls	r3, r5, #1
 8006bb0:	085b      	lsrs	r3, r3, #1
 8006bb2:	930e      	str	r3, [sp, #56]	; 0x38
 8006bb4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006bb6:	4ba8      	ldr	r3, [pc, #672]	; (8006e58 <_printf_float+0x2f8>)
 8006bb8:	990e      	ldr	r1, [sp, #56]	; 0x38
 8006bba:	4252      	negs	r2, r2
 8006bbc:	f7fc f98c 	bl	8002ed8 <__aeabi_dcmpun>
 8006bc0:	2800      	cmp	r0, #0
 8006bc2:	d131      	bne.n	8006c28 <_printf_float+0xc8>
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	4ba4      	ldr	r3, [pc, #656]	; (8006e58 <_printf_float+0x2f8>)
 8006bc8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006bca:	990e      	ldr	r1, [sp, #56]	; 0x38
 8006bcc:	4252      	negs	r2, r2
 8006bce:	f7f9 fc4b 	bl	8000468 <__aeabi_dcmple>
 8006bd2:	2800      	cmp	r0, #0
 8006bd4:	d128      	bne.n	8006c28 <_printf_float+0xc8>
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	2300      	movs	r3, #0
 8006bda:	0029      	movs	r1, r5
 8006bdc:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006bde:	f7f9 fc39 	bl	8000454 <__aeabi_dcmplt>
 8006be2:	2800      	cmp	r0, #0
 8006be4:	d003      	beq.n	8006bee <_printf_float+0x8e>
 8006be6:	0023      	movs	r3, r4
 8006be8:	222d      	movs	r2, #45	; 0x2d
 8006bea:	3343      	adds	r3, #67	; 0x43
 8006bec:	701a      	strb	r2, [r3, #0]
 8006bee:	4d9b      	ldr	r5, [pc, #620]	; (8006e5c <_printf_float+0x2fc>)
 8006bf0:	2e47      	cmp	r6, #71	; 0x47
 8006bf2:	d900      	bls.n	8006bf6 <_printf_float+0x96>
 8006bf4:	4d9a      	ldr	r5, [pc, #616]	; (8006e60 <_printf_float+0x300>)
 8006bf6:	2303      	movs	r3, #3
 8006bf8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006bfa:	6123      	str	r3, [r4, #16]
 8006bfc:	3301      	adds	r3, #1
 8006bfe:	439a      	bics	r2, r3
 8006c00:	2300      	movs	r3, #0
 8006c02:	6022      	str	r2, [r4, #0]
 8006c04:	930a      	str	r3, [sp, #40]	; 0x28
 8006c06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c08:	0021      	movs	r1, r4
 8006c0a:	9300      	str	r3, [sp, #0]
 8006c0c:	0038      	movs	r0, r7
 8006c0e:	9b08      	ldr	r3, [sp, #32]
 8006c10:	aa13      	add	r2, sp, #76	; 0x4c
 8006c12:	f000 f9f3 	bl	8006ffc <_printf_common>
 8006c16:	1c43      	adds	r3, r0, #1
 8006c18:	d000      	beq.n	8006c1c <_printf_float+0xbc>
 8006c1a:	e09e      	b.n	8006d5a <_printf_float+0x1fa>
 8006c1c:	2001      	movs	r0, #1
 8006c1e:	4240      	negs	r0, r0
 8006c20:	b015      	add	sp, #84	; 0x54
 8006c22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c24:	3307      	adds	r3, #7
 8006c26:	e7b6      	b.n	8006b96 <_printf_float+0x36>
 8006c28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c2a:	002b      	movs	r3, r5
 8006c2c:	0010      	movs	r0, r2
 8006c2e:	0029      	movs	r1, r5
 8006c30:	f7fc f952 	bl	8002ed8 <__aeabi_dcmpun>
 8006c34:	2800      	cmp	r0, #0
 8006c36:	d00a      	beq.n	8006c4e <_printf_float+0xee>
 8006c38:	2d00      	cmp	r5, #0
 8006c3a:	da03      	bge.n	8006c44 <_printf_float+0xe4>
 8006c3c:	0023      	movs	r3, r4
 8006c3e:	222d      	movs	r2, #45	; 0x2d
 8006c40:	3343      	adds	r3, #67	; 0x43
 8006c42:	701a      	strb	r2, [r3, #0]
 8006c44:	4d87      	ldr	r5, [pc, #540]	; (8006e64 <_printf_float+0x304>)
 8006c46:	2e47      	cmp	r6, #71	; 0x47
 8006c48:	d9d5      	bls.n	8006bf6 <_printf_float+0x96>
 8006c4a:	4d87      	ldr	r5, [pc, #540]	; (8006e68 <_printf_float+0x308>)
 8006c4c:	e7d3      	b.n	8006bf6 <_printf_float+0x96>
 8006c4e:	2220      	movs	r2, #32
 8006c50:	0031      	movs	r1, r6
 8006c52:	6863      	ldr	r3, [r4, #4]
 8006c54:	4391      	bics	r1, r2
 8006c56:	910e      	str	r1, [sp, #56]	; 0x38
 8006c58:	1c5a      	adds	r2, r3, #1
 8006c5a:	d147      	bne.n	8006cec <_printf_float+0x18c>
 8006c5c:	3307      	adds	r3, #7
 8006c5e:	6063      	str	r3, [r4, #4]
 8006c60:	2380      	movs	r3, #128	; 0x80
 8006c62:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006c64:	00db      	lsls	r3, r3, #3
 8006c66:	4313      	orrs	r3, r2
 8006c68:	2200      	movs	r2, #0
 8006c6a:	9206      	str	r2, [sp, #24]
 8006c6c:	aa12      	add	r2, sp, #72	; 0x48
 8006c6e:	9205      	str	r2, [sp, #20]
 8006c70:	aa11      	add	r2, sp, #68	; 0x44
 8006c72:	9203      	str	r2, [sp, #12]
 8006c74:	2223      	movs	r2, #35	; 0x23
 8006c76:	a908      	add	r1, sp, #32
 8006c78:	6023      	str	r3, [r4, #0]
 8006c7a:	9301      	str	r3, [sp, #4]
 8006c7c:	6863      	ldr	r3, [r4, #4]
 8006c7e:	1852      	adds	r2, r2, r1
 8006c80:	9202      	str	r2, [sp, #8]
 8006c82:	9300      	str	r3, [sp, #0]
 8006c84:	0038      	movs	r0, r7
 8006c86:	002b      	movs	r3, r5
 8006c88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c8a:	9604      	str	r6, [sp, #16]
 8006c8c:	f7ff febe 	bl	8006a0c <__cvt>
 8006c90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c92:	0005      	movs	r5, r0
 8006c94:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006c96:	2b47      	cmp	r3, #71	; 0x47
 8006c98:	d108      	bne.n	8006cac <_printf_float+0x14c>
 8006c9a:	1ccb      	adds	r3, r1, #3
 8006c9c:	db02      	blt.n	8006ca4 <_printf_float+0x144>
 8006c9e:	6863      	ldr	r3, [r4, #4]
 8006ca0:	4299      	cmp	r1, r3
 8006ca2:	dd46      	ble.n	8006d32 <_printf_float+0x1d2>
 8006ca4:	0033      	movs	r3, r6
 8006ca6:	3b02      	subs	r3, #2
 8006ca8:	b2db      	uxtb	r3, r3
 8006caa:	001e      	movs	r6, r3
 8006cac:	2e65      	cmp	r6, #101	; 0x65
 8006cae:	d824      	bhi.n	8006cfa <_printf_float+0x19a>
 8006cb0:	0020      	movs	r0, r4
 8006cb2:	0032      	movs	r2, r6
 8006cb4:	3901      	subs	r1, #1
 8006cb6:	3050      	adds	r0, #80	; 0x50
 8006cb8:	9111      	str	r1, [sp, #68]	; 0x44
 8006cba:	f7ff ff0a 	bl	8006ad2 <__exponent>
 8006cbe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006cc0:	900a      	str	r0, [sp, #40]	; 0x28
 8006cc2:	1813      	adds	r3, r2, r0
 8006cc4:	6123      	str	r3, [r4, #16]
 8006cc6:	2a01      	cmp	r2, #1
 8006cc8:	dc02      	bgt.n	8006cd0 <_printf_float+0x170>
 8006cca:	6822      	ldr	r2, [r4, #0]
 8006ccc:	07d2      	lsls	r2, r2, #31
 8006cce:	d501      	bpl.n	8006cd4 <_printf_float+0x174>
 8006cd0:	3301      	adds	r3, #1
 8006cd2:	6123      	str	r3, [r4, #16]
 8006cd4:	2323      	movs	r3, #35	; 0x23
 8006cd6:	aa08      	add	r2, sp, #32
 8006cd8:	189b      	adds	r3, r3, r2
 8006cda:	781b      	ldrb	r3, [r3, #0]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d100      	bne.n	8006ce2 <_printf_float+0x182>
 8006ce0:	e791      	b.n	8006c06 <_printf_float+0xa6>
 8006ce2:	0023      	movs	r3, r4
 8006ce4:	222d      	movs	r2, #45	; 0x2d
 8006ce6:	3343      	adds	r3, #67	; 0x43
 8006ce8:	701a      	strb	r2, [r3, #0]
 8006cea:	e78c      	b.n	8006c06 <_printf_float+0xa6>
 8006cec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006cee:	2a47      	cmp	r2, #71	; 0x47
 8006cf0:	d1b6      	bne.n	8006c60 <_printf_float+0x100>
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d1b4      	bne.n	8006c60 <_printf_float+0x100>
 8006cf6:	3301      	adds	r3, #1
 8006cf8:	e7b1      	b.n	8006c5e <_printf_float+0xfe>
 8006cfa:	2e66      	cmp	r6, #102	; 0x66
 8006cfc:	d11b      	bne.n	8006d36 <_printf_float+0x1d6>
 8006cfe:	6863      	ldr	r3, [r4, #4]
 8006d00:	2900      	cmp	r1, #0
 8006d02:	dd0d      	ble.n	8006d20 <_printf_float+0x1c0>
 8006d04:	6121      	str	r1, [r4, #16]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d102      	bne.n	8006d10 <_printf_float+0x1b0>
 8006d0a:	6822      	ldr	r2, [r4, #0]
 8006d0c:	07d2      	lsls	r2, r2, #31
 8006d0e:	d502      	bpl.n	8006d16 <_printf_float+0x1b6>
 8006d10:	3301      	adds	r3, #1
 8006d12:	1859      	adds	r1, r3, r1
 8006d14:	6121      	str	r1, [r4, #16]
 8006d16:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006d18:	65a3      	str	r3, [r4, #88]	; 0x58
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	930a      	str	r3, [sp, #40]	; 0x28
 8006d1e:	e7d9      	b.n	8006cd4 <_printf_float+0x174>
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d103      	bne.n	8006d2c <_printf_float+0x1cc>
 8006d24:	2201      	movs	r2, #1
 8006d26:	6821      	ldr	r1, [r4, #0]
 8006d28:	4211      	tst	r1, r2
 8006d2a:	d000      	beq.n	8006d2e <_printf_float+0x1ce>
 8006d2c:	1c9a      	adds	r2, r3, #2
 8006d2e:	6122      	str	r2, [r4, #16]
 8006d30:	e7f1      	b.n	8006d16 <_printf_float+0x1b6>
 8006d32:	2367      	movs	r3, #103	; 0x67
 8006d34:	001e      	movs	r6, r3
 8006d36:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006d38:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	db06      	blt.n	8006d4c <_printf_float+0x1ec>
 8006d3e:	6822      	ldr	r2, [r4, #0]
 8006d40:	6123      	str	r3, [r4, #16]
 8006d42:	07d2      	lsls	r2, r2, #31
 8006d44:	d5e7      	bpl.n	8006d16 <_printf_float+0x1b6>
 8006d46:	3301      	adds	r3, #1
 8006d48:	6123      	str	r3, [r4, #16]
 8006d4a:	e7e4      	b.n	8006d16 <_printf_float+0x1b6>
 8006d4c:	2101      	movs	r1, #1
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	dc01      	bgt.n	8006d56 <_printf_float+0x1f6>
 8006d52:	1849      	adds	r1, r1, r1
 8006d54:	1ac9      	subs	r1, r1, r3
 8006d56:	1852      	adds	r2, r2, r1
 8006d58:	e7e9      	b.n	8006d2e <_printf_float+0x1ce>
 8006d5a:	6822      	ldr	r2, [r4, #0]
 8006d5c:	0553      	lsls	r3, r2, #21
 8006d5e:	d408      	bmi.n	8006d72 <_printf_float+0x212>
 8006d60:	6923      	ldr	r3, [r4, #16]
 8006d62:	002a      	movs	r2, r5
 8006d64:	0038      	movs	r0, r7
 8006d66:	9908      	ldr	r1, [sp, #32]
 8006d68:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006d6a:	47a8      	blx	r5
 8006d6c:	1c43      	adds	r3, r0, #1
 8006d6e:	d129      	bne.n	8006dc4 <_printf_float+0x264>
 8006d70:	e754      	b.n	8006c1c <_printf_float+0xbc>
 8006d72:	2e65      	cmp	r6, #101	; 0x65
 8006d74:	d800      	bhi.n	8006d78 <_printf_float+0x218>
 8006d76:	e0ec      	b.n	8006f52 <_printf_float+0x3f2>
 8006d78:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006d7a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	2300      	movs	r3, #0
 8006d80:	f7f9 fb62 	bl	8000448 <__aeabi_dcmpeq>
 8006d84:	2800      	cmp	r0, #0
 8006d86:	d034      	beq.n	8006df2 <_printf_float+0x292>
 8006d88:	2301      	movs	r3, #1
 8006d8a:	0038      	movs	r0, r7
 8006d8c:	4a37      	ldr	r2, [pc, #220]	; (8006e6c <_printf_float+0x30c>)
 8006d8e:	9908      	ldr	r1, [sp, #32]
 8006d90:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006d92:	47a8      	blx	r5
 8006d94:	1c43      	adds	r3, r0, #1
 8006d96:	d100      	bne.n	8006d9a <_printf_float+0x23a>
 8006d98:	e740      	b.n	8006c1c <_printf_float+0xbc>
 8006d9a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006d9c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	db02      	blt.n	8006da8 <_printf_float+0x248>
 8006da2:	6823      	ldr	r3, [r4, #0]
 8006da4:	07db      	lsls	r3, r3, #31
 8006da6:	d50d      	bpl.n	8006dc4 <_printf_float+0x264>
 8006da8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006daa:	0038      	movs	r0, r7
 8006dac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006dae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006db0:	9908      	ldr	r1, [sp, #32]
 8006db2:	47a8      	blx	r5
 8006db4:	2500      	movs	r5, #0
 8006db6:	1c43      	adds	r3, r0, #1
 8006db8:	d100      	bne.n	8006dbc <_printf_float+0x25c>
 8006dba:	e72f      	b.n	8006c1c <_printf_float+0xbc>
 8006dbc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006dbe:	3b01      	subs	r3, #1
 8006dc0:	42ab      	cmp	r3, r5
 8006dc2:	dc0a      	bgt.n	8006dda <_printf_float+0x27a>
 8006dc4:	6823      	ldr	r3, [r4, #0]
 8006dc6:	079b      	lsls	r3, r3, #30
 8006dc8:	d500      	bpl.n	8006dcc <_printf_float+0x26c>
 8006dca:	e114      	b.n	8006ff6 <_printf_float+0x496>
 8006dcc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006dce:	68e0      	ldr	r0, [r4, #12]
 8006dd0:	4298      	cmp	r0, r3
 8006dd2:	db00      	blt.n	8006dd6 <_printf_float+0x276>
 8006dd4:	e724      	b.n	8006c20 <_printf_float+0xc0>
 8006dd6:	0018      	movs	r0, r3
 8006dd8:	e722      	b.n	8006c20 <_printf_float+0xc0>
 8006dda:	0022      	movs	r2, r4
 8006ddc:	2301      	movs	r3, #1
 8006dde:	0038      	movs	r0, r7
 8006de0:	9908      	ldr	r1, [sp, #32]
 8006de2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006de4:	321a      	adds	r2, #26
 8006de6:	47b0      	blx	r6
 8006de8:	1c43      	adds	r3, r0, #1
 8006dea:	d100      	bne.n	8006dee <_printf_float+0x28e>
 8006dec:	e716      	b.n	8006c1c <_printf_float+0xbc>
 8006dee:	3501      	adds	r5, #1
 8006df0:	e7e4      	b.n	8006dbc <_printf_float+0x25c>
 8006df2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	dc3b      	bgt.n	8006e70 <_printf_float+0x310>
 8006df8:	2301      	movs	r3, #1
 8006dfa:	0038      	movs	r0, r7
 8006dfc:	4a1b      	ldr	r2, [pc, #108]	; (8006e6c <_printf_float+0x30c>)
 8006dfe:	9908      	ldr	r1, [sp, #32]
 8006e00:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006e02:	47b0      	blx	r6
 8006e04:	1c43      	adds	r3, r0, #1
 8006e06:	d100      	bne.n	8006e0a <_printf_float+0x2aa>
 8006e08:	e708      	b.n	8006c1c <_printf_float+0xbc>
 8006e0a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006e0c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	d102      	bne.n	8006e18 <_printf_float+0x2b8>
 8006e12:	6823      	ldr	r3, [r4, #0]
 8006e14:	07db      	lsls	r3, r3, #31
 8006e16:	d5d5      	bpl.n	8006dc4 <_printf_float+0x264>
 8006e18:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e1a:	0038      	movs	r0, r7
 8006e1c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006e1e:	9908      	ldr	r1, [sp, #32]
 8006e20:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006e22:	47b0      	blx	r6
 8006e24:	1c43      	adds	r3, r0, #1
 8006e26:	d100      	bne.n	8006e2a <_printf_float+0x2ca>
 8006e28:	e6f8      	b.n	8006c1c <_printf_float+0xbc>
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	930a      	str	r3, [sp, #40]	; 0x28
 8006e2e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006e30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e32:	425b      	negs	r3, r3
 8006e34:	4293      	cmp	r3, r2
 8006e36:	dc01      	bgt.n	8006e3c <_printf_float+0x2dc>
 8006e38:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006e3a:	e792      	b.n	8006d62 <_printf_float+0x202>
 8006e3c:	0022      	movs	r2, r4
 8006e3e:	2301      	movs	r3, #1
 8006e40:	0038      	movs	r0, r7
 8006e42:	9908      	ldr	r1, [sp, #32]
 8006e44:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006e46:	321a      	adds	r2, #26
 8006e48:	47b0      	blx	r6
 8006e4a:	1c43      	adds	r3, r0, #1
 8006e4c:	d100      	bne.n	8006e50 <_printf_float+0x2f0>
 8006e4e:	e6e5      	b.n	8006c1c <_printf_float+0xbc>
 8006e50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e52:	3301      	adds	r3, #1
 8006e54:	e7ea      	b.n	8006e2c <_printf_float+0x2cc>
 8006e56:	46c0      	nop			; (mov r8, r8)
 8006e58:	7fefffff 	.word	0x7fefffff
 8006e5c:	0800c36c 	.word	0x0800c36c
 8006e60:	0800c370 	.word	0x0800c370
 8006e64:	0800c374 	.word	0x0800c374
 8006e68:	0800c378 	.word	0x0800c378
 8006e6c:	0800c37c 	.word	0x0800c37c
 8006e70:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006e72:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006e74:	920a      	str	r2, [sp, #40]	; 0x28
 8006e76:	429a      	cmp	r2, r3
 8006e78:	dd00      	ble.n	8006e7c <_printf_float+0x31c>
 8006e7a:	930a      	str	r3, [sp, #40]	; 0x28
 8006e7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	dc3d      	bgt.n	8006efe <_printf_float+0x39e>
 8006e82:	2300      	movs	r3, #0
 8006e84:	930e      	str	r3, [sp, #56]	; 0x38
 8006e86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e88:	43db      	mvns	r3, r3
 8006e8a:	17db      	asrs	r3, r3, #31
 8006e8c:	930f      	str	r3, [sp, #60]	; 0x3c
 8006e8e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006e90:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006e92:	930c      	str	r3, [sp, #48]	; 0x30
 8006e94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e96:	4013      	ands	r3, r2
 8006e98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006e9a:	1ad3      	subs	r3, r2, r3
 8006e9c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	dc36      	bgt.n	8006f10 <_printf_float+0x3b0>
 8006ea2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006ea4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	db40      	blt.n	8006f2c <_printf_float+0x3cc>
 8006eaa:	6823      	ldr	r3, [r4, #0]
 8006eac:	07db      	lsls	r3, r3, #31
 8006eae:	d43d      	bmi.n	8006f2c <_printf_float+0x3cc>
 8006eb0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006eb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006eb4:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006eb6:	1ad3      	subs	r3, r2, r3
 8006eb8:	1a52      	subs	r2, r2, r1
 8006eba:	920a      	str	r2, [sp, #40]	; 0x28
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	dd00      	ble.n	8006ec2 <_printf_float+0x362>
 8006ec0:	930a      	str	r3, [sp, #40]	; 0x28
 8006ec2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	dc3a      	bgt.n	8006f3e <_printf_float+0x3de>
 8006ec8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006eca:	2500      	movs	r5, #0
 8006ecc:	43db      	mvns	r3, r3
 8006ece:	17db      	asrs	r3, r3, #31
 8006ed0:	930b      	str	r3, [sp, #44]	; 0x2c
 8006ed2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006ed4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006ed6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006ed8:	1a9b      	subs	r3, r3, r2
 8006eda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006edc:	400a      	ands	r2, r1
 8006ede:	1a9b      	subs	r3, r3, r2
 8006ee0:	42ab      	cmp	r3, r5
 8006ee2:	dc00      	bgt.n	8006ee6 <_printf_float+0x386>
 8006ee4:	e76e      	b.n	8006dc4 <_printf_float+0x264>
 8006ee6:	0022      	movs	r2, r4
 8006ee8:	2301      	movs	r3, #1
 8006eea:	0038      	movs	r0, r7
 8006eec:	9908      	ldr	r1, [sp, #32]
 8006eee:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006ef0:	321a      	adds	r2, #26
 8006ef2:	47b0      	blx	r6
 8006ef4:	1c43      	adds	r3, r0, #1
 8006ef6:	d100      	bne.n	8006efa <_printf_float+0x39a>
 8006ef8:	e690      	b.n	8006c1c <_printf_float+0xbc>
 8006efa:	3501      	adds	r5, #1
 8006efc:	e7e9      	b.n	8006ed2 <_printf_float+0x372>
 8006efe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f00:	002a      	movs	r2, r5
 8006f02:	0038      	movs	r0, r7
 8006f04:	9908      	ldr	r1, [sp, #32]
 8006f06:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006f08:	47b0      	blx	r6
 8006f0a:	1c43      	adds	r3, r0, #1
 8006f0c:	d1b9      	bne.n	8006e82 <_printf_float+0x322>
 8006f0e:	e685      	b.n	8006c1c <_printf_float+0xbc>
 8006f10:	0022      	movs	r2, r4
 8006f12:	2301      	movs	r3, #1
 8006f14:	0038      	movs	r0, r7
 8006f16:	9908      	ldr	r1, [sp, #32]
 8006f18:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006f1a:	321a      	adds	r2, #26
 8006f1c:	47b0      	blx	r6
 8006f1e:	1c43      	adds	r3, r0, #1
 8006f20:	d100      	bne.n	8006f24 <_printf_float+0x3c4>
 8006f22:	e67b      	b.n	8006c1c <_printf_float+0xbc>
 8006f24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f26:	3301      	adds	r3, #1
 8006f28:	930e      	str	r3, [sp, #56]	; 0x38
 8006f2a:	e7b0      	b.n	8006e8e <_printf_float+0x32e>
 8006f2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f2e:	0038      	movs	r0, r7
 8006f30:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006f32:	9908      	ldr	r1, [sp, #32]
 8006f34:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006f36:	47b0      	blx	r6
 8006f38:	1c43      	adds	r3, r0, #1
 8006f3a:	d1b9      	bne.n	8006eb0 <_printf_float+0x350>
 8006f3c:	e66e      	b.n	8006c1c <_printf_float+0xbc>
 8006f3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f40:	0038      	movs	r0, r7
 8006f42:	18ea      	adds	r2, r5, r3
 8006f44:	9908      	ldr	r1, [sp, #32]
 8006f46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f48:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006f4a:	47a8      	blx	r5
 8006f4c:	1c43      	adds	r3, r0, #1
 8006f4e:	d1bb      	bne.n	8006ec8 <_printf_float+0x368>
 8006f50:	e664      	b.n	8006c1c <_printf_float+0xbc>
 8006f52:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	dc02      	bgt.n	8006f5e <_printf_float+0x3fe>
 8006f58:	2301      	movs	r3, #1
 8006f5a:	421a      	tst	r2, r3
 8006f5c:	d038      	beq.n	8006fd0 <_printf_float+0x470>
 8006f5e:	2301      	movs	r3, #1
 8006f60:	002a      	movs	r2, r5
 8006f62:	0038      	movs	r0, r7
 8006f64:	9908      	ldr	r1, [sp, #32]
 8006f66:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006f68:	47b0      	blx	r6
 8006f6a:	1c43      	adds	r3, r0, #1
 8006f6c:	d100      	bne.n	8006f70 <_printf_float+0x410>
 8006f6e:	e655      	b.n	8006c1c <_printf_float+0xbc>
 8006f70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f72:	0038      	movs	r0, r7
 8006f74:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006f76:	9908      	ldr	r1, [sp, #32]
 8006f78:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006f7a:	47b0      	blx	r6
 8006f7c:	1c43      	adds	r3, r0, #1
 8006f7e:	d100      	bne.n	8006f82 <_printf_float+0x422>
 8006f80:	e64c      	b.n	8006c1c <_printf_float+0xbc>
 8006f82:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006f84:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006f86:	2200      	movs	r2, #0
 8006f88:	2300      	movs	r3, #0
 8006f8a:	f7f9 fa5d 	bl	8000448 <__aeabi_dcmpeq>
 8006f8e:	2800      	cmp	r0, #0
 8006f90:	d11c      	bne.n	8006fcc <_printf_float+0x46c>
 8006f92:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006f94:	1c6a      	adds	r2, r5, #1
 8006f96:	3b01      	subs	r3, #1
 8006f98:	0038      	movs	r0, r7
 8006f9a:	9908      	ldr	r1, [sp, #32]
 8006f9c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006f9e:	47a8      	blx	r5
 8006fa0:	1c43      	adds	r3, r0, #1
 8006fa2:	d10f      	bne.n	8006fc4 <_printf_float+0x464>
 8006fa4:	e63a      	b.n	8006c1c <_printf_float+0xbc>
 8006fa6:	0022      	movs	r2, r4
 8006fa8:	2301      	movs	r3, #1
 8006faa:	0038      	movs	r0, r7
 8006fac:	9908      	ldr	r1, [sp, #32]
 8006fae:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006fb0:	321a      	adds	r2, #26
 8006fb2:	47b0      	blx	r6
 8006fb4:	1c43      	adds	r3, r0, #1
 8006fb6:	d100      	bne.n	8006fba <_printf_float+0x45a>
 8006fb8:	e630      	b.n	8006c1c <_printf_float+0xbc>
 8006fba:	3501      	adds	r5, #1
 8006fbc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006fbe:	3b01      	subs	r3, #1
 8006fc0:	42ab      	cmp	r3, r5
 8006fc2:	dcf0      	bgt.n	8006fa6 <_printf_float+0x446>
 8006fc4:	0022      	movs	r2, r4
 8006fc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fc8:	3250      	adds	r2, #80	; 0x50
 8006fca:	e6cb      	b.n	8006d64 <_printf_float+0x204>
 8006fcc:	2500      	movs	r5, #0
 8006fce:	e7f5      	b.n	8006fbc <_printf_float+0x45c>
 8006fd0:	002a      	movs	r2, r5
 8006fd2:	e7e1      	b.n	8006f98 <_printf_float+0x438>
 8006fd4:	0022      	movs	r2, r4
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	0038      	movs	r0, r7
 8006fda:	9908      	ldr	r1, [sp, #32]
 8006fdc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006fde:	3219      	adds	r2, #25
 8006fe0:	47b0      	blx	r6
 8006fe2:	1c43      	adds	r3, r0, #1
 8006fe4:	d100      	bne.n	8006fe8 <_printf_float+0x488>
 8006fe6:	e619      	b.n	8006c1c <_printf_float+0xbc>
 8006fe8:	3501      	adds	r5, #1
 8006fea:	68e3      	ldr	r3, [r4, #12]
 8006fec:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006fee:	1a9b      	subs	r3, r3, r2
 8006ff0:	42ab      	cmp	r3, r5
 8006ff2:	dcef      	bgt.n	8006fd4 <_printf_float+0x474>
 8006ff4:	e6ea      	b.n	8006dcc <_printf_float+0x26c>
 8006ff6:	2500      	movs	r5, #0
 8006ff8:	e7f7      	b.n	8006fea <_printf_float+0x48a>
 8006ffa:	46c0      	nop			; (mov r8, r8)

08006ffc <_printf_common>:
 8006ffc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ffe:	0015      	movs	r5, r2
 8007000:	9301      	str	r3, [sp, #4]
 8007002:	688a      	ldr	r2, [r1, #8]
 8007004:	690b      	ldr	r3, [r1, #16]
 8007006:	000c      	movs	r4, r1
 8007008:	9000      	str	r0, [sp, #0]
 800700a:	4293      	cmp	r3, r2
 800700c:	da00      	bge.n	8007010 <_printf_common+0x14>
 800700e:	0013      	movs	r3, r2
 8007010:	0022      	movs	r2, r4
 8007012:	602b      	str	r3, [r5, #0]
 8007014:	3243      	adds	r2, #67	; 0x43
 8007016:	7812      	ldrb	r2, [r2, #0]
 8007018:	2a00      	cmp	r2, #0
 800701a:	d001      	beq.n	8007020 <_printf_common+0x24>
 800701c:	3301      	adds	r3, #1
 800701e:	602b      	str	r3, [r5, #0]
 8007020:	6823      	ldr	r3, [r4, #0]
 8007022:	069b      	lsls	r3, r3, #26
 8007024:	d502      	bpl.n	800702c <_printf_common+0x30>
 8007026:	682b      	ldr	r3, [r5, #0]
 8007028:	3302      	adds	r3, #2
 800702a:	602b      	str	r3, [r5, #0]
 800702c:	6822      	ldr	r2, [r4, #0]
 800702e:	2306      	movs	r3, #6
 8007030:	0017      	movs	r7, r2
 8007032:	401f      	ands	r7, r3
 8007034:	421a      	tst	r2, r3
 8007036:	d027      	beq.n	8007088 <_printf_common+0x8c>
 8007038:	0023      	movs	r3, r4
 800703a:	3343      	adds	r3, #67	; 0x43
 800703c:	781b      	ldrb	r3, [r3, #0]
 800703e:	1e5a      	subs	r2, r3, #1
 8007040:	4193      	sbcs	r3, r2
 8007042:	6822      	ldr	r2, [r4, #0]
 8007044:	0692      	lsls	r2, r2, #26
 8007046:	d430      	bmi.n	80070aa <_printf_common+0xae>
 8007048:	0022      	movs	r2, r4
 800704a:	9901      	ldr	r1, [sp, #4]
 800704c:	9800      	ldr	r0, [sp, #0]
 800704e:	9e08      	ldr	r6, [sp, #32]
 8007050:	3243      	adds	r2, #67	; 0x43
 8007052:	47b0      	blx	r6
 8007054:	1c43      	adds	r3, r0, #1
 8007056:	d025      	beq.n	80070a4 <_printf_common+0xa8>
 8007058:	2306      	movs	r3, #6
 800705a:	6820      	ldr	r0, [r4, #0]
 800705c:	682a      	ldr	r2, [r5, #0]
 800705e:	68e1      	ldr	r1, [r4, #12]
 8007060:	2500      	movs	r5, #0
 8007062:	4003      	ands	r3, r0
 8007064:	2b04      	cmp	r3, #4
 8007066:	d103      	bne.n	8007070 <_printf_common+0x74>
 8007068:	1a8d      	subs	r5, r1, r2
 800706a:	43eb      	mvns	r3, r5
 800706c:	17db      	asrs	r3, r3, #31
 800706e:	401d      	ands	r5, r3
 8007070:	68a3      	ldr	r3, [r4, #8]
 8007072:	6922      	ldr	r2, [r4, #16]
 8007074:	4293      	cmp	r3, r2
 8007076:	dd01      	ble.n	800707c <_printf_common+0x80>
 8007078:	1a9b      	subs	r3, r3, r2
 800707a:	18ed      	adds	r5, r5, r3
 800707c:	2700      	movs	r7, #0
 800707e:	42bd      	cmp	r5, r7
 8007080:	d120      	bne.n	80070c4 <_printf_common+0xc8>
 8007082:	2000      	movs	r0, #0
 8007084:	e010      	b.n	80070a8 <_printf_common+0xac>
 8007086:	3701      	adds	r7, #1
 8007088:	68e3      	ldr	r3, [r4, #12]
 800708a:	682a      	ldr	r2, [r5, #0]
 800708c:	1a9b      	subs	r3, r3, r2
 800708e:	42bb      	cmp	r3, r7
 8007090:	ddd2      	ble.n	8007038 <_printf_common+0x3c>
 8007092:	0022      	movs	r2, r4
 8007094:	2301      	movs	r3, #1
 8007096:	9901      	ldr	r1, [sp, #4]
 8007098:	9800      	ldr	r0, [sp, #0]
 800709a:	9e08      	ldr	r6, [sp, #32]
 800709c:	3219      	adds	r2, #25
 800709e:	47b0      	blx	r6
 80070a0:	1c43      	adds	r3, r0, #1
 80070a2:	d1f0      	bne.n	8007086 <_printf_common+0x8a>
 80070a4:	2001      	movs	r0, #1
 80070a6:	4240      	negs	r0, r0
 80070a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80070aa:	2030      	movs	r0, #48	; 0x30
 80070ac:	18e1      	adds	r1, r4, r3
 80070ae:	3143      	adds	r1, #67	; 0x43
 80070b0:	7008      	strb	r0, [r1, #0]
 80070b2:	0021      	movs	r1, r4
 80070b4:	1c5a      	adds	r2, r3, #1
 80070b6:	3145      	adds	r1, #69	; 0x45
 80070b8:	7809      	ldrb	r1, [r1, #0]
 80070ba:	18a2      	adds	r2, r4, r2
 80070bc:	3243      	adds	r2, #67	; 0x43
 80070be:	3302      	adds	r3, #2
 80070c0:	7011      	strb	r1, [r2, #0]
 80070c2:	e7c1      	b.n	8007048 <_printf_common+0x4c>
 80070c4:	0022      	movs	r2, r4
 80070c6:	2301      	movs	r3, #1
 80070c8:	9901      	ldr	r1, [sp, #4]
 80070ca:	9800      	ldr	r0, [sp, #0]
 80070cc:	9e08      	ldr	r6, [sp, #32]
 80070ce:	321a      	adds	r2, #26
 80070d0:	47b0      	blx	r6
 80070d2:	1c43      	adds	r3, r0, #1
 80070d4:	d0e6      	beq.n	80070a4 <_printf_common+0xa8>
 80070d6:	3701      	adds	r7, #1
 80070d8:	e7d1      	b.n	800707e <_printf_common+0x82>
	...

080070dc <_printf_i>:
 80070dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070de:	b08b      	sub	sp, #44	; 0x2c
 80070e0:	9206      	str	r2, [sp, #24]
 80070e2:	000a      	movs	r2, r1
 80070e4:	3243      	adds	r2, #67	; 0x43
 80070e6:	9307      	str	r3, [sp, #28]
 80070e8:	9005      	str	r0, [sp, #20]
 80070ea:	9204      	str	r2, [sp, #16]
 80070ec:	7e0a      	ldrb	r2, [r1, #24]
 80070ee:	000c      	movs	r4, r1
 80070f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80070f2:	2a78      	cmp	r2, #120	; 0x78
 80070f4:	d806      	bhi.n	8007104 <_printf_i+0x28>
 80070f6:	2a62      	cmp	r2, #98	; 0x62
 80070f8:	d808      	bhi.n	800710c <_printf_i+0x30>
 80070fa:	2a00      	cmp	r2, #0
 80070fc:	d100      	bne.n	8007100 <_printf_i+0x24>
 80070fe:	e0c0      	b.n	8007282 <_printf_i+0x1a6>
 8007100:	2a58      	cmp	r2, #88	; 0x58
 8007102:	d052      	beq.n	80071aa <_printf_i+0xce>
 8007104:	0026      	movs	r6, r4
 8007106:	3642      	adds	r6, #66	; 0x42
 8007108:	7032      	strb	r2, [r6, #0]
 800710a:	e022      	b.n	8007152 <_printf_i+0x76>
 800710c:	0010      	movs	r0, r2
 800710e:	3863      	subs	r0, #99	; 0x63
 8007110:	2815      	cmp	r0, #21
 8007112:	d8f7      	bhi.n	8007104 <_printf_i+0x28>
 8007114:	f7f9 f808 	bl	8000128 <__gnu_thumb1_case_shi>
 8007118:	001f0016 	.word	0x001f0016
 800711c:	fff6fff6 	.word	0xfff6fff6
 8007120:	fff6fff6 	.word	0xfff6fff6
 8007124:	fff6001f 	.word	0xfff6001f
 8007128:	fff6fff6 	.word	0xfff6fff6
 800712c:	00a8fff6 	.word	0x00a8fff6
 8007130:	009a0036 	.word	0x009a0036
 8007134:	fff6fff6 	.word	0xfff6fff6
 8007138:	fff600b9 	.word	0xfff600b9
 800713c:	fff60036 	.word	0xfff60036
 8007140:	009efff6 	.word	0x009efff6
 8007144:	0026      	movs	r6, r4
 8007146:	681a      	ldr	r2, [r3, #0]
 8007148:	3642      	adds	r6, #66	; 0x42
 800714a:	1d11      	adds	r1, r2, #4
 800714c:	6019      	str	r1, [r3, #0]
 800714e:	6813      	ldr	r3, [r2, #0]
 8007150:	7033      	strb	r3, [r6, #0]
 8007152:	2301      	movs	r3, #1
 8007154:	e0a7      	b.n	80072a6 <_printf_i+0x1ca>
 8007156:	6808      	ldr	r0, [r1, #0]
 8007158:	6819      	ldr	r1, [r3, #0]
 800715a:	1d0a      	adds	r2, r1, #4
 800715c:	0605      	lsls	r5, r0, #24
 800715e:	d50b      	bpl.n	8007178 <_printf_i+0x9c>
 8007160:	680d      	ldr	r5, [r1, #0]
 8007162:	601a      	str	r2, [r3, #0]
 8007164:	2d00      	cmp	r5, #0
 8007166:	da03      	bge.n	8007170 <_printf_i+0x94>
 8007168:	232d      	movs	r3, #45	; 0x2d
 800716a:	9a04      	ldr	r2, [sp, #16]
 800716c:	426d      	negs	r5, r5
 800716e:	7013      	strb	r3, [r2, #0]
 8007170:	4b61      	ldr	r3, [pc, #388]	; (80072f8 <_printf_i+0x21c>)
 8007172:	270a      	movs	r7, #10
 8007174:	9303      	str	r3, [sp, #12]
 8007176:	e032      	b.n	80071de <_printf_i+0x102>
 8007178:	680d      	ldr	r5, [r1, #0]
 800717a:	601a      	str	r2, [r3, #0]
 800717c:	0641      	lsls	r1, r0, #25
 800717e:	d5f1      	bpl.n	8007164 <_printf_i+0x88>
 8007180:	b22d      	sxth	r5, r5
 8007182:	e7ef      	b.n	8007164 <_printf_i+0x88>
 8007184:	680d      	ldr	r5, [r1, #0]
 8007186:	6819      	ldr	r1, [r3, #0]
 8007188:	1d08      	adds	r0, r1, #4
 800718a:	6018      	str	r0, [r3, #0]
 800718c:	062e      	lsls	r6, r5, #24
 800718e:	d501      	bpl.n	8007194 <_printf_i+0xb8>
 8007190:	680d      	ldr	r5, [r1, #0]
 8007192:	e003      	b.n	800719c <_printf_i+0xc0>
 8007194:	066d      	lsls	r5, r5, #25
 8007196:	d5fb      	bpl.n	8007190 <_printf_i+0xb4>
 8007198:	680d      	ldr	r5, [r1, #0]
 800719a:	b2ad      	uxth	r5, r5
 800719c:	4b56      	ldr	r3, [pc, #344]	; (80072f8 <_printf_i+0x21c>)
 800719e:	270a      	movs	r7, #10
 80071a0:	9303      	str	r3, [sp, #12]
 80071a2:	2a6f      	cmp	r2, #111	; 0x6f
 80071a4:	d117      	bne.n	80071d6 <_printf_i+0xfa>
 80071a6:	2708      	movs	r7, #8
 80071a8:	e015      	b.n	80071d6 <_printf_i+0xfa>
 80071aa:	3145      	adds	r1, #69	; 0x45
 80071ac:	700a      	strb	r2, [r1, #0]
 80071ae:	4a52      	ldr	r2, [pc, #328]	; (80072f8 <_printf_i+0x21c>)
 80071b0:	9203      	str	r2, [sp, #12]
 80071b2:	681a      	ldr	r2, [r3, #0]
 80071b4:	6821      	ldr	r1, [r4, #0]
 80071b6:	ca20      	ldmia	r2!, {r5}
 80071b8:	601a      	str	r2, [r3, #0]
 80071ba:	0608      	lsls	r0, r1, #24
 80071bc:	d550      	bpl.n	8007260 <_printf_i+0x184>
 80071be:	07cb      	lsls	r3, r1, #31
 80071c0:	d502      	bpl.n	80071c8 <_printf_i+0xec>
 80071c2:	2320      	movs	r3, #32
 80071c4:	4319      	orrs	r1, r3
 80071c6:	6021      	str	r1, [r4, #0]
 80071c8:	2710      	movs	r7, #16
 80071ca:	2d00      	cmp	r5, #0
 80071cc:	d103      	bne.n	80071d6 <_printf_i+0xfa>
 80071ce:	2320      	movs	r3, #32
 80071d0:	6822      	ldr	r2, [r4, #0]
 80071d2:	439a      	bics	r2, r3
 80071d4:	6022      	str	r2, [r4, #0]
 80071d6:	0023      	movs	r3, r4
 80071d8:	2200      	movs	r2, #0
 80071da:	3343      	adds	r3, #67	; 0x43
 80071dc:	701a      	strb	r2, [r3, #0]
 80071de:	6863      	ldr	r3, [r4, #4]
 80071e0:	60a3      	str	r3, [r4, #8]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	db03      	blt.n	80071ee <_printf_i+0x112>
 80071e6:	2204      	movs	r2, #4
 80071e8:	6821      	ldr	r1, [r4, #0]
 80071ea:	4391      	bics	r1, r2
 80071ec:	6021      	str	r1, [r4, #0]
 80071ee:	2d00      	cmp	r5, #0
 80071f0:	d102      	bne.n	80071f8 <_printf_i+0x11c>
 80071f2:	9e04      	ldr	r6, [sp, #16]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d00c      	beq.n	8007212 <_printf_i+0x136>
 80071f8:	9e04      	ldr	r6, [sp, #16]
 80071fa:	0028      	movs	r0, r5
 80071fc:	0039      	movs	r1, r7
 80071fe:	f7f9 f823 	bl	8000248 <__aeabi_uidivmod>
 8007202:	9b03      	ldr	r3, [sp, #12]
 8007204:	3e01      	subs	r6, #1
 8007206:	5c5b      	ldrb	r3, [r3, r1]
 8007208:	7033      	strb	r3, [r6, #0]
 800720a:	002b      	movs	r3, r5
 800720c:	0005      	movs	r5, r0
 800720e:	429f      	cmp	r7, r3
 8007210:	d9f3      	bls.n	80071fa <_printf_i+0x11e>
 8007212:	2f08      	cmp	r7, #8
 8007214:	d109      	bne.n	800722a <_printf_i+0x14e>
 8007216:	6823      	ldr	r3, [r4, #0]
 8007218:	07db      	lsls	r3, r3, #31
 800721a:	d506      	bpl.n	800722a <_printf_i+0x14e>
 800721c:	6863      	ldr	r3, [r4, #4]
 800721e:	6922      	ldr	r2, [r4, #16]
 8007220:	4293      	cmp	r3, r2
 8007222:	dc02      	bgt.n	800722a <_printf_i+0x14e>
 8007224:	2330      	movs	r3, #48	; 0x30
 8007226:	3e01      	subs	r6, #1
 8007228:	7033      	strb	r3, [r6, #0]
 800722a:	9b04      	ldr	r3, [sp, #16]
 800722c:	1b9b      	subs	r3, r3, r6
 800722e:	6123      	str	r3, [r4, #16]
 8007230:	9b07      	ldr	r3, [sp, #28]
 8007232:	0021      	movs	r1, r4
 8007234:	9300      	str	r3, [sp, #0]
 8007236:	9805      	ldr	r0, [sp, #20]
 8007238:	9b06      	ldr	r3, [sp, #24]
 800723a:	aa09      	add	r2, sp, #36	; 0x24
 800723c:	f7ff fede 	bl	8006ffc <_printf_common>
 8007240:	1c43      	adds	r3, r0, #1
 8007242:	d135      	bne.n	80072b0 <_printf_i+0x1d4>
 8007244:	2001      	movs	r0, #1
 8007246:	4240      	negs	r0, r0
 8007248:	b00b      	add	sp, #44	; 0x2c
 800724a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800724c:	2220      	movs	r2, #32
 800724e:	6809      	ldr	r1, [r1, #0]
 8007250:	430a      	orrs	r2, r1
 8007252:	6022      	str	r2, [r4, #0]
 8007254:	0022      	movs	r2, r4
 8007256:	2178      	movs	r1, #120	; 0x78
 8007258:	3245      	adds	r2, #69	; 0x45
 800725a:	7011      	strb	r1, [r2, #0]
 800725c:	4a27      	ldr	r2, [pc, #156]	; (80072fc <_printf_i+0x220>)
 800725e:	e7a7      	b.n	80071b0 <_printf_i+0xd4>
 8007260:	0648      	lsls	r0, r1, #25
 8007262:	d5ac      	bpl.n	80071be <_printf_i+0xe2>
 8007264:	b2ad      	uxth	r5, r5
 8007266:	e7aa      	b.n	80071be <_printf_i+0xe2>
 8007268:	681a      	ldr	r2, [r3, #0]
 800726a:	680d      	ldr	r5, [r1, #0]
 800726c:	1d10      	adds	r0, r2, #4
 800726e:	6949      	ldr	r1, [r1, #20]
 8007270:	6018      	str	r0, [r3, #0]
 8007272:	6813      	ldr	r3, [r2, #0]
 8007274:	062e      	lsls	r6, r5, #24
 8007276:	d501      	bpl.n	800727c <_printf_i+0x1a0>
 8007278:	6019      	str	r1, [r3, #0]
 800727a:	e002      	b.n	8007282 <_printf_i+0x1a6>
 800727c:	066d      	lsls	r5, r5, #25
 800727e:	d5fb      	bpl.n	8007278 <_printf_i+0x19c>
 8007280:	8019      	strh	r1, [r3, #0]
 8007282:	2300      	movs	r3, #0
 8007284:	9e04      	ldr	r6, [sp, #16]
 8007286:	6123      	str	r3, [r4, #16]
 8007288:	e7d2      	b.n	8007230 <_printf_i+0x154>
 800728a:	681a      	ldr	r2, [r3, #0]
 800728c:	1d11      	adds	r1, r2, #4
 800728e:	6019      	str	r1, [r3, #0]
 8007290:	6816      	ldr	r6, [r2, #0]
 8007292:	2100      	movs	r1, #0
 8007294:	0030      	movs	r0, r6
 8007296:	6862      	ldr	r2, [r4, #4]
 8007298:	f002 ff2a 	bl	800a0f0 <memchr>
 800729c:	2800      	cmp	r0, #0
 800729e:	d001      	beq.n	80072a4 <_printf_i+0x1c8>
 80072a0:	1b80      	subs	r0, r0, r6
 80072a2:	6060      	str	r0, [r4, #4]
 80072a4:	6863      	ldr	r3, [r4, #4]
 80072a6:	6123      	str	r3, [r4, #16]
 80072a8:	2300      	movs	r3, #0
 80072aa:	9a04      	ldr	r2, [sp, #16]
 80072ac:	7013      	strb	r3, [r2, #0]
 80072ae:	e7bf      	b.n	8007230 <_printf_i+0x154>
 80072b0:	6923      	ldr	r3, [r4, #16]
 80072b2:	0032      	movs	r2, r6
 80072b4:	9906      	ldr	r1, [sp, #24]
 80072b6:	9805      	ldr	r0, [sp, #20]
 80072b8:	9d07      	ldr	r5, [sp, #28]
 80072ba:	47a8      	blx	r5
 80072bc:	1c43      	adds	r3, r0, #1
 80072be:	d0c1      	beq.n	8007244 <_printf_i+0x168>
 80072c0:	6823      	ldr	r3, [r4, #0]
 80072c2:	079b      	lsls	r3, r3, #30
 80072c4:	d415      	bmi.n	80072f2 <_printf_i+0x216>
 80072c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072c8:	68e0      	ldr	r0, [r4, #12]
 80072ca:	4298      	cmp	r0, r3
 80072cc:	dabc      	bge.n	8007248 <_printf_i+0x16c>
 80072ce:	0018      	movs	r0, r3
 80072d0:	e7ba      	b.n	8007248 <_printf_i+0x16c>
 80072d2:	0022      	movs	r2, r4
 80072d4:	2301      	movs	r3, #1
 80072d6:	9906      	ldr	r1, [sp, #24]
 80072d8:	9805      	ldr	r0, [sp, #20]
 80072da:	9e07      	ldr	r6, [sp, #28]
 80072dc:	3219      	adds	r2, #25
 80072de:	47b0      	blx	r6
 80072e0:	1c43      	adds	r3, r0, #1
 80072e2:	d0af      	beq.n	8007244 <_printf_i+0x168>
 80072e4:	3501      	adds	r5, #1
 80072e6:	68e3      	ldr	r3, [r4, #12]
 80072e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072ea:	1a9b      	subs	r3, r3, r2
 80072ec:	42ab      	cmp	r3, r5
 80072ee:	dcf0      	bgt.n	80072d2 <_printf_i+0x1f6>
 80072f0:	e7e9      	b.n	80072c6 <_printf_i+0x1ea>
 80072f2:	2500      	movs	r5, #0
 80072f4:	e7f7      	b.n	80072e6 <_printf_i+0x20a>
 80072f6:	46c0      	nop			; (mov r8, r8)
 80072f8:	0800c37e 	.word	0x0800c37e
 80072fc:	0800c38f 	.word	0x0800c38f

08007300 <_scanf_float>:
 8007300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007302:	b08b      	sub	sp, #44	; 0x2c
 8007304:	0015      	movs	r5, r2
 8007306:	9001      	str	r0, [sp, #4]
 8007308:	22ae      	movs	r2, #174	; 0xae
 800730a:	2000      	movs	r0, #0
 800730c:	9306      	str	r3, [sp, #24]
 800730e:	688b      	ldr	r3, [r1, #8]
 8007310:	000e      	movs	r6, r1
 8007312:	1e59      	subs	r1, r3, #1
 8007314:	0052      	lsls	r2, r2, #1
 8007316:	9005      	str	r0, [sp, #20]
 8007318:	4291      	cmp	r1, r2
 800731a:	d905      	bls.n	8007328 <_scanf_float+0x28>
 800731c:	3b5e      	subs	r3, #94	; 0x5e
 800731e:	3bff      	subs	r3, #255	; 0xff
 8007320:	9305      	str	r3, [sp, #20]
 8007322:	235e      	movs	r3, #94	; 0x5e
 8007324:	33ff      	adds	r3, #255	; 0xff
 8007326:	60b3      	str	r3, [r6, #8]
 8007328:	23f0      	movs	r3, #240	; 0xf0
 800732a:	6832      	ldr	r2, [r6, #0]
 800732c:	00db      	lsls	r3, r3, #3
 800732e:	4313      	orrs	r3, r2
 8007330:	6033      	str	r3, [r6, #0]
 8007332:	0033      	movs	r3, r6
 8007334:	2400      	movs	r4, #0
 8007336:	331c      	adds	r3, #28
 8007338:	001f      	movs	r7, r3
 800733a:	9303      	str	r3, [sp, #12]
 800733c:	9402      	str	r4, [sp, #8]
 800733e:	9408      	str	r4, [sp, #32]
 8007340:	9407      	str	r4, [sp, #28]
 8007342:	9400      	str	r4, [sp, #0]
 8007344:	9404      	str	r4, [sp, #16]
 8007346:	68b2      	ldr	r2, [r6, #8]
 8007348:	2a00      	cmp	r2, #0
 800734a:	d00a      	beq.n	8007362 <_scanf_float+0x62>
 800734c:	682b      	ldr	r3, [r5, #0]
 800734e:	781b      	ldrb	r3, [r3, #0]
 8007350:	2b4e      	cmp	r3, #78	; 0x4e
 8007352:	d844      	bhi.n	80073de <_scanf_float+0xde>
 8007354:	0018      	movs	r0, r3
 8007356:	2b40      	cmp	r3, #64	; 0x40
 8007358:	d82c      	bhi.n	80073b4 <_scanf_float+0xb4>
 800735a:	382b      	subs	r0, #43	; 0x2b
 800735c:	b2c1      	uxtb	r1, r0
 800735e:	290e      	cmp	r1, #14
 8007360:	d92a      	bls.n	80073b8 <_scanf_float+0xb8>
 8007362:	9b00      	ldr	r3, [sp, #0]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d003      	beq.n	8007370 <_scanf_float+0x70>
 8007368:	6832      	ldr	r2, [r6, #0]
 800736a:	4ba4      	ldr	r3, [pc, #656]	; (80075fc <_scanf_float+0x2fc>)
 800736c:	4013      	ands	r3, r2
 800736e:	6033      	str	r3, [r6, #0]
 8007370:	9b02      	ldr	r3, [sp, #8]
 8007372:	3b01      	subs	r3, #1
 8007374:	2b01      	cmp	r3, #1
 8007376:	d900      	bls.n	800737a <_scanf_float+0x7a>
 8007378:	e0f9      	b.n	800756e <_scanf_float+0x26e>
 800737a:	24be      	movs	r4, #190	; 0xbe
 800737c:	0064      	lsls	r4, r4, #1
 800737e:	9b03      	ldr	r3, [sp, #12]
 8007380:	429f      	cmp	r7, r3
 8007382:	d900      	bls.n	8007386 <_scanf_float+0x86>
 8007384:	e0e9      	b.n	800755a <_scanf_float+0x25a>
 8007386:	2301      	movs	r3, #1
 8007388:	9302      	str	r3, [sp, #8]
 800738a:	e185      	b.n	8007698 <_scanf_float+0x398>
 800738c:	0018      	movs	r0, r3
 800738e:	3861      	subs	r0, #97	; 0x61
 8007390:	280d      	cmp	r0, #13
 8007392:	d8e6      	bhi.n	8007362 <_scanf_float+0x62>
 8007394:	f7f8 fec8 	bl	8000128 <__gnu_thumb1_case_shi>
 8007398:	ffe50083 	.word	0xffe50083
 800739c:	ffe5ffe5 	.word	0xffe5ffe5
 80073a0:	00a200b6 	.word	0x00a200b6
 80073a4:	ffe5ffe5 	.word	0xffe5ffe5
 80073a8:	ffe50089 	.word	0xffe50089
 80073ac:	ffe5ffe5 	.word	0xffe5ffe5
 80073b0:	0065ffe5 	.word	0x0065ffe5
 80073b4:	3841      	subs	r0, #65	; 0x41
 80073b6:	e7eb      	b.n	8007390 <_scanf_float+0x90>
 80073b8:	280e      	cmp	r0, #14
 80073ba:	d8d2      	bhi.n	8007362 <_scanf_float+0x62>
 80073bc:	f7f8 feb4 	bl	8000128 <__gnu_thumb1_case_shi>
 80073c0:	ffd1004b 	.word	0xffd1004b
 80073c4:	0098004b 	.word	0x0098004b
 80073c8:	0020ffd1 	.word	0x0020ffd1
 80073cc:	00400040 	.word	0x00400040
 80073d0:	00400040 	.word	0x00400040
 80073d4:	00400040 	.word	0x00400040
 80073d8:	00400040 	.word	0x00400040
 80073dc:	0040      	.short	0x0040
 80073de:	2b6e      	cmp	r3, #110	; 0x6e
 80073e0:	d809      	bhi.n	80073f6 <_scanf_float+0xf6>
 80073e2:	2b60      	cmp	r3, #96	; 0x60
 80073e4:	d8d2      	bhi.n	800738c <_scanf_float+0x8c>
 80073e6:	2b54      	cmp	r3, #84	; 0x54
 80073e8:	d07d      	beq.n	80074e6 <_scanf_float+0x1e6>
 80073ea:	2b59      	cmp	r3, #89	; 0x59
 80073ec:	d1b9      	bne.n	8007362 <_scanf_float+0x62>
 80073ee:	2c07      	cmp	r4, #7
 80073f0:	d1b7      	bne.n	8007362 <_scanf_float+0x62>
 80073f2:	2408      	movs	r4, #8
 80073f4:	e02c      	b.n	8007450 <_scanf_float+0x150>
 80073f6:	2b74      	cmp	r3, #116	; 0x74
 80073f8:	d075      	beq.n	80074e6 <_scanf_float+0x1e6>
 80073fa:	2b79      	cmp	r3, #121	; 0x79
 80073fc:	d0f7      	beq.n	80073ee <_scanf_float+0xee>
 80073fe:	e7b0      	b.n	8007362 <_scanf_float+0x62>
 8007400:	6831      	ldr	r1, [r6, #0]
 8007402:	05c8      	lsls	r0, r1, #23
 8007404:	d51c      	bpl.n	8007440 <_scanf_float+0x140>
 8007406:	2380      	movs	r3, #128	; 0x80
 8007408:	4399      	bics	r1, r3
 800740a:	9b00      	ldr	r3, [sp, #0]
 800740c:	6031      	str	r1, [r6, #0]
 800740e:	3301      	adds	r3, #1
 8007410:	9300      	str	r3, [sp, #0]
 8007412:	9b05      	ldr	r3, [sp, #20]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d003      	beq.n	8007420 <_scanf_float+0x120>
 8007418:	3b01      	subs	r3, #1
 800741a:	3201      	adds	r2, #1
 800741c:	9305      	str	r3, [sp, #20]
 800741e:	60b2      	str	r2, [r6, #8]
 8007420:	68b3      	ldr	r3, [r6, #8]
 8007422:	3b01      	subs	r3, #1
 8007424:	60b3      	str	r3, [r6, #8]
 8007426:	6933      	ldr	r3, [r6, #16]
 8007428:	3301      	adds	r3, #1
 800742a:	6133      	str	r3, [r6, #16]
 800742c:	686b      	ldr	r3, [r5, #4]
 800742e:	3b01      	subs	r3, #1
 8007430:	606b      	str	r3, [r5, #4]
 8007432:	2b00      	cmp	r3, #0
 8007434:	dc00      	bgt.n	8007438 <_scanf_float+0x138>
 8007436:	e086      	b.n	8007546 <_scanf_float+0x246>
 8007438:	682b      	ldr	r3, [r5, #0]
 800743a:	3301      	adds	r3, #1
 800743c:	602b      	str	r3, [r5, #0]
 800743e:	e782      	b.n	8007346 <_scanf_float+0x46>
 8007440:	9a02      	ldr	r2, [sp, #8]
 8007442:	1912      	adds	r2, r2, r4
 8007444:	2a00      	cmp	r2, #0
 8007446:	d18c      	bne.n	8007362 <_scanf_float+0x62>
 8007448:	4a6d      	ldr	r2, [pc, #436]	; (8007600 <_scanf_float+0x300>)
 800744a:	6831      	ldr	r1, [r6, #0]
 800744c:	400a      	ands	r2, r1
 800744e:	6032      	str	r2, [r6, #0]
 8007450:	703b      	strb	r3, [r7, #0]
 8007452:	3701      	adds	r7, #1
 8007454:	e7e4      	b.n	8007420 <_scanf_float+0x120>
 8007456:	2180      	movs	r1, #128	; 0x80
 8007458:	6832      	ldr	r2, [r6, #0]
 800745a:	420a      	tst	r2, r1
 800745c:	d081      	beq.n	8007362 <_scanf_float+0x62>
 800745e:	438a      	bics	r2, r1
 8007460:	e7f5      	b.n	800744e <_scanf_float+0x14e>
 8007462:	9a02      	ldr	r2, [sp, #8]
 8007464:	2a00      	cmp	r2, #0
 8007466:	d10f      	bne.n	8007488 <_scanf_float+0x188>
 8007468:	9a00      	ldr	r2, [sp, #0]
 800746a:	2a00      	cmp	r2, #0
 800746c:	d10f      	bne.n	800748e <_scanf_float+0x18e>
 800746e:	6832      	ldr	r2, [r6, #0]
 8007470:	21e0      	movs	r1, #224	; 0xe0
 8007472:	0010      	movs	r0, r2
 8007474:	00c9      	lsls	r1, r1, #3
 8007476:	4008      	ands	r0, r1
 8007478:	4288      	cmp	r0, r1
 800747a:	d108      	bne.n	800748e <_scanf_float+0x18e>
 800747c:	4961      	ldr	r1, [pc, #388]	; (8007604 <_scanf_float+0x304>)
 800747e:	400a      	ands	r2, r1
 8007480:	6032      	str	r2, [r6, #0]
 8007482:	2201      	movs	r2, #1
 8007484:	9202      	str	r2, [sp, #8]
 8007486:	e7e3      	b.n	8007450 <_scanf_float+0x150>
 8007488:	9a02      	ldr	r2, [sp, #8]
 800748a:	2a02      	cmp	r2, #2
 800748c:	d059      	beq.n	8007542 <_scanf_float+0x242>
 800748e:	2c01      	cmp	r4, #1
 8007490:	d002      	beq.n	8007498 <_scanf_float+0x198>
 8007492:	2c04      	cmp	r4, #4
 8007494:	d000      	beq.n	8007498 <_scanf_float+0x198>
 8007496:	e764      	b.n	8007362 <_scanf_float+0x62>
 8007498:	3401      	adds	r4, #1
 800749a:	b2e4      	uxtb	r4, r4
 800749c:	e7d8      	b.n	8007450 <_scanf_float+0x150>
 800749e:	9a02      	ldr	r2, [sp, #8]
 80074a0:	2a01      	cmp	r2, #1
 80074a2:	d000      	beq.n	80074a6 <_scanf_float+0x1a6>
 80074a4:	e75d      	b.n	8007362 <_scanf_float+0x62>
 80074a6:	2202      	movs	r2, #2
 80074a8:	e7ec      	b.n	8007484 <_scanf_float+0x184>
 80074aa:	2c00      	cmp	r4, #0
 80074ac:	d110      	bne.n	80074d0 <_scanf_float+0x1d0>
 80074ae:	9a00      	ldr	r2, [sp, #0]
 80074b0:	2a00      	cmp	r2, #0
 80074b2:	d000      	beq.n	80074b6 <_scanf_float+0x1b6>
 80074b4:	e758      	b.n	8007368 <_scanf_float+0x68>
 80074b6:	6832      	ldr	r2, [r6, #0]
 80074b8:	21e0      	movs	r1, #224	; 0xe0
 80074ba:	0010      	movs	r0, r2
 80074bc:	00c9      	lsls	r1, r1, #3
 80074be:	4008      	ands	r0, r1
 80074c0:	4288      	cmp	r0, r1
 80074c2:	d000      	beq.n	80074c6 <_scanf_float+0x1c6>
 80074c4:	e754      	b.n	8007370 <_scanf_float+0x70>
 80074c6:	494f      	ldr	r1, [pc, #316]	; (8007604 <_scanf_float+0x304>)
 80074c8:	3401      	adds	r4, #1
 80074ca:	400a      	ands	r2, r1
 80074cc:	6032      	str	r2, [r6, #0]
 80074ce:	e7bf      	b.n	8007450 <_scanf_float+0x150>
 80074d0:	21fd      	movs	r1, #253	; 0xfd
 80074d2:	1ee2      	subs	r2, r4, #3
 80074d4:	420a      	tst	r2, r1
 80074d6:	d000      	beq.n	80074da <_scanf_float+0x1da>
 80074d8:	e743      	b.n	8007362 <_scanf_float+0x62>
 80074da:	e7dd      	b.n	8007498 <_scanf_float+0x198>
 80074dc:	2c02      	cmp	r4, #2
 80074de:	d000      	beq.n	80074e2 <_scanf_float+0x1e2>
 80074e0:	e73f      	b.n	8007362 <_scanf_float+0x62>
 80074e2:	2403      	movs	r4, #3
 80074e4:	e7b4      	b.n	8007450 <_scanf_float+0x150>
 80074e6:	2c06      	cmp	r4, #6
 80074e8:	d000      	beq.n	80074ec <_scanf_float+0x1ec>
 80074ea:	e73a      	b.n	8007362 <_scanf_float+0x62>
 80074ec:	2407      	movs	r4, #7
 80074ee:	e7af      	b.n	8007450 <_scanf_float+0x150>
 80074f0:	6832      	ldr	r2, [r6, #0]
 80074f2:	0591      	lsls	r1, r2, #22
 80074f4:	d400      	bmi.n	80074f8 <_scanf_float+0x1f8>
 80074f6:	e734      	b.n	8007362 <_scanf_float+0x62>
 80074f8:	4943      	ldr	r1, [pc, #268]	; (8007608 <_scanf_float+0x308>)
 80074fa:	400a      	ands	r2, r1
 80074fc:	6032      	str	r2, [r6, #0]
 80074fe:	9a00      	ldr	r2, [sp, #0]
 8007500:	9204      	str	r2, [sp, #16]
 8007502:	e7a5      	b.n	8007450 <_scanf_float+0x150>
 8007504:	21a0      	movs	r1, #160	; 0xa0
 8007506:	2080      	movs	r0, #128	; 0x80
 8007508:	6832      	ldr	r2, [r6, #0]
 800750a:	00c9      	lsls	r1, r1, #3
 800750c:	4011      	ands	r1, r2
 800750e:	00c0      	lsls	r0, r0, #3
 8007510:	4281      	cmp	r1, r0
 8007512:	d006      	beq.n	8007522 <_scanf_float+0x222>
 8007514:	4202      	tst	r2, r0
 8007516:	d100      	bne.n	800751a <_scanf_float+0x21a>
 8007518:	e723      	b.n	8007362 <_scanf_float+0x62>
 800751a:	9900      	ldr	r1, [sp, #0]
 800751c:	2900      	cmp	r1, #0
 800751e:	d100      	bne.n	8007522 <_scanf_float+0x222>
 8007520:	e726      	b.n	8007370 <_scanf_float+0x70>
 8007522:	0591      	lsls	r1, r2, #22
 8007524:	d404      	bmi.n	8007530 <_scanf_float+0x230>
 8007526:	9900      	ldr	r1, [sp, #0]
 8007528:	9804      	ldr	r0, [sp, #16]
 800752a:	9708      	str	r7, [sp, #32]
 800752c:	1a09      	subs	r1, r1, r0
 800752e:	9107      	str	r1, [sp, #28]
 8007530:	4934      	ldr	r1, [pc, #208]	; (8007604 <_scanf_float+0x304>)
 8007532:	400a      	ands	r2, r1
 8007534:	21c0      	movs	r1, #192	; 0xc0
 8007536:	0049      	lsls	r1, r1, #1
 8007538:	430a      	orrs	r2, r1
 800753a:	6032      	str	r2, [r6, #0]
 800753c:	2200      	movs	r2, #0
 800753e:	9200      	str	r2, [sp, #0]
 8007540:	e786      	b.n	8007450 <_scanf_float+0x150>
 8007542:	2203      	movs	r2, #3
 8007544:	e79e      	b.n	8007484 <_scanf_float+0x184>
 8007546:	23c0      	movs	r3, #192	; 0xc0
 8007548:	005b      	lsls	r3, r3, #1
 800754a:	0029      	movs	r1, r5
 800754c:	58f3      	ldr	r3, [r6, r3]
 800754e:	9801      	ldr	r0, [sp, #4]
 8007550:	4798      	blx	r3
 8007552:	2800      	cmp	r0, #0
 8007554:	d100      	bne.n	8007558 <_scanf_float+0x258>
 8007556:	e6f6      	b.n	8007346 <_scanf_float+0x46>
 8007558:	e703      	b.n	8007362 <_scanf_float+0x62>
 800755a:	3f01      	subs	r7, #1
 800755c:	5933      	ldr	r3, [r6, r4]
 800755e:	002a      	movs	r2, r5
 8007560:	7839      	ldrb	r1, [r7, #0]
 8007562:	9801      	ldr	r0, [sp, #4]
 8007564:	4798      	blx	r3
 8007566:	6933      	ldr	r3, [r6, #16]
 8007568:	3b01      	subs	r3, #1
 800756a:	6133      	str	r3, [r6, #16]
 800756c:	e707      	b.n	800737e <_scanf_float+0x7e>
 800756e:	1e63      	subs	r3, r4, #1
 8007570:	2b06      	cmp	r3, #6
 8007572:	d80e      	bhi.n	8007592 <_scanf_float+0x292>
 8007574:	9702      	str	r7, [sp, #8]
 8007576:	2c02      	cmp	r4, #2
 8007578:	d920      	bls.n	80075bc <_scanf_float+0x2bc>
 800757a:	1be3      	subs	r3, r4, r7
 800757c:	b2db      	uxtb	r3, r3
 800757e:	9305      	str	r3, [sp, #20]
 8007580:	9b02      	ldr	r3, [sp, #8]
 8007582:	9a05      	ldr	r2, [sp, #20]
 8007584:	189b      	adds	r3, r3, r2
 8007586:	b2db      	uxtb	r3, r3
 8007588:	2b03      	cmp	r3, #3
 800758a:	d827      	bhi.n	80075dc <_scanf_float+0x2dc>
 800758c:	3c03      	subs	r4, #3
 800758e:	b2e4      	uxtb	r4, r4
 8007590:	1b3f      	subs	r7, r7, r4
 8007592:	6833      	ldr	r3, [r6, #0]
 8007594:	05da      	lsls	r2, r3, #23
 8007596:	d554      	bpl.n	8007642 <_scanf_float+0x342>
 8007598:	055b      	lsls	r3, r3, #21
 800759a:	d537      	bpl.n	800760c <_scanf_float+0x30c>
 800759c:	24be      	movs	r4, #190	; 0xbe
 800759e:	0064      	lsls	r4, r4, #1
 80075a0:	9b03      	ldr	r3, [sp, #12]
 80075a2:	429f      	cmp	r7, r3
 80075a4:	d800      	bhi.n	80075a8 <_scanf_float+0x2a8>
 80075a6:	e6ee      	b.n	8007386 <_scanf_float+0x86>
 80075a8:	3f01      	subs	r7, #1
 80075aa:	5933      	ldr	r3, [r6, r4]
 80075ac:	002a      	movs	r2, r5
 80075ae:	7839      	ldrb	r1, [r7, #0]
 80075b0:	9801      	ldr	r0, [sp, #4]
 80075b2:	4798      	blx	r3
 80075b4:	6933      	ldr	r3, [r6, #16]
 80075b6:	3b01      	subs	r3, #1
 80075b8:	6133      	str	r3, [r6, #16]
 80075ba:	e7f1      	b.n	80075a0 <_scanf_float+0x2a0>
 80075bc:	24be      	movs	r4, #190	; 0xbe
 80075be:	0064      	lsls	r4, r4, #1
 80075c0:	9b03      	ldr	r3, [sp, #12]
 80075c2:	429f      	cmp	r7, r3
 80075c4:	d800      	bhi.n	80075c8 <_scanf_float+0x2c8>
 80075c6:	e6de      	b.n	8007386 <_scanf_float+0x86>
 80075c8:	3f01      	subs	r7, #1
 80075ca:	5933      	ldr	r3, [r6, r4]
 80075cc:	002a      	movs	r2, r5
 80075ce:	7839      	ldrb	r1, [r7, #0]
 80075d0:	9801      	ldr	r0, [sp, #4]
 80075d2:	4798      	blx	r3
 80075d4:	6933      	ldr	r3, [r6, #16]
 80075d6:	3b01      	subs	r3, #1
 80075d8:	6133      	str	r3, [r6, #16]
 80075da:	e7f1      	b.n	80075c0 <_scanf_float+0x2c0>
 80075dc:	9b02      	ldr	r3, [sp, #8]
 80075de:	002a      	movs	r2, r5
 80075e0:	3b01      	subs	r3, #1
 80075e2:	7819      	ldrb	r1, [r3, #0]
 80075e4:	9302      	str	r3, [sp, #8]
 80075e6:	23be      	movs	r3, #190	; 0xbe
 80075e8:	005b      	lsls	r3, r3, #1
 80075ea:	58f3      	ldr	r3, [r6, r3]
 80075ec:	9801      	ldr	r0, [sp, #4]
 80075ee:	9309      	str	r3, [sp, #36]	; 0x24
 80075f0:	4798      	blx	r3
 80075f2:	6933      	ldr	r3, [r6, #16]
 80075f4:	3b01      	subs	r3, #1
 80075f6:	6133      	str	r3, [r6, #16]
 80075f8:	e7c2      	b.n	8007580 <_scanf_float+0x280>
 80075fa:	46c0      	nop			; (mov r8, r8)
 80075fc:	fffffeff 	.word	0xfffffeff
 8007600:	fffffe7f 	.word	0xfffffe7f
 8007604:	fffff87f 	.word	0xfffff87f
 8007608:	fffffd7f 	.word	0xfffffd7f
 800760c:	6933      	ldr	r3, [r6, #16]
 800760e:	1e7c      	subs	r4, r7, #1
 8007610:	7821      	ldrb	r1, [r4, #0]
 8007612:	3b01      	subs	r3, #1
 8007614:	6133      	str	r3, [r6, #16]
 8007616:	2965      	cmp	r1, #101	; 0x65
 8007618:	d00c      	beq.n	8007634 <_scanf_float+0x334>
 800761a:	2945      	cmp	r1, #69	; 0x45
 800761c:	d00a      	beq.n	8007634 <_scanf_float+0x334>
 800761e:	23be      	movs	r3, #190	; 0xbe
 8007620:	005b      	lsls	r3, r3, #1
 8007622:	58f3      	ldr	r3, [r6, r3]
 8007624:	002a      	movs	r2, r5
 8007626:	9801      	ldr	r0, [sp, #4]
 8007628:	4798      	blx	r3
 800762a:	6933      	ldr	r3, [r6, #16]
 800762c:	1ebc      	subs	r4, r7, #2
 800762e:	3b01      	subs	r3, #1
 8007630:	7821      	ldrb	r1, [r4, #0]
 8007632:	6133      	str	r3, [r6, #16]
 8007634:	23be      	movs	r3, #190	; 0xbe
 8007636:	005b      	lsls	r3, r3, #1
 8007638:	002a      	movs	r2, r5
 800763a:	58f3      	ldr	r3, [r6, r3]
 800763c:	9801      	ldr	r0, [sp, #4]
 800763e:	4798      	blx	r3
 8007640:	0027      	movs	r7, r4
 8007642:	6832      	ldr	r2, [r6, #0]
 8007644:	2310      	movs	r3, #16
 8007646:	0011      	movs	r1, r2
 8007648:	4019      	ands	r1, r3
 800764a:	9102      	str	r1, [sp, #8]
 800764c:	421a      	tst	r2, r3
 800764e:	d158      	bne.n	8007702 <_scanf_float+0x402>
 8007650:	23c0      	movs	r3, #192	; 0xc0
 8007652:	7039      	strb	r1, [r7, #0]
 8007654:	6832      	ldr	r2, [r6, #0]
 8007656:	00db      	lsls	r3, r3, #3
 8007658:	4013      	ands	r3, r2
 800765a:	2280      	movs	r2, #128	; 0x80
 800765c:	00d2      	lsls	r2, r2, #3
 800765e:	4293      	cmp	r3, r2
 8007660:	d11d      	bne.n	800769e <_scanf_float+0x39e>
 8007662:	9b04      	ldr	r3, [sp, #16]
 8007664:	9a00      	ldr	r2, [sp, #0]
 8007666:	9900      	ldr	r1, [sp, #0]
 8007668:	1a9a      	subs	r2, r3, r2
 800766a:	428b      	cmp	r3, r1
 800766c:	d124      	bne.n	80076b8 <_scanf_float+0x3b8>
 800766e:	2200      	movs	r2, #0
 8007670:	9903      	ldr	r1, [sp, #12]
 8007672:	9801      	ldr	r0, [sp, #4]
 8007674:	f000 ff64 	bl	8008540 <_strtod_r>
 8007678:	9b06      	ldr	r3, [sp, #24]
 800767a:	000d      	movs	r5, r1
 800767c:	6831      	ldr	r1, [r6, #0]
 800767e:	0004      	movs	r4, r0
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	078a      	lsls	r2, r1, #30
 8007684:	d525      	bpl.n	80076d2 <_scanf_float+0x3d2>
 8007686:	1d1a      	adds	r2, r3, #4
 8007688:	9906      	ldr	r1, [sp, #24]
 800768a:	600a      	str	r2, [r1, #0]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	601c      	str	r4, [r3, #0]
 8007690:	605d      	str	r5, [r3, #4]
 8007692:	68f3      	ldr	r3, [r6, #12]
 8007694:	3301      	adds	r3, #1
 8007696:	60f3      	str	r3, [r6, #12]
 8007698:	9802      	ldr	r0, [sp, #8]
 800769a:	b00b      	add	sp, #44	; 0x2c
 800769c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800769e:	9b07      	ldr	r3, [sp, #28]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d0e4      	beq.n	800766e <_scanf_float+0x36e>
 80076a4:	9b08      	ldr	r3, [sp, #32]
 80076a6:	9a02      	ldr	r2, [sp, #8]
 80076a8:	1c59      	adds	r1, r3, #1
 80076aa:	9801      	ldr	r0, [sp, #4]
 80076ac:	230a      	movs	r3, #10
 80076ae:	f000 ffdd 	bl	800866c <_strtol_r>
 80076b2:	9b07      	ldr	r3, [sp, #28]
 80076b4:	9f08      	ldr	r7, [sp, #32]
 80076b6:	1ac2      	subs	r2, r0, r3
 80076b8:	0033      	movs	r3, r6
 80076ba:	3370      	adds	r3, #112	; 0x70
 80076bc:	33ff      	adds	r3, #255	; 0xff
 80076be:	429f      	cmp	r7, r3
 80076c0:	d302      	bcc.n	80076c8 <_scanf_float+0x3c8>
 80076c2:	0037      	movs	r7, r6
 80076c4:	376f      	adds	r7, #111	; 0x6f
 80076c6:	37ff      	adds	r7, #255	; 0xff
 80076c8:	0038      	movs	r0, r7
 80076ca:	490f      	ldr	r1, [pc, #60]	; (8007708 <_scanf_float+0x408>)
 80076cc:	f000 f8dc 	bl	8007888 <siprintf>
 80076d0:	e7cd      	b.n	800766e <_scanf_float+0x36e>
 80076d2:	1d1a      	adds	r2, r3, #4
 80076d4:	0749      	lsls	r1, r1, #29
 80076d6:	d4d7      	bmi.n	8007688 <_scanf_float+0x388>
 80076d8:	9906      	ldr	r1, [sp, #24]
 80076da:	0020      	movs	r0, r4
 80076dc:	600a      	str	r2, [r1, #0]
 80076de:	681f      	ldr	r7, [r3, #0]
 80076e0:	0022      	movs	r2, r4
 80076e2:	002b      	movs	r3, r5
 80076e4:	0029      	movs	r1, r5
 80076e6:	f7fb fbf7 	bl	8002ed8 <__aeabi_dcmpun>
 80076ea:	2800      	cmp	r0, #0
 80076ec:	d004      	beq.n	80076f8 <_scanf_float+0x3f8>
 80076ee:	4807      	ldr	r0, [pc, #28]	; (800770c <_scanf_float+0x40c>)
 80076f0:	f7ff f882 	bl	80067f8 <nanf>
 80076f4:	6038      	str	r0, [r7, #0]
 80076f6:	e7cc      	b.n	8007692 <_scanf_float+0x392>
 80076f8:	0020      	movs	r0, r4
 80076fa:	0029      	movs	r1, r5
 80076fc:	f7fb fcde 	bl	80030bc <__aeabi_d2f>
 8007700:	e7f8      	b.n	80076f4 <_scanf_float+0x3f4>
 8007702:	2300      	movs	r3, #0
 8007704:	e640      	b.n	8007388 <_scanf_float+0x88>
 8007706:	46c0      	nop			; (mov r8, r8)
 8007708:	0800c3a0 	.word	0x0800c3a0
 800770c:	0800c818 	.word	0x0800c818

08007710 <iprintf>:
 8007710:	b40f      	push	{r0, r1, r2, r3}
 8007712:	4b0b      	ldr	r3, [pc, #44]	; (8007740 <iprintf+0x30>)
 8007714:	b513      	push	{r0, r1, r4, lr}
 8007716:	681c      	ldr	r4, [r3, #0]
 8007718:	2c00      	cmp	r4, #0
 800771a:	d005      	beq.n	8007728 <iprintf+0x18>
 800771c:	69a3      	ldr	r3, [r4, #24]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d102      	bne.n	8007728 <iprintf+0x18>
 8007722:	0020      	movs	r0, r4
 8007724:	f002 f84c 	bl	80097c0 <__sinit>
 8007728:	ab05      	add	r3, sp, #20
 800772a:	0020      	movs	r0, r4
 800772c:	9a04      	ldr	r2, [sp, #16]
 800772e:	68a1      	ldr	r1, [r4, #8]
 8007730:	9301      	str	r3, [sp, #4]
 8007732:	f003 fb81 	bl	800ae38 <_vfiprintf_r>
 8007736:	bc16      	pop	{r1, r2, r4}
 8007738:	bc08      	pop	{r3}
 800773a:	b004      	add	sp, #16
 800773c:	4718      	bx	r3
 800773e:	46c0      	nop			; (mov r8, r8)
 8007740:	20000020 	.word	0x20000020

08007744 <putchar>:
 8007744:	4b08      	ldr	r3, [pc, #32]	; (8007768 <putchar+0x24>)
 8007746:	b570      	push	{r4, r5, r6, lr}
 8007748:	681c      	ldr	r4, [r3, #0]
 800774a:	0005      	movs	r5, r0
 800774c:	2c00      	cmp	r4, #0
 800774e:	d005      	beq.n	800775c <putchar+0x18>
 8007750:	69a3      	ldr	r3, [r4, #24]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d102      	bne.n	800775c <putchar+0x18>
 8007756:	0020      	movs	r0, r4
 8007758:	f002 f832 	bl	80097c0 <__sinit>
 800775c:	0029      	movs	r1, r5
 800775e:	0020      	movs	r0, r4
 8007760:	68a2      	ldr	r2, [r4, #8]
 8007762:	f003 fca3 	bl	800b0ac <_putc_r>
 8007766:	bd70      	pop	{r4, r5, r6, pc}
 8007768:	20000020 	.word	0x20000020

0800776c <_puts_r>:
 800776c:	b570      	push	{r4, r5, r6, lr}
 800776e:	0005      	movs	r5, r0
 8007770:	000e      	movs	r6, r1
 8007772:	2800      	cmp	r0, #0
 8007774:	d004      	beq.n	8007780 <_puts_r+0x14>
 8007776:	6983      	ldr	r3, [r0, #24]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d101      	bne.n	8007780 <_puts_r+0x14>
 800777c:	f002 f820 	bl	80097c0 <__sinit>
 8007780:	69ab      	ldr	r3, [r5, #24]
 8007782:	68ac      	ldr	r4, [r5, #8]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d102      	bne.n	800778e <_puts_r+0x22>
 8007788:	0028      	movs	r0, r5
 800778a:	f002 f819 	bl	80097c0 <__sinit>
 800778e:	4b2d      	ldr	r3, [pc, #180]	; (8007844 <_puts_r+0xd8>)
 8007790:	429c      	cmp	r4, r3
 8007792:	d122      	bne.n	80077da <_puts_r+0x6e>
 8007794:	686c      	ldr	r4, [r5, #4]
 8007796:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007798:	07db      	lsls	r3, r3, #31
 800779a:	d405      	bmi.n	80077a8 <_puts_r+0x3c>
 800779c:	89a3      	ldrh	r3, [r4, #12]
 800779e:	059b      	lsls	r3, r3, #22
 80077a0:	d402      	bmi.n	80077a8 <_puts_r+0x3c>
 80077a2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80077a4:	f002 fc23 	bl	8009fee <__retarget_lock_acquire_recursive>
 80077a8:	89a3      	ldrh	r3, [r4, #12]
 80077aa:	071b      	lsls	r3, r3, #28
 80077ac:	d502      	bpl.n	80077b4 <_puts_r+0x48>
 80077ae:	6923      	ldr	r3, [r4, #16]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d129      	bne.n	8007808 <_puts_r+0x9c>
 80077b4:	0021      	movs	r1, r4
 80077b6:	0028      	movs	r0, r5
 80077b8:	f000 ffb2 	bl	8008720 <__swsetup_r>
 80077bc:	2800      	cmp	r0, #0
 80077be:	d023      	beq.n	8007808 <_puts_r+0x9c>
 80077c0:	2501      	movs	r5, #1
 80077c2:	426d      	negs	r5, r5
 80077c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80077c6:	07db      	lsls	r3, r3, #31
 80077c8:	d405      	bmi.n	80077d6 <_puts_r+0x6a>
 80077ca:	89a3      	ldrh	r3, [r4, #12]
 80077cc:	059b      	lsls	r3, r3, #22
 80077ce:	d402      	bmi.n	80077d6 <_puts_r+0x6a>
 80077d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80077d2:	f002 fc0d 	bl	8009ff0 <__retarget_lock_release_recursive>
 80077d6:	0028      	movs	r0, r5
 80077d8:	bd70      	pop	{r4, r5, r6, pc}
 80077da:	4b1b      	ldr	r3, [pc, #108]	; (8007848 <_puts_r+0xdc>)
 80077dc:	429c      	cmp	r4, r3
 80077de:	d101      	bne.n	80077e4 <_puts_r+0x78>
 80077e0:	68ac      	ldr	r4, [r5, #8]
 80077e2:	e7d8      	b.n	8007796 <_puts_r+0x2a>
 80077e4:	4b19      	ldr	r3, [pc, #100]	; (800784c <_puts_r+0xe0>)
 80077e6:	429c      	cmp	r4, r3
 80077e8:	d1d5      	bne.n	8007796 <_puts_r+0x2a>
 80077ea:	68ec      	ldr	r4, [r5, #12]
 80077ec:	e7d3      	b.n	8007796 <_puts_r+0x2a>
 80077ee:	3601      	adds	r6, #1
 80077f0:	60a3      	str	r3, [r4, #8]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	da04      	bge.n	8007800 <_puts_r+0x94>
 80077f6:	69a2      	ldr	r2, [r4, #24]
 80077f8:	429a      	cmp	r2, r3
 80077fa:	dc16      	bgt.n	800782a <_puts_r+0xbe>
 80077fc:	290a      	cmp	r1, #10
 80077fe:	d014      	beq.n	800782a <_puts_r+0xbe>
 8007800:	6823      	ldr	r3, [r4, #0]
 8007802:	1c5a      	adds	r2, r3, #1
 8007804:	6022      	str	r2, [r4, #0]
 8007806:	7019      	strb	r1, [r3, #0]
 8007808:	68a3      	ldr	r3, [r4, #8]
 800780a:	7831      	ldrb	r1, [r6, #0]
 800780c:	3b01      	subs	r3, #1
 800780e:	2900      	cmp	r1, #0
 8007810:	d1ed      	bne.n	80077ee <_puts_r+0x82>
 8007812:	60a3      	str	r3, [r4, #8]
 8007814:	2b00      	cmp	r3, #0
 8007816:	da0f      	bge.n	8007838 <_puts_r+0xcc>
 8007818:	0028      	movs	r0, r5
 800781a:	0022      	movs	r2, r4
 800781c:	310a      	adds	r1, #10
 800781e:	f000 ff29 	bl	8008674 <__swbuf_r>
 8007822:	250a      	movs	r5, #10
 8007824:	1c43      	adds	r3, r0, #1
 8007826:	d1cd      	bne.n	80077c4 <_puts_r+0x58>
 8007828:	e7ca      	b.n	80077c0 <_puts_r+0x54>
 800782a:	0022      	movs	r2, r4
 800782c:	0028      	movs	r0, r5
 800782e:	f000 ff21 	bl	8008674 <__swbuf_r>
 8007832:	1c43      	adds	r3, r0, #1
 8007834:	d1e8      	bne.n	8007808 <_puts_r+0x9c>
 8007836:	e7c3      	b.n	80077c0 <_puts_r+0x54>
 8007838:	250a      	movs	r5, #10
 800783a:	6823      	ldr	r3, [r4, #0]
 800783c:	1c5a      	adds	r2, r3, #1
 800783e:	6022      	str	r2, [r4, #0]
 8007840:	701d      	strb	r5, [r3, #0]
 8007842:	e7bf      	b.n	80077c4 <_puts_r+0x58>
 8007844:	0800c5b0 	.word	0x0800c5b0
 8007848:	0800c5d0 	.word	0x0800c5d0
 800784c:	0800c590 	.word	0x0800c590

08007850 <puts>:
 8007850:	b510      	push	{r4, lr}
 8007852:	4b03      	ldr	r3, [pc, #12]	; (8007860 <puts+0x10>)
 8007854:	0001      	movs	r1, r0
 8007856:	6818      	ldr	r0, [r3, #0]
 8007858:	f7ff ff88 	bl	800776c <_puts_r>
 800785c:	bd10      	pop	{r4, pc}
 800785e:	46c0      	nop			; (mov r8, r8)
 8007860:	20000020 	.word	0x20000020

08007864 <_sbrk_r>:
 8007864:	2300      	movs	r3, #0
 8007866:	b570      	push	{r4, r5, r6, lr}
 8007868:	4d06      	ldr	r5, [pc, #24]	; (8007884 <_sbrk_r+0x20>)
 800786a:	0004      	movs	r4, r0
 800786c:	0008      	movs	r0, r1
 800786e:	602b      	str	r3, [r5, #0]
 8007870:	f7fc f84e 	bl	8003910 <_sbrk>
 8007874:	1c43      	adds	r3, r0, #1
 8007876:	d103      	bne.n	8007880 <_sbrk_r+0x1c>
 8007878:	682b      	ldr	r3, [r5, #0]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d000      	beq.n	8007880 <_sbrk_r+0x1c>
 800787e:	6023      	str	r3, [r4, #0]
 8007880:	bd70      	pop	{r4, r5, r6, pc}
 8007882:	46c0      	nop			; (mov r8, r8)
 8007884:	200003f8 	.word	0x200003f8

08007888 <siprintf>:
 8007888:	b40e      	push	{r1, r2, r3}
 800788a:	b500      	push	{lr}
 800788c:	490b      	ldr	r1, [pc, #44]	; (80078bc <siprintf+0x34>)
 800788e:	b09c      	sub	sp, #112	; 0x70
 8007890:	ab1d      	add	r3, sp, #116	; 0x74
 8007892:	9002      	str	r0, [sp, #8]
 8007894:	9006      	str	r0, [sp, #24]
 8007896:	9107      	str	r1, [sp, #28]
 8007898:	9104      	str	r1, [sp, #16]
 800789a:	4809      	ldr	r0, [pc, #36]	; (80078c0 <siprintf+0x38>)
 800789c:	4909      	ldr	r1, [pc, #36]	; (80078c4 <siprintf+0x3c>)
 800789e:	cb04      	ldmia	r3!, {r2}
 80078a0:	9105      	str	r1, [sp, #20]
 80078a2:	6800      	ldr	r0, [r0, #0]
 80078a4:	a902      	add	r1, sp, #8
 80078a6:	9301      	str	r3, [sp, #4]
 80078a8:	f003 f99e 	bl	800abe8 <_svfiprintf_r>
 80078ac:	2300      	movs	r3, #0
 80078ae:	9a02      	ldr	r2, [sp, #8]
 80078b0:	7013      	strb	r3, [r2, #0]
 80078b2:	b01c      	add	sp, #112	; 0x70
 80078b4:	bc08      	pop	{r3}
 80078b6:	b003      	add	sp, #12
 80078b8:	4718      	bx	r3
 80078ba:	46c0      	nop			; (mov r8, r8)
 80078bc:	7fffffff 	.word	0x7fffffff
 80078c0:	20000020 	.word	0x20000020
 80078c4:	ffff0208 	.word	0xffff0208

080078c8 <sulp>:
 80078c8:	b570      	push	{r4, r5, r6, lr}
 80078ca:	0016      	movs	r6, r2
 80078cc:	000d      	movs	r5, r1
 80078ce:	f002 ffb1 	bl	800a834 <__ulp>
 80078d2:	2e00      	cmp	r6, #0
 80078d4:	d00d      	beq.n	80078f2 <sulp+0x2a>
 80078d6:	236b      	movs	r3, #107	; 0x6b
 80078d8:	006a      	lsls	r2, r5, #1
 80078da:	0d52      	lsrs	r2, r2, #21
 80078dc:	1a9b      	subs	r3, r3, r2
 80078de:	2b00      	cmp	r3, #0
 80078e0:	dd07      	ble.n	80078f2 <sulp+0x2a>
 80078e2:	2400      	movs	r4, #0
 80078e4:	4a03      	ldr	r2, [pc, #12]	; (80078f4 <sulp+0x2c>)
 80078e6:	051b      	lsls	r3, r3, #20
 80078e8:	189d      	adds	r5, r3, r2
 80078ea:	002b      	movs	r3, r5
 80078ec:	0022      	movs	r2, r4
 80078ee:	f7fa fcf5 	bl	80022dc <__aeabi_dmul>
 80078f2:	bd70      	pop	{r4, r5, r6, pc}
 80078f4:	3ff00000 	.word	0x3ff00000

080078f8 <_strtod_l>:
 80078f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078fa:	001d      	movs	r5, r3
 80078fc:	2300      	movs	r3, #0
 80078fe:	b0a7      	sub	sp, #156	; 0x9c
 8007900:	9322      	str	r3, [sp, #136]	; 0x88
 8007902:	4bae      	ldr	r3, [pc, #696]	; (8007bbc <_strtod_l+0x2c4>)
 8007904:	9005      	str	r0, [sp, #20]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	9108      	str	r1, [sp, #32]
 800790a:	0018      	movs	r0, r3
 800790c:	9307      	str	r3, [sp, #28]
 800790e:	921d      	str	r2, [sp, #116]	; 0x74
 8007910:	f7f8 fbf8 	bl	8000104 <strlen>
 8007914:	2600      	movs	r6, #0
 8007916:	0004      	movs	r4, r0
 8007918:	2700      	movs	r7, #0
 800791a:	9b08      	ldr	r3, [sp, #32]
 800791c:	9321      	str	r3, [sp, #132]	; 0x84
 800791e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007920:	7813      	ldrb	r3, [r2, #0]
 8007922:	2b2b      	cmp	r3, #43	; 0x2b
 8007924:	d058      	beq.n	80079d8 <_strtod_l+0xe0>
 8007926:	d844      	bhi.n	80079b2 <_strtod_l+0xba>
 8007928:	2b0d      	cmp	r3, #13
 800792a:	d83d      	bhi.n	80079a8 <_strtod_l+0xb0>
 800792c:	2b08      	cmp	r3, #8
 800792e:	d83d      	bhi.n	80079ac <_strtod_l+0xb4>
 8007930:	2b00      	cmp	r3, #0
 8007932:	d047      	beq.n	80079c4 <_strtod_l+0xcc>
 8007934:	2300      	movs	r3, #0
 8007936:	9310      	str	r3, [sp, #64]	; 0x40
 8007938:	2200      	movs	r2, #0
 800793a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800793c:	920a      	str	r2, [sp, #40]	; 0x28
 800793e:	9306      	str	r3, [sp, #24]
 8007940:	781b      	ldrb	r3, [r3, #0]
 8007942:	2b30      	cmp	r3, #48	; 0x30
 8007944:	d000      	beq.n	8007948 <_strtod_l+0x50>
 8007946:	e083      	b.n	8007a50 <_strtod_l+0x158>
 8007948:	9b06      	ldr	r3, [sp, #24]
 800794a:	3220      	adds	r2, #32
 800794c:	785b      	ldrb	r3, [r3, #1]
 800794e:	4393      	bics	r3, r2
 8007950:	2b58      	cmp	r3, #88	; 0x58
 8007952:	d000      	beq.n	8007956 <_strtod_l+0x5e>
 8007954:	e072      	b.n	8007a3c <_strtod_l+0x144>
 8007956:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007958:	9502      	str	r5, [sp, #8]
 800795a:	9301      	str	r3, [sp, #4]
 800795c:	ab22      	add	r3, sp, #136	; 0x88
 800795e:	9300      	str	r3, [sp, #0]
 8007960:	4a97      	ldr	r2, [pc, #604]	; (8007bc0 <_strtod_l+0x2c8>)
 8007962:	ab23      	add	r3, sp, #140	; 0x8c
 8007964:	9805      	ldr	r0, [sp, #20]
 8007966:	a921      	add	r1, sp, #132	; 0x84
 8007968:	f002 f834 	bl	80099d4 <__gethex>
 800796c:	2307      	movs	r3, #7
 800796e:	0005      	movs	r5, r0
 8007970:	0004      	movs	r4, r0
 8007972:	401d      	ands	r5, r3
 8007974:	4218      	tst	r0, r3
 8007976:	d006      	beq.n	8007986 <_strtod_l+0x8e>
 8007978:	2d06      	cmp	r5, #6
 800797a:	d12f      	bne.n	80079dc <_strtod_l+0xe4>
 800797c:	9b06      	ldr	r3, [sp, #24]
 800797e:	3301      	adds	r3, #1
 8007980:	9321      	str	r3, [sp, #132]	; 0x84
 8007982:	2300      	movs	r3, #0
 8007984:	9310      	str	r3, [sp, #64]	; 0x40
 8007986:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007988:	2b00      	cmp	r3, #0
 800798a:	d002      	beq.n	8007992 <_strtod_l+0x9a>
 800798c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800798e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007990:	601a      	str	r2, [r3, #0]
 8007992:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007994:	2b00      	cmp	r3, #0
 8007996:	d01c      	beq.n	80079d2 <_strtod_l+0xda>
 8007998:	2380      	movs	r3, #128	; 0x80
 800799a:	0032      	movs	r2, r6
 800799c:	061b      	lsls	r3, r3, #24
 800799e:	18fb      	adds	r3, r7, r3
 80079a0:	0010      	movs	r0, r2
 80079a2:	0019      	movs	r1, r3
 80079a4:	b027      	add	sp, #156	; 0x9c
 80079a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079a8:	2b20      	cmp	r3, #32
 80079aa:	d1c3      	bne.n	8007934 <_strtod_l+0x3c>
 80079ac:	3201      	adds	r2, #1
 80079ae:	9221      	str	r2, [sp, #132]	; 0x84
 80079b0:	e7b5      	b.n	800791e <_strtod_l+0x26>
 80079b2:	2b2d      	cmp	r3, #45	; 0x2d
 80079b4:	d1be      	bne.n	8007934 <_strtod_l+0x3c>
 80079b6:	3b2c      	subs	r3, #44	; 0x2c
 80079b8:	9310      	str	r3, [sp, #64]	; 0x40
 80079ba:	1c53      	adds	r3, r2, #1
 80079bc:	9321      	str	r3, [sp, #132]	; 0x84
 80079be:	7853      	ldrb	r3, [r2, #1]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d1b9      	bne.n	8007938 <_strtod_l+0x40>
 80079c4:	9b08      	ldr	r3, [sp, #32]
 80079c6:	9321      	str	r3, [sp, #132]	; 0x84
 80079c8:	2300      	movs	r3, #0
 80079ca:	9310      	str	r3, [sp, #64]	; 0x40
 80079cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d1dc      	bne.n	800798c <_strtod_l+0x94>
 80079d2:	0032      	movs	r2, r6
 80079d4:	003b      	movs	r3, r7
 80079d6:	e7e3      	b.n	80079a0 <_strtod_l+0xa8>
 80079d8:	2300      	movs	r3, #0
 80079da:	e7ed      	b.n	80079b8 <_strtod_l+0xc0>
 80079dc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80079de:	2a00      	cmp	r2, #0
 80079e0:	d007      	beq.n	80079f2 <_strtod_l+0xfa>
 80079e2:	2135      	movs	r1, #53	; 0x35
 80079e4:	a824      	add	r0, sp, #144	; 0x90
 80079e6:	f003 f824 	bl	800aa32 <__copybits>
 80079ea:	9922      	ldr	r1, [sp, #136]	; 0x88
 80079ec:	9805      	ldr	r0, [sp, #20]
 80079ee:	f002 fbdf 	bl	800a1b0 <_Bfree>
 80079f2:	1e68      	subs	r0, r5, #1
 80079f4:	2805      	cmp	r0, #5
 80079f6:	d806      	bhi.n	8007a06 <_strtod_l+0x10e>
 80079f8:	f7f8 fb8c 	bl	8000114 <__gnu_thumb1_case_uqi>
 80079fc:	1c190b0e 	.word	0x1c190b0e
 8007a00:	030e      	.short	0x030e
 8007a02:	2700      	movs	r7, #0
 8007a04:	003e      	movs	r6, r7
 8007a06:	0723      	lsls	r3, r4, #28
 8007a08:	d5bd      	bpl.n	8007986 <_strtod_l+0x8e>
 8007a0a:	2380      	movs	r3, #128	; 0x80
 8007a0c:	061b      	lsls	r3, r3, #24
 8007a0e:	431f      	orrs	r7, r3
 8007a10:	e7b9      	b.n	8007986 <_strtod_l+0x8e>
 8007a12:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8007a14:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8007a16:	e7f6      	b.n	8007a06 <_strtod_l+0x10e>
 8007a18:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8007a1a:	4a6a      	ldr	r2, [pc, #424]	; (8007bc4 <_strtod_l+0x2cc>)
 8007a1c:	496a      	ldr	r1, [pc, #424]	; (8007bc8 <_strtod_l+0x2d0>)
 8007a1e:	401a      	ands	r2, r3
 8007a20:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007a22:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8007a24:	185b      	adds	r3, r3, r1
 8007a26:	051b      	lsls	r3, r3, #20
 8007a28:	431a      	orrs	r2, r3
 8007a2a:	0017      	movs	r7, r2
 8007a2c:	e7eb      	b.n	8007a06 <_strtod_l+0x10e>
 8007a2e:	2600      	movs	r6, #0
 8007a30:	4f66      	ldr	r7, [pc, #408]	; (8007bcc <_strtod_l+0x2d4>)
 8007a32:	e7e8      	b.n	8007a06 <_strtod_l+0x10e>
 8007a34:	2601      	movs	r6, #1
 8007a36:	4f66      	ldr	r7, [pc, #408]	; (8007bd0 <_strtod_l+0x2d8>)
 8007a38:	4276      	negs	r6, r6
 8007a3a:	e7e4      	b.n	8007a06 <_strtod_l+0x10e>
 8007a3c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a3e:	1c5a      	adds	r2, r3, #1
 8007a40:	9221      	str	r2, [sp, #132]	; 0x84
 8007a42:	785b      	ldrb	r3, [r3, #1]
 8007a44:	2b30      	cmp	r3, #48	; 0x30
 8007a46:	d0f9      	beq.n	8007a3c <_strtod_l+0x144>
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d09c      	beq.n	8007986 <_strtod_l+0x8e>
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	930a      	str	r3, [sp, #40]	; 0x28
 8007a50:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a52:	220a      	movs	r2, #10
 8007a54:	9311      	str	r3, [sp, #68]	; 0x44
 8007a56:	2300      	movs	r3, #0
 8007a58:	930e      	str	r3, [sp, #56]	; 0x38
 8007a5a:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a5c:	9309      	str	r3, [sp, #36]	; 0x24
 8007a5e:	9821      	ldr	r0, [sp, #132]	; 0x84
 8007a60:	7805      	ldrb	r5, [r0, #0]
 8007a62:	002b      	movs	r3, r5
 8007a64:	3b30      	subs	r3, #48	; 0x30
 8007a66:	b2d9      	uxtb	r1, r3
 8007a68:	2909      	cmp	r1, #9
 8007a6a:	d927      	bls.n	8007abc <_strtod_l+0x1c4>
 8007a6c:	0022      	movs	r2, r4
 8007a6e:	9907      	ldr	r1, [sp, #28]
 8007a70:	f003 fbb8 	bl	800b1e4 <strncmp>
 8007a74:	2800      	cmp	r0, #0
 8007a76:	d033      	beq.n	8007ae0 <_strtod_l+0x1e8>
 8007a78:	2000      	movs	r0, #0
 8007a7a:	002b      	movs	r3, r5
 8007a7c:	4684      	mov	ip, r0
 8007a7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a80:	900c      	str	r0, [sp, #48]	; 0x30
 8007a82:	9206      	str	r2, [sp, #24]
 8007a84:	2220      	movs	r2, #32
 8007a86:	0019      	movs	r1, r3
 8007a88:	4391      	bics	r1, r2
 8007a8a:	000a      	movs	r2, r1
 8007a8c:	2100      	movs	r1, #0
 8007a8e:	9107      	str	r1, [sp, #28]
 8007a90:	2a45      	cmp	r2, #69	; 0x45
 8007a92:	d000      	beq.n	8007a96 <_strtod_l+0x19e>
 8007a94:	e0c5      	b.n	8007c22 <_strtod_l+0x32a>
 8007a96:	9b06      	ldr	r3, [sp, #24]
 8007a98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a9a:	4303      	orrs	r3, r0
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	428b      	cmp	r3, r1
 8007aa0:	d090      	beq.n	80079c4 <_strtod_l+0xcc>
 8007aa2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007aa4:	9308      	str	r3, [sp, #32]
 8007aa6:	3301      	adds	r3, #1
 8007aa8:	9321      	str	r3, [sp, #132]	; 0x84
 8007aaa:	9b08      	ldr	r3, [sp, #32]
 8007aac:	785b      	ldrb	r3, [r3, #1]
 8007aae:	2b2b      	cmp	r3, #43	; 0x2b
 8007ab0:	d075      	beq.n	8007b9e <_strtod_l+0x2a6>
 8007ab2:	000c      	movs	r4, r1
 8007ab4:	2b2d      	cmp	r3, #45	; 0x2d
 8007ab6:	d178      	bne.n	8007baa <_strtod_l+0x2b2>
 8007ab8:	2401      	movs	r4, #1
 8007aba:	e071      	b.n	8007ba0 <_strtod_l+0x2a8>
 8007abc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007abe:	2908      	cmp	r1, #8
 8007ac0:	dc09      	bgt.n	8007ad6 <_strtod_l+0x1de>
 8007ac2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007ac4:	4351      	muls	r1, r2
 8007ac6:	185b      	adds	r3, r3, r1
 8007ac8:	930b      	str	r3, [sp, #44]	; 0x2c
 8007aca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007acc:	3001      	adds	r0, #1
 8007ace:	3301      	adds	r3, #1
 8007ad0:	9309      	str	r3, [sp, #36]	; 0x24
 8007ad2:	9021      	str	r0, [sp, #132]	; 0x84
 8007ad4:	e7c3      	b.n	8007a5e <_strtod_l+0x166>
 8007ad6:	990e      	ldr	r1, [sp, #56]	; 0x38
 8007ad8:	4351      	muls	r1, r2
 8007ada:	185b      	adds	r3, r3, r1
 8007adc:	930e      	str	r3, [sp, #56]	; 0x38
 8007ade:	e7f4      	b.n	8007aca <_strtod_l+0x1d2>
 8007ae0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ae2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ae4:	191c      	adds	r4, r3, r4
 8007ae6:	9421      	str	r4, [sp, #132]	; 0x84
 8007ae8:	7823      	ldrb	r3, [r4, #0]
 8007aea:	2a00      	cmp	r2, #0
 8007aec:	d039      	beq.n	8007b62 <_strtod_l+0x26a>
 8007aee:	900c      	str	r0, [sp, #48]	; 0x30
 8007af0:	9206      	str	r2, [sp, #24]
 8007af2:	001a      	movs	r2, r3
 8007af4:	3a30      	subs	r2, #48	; 0x30
 8007af6:	2a09      	cmp	r2, #9
 8007af8:	d912      	bls.n	8007b20 <_strtod_l+0x228>
 8007afa:	2201      	movs	r2, #1
 8007afc:	4694      	mov	ip, r2
 8007afe:	e7c1      	b.n	8007a84 <_strtod_l+0x18c>
 8007b00:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b02:	3001      	adds	r0, #1
 8007b04:	1c5a      	adds	r2, r3, #1
 8007b06:	9221      	str	r2, [sp, #132]	; 0x84
 8007b08:	785b      	ldrb	r3, [r3, #1]
 8007b0a:	2b30      	cmp	r3, #48	; 0x30
 8007b0c:	d0f8      	beq.n	8007b00 <_strtod_l+0x208>
 8007b0e:	001a      	movs	r2, r3
 8007b10:	3a31      	subs	r2, #49	; 0x31
 8007b12:	2a08      	cmp	r2, #8
 8007b14:	d83e      	bhi.n	8007b94 <_strtod_l+0x29c>
 8007b16:	900c      	str	r0, [sp, #48]	; 0x30
 8007b18:	2000      	movs	r0, #0
 8007b1a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007b1c:	9006      	str	r0, [sp, #24]
 8007b1e:	9211      	str	r2, [sp, #68]	; 0x44
 8007b20:	001a      	movs	r2, r3
 8007b22:	9906      	ldr	r1, [sp, #24]
 8007b24:	1c44      	adds	r4, r0, #1
 8007b26:	3a30      	subs	r2, #48	; 0x30
 8007b28:	2b30      	cmp	r3, #48	; 0x30
 8007b2a:	d013      	beq.n	8007b54 <_strtod_l+0x25c>
 8007b2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b2e:	191b      	adds	r3, r3, r4
 8007b30:	930c      	str	r3, [sp, #48]	; 0x30
 8007b32:	1844      	adds	r4, r0, r1
 8007b34:	000b      	movs	r3, r1
 8007b36:	210a      	movs	r1, #10
 8007b38:	429c      	cmp	r4, r3
 8007b3a:	d114      	bne.n	8007b66 <_strtod_l+0x26e>
 8007b3c:	9b06      	ldr	r3, [sp, #24]
 8007b3e:	1c59      	adds	r1, r3, #1
 8007b40:	1809      	adds	r1, r1, r0
 8007b42:	1818      	adds	r0, r3, r0
 8007b44:	2808      	cmp	r0, #8
 8007b46:	dc1c      	bgt.n	8007b82 <_strtod_l+0x28a>
 8007b48:	230a      	movs	r3, #10
 8007b4a:	2400      	movs	r4, #0
 8007b4c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007b4e:	4343      	muls	r3, r0
 8007b50:	18d3      	adds	r3, r2, r3
 8007b52:	930b      	str	r3, [sp, #44]	; 0x2c
 8007b54:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b56:	0020      	movs	r0, r4
 8007b58:	1c5a      	adds	r2, r3, #1
 8007b5a:	9221      	str	r2, [sp, #132]	; 0x84
 8007b5c:	785b      	ldrb	r3, [r3, #1]
 8007b5e:	9106      	str	r1, [sp, #24]
 8007b60:	e7c7      	b.n	8007af2 <_strtod_l+0x1fa>
 8007b62:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b64:	e7d1      	b.n	8007b0a <_strtod_l+0x212>
 8007b66:	2b08      	cmp	r3, #8
 8007b68:	dc04      	bgt.n	8007b74 <_strtod_l+0x27c>
 8007b6a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8007b6c:	434d      	muls	r5, r1
 8007b6e:	950b      	str	r5, [sp, #44]	; 0x2c
 8007b70:	3301      	adds	r3, #1
 8007b72:	e7e1      	b.n	8007b38 <_strtod_l+0x240>
 8007b74:	1c5d      	adds	r5, r3, #1
 8007b76:	2d10      	cmp	r5, #16
 8007b78:	dcfa      	bgt.n	8007b70 <_strtod_l+0x278>
 8007b7a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8007b7c:	434d      	muls	r5, r1
 8007b7e:	950e      	str	r5, [sp, #56]	; 0x38
 8007b80:	e7f6      	b.n	8007b70 <_strtod_l+0x278>
 8007b82:	2400      	movs	r4, #0
 8007b84:	2910      	cmp	r1, #16
 8007b86:	dce5      	bgt.n	8007b54 <_strtod_l+0x25c>
 8007b88:	230a      	movs	r3, #10
 8007b8a:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007b8c:	4343      	muls	r3, r0
 8007b8e:	18d3      	adds	r3, r2, r3
 8007b90:	930e      	str	r3, [sp, #56]	; 0x38
 8007b92:	e7df      	b.n	8007b54 <_strtod_l+0x25c>
 8007b94:	2200      	movs	r2, #0
 8007b96:	920c      	str	r2, [sp, #48]	; 0x30
 8007b98:	9206      	str	r2, [sp, #24]
 8007b9a:	3201      	adds	r2, #1
 8007b9c:	e7ae      	b.n	8007afc <_strtod_l+0x204>
 8007b9e:	2400      	movs	r4, #0
 8007ba0:	9b08      	ldr	r3, [sp, #32]
 8007ba2:	3302      	adds	r3, #2
 8007ba4:	9321      	str	r3, [sp, #132]	; 0x84
 8007ba6:	9b08      	ldr	r3, [sp, #32]
 8007ba8:	789b      	ldrb	r3, [r3, #2]
 8007baa:	001a      	movs	r2, r3
 8007bac:	3a30      	subs	r2, #48	; 0x30
 8007bae:	2a09      	cmp	r2, #9
 8007bb0:	d914      	bls.n	8007bdc <_strtod_l+0x2e4>
 8007bb2:	9a08      	ldr	r2, [sp, #32]
 8007bb4:	9221      	str	r2, [sp, #132]	; 0x84
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	e032      	b.n	8007c20 <_strtod_l+0x328>
 8007bba:	46c0      	nop			; (mov r8, r8)
 8007bbc:	0800c65c 	.word	0x0800c65c
 8007bc0:	0800c3a8 	.word	0x0800c3a8
 8007bc4:	ffefffff 	.word	0xffefffff
 8007bc8:	00000433 	.word	0x00000433
 8007bcc:	7ff00000 	.word	0x7ff00000
 8007bd0:	7fffffff 	.word	0x7fffffff
 8007bd4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007bd6:	1c5a      	adds	r2, r3, #1
 8007bd8:	9221      	str	r2, [sp, #132]	; 0x84
 8007bda:	785b      	ldrb	r3, [r3, #1]
 8007bdc:	2b30      	cmp	r3, #48	; 0x30
 8007bde:	d0f9      	beq.n	8007bd4 <_strtod_l+0x2dc>
 8007be0:	2200      	movs	r2, #0
 8007be2:	9207      	str	r2, [sp, #28]
 8007be4:	001a      	movs	r2, r3
 8007be6:	3a31      	subs	r2, #49	; 0x31
 8007be8:	2a08      	cmp	r2, #8
 8007bea:	d81a      	bhi.n	8007c22 <_strtod_l+0x32a>
 8007bec:	3b30      	subs	r3, #48	; 0x30
 8007bee:	001a      	movs	r2, r3
 8007bf0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007bf2:	9307      	str	r3, [sp, #28]
 8007bf4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007bf6:	1c59      	adds	r1, r3, #1
 8007bf8:	9121      	str	r1, [sp, #132]	; 0x84
 8007bfa:	785b      	ldrb	r3, [r3, #1]
 8007bfc:	001d      	movs	r5, r3
 8007bfe:	3d30      	subs	r5, #48	; 0x30
 8007c00:	2d09      	cmp	r5, #9
 8007c02:	d939      	bls.n	8007c78 <_strtod_l+0x380>
 8007c04:	9d07      	ldr	r5, [sp, #28]
 8007c06:	1b49      	subs	r1, r1, r5
 8007c08:	4daf      	ldr	r5, [pc, #700]	; (8007ec8 <_strtod_l+0x5d0>)
 8007c0a:	9507      	str	r5, [sp, #28]
 8007c0c:	2908      	cmp	r1, #8
 8007c0e:	dc03      	bgt.n	8007c18 <_strtod_l+0x320>
 8007c10:	9207      	str	r2, [sp, #28]
 8007c12:	42aa      	cmp	r2, r5
 8007c14:	dd00      	ble.n	8007c18 <_strtod_l+0x320>
 8007c16:	9507      	str	r5, [sp, #28]
 8007c18:	2c00      	cmp	r4, #0
 8007c1a:	d002      	beq.n	8007c22 <_strtod_l+0x32a>
 8007c1c:	9a07      	ldr	r2, [sp, #28]
 8007c1e:	4252      	negs	r2, r2
 8007c20:	9207      	str	r2, [sp, #28]
 8007c22:	9a06      	ldr	r2, [sp, #24]
 8007c24:	2a00      	cmp	r2, #0
 8007c26:	d14b      	bne.n	8007cc0 <_strtod_l+0x3c8>
 8007c28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c2a:	4310      	orrs	r0, r2
 8007c2c:	d000      	beq.n	8007c30 <_strtod_l+0x338>
 8007c2e:	e6aa      	b.n	8007986 <_strtod_l+0x8e>
 8007c30:	4662      	mov	r2, ip
 8007c32:	2a00      	cmp	r2, #0
 8007c34:	d000      	beq.n	8007c38 <_strtod_l+0x340>
 8007c36:	e6c5      	b.n	80079c4 <_strtod_l+0xcc>
 8007c38:	2b69      	cmp	r3, #105	; 0x69
 8007c3a:	d025      	beq.n	8007c88 <_strtod_l+0x390>
 8007c3c:	dc21      	bgt.n	8007c82 <_strtod_l+0x38a>
 8007c3e:	2b49      	cmp	r3, #73	; 0x49
 8007c40:	d022      	beq.n	8007c88 <_strtod_l+0x390>
 8007c42:	2b4e      	cmp	r3, #78	; 0x4e
 8007c44:	d000      	beq.n	8007c48 <_strtod_l+0x350>
 8007c46:	e6bd      	b.n	80079c4 <_strtod_l+0xcc>
 8007c48:	49a0      	ldr	r1, [pc, #640]	; (8007ecc <_strtod_l+0x5d4>)
 8007c4a:	a821      	add	r0, sp, #132	; 0x84
 8007c4c:	f002 f910 	bl	8009e70 <__match>
 8007c50:	2800      	cmp	r0, #0
 8007c52:	d100      	bne.n	8007c56 <_strtod_l+0x35e>
 8007c54:	e6b6      	b.n	80079c4 <_strtod_l+0xcc>
 8007c56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c58:	781b      	ldrb	r3, [r3, #0]
 8007c5a:	2b28      	cmp	r3, #40	; 0x28
 8007c5c:	d12a      	bne.n	8007cb4 <_strtod_l+0x3bc>
 8007c5e:	499c      	ldr	r1, [pc, #624]	; (8007ed0 <_strtod_l+0x5d8>)
 8007c60:	aa24      	add	r2, sp, #144	; 0x90
 8007c62:	a821      	add	r0, sp, #132	; 0x84
 8007c64:	f002 f918 	bl	8009e98 <__hexnan>
 8007c68:	2805      	cmp	r0, #5
 8007c6a:	d123      	bne.n	8007cb4 <_strtod_l+0x3bc>
 8007c6c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8007c6e:	4a99      	ldr	r2, [pc, #612]	; (8007ed4 <_strtod_l+0x5dc>)
 8007c70:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8007c72:	431a      	orrs	r2, r3
 8007c74:	0017      	movs	r7, r2
 8007c76:	e686      	b.n	8007986 <_strtod_l+0x8e>
 8007c78:	210a      	movs	r1, #10
 8007c7a:	434a      	muls	r2, r1
 8007c7c:	18d2      	adds	r2, r2, r3
 8007c7e:	3a30      	subs	r2, #48	; 0x30
 8007c80:	e7b8      	b.n	8007bf4 <_strtod_l+0x2fc>
 8007c82:	2b6e      	cmp	r3, #110	; 0x6e
 8007c84:	d0e0      	beq.n	8007c48 <_strtod_l+0x350>
 8007c86:	e69d      	b.n	80079c4 <_strtod_l+0xcc>
 8007c88:	4993      	ldr	r1, [pc, #588]	; (8007ed8 <_strtod_l+0x5e0>)
 8007c8a:	a821      	add	r0, sp, #132	; 0x84
 8007c8c:	f002 f8f0 	bl	8009e70 <__match>
 8007c90:	2800      	cmp	r0, #0
 8007c92:	d100      	bne.n	8007c96 <_strtod_l+0x39e>
 8007c94:	e696      	b.n	80079c4 <_strtod_l+0xcc>
 8007c96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c98:	4990      	ldr	r1, [pc, #576]	; (8007edc <_strtod_l+0x5e4>)
 8007c9a:	3b01      	subs	r3, #1
 8007c9c:	a821      	add	r0, sp, #132	; 0x84
 8007c9e:	9321      	str	r3, [sp, #132]	; 0x84
 8007ca0:	f002 f8e6 	bl	8009e70 <__match>
 8007ca4:	2800      	cmp	r0, #0
 8007ca6:	d102      	bne.n	8007cae <_strtod_l+0x3b6>
 8007ca8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007caa:	3301      	adds	r3, #1
 8007cac:	9321      	str	r3, [sp, #132]	; 0x84
 8007cae:	2600      	movs	r6, #0
 8007cb0:	4f88      	ldr	r7, [pc, #544]	; (8007ed4 <_strtod_l+0x5dc>)
 8007cb2:	e668      	b.n	8007986 <_strtod_l+0x8e>
 8007cb4:	488a      	ldr	r0, [pc, #552]	; (8007ee0 <_strtod_l+0x5e8>)
 8007cb6:	f003 fa43 	bl	800b140 <nan>
 8007cba:	0006      	movs	r6, r0
 8007cbc:	000f      	movs	r7, r1
 8007cbe:	e662      	b.n	8007986 <_strtod_l+0x8e>
 8007cc0:	9b07      	ldr	r3, [sp, #28]
 8007cc2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007cc4:	1a9b      	subs	r3, r3, r2
 8007cc6:	930a      	str	r3, [sp, #40]	; 0x28
 8007cc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d101      	bne.n	8007cd2 <_strtod_l+0x3da>
 8007cce:	9b06      	ldr	r3, [sp, #24]
 8007cd0:	9309      	str	r3, [sp, #36]	; 0x24
 8007cd2:	9c06      	ldr	r4, [sp, #24]
 8007cd4:	2c10      	cmp	r4, #16
 8007cd6:	dd00      	ble.n	8007cda <_strtod_l+0x3e2>
 8007cd8:	2410      	movs	r4, #16
 8007cda:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007cdc:	f7fb f980 	bl	8002fe0 <__aeabi_ui2d>
 8007ce0:	9b06      	ldr	r3, [sp, #24]
 8007ce2:	0006      	movs	r6, r0
 8007ce4:	000f      	movs	r7, r1
 8007ce6:	2b09      	cmp	r3, #9
 8007ce8:	dd15      	ble.n	8007d16 <_strtod_l+0x41e>
 8007cea:	0022      	movs	r2, r4
 8007cec:	4b7d      	ldr	r3, [pc, #500]	; (8007ee4 <_strtod_l+0x5ec>)
 8007cee:	3a09      	subs	r2, #9
 8007cf0:	00d2      	lsls	r2, r2, #3
 8007cf2:	189b      	adds	r3, r3, r2
 8007cf4:	681a      	ldr	r2, [r3, #0]
 8007cf6:	685b      	ldr	r3, [r3, #4]
 8007cf8:	f7fa faf0 	bl	80022dc <__aeabi_dmul>
 8007cfc:	0006      	movs	r6, r0
 8007cfe:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007d00:	000f      	movs	r7, r1
 8007d02:	f7fb f96d 	bl	8002fe0 <__aeabi_ui2d>
 8007d06:	0002      	movs	r2, r0
 8007d08:	000b      	movs	r3, r1
 8007d0a:	0030      	movs	r0, r6
 8007d0c:	0039      	movs	r1, r7
 8007d0e:	f7f9 fb75 	bl	80013fc <__aeabi_dadd>
 8007d12:	0006      	movs	r6, r0
 8007d14:	000f      	movs	r7, r1
 8007d16:	9b06      	ldr	r3, [sp, #24]
 8007d18:	2b0f      	cmp	r3, #15
 8007d1a:	dc39      	bgt.n	8007d90 <_strtod_l+0x498>
 8007d1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d100      	bne.n	8007d24 <_strtod_l+0x42c>
 8007d22:	e630      	b.n	8007986 <_strtod_l+0x8e>
 8007d24:	dd24      	ble.n	8007d70 <_strtod_l+0x478>
 8007d26:	2b16      	cmp	r3, #22
 8007d28:	dc09      	bgt.n	8007d3e <_strtod_l+0x446>
 8007d2a:	00dd      	lsls	r5, r3, #3
 8007d2c:	0032      	movs	r2, r6
 8007d2e:	003b      	movs	r3, r7
 8007d30:	4c6c      	ldr	r4, [pc, #432]	; (8007ee4 <_strtod_l+0x5ec>)
 8007d32:	1964      	adds	r4, r4, r5
 8007d34:	6820      	ldr	r0, [r4, #0]
 8007d36:	6861      	ldr	r1, [r4, #4]
 8007d38:	f7fa fad0 	bl	80022dc <__aeabi_dmul>
 8007d3c:	e7bd      	b.n	8007cba <_strtod_l+0x3c2>
 8007d3e:	2325      	movs	r3, #37	; 0x25
 8007d40:	9a06      	ldr	r2, [sp, #24]
 8007d42:	1a9b      	subs	r3, r3, r2
 8007d44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d46:	4293      	cmp	r3, r2
 8007d48:	db22      	blt.n	8007d90 <_strtod_l+0x498>
 8007d4a:	240f      	movs	r4, #15
 8007d4c:	9b06      	ldr	r3, [sp, #24]
 8007d4e:	4d65      	ldr	r5, [pc, #404]	; (8007ee4 <_strtod_l+0x5ec>)
 8007d50:	1ae4      	subs	r4, r4, r3
 8007d52:	00e1      	lsls	r1, r4, #3
 8007d54:	1869      	adds	r1, r5, r1
 8007d56:	0032      	movs	r2, r6
 8007d58:	6808      	ldr	r0, [r1, #0]
 8007d5a:	6849      	ldr	r1, [r1, #4]
 8007d5c:	003b      	movs	r3, r7
 8007d5e:	f7fa fabd 	bl	80022dc <__aeabi_dmul>
 8007d62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d64:	1b1c      	subs	r4, r3, r4
 8007d66:	00e4      	lsls	r4, r4, #3
 8007d68:	192c      	adds	r4, r5, r4
 8007d6a:	6822      	ldr	r2, [r4, #0]
 8007d6c:	6863      	ldr	r3, [r4, #4]
 8007d6e:	e7e3      	b.n	8007d38 <_strtod_l+0x440>
 8007d70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d72:	3316      	adds	r3, #22
 8007d74:	db0c      	blt.n	8007d90 <_strtod_l+0x498>
 8007d76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d78:	9a07      	ldr	r2, [sp, #28]
 8007d7a:	0030      	movs	r0, r6
 8007d7c:	1a9a      	subs	r2, r3, r2
 8007d7e:	4b59      	ldr	r3, [pc, #356]	; (8007ee4 <_strtod_l+0x5ec>)
 8007d80:	00d2      	lsls	r2, r2, #3
 8007d82:	189b      	adds	r3, r3, r2
 8007d84:	0039      	movs	r1, r7
 8007d86:	681a      	ldr	r2, [r3, #0]
 8007d88:	685b      	ldr	r3, [r3, #4]
 8007d8a:	f7f9 fea1 	bl	8001ad0 <__aeabi_ddiv>
 8007d8e:	e794      	b.n	8007cba <_strtod_l+0x3c2>
 8007d90:	9b06      	ldr	r3, [sp, #24]
 8007d92:	1b1c      	subs	r4, r3, r4
 8007d94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d96:	18e4      	adds	r4, r4, r3
 8007d98:	2c00      	cmp	r4, #0
 8007d9a:	dd70      	ble.n	8007e7e <_strtod_l+0x586>
 8007d9c:	230f      	movs	r3, #15
 8007d9e:	0021      	movs	r1, r4
 8007da0:	4019      	ands	r1, r3
 8007da2:	421c      	tst	r4, r3
 8007da4:	d00a      	beq.n	8007dbc <_strtod_l+0x4c4>
 8007da6:	00cb      	lsls	r3, r1, #3
 8007da8:	494e      	ldr	r1, [pc, #312]	; (8007ee4 <_strtod_l+0x5ec>)
 8007daa:	0032      	movs	r2, r6
 8007dac:	18c9      	adds	r1, r1, r3
 8007dae:	6808      	ldr	r0, [r1, #0]
 8007db0:	6849      	ldr	r1, [r1, #4]
 8007db2:	003b      	movs	r3, r7
 8007db4:	f7fa fa92 	bl	80022dc <__aeabi_dmul>
 8007db8:	0006      	movs	r6, r0
 8007dba:	000f      	movs	r7, r1
 8007dbc:	230f      	movs	r3, #15
 8007dbe:	439c      	bics	r4, r3
 8007dc0:	d048      	beq.n	8007e54 <_strtod_l+0x55c>
 8007dc2:	3326      	adds	r3, #38	; 0x26
 8007dc4:	33ff      	adds	r3, #255	; 0xff
 8007dc6:	429c      	cmp	r4, r3
 8007dc8:	dd22      	ble.n	8007e10 <_strtod_l+0x518>
 8007dca:	2300      	movs	r3, #0
 8007dcc:	9306      	str	r3, [sp, #24]
 8007dce:	9307      	str	r3, [sp, #28]
 8007dd0:	930b      	str	r3, [sp, #44]	; 0x2c
 8007dd2:	9309      	str	r3, [sp, #36]	; 0x24
 8007dd4:	2322      	movs	r3, #34	; 0x22
 8007dd6:	2600      	movs	r6, #0
 8007dd8:	9a05      	ldr	r2, [sp, #20]
 8007dda:	4f3e      	ldr	r7, [pc, #248]	; (8007ed4 <_strtod_l+0x5dc>)
 8007ddc:	6013      	str	r3, [r2, #0]
 8007dde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007de0:	42b3      	cmp	r3, r6
 8007de2:	d100      	bne.n	8007de6 <_strtod_l+0x4ee>
 8007de4:	e5cf      	b.n	8007986 <_strtod_l+0x8e>
 8007de6:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007de8:	9805      	ldr	r0, [sp, #20]
 8007dea:	f002 f9e1 	bl	800a1b0 <_Bfree>
 8007dee:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007df0:	9805      	ldr	r0, [sp, #20]
 8007df2:	f002 f9dd 	bl	800a1b0 <_Bfree>
 8007df6:	9907      	ldr	r1, [sp, #28]
 8007df8:	9805      	ldr	r0, [sp, #20]
 8007dfa:	f002 f9d9 	bl	800a1b0 <_Bfree>
 8007dfe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007e00:	9805      	ldr	r0, [sp, #20]
 8007e02:	f002 f9d5 	bl	800a1b0 <_Bfree>
 8007e06:	9906      	ldr	r1, [sp, #24]
 8007e08:	9805      	ldr	r0, [sp, #20]
 8007e0a:	f002 f9d1 	bl	800a1b0 <_Bfree>
 8007e0e:	e5ba      	b.n	8007986 <_strtod_l+0x8e>
 8007e10:	2300      	movs	r3, #0
 8007e12:	0030      	movs	r0, r6
 8007e14:	0039      	movs	r1, r7
 8007e16:	001d      	movs	r5, r3
 8007e18:	1124      	asrs	r4, r4, #4
 8007e1a:	2c01      	cmp	r4, #1
 8007e1c:	dc1d      	bgt.n	8007e5a <_strtod_l+0x562>
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d001      	beq.n	8007e26 <_strtod_l+0x52e>
 8007e22:	0006      	movs	r6, r0
 8007e24:	000f      	movs	r7, r1
 8007e26:	4b30      	ldr	r3, [pc, #192]	; (8007ee8 <_strtod_l+0x5f0>)
 8007e28:	00ed      	lsls	r5, r5, #3
 8007e2a:	18ff      	adds	r7, r7, r3
 8007e2c:	4b2f      	ldr	r3, [pc, #188]	; (8007eec <_strtod_l+0x5f4>)
 8007e2e:	0032      	movs	r2, r6
 8007e30:	195d      	adds	r5, r3, r5
 8007e32:	6828      	ldr	r0, [r5, #0]
 8007e34:	6869      	ldr	r1, [r5, #4]
 8007e36:	003b      	movs	r3, r7
 8007e38:	f7fa fa50 	bl	80022dc <__aeabi_dmul>
 8007e3c:	4b25      	ldr	r3, [pc, #148]	; (8007ed4 <_strtod_l+0x5dc>)
 8007e3e:	4a2c      	ldr	r2, [pc, #176]	; (8007ef0 <_strtod_l+0x5f8>)
 8007e40:	0006      	movs	r6, r0
 8007e42:	400b      	ands	r3, r1
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d8c0      	bhi.n	8007dca <_strtod_l+0x4d2>
 8007e48:	4a2a      	ldr	r2, [pc, #168]	; (8007ef4 <_strtod_l+0x5fc>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d913      	bls.n	8007e76 <_strtod_l+0x57e>
 8007e4e:	2601      	movs	r6, #1
 8007e50:	4f29      	ldr	r7, [pc, #164]	; (8007ef8 <_strtod_l+0x600>)
 8007e52:	4276      	negs	r6, r6
 8007e54:	2300      	movs	r3, #0
 8007e56:	9308      	str	r3, [sp, #32]
 8007e58:	e087      	b.n	8007f6a <_strtod_l+0x672>
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	4214      	tst	r4, r2
 8007e5e:	d007      	beq.n	8007e70 <_strtod_l+0x578>
 8007e60:	4a22      	ldr	r2, [pc, #136]	; (8007eec <_strtod_l+0x5f4>)
 8007e62:	00eb      	lsls	r3, r5, #3
 8007e64:	189b      	adds	r3, r3, r2
 8007e66:	681a      	ldr	r2, [r3, #0]
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	f7fa fa37 	bl	80022dc <__aeabi_dmul>
 8007e6e:	2301      	movs	r3, #1
 8007e70:	3501      	adds	r5, #1
 8007e72:	1064      	asrs	r4, r4, #1
 8007e74:	e7d1      	b.n	8007e1a <_strtod_l+0x522>
 8007e76:	23d4      	movs	r3, #212	; 0xd4
 8007e78:	049b      	lsls	r3, r3, #18
 8007e7a:	18cf      	adds	r7, r1, r3
 8007e7c:	e7ea      	b.n	8007e54 <_strtod_l+0x55c>
 8007e7e:	2c00      	cmp	r4, #0
 8007e80:	d0e8      	beq.n	8007e54 <_strtod_l+0x55c>
 8007e82:	4264      	negs	r4, r4
 8007e84:	220f      	movs	r2, #15
 8007e86:	0023      	movs	r3, r4
 8007e88:	4013      	ands	r3, r2
 8007e8a:	4214      	tst	r4, r2
 8007e8c:	d00a      	beq.n	8007ea4 <_strtod_l+0x5ac>
 8007e8e:	00da      	lsls	r2, r3, #3
 8007e90:	4b14      	ldr	r3, [pc, #80]	; (8007ee4 <_strtod_l+0x5ec>)
 8007e92:	0030      	movs	r0, r6
 8007e94:	189b      	adds	r3, r3, r2
 8007e96:	0039      	movs	r1, r7
 8007e98:	681a      	ldr	r2, [r3, #0]
 8007e9a:	685b      	ldr	r3, [r3, #4]
 8007e9c:	f7f9 fe18 	bl	8001ad0 <__aeabi_ddiv>
 8007ea0:	0006      	movs	r6, r0
 8007ea2:	000f      	movs	r7, r1
 8007ea4:	1124      	asrs	r4, r4, #4
 8007ea6:	d0d5      	beq.n	8007e54 <_strtod_l+0x55c>
 8007ea8:	2c1f      	cmp	r4, #31
 8007eaa:	dd27      	ble.n	8007efc <_strtod_l+0x604>
 8007eac:	2300      	movs	r3, #0
 8007eae:	9306      	str	r3, [sp, #24]
 8007eb0:	9307      	str	r3, [sp, #28]
 8007eb2:	930b      	str	r3, [sp, #44]	; 0x2c
 8007eb4:	9309      	str	r3, [sp, #36]	; 0x24
 8007eb6:	2322      	movs	r3, #34	; 0x22
 8007eb8:	9a05      	ldr	r2, [sp, #20]
 8007eba:	2600      	movs	r6, #0
 8007ebc:	6013      	str	r3, [r2, #0]
 8007ebe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ec0:	2700      	movs	r7, #0
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d18f      	bne.n	8007de6 <_strtod_l+0x4ee>
 8007ec6:	e55e      	b.n	8007986 <_strtod_l+0x8e>
 8007ec8:	00004e1f 	.word	0x00004e1f
 8007ecc:	0800c379 	.word	0x0800c379
 8007ed0:	0800c3bc 	.word	0x0800c3bc
 8007ed4:	7ff00000 	.word	0x7ff00000
 8007ed8:	0800c371 	.word	0x0800c371
 8007edc:	0800c4fc 	.word	0x0800c4fc
 8007ee0:	0800c818 	.word	0x0800c818
 8007ee4:	0800c6f8 	.word	0x0800c6f8
 8007ee8:	fcb00000 	.word	0xfcb00000
 8007eec:	0800c6d0 	.word	0x0800c6d0
 8007ef0:	7ca00000 	.word	0x7ca00000
 8007ef4:	7c900000 	.word	0x7c900000
 8007ef8:	7fefffff 	.word	0x7fefffff
 8007efc:	2310      	movs	r3, #16
 8007efe:	0022      	movs	r2, r4
 8007f00:	401a      	ands	r2, r3
 8007f02:	9208      	str	r2, [sp, #32]
 8007f04:	421c      	tst	r4, r3
 8007f06:	d001      	beq.n	8007f0c <_strtod_l+0x614>
 8007f08:	335a      	adds	r3, #90	; 0x5a
 8007f0a:	9308      	str	r3, [sp, #32]
 8007f0c:	0030      	movs	r0, r6
 8007f0e:	0039      	movs	r1, r7
 8007f10:	2300      	movs	r3, #0
 8007f12:	4dca      	ldr	r5, [pc, #808]	; (800823c <_strtod_l+0x944>)
 8007f14:	2201      	movs	r2, #1
 8007f16:	4214      	tst	r4, r2
 8007f18:	d004      	beq.n	8007f24 <_strtod_l+0x62c>
 8007f1a:	682a      	ldr	r2, [r5, #0]
 8007f1c:	686b      	ldr	r3, [r5, #4]
 8007f1e:	f7fa f9dd 	bl	80022dc <__aeabi_dmul>
 8007f22:	2301      	movs	r3, #1
 8007f24:	1064      	asrs	r4, r4, #1
 8007f26:	3508      	adds	r5, #8
 8007f28:	2c00      	cmp	r4, #0
 8007f2a:	d1f3      	bne.n	8007f14 <_strtod_l+0x61c>
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d001      	beq.n	8007f34 <_strtod_l+0x63c>
 8007f30:	0006      	movs	r6, r0
 8007f32:	000f      	movs	r7, r1
 8007f34:	9b08      	ldr	r3, [sp, #32]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d00f      	beq.n	8007f5a <_strtod_l+0x662>
 8007f3a:	236b      	movs	r3, #107	; 0x6b
 8007f3c:	0079      	lsls	r1, r7, #1
 8007f3e:	0d49      	lsrs	r1, r1, #21
 8007f40:	003a      	movs	r2, r7
 8007f42:	1a5b      	subs	r3, r3, r1
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	dd08      	ble.n	8007f5a <_strtod_l+0x662>
 8007f48:	2b1f      	cmp	r3, #31
 8007f4a:	dc00      	bgt.n	8007f4e <_strtod_l+0x656>
 8007f4c:	e126      	b.n	800819c <_strtod_l+0x8a4>
 8007f4e:	2600      	movs	r6, #0
 8007f50:	2b34      	cmp	r3, #52	; 0x34
 8007f52:	dc00      	bgt.n	8007f56 <_strtod_l+0x65e>
 8007f54:	e11b      	b.n	800818e <_strtod_l+0x896>
 8007f56:	27dc      	movs	r7, #220	; 0xdc
 8007f58:	04bf      	lsls	r7, r7, #18
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	0030      	movs	r0, r6
 8007f60:	0039      	movs	r1, r7
 8007f62:	f7f8 fa71 	bl	8000448 <__aeabi_dcmpeq>
 8007f66:	2800      	cmp	r0, #0
 8007f68:	d1a0      	bne.n	8007eac <_strtod_l+0x5b4>
 8007f6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f6e:	9300      	str	r3, [sp, #0]
 8007f70:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007f72:	9b06      	ldr	r3, [sp, #24]
 8007f74:	9805      	ldr	r0, [sp, #20]
 8007f76:	f002 f983 	bl	800a280 <__s2b>
 8007f7a:	900b      	str	r0, [sp, #44]	; 0x2c
 8007f7c:	2800      	cmp	r0, #0
 8007f7e:	d100      	bne.n	8007f82 <_strtod_l+0x68a>
 8007f80:	e723      	b.n	8007dca <_strtod_l+0x4d2>
 8007f82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f84:	9907      	ldr	r1, [sp, #28]
 8007f86:	17da      	asrs	r2, r3, #31
 8007f88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f8a:	1a5b      	subs	r3, r3, r1
 8007f8c:	401a      	ands	r2, r3
 8007f8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f90:	9215      	str	r2, [sp, #84]	; 0x54
 8007f92:	43db      	mvns	r3, r3
 8007f94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f96:	17db      	asrs	r3, r3, #31
 8007f98:	401a      	ands	r2, r3
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	921c      	str	r2, [sp, #112]	; 0x70
 8007f9e:	9306      	str	r3, [sp, #24]
 8007fa0:	9307      	str	r3, [sp, #28]
 8007fa2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007fa4:	9805      	ldr	r0, [sp, #20]
 8007fa6:	6859      	ldr	r1, [r3, #4]
 8007fa8:	f002 f8be 	bl	800a128 <_Balloc>
 8007fac:	9009      	str	r0, [sp, #36]	; 0x24
 8007fae:	2800      	cmp	r0, #0
 8007fb0:	d100      	bne.n	8007fb4 <_strtod_l+0x6bc>
 8007fb2:	e70f      	b.n	8007dd4 <_strtod_l+0x4dc>
 8007fb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007fb6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007fb8:	691b      	ldr	r3, [r3, #16]
 8007fba:	310c      	adds	r1, #12
 8007fbc:	1c9a      	adds	r2, r3, #2
 8007fbe:	0092      	lsls	r2, r2, #2
 8007fc0:	300c      	adds	r0, #12
 8007fc2:	930c      	str	r3, [sp, #48]	; 0x30
 8007fc4:	f7fe fc68 	bl	8006898 <memcpy>
 8007fc8:	ab24      	add	r3, sp, #144	; 0x90
 8007fca:	9301      	str	r3, [sp, #4]
 8007fcc:	ab23      	add	r3, sp, #140	; 0x8c
 8007fce:	9300      	str	r3, [sp, #0]
 8007fd0:	0032      	movs	r2, r6
 8007fd2:	003b      	movs	r3, r7
 8007fd4:	9805      	ldr	r0, [sp, #20]
 8007fd6:	960e      	str	r6, [sp, #56]	; 0x38
 8007fd8:	970f      	str	r7, [sp, #60]	; 0x3c
 8007fda:	f002 fc9f 	bl	800a91c <__d2b>
 8007fde:	9022      	str	r0, [sp, #136]	; 0x88
 8007fe0:	2800      	cmp	r0, #0
 8007fe2:	d100      	bne.n	8007fe6 <_strtod_l+0x6ee>
 8007fe4:	e6f6      	b.n	8007dd4 <_strtod_l+0x4dc>
 8007fe6:	2101      	movs	r1, #1
 8007fe8:	9805      	ldr	r0, [sp, #20]
 8007fea:	f002 f9dd 	bl	800a3a8 <__i2b>
 8007fee:	9007      	str	r0, [sp, #28]
 8007ff0:	2800      	cmp	r0, #0
 8007ff2:	d100      	bne.n	8007ff6 <_strtod_l+0x6fe>
 8007ff4:	e6ee      	b.n	8007dd4 <_strtod_l+0x4dc>
 8007ff6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	da00      	bge.n	8007ffe <_strtod_l+0x706>
 8007ffc:	e0d3      	b.n	80081a6 <_strtod_l+0x8ae>
 8007ffe:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008000:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8008002:	189d      	adds	r5, r3, r2
 8008004:	9908      	ldr	r1, [sp, #32]
 8008006:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008008:	1a5b      	subs	r3, r3, r1
 800800a:	2136      	movs	r1, #54	; 0x36
 800800c:	189b      	adds	r3, r3, r2
 800800e:	1a8a      	subs	r2, r1, r2
 8008010:	498b      	ldr	r1, [pc, #556]	; (8008240 <_strtod_l+0x948>)
 8008012:	3b01      	subs	r3, #1
 8008014:	2001      	movs	r0, #1
 8008016:	428b      	cmp	r3, r1
 8008018:	db00      	blt.n	800801c <_strtod_l+0x724>
 800801a:	e0cf      	b.n	80081bc <_strtod_l+0x8c4>
 800801c:	1ac9      	subs	r1, r1, r3
 800801e:	1a52      	subs	r2, r2, r1
 8008020:	291f      	cmp	r1, #31
 8008022:	dd00      	ble.n	8008026 <_strtod_l+0x72e>
 8008024:	e0c3      	b.n	80081ae <_strtod_l+0x8b6>
 8008026:	4088      	lsls	r0, r1
 8008028:	2300      	movs	r3, #0
 800802a:	9014      	str	r0, [sp, #80]	; 0x50
 800802c:	9312      	str	r3, [sp, #72]	; 0x48
 800802e:	18ab      	adds	r3, r5, r2
 8008030:	930c      	str	r3, [sp, #48]	; 0x30
 8008032:	18a4      	adds	r4, r4, r2
 8008034:	9b08      	ldr	r3, [sp, #32]
 8008036:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008038:	191c      	adds	r4, r3, r4
 800803a:	002b      	movs	r3, r5
 800803c:	4295      	cmp	r5, r2
 800803e:	dd00      	ble.n	8008042 <_strtod_l+0x74a>
 8008040:	0013      	movs	r3, r2
 8008042:	42a3      	cmp	r3, r4
 8008044:	dd00      	ble.n	8008048 <_strtod_l+0x750>
 8008046:	0023      	movs	r3, r4
 8008048:	2b00      	cmp	r3, #0
 800804a:	dd04      	ble.n	8008056 <_strtod_l+0x75e>
 800804c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800804e:	1ae4      	subs	r4, r4, r3
 8008050:	1ad2      	subs	r2, r2, r3
 8008052:	920c      	str	r2, [sp, #48]	; 0x30
 8008054:	1aed      	subs	r5, r5, r3
 8008056:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008058:	2b00      	cmp	r3, #0
 800805a:	dd17      	ble.n	800808c <_strtod_l+0x794>
 800805c:	001a      	movs	r2, r3
 800805e:	9907      	ldr	r1, [sp, #28]
 8008060:	9805      	ldr	r0, [sp, #20]
 8008062:	f002 fa67 	bl	800a534 <__pow5mult>
 8008066:	9007      	str	r0, [sp, #28]
 8008068:	2800      	cmp	r0, #0
 800806a:	d100      	bne.n	800806e <_strtod_l+0x776>
 800806c:	e6b2      	b.n	8007dd4 <_strtod_l+0x4dc>
 800806e:	0001      	movs	r1, r0
 8008070:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008072:	9805      	ldr	r0, [sp, #20]
 8008074:	f002 f9ae 	bl	800a3d4 <__multiply>
 8008078:	9011      	str	r0, [sp, #68]	; 0x44
 800807a:	2800      	cmp	r0, #0
 800807c:	d100      	bne.n	8008080 <_strtod_l+0x788>
 800807e:	e6a9      	b.n	8007dd4 <_strtod_l+0x4dc>
 8008080:	9922      	ldr	r1, [sp, #136]	; 0x88
 8008082:	9805      	ldr	r0, [sp, #20]
 8008084:	f002 f894 	bl	800a1b0 <_Bfree>
 8008088:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800808a:	9322      	str	r3, [sp, #136]	; 0x88
 800808c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800808e:	2b00      	cmp	r3, #0
 8008090:	dd00      	ble.n	8008094 <_strtod_l+0x79c>
 8008092:	e096      	b.n	80081c2 <_strtod_l+0x8ca>
 8008094:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008096:	2b00      	cmp	r3, #0
 8008098:	dd08      	ble.n	80080ac <_strtod_l+0x7b4>
 800809a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800809c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800809e:	9805      	ldr	r0, [sp, #20]
 80080a0:	f002 fa48 	bl	800a534 <__pow5mult>
 80080a4:	9009      	str	r0, [sp, #36]	; 0x24
 80080a6:	2800      	cmp	r0, #0
 80080a8:	d100      	bne.n	80080ac <_strtod_l+0x7b4>
 80080aa:	e693      	b.n	8007dd4 <_strtod_l+0x4dc>
 80080ac:	2c00      	cmp	r4, #0
 80080ae:	dd08      	ble.n	80080c2 <_strtod_l+0x7ca>
 80080b0:	0022      	movs	r2, r4
 80080b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80080b4:	9805      	ldr	r0, [sp, #20]
 80080b6:	f002 fa99 	bl	800a5ec <__lshift>
 80080ba:	9009      	str	r0, [sp, #36]	; 0x24
 80080bc:	2800      	cmp	r0, #0
 80080be:	d100      	bne.n	80080c2 <_strtod_l+0x7ca>
 80080c0:	e688      	b.n	8007dd4 <_strtod_l+0x4dc>
 80080c2:	2d00      	cmp	r5, #0
 80080c4:	dd08      	ble.n	80080d8 <_strtod_l+0x7e0>
 80080c6:	002a      	movs	r2, r5
 80080c8:	9907      	ldr	r1, [sp, #28]
 80080ca:	9805      	ldr	r0, [sp, #20]
 80080cc:	f002 fa8e 	bl	800a5ec <__lshift>
 80080d0:	9007      	str	r0, [sp, #28]
 80080d2:	2800      	cmp	r0, #0
 80080d4:	d100      	bne.n	80080d8 <_strtod_l+0x7e0>
 80080d6:	e67d      	b.n	8007dd4 <_strtod_l+0x4dc>
 80080d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080da:	9922      	ldr	r1, [sp, #136]	; 0x88
 80080dc:	9805      	ldr	r0, [sp, #20]
 80080de:	f002 fb11 	bl	800a704 <__mdiff>
 80080e2:	9006      	str	r0, [sp, #24]
 80080e4:	2800      	cmp	r0, #0
 80080e6:	d100      	bne.n	80080ea <_strtod_l+0x7f2>
 80080e8:	e674      	b.n	8007dd4 <_strtod_l+0x4dc>
 80080ea:	2200      	movs	r2, #0
 80080ec:	68c3      	ldr	r3, [r0, #12]
 80080ee:	9907      	ldr	r1, [sp, #28]
 80080f0:	60c2      	str	r2, [r0, #12]
 80080f2:	9311      	str	r3, [sp, #68]	; 0x44
 80080f4:	f002 faea 	bl	800a6cc <__mcmp>
 80080f8:	2800      	cmp	r0, #0
 80080fa:	da6c      	bge.n	80081d6 <_strtod_l+0x8de>
 80080fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80080fe:	4333      	orrs	r3, r6
 8008100:	d000      	beq.n	8008104 <_strtod_l+0x80c>
 8008102:	e097      	b.n	8008234 <_strtod_l+0x93c>
 8008104:	033b      	lsls	r3, r7, #12
 8008106:	d000      	beq.n	800810a <_strtod_l+0x812>
 8008108:	e094      	b.n	8008234 <_strtod_l+0x93c>
 800810a:	22d6      	movs	r2, #214	; 0xd6
 800810c:	4b4d      	ldr	r3, [pc, #308]	; (8008244 <_strtod_l+0x94c>)
 800810e:	04d2      	lsls	r2, r2, #19
 8008110:	403b      	ands	r3, r7
 8008112:	4293      	cmp	r3, r2
 8008114:	d800      	bhi.n	8008118 <_strtod_l+0x820>
 8008116:	e08d      	b.n	8008234 <_strtod_l+0x93c>
 8008118:	9b06      	ldr	r3, [sp, #24]
 800811a:	695b      	ldr	r3, [r3, #20]
 800811c:	930a      	str	r3, [sp, #40]	; 0x28
 800811e:	2b00      	cmp	r3, #0
 8008120:	d105      	bne.n	800812e <_strtod_l+0x836>
 8008122:	9b06      	ldr	r3, [sp, #24]
 8008124:	691b      	ldr	r3, [r3, #16]
 8008126:	930a      	str	r3, [sp, #40]	; 0x28
 8008128:	2b01      	cmp	r3, #1
 800812a:	dc00      	bgt.n	800812e <_strtod_l+0x836>
 800812c:	e082      	b.n	8008234 <_strtod_l+0x93c>
 800812e:	9906      	ldr	r1, [sp, #24]
 8008130:	2201      	movs	r2, #1
 8008132:	9805      	ldr	r0, [sp, #20]
 8008134:	f002 fa5a 	bl	800a5ec <__lshift>
 8008138:	9907      	ldr	r1, [sp, #28]
 800813a:	9006      	str	r0, [sp, #24]
 800813c:	f002 fac6 	bl	800a6cc <__mcmp>
 8008140:	2800      	cmp	r0, #0
 8008142:	dd77      	ble.n	8008234 <_strtod_l+0x93c>
 8008144:	9908      	ldr	r1, [sp, #32]
 8008146:	003b      	movs	r3, r7
 8008148:	4a3e      	ldr	r2, [pc, #248]	; (8008244 <_strtod_l+0x94c>)
 800814a:	2900      	cmp	r1, #0
 800814c:	d100      	bne.n	8008150 <_strtod_l+0x858>
 800814e:	e09e      	b.n	800828e <_strtod_l+0x996>
 8008150:	0011      	movs	r1, r2
 8008152:	20d6      	movs	r0, #214	; 0xd6
 8008154:	4039      	ands	r1, r7
 8008156:	04c0      	lsls	r0, r0, #19
 8008158:	4281      	cmp	r1, r0
 800815a:	dd00      	ble.n	800815e <_strtod_l+0x866>
 800815c:	e097      	b.n	800828e <_strtod_l+0x996>
 800815e:	23dc      	movs	r3, #220	; 0xdc
 8008160:	049b      	lsls	r3, r3, #18
 8008162:	4299      	cmp	r1, r3
 8008164:	dc00      	bgt.n	8008168 <_strtod_l+0x870>
 8008166:	e6a6      	b.n	8007eb6 <_strtod_l+0x5be>
 8008168:	4b37      	ldr	r3, [pc, #220]	; (8008248 <_strtod_l+0x950>)
 800816a:	0030      	movs	r0, r6
 800816c:	931b      	str	r3, [sp, #108]	; 0x6c
 800816e:	2300      	movs	r3, #0
 8008170:	931a      	str	r3, [sp, #104]	; 0x68
 8008172:	0039      	movs	r1, r7
 8008174:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008176:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008178:	f7fa f8b0 	bl	80022dc <__aeabi_dmul>
 800817c:	0006      	movs	r6, r0
 800817e:	000f      	movs	r7, r1
 8008180:	4308      	orrs	r0, r1
 8008182:	d000      	beq.n	8008186 <_strtod_l+0x88e>
 8008184:	e62f      	b.n	8007de6 <_strtod_l+0x4ee>
 8008186:	2322      	movs	r3, #34	; 0x22
 8008188:	9a05      	ldr	r2, [sp, #20]
 800818a:	6013      	str	r3, [r2, #0]
 800818c:	e62b      	b.n	8007de6 <_strtod_l+0x4ee>
 800818e:	2101      	movs	r1, #1
 8008190:	3b20      	subs	r3, #32
 8008192:	4249      	negs	r1, r1
 8008194:	4099      	lsls	r1, r3
 8008196:	400a      	ands	r2, r1
 8008198:	0017      	movs	r7, r2
 800819a:	e6de      	b.n	8007f5a <_strtod_l+0x662>
 800819c:	2201      	movs	r2, #1
 800819e:	4252      	negs	r2, r2
 80081a0:	409a      	lsls	r2, r3
 80081a2:	4016      	ands	r6, r2
 80081a4:	e6d9      	b.n	8007f5a <_strtod_l+0x662>
 80081a6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80081a8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80081aa:	1ad4      	subs	r4, r2, r3
 80081ac:	e72a      	b.n	8008004 <_strtod_l+0x70c>
 80081ae:	4927      	ldr	r1, [pc, #156]	; (800824c <_strtod_l+0x954>)
 80081b0:	1acb      	subs	r3, r1, r3
 80081b2:	0001      	movs	r1, r0
 80081b4:	4099      	lsls	r1, r3
 80081b6:	9112      	str	r1, [sp, #72]	; 0x48
 80081b8:	9014      	str	r0, [sp, #80]	; 0x50
 80081ba:	e738      	b.n	800802e <_strtod_l+0x736>
 80081bc:	2300      	movs	r3, #0
 80081be:	9312      	str	r3, [sp, #72]	; 0x48
 80081c0:	e7fa      	b.n	80081b8 <_strtod_l+0x8c0>
 80081c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80081c4:	9922      	ldr	r1, [sp, #136]	; 0x88
 80081c6:	9805      	ldr	r0, [sp, #20]
 80081c8:	f002 fa10 	bl	800a5ec <__lshift>
 80081cc:	9022      	str	r0, [sp, #136]	; 0x88
 80081ce:	2800      	cmp	r0, #0
 80081d0:	d000      	beq.n	80081d4 <_strtod_l+0x8dc>
 80081d2:	e75f      	b.n	8008094 <_strtod_l+0x79c>
 80081d4:	e5fe      	b.n	8007dd4 <_strtod_l+0x4dc>
 80081d6:	970c      	str	r7, [sp, #48]	; 0x30
 80081d8:	2800      	cmp	r0, #0
 80081da:	d176      	bne.n	80082ca <_strtod_l+0x9d2>
 80081dc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80081de:	033b      	lsls	r3, r7, #12
 80081e0:	0b1b      	lsrs	r3, r3, #12
 80081e2:	2a00      	cmp	r2, #0
 80081e4:	d038      	beq.n	8008258 <_strtod_l+0x960>
 80081e6:	4a1a      	ldr	r2, [pc, #104]	; (8008250 <_strtod_l+0x958>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d138      	bne.n	800825e <_strtod_l+0x966>
 80081ec:	2201      	movs	r2, #1
 80081ee:	9b08      	ldr	r3, [sp, #32]
 80081f0:	4252      	negs	r2, r2
 80081f2:	0031      	movs	r1, r6
 80081f4:	0010      	movs	r0, r2
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d00b      	beq.n	8008212 <_strtod_l+0x91a>
 80081fa:	24d4      	movs	r4, #212	; 0xd4
 80081fc:	4b11      	ldr	r3, [pc, #68]	; (8008244 <_strtod_l+0x94c>)
 80081fe:	0010      	movs	r0, r2
 8008200:	403b      	ands	r3, r7
 8008202:	04e4      	lsls	r4, r4, #19
 8008204:	42a3      	cmp	r3, r4
 8008206:	d804      	bhi.n	8008212 <_strtod_l+0x91a>
 8008208:	306c      	adds	r0, #108	; 0x6c
 800820a:	0d1b      	lsrs	r3, r3, #20
 800820c:	1ac3      	subs	r3, r0, r3
 800820e:	409a      	lsls	r2, r3
 8008210:	0010      	movs	r0, r2
 8008212:	4281      	cmp	r1, r0
 8008214:	d123      	bne.n	800825e <_strtod_l+0x966>
 8008216:	4b0f      	ldr	r3, [pc, #60]	; (8008254 <_strtod_l+0x95c>)
 8008218:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800821a:	429a      	cmp	r2, r3
 800821c:	d102      	bne.n	8008224 <_strtod_l+0x92c>
 800821e:	1c4b      	adds	r3, r1, #1
 8008220:	d100      	bne.n	8008224 <_strtod_l+0x92c>
 8008222:	e5d7      	b.n	8007dd4 <_strtod_l+0x4dc>
 8008224:	4b07      	ldr	r3, [pc, #28]	; (8008244 <_strtod_l+0x94c>)
 8008226:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008228:	2600      	movs	r6, #0
 800822a:	401a      	ands	r2, r3
 800822c:	0013      	movs	r3, r2
 800822e:	2280      	movs	r2, #128	; 0x80
 8008230:	0352      	lsls	r2, r2, #13
 8008232:	189f      	adds	r7, r3, r2
 8008234:	9b08      	ldr	r3, [sp, #32]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d196      	bne.n	8008168 <_strtod_l+0x870>
 800823a:	e5d4      	b.n	8007de6 <_strtod_l+0x4ee>
 800823c:	0800c3d0 	.word	0x0800c3d0
 8008240:	fffffc02 	.word	0xfffffc02
 8008244:	7ff00000 	.word	0x7ff00000
 8008248:	39500000 	.word	0x39500000
 800824c:	fffffbe2 	.word	0xfffffbe2
 8008250:	000fffff 	.word	0x000fffff
 8008254:	7fefffff 	.word	0x7fefffff
 8008258:	4333      	orrs	r3, r6
 800825a:	d100      	bne.n	800825e <_strtod_l+0x966>
 800825c:	e772      	b.n	8008144 <_strtod_l+0x84c>
 800825e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008260:	2b00      	cmp	r3, #0
 8008262:	d01d      	beq.n	80082a0 <_strtod_l+0x9a8>
 8008264:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008266:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008268:	4213      	tst	r3, r2
 800826a:	d0e3      	beq.n	8008234 <_strtod_l+0x93c>
 800826c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800826e:	0030      	movs	r0, r6
 8008270:	0039      	movs	r1, r7
 8008272:	9a08      	ldr	r2, [sp, #32]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d017      	beq.n	80082a8 <_strtod_l+0x9b0>
 8008278:	f7ff fb26 	bl	80078c8 <sulp>
 800827c:	0002      	movs	r2, r0
 800827e:	000b      	movs	r3, r1
 8008280:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008282:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008284:	f7f9 f8ba 	bl	80013fc <__aeabi_dadd>
 8008288:	0006      	movs	r6, r0
 800828a:	000f      	movs	r7, r1
 800828c:	e7d2      	b.n	8008234 <_strtod_l+0x93c>
 800828e:	2601      	movs	r6, #1
 8008290:	4013      	ands	r3, r2
 8008292:	4a9b      	ldr	r2, [pc, #620]	; (8008500 <_strtod_l+0xc08>)
 8008294:	4276      	negs	r6, r6
 8008296:	189b      	adds	r3, r3, r2
 8008298:	4a9a      	ldr	r2, [pc, #616]	; (8008504 <_strtod_l+0xc0c>)
 800829a:	431a      	orrs	r2, r3
 800829c:	0017      	movs	r7, r2
 800829e:	e7c9      	b.n	8008234 <_strtod_l+0x93c>
 80082a0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80082a2:	4233      	tst	r3, r6
 80082a4:	d0c6      	beq.n	8008234 <_strtod_l+0x93c>
 80082a6:	e7e1      	b.n	800826c <_strtod_l+0x974>
 80082a8:	f7ff fb0e 	bl	80078c8 <sulp>
 80082ac:	0002      	movs	r2, r0
 80082ae:	000b      	movs	r3, r1
 80082b0:	980e      	ldr	r0, [sp, #56]	; 0x38
 80082b2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80082b4:	f7fa fa7e 	bl	80027b4 <__aeabi_dsub>
 80082b8:	2200      	movs	r2, #0
 80082ba:	2300      	movs	r3, #0
 80082bc:	0006      	movs	r6, r0
 80082be:	000f      	movs	r7, r1
 80082c0:	f7f8 f8c2 	bl	8000448 <__aeabi_dcmpeq>
 80082c4:	2800      	cmp	r0, #0
 80082c6:	d0b5      	beq.n	8008234 <_strtod_l+0x93c>
 80082c8:	e5f5      	b.n	8007eb6 <_strtod_l+0x5be>
 80082ca:	9907      	ldr	r1, [sp, #28]
 80082cc:	9806      	ldr	r0, [sp, #24]
 80082ce:	f002 fb89 	bl	800a9e4 <__ratio>
 80082d2:	2380      	movs	r3, #128	; 0x80
 80082d4:	2200      	movs	r2, #0
 80082d6:	05db      	lsls	r3, r3, #23
 80082d8:	0004      	movs	r4, r0
 80082da:	000d      	movs	r5, r1
 80082dc:	f7f8 f8c4 	bl	8000468 <__aeabi_dcmple>
 80082e0:	2800      	cmp	r0, #0
 80082e2:	d079      	beq.n	80083d8 <_strtod_l+0xae0>
 80082e4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d04b      	beq.n	8008382 <_strtod_l+0xa8a>
 80082ea:	2300      	movs	r3, #0
 80082ec:	4c86      	ldr	r4, [pc, #536]	; (8008508 <_strtod_l+0xc10>)
 80082ee:	2500      	movs	r5, #0
 80082f0:	9312      	str	r3, [sp, #72]	; 0x48
 80082f2:	9413      	str	r4, [sp, #76]	; 0x4c
 80082f4:	4c84      	ldr	r4, [pc, #528]	; (8008508 <_strtod_l+0xc10>)
 80082f6:	4a85      	ldr	r2, [pc, #532]	; (800850c <_strtod_l+0xc14>)
 80082f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80082fa:	4013      	ands	r3, r2
 80082fc:	9314      	str	r3, [sp, #80]	; 0x50
 80082fe:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008300:	4b83      	ldr	r3, [pc, #524]	; (8008510 <_strtod_l+0xc18>)
 8008302:	429a      	cmp	r2, r3
 8008304:	d000      	beq.n	8008308 <_strtod_l+0xa10>
 8008306:	e0b0      	b.n	800846a <_strtod_l+0xb72>
 8008308:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800830a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800830c:	921a      	str	r2, [sp, #104]	; 0x68
 800830e:	931b      	str	r3, [sp, #108]	; 0x6c
 8008310:	4a80      	ldr	r2, [pc, #512]	; (8008514 <_strtod_l+0xc1c>)
 8008312:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008314:	4694      	mov	ip, r2
 8008316:	4463      	add	r3, ip
 8008318:	001f      	movs	r7, r3
 800831a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800831c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800831e:	0030      	movs	r0, r6
 8008320:	0039      	movs	r1, r7
 8008322:	920c      	str	r2, [sp, #48]	; 0x30
 8008324:	930d      	str	r3, [sp, #52]	; 0x34
 8008326:	f002 fa85 	bl	800a834 <__ulp>
 800832a:	0002      	movs	r2, r0
 800832c:	000b      	movs	r3, r1
 800832e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008330:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008332:	f7f9 ffd3 	bl	80022dc <__aeabi_dmul>
 8008336:	0032      	movs	r2, r6
 8008338:	003b      	movs	r3, r7
 800833a:	f7f9 f85f 	bl	80013fc <__aeabi_dadd>
 800833e:	4a73      	ldr	r2, [pc, #460]	; (800850c <_strtod_l+0xc14>)
 8008340:	4b75      	ldr	r3, [pc, #468]	; (8008518 <_strtod_l+0xc20>)
 8008342:	0006      	movs	r6, r0
 8008344:	400a      	ands	r2, r1
 8008346:	429a      	cmp	r2, r3
 8008348:	d95e      	bls.n	8008408 <_strtod_l+0xb10>
 800834a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800834c:	4a73      	ldr	r2, [pc, #460]	; (800851c <_strtod_l+0xc24>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d103      	bne.n	800835a <_strtod_l+0xa62>
 8008352:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008354:	3301      	adds	r3, #1
 8008356:	d100      	bne.n	800835a <_strtod_l+0xa62>
 8008358:	e53c      	b.n	8007dd4 <_strtod_l+0x4dc>
 800835a:	2601      	movs	r6, #1
 800835c:	4f6f      	ldr	r7, [pc, #444]	; (800851c <_strtod_l+0xc24>)
 800835e:	4276      	negs	r6, r6
 8008360:	9922      	ldr	r1, [sp, #136]	; 0x88
 8008362:	9805      	ldr	r0, [sp, #20]
 8008364:	f001 ff24 	bl	800a1b0 <_Bfree>
 8008368:	9909      	ldr	r1, [sp, #36]	; 0x24
 800836a:	9805      	ldr	r0, [sp, #20]
 800836c:	f001 ff20 	bl	800a1b0 <_Bfree>
 8008370:	9907      	ldr	r1, [sp, #28]
 8008372:	9805      	ldr	r0, [sp, #20]
 8008374:	f001 ff1c 	bl	800a1b0 <_Bfree>
 8008378:	9906      	ldr	r1, [sp, #24]
 800837a:	9805      	ldr	r0, [sp, #20]
 800837c:	f001 ff18 	bl	800a1b0 <_Bfree>
 8008380:	e60f      	b.n	8007fa2 <_strtod_l+0x6aa>
 8008382:	2e00      	cmp	r6, #0
 8008384:	d11c      	bne.n	80083c0 <_strtod_l+0xac8>
 8008386:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008388:	031b      	lsls	r3, r3, #12
 800838a:	d11f      	bne.n	80083cc <_strtod_l+0xad4>
 800838c:	2200      	movs	r2, #0
 800838e:	0020      	movs	r0, r4
 8008390:	0029      	movs	r1, r5
 8008392:	4b5d      	ldr	r3, [pc, #372]	; (8008508 <_strtod_l+0xc10>)
 8008394:	f7f8 f85e 	bl	8000454 <__aeabi_dcmplt>
 8008398:	2800      	cmp	r0, #0
 800839a:	d11a      	bne.n	80083d2 <_strtod_l+0xada>
 800839c:	0020      	movs	r0, r4
 800839e:	0029      	movs	r1, r5
 80083a0:	2200      	movs	r2, #0
 80083a2:	4b5f      	ldr	r3, [pc, #380]	; (8008520 <_strtod_l+0xc28>)
 80083a4:	f7f9 ff9a 	bl	80022dc <__aeabi_dmul>
 80083a8:	0005      	movs	r5, r0
 80083aa:	000c      	movs	r4, r1
 80083ac:	2380      	movs	r3, #128	; 0x80
 80083ae:	061b      	lsls	r3, r3, #24
 80083b0:	18e3      	adds	r3, r4, r3
 80083b2:	951e      	str	r5, [sp, #120]	; 0x78
 80083b4:	931f      	str	r3, [sp, #124]	; 0x7c
 80083b6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80083b8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80083ba:	9212      	str	r2, [sp, #72]	; 0x48
 80083bc:	9313      	str	r3, [sp, #76]	; 0x4c
 80083be:	e79a      	b.n	80082f6 <_strtod_l+0x9fe>
 80083c0:	2e01      	cmp	r6, #1
 80083c2:	d103      	bne.n	80083cc <_strtod_l+0xad4>
 80083c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d100      	bne.n	80083cc <_strtod_l+0xad4>
 80083ca:	e574      	b.n	8007eb6 <_strtod_l+0x5be>
 80083cc:	2300      	movs	r3, #0
 80083ce:	4c55      	ldr	r4, [pc, #340]	; (8008524 <_strtod_l+0xc2c>)
 80083d0:	e78d      	b.n	80082ee <_strtod_l+0x9f6>
 80083d2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80083d4:	4c52      	ldr	r4, [pc, #328]	; (8008520 <_strtod_l+0xc28>)
 80083d6:	e7e9      	b.n	80083ac <_strtod_l+0xab4>
 80083d8:	2200      	movs	r2, #0
 80083da:	0020      	movs	r0, r4
 80083dc:	0029      	movs	r1, r5
 80083de:	4b50      	ldr	r3, [pc, #320]	; (8008520 <_strtod_l+0xc28>)
 80083e0:	f7f9 ff7c 	bl	80022dc <__aeabi_dmul>
 80083e4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80083e6:	0005      	movs	r5, r0
 80083e8:	000b      	movs	r3, r1
 80083ea:	000c      	movs	r4, r1
 80083ec:	2a00      	cmp	r2, #0
 80083ee:	d107      	bne.n	8008400 <_strtod_l+0xb08>
 80083f0:	2280      	movs	r2, #128	; 0x80
 80083f2:	0612      	lsls	r2, r2, #24
 80083f4:	188b      	adds	r3, r1, r2
 80083f6:	9016      	str	r0, [sp, #88]	; 0x58
 80083f8:	9317      	str	r3, [sp, #92]	; 0x5c
 80083fa:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80083fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80083fe:	e7dc      	b.n	80083ba <_strtod_l+0xac2>
 8008400:	0002      	movs	r2, r0
 8008402:	9216      	str	r2, [sp, #88]	; 0x58
 8008404:	9317      	str	r3, [sp, #92]	; 0x5c
 8008406:	e7f8      	b.n	80083fa <_strtod_l+0xb02>
 8008408:	23d4      	movs	r3, #212	; 0xd4
 800840a:	049b      	lsls	r3, r3, #18
 800840c:	18cf      	adds	r7, r1, r3
 800840e:	9b08      	ldr	r3, [sp, #32]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d1a5      	bne.n	8008360 <_strtod_l+0xa68>
 8008414:	4b3d      	ldr	r3, [pc, #244]	; (800850c <_strtod_l+0xc14>)
 8008416:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008418:	403b      	ands	r3, r7
 800841a:	429a      	cmp	r2, r3
 800841c:	d1a0      	bne.n	8008360 <_strtod_l+0xa68>
 800841e:	0028      	movs	r0, r5
 8008420:	0021      	movs	r1, r4
 8008422:	f7f8 f8af 	bl	8000584 <__aeabi_d2lz>
 8008426:	f7f8 f8e9 	bl	80005fc <__aeabi_l2d>
 800842a:	0002      	movs	r2, r0
 800842c:	000b      	movs	r3, r1
 800842e:	0028      	movs	r0, r5
 8008430:	0021      	movs	r1, r4
 8008432:	f7fa f9bf 	bl	80027b4 <__aeabi_dsub>
 8008436:	033b      	lsls	r3, r7, #12
 8008438:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800843a:	0b1b      	lsrs	r3, r3, #12
 800843c:	4333      	orrs	r3, r6
 800843e:	4313      	orrs	r3, r2
 8008440:	0004      	movs	r4, r0
 8008442:	000d      	movs	r5, r1
 8008444:	4a38      	ldr	r2, [pc, #224]	; (8008528 <_strtod_l+0xc30>)
 8008446:	2b00      	cmp	r3, #0
 8008448:	d055      	beq.n	80084f6 <_strtod_l+0xbfe>
 800844a:	4b38      	ldr	r3, [pc, #224]	; (800852c <_strtod_l+0xc34>)
 800844c:	f7f8 f802 	bl	8000454 <__aeabi_dcmplt>
 8008450:	2800      	cmp	r0, #0
 8008452:	d000      	beq.n	8008456 <_strtod_l+0xb5e>
 8008454:	e4c7      	b.n	8007de6 <_strtod_l+0x4ee>
 8008456:	0020      	movs	r0, r4
 8008458:	0029      	movs	r1, r5
 800845a:	4a35      	ldr	r2, [pc, #212]	; (8008530 <_strtod_l+0xc38>)
 800845c:	4b30      	ldr	r3, [pc, #192]	; (8008520 <_strtod_l+0xc28>)
 800845e:	f7f8 f80d 	bl	800047c <__aeabi_dcmpgt>
 8008462:	2800      	cmp	r0, #0
 8008464:	d100      	bne.n	8008468 <_strtod_l+0xb70>
 8008466:	e77b      	b.n	8008360 <_strtod_l+0xa68>
 8008468:	e4bd      	b.n	8007de6 <_strtod_l+0x4ee>
 800846a:	9b08      	ldr	r3, [sp, #32]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d02b      	beq.n	80084c8 <_strtod_l+0xbd0>
 8008470:	23d4      	movs	r3, #212	; 0xd4
 8008472:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008474:	04db      	lsls	r3, r3, #19
 8008476:	429a      	cmp	r2, r3
 8008478:	d826      	bhi.n	80084c8 <_strtod_l+0xbd0>
 800847a:	0028      	movs	r0, r5
 800847c:	0021      	movs	r1, r4
 800847e:	4a2d      	ldr	r2, [pc, #180]	; (8008534 <_strtod_l+0xc3c>)
 8008480:	4b2d      	ldr	r3, [pc, #180]	; (8008538 <_strtod_l+0xc40>)
 8008482:	f7f7 fff1 	bl	8000468 <__aeabi_dcmple>
 8008486:	2800      	cmp	r0, #0
 8008488:	d017      	beq.n	80084ba <_strtod_l+0xbc2>
 800848a:	0028      	movs	r0, r5
 800848c:	0021      	movs	r1, r4
 800848e:	f7f8 f85b 	bl	8000548 <__aeabi_d2uiz>
 8008492:	2800      	cmp	r0, #0
 8008494:	d100      	bne.n	8008498 <_strtod_l+0xba0>
 8008496:	3001      	adds	r0, #1
 8008498:	f7fa fda2 	bl	8002fe0 <__aeabi_ui2d>
 800849c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800849e:	0005      	movs	r5, r0
 80084a0:	000b      	movs	r3, r1
 80084a2:	000c      	movs	r4, r1
 80084a4:	2a00      	cmp	r2, #0
 80084a6:	d122      	bne.n	80084ee <_strtod_l+0xbf6>
 80084a8:	2280      	movs	r2, #128	; 0x80
 80084aa:	0612      	lsls	r2, r2, #24
 80084ac:	188b      	adds	r3, r1, r2
 80084ae:	9018      	str	r0, [sp, #96]	; 0x60
 80084b0:	9319      	str	r3, [sp, #100]	; 0x64
 80084b2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80084b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80084b6:	9212      	str	r2, [sp, #72]	; 0x48
 80084b8:	9313      	str	r3, [sp, #76]	; 0x4c
 80084ba:	22d6      	movs	r2, #214	; 0xd6
 80084bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80084be:	04d2      	lsls	r2, r2, #19
 80084c0:	189b      	adds	r3, r3, r2
 80084c2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80084c4:	1a9b      	subs	r3, r3, r2
 80084c6:	9313      	str	r3, [sp, #76]	; 0x4c
 80084c8:	980e      	ldr	r0, [sp, #56]	; 0x38
 80084ca:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80084cc:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80084ce:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 80084d0:	f002 f9b0 	bl	800a834 <__ulp>
 80084d4:	0002      	movs	r2, r0
 80084d6:	000b      	movs	r3, r1
 80084d8:	0030      	movs	r0, r6
 80084da:	0039      	movs	r1, r7
 80084dc:	f7f9 fefe 	bl	80022dc <__aeabi_dmul>
 80084e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80084e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80084e4:	f7f8 ff8a 	bl	80013fc <__aeabi_dadd>
 80084e8:	0006      	movs	r6, r0
 80084ea:	000f      	movs	r7, r1
 80084ec:	e78f      	b.n	800840e <_strtod_l+0xb16>
 80084ee:	0002      	movs	r2, r0
 80084f0:	9218      	str	r2, [sp, #96]	; 0x60
 80084f2:	9319      	str	r3, [sp, #100]	; 0x64
 80084f4:	e7dd      	b.n	80084b2 <_strtod_l+0xbba>
 80084f6:	4b11      	ldr	r3, [pc, #68]	; (800853c <_strtod_l+0xc44>)
 80084f8:	f7f7 ffac 	bl	8000454 <__aeabi_dcmplt>
 80084fc:	e7b1      	b.n	8008462 <_strtod_l+0xb6a>
 80084fe:	46c0      	nop			; (mov r8, r8)
 8008500:	fff00000 	.word	0xfff00000
 8008504:	000fffff 	.word	0x000fffff
 8008508:	3ff00000 	.word	0x3ff00000
 800850c:	7ff00000 	.word	0x7ff00000
 8008510:	7fe00000 	.word	0x7fe00000
 8008514:	fcb00000 	.word	0xfcb00000
 8008518:	7c9fffff 	.word	0x7c9fffff
 800851c:	7fefffff 	.word	0x7fefffff
 8008520:	3fe00000 	.word	0x3fe00000
 8008524:	bff00000 	.word	0xbff00000
 8008528:	94a03595 	.word	0x94a03595
 800852c:	3fdfffff 	.word	0x3fdfffff
 8008530:	35afe535 	.word	0x35afe535
 8008534:	ffc00000 	.word	0xffc00000
 8008538:	41dfffff 	.word	0x41dfffff
 800853c:	3fcfffff 	.word	0x3fcfffff

08008540 <_strtod_r>:
 8008540:	b510      	push	{r4, lr}
 8008542:	4b02      	ldr	r3, [pc, #8]	; (800854c <_strtod_r+0xc>)
 8008544:	f7ff f9d8 	bl	80078f8 <_strtod_l>
 8008548:	bd10      	pop	{r4, pc}
 800854a:	46c0      	nop			; (mov r8, r8)
 800854c:	20000088 	.word	0x20000088

08008550 <_strtol_l.isra.0>:
 8008550:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008552:	b087      	sub	sp, #28
 8008554:	001e      	movs	r6, r3
 8008556:	9005      	str	r0, [sp, #20]
 8008558:	9101      	str	r1, [sp, #4]
 800855a:	9202      	str	r2, [sp, #8]
 800855c:	2b01      	cmp	r3, #1
 800855e:	d045      	beq.n	80085ec <_strtol_l.isra.0+0x9c>
 8008560:	0008      	movs	r0, r1
 8008562:	2b24      	cmp	r3, #36	; 0x24
 8008564:	d842      	bhi.n	80085ec <_strtol_l.isra.0+0x9c>
 8008566:	4b3f      	ldr	r3, [pc, #252]	; (8008664 <_strtol_l.isra.0+0x114>)
 8008568:	2208      	movs	r2, #8
 800856a:	469c      	mov	ip, r3
 800856c:	0003      	movs	r3, r0
 800856e:	4661      	mov	r1, ip
 8008570:	781c      	ldrb	r4, [r3, #0]
 8008572:	1c45      	adds	r5, r0, #1
 8008574:	5d09      	ldrb	r1, [r1, r4]
 8008576:	0028      	movs	r0, r5
 8008578:	000f      	movs	r7, r1
 800857a:	4017      	ands	r7, r2
 800857c:	4211      	tst	r1, r2
 800857e:	d1f5      	bne.n	800856c <_strtol_l.isra.0+0x1c>
 8008580:	2c2d      	cmp	r4, #45	; 0x2d
 8008582:	d13a      	bne.n	80085fa <_strtol_l.isra.0+0xaa>
 8008584:	2701      	movs	r7, #1
 8008586:	782c      	ldrb	r4, [r5, #0]
 8008588:	1c9d      	adds	r5, r3, #2
 800858a:	2e00      	cmp	r6, #0
 800858c:	d065      	beq.n	800865a <_strtol_l.isra.0+0x10a>
 800858e:	2e10      	cmp	r6, #16
 8008590:	d109      	bne.n	80085a6 <_strtol_l.isra.0+0x56>
 8008592:	2c30      	cmp	r4, #48	; 0x30
 8008594:	d107      	bne.n	80085a6 <_strtol_l.isra.0+0x56>
 8008596:	2220      	movs	r2, #32
 8008598:	782b      	ldrb	r3, [r5, #0]
 800859a:	4393      	bics	r3, r2
 800859c:	2b58      	cmp	r3, #88	; 0x58
 800859e:	d157      	bne.n	8008650 <_strtol_l.isra.0+0x100>
 80085a0:	2610      	movs	r6, #16
 80085a2:	786c      	ldrb	r4, [r5, #1]
 80085a4:	3502      	adds	r5, #2
 80085a6:	4b30      	ldr	r3, [pc, #192]	; (8008668 <_strtol_l.isra.0+0x118>)
 80085a8:	0031      	movs	r1, r6
 80085aa:	18fb      	adds	r3, r7, r3
 80085ac:	0018      	movs	r0, r3
 80085ae:	9303      	str	r3, [sp, #12]
 80085b0:	f7f7 fe4a 	bl	8000248 <__aeabi_uidivmod>
 80085b4:	2300      	movs	r3, #0
 80085b6:	2201      	movs	r2, #1
 80085b8:	4684      	mov	ip, r0
 80085ba:	0018      	movs	r0, r3
 80085bc:	9104      	str	r1, [sp, #16]
 80085be:	4252      	negs	r2, r2
 80085c0:	0021      	movs	r1, r4
 80085c2:	3930      	subs	r1, #48	; 0x30
 80085c4:	2909      	cmp	r1, #9
 80085c6:	d81d      	bhi.n	8008604 <_strtol_l.isra.0+0xb4>
 80085c8:	000c      	movs	r4, r1
 80085ca:	42a6      	cmp	r6, r4
 80085cc:	dd28      	ble.n	8008620 <_strtol_l.isra.0+0xd0>
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	db24      	blt.n	800861c <_strtol_l.isra.0+0xcc>
 80085d2:	0013      	movs	r3, r2
 80085d4:	4584      	cmp	ip, r0
 80085d6:	d306      	bcc.n	80085e6 <_strtol_l.isra.0+0x96>
 80085d8:	d102      	bne.n	80085e0 <_strtol_l.isra.0+0x90>
 80085da:	9904      	ldr	r1, [sp, #16]
 80085dc:	42a1      	cmp	r1, r4
 80085de:	db02      	blt.n	80085e6 <_strtol_l.isra.0+0x96>
 80085e0:	2301      	movs	r3, #1
 80085e2:	4370      	muls	r0, r6
 80085e4:	1820      	adds	r0, r4, r0
 80085e6:	782c      	ldrb	r4, [r5, #0]
 80085e8:	3501      	adds	r5, #1
 80085ea:	e7e9      	b.n	80085c0 <_strtol_l.isra.0+0x70>
 80085ec:	f7fe f908 	bl	8006800 <__errno>
 80085f0:	2316      	movs	r3, #22
 80085f2:	6003      	str	r3, [r0, #0]
 80085f4:	2000      	movs	r0, #0
 80085f6:	b007      	add	sp, #28
 80085f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085fa:	2c2b      	cmp	r4, #43	; 0x2b
 80085fc:	d1c5      	bne.n	800858a <_strtol_l.isra.0+0x3a>
 80085fe:	782c      	ldrb	r4, [r5, #0]
 8008600:	1c9d      	adds	r5, r3, #2
 8008602:	e7c2      	b.n	800858a <_strtol_l.isra.0+0x3a>
 8008604:	0021      	movs	r1, r4
 8008606:	3941      	subs	r1, #65	; 0x41
 8008608:	2919      	cmp	r1, #25
 800860a:	d801      	bhi.n	8008610 <_strtol_l.isra.0+0xc0>
 800860c:	3c37      	subs	r4, #55	; 0x37
 800860e:	e7dc      	b.n	80085ca <_strtol_l.isra.0+0x7a>
 8008610:	0021      	movs	r1, r4
 8008612:	3961      	subs	r1, #97	; 0x61
 8008614:	2919      	cmp	r1, #25
 8008616:	d803      	bhi.n	8008620 <_strtol_l.isra.0+0xd0>
 8008618:	3c57      	subs	r4, #87	; 0x57
 800861a:	e7d6      	b.n	80085ca <_strtol_l.isra.0+0x7a>
 800861c:	0013      	movs	r3, r2
 800861e:	e7e2      	b.n	80085e6 <_strtol_l.isra.0+0x96>
 8008620:	2b00      	cmp	r3, #0
 8008622:	da09      	bge.n	8008638 <_strtol_l.isra.0+0xe8>
 8008624:	2322      	movs	r3, #34	; 0x22
 8008626:	9a05      	ldr	r2, [sp, #20]
 8008628:	9803      	ldr	r0, [sp, #12]
 800862a:	6013      	str	r3, [r2, #0]
 800862c:	9b02      	ldr	r3, [sp, #8]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d0e1      	beq.n	80085f6 <_strtol_l.isra.0+0xa6>
 8008632:	1e6b      	subs	r3, r5, #1
 8008634:	9301      	str	r3, [sp, #4]
 8008636:	e007      	b.n	8008648 <_strtol_l.isra.0+0xf8>
 8008638:	2f00      	cmp	r7, #0
 800863a:	d000      	beq.n	800863e <_strtol_l.isra.0+0xee>
 800863c:	4240      	negs	r0, r0
 800863e:	9a02      	ldr	r2, [sp, #8]
 8008640:	2a00      	cmp	r2, #0
 8008642:	d0d8      	beq.n	80085f6 <_strtol_l.isra.0+0xa6>
 8008644:	2b00      	cmp	r3, #0
 8008646:	d1f4      	bne.n	8008632 <_strtol_l.isra.0+0xe2>
 8008648:	9b02      	ldr	r3, [sp, #8]
 800864a:	9a01      	ldr	r2, [sp, #4]
 800864c:	601a      	str	r2, [r3, #0]
 800864e:	e7d2      	b.n	80085f6 <_strtol_l.isra.0+0xa6>
 8008650:	2430      	movs	r4, #48	; 0x30
 8008652:	2e00      	cmp	r6, #0
 8008654:	d1a7      	bne.n	80085a6 <_strtol_l.isra.0+0x56>
 8008656:	3608      	adds	r6, #8
 8008658:	e7a5      	b.n	80085a6 <_strtol_l.isra.0+0x56>
 800865a:	2c30      	cmp	r4, #48	; 0x30
 800865c:	d09b      	beq.n	8008596 <_strtol_l.isra.0+0x46>
 800865e:	260a      	movs	r6, #10
 8008660:	e7a1      	b.n	80085a6 <_strtol_l.isra.0+0x56>
 8008662:	46c0      	nop			; (mov r8, r8)
 8008664:	0800c3f9 	.word	0x0800c3f9
 8008668:	7fffffff 	.word	0x7fffffff

0800866c <_strtol_r>:
 800866c:	b510      	push	{r4, lr}
 800866e:	f7ff ff6f 	bl	8008550 <_strtol_l.isra.0>
 8008672:	bd10      	pop	{r4, pc}

08008674 <__swbuf_r>:
 8008674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008676:	0005      	movs	r5, r0
 8008678:	000e      	movs	r6, r1
 800867a:	0014      	movs	r4, r2
 800867c:	2800      	cmp	r0, #0
 800867e:	d004      	beq.n	800868a <__swbuf_r+0x16>
 8008680:	6983      	ldr	r3, [r0, #24]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d101      	bne.n	800868a <__swbuf_r+0x16>
 8008686:	f001 f89b 	bl	80097c0 <__sinit>
 800868a:	4b22      	ldr	r3, [pc, #136]	; (8008714 <__swbuf_r+0xa0>)
 800868c:	429c      	cmp	r4, r3
 800868e:	d12e      	bne.n	80086ee <__swbuf_r+0x7a>
 8008690:	686c      	ldr	r4, [r5, #4]
 8008692:	69a3      	ldr	r3, [r4, #24]
 8008694:	60a3      	str	r3, [r4, #8]
 8008696:	89a3      	ldrh	r3, [r4, #12]
 8008698:	071b      	lsls	r3, r3, #28
 800869a:	d532      	bpl.n	8008702 <__swbuf_r+0x8e>
 800869c:	6923      	ldr	r3, [r4, #16]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d02f      	beq.n	8008702 <__swbuf_r+0x8e>
 80086a2:	6823      	ldr	r3, [r4, #0]
 80086a4:	6922      	ldr	r2, [r4, #16]
 80086a6:	b2f7      	uxtb	r7, r6
 80086a8:	1a98      	subs	r0, r3, r2
 80086aa:	6963      	ldr	r3, [r4, #20]
 80086ac:	b2f6      	uxtb	r6, r6
 80086ae:	4283      	cmp	r3, r0
 80086b0:	dc05      	bgt.n	80086be <__swbuf_r+0x4a>
 80086b2:	0021      	movs	r1, r4
 80086b4:	0028      	movs	r0, r5
 80086b6:	f000 ffe1 	bl	800967c <_fflush_r>
 80086ba:	2800      	cmp	r0, #0
 80086bc:	d127      	bne.n	800870e <__swbuf_r+0x9a>
 80086be:	68a3      	ldr	r3, [r4, #8]
 80086c0:	3001      	adds	r0, #1
 80086c2:	3b01      	subs	r3, #1
 80086c4:	60a3      	str	r3, [r4, #8]
 80086c6:	6823      	ldr	r3, [r4, #0]
 80086c8:	1c5a      	adds	r2, r3, #1
 80086ca:	6022      	str	r2, [r4, #0]
 80086cc:	701f      	strb	r7, [r3, #0]
 80086ce:	6963      	ldr	r3, [r4, #20]
 80086d0:	4283      	cmp	r3, r0
 80086d2:	d004      	beq.n	80086de <__swbuf_r+0x6a>
 80086d4:	89a3      	ldrh	r3, [r4, #12]
 80086d6:	07db      	lsls	r3, r3, #31
 80086d8:	d507      	bpl.n	80086ea <__swbuf_r+0x76>
 80086da:	2e0a      	cmp	r6, #10
 80086dc:	d105      	bne.n	80086ea <__swbuf_r+0x76>
 80086de:	0021      	movs	r1, r4
 80086e0:	0028      	movs	r0, r5
 80086e2:	f000 ffcb 	bl	800967c <_fflush_r>
 80086e6:	2800      	cmp	r0, #0
 80086e8:	d111      	bne.n	800870e <__swbuf_r+0x9a>
 80086ea:	0030      	movs	r0, r6
 80086ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086ee:	4b0a      	ldr	r3, [pc, #40]	; (8008718 <__swbuf_r+0xa4>)
 80086f0:	429c      	cmp	r4, r3
 80086f2:	d101      	bne.n	80086f8 <__swbuf_r+0x84>
 80086f4:	68ac      	ldr	r4, [r5, #8]
 80086f6:	e7cc      	b.n	8008692 <__swbuf_r+0x1e>
 80086f8:	4b08      	ldr	r3, [pc, #32]	; (800871c <__swbuf_r+0xa8>)
 80086fa:	429c      	cmp	r4, r3
 80086fc:	d1c9      	bne.n	8008692 <__swbuf_r+0x1e>
 80086fe:	68ec      	ldr	r4, [r5, #12]
 8008700:	e7c7      	b.n	8008692 <__swbuf_r+0x1e>
 8008702:	0021      	movs	r1, r4
 8008704:	0028      	movs	r0, r5
 8008706:	f000 f80b 	bl	8008720 <__swsetup_r>
 800870a:	2800      	cmp	r0, #0
 800870c:	d0c9      	beq.n	80086a2 <__swbuf_r+0x2e>
 800870e:	2601      	movs	r6, #1
 8008710:	4276      	negs	r6, r6
 8008712:	e7ea      	b.n	80086ea <__swbuf_r+0x76>
 8008714:	0800c5b0 	.word	0x0800c5b0
 8008718:	0800c5d0 	.word	0x0800c5d0
 800871c:	0800c590 	.word	0x0800c590

08008720 <__swsetup_r>:
 8008720:	4b37      	ldr	r3, [pc, #220]	; (8008800 <__swsetup_r+0xe0>)
 8008722:	b570      	push	{r4, r5, r6, lr}
 8008724:	681d      	ldr	r5, [r3, #0]
 8008726:	0006      	movs	r6, r0
 8008728:	000c      	movs	r4, r1
 800872a:	2d00      	cmp	r5, #0
 800872c:	d005      	beq.n	800873a <__swsetup_r+0x1a>
 800872e:	69ab      	ldr	r3, [r5, #24]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d102      	bne.n	800873a <__swsetup_r+0x1a>
 8008734:	0028      	movs	r0, r5
 8008736:	f001 f843 	bl	80097c0 <__sinit>
 800873a:	4b32      	ldr	r3, [pc, #200]	; (8008804 <__swsetup_r+0xe4>)
 800873c:	429c      	cmp	r4, r3
 800873e:	d10f      	bne.n	8008760 <__swsetup_r+0x40>
 8008740:	686c      	ldr	r4, [r5, #4]
 8008742:	230c      	movs	r3, #12
 8008744:	5ee2      	ldrsh	r2, [r4, r3]
 8008746:	b293      	uxth	r3, r2
 8008748:	0711      	lsls	r1, r2, #28
 800874a:	d42d      	bmi.n	80087a8 <__swsetup_r+0x88>
 800874c:	06d9      	lsls	r1, r3, #27
 800874e:	d411      	bmi.n	8008774 <__swsetup_r+0x54>
 8008750:	2309      	movs	r3, #9
 8008752:	2001      	movs	r0, #1
 8008754:	6033      	str	r3, [r6, #0]
 8008756:	3337      	adds	r3, #55	; 0x37
 8008758:	4313      	orrs	r3, r2
 800875a:	81a3      	strh	r3, [r4, #12]
 800875c:	4240      	negs	r0, r0
 800875e:	bd70      	pop	{r4, r5, r6, pc}
 8008760:	4b29      	ldr	r3, [pc, #164]	; (8008808 <__swsetup_r+0xe8>)
 8008762:	429c      	cmp	r4, r3
 8008764:	d101      	bne.n	800876a <__swsetup_r+0x4a>
 8008766:	68ac      	ldr	r4, [r5, #8]
 8008768:	e7eb      	b.n	8008742 <__swsetup_r+0x22>
 800876a:	4b28      	ldr	r3, [pc, #160]	; (800880c <__swsetup_r+0xec>)
 800876c:	429c      	cmp	r4, r3
 800876e:	d1e8      	bne.n	8008742 <__swsetup_r+0x22>
 8008770:	68ec      	ldr	r4, [r5, #12]
 8008772:	e7e6      	b.n	8008742 <__swsetup_r+0x22>
 8008774:	075b      	lsls	r3, r3, #29
 8008776:	d513      	bpl.n	80087a0 <__swsetup_r+0x80>
 8008778:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800877a:	2900      	cmp	r1, #0
 800877c:	d008      	beq.n	8008790 <__swsetup_r+0x70>
 800877e:	0023      	movs	r3, r4
 8008780:	3344      	adds	r3, #68	; 0x44
 8008782:	4299      	cmp	r1, r3
 8008784:	d002      	beq.n	800878c <__swsetup_r+0x6c>
 8008786:	0030      	movs	r0, r6
 8008788:	f7fe f898 	bl	80068bc <_free_r>
 800878c:	2300      	movs	r3, #0
 800878e:	6363      	str	r3, [r4, #52]	; 0x34
 8008790:	2224      	movs	r2, #36	; 0x24
 8008792:	89a3      	ldrh	r3, [r4, #12]
 8008794:	4393      	bics	r3, r2
 8008796:	81a3      	strh	r3, [r4, #12]
 8008798:	2300      	movs	r3, #0
 800879a:	6063      	str	r3, [r4, #4]
 800879c:	6923      	ldr	r3, [r4, #16]
 800879e:	6023      	str	r3, [r4, #0]
 80087a0:	2308      	movs	r3, #8
 80087a2:	89a2      	ldrh	r2, [r4, #12]
 80087a4:	4313      	orrs	r3, r2
 80087a6:	81a3      	strh	r3, [r4, #12]
 80087a8:	6923      	ldr	r3, [r4, #16]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d10b      	bne.n	80087c6 <__swsetup_r+0xa6>
 80087ae:	21a0      	movs	r1, #160	; 0xa0
 80087b0:	2280      	movs	r2, #128	; 0x80
 80087b2:	89a3      	ldrh	r3, [r4, #12]
 80087b4:	0089      	lsls	r1, r1, #2
 80087b6:	0092      	lsls	r2, r2, #2
 80087b8:	400b      	ands	r3, r1
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d003      	beq.n	80087c6 <__swsetup_r+0xa6>
 80087be:	0021      	movs	r1, r4
 80087c0:	0030      	movs	r0, r6
 80087c2:	f001 fc3f 	bl	800a044 <__smakebuf_r>
 80087c6:	220c      	movs	r2, #12
 80087c8:	5ea3      	ldrsh	r3, [r4, r2]
 80087ca:	2001      	movs	r0, #1
 80087cc:	001a      	movs	r2, r3
 80087ce:	b299      	uxth	r1, r3
 80087d0:	4002      	ands	r2, r0
 80087d2:	4203      	tst	r3, r0
 80087d4:	d00f      	beq.n	80087f6 <__swsetup_r+0xd6>
 80087d6:	2200      	movs	r2, #0
 80087d8:	60a2      	str	r2, [r4, #8]
 80087da:	6962      	ldr	r2, [r4, #20]
 80087dc:	4252      	negs	r2, r2
 80087de:	61a2      	str	r2, [r4, #24]
 80087e0:	2000      	movs	r0, #0
 80087e2:	6922      	ldr	r2, [r4, #16]
 80087e4:	4282      	cmp	r2, r0
 80087e6:	d1ba      	bne.n	800875e <__swsetup_r+0x3e>
 80087e8:	060a      	lsls	r2, r1, #24
 80087ea:	d5b8      	bpl.n	800875e <__swsetup_r+0x3e>
 80087ec:	2240      	movs	r2, #64	; 0x40
 80087ee:	4313      	orrs	r3, r2
 80087f0:	81a3      	strh	r3, [r4, #12]
 80087f2:	3801      	subs	r0, #1
 80087f4:	e7b3      	b.n	800875e <__swsetup_r+0x3e>
 80087f6:	0788      	lsls	r0, r1, #30
 80087f8:	d400      	bmi.n	80087fc <__swsetup_r+0xdc>
 80087fa:	6962      	ldr	r2, [r4, #20]
 80087fc:	60a2      	str	r2, [r4, #8]
 80087fe:	e7ef      	b.n	80087e0 <__swsetup_r+0xc0>
 8008800:	20000020 	.word	0x20000020
 8008804:	0800c5b0 	.word	0x0800c5b0
 8008808:	0800c5d0 	.word	0x0800c5d0
 800880c:	0800c590 	.word	0x0800c590

08008810 <quorem>:
 8008810:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008812:	0006      	movs	r6, r0
 8008814:	690d      	ldr	r5, [r1, #16]
 8008816:	6933      	ldr	r3, [r6, #16]
 8008818:	b087      	sub	sp, #28
 800881a:	2000      	movs	r0, #0
 800881c:	9102      	str	r1, [sp, #8]
 800881e:	42ab      	cmp	r3, r5
 8008820:	db6b      	blt.n	80088fa <quorem+0xea>
 8008822:	000b      	movs	r3, r1
 8008824:	3d01      	subs	r5, #1
 8008826:	00ac      	lsls	r4, r5, #2
 8008828:	3314      	adds	r3, #20
 800882a:	9305      	str	r3, [sp, #20]
 800882c:	191b      	adds	r3, r3, r4
 800882e:	9303      	str	r3, [sp, #12]
 8008830:	0033      	movs	r3, r6
 8008832:	3314      	adds	r3, #20
 8008834:	9301      	str	r3, [sp, #4]
 8008836:	191c      	adds	r4, r3, r4
 8008838:	9b03      	ldr	r3, [sp, #12]
 800883a:	6827      	ldr	r7, [r4, #0]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	0038      	movs	r0, r7
 8008840:	9300      	str	r3, [sp, #0]
 8008842:	3301      	adds	r3, #1
 8008844:	0019      	movs	r1, r3
 8008846:	9304      	str	r3, [sp, #16]
 8008848:	f7f7 fc78 	bl	800013c <__udivsi3>
 800884c:	9b04      	ldr	r3, [sp, #16]
 800884e:	9000      	str	r0, [sp, #0]
 8008850:	429f      	cmp	r7, r3
 8008852:	d329      	bcc.n	80088a8 <quorem+0x98>
 8008854:	2300      	movs	r3, #0
 8008856:	469c      	mov	ip, r3
 8008858:	9801      	ldr	r0, [sp, #4]
 800885a:	9f05      	ldr	r7, [sp, #20]
 800885c:	9304      	str	r3, [sp, #16]
 800885e:	cf08      	ldmia	r7!, {r3}
 8008860:	9a00      	ldr	r2, [sp, #0]
 8008862:	b299      	uxth	r1, r3
 8008864:	4351      	muls	r1, r2
 8008866:	0c1b      	lsrs	r3, r3, #16
 8008868:	4353      	muls	r3, r2
 800886a:	4461      	add	r1, ip
 800886c:	0c0a      	lsrs	r2, r1, #16
 800886e:	189b      	adds	r3, r3, r2
 8008870:	0c1a      	lsrs	r2, r3, #16
 8008872:	9305      	str	r3, [sp, #20]
 8008874:	6803      	ldr	r3, [r0, #0]
 8008876:	4694      	mov	ip, r2
 8008878:	b29a      	uxth	r2, r3
 800887a:	9b04      	ldr	r3, [sp, #16]
 800887c:	b289      	uxth	r1, r1
 800887e:	18d2      	adds	r2, r2, r3
 8008880:	6803      	ldr	r3, [r0, #0]
 8008882:	1a52      	subs	r2, r2, r1
 8008884:	0c19      	lsrs	r1, r3, #16
 8008886:	466b      	mov	r3, sp
 8008888:	8a9b      	ldrh	r3, [r3, #20]
 800888a:	1acb      	subs	r3, r1, r3
 800888c:	1411      	asrs	r1, r2, #16
 800888e:	185b      	adds	r3, r3, r1
 8008890:	1419      	asrs	r1, r3, #16
 8008892:	b292      	uxth	r2, r2
 8008894:	041b      	lsls	r3, r3, #16
 8008896:	431a      	orrs	r2, r3
 8008898:	9b03      	ldr	r3, [sp, #12]
 800889a:	9104      	str	r1, [sp, #16]
 800889c:	c004      	stmia	r0!, {r2}
 800889e:	42bb      	cmp	r3, r7
 80088a0:	d2dd      	bcs.n	800885e <quorem+0x4e>
 80088a2:	6823      	ldr	r3, [r4, #0]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d02e      	beq.n	8008906 <quorem+0xf6>
 80088a8:	0030      	movs	r0, r6
 80088aa:	9902      	ldr	r1, [sp, #8]
 80088ac:	f001 ff0e 	bl	800a6cc <__mcmp>
 80088b0:	2800      	cmp	r0, #0
 80088b2:	db21      	blt.n	80088f8 <quorem+0xe8>
 80088b4:	0030      	movs	r0, r6
 80088b6:	2400      	movs	r4, #0
 80088b8:	9b00      	ldr	r3, [sp, #0]
 80088ba:	9902      	ldr	r1, [sp, #8]
 80088bc:	3301      	adds	r3, #1
 80088be:	9300      	str	r3, [sp, #0]
 80088c0:	3014      	adds	r0, #20
 80088c2:	3114      	adds	r1, #20
 80088c4:	6802      	ldr	r2, [r0, #0]
 80088c6:	c908      	ldmia	r1!, {r3}
 80088c8:	b292      	uxth	r2, r2
 80088ca:	1914      	adds	r4, r2, r4
 80088cc:	b29a      	uxth	r2, r3
 80088ce:	1aa2      	subs	r2, r4, r2
 80088d0:	6804      	ldr	r4, [r0, #0]
 80088d2:	0c1b      	lsrs	r3, r3, #16
 80088d4:	0c24      	lsrs	r4, r4, #16
 80088d6:	1ae3      	subs	r3, r4, r3
 80088d8:	1414      	asrs	r4, r2, #16
 80088da:	191b      	adds	r3, r3, r4
 80088dc:	141c      	asrs	r4, r3, #16
 80088de:	b292      	uxth	r2, r2
 80088e0:	041b      	lsls	r3, r3, #16
 80088e2:	4313      	orrs	r3, r2
 80088e4:	c008      	stmia	r0!, {r3}
 80088e6:	9b03      	ldr	r3, [sp, #12]
 80088e8:	428b      	cmp	r3, r1
 80088ea:	d2eb      	bcs.n	80088c4 <quorem+0xb4>
 80088ec:	9a01      	ldr	r2, [sp, #4]
 80088ee:	00ab      	lsls	r3, r5, #2
 80088f0:	18d3      	adds	r3, r2, r3
 80088f2:	681a      	ldr	r2, [r3, #0]
 80088f4:	2a00      	cmp	r2, #0
 80088f6:	d010      	beq.n	800891a <quorem+0x10a>
 80088f8:	9800      	ldr	r0, [sp, #0]
 80088fa:	b007      	add	sp, #28
 80088fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088fe:	6823      	ldr	r3, [r4, #0]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d104      	bne.n	800890e <quorem+0xfe>
 8008904:	3d01      	subs	r5, #1
 8008906:	9b01      	ldr	r3, [sp, #4]
 8008908:	3c04      	subs	r4, #4
 800890a:	42a3      	cmp	r3, r4
 800890c:	d3f7      	bcc.n	80088fe <quorem+0xee>
 800890e:	6135      	str	r5, [r6, #16]
 8008910:	e7ca      	b.n	80088a8 <quorem+0x98>
 8008912:	681a      	ldr	r2, [r3, #0]
 8008914:	2a00      	cmp	r2, #0
 8008916:	d104      	bne.n	8008922 <quorem+0x112>
 8008918:	3d01      	subs	r5, #1
 800891a:	9a01      	ldr	r2, [sp, #4]
 800891c:	3b04      	subs	r3, #4
 800891e:	429a      	cmp	r2, r3
 8008920:	d3f7      	bcc.n	8008912 <quorem+0x102>
 8008922:	6135      	str	r5, [r6, #16]
 8008924:	e7e8      	b.n	80088f8 <quorem+0xe8>
	...

08008928 <_dtoa_r>:
 8008928:	b5f0      	push	{r4, r5, r6, r7, lr}
 800892a:	b09d      	sub	sp, #116	; 0x74
 800892c:	9202      	str	r2, [sp, #8]
 800892e:	9303      	str	r3, [sp, #12]
 8008930:	9b02      	ldr	r3, [sp, #8]
 8008932:	9c03      	ldr	r4, [sp, #12]
 8008934:	930a      	str	r3, [sp, #40]	; 0x28
 8008936:	940b      	str	r4, [sp, #44]	; 0x2c
 8008938:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800893a:	0007      	movs	r7, r0
 800893c:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800893e:	2c00      	cmp	r4, #0
 8008940:	d10e      	bne.n	8008960 <_dtoa_r+0x38>
 8008942:	2010      	movs	r0, #16
 8008944:	f7fd ff86 	bl	8006854 <malloc>
 8008948:	1e02      	subs	r2, r0, #0
 800894a:	6278      	str	r0, [r7, #36]	; 0x24
 800894c:	d104      	bne.n	8008958 <_dtoa_r+0x30>
 800894e:	21ea      	movs	r1, #234	; 0xea
 8008950:	4bc0      	ldr	r3, [pc, #768]	; (8008c54 <_dtoa_r+0x32c>)
 8008952:	48c1      	ldr	r0, [pc, #772]	; (8008c58 <_dtoa_r+0x330>)
 8008954:	f002 fc78 	bl	800b248 <__assert_func>
 8008958:	6044      	str	r4, [r0, #4]
 800895a:	6084      	str	r4, [r0, #8]
 800895c:	6004      	str	r4, [r0, #0]
 800895e:	60c4      	str	r4, [r0, #12]
 8008960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008962:	6819      	ldr	r1, [r3, #0]
 8008964:	2900      	cmp	r1, #0
 8008966:	d00a      	beq.n	800897e <_dtoa_r+0x56>
 8008968:	685a      	ldr	r2, [r3, #4]
 800896a:	2301      	movs	r3, #1
 800896c:	4093      	lsls	r3, r2
 800896e:	604a      	str	r2, [r1, #4]
 8008970:	608b      	str	r3, [r1, #8]
 8008972:	0038      	movs	r0, r7
 8008974:	f001 fc1c 	bl	800a1b0 <_Bfree>
 8008978:	2200      	movs	r2, #0
 800897a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800897c:	601a      	str	r2, [r3, #0]
 800897e:	9b03      	ldr	r3, [sp, #12]
 8008980:	2b00      	cmp	r3, #0
 8008982:	da21      	bge.n	80089c8 <_dtoa_r+0xa0>
 8008984:	2301      	movs	r3, #1
 8008986:	602b      	str	r3, [r5, #0]
 8008988:	9b03      	ldr	r3, [sp, #12]
 800898a:	005b      	lsls	r3, r3, #1
 800898c:	085b      	lsrs	r3, r3, #1
 800898e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008990:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008992:	4bb2      	ldr	r3, [pc, #712]	; (8008c5c <_dtoa_r+0x334>)
 8008994:	002a      	movs	r2, r5
 8008996:	9318      	str	r3, [sp, #96]	; 0x60
 8008998:	401a      	ands	r2, r3
 800899a:	429a      	cmp	r2, r3
 800899c:	d117      	bne.n	80089ce <_dtoa_r+0xa6>
 800899e:	4bb0      	ldr	r3, [pc, #704]	; (8008c60 <_dtoa_r+0x338>)
 80089a0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80089a2:	0328      	lsls	r0, r5, #12
 80089a4:	6013      	str	r3, [r2, #0]
 80089a6:	9b02      	ldr	r3, [sp, #8]
 80089a8:	0b00      	lsrs	r0, r0, #12
 80089aa:	4318      	orrs	r0, r3
 80089ac:	d101      	bne.n	80089b2 <_dtoa_r+0x8a>
 80089ae:	f000 fdc3 	bl	8009538 <_dtoa_r+0xc10>
 80089b2:	48ac      	ldr	r0, [pc, #688]	; (8008c64 <_dtoa_r+0x33c>)
 80089b4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80089b6:	9005      	str	r0, [sp, #20]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d002      	beq.n	80089c2 <_dtoa_r+0x9a>
 80089bc:	4baa      	ldr	r3, [pc, #680]	; (8008c68 <_dtoa_r+0x340>)
 80089be:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80089c0:	6013      	str	r3, [r2, #0]
 80089c2:	9805      	ldr	r0, [sp, #20]
 80089c4:	b01d      	add	sp, #116	; 0x74
 80089c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089c8:	2300      	movs	r3, #0
 80089ca:	602b      	str	r3, [r5, #0]
 80089cc:	e7e0      	b.n	8008990 <_dtoa_r+0x68>
 80089ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089d0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80089d2:	9312      	str	r3, [sp, #72]	; 0x48
 80089d4:	9413      	str	r4, [sp, #76]	; 0x4c
 80089d6:	9812      	ldr	r0, [sp, #72]	; 0x48
 80089d8:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80089da:	2200      	movs	r2, #0
 80089dc:	2300      	movs	r3, #0
 80089de:	f7f7 fd33 	bl	8000448 <__aeabi_dcmpeq>
 80089e2:	1e04      	subs	r4, r0, #0
 80089e4:	d00b      	beq.n	80089fe <_dtoa_r+0xd6>
 80089e6:	2301      	movs	r3, #1
 80089e8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80089ea:	6013      	str	r3, [r2, #0]
 80089ec:	4b9f      	ldr	r3, [pc, #636]	; (8008c6c <_dtoa_r+0x344>)
 80089ee:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80089f0:	9305      	str	r3, [sp, #20]
 80089f2:	2a00      	cmp	r2, #0
 80089f4:	d0e5      	beq.n	80089c2 <_dtoa_r+0x9a>
 80089f6:	4a9e      	ldr	r2, [pc, #632]	; (8008c70 <_dtoa_r+0x348>)
 80089f8:	9926      	ldr	r1, [sp, #152]	; 0x98
 80089fa:	600a      	str	r2, [r1, #0]
 80089fc:	e7e1      	b.n	80089c2 <_dtoa_r+0x9a>
 80089fe:	ab1a      	add	r3, sp, #104	; 0x68
 8008a00:	9301      	str	r3, [sp, #4]
 8008a02:	ab1b      	add	r3, sp, #108	; 0x6c
 8008a04:	9300      	str	r3, [sp, #0]
 8008a06:	0038      	movs	r0, r7
 8008a08:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008a0a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008a0c:	f001 ff86 	bl	800a91c <__d2b>
 8008a10:	006e      	lsls	r6, r5, #1
 8008a12:	9004      	str	r0, [sp, #16]
 8008a14:	0d76      	lsrs	r6, r6, #21
 8008a16:	d100      	bne.n	8008a1a <_dtoa_r+0xf2>
 8008a18:	e07c      	b.n	8008b14 <_dtoa_r+0x1ec>
 8008a1a:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008a1c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008a1e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008a20:	4a94      	ldr	r2, [pc, #592]	; (8008c74 <_dtoa_r+0x34c>)
 8008a22:	031b      	lsls	r3, r3, #12
 8008a24:	0b1b      	lsrs	r3, r3, #12
 8008a26:	431a      	orrs	r2, r3
 8008a28:	0011      	movs	r1, r2
 8008a2a:	4b93      	ldr	r3, [pc, #588]	; (8008c78 <_dtoa_r+0x350>)
 8008a2c:	9416      	str	r4, [sp, #88]	; 0x58
 8008a2e:	18f6      	adds	r6, r6, r3
 8008a30:	2200      	movs	r2, #0
 8008a32:	4b92      	ldr	r3, [pc, #584]	; (8008c7c <_dtoa_r+0x354>)
 8008a34:	f7f9 febe 	bl	80027b4 <__aeabi_dsub>
 8008a38:	4a91      	ldr	r2, [pc, #580]	; (8008c80 <_dtoa_r+0x358>)
 8008a3a:	4b92      	ldr	r3, [pc, #584]	; (8008c84 <_dtoa_r+0x35c>)
 8008a3c:	f7f9 fc4e 	bl	80022dc <__aeabi_dmul>
 8008a40:	4a91      	ldr	r2, [pc, #580]	; (8008c88 <_dtoa_r+0x360>)
 8008a42:	4b92      	ldr	r3, [pc, #584]	; (8008c8c <_dtoa_r+0x364>)
 8008a44:	f7f8 fcda 	bl	80013fc <__aeabi_dadd>
 8008a48:	0004      	movs	r4, r0
 8008a4a:	0030      	movs	r0, r6
 8008a4c:	000d      	movs	r5, r1
 8008a4e:	f7fa fa97 	bl	8002f80 <__aeabi_i2d>
 8008a52:	4a8f      	ldr	r2, [pc, #572]	; (8008c90 <_dtoa_r+0x368>)
 8008a54:	4b8f      	ldr	r3, [pc, #572]	; (8008c94 <_dtoa_r+0x36c>)
 8008a56:	f7f9 fc41 	bl	80022dc <__aeabi_dmul>
 8008a5a:	0002      	movs	r2, r0
 8008a5c:	000b      	movs	r3, r1
 8008a5e:	0020      	movs	r0, r4
 8008a60:	0029      	movs	r1, r5
 8008a62:	f7f8 fccb 	bl	80013fc <__aeabi_dadd>
 8008a66:	0004      	movs	r4, r0
 8008a68:	000d      	movs	r5, r1
 8008a6a:	f7fa fa53 	bl	8002f14 <__aeabi_d2iz>
 8008a6e:	2200      	movs	r2, #0
 8008a70:	9002      	str	r0, [sp, #8]
 8008a72:	2300      	movs	r3, #0
 8008a74:	0020      	movs	r0, r4
 8008a76:	0029      	movs	r1, r5
 8008a78:	f7f7 fcec 	bl	8000454 <__aeabi_dcmplt>
 8008a7c:	2800      	cmp	r0, #0
 8008a7e:	d00b      	beq.n	8008a98 <_dtoa_r+0x170>
 8008a80:	9802      	ldr	r0, [sp, #8]
 8008a82:	f7fa fa7d 	bl	8002f80 <__aeabi_i2d>
 8008a86:	002b      	movs	r3, r5
 8008a88:	0022      	movs	r2, r4
 8008a8a:	f7f7 fcdd 	bl	8000448 <__aeabi_dcmpeq>
 8008a8e:	4243      	negs	r3, r0
 8008a90:	4158      	adcs	r0, r3
 8008a92:	9b02      	ldr	r3, [sp, #8]
 8008a94:	1a1b      	subs	r3, r3, r0
 8008a96:	9302      	str	r3, [sp, #8]
 8008a98:	2301      	movs	r3, #1
 8008a9a:	9315      	str	r3, [sp, #84]	; 0x54
 8008a9c:	9b02      	ldr	r3, [sp, #8]
 8008a9e:	2b16      	cmp	r3, #22
 8008aa0:	d80f      	bhi.n	8008ac2 <_dtoa_r+0x19a>
 8008aa2:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008aa4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008aa6:	00da      	lsls	r2, r3, #3
 8008aa8:	4b7b      	ldr	r3, [pc, #492]	; (8008c98 <_dtoa_r+0x370>)
 8008aaa:	189b      	adds	r3, r3, r2
 8008aac:	681a      	ldr	r2, [r3, #0]
 8008aae:	685b      	ldr	r3, [r3, #4]
 8008ab0:	f7f7 fcd0 	bl	8000454 <__aeabi_dcmplt>
 8008ab4:	2800      	cmp	r0, #0
 8008ab6:	d049      	beq.n	8008b4c <_dtoa_r+0x224>
 8008ab8:	9b02      	ldr	r3, [sp, #8]
 8008aba:	3b01      	subs	r3, #1
 8008abc:	9302      	str	r3, [sp, #8]
 8008abe:	2300      	movs	r3, #0
 8008ac0:	9315      	str	r3, [sp, #84]	; 0x54
 8008ac2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008ac4:	1b9e      	subs	r6, r3, r6
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	9308      	str	r3, [sp, #32]
 8008aca:	0033      	movs	r3, r6
 8008acc:	3b01      	subs	r3, #1
 8008ace:	930d      	str	r3, [sp, #52]	; 0x34
 8008ad0:	d504      	bpl.n	8008adc <_dtoa_r+0x1b4>
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	1b9b      	subs	r3, r3, r6
 8008ad6:	9308      	str	r3, [sp, #32]
 8008ad8:	2300      	movs	r3, #0
 8008ada:	930d      	str	r3, [sp, #52]	; 0x34
 8008adc:	9b02      	ldr	r3, [sp, #8]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	db36      	blt.n	8008b50 <_dtoa_r+0x228>
 8008ae2:	9a02      	ldr	r2, [sp, #8]
 8008ae4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ae6:	4694      	mov	ip, r2
 8008ae8:	4463      	add	r3, ip
 8008aea:	930d      	str	r3, [sp, #52]	; 0x34
 8008aec:	2300      	movs	r3, #0
 8008aee:	9214      	str	r2, [sp, #80]	; 0x50
 8008af0:	930e      	str	r3, [sp, #56]	; 0x38
 8008af2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008af4:	2401      	movs	r4, #1
 8008af6:	2b09      	cmp	r3, #9
 8008af8:	d862      	bhi.n	8008bc0 <_dtoa_r+0x298>
 8008afa:	2b05      	cmp	r3, #5
 8008afc:	dd02      	ble.n	8008b04 <_dtoa_r+0x1dc>
 8008afe:	2400      	movs	r4, #0
 8008b00:	3b04      	subs	r3, #4
 8008b02:	9322      	str	r3, [sp, #136]	; 0x88
 8008b04:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008b06:	1e98      	subs	r0, r3, #2
 8008b08:	2803      	cmp	r0, #3
 8008b0a:	d862      	bhi.n	8008bd2 <_dtoa_r+0x2aa>
 8008b0c:	f7f7 fb02 	bl	8000114 <__gnu_thumb1_case_uqi>
 8008b10:	56343629 	.word	0x56343629
 8008b14:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008b16:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008b18:	189e      	adds	r6, r3, r2
 8008b1a:	4b60      	ldr	r3, [pc, #384]	; (8008c9c <_dtoa_r+0x374>)
 8008b1c:	18f2      	adds	r2, r6, r3
 8008b1e:	2a20      	cmp	r2, #32
 8008b20:	dd0f      	ble.n	8008b42 <_dtoa_r+0x21a>
 8008b22:	2340      	movs	r3, #64	; 0x40
 8008b24:	1a9b      	subs	r3, r3, r2
 8008b26:	409d      	lsls	r5, r3
 8008b28:	4b5d      	ldr	r3, [pc, #372]	; (8008ca0 <_dtoa_r+0x378>)
 8008b2a:	9802      	ldr	r0, [sp, #8]
 8008b2c:	18f3      	adds	r3, r6, r3
 8008b2e:	40d8      	lsrs	r0, r3
 8008b30:	4328      	orrs	r0, r5
 8008b32:	f7fa fa55 	bl	8002fe0 <__aeabi_ui2d>
 8008b36:	2301      	movs	r3, #1
 8008b38:	4c5a      	ldr	r4, [pc, #360]	; (8008ca4 <_dtoa_r+0x37c>)
 8008b3a:	3e01      	subs	r6, #1
 8008b3c:	1909      	adds	r1, r1, r4
 8008b3e:	9316      	str	r3, [sp, #88]	; 0x58
 8008b40:	e776      	b.n	8008a30 <_dtoa_r+0x108>
 8008b42:	2320      	movs	r3, #32
 8008b44:	9802      	ldr	r0, [sp, #8]
 8008b46:	1a9b      	subs	r3, r3, r2
 8008b48:	4098      	lsls	r0, r3
 8008b4a:	e7f2      	b.n	8008b32 <_dtoa_r+0x20a>
 8008b4c:	9015      	str	r0, [sp, #84]	; 0x54
 8008b4e:	e7b8      	b.n	8008ac2 <_dtoa_r+0x19a>
 8008b50:	9b08      	ldr	r3, [sp, #32]
 8008b52:	9a02      	ldr	r2, [sp, #8]
 8008b54:	1a9b      	subs	r3, r3, r2
 8008b56:	9308      	str	r3, [sp, #32]
 8008b58:	4253      	negs	r3, r2
 8008b5a:	930e      	str	r3, [sp, #56]	; 0x38
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	9314      	str	r3, [sp, #80]	; 0x50
 8008b60:	e7c7      	b.n	8008af2 <_dtoa_r+0x1ca>
 8008b62:	2300      	movs	r3, #0
 8008b64:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b66:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	dc36      	bgt.n	8008bda <_dtoa_r+0x2b2>
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	001a      	movs	r2, r3
 8008b70:	930c      	str	r3, [sp, #48]	; 0x30
 8008b72:	9306      	str	r3, [sp, #24]
 8008b74:	9223      	str	r2, [sp, #140]	; 0x8c
 8008b76:	e00d      	b.n	8008b94 <_dtoa_r+0x26c>
 8008b78:	2301      	movs	r3, #1
 8008b7a:	e7f3      	b.n	8008b64 <_dtoa_r+0x23c>
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8008b80:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b82:	4694      	mov	ip, r2
 8008b84:	9b02      	ldr	r3, [sp, #8]
 8008b86:	4463      	add	r3, ip
 8008b88:	930c      	str	r3, [sp, #48]	; 0x30
 8008b8a:	3301      	adds	r3, #1
 8008b8c:	9306      	str	r3, [sp, #24]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	dc00      	bgt.n	8008b94 <_dtoa_r+0x26c>
 8008b92:	2301      	movs	r3, #1
 8008b94:	2200      	movs	r2, #0
 8008b96:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008b98:	6042      	str	r2, [r0, #4]
 8008b9a:	3204      	adds	r2, #4
 8008b9c:	0015      	movs	r5, r2
 8008b9e:	3514      	adds	r5, #20
 8008ba0:	6841      	ldr	r1, [r0, #4]
 8008ba2:	429d      	cmp	r5, r3
 8008ba4:	d91d      	bls.n	8008be2 <_dtoa_r+0x2ba>
 8008ba6:	0038      	movs	r0, r7
 8008ba8:	f001 fabe 	bl	800a128 <_Balloc>
 8008bac:	9005      	str	r0, [sp, #20]
 8008bae:	2800      	cmp	r0, #0
 8008bb0:	d11b      	bne.n	8008bea <_dtoa_r+0x2c2>
 8008bb2:	21d5      	movs	r1, #213	; 0xd5
 8008bb4:	0002      	movs	r2, r0
 8008bb6:	4b3c      	ldr	r3, [pc, #240]	; (8008ca8 <_dtoa_r+0x380>)
 8008bb8:	0049      	lsls	r1, r1, #1
 8008bba:	e6ca      	b.n	8008952 <_dtoa_r+0x2a>
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	e7de      	b.n	8008b7e <_dtoa_r+0x256>
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	940f      	str	r4, [sp, #60]	; 0x3c
 8008bc4:	9322      	str	r3, [sp, #136]	; 0x88
 8008bc6:	3b01      	subs	r3, #1
 8008bc8:	930c      	str	r3, [sp, #48]	; 0x30
 8008bca:	9306      	str	r3, [sp, #24]
 8008bcc:	2200      	movs	r2, #0
 8008bce:	3313      	adds	r3, #19
 8008bd0:	e7d0      	b.n	8008b74 <_dtoa_r+0x24c>
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	930f      	str	r3, [sp, #60]	; 0x3c
 8008bd6:	3b02      	subs	r3, #2
 8008bd8:	e7f6      	b.n	8008bc8 <_dtoa_r+0x2a0>
 8008bda:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008bdc:	930c      	str	r3, [sp, #48]	; 0x30
 8008bde:	9306      	str	r3, [sp, #24]
 8008be0:	e7d8      	b.n	8008b94 <_dtoa_r+0x26c>
 8008be2:	3101      	adds	r1, #1
 8008be4:	6041      	str	r1, [r0, #4]
 8008be6:	0052      	lsls	r2, r2, #1
 8008be8:	e7d8      	b.n	8008b9c <_dtoa_r+0x274>
 8008bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bec:	9a05      	ldr	r2, [sp, #20]
 8008bee:	601a      	str	r2, [r3, #0]
 8008bf0:	9b06      	ldr	r3, [sp, #24]
 8008bf2:	2b0e      	cmp	r3, #14
 8008bf4:	d900      	bls.n	8008bf8 <_dtoa_r+0x2d0>
 8008bf6:	e0eb      	b.n	8008dd0 <_dtoa_r+0x4a8>
 8008bf8:	2c00      	cmp	r4, #0
 8008bfa:	d100      	bne.n	8008bfe <_dtoa_r+0x2d6>
 8008bfc:	e0e8      	b.n	8008dd0 <_dtoa_r+0x4a8>
 8008bfe:	9b02      	ldr	r3, [sp, #8]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	dd68      	ble.n	8008cd6 <_dtoa_r+0x3ae>
 8008c04:	001a      	movs	r2, r3
 8008c06:	210f      	movs	r1, #15
 8008c08:	4b23      	ldr	r3, [pc, #140]	; (8008c98 <_dtoa_r+0x370>)
 8008c0a:	400a      	ands	r2, r1
 8008c0c:	00d2      	lsls	r2, r2, #3
 8008c0e:	189b      	adds	r3, r3, r2
 8008c10:	681d      	ldr	r5, [r3, #0]
 8008c12:	685e      	ldr	r6, [r3, #4]
 8008c14:	9b02      	ldr	r3, [sp, #8]
 8008c16:	111c      	asrs	r4, r3, #4
 8008c18:	2302      	movs	r3, #2
 8008c1a:	9310      	str	r3, [sp, #64]	; 0x40
 8008c1c:	9b02      	ldr	r3, [sp, #8]
 8008c1e:	05db      	lsls	r3, r3, #23
 8008c20:	d50b      	bpl.n	8008c3a <_dtoa_r+0x312>
 8008c22:	4b22      	ldr	r3, [pc, #136]	; (8008cac <_dtoa_r+0x384>)
 8008c24:	400c      	ands	r4, r1
 8008c26:	6a1a      	ldr	r2, [r3, #32]
 8008c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c2a:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008c2c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008c2e:	f7f8 ff4f 	bl	8001ad0 <__aeabi_ddiv>
 8008c32:	2303      	movs	r3, #3
 8008c34:	900a      	str	r0, [sp, #40]	; 0x28
 8008c36:	910b      	str	r1, [sp, #44]	; 0x2c
 8008c38:	9310      	str	r3, [sp, #64]	; 0x40
 8008c3a:	4b1c      	ldr	r3, [pc, #112]	; (8008cac <_dtoa_r+0x384>)
 8008c3c:	9307      	str	r3, [sp, #28]
 8008c3e:	2c00      	cmp	r4, #0
 8008c40:	d136      	bne.n	8008cb0 <_dtoa_r+0x388>
 8008c42:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008c44:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008c46:	002a      	movs	r2, r5
 8008c48:	0033      	movs	r3, r6
 8008c4a:	f7f8 ff41 	bl	8001ad0 <__aeabi_ddiv>
 8008c4e:	900a      	str	r0, [sp, #40]	; 0x28
 8008c50:	910b      	str	r1, [sp, #44]	; 0x2c
 8008c52:	e05c      	b.n	8008d0e <_dtoa_r+0x3e6>
 8008c54:	0800c506 	.word	0x0800c506
 8008c58:	0800c51d 	.word	0x0800c51d
 8008c5c:	7ff00000 	.word	0x7ff00000
 8008c60:	0000270f 	.word	0x0000270f
 8008c64:	0800c502 	.word	0x0800c502
 8008c68:	0800c505 	.word	0x0800c505
 8008c6c:	0800c37c 	.word	0x0800c37c
 8008c70:	0800c37d 	.word	0x0800c37d
 8008c74:	3ff00000 	.word	0x3ff00000
 8008c78:	fffffc01 	.word	0xfffffc01
 8008c7c:	3ff80000 	.word	0x3ff80000
 8008c80:	636f4361 	.word	0x636f4361
 8008c84:	3fd287a7 	.word	0x3fd287a7
 8008c88:	8b60c8b3 	.word	0x8b60c8b3
 8008c8c:	3fc68a28 	.word	0x3fc68a28
 8008c90:	509f79fb 	.word	0x509f79fb
 8008c94:	3fd34413 	.word	0x3fd34413
 8008c98:	0800c6f8 	.word	0x0800c6f8
 8008c9c:	00000432 	.word	0x00000432
 8008ca0:	00000412 	.word	0x00000412
 8008ca4:	fe100000 	.word	0xfe100000
 8008ca8:	0800c57c 	.word	0x0800c57c
 8008cac:	0800c6d0 	.word	0x0800c6d0
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	421c      	tst	r4, r3
 8008cb4:	d00b      	beq.n	8008cce <_dtoa_r+0x3a6>
 8008cb6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008cb8:	0028      	movs	r0, r5
 8008cba:	3301      	adds	r3, #1
 8008cbc:	9310      	str	r3, [sp, #64]	; 0x40
 8008cbe:	9b07      	ldr	r3, [sp, #28]
 8008cc0:	0031      	movs	r1, r6
 8008cc2:	681a      	ldr	r2, [r3, #0]
 8008cc4:	685b      	ldr	r3, [r3, #4]
 8008cc6:	f7f9 fb09 	bl	80022dc <__aeabi_dmul>
 8008cca:	0005      	movs	r5, r0
 8008ccc:	000e      	movs	r6, r1
 8008cce:	9b07      	ldr	r3, [sp, #28]
 8008cd0:	1064      	asrs	r4, r4, #1
 8008cd2:	3308      	adds	r3, #8
 8008cd4:	e7b2      	b.n	8008c3c <_dtoa_r+0x314>
 8008cd6:	2302      	movs	r3, #2
 8008cd8:	9310      	str	r3, [sp, #64]	; 0x40
 8008cda:	9b02      	ldr	r3, [sp, #8]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d016      	beq.n	8008d0e <_dtoa_r+0x3e6>
 8008ce0:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008ce2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008ce4:	425c      	negs	r4, r3
 8008ce6:	230f      	movs	r3, #15
 8008ce8:	4ab5      	ldr	r2, [pc, #724]	; (8008fc0 <_dtoa_r+0x698>)
 8008cea:	4023      	ands	r3, r4
 8008cec:	00db      	lsls	r3, r3, #3
 8008cee:	18d3      	adds	r3, r2, r3
 8008cf0:	681a      	ldr	r2, [r3, #0]
 8008cf2:	685b      	ldr	r3, [r3, #4]
 8008cf4:	f7f9 faf2 	bl	80022dc <__aeabi_dmul>
 8008cf8:	2601      	movs	r6, #1
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	900a      	str	r0, [sp, #40]	; 0x28
 8008cfe:	910b      	str	r1, [sp, #44]	; 0x2c
 8008d00:	4db0      	ldr	r5, [pc, #704]	; (8008fc4 <_dtoa_r+0x69c>)
 8008d02:	1124      	asrs	r4, r4, #4
 8008d04:	2c00      	cmp	r4, #0
 8008d06:	d000      	beq.n	8008d0a <_dtoa_r+0x3e2>
 8008d08:	e094      	b.n	8008e34 <_dtoa_r+0x50c>
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d19f      	bne.n	8008c4e <_dtoa_r+0x326>
 8008d0e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d100      	bne.n	8008d16 <_dtoa_r+0x3ee>
 8008d14:	e09b      	b.n	8008e4e <_dtoa_r+0x526>
 8008d16:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008d18:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	0020      	movs	r0, r4
 8008d1e:	0029      	movs	r1, r5
 8008d20:	4ba9      	ldr	r3, [pc, #676]	; (8008fc8 <_dtoa_r+0x6a0>)
 8008d22:	f7f7 fb97 	bl	8000454 <__aeabi_dcmplt>
 8008d26:	2800      	cmp	r0, #0
 8008d28:	d100      	bne.n	8008d2c <_dtoa_r+0x404>
 8008d2a:	e090      	b.n	8008e4e <_dtoa_r+0x526>
 8008d2c:	9b06      	ldr	r3, [sp, #24]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d100      	bne.n	8008d34 <_dtoa_r+0x40c>
 8008d32:	e08c      	b.n	8008e4e <_dtoa_r+0x526>
 8008d34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	dd46      	ble.n	8008dc8 <_dtoa_r+0x4a0>
 8008d3a:	9b02      	ldr	r3, [sp, #8]
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	0020      	movs	r0, r4
 8008d40:	0029      	movs	r1, r5
 8008d42:	1e5e      	subs	r6, r3, #1
 8008d44:	4ba1      	ldr	r3, [pc, #644]	; (8008fcc <_dtoa_r+0x6a4>)
 8008d46:	f7f9 fac9 	bl	80022dc <__aeabi_dmul>
 8008d4a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008d4c:	900a      	str	r0, [sp, #40]	; 0x28
 8008d4e:	910b      	str	r1, [sp, #44]	; 0x2c
 8008d50:	3301      	adds	r3, #1
 8008d52:	9310      	str	r3, [sp, #64]	; 0x40
 8008d54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008d56:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008d58:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008d5a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008d5c:	9307      	str	r3, [sp, #28]
 8008d5e:	f7fa f90f 	bl	8002f80 <__aeabi_i2d>
 8008d62:	0022      	movs	r2, r4
 8008d64:	002b      	movs	r3, r5
 8008d66:	f7f9 fab9 	bl	80022dc <__aeabi_dmul>
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	4b98      	ldr	r3, [pc, #608]	; (8008fd0 <_dtoa_r+0x6a8>)
 8008d6e:	f7f8 fb45 	bl	80013fc <__aeabi_dadd>
 8008d72:	9010      	str	r0, [sp, #64]	; 0x40
 8008d74:	9111      	str	r1, [sp, #68]	; 0x44
 8008d76:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008d78:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008d7a:	920a      	str	r2, [sp, #40]	; 0x28
 8008d7c:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d7e:	4a95      	ldr	r2, [pc, #596]	; (8008fd4 <_dtoa_r+0x6ac>)
 8008d80:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008d82:	4694      	mov	ip, r2
 8008d84:	4463      	add	r3, ip
 8008d86:	9317      	str	r3, [sp, #92]	; 0x5c
 8008d88:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d8a:	9b07      	ldr	r3, [sp, #28]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d161      	bne.n	8008e54 <_dtoa_r+0x52c>
 8008d90:	2200      	movs	r2, #0
 8008d92:	0020      	movs	r0, r4
 8008d94:	0029      	movs	r1, r5
 8008d96:	4b90      	ldr	r3, [pc, #576]	; (8008fd8 <_dtoa_r+0x6b0>)
 8008d98:	f7f9 fd0c 	bl	80027b4 <__aeabi_dsub>
 8008d9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008d9e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008da0:	0004      	movs	r4, r0
 8008da2:	000d      	movs	r5, r1
 8008da4:	f7f7 fb6a 	bl	800047c <__aeabi_dcmpgt>
 8008da8:	2800      	cmp	r0, #0
 8008daa:	d000      	beq.n	8008dae <_dtoa_r+0x486>
 8008dac:	e2b5      	b.n	800931a <_dtoa_r+0x9f2>
 8008dae:	488b      	ldr	r0, [pc, #556]	; (8008fdc <_dtoa_r+0x6b4>)
 8008db0:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008db2:	4684      	mov	ip, r0
 8008db4:	4461      	add	r1, ip
 8008db6:	000b      	movs	r3, r1
 8008db8:	0020      	movs	r0, r4
 8008dba:	0029      	movs	r1, r5
 8008dbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008dbe:	f7f7 fb49 	bl	8000454 <__aeabi_dcmplt>
 8008dc2:	2800      	cmp	r0, #0
 8008dc4:	d000      	beq.n	8008dc8 <_dtoa_r+0x4a0>
 8008dc6:	e2a5      	b.n	8009314 <_dtoa_r+0x9ec>
 8008dc8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008dca:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8008dcc:	930a      	str	r3, [sp, #40]	; 0x28
 8008dce:	940b      	str	r4, [sp, #44]	; 0x2c
 8008dd0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	da00      	bge.n	8008dd8 <_dtoa_r+0x4b0>
 8008dd6:	e171      	b.n	80090bc <_dtoa_r+0x794>
 8008dd8:	9a02      	ldr	r2, [sp, #8]
 8008dda:	2a0e      	cmp	r2, #14
 8008ddc:	dd00      	ble.n	8008de0 <_dtoa_r+0x4b8>
 8008dde:	e16d      	b.n	80090bc <_dtoa_r+0x794>
 8008de0:	4b77      	ldr	r3, [pc, #476]	; (8008fc0 <_dtoa_r+0x698>)
 8008de2:	00d2      	lsls	r2, r2, #3
 8008de4:	189b      	adds	r3, r3, r2
 8008de6:	685c      	ldr	r4, [r3, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	9308      	str	r3, [sp, #32]
 8008dec:	9409      	str	r4, [sp, #36]	; 0x24
 8008dee:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	db00      	blt.n	8008df6 <_dtoa_r+0x4ce>
 8008df4:	e0f6      	b.n	8008fe4 <_dtoa_r+0x6bc>
 8008df6:	9b06      	ldr	r3, [sp, #24]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	dd00      	ble.n	8008dfe <_dtoa_r+0x4d6>
 8008dfc:	e0f2      	b.n	8008fe4 <_dtoa_r+0x6bc>
 8008dfe:	d000      	beq.n	8008e02 <_dtoa_r+0x4da>
 8008e00:	e288      	b.n	8009314 <_dtoa_r+0x9ec>
 8008e02:	9808      	ldr	r0, [sp, #32]
 8008e04:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008e06:	2200      	movs	r2, #0
 8008e08:	4b73      	ldr	r3, [pc, #460]	; (8008fd8 <_dtoa_r+0x6b0>)
 8008e0a:	f7f9 fa67 	bl	80022dc <__aeabi_dmul>
 8008e0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e12:	f7f7 fb3d 	bl	8000490 <__aeabi_dcmpge>
 8008e16:	9e06      	ldr	r6, [sp, #24]
 8008e18:	0035      	movs	r5, r6
 8008e1a:	2800      	cmp	r0, #0
 8008e1c:	d000      	beq.n	8008e20 <_dtoa_r+0x4f8>
 8008e1e:	e25f      	b.n	80092e0 <_dtoa_r+0x9b8>
 8008e20:	9b05      	ldr	r3, [sp, #20]
 8008e22:	9a05      	ldr	r2, [sp, #20]
 8008e24:	3301      	adds	r3, #1
 8008e26:	9307      	str	r3, [sp, #28]
 8008e28:	2331      	movs	r3, #49	; 0x31
 8008e2a:	7013      	strb	r3, [r2, #0]
 8008e2c:	9b02      	ldr	r3, [sp, #8]
 8008e2e:	3301      	adds	r3, #1
 8008e30:	9302      	str	r3, [sp, #8]
 8008e32:	e25a      	b.n	80092ea <_dtoa_r+0x9c2>
 8008e34:	4234      	tst	r4, r6
 8008e36:	d007      	beq.n	8008e48 <_dtoa_r+0x520>
 8008e38:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008e3a:	3301      	adds	r3, #1
 8008e3c:	9310      	str	r3, [sp, #64]	; 0x40
 8008e3e:	682a      	ldr	r2, [r5, #0]
 8008e40:	686b      	ldr	r3, [r5, #4]
 8008e42:	f7f9 fa4b 	bl	80022dc <__aeabi_dmul>
 8008e46:	0033      	movs	r3, r6
 8008e48:	1064      	asrs	r4, r4, #1
 8008e4a:	3508      	adds	r5, #8
 8008e4c:	e75a      	b.n	8008d04 <_dtoa_r+0x3dc>
 8008e4e:	9e02      	ldr	r6, [sp, #8]
 8008e50:	9b06      	ldr	r3, [sp, #24]
 8008e52:	e780      	b.n	8008d56 <_dtoa_r+0x42e>
 8008e54:	9b07      	ldr	r3, [sp, #28]
 8008e56:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008e58:	1e5a      	subs	r2, r3, #1
 8008e5a:	4b59      	ldr	r3, [pc, #356]	; (8008fc0 <_dtoa_r+0x698>)
 8008e5c:	00d2      	lsls	r2, r2, #3
 8008e5e:	189b      	adds	r3, r3, r2
 8008e60:	681a      	ldr	r2, [r3, #0]
 8008e62:	685b      	ldr	r3, [r3, #4]
 8008e64:	2900      	cmp	r1, #0
 8008e66:	d051      	beq.n	8008f0c <_dtoa_r+0x5e4>
 8008e68:	2000      	movs	r0, #0
 8008e6a:	495d      	ldr	r1, [pc, #372]	; (8008fe0 <_dtoa_r+0x6b8>)
 8008e6c:	f7f8 fe30 	bl	8001ad0 <__aeabi_ddiv>
 8008e70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e74:	f7f9 fc9e 	bl	80027b4 <__aeabi_dsub>
 8008e78:	9a05      	ldr	r2, [sp, #20]
 8008e7a:	9b05      	ldr	r3, [sp, #20]
 8008e7c:	4694      	mov	ip, r2
 8008e7e:	9310      	str	r3, [sp, #64]	; 0x40
 8008e80:	9b07      	ldr	r3, [sp, #28]
 8008e82:	900a      	str	r0, [sp, #40]	; 0x28
 8008e84:	910b      	str	r1, [sp, #44]	; 0x2c
 8008e86:	4463      	add	r3, ip
 8008e88:	9319      	str	r3, [sp, #100]	; 0x64
 8008e8a:	0029      	movs	r1, r5
 8008e8c:	0020      	movs	r0, r4
 8008e8e:	f7fa f841 	bl	8002f14 <__aeabi_d2iz>
 8008e92:	9017      	str	r0, [sp, #92]	; 0x5c
 8008e94:	f7fa f874 	bl	8002f80 <__aeabi_i2d>
 8008e98:	0002      	movs	r2, r0
 8008e9a:	000b      	movs	r3, r1
 8008e9c:	0020      	movs	r0, r4
 8008e9e:	0029      	movs	r1, r5
 8008ea0:	f7f9 fc88 	bl	80027b4 <__aeabi_dsub>
 8008ea4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008ea6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008ea8:	3301      	adds	r3, #1
 8008eaa:	9307      	str	r3, [sp, #28]
 8008eac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008eae:	0004      	movs	r4, r0
 8008eb0:	3330      	adds	r3, #48	; 0x30
 8008eb2:	7013      	strb	r3, [r2, #0]
 8008eb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008eb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008eb8:	000d      	movs	r5, r1
 8008eba:	f7f7 facb 	bl	8000454 <__aeabi_dcmplt>
 8008ebe:	2800      	cmp	r0, #0
 8008ec0:	d175      	bne.n	8008fae <_dtoa_r+0x686>
 8008ec2:	0022      	movs	r2, r4
 8008ec4:	002b      	movs	r3, r5
 8008ec6:	2000      	movs	r0, #0
 8008ec8:	493f      	ldr	r1, [pc, #252]	; (8008fc8 <_dtoa_r+0x6a0>)
 8008eca:	f7f9 fc73 	bl	80027b4 <__aeabi_dsub>
 8008ece:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008ed0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ed2:	f7f7 fabf 	bl	8000454 <__aeabi_dcmplt>
 8008ed6:	2800      	cmp	r0, #0
 8008ed8:	d000      	beq.n	8008edc <_dtoa_r+0x5b4>
 8008eda:	e0d1      	b.n	8009080 <_dtoa_r+0x758>
 8008edc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008ede:	9a07      	ldr	r2, [sp, #28]
 8008ee0:	4293      	cmp	r3, r2
 8008ee2:	d100      	bne.n	8008ee6 <_dtoa_r+0x5be>
 8008ee4:	e770      	b.n	8008dc8 <_dtoa_r+0x4a0>
 8008ee6:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008ee8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008eea:	2200      	movs	r2, #0
 8008eec:	4b37      	ldr	r3, [pc, #220]	; (8008fcc <_dtoa_r+0x6a4>)
 8008eee:	f7f9 f9f5 	bl	80022dc <__aeabi_dmul>
 8008ef2:	4b36      	ldr	r3, [pc, #216]	; (8008fcc <_dtoa_r+0x6a4>)
 8008ef4:	900a      	str	r0, [sp, #40]	; 0x28
 8008ef6:	910b      	str	r1, [sp, #44]	; 0x2c
 8008ef8:	2200      	movs	r2, #0
 8008efa:	0020      	movs	r0, r4
 8008efc:	0029      	movs	r1, r5
 8008efe:	f7f9 f9ed 	bl	80022dc <__aeabi_dmul>
 8008f02:	9b07      	ldr	r3, [sp, #28]
 8008f04:	0004      	movs	r4, r0
 8008f06:	000d      	movs	r5, r1
 8008f08:	9310      	str	r3, [sp, #64]	; 0x40
 8008f0a:	e7be      	b.n	8008e8a <_dtoa_r+0x562>
 8008f0c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008f0e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008f10:	f7f9 f9e4 	bl	80022dc <__aeabi_dmul>
 8008f14:	9a05      	ldr	r2, [sp, #20]
 8008f16:	9b05      	ldr	r3, [sp, #20]
 8008f18:	4694      	mov	ip, r2
 8008f1a:	930a      	str	r3, [sp, #40]	; 0x28
 8008f1c:	9b07      	ldr	r3, [sp, #28]
 8008f1e:	9010      	str	r0, [sp, #64]	; 0x40
 8008f20:	9111      	str	r1, [sp, #68]	; 0x44
 8008f22:	4463      	add	r3, ip
 8008f24:	9319      	str	r3, [sp, #100]	; 0x64
 8008f26:	0029      	movs	r1, r5
 8008f28:	0020      	movs	r0, r4
 8008f2a:	f7f9 fff3 	bl	8002f14 <__aeabi_d2iz>
 8008f2e:	9017      	str	r0, [sp, #92]	; 0x5c
 8008f30:	f7fa f826 	bl	8002f80 <__aeabi_i2d>
 8008f34:	0002      	movs	r2, r0
 8008f36:	000b      	movs	r3, r1
 8008f38:	0020      	movs	r0, r4
 8008f3a:	0029      	movs	r1, r5
 8008f3c:	f7f9 fc3a 	bl	80027b4 <__aeabi_dsub>
 8008f40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008f42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f44:	3330      	adds	r3, #48	; 0x30
 8008f46:	7013      	strb	r3, [r2, #0]
 8008f48:	0013      	movs	r3, r2
 8008f4a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008f4c:	3301      	adds	r3, #1
 8008f4e:	0004      	movs	r4, r0
 8008f50:	000d      	movs	r5, r1
 8008f52:	930a      	str	r3, [sp, #40]	; 0x28
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d12c      	bne.n	8008fb2 <_dtoa_r+0x68a>
 8008f58:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008f5a:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008f5c:	9a05      	ldr	r2, [sp, #20]
 8008f5e:	9b07      	ldr	r3, [sp, #28]
 8008f60:	4694      	mov	ip, r2
 8008f62:	4463      	add	r3, ip
 8008f64:	2200      	movs	r2, #0
 8008f66:	9307      	str	r3, [sp, #28]
 8008f68:	4b1d      	ldr	r3, [pc, #116]	; (8008fe0 <_dtoa_r+0x6b8>)
 8008f6a:	f7f8 fa47 	bl	80013fc <__aeabi_dadd>
 8008f6e:	0002      	movs	r2, r0
 8008f70:	000b      	movs	r3, r1
 8008f72:	0020      	movs	r0, r4
 8008f74:	0029      	movs	r1, r5
 8008f76:	f7f7 fa81 	bl	800047c <__aeabi_dcmpgt>
 8008f7a:	2800      	cmp	r0, #0
 8008f7c:	d000      	beq.n	8008f80 <_dtoa_r+0x658>
 8008f7e:	e07f      	b.n	8009080 <_dtoa_r+0x758>
 8008f80:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008f82:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008f84:	2000      	movs	r0, #0
 8008f86:	4916      	ldr	r1, [pc, #88]	; (8008fe0 <_dtoa_r+0x6b8>)
 8008f88:	f7f9 fc14 	bl	80027b4 <__aeabi_dsub>
 8008f8c:	0002      	movs	r2, r0
 8008f8e:	000b      	movs	r3, r1
 8008f90:	0020      	movs	r0, r4
 8008f92:	0029      	movs	r1, r5
 8008f94:	f7f7 fa5e 	bl	8000454 <__aeabi_dcmplt>
 8008f98:	2800      	cmp	r0, #0
 8008f9a:	d100      	bne.n	8008f9e <_dtoa_r+0x676>
 8008f9c:	e714      	b.n	8008dc8 <_dtoa_r+0x4a0>
 8008f9e:	9b07      	ldr	r3, [sp, #28]
 8008fa0:	001a      	movs	r2, r3
 8008fa2:	3a01      	subs	r2, #1
 8008fa4:	9207      	str	r2, [sp, #28]
 8008fa6:	7812      	ldrb	r2, [r2, #0]
 8008fa8:	2a30      	cmp	r2, #48	; 0x30
 8008faa:	d0f8      	beq.n	8008f9e <_dtoa_r+0x676>
 8008fac:	9307      	str	r3, [sp, #28]
 8008fae:	9602      	str	r6, [sp, #8]
 8008fb0:	e054      	b.n	800905c <_dtoa_r+0x734>
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	4b05      	ldr	r3, [pc, #20]	; (8008fcc <_dtoa_r+0x6a4>)
 8008fb6:	f7f9 f991 	bl	80022dc <__aeabi_dmul>
 8008fba:	0004      	movs	r4, r0
 8008fbc:	000d      	movs	r5, r1
 8008fbe:	e7b2      	b.n	8008f26 <_dtoa_r+0x5fe>
 8008fc0:	0800c6f8 	.word	0x0800c6f8
 8008fc4:	0800c6d0 	.word	0x0800c6d0
 8008fc8:	3ff00000 	.word	0x3ff00000
 8008fcc:	40240000 	.word	0x40240000
 8008fd0:	401c0000 	.word	0x401c0000
 8008fd4:	fcc00000 	.word	0xfcc00000
 8008fd8:	40140000 	.word	0x40140000
 8008fdc:	7cc00000 	.word	0x7cc00000
 8008fe0:	3fe00000 	.word	0x3fe00000
 8008fe4:	9b06      	ldr	r3, [sp, #24]
 8008fe6:	9e05      	ldr	r6, [sp, #20]
 8008fe8:	3b01      	subs	r3, #1
 8008fea:	199b      	adds	r3, r3, r6
 8008fec:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008fee:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008ff0:	930a      	str	r3, [sp, #40]	; 0x28
 8008ff2:	9a08      	ldr	r2, [sp, #32]
 8008ff4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ff6:	0020      	movs	r0, r4
 8008ff8:	0029      	movs	r1, r5
 8008ffa:	f7f8 fd69 	bl	8001ad0 <__aeabi_ddiv>
 8008ffe:	f7f9 ff89 	bl	8002f14 <__aeabi_d2iz>
 8009002:	9006      	str	r0, [sp, #24]
 8009004:	f7f9 ffbc 	bl	8002f80 <__aeabi_i2d>
 8009008:	9a08      	ldr	r2, [sp, #32]
 800900a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800900c:	f7f9 f966 	bl	80022dc <__aeabi_dmul>
 8009010:	0002      	movs	r2, r0
 8009012:	000b      	movs	r3, r1
 8009014:	0020      	movs	r0, r4
 8009016:	0029      	movs	r1, r5
 8009018:	f7f9 fbcc 	bl	80027b4 <__aeabi_dsub>
 800901c:	0033      	movs	r3, r6
 800901e:	9a06      	ldr	r2, [sp, #24]
 8009020:	3601      	adds	r6, #1
 8009022:	3230      	adds	r2, #48	; 0x30
 8009024:	701a      	strb	r2, [r3, #0]
 8009026:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009028:	9607      	str	r6, [sp, #28]
 800902a:	429a      	cmp	r2, r3
 800902c:	d139      	bne.n	80090a2 <_dtoa_r+0x77a>
 800902e:	0002      	movs	r2, r0
 8009030:	000b      	movs	r3, r1
 8009032:	f7f8 f9e3 	bl	80013fc <__aeabi_dadd>
 8009036:	9a08      	ldr	r2, [sp, #32]
 8009038:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800903a:	0004      	movs	r4, r0
 800903c:	000d      	movs	r5, r1
 800903e:	f7f7 fa1d 	bl	800047c <__aeabi_dcmpgt>
 8009042:	2800      	cmp	r0, #0
 8009044:	d11b      	bne.n	800907e <_dtoa_r+0x756>
 8009046:	9a08      	ldr	r2, [sp, #32]
 8009048:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800904a:	0020      	movs	r0, r4
 800904c:	0029      	movs	r1, r5
 800904e:	f7f7 f9fb 	bl	8000448 <__aeabi_dcmpeq>
 8009052:	2800      	cmp	r0, #0
 8009054:	d002      	beq.n	800905c <_dtoa_r+0x734>
 8009056:	9b06      	ldr	r3, [sp, #24]
 8009058:	07db      	lsls	r3, r3, #31
 800905a:	d410      	bmi.n	800907e <_dtoa_r+0x756>
 800905c:	0038      	movs	r0, r7
 800905e:	9904      	ldr	r1, [sp, #16]
 8009060:	f001 f8a6 	bl	800a1b0 <_Bfree>
 8009064:	2300      	movs	r3, #0
 8009066:	9a07      	ldr	r2, [sp, #28]
 8009068:	9802      	ldr	r0, [sp, #8]
 800906a:	7013      	strb	r3, [r2, #0]
 800906c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800906e:	3001      	adds	r0, #1
 8009070:	6018      	str	r0, [r3, #0]
 8009072:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009074:	2b00      	cmp	r3, #0
 8009076:	d100      	bne.n	800907a <_dtoa_r+0x752>
 8009078:	e4a3      	b.n	80089c2 <_dtoa_r+0x9a>
 800907a:	601a      	str	r2, [r3, #0]
 800907c:	e4a1      	b.n	80089c2 <_dtoa_r+0x9a>
 800907e:	9e02      	ldr	r6, [sp, #8]
 8009080:	9b07      	ldr	r3, [sp, #28]
 8009082:	9307      	str	r3, [sp, #28]
 8009084:	3b01      	subs	r3, #1
 8009086:	781a      	ldrb	r2, [r3, #0]
 8009088:	2a39      	cmp	r2, #57	; 0x39
 800908a:	d106      	bne.n	800909a <_dtoa_r+0x772>
 800908c:	9a05      	ldr	r2, [sp, #20]
 800908e:	429a      	cmp	r2, r3
 8009090:	d1f7      	bne.n	8009082 <_dtoa_r+0x75a>
 8009092:	2230      	movs	r2, #48	; 0x30
 8009094:	9905      	ldr	r1, [sp, #20]
 8009096:	3601      	adds	r6, #1
 8009098:	700a      	strb	r2, [r1, #0]
 800909a:	781a      	ldrb	r2, [r3, #0]
 800909c:	3201      	adds	r2, #1
 800909e:	701a      	strb	r2, [r3, #0]
 80090a0:	e785      	b.n	8008fae <_dtoa_r+0x686>
 80090a2:	2200      	movs	r2, #0
 80090a4:	4bad      	ldr	r3, [pc, #692]	; (800935c <_dtoa_r+0xa34>)
 80090a6:	f7f9 f919 	bl	80022dc <__aeabi_dmul>
 80090aa:	2200      	movs	r2, #0
 80090ac:	2300      	movs	r3, #0
 80090ae:	0004      	movs	r4, r0
 80090b0:	000d      	movs	r5, r1
 80090b2:	f7f7 f9c9 	bl	8000448 <__aeabi_dcmpeq>
 80090b6:	2800      	cmp	r0, #0
 80090b8:	d09b      	beq.n	8008ff2 <_dtoa_r+0x6ca>
 80090ba:	e7cf      	b.n	800905c <_dtoa_r+0x734>
 80090bc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80090be:	2a00      	cmp	r2, #0
 80090c0:	d100      	bne.n	80090c4 <_dtoa_r+0x79c>
 80090c2:	e082      	b.n	80091ca <_dtoa_r+0x8a2>
 80090c4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80090c6:	2a01      	cmp	r2, #1
 80090c8:	dc66      	bgt.n	8009198 <_dtoa_r+0x870>
 80090ca:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80090cc:	2a00      	cmp	r2, #0
 80090ce:	d05f      	beq.n	8009190 <_dtoa_r+0x868>
 80090d0:	4aa3      	ldr	r2, [pc, #652]	; (8009360 <_dtoa_r+0xa38>)
 80090d2:	189b      	adds	r3, r3, r2
 80090d4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80090d6:	9c08      	ldr	r4, [sp, #32]
 80090d8:	9a08      	ldr	r2, [sp, #32]
 80090da:	2101      	movs	r1, #1
 80090dc:	18d2      	adds	r2, r2, r3
 80090de:	9208      	str	r2, [sp, #32]
 80090e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80090e2:	0038      	movs	r0, r7
 80090e4:	18d3      	adds	r3, r2, r3
 80090e6:	930d      	str	r3, [sp, #52]	; 0x34
 80090e8:	f001 f95e 	bl	800a3a8 <__i2b>
 80090ec:	0005      	movs	r5, r0
 80090ee:	2c00      	cmp	r4, #0
 80090f0:	dd0e      	ble.n	8009110 <_dtoa_r+0x7e8>
 80090f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	dd0b      	ble.n	8009110 <_dtoa_r+0x7e8>
 80090f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80090fa:	0023      	movs	r3, r4
 80090fc:	4294      	cmp	r4, r2
 80090fe:	dd00      	ble.n	8009102 <_dtoa_r+0x7da>
 8009100:	0013      	movs	r3, r2
 8009102:	9a08      	ldr	r2, [sp, #32]
 8009104:	1ae4      	subs	r4, r4, r3
 8009106:	1ad2      	subs	r2, r2, r3
 8009108:	9208      	str	r2, [sp, #32]
 800910a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800910c:	1ad3      	subs	r3, r2, r3
 800910e:	930d      	str	r3, [sp, #52]	; 0x34
 8009110:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009112:	2b00      	cmp	r3, #0
 8009114:	d01f      	beq.n	8009156 <_dtoa_r+0x82e>
 8009116:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009118:	2b00      	cmp	r3, #0
 800911a:	d05a      	beq.n	80091d2 <_dtoa_r+0x8aa>
 800911c:	2e00      	cmp	r6, #0
 800911e:	dd11      	ble.n	8009144 <_dtoa_r+0x81c>
 8009120:	0029      	movs	r1, r5
 8009122:	0032      	movs	r2, r6
 8009124:	0038      	movs	r0, r7
 8009126:	f001 fa05 	bl	800a534 <__pow5mult>
 800912a:	9a04      	ldr	r2, [sp, #16]
 800912c:	0001      	movs	r1, r0
 800912e:	0005      	movs	r5, r0
 8009130:	0038      	movs	r0, r7
 8009132:	f001 f94f 	bl	800a3d4 <__multiply>
 8009136:	9904      	ldr	r1, [sp, #16]
 8009138:	9007      	str	r0, [sp, #28]
 800913a:	0038      	movs	r0, r7
 800913c:	f001 f838 	bl	800a1b0 <_Bfree>
 8009140:	9b07      	ldr	r3, [sp, #28]
 8009142:	9304      	str	r3, [sp, #16]
 8009144:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009146:	1b9a      	subs	r2, r3, r6
 8009148:	42b3      	cmp	r3, r6
 800914a:	d004      	beq.n	8009156 <_dtoa_r+0x82e>
 800914c:	0038      	movs	r0, r7
 800914e:	9904      	ldr	r1, [sp, #16]
 8009150:	f001 f9f0 	bl	800a534 <__pow5mult>
 8009154:	9004      	str	r0, [sp, #16]
 8009156:	2101      	movs	r1, #1
 8009158:	0038      	movs	r0, r7
 800915a:	f001 f925 	bl	800a3a8 <__i2b>
 800915e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009160:	0006      	movs	r6, r0
 8009162:	2b00      	cmp	r3, #0
 8009164:	dd37      	ble.n	80091d6 <_dtoa_r+0x8ae>
 8009166:	001a      	movs	r2, r3
 8009168:	0001      	movs	r1, r0
 800916a:	0038      	movs	r0, r7
 800916c:	f001 f9e2 	bl	800a534 <__pow5mult>
 8009170:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009172:	0006      	movs	r6, r0
 8009174:	2b01      	cmp	r3, #1
 8009176:	dd33      	ble.n	80091e0 <_dtoa_r+0x8b8>
 8009178:	2300      	movs	r3, #0
 800917a:	9307      	str	r3, [sp, #28]
 800917c:	6933      	ldr	r3, [r6, #16]
 800917e:	3303      	adds	r3, #3
 8009180:	009b      	lsls	r3, r3, #2
 8009182:	18f3      	adds	r3, r6, r3
 8009184:	6858      	ldr	r0, [r3, #4]
 8009186:	f001 f8c7 	bl	800a318 <__hi0bits>
 800918a:	2320      	movs	r3, #32
 800918c:	1a18      	subs	r0, r3, r0
 800918e:	e03f      	b.n	8009210 <_dtoa_r+0x8e8>
 8009190:	2336      	movs	r3, #54	; 0x36
 8009192:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009194:	1a9b      	subs	r3, r3, r2
 8009196:	e79d      	b.n	80090d4 <_dtoa_r+0x7ac>
 8009198:	9b06      	ldr	r3, [sp, #24]
 800919a:	1e5e      	subs	r6, r3, #1
 800919c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800919e:	42b3      	cmp	r3, r6
 80091a0:	db08      	blt.n	80091b4 <_dtoa_r+0x88c>
 80091a2:	1b9e      	subs	r6, r3, r6
 80091a4:	9b06      	ldr	r3, [sp, #24]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	da0c      	bge.n	80091c4 <_dtoa_r+0x89c>
 80091aa:	9b08      	ldr	r3, [sp, #32]
 80091ac:	9a06      	ldr	r2, [sp, #24]
 80091ae:	1a9c      	subs	r4, r3, r2
 80091b0:	2300      	movs	r3, #0
 80091b2:	e791      	b.n	80090d8 <_dtoa_r+0x7b0>
 80091b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80091b6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80091b8:	1af3      	subs	r3, r6, r3
 80091ba:	18d3      	adds	r3, r2, r3
 80091bc:	960e      	str	r6, [sp, #56]	; 0x38
 80091be:	9314      	str	r3, [sp, #80]	; 0x50
 80091c0:	2600      	movs	r6, #0
 80091c2:	e7ef      	b.n	80091a4 <_dtoa_r+0x87c>
 80091c4:	9c08      	ldr	r4, [sp, #32]
 80091c6:	9b06      	ldr	r3, [sp, #24]
 80091c8:	e786      	b.n	80090d8 <_dtoa_r+0x7b0>
 80091ca:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80091cc:	9c08      	ldr	r4, [sp, #32]
 80091ce:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80091d0:	e78d      	b.n	80090ee <_dtoa_r+0x7c6>
 80091d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80091d4:	e7ba      	b.n	800914c <_dtoa_r+0x824>
 80091d6:	2300      	movs	r3, #0
 80091d8:	9307      	str	r3, [sp, #28]
 80091da:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80091dc:	2b01      	cmp	r3, #1
 80091de:	dc13      	bgt.n	8009208 <_dtoa_r+0x8e0>
 80091e0:	2300      	movs	r3, #0
 80091e2:	9307      	str	r3, [sp, #28]
 80091e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d10e      	bne.n	8009208 <_dtoa_r+0x8e0>
 80091ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091ec:	031b      	lsls	r3, r3, #12
 80091ee:	d10b      	bne.n	8009208 <_dtoa_r+0x8e0>
 80091f0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80091f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80091f4:	4213      	tst	r3, r2
 80091f6:	d007      	beq.n	8009208 <_dtoa_r+0x8e0>
 80091f8:	9b08      	ldr	r3, [sp, #32]
 80091fa:	3301      	adds	r3, #1
 80091fc:	9308      	str	r3, [sp, #32]
 80091fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009200:	3301      	adds	r3, #1
 8009202:	930d      	str	r3, [sp, #52]	; 0x34
 8009204:	2301      	movs	r3, #1
 8009206:	9307      	str	r3, [sp, #28]
 8009208:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800920a:	2001      	movs	r0, #1
 800920c:	2b00      	cmp	r3, #0
 800920e:	d1b5      	bne.n	800917c <_dtoa_r+0x854>
 8009210:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009212:	221f      	movs	r2, #31
 8009214:	1818      	adds	r0, r3, r0
 8009216:	0003      	movs	r3, r0
 8009218:	4013      	ands	r3, r2
 800921a:	4210      	tst	r0, r2
 800921c:	d046      	beq.n	80092ac <_dtoa_r+0x984>
 800921e:	3201      	adds	r2, #1
 8009220:	1ad2      	subs	r2, r2, r3
 8009222:	2a04      	cmp	r2, #4
 8009224:	dd3f      	ble.n	80092a6 <_dtoa_r+0x97e>
 8009226:	221c      	movs	r2, #28
 8009228:	1ad3      	subs	r3, r2, r3
 800922a:	9a08      	ldr	r2, [sp, #32]
 800922c:	18e4      	adds	r4, r4, r3
 800922e:	18d2      	adds	r2, r2, r3
 8009230:	9208      	str	r2, [sp, #32]
 8009232:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009234:	18d3      	adds	r3, r2, r3
 8009236:	930d      	str	r3, [sp, #52]	; 0x34
 8009238:	9b08      	ldr	r3, [sp, #32]
 800923a:	2b00      	cmp	r3, #0
 800923c:	dd05      	ble.n	800924a <_dtoa_r+0x922>
 800923e:	001a      	movs	r2, r3
 8009240:	0038      	movs	r0, r7
 8009242:	9904      	ldr	r1, [sp, #16]
 8009244:	f001 f9d2 	bl	800a5ec <__lshift>
 8009248:	9004      	str	r0, [sp, #16]
 800924a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800924c:	2b00      	cmp	r3, #0
 800924e:	dd05      	ble.n	800925c <_dtoa_r+0x934>
 8009250:	0031      	movs	r1, r6
 8009252:	001a      	movs	r2, r3
 8009254:	0038      	movs	r0, r7
 8009256:	f001 f9c9 	bl	800a5ec <__lshift>
 800925a:	0006      	movs	r6, r0
 800925c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800925e:	2b00      	cmp	r3, #0
 8009260:	d026      	beq.n	80092b0 <_dtoa_r+0x988>
 8009262:	0031      	movs	r1, r6
 8009264:	9804      	ldr	r0, [sp, #16]
 8009266:	f001 fa31 	bl	800a6cc <__mcmp>
 800926a:	2800      	cmp	r0, #0
 800926c:	da20      	bge.n	80092b0 <_dtoa_r+0x988>
 800926e:	9b02      	ldr	r3, [sp, #8]
 8009270:	220a      	movs	r2, #10
 8009272:	3b01      	subs	r3, #1
 8009274:	9302      	str	r3, [sp, #8]
 8009276:	0038      	movs	r0, r7
 8009278:	2300      	movs	r3, #0
 800927a:	9904      	ldr	r1, [sp, #16]
 800927c:	f000 ffbc 	bl	800a1f8 <__multadd>
 8009280:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009282:	9004      	str	r0, [sp, #16]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d100      	bne.n	800928a <_dtoa_r+0x962>
 8009288:	e160      	b.n	800954c <_dtoa_r+0xc24>
 800928a:	2300      	movs	r3, #0
 800928c:	0029      	movs	r1, r5
 800928e:	220a      	movs	r2, #10
 8009290:	0038      	movs	r0, r7
 8009292:	f000 ffb1 	bl	800a1f8 <__multadd>
 8009296:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009298:	0005      	movs	r5, r0
 800929a:	2b00      	cmp	r3, #0
 800929c:	dc47      	bgt.n	800932e <_dtoa_r+0xa06>
 800929e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80092a0:	2b02      	cmp	r3, #2
 80092a2:	dc0d      	bgt.n	80092c0 <_dtoa_r+0x998>
 80092a4:	e043      	b.n	800932e <_dtoa_r+0xa06>
 80092a6:	2a04      	cmp	r2, #4
 80092a8:	d0c6      	beq.n	8009238 <_dtoa_r+0x910>
 80092aa:	0013      	movs	r3, r2
 80092ac:	331c      	adds	r3, #28
 80092ae:	e7bc      	b.n	800922a <_dtoa_r+0x902>
 80092b0:	9b06      	ldr	r3, [sp, #24]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	dc35      	bgt.n	8009322 <_dtoa_r+0x9fa>
 80092b6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80092b8:	2b02      	cmp	r3, #2
 80092ba:	dd32      	ble.n	8009322 <_dtoa_r+0x9fa>
 80092bc:	9b06      	ldr	r3, [sp, #24]
 80092be:	930c      	str	r3, [sp, #48]	; 0x30
 80092c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d10c      	bne.n	80092e0 <_dtoa_r+0x9b8>
 80092c6:	0031      	movs	r1, r6
 80092c8:	2205      	movs	r2, #5
 80092ca:	0038      	movs	r0, r7
 80092cc:	f000 ff94 	bl	800a1f8 <__multadd>
 80092d0:	0006      	movs	r6, r0
 80092d2:	0001      	movs	r1, r0
 80092d4:	9804      	ldr	r0, [sp, #16]
 80092d6:	f001 f9f9 	bl	800a6cc <__mcmp>
 80092da:	2800      	cmp	r0, #0
 80092dc:	dd00      	ble.n	80092e0 <_dtoa_r+0x9b8>
 80092de:	e59f      	b.n	8008e20 <_dtoa_r+0x4f8>
 80092e0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80092e2:	43db      	mvns	r3, r3
 80092e4:	9302      	str	r3, [sp, #8]
 80092e6:	9b05      	ldr	r3, [sp, #20]
 80092e8:	9307      	str	r3, [sp, #28]
 80092ea:	2400      	movs	r4, #0
 80092ec:	0031      	movs	r1, r6
 80092ee:	0038      	movs	r0, r7
 80092f0:	f000 ff5e 	bl	800a1b0 <_Bfree>
 80092f4:	2d00      	cmp	r5, #0
 80092f6:	d100      	bne.n	80092fa <_dtoa_r+0x9d2>
 80092f8:	e6b0      	b.n	800905c <_dtoa_r+0x734>
 80092fa:	2c00      	cmp	r4, #0
 80092fc:	d005      	beq.n	800930a <_dtoa_r+0x9e2>
 80092fe:	42ac      	cmp	r4, r5
 8009300:	d003      	beq.n	800930a <_dtoa_r+0x9e2>
 8009302:	0021      	movs	r1, r4
 8009304:	0038      	movs	r0, r7
 8009306:	f000 ff53 	bl	800a1b0 <_Bfree>
 800930a:	0029      	movs	r1, r5
 800930c:	0038      	movs	r0, r7
 800930e:	f000 ff4f 	bl	800a1b0 <_Bfree>
 8009312:	e6a3      	b.n	800905c <_dtoa_r+0x734>
 8009314:	2600      	movs	r6, #0
 8009316:	0035      	movs	r5, r6
 8009318:	e7e2      	b.n	80092e0 <_dtoa_r+0x9b8>
 800931a:	9602      	str	r6, [sp, #8]
 800931c:	9e07      	ldr	r6, [sp, #28]
 800931e:	0035      	movs	r5, r6
 8009320:	e57e      	b.n	8008e20 <_dtoa_r+0x4f8>
 8009322:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009324:	2b00      	cmp	r3, #0
 8009326:	d100      	bne.n	800932a <_dtoa_r+0xa02>
 8009328:	e0c8      	b.n	80094bc <_dtoa_r+0xb94>
 800932a:	9b06      	ldr	r3, [sp, #24]
 800932c:	930c      	str	r3, [sp, #48]	; 0x30
 800932e:	2c00      	cmp	r4, #0
 8009330:	dd05      	ble.n	800933e <_dtoa_r+0xa16>
 8009332:	0029      	movs	r1, r5
 8009334:	0022      	movs	r2, r4
 8009336:	0038      	movs	r0, r7
 8009338:	f001 f958 	bl	800a5ec <__lshift>
 800933c:	0005      	movs	r5, r0
 800933e:	9b07      	ldr	r3, [sp, #28]
 8009340:	0028      	movs	r0, r5
 8009342:	2b00      	cmp	r3, #0
 8009344:	d01f      	beq.n	8009386 <_dtoa_r+0xa5e>
 8009346:	0038      	movs	r0, r7
 8009348:	6869      	ldr	r1, [r5, #4]
 800934a:	f000 feed 	bl	800a128 <_Balloc>
 800934e:	1e04      	subs	r4, r0, #0
 8009350:	d10c      	bne.n	800936c <_dtoa_r+0xa44>
 8009352:	0002      	movs	r2, r0
 8009354:	4b03      	ldr	r3, [pc, #12]	; (8009364 <_dtoa_r+0xa3c>)
 8009356:	4904      	ldr	r1, [pc, #16]	; (8009368 <_dtoa_r+0xa40>)
 8009358:	f7ff fafb 	bl	8008952 <_dtoa_r+0x2a>
 800935c:	40240000 	.word	0x40240000
 8009360:	00000433 	.word	0x00000433
 8009364:	0800c57c 	.word	0x0800c57c
 8009368:	000002ea 	.word	0x000002ea
 800936c:	0029      	movs	r1, r5
 800936e:	692b      	ldr	r3, [r5, #16]
 8009370:	310c      	adds	r1, #12
 8009372:	1c9a      	adds	r2, r3, #2
 8009374:	0092      	lsls	r2, r2, #2
 8009376:	300c      	adds	r0, #12
 8009378:	f7fd fa8e 	bl	8006898 <memcpy>
 800937c:	2201      	movs	r2, #1
 800937e:	0021      	movs	r1, r4
 8009380:	0038      	movs	r0, r7
 8009382:	f001 f933 	bl	800a5ec <__lshift>
 8009386:	002c      	movs	r4, r5
 8009388:	0005      	movs	r5, r0
 800938a:	9b05      	ldr	r3, [sp, #20]
 800938c:	9308      	str	r3, [sp, #32]
 800938e:	0031      	movs	r1, r6
 8009390:	9804      	ldr	r0, [sp, #16]
 8009392:	f7ff fa3d 	bl	8008810 <quorem>
 8009396:	0003      	movs	r3, r0
 8009398:	0021      	movs	r1, r4
 800939a:	3330      	adds	r3, #48	; 0x30
 800939c:	900e      	str	r0, [sp, #56]	; 0x38
 800939e:	9804      	ldr	r0, [sp, #16]
 80093a0:	9306      	str	r3, [sp, #24]
 80093a2:	f001 f993 	bl	800a6cc <__mcmp>
 80093a6:	002a      	movs	r2, r5
 80093a8:	900f      	str	r0, [sp, #60]	; 0x3c
 80093aa:	0031      	movs	r1, r6
 80093ac:	0038      	movs	r0, r7
 80093ae:	f001 f9a9 	bl	800a704 <__mdiff>
 80093b2:	68c3      	ldr	r3, [r0, #12]
 80093b4:	9007      	str	r0, [sp, #28]
 80093b6:	9310      	str	r3, [sp, #64]	; 0x40
 80093b8:	2301      	movs	r3, #1
 80093ba:	930d      	str	r3, [sp, #52]	; 0x34
 80093bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d104      	bne.n	80093cc <_dtoa_r+0xaa4>
 80093c2:	0001      	movs	r1, r0
 80093c4:	9804      	ldr	r0, [sp, #16]
 80093c6:	f001 f981 	bl	800a6cc <__mcmp>
 80093ca:	900d      	str	r0, [sp, #52]	; 0x34
 80093cc:	0038      	movs	r0, r7
 80093ce:	9907      	ldr	r1, [sp, #28]
 80093d0:	f000 feee 	bl	800a1b0 <_Bfree>
 80093d4:	2301      	movs	r3, #1
 80093d6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80093d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80093da:	4018      	ands	r0, r3
 80093dc:	9b08      	ldr	r3, [sp, #32]
 80093de:	3301      	adds	r3, #1
 80093e0:	9307      	str	r3, [sp, #28]
 80093e2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80093e4:	4313      	orrs	r3, r2
 80093e6:	4303      	orrs	r3, r0
 80093e8:	d10c      	bne.n	8009404 <_dtoa_r+0xadc>
 80093ea:	9b06      	ldr	r3, [sp, #24]
 80093ec:	2b39      	cmp	r3, #57	; 0x39
 80093ee:	d025      	beq.n	800943c <_dtoa_r+0xb14>
 80093f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	dd02      	ble.n	80093fc <_dtoa_r+0xad4>
 80093f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80093f8:	3331      	adds	r3, #49	; 0x31
 80093fa:	9306      	str	r3, [sp, #24]
 80093fc:	9b08      	ldr	r3, [sp, #32]
 80093fe:	9a06      	ldr	r2, [sp, #24]
 8009400:	701a      	strb	r2, [r3, #0]
 8009402:	e773      	b.n	80092ec <_dtoa_r+0x9c4>
 8009404:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009406:	2b00      	cmp	r3, #0
 8009408:	db03      	blt.n	8009412 <_dtoa_r+0xaea>
 800940a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800940c:	4313      	orrs	r3, r2
 800940e:	4303      	orrs	r3, r0
 8009410:	d11f      	bne.n	8009452 <_dtoa_r+0xb2a>
 8009412:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009414:	2b00      	cmp	r3, #0
 8009416:	ddf1      	ble.n	80093fc <_dtoa_r+0xad4>
 8009418:	9904      	ldr	r1, [sp, #16]
 800941a:	2201      	movs	r2, #1
 800941c:	0038      	movs	r0, r7
 800941e:	f001 f8e5 	bl	800a5ec <__lshift>
 8009422:	0031      	movs	r1, r6
 8009424:	9004      	str	r0, [sp, #16]
 8009426:	f001 f951 	bl	800a6cc <__mcmp>
 800942a:	2800      	cmp	r0, #0
 800942c:	dc03      	bgt.n	8009436 <_dtoa_r+0xb0e>
 800942e:	d1e5      	bne.n	80093fc <_dtoa_r+0xad4>
 8009430:	9b06      	ldr	r3, [sp, #24]
 8009432:	07db      	lsls	r3, r3, #31
 8009434:	d5e2      	bpl.n	80093fc <_dtoa_r+0xad4>
 8009436:	9b06      	ldr	r3, [sp, #24]
 8009438:	2b39      	cmp	r3, #57	; 0x39
 800943a:	d1dc      	bne.n	80093f6 <_dtoa_r+0xace>
 800943c:	2339      	movs	r3, #57	; 0x39
 800943e:	9a08      	ldr	r2, [sp, #32]
 8009440:	7013      	strb	r3, [r2, #0]
 8009442:	9b07      	ldr	r3, [sp, #28]
 8009444:	9307      	str	r3, [sp, #28]
 8009446:	3b01      	subs	r3, #1
 8009448:	781a      	ldrb	r2, [r3, #0]
 800944a:	2a39      	cmp	r2, #57	; 0x39
 800944c:	d06c      	beq.n	8009528 <_dtoa_r+0xc00>
 800944e:	3201      	adds	r2, #1
 8009450:	e7d6      	b.n	8009400 <_dtoa_r+0xad8>
 8009452:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009454:	2b00      	cmp	r3, #0
 8009456:	dd07      	ble.n	8009468 <_dtoa_r+0xb40>
 8009458:	9b06      	ldr	r3, [sp, #24]
 800945a:	2b39      	cmp	r3, #57	; 0x39
 800945c:	d0ee      	beq.n	800943c <_dtoa_r+0xb14>
 800945e:	9b06      	ldr	r3, [sp, #24]
 8009460:	9a08      	ldr	r2, [sp, #32]
 8009462:	3301      	adds	r3, #1
 8009464:	7013      	strb	r3, [r2, #0]
 8009466:	e741      	b.n	80092ec <_dtoa_r+0x9c4>
 8009468:	9b08      	ldr	r3, [sp, #32]
 800946a:	9a06      	ldr	r2, [sp, #24]
 800946c:	701a      	strb	r2, [r3, #0]
 800946e:	2301      	movs	r3, #1
 8009470:	9a05      	ldr	r2, [sp, #20]
 8009472:	1a9b      	subs	r3, r3, r2
 8009474:	9a08      	ldr	r2, [sp, #32]
 8009476:	189b      	adds	r3, r3, r2
 8009478:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800947a:	429a      	cmp	r2, r3
 800947c:	d03e      	beq.n	80094fc <_dtoa_r+0xbd4>
 800947e:	2300      	movs	r3, #0
 8009480:	220a      	movs	r2, #10
 8009482:	9904      	ldr	r1, [sp, #16]
 8009484:	0038      	movs	r0, r7
 8009486:	f000 feb7 	bl	800a1f8 <__multadd>
 800948a:	2300      	movs	r3, #0
 800948c:	9004      	str	r0, [sp, #16]
 800948e:	220a      	movs	r2, #10
 8009490:	0021      	movs	r1, r4
 8009492:	0038      	movs	r0, r7
 8009494:	42ac      	cmp	r4, r5
 8009496:	d106      	bne.n	80094a6 <_dtoa_r+0xb7e>
 8009498:	f000 feae 	bl	800a1f8 <__multadd>
 800949c:	0004      	movs	r4, r0
 800949e:	0005      	movs	r5, r0
 80094a0:	9b07      	ldr	r3, [sp, #28]
 80094a2:	9308      	str	r3, [sp, #32]
 80094a4:	e773      	b.n	800938e <_dtoa_r+0xa66>
 80094a6:	f000 fea7 	bl	800a1f8 <__multadd>
 80094aa:	0029      	movs	r1, r5
 80094ac:	0004      	movs	r4, r0
 80094ae:	2300      	movs	r3, #0
 80094b0:	220a      	movs	r2, #10
 80094b2:	0038      	movs	r0, r7
 80094b4:	f000 fea0 	bl	800a1f8 <__multadd>
 80094b8:	0005      	movs	r5, r0
 80094ba:	e7f1      	b.n	80094a0 <_dtoa_r+0xb78>
 80094bc:	9b06      	ldr	r3, [sp, #24]
 80094be:	930c      	str	r3, [sp, #48]	; 0x30
 80094c0:	2400      	movs	r4, #0
 80094c2:	0031      	movs	r1, r6
 80094c4:	9804      	ldr	r0, [sp, #16]
 80094c6:	f7ff f9a3 	bl	8008810 <quorem>
 80094ca:	9b05      	ldr	r3, [sp, #20]
 80094cc:	3030      	adds	r0, #48	; 0x30
 80094ce:	5518      	strb	r0, [r3, r4]
 80094d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80094d2:	3401      	adds	r4, #1
 80094d4:	9006      	str	r0, [sp, #24]
 80094d6:	42a3      	cmp	r3, r4
 80094d8:	dd07      	ble.n	80094ea <_dtoa_r+0xbc2>
 80094da:	2300      	movs	r3, #0
 80094dc:	220a      	movs	r2, #10
 80094de:	0038      	movs	r0, r7
 80094e0:	9904      	ldr	r1, [sp, #16]
 80094e2:	f000 fe89 	bl	800a1f8 <__multadd>
 80094e6:	9004      	str	r0, [sp, #16]
 80094e8:	e7eb      	b.n	80094c2 <_dtoa_r+0xb9a>
 80094ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80094ec:	2001      	movs	r0, #1
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	dd00      	ble.n	80094f4 <_dtoa_r+0xbcc>
 80094f2:	0018      	movs	r0, r3
 80094f4:	2400      	movs	r4, #0
 80094f6:	9b05      	ldr	r3, [sp, #20]
 80094f8:	181b      	adds	r3, r3, r0
 80094fa:	9307      	str	r3, [sp, #28]
 80094fc:	9904      	ldr	r1, [sp, #16]
 80094fe:	2201      	movs	r2, #1
 8009500:	0038      	movs	r0, r7
 8009502:	f001 f873 	bl	800a5ec <__lshift>
 8009506:	0031      	movs	r1, r6
 8009508:	9004      	str	r0, [sp, #16]
 800950a:	f001 f8df 	bl	800a6cc <__mcmp>
 800950e:	2800      	cmp	r0, #0
 8009510:	dc97      	bgt.n	8009442 <_dtoa_r+0xb1a>
 8009512:	d102      	bne.n	800951a <_dtoa_r+0xbf2>
 8009514:	9b06      	ldr	r3, [sp, #24]
 8009516:	07db      	lsls	r3, r3, #31
 8009518:	d493      	bmi.n	8009442 <_dtoa_r+0xb1a>
 800951a:	9b07      	ldr	r3, [sp, #28]
 800951c:	9307      	str	r3, [sp, #28]
 800951e:	3b01      	subs	r3, #1
 8009520:	781a      	ldrb	r2, [r3, #0]
 8009522:	2a30      	cmp	r2, #48	; 0x30
 8009524:	d0fa      	beq.n	800951c <_dtoa_r+0xbf4>
 8009526:	e6e1      	b.n	80092ec <_dtoa_r+0x9c4>
 8009528:	9a05      	ldr	r2, [sp, #20]
 800952a:	429a      	cmp	r2, r3
 800952c:	d18a      	bne.n	8009444 <_dtoa_r+0xb1c>
 800952e:	9b02      	ldr	r3, [sp, #8]
 8009530:	3301      	adds	r3, #1
 8009532:	9302      	str	r3, [sp, #8]
 8009534:	2331      	movs	r3, #49	; 0x31
 8009536:	e795      	b.n	8009464 <_dtoa_r+0xb3c>
 8009538:	4b08      	ldr	r3, [pc, #32]	; (800955c <_dtoa_r+0xc34>)
 800953a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800953c:	9305      	str	r3, [sp, #20]
 800953e:	4b08      	ldr	r3, [pc, #32]	; (8009560 <_dtoa_r+0xc38>)
 8009540:	2a00      	cmp	r2, #0
 8009542:	d001      	beq.n	8009548 <_dtoa_r+0xc20>
 8009544:	f7ff fa3b 	bl	80089be <_dtoa_r+0x96>
 8009548:	f7ff fa3b 	bl	80089c2 <_dtoa_r+0x9a>
 800954c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800954e:	2b00      	cmp	r3, #0
 8009550:	dcb6      	bgt.n	80094c0 <_dtoa_r+0xb98>
 8009552:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009554:	2b02      	cmp	r3, #2
 8009556:	dd00      	ble.n	800955a <_dtoa_r+0xc32>
 8009558:	e6b2      	b.n	80092c0 <_dtoa_r+0x998>
 800955a:	e7b1      	b.n	80094c0 <_dtoa_r+0xb98>
 800955c:	0800c4f9 	.word	0x0800c4f9
 8009560:	0800c501 	.word	0x0800c501

08009564 <__sflush_r>:
 8009564:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009566:	898b      	ldrh	r3, [r1, #12]
 8009568:	0005      	movs	r5, r0
 800956a:	000c      	movs	r4, r1
 800956c:	071a      	lsls	r2, r3, #28
 800956e:	d45f      	bmi.n	8009630 <__sflush_r+0xcc>
 8009570:	684a      	ldr	r2, [r1, #4]
 8009572:	2a00      	cmp	r2, #0
 8009574:	dc04      	bgt.n	8009580 <__sflush_r+0x1c>
 8009576:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8009578:	2a00      	cmp	r2, #0
 800957a:	dc01      	bgt.n	8009580 <__sflush_r+0x1c>
 800957c:	2000      	movs	r0, #0
 800957e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009580:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8009582:	2f00      	cmp	r7, #0
 8009584:	d0fa      	beq.n	800957c <__sflush_r+0x18>
 8009586:	2200      	movs	r2, #0
 8009588:	2180      	movs	r1, #128	; 0x80
 800958a:	682e      	ldr	r6, [r5, #0]
 800958c:	602a      	str	r2, [r5, #0]
 800958e:	001a      	movs	r2, r3
 8009590:	0149      	lsls	r1, r1, #5
 8009592:	400a      	ands	r2, r1
 8009594:	420b      	tst	r3, r1
 8009596:	d034      	beq.n	8009602 <__sflush_r+0x9e>
 8009598:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800959a:	89a3      	ldrh	r3, [r4, #12]
 800959c:	075b      	lsls	r3, r3, #29
 800959e:	d506      	bpl.n	80095ae <__sflush_r+0x4a>
 80095a0:	6863      	ldr	r3, [r4, #4]
 80095a2:	1ac0      	subs	r0, r0, r3
 80095a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d001      	beq.n	80095ae <__sflush_r+0x4a>
 80095aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80095ac:	1ac0      	subs	r0, r0, r3
 80095ae:	0002      	movs	r2, r0
 80095b0:	6a21      	ldr	r1, [r4, #32]
 80095b2:	2300      	movs	r3, #0
 80095b4:	0028      	movs	r0, r5
 80095b6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80095b8:	47b8      	blx	r7
 80095ba:	89a1      	ldrh	r1, [r4, #12]
 80095bc:	1c43      	adds	r3, r0, #1
 80095be:	d106      	bne.n	80095ce <__sflush_r+0x6a>
 80095c0:	682b      	ldr	r3, [r5, #0]
 80095c2:	2b1d      	cmp	r3, #29
 80095c4:	d831      	bhi.n	800962a <__sflush_r+0xc6>
 80095c6:	4a2c      	ldr	r2, [pc, #176]	; (8009678 <__sflush_r+0x114>)
 80095c8:	40da      	lsrs	r2, r3
 80095ca:	07d3      	lsls	r3, r2, #31
 80095cc:	d52d      	bpl.n	800962a <__sflush_r+0xc6>
 80095ce:	2300      	movs	r3, #0
 80095d0:	6063      	str	r3, [r4, #4]
 80095d2:	6923      	ldr	r3, [r4, #16]
 80095d4:	6023      	str	r3, [r4, #0]
 80095d6:	04cb      	lsls	r3, r1, #19
 80095d8:	d505      	bpl.n	80095e6 <__sflush_r+0x82>
 80095da:	1c43      	adds	r3, r0, #1
 80095dc:	d102      	bne.n	80095e4 <__sflush_r+0x80>
 80095de:	682b      	ldr	r3, [r5, #0]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d100      	bne.n	80095e6 <__sflush_r+0x82>
 80095e4:	6560      	str	r0, [r4, #84]	; 0x54
 80095e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80095e8:	602e      	str	r6, [r5, #0]
 80095ea:	2900      	cmp	r1, #0
 80095ec:	d0c6      	beq.n	800957c <__sflush_r+0x18>
 80095ee:	0023      	movs	r3, r4
 80095f0:	3344      	adds	r3, #68	; 0x44
 80095f2:	4299      	cmp	r1, r3
 80095f4:	d002      	beq.n	80095fc <__sflush_r+0x98>
 80095f6:	0028      	movs	r0, r5
 80095f8:	f7fd f960 	bl	80068bc <_free_r>
 80095fc:	2000      	movs	r0, #0
 80095fe:	6360      	str	r0, [r4, #52]	; 0x34
 8009600:	e7bd      	b.n	800957e <__sflush_r+0x1a>
 8009602:	2301      	movs	r3, #1
 8009604:	0028      	movs	r0, r5
 8009606:	6a21      	ldr	r1, [r4, #32]
 8009608:	47b8      	blx	r7
 800960a:	1c43      	adds	r3, r0, #1
 800960c:	d1c5      	bne.n	800959a <__sflush_r+0x36>
 800960e:	682b      	ldr	r3, [r5, #0]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d0c2      	beq.n	800959a <__sflush_r+0x36>
 8009614:	2b1d      	cmp	r3, #29
 8009616:	d001      	beq.n	800961c <__sflush_r+0xb8>
 8009618:	2b16      	cmp	r3, #22
 800961a:	d101      	bne.n	8009620 <__sflush_r+0xbc>
 800961c:	602e      	str	r6, [r5, #0]
 800961e:	e7ad      	b.n	800957c <__sflush_r+0x18>
 8009620:	2340      	movs	r3, #64	; 0x40
 8009622:	89a2      	ldrh	r2, [r4, #12]
 8009624:	4313      	orrs	r3, r2
 8009626:	81a3      	strh	r3, [r4, #12]
 8009628:	e7a9      	b.n	800957e <__sflush_r+0x1a>
 800962a:	2340      	movs	r3, #64	; 0x40
 800962c:	430b      	orrs	r3, r1
 800962e:	e7fa      	b.n	8009626 <__sflush_r+0xc2>
 8009630:	690f      	ldr	r7, [r1, #16]
 8009632:	2f00      	cmp	r7, #0
 8009634:	d0a2      	beq.n	800957c <__sflush_r+0x18>
 8009636:	680a      	ldr	r2, [r1, #0]
 8009638:	600f      	str	r7, [r1, #0]
 800963a:	1bd2      	subs	r2, r2, r7
 800963c:	9201      	str	r2, [sp, #4]
 800963e:	2200      	movs	r2, #0
 8009640:	079b      	lsls	r3, r3, #30
 8009642:	d100      	bne.n	8009646 <__sflush_r+0xe2>
 8009644:	694a      	ldr	r2, [r1, #20]
 8009646:	60a2      	str	r2, [r4, #8]
 8009648:	9b01      	ldr	r3, [sp, #4]
 800964a:	2b00      	cmp	r3, #0
 800964c:	dc00      	bgt.n	8009650 <__sflush_r+0xec>
 800964e:	e795      	b.n	800957c <__sflush_r+0x18>
 8009650:	003a      	movs	r2, r7
 8009652:	0028      	movs	r0, r5
 8009654:	9b01      	ldr	r3, [sp, #4]
 8009656:	6a21      	ldr	r1, [r4, #32]
 8009658:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800965a:	47b0      	blx	r6
 800965c:	2800      	cmp	r0, #0
 800965e:	dc06      	bgt.n	800966e <__sflush_r+0x10a>
 8009660:	2340      	movs	r3, #64	; 0x40
 8009662:	2001      	movs	r0, #1
 8009664:	89a2      	ldrh	r2, [r4, #12]
 8009666:	4240      	negs	r0, r0
 8009668:	4313      	orrs	r3, r2
 800966a:	81a3      	strh	r3, [r4, #12]
 800966c:	e787      	b.n	800957e <__sflush_r+0x1a>
 800966e:	9b01      	ldr	r3, [sp, #4]
 8009670:	183f      	adds	r7, r7, r0
 8009672:	1a1b      	subs	r3, r3, r0
 8009674:	9301      	str	r3, [sp, #4]
 8009676:	e7e7      	b.n	8009648 <__sflush_r+0xe4>
 8009678:	20400001 	.word	0x20400001

0800967c <_fflush_r>:
 800967c:	690b      	ldr	r3, [r1, #16]
 800967e:	b570      	push	{r4, r5, r6, lr}
 8009680:	0005      	movs	r5, r0
 8009682:	000c      	movs	r4, r1
 8009684:	2b00      	cmp	r3, #0
 8009686:	d102      	bne.n	800968e <_fflush_r+0x12>
 8009688:	2500      	movs	r5, #0
 800968a:	0028      	movs	r0, r5
 800968c:	bd70      	pop	{r4, r5, r6, pc}
 800968e:	2800      	cmp	r0, #0
 8009690:	d004      	beq.n	800969c <_fflush_r+0x20>
 8009692:	6983      	ldr	r3, [r0, #24]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d101      	bne.n	800969c <_fflush_r+0x20>
 8009698:	f000 f892 	bl	80097c0 <__sinit>
 800969c:	4b14      	ldr	r3, [pc, #80]	; (80096f0 <_fflush_r+0x74>)
 800969e:	429c      	cmp	r4, r3
 80096a0:	d11b      	bne.n	80096da <_fflush_r+0x5e>
 80096a2:	686c      	ldr	r4, [r5, #4]
 80096a4:	220c      	movs	r2, #12
 80096a6:	5ea3      	ldrsh	r3, [r4, r2]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d0ed      	beq.n	8009688 <_fflush_r+0xc>
 80096ac:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80096ae:	07d2      	lsls	r2, r2, #31
 80096b0:	d404      	bmi.n	80096bc <_fflush_r+0x40>
 80096b2:	059b      	lsls	r3, r3, #22
 80096b4:	d402      	bmi.n	80096bc <_fflush_r+0x40>
 80096b6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80096b8:	f000 fc99 	bl	8009fee <__retarget_lock_acquire_recursive>
 80096bc:	0028      	movs	r0, r5
 80096be:	0021      	movs	r1, r4
 80096c0:	f7ff ff50 	bl	8009564 <__sflush_r>
 80096c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80096c6:	0005      	movs	r5, r0
 80096c8:	07db      	lsls	r3, r3, #31
 80096ca:	d4de      	bmi.n	800968a <_fflush_r+0xe>
 80096cc:	89a3      	ldrh	r3, [r4, #12]
 80096ce:	059b      	lsls	r3, r3, #22
 80096d0:	d4db      	bmi.n	800968a <_fflush_r+0xe>
 80096d2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80096d4:	f000 fc8c 	bl	8009ff0 <__retarget_lock_release_recursive>
 80096d8:	e7d7      	b.n	800968a <_fflush_r+0xe>
 80096da:	4b06      	ldr	r3, [pc, #24]	; (80096f4 <_fflush_r+0x78>)
 80096dc:	429c      	cmp	r4, r3
 80096de:	d101      	bne.n	80096e4 <_fflush_r+0x68>
 80096e0:	68ac      	ldr	r4, [r5, #8]
 80096e2:	e7df      	b.n	80096a4 <_fflush_r+0x28>
 80096e4:	4b04      	ldr	r3, [pc, #16]	; (80096f8 <_fflush_r+0x7c>)
 80096e6:	429c      	cmp	r4, r3
 80096e8:	d1dc      	bne.n	80096a4 <_fflush_r+0x28>
 80096ea:	68ec      	ldr	r4, [r5, #12]
 80096ec:	e7da      	b.n	80096a4 <_fflush_r+0x28>
 80096ee:	46c0      	nop			; (mov r8, r8)
 80096f0:	0800c5b0 	.word	0x0800c5b0
 80096f4:	0800c5d0 	.word	0x0800c5d0
 80096f8:	0800c590 	.word	0x0800c590

080096fc <std>:
 80096fc:	2300      	movs	r3, #0
 80096fe:	b510      	push	{r4, lr}
 8009700:	0004      	movs	r4, r0
 8009702:	6003      	str	r3, [r0, #0]
 8009704:	6043      	str	r3, [r0, #4]
 8009706:	6083      	str	r3, [r0, #8]
 8009708:	8181      	strh	r1, [r0, #12]
 800970a:	6643      	str	r3, [r0, #100]	; 0x64
 800970c:	0019      	movs	r1, r3
 800970e:	81c2      	strh	r2, [r0, #14]
 8009710:	6103      	str	r3, [r0, #16]
 8009712:	6143      	str	r3, [r0, #20]
 8009714:	6183      	str	r3, [r0, #24]
 8009716:	2208      	movs	r2, #8
 8009718:	305c      	adds	r0, #92	; 0x5c
 800971a:	f7fd f8c6 	bl	80068aa <memset>
 800971e:	4b05      	ldr	r3, [pc, #20]	; (8009734 <std+0x38>)
 8009720:	6263      	str	r3, [r4, #36]	; 0x24
 8009722:	4b05      	ldr	r3, [pc, #20]	; (8009738 <std+0x3c>)
 8009724:	6224      	str	r4, [r4, #32]
 8009726:	62a3      	str	r3, [r4, #40]	; 0x28
 8009728:	4b04      	ldr	r3, [pc, #16]	; (800973c <std+0x40>)
 800972a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800972c:	4b04      	ldr	r3, [pc, #16]	; (8009740 <std+0x44>)
 800972e:	6323      	str	r3, [r4, #48]	; 0x30
 8009730:	bd10      	pop	{r4, pc}
 8009732:	46c0      	nop			; (mov r8, r8)
 8009734:	0800b14d 	.word	0x0800b14d
 8009738:	0800b175 	.word	0x0800b175
 800973c:	0800b1ad 	.word	0x0800b1ad
 8009740:	0800b1d9 	.word	0x0800b1d9

08009744 <_cleanup_r>:
 8009744:	b510      	push	{r4, lr}
 8009746:	4902      	ldr	r1, [pc, #8]	; (8009750 <_cleanup_r+0xc>)
 8009748:	f000 f8ba 	bl	80098c0 <_fwalk_reent>
 800974c:	bd10      	pop	{r4, pc}
 800974e:	46c0      	nop			; (mov r8, r8)
 8009750:	0800967d 	.word	0x0800967d

08009754 <__sfmoreglue>:
 8009754:	b570      	push	{r4, r5, r6, lr}
 8009756:	2568      	movs	r5, #104	; 0x68
 8009758:	1e4a      	subs	r2, r1, #1
 800975a:	4355      	muls	r5, r2
 800975c:	000e      	movs	r6, r1
 800975e:	0029      	movs	r1, r5
 8009760:	3174      	adds	r1, #116	; 0x74
 8009762:	f7fd f8f5 	bl	8006950 <_malloc_r>
 8009766:	1e04      	subs	r4, r0, #0
 8009768:	d008      	beq.n	800977c <__sfmoreglue+0x28>
 800976a:	2100      	movs	r1, #0
 800976c:	002a      	movs	r2, r5
 800976e:	6001      	str	r1, [r0, #0]
 8009770:	6046      	str	r6, [r0, #4]
 8009772:	300c      	adds	r0, #12
 8009774:	60a0      	str	r0, [r4, #8]
 8009776:	3268      	adds	r2, #104	; 0x68
 8009778:	f7fd f897 	bl	80068aa <memset>
 800977c:	0020      	movs	r0, r4
 800977e:	bd70      	pop	{r4, r5, r6, pc}

08009780 <__sfp_lock_acquire>:
 8009780:	b510      	push	{r4, lr}
 8009782:	4802      	ldr	r0, [pc, #8]	; (800978c <__sfp_lock_acquire+0xc>)
 8009784:	f000 fc33 	bl	8009fee <__retarget_lock_acquire_recursive>
 8009788:	bd10      	pop	{r4, pc}
 800978a:	46c0      	nop			; (mov r8, r8)
 800978c:	200003f4 	.word	0x200003f4

08009790 <__sfp_lock_release>:
 8009790:	b510      	push	{r4, lr}
 8009792:	4802      	ldr	r0, [pc, #8]	; (800979c <__sfp_lock_release+0xc>)
 8009794:	f000 fc2c 	bl	8009ff0 <__retarget_lock_release_recursive>
 8009798:	bd10      	pop	{r4, pc}
 800979a:	46c0      	nop			; (mov r8, r8)
 800979c:	200003f4 	.word	0x200003f4

080097a0 <__sinit_lock_acquire>:
 80097a0:	b510      	push	{r4, lr}
 80097a2:	4802      	ldr	r0, [pc, #8]	; (80097ac <__sinit_lock_acquire+0xc>)
 80097a4:	f000 fc23 	bl	8009fee <__retarget_lock_acquire_recursive>
 80097a8:	bd10      	pop	{r4, pc}
 80097aa:	46c0      	nop			; (mov r8, r8)
 80097ac:	200003ef 	.word	0x200003ef

080097b0 <__sinit_lock_release>:
 80097b0:	b510      	push	{r4, lr}
 80097b2:	4802      	ldr	r0, [pc, #8]	; (80097bc <__sinit_lock_release+0xc>)
 80097b4:	f000 fc1c 	bl	8009ff0 <__retarget_lock_release_recursive>
 80097b8:	bd10      	pop	{r4, pc}
 80097ba:	46c0      	nop			; (mov r8, r8)
 80097bc:	200003ef 	.word	0x200003ef

080097c0 <__sinit>:
 80097c0:	b513      	push	{r0, r1, r4, lr}
 80097c2:	0004      	movs	r4, r0
 80097c4:	f7ff ffec 	bl	80097a0 <__sinit_lock_acquire>
 80097c8:	69a3      	ldr	r3, [r4, #24]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d002      	beq.n	80097d4 <__sinit+0x14>
 80097ce:	f7ff ffef 	bl	80097b0 <__sinit_lock_release>
 80097d2:	bd13      	pop	{r0, r1, r4, pc}
 80097d4:	64a3      	str	r3, [r4, #72]	; 0x48
 80097d6:	64e3      	str	r3, [r4, #76]	; 0x4c
 80097d8:	6523      	str	r3, [r4, #80]	; 0x50
 80097da:	4b13      	ldr	r3, [pc, #76]	; (8009828 <__sinit+0x68>)
 80097dc:	4a13      	ldr	r2, [pc, #76]	; (800982c <__sinit+0x6c>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	62a2      	str	r2, [r4, #40]	; 0x28
 80097e2:	9301      	str	r3, [sp, #4]
 80097e4:	42a3      	cmp	r3, r4
 80097e6:	d101      	bne.n	80097ec <__sinit+0x2c>
 80097e8:	2301      	movs	r3, #1
 80097ea:	61a3      	str	r3, [r4, #24]
 80097ec:	0020      	movs	r0, r4
 80097ee:	f000 f81f 	bl	8009830 <__sfp>
 80097f2:	6060      	str	r0, [r4, #4]
 80097f4:	0020      	movs	r0, r4
 80097f6:	f000 f81b 	bl	8009830 <__sfp>
 80097fa:	60a0      	str	r0, [r4, #8]
 80097fc:	0020      	movs	r0, r4
 80097fe:	f000 f817 	bl	8009830 <__sfp>
 8009802:	2200      	movs	r2, #0
 8009804:	2104      	movs	r1, #4
 8009806:	60e0      	str	r0, [r4, #12]
 8009808:	6860      	ldr	r0, [r4, #4]
 800980a:	f7ff ff77 	bl	80096fc <std>
 800980e:	2201      	movs	r2, #1
 8009810:	2109      	movs	r1, #9
 8009812:	68a0      	ldr	r0, [r4, #8]
 8009814:	f7ff ff72 	bl	80096fc <std>
 8009818:	2202      	movs	r2, #2
 800981a:	2112      	movs	r1, #18
 800981c:	68e0      	ldr	r0, [r4, #12]
 800981e:	f7ff ff6d 	bl	80096fc <std>
 8009822:	2301      	movs	r3, #1
 8009824:	61a3      	str	r3, [r4, #24]
 8009826:	e7d2      	b.n	80097ce <__sinit+0xe>
 8009828:	0800c368 	.word	0x0800c368
 800982c:	08009745 	.word	0x08009745

08009830 <__sfp>:
 8009830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009832:	0007      	movs	r7, r0
 8009834:	f7ff ffa4 	bl	8009780 <__sfp_lock_acquire>
 8009838:	4b1f      	ldr	r3, [pc, #124]	; (80098b8 <__sfp+0x88>)
 800983a:	681e      	ldr	r6, [r3, #0]
 800983c:	69b3      	ldr	r3, [r6, #24]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d102      	bne.n	8009848 <__sfp+0x18>
 8009842:	0030      	movs	r0, r6
 8009844:	f7ff ffbc 	bl	80097c0 <__sinit>
 8009848:	3648      	adds	r6, #72	; 0x48
 800984a:	68b4      	ldr	r4, [r6, #8]
 800984c:	6873      	ldr	r3, [r6, #4]
 800984e:	3b01      	subs	r3, #1
 8009850:	d504      	bpl.n	800985c <__sfp+0x2c>
 8009852:	6833      	ldr	r3, [r6, #0]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d022      	beq.n	800989e <__sfp+0x6e>
 8009858:	6836      	ldr	r6, [r6, #0]
 800985a:	e7f6      	b.n	800984a <__sfp+0x1a>
 800985c:	220c      	movs	r2, #12
 800985e:	5ea5      	ldrsh	r5, [r4, r2]
 8009860:	2d00      	cmp	r5, #0
 8009862:	d11a      	bne.n	800989a <__sfp+0x6a>
 8009864:	0020      	movs	r0, r4
 8009866:	4b15      	ldr	r3, [pc, #84]	; (80098bc <__sfp+0x8c>)
 8009868:	3058      	adds	r0, #88	; 0x58
 800986a:	60e3      	str	r3, [r4, #12]
 800986c:	6665      	str	r5, [r4, #100]	; 0x64
 800986e:	f000 fbbd 	bl	8009fec <__retarget_lock_init_recursive>
 8009872:	f7ff ff8d 	bl	8009790 <__sfp_lock_release>
 8009876:	0020      	movs	r0, r4
 8009878:	2208      	movs	r2, #8
 800987a:	0029      	movs	r1, r5
 800987c:	6025      	str	r5, [r4, #0]
 800987e:	60a5      	str	r5, [r4, #8]
 8009880:	6065      	str	r5, [r4, #4]
 8009882:	6125      	str	r5, [r4, #16]
 8009884:	6165      	str	r5, [r4, #20]
 8009886:	61a5      	str	r5, [r4, #24]
 8009888:	305c      	adds	r0, #92	; 0x5c
 800988a:	f7fd f80e 	bl	80068aa <memset>
 800988e:	6365      	str	r5, [r4, #52]	; 0x34
 8009890:	63a5      	str	r5, [r4, #56]	; 0x38
 8009892:	64a5      	str	r5, [r4, #72]	; 0x48
 8009894:	64e5      	str	r5, [r4, #76]	; 0x4c
 8009896:	0020      	movs	r0, r4
 8009898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800989a:	3468      	adds	r4, #104	; 0x68
 800989c:	e7d7      	b.n	800984e <__sfp+0x1e>
 800989e:	2104      	movs	r1, #4
 80098a0:	0038      	movs	r0, r7
 80098a2:	f7ff ff57 	bl	8009754 <__sfmoreglue>
 80098a6:	1e04      	subs	r4, r0, #0
 80098a8:	6030      	str	r0, [r6, #0]
 80098aa:	d1d5      	bne.n	8009858 <__sfp+0x28>
 80098ac:	f7ff ff70 	bl	8009790 <__sfp_lock_release>
 80098b0:	230c      	movs	r3, #12
 80098b2:	603b      	str	r3, [r7, #0]
 80098b4:	e7ef      	b.n	8009896 <__sfp+0x66>
 80098b6:	46c0      	nop			; (mov r8, r8)
 80098b8:	0800c368 	.word	0x0800c368
 80098bc:	ffff0001 	.word	0xffff0001

080098c0 <_fwalk_reent>:
 80098c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80098c2:	0004      	movs	r4, r0
 80098c4:	0006      	movs	r6, r0
 80098c6:	2700      	movs	r7, #0
 80098c8:	9101      	str	r1, [sp, #4]
 80098ca:	3448      	adds	r4, #72	; 0x48
 80098cc:	6863      	ldr	r3, [r4, #4]
 80098ce:	68a5      	ldr	r5, [r4, #8]
 80098d0:	9300      	str	r3, [sp, #0]
 80098d2:	9b00      	ldr	r3, [sp, #0]
 80098d4:	3b01      	subs	r3, #1
 80098d6:	9300      	str	r3, [sp, #0]
 80098d8:	d504      	bpl.n	80098e4 <_fwalk_reent+0x24>
 80098da:	6824      	ldr	r4, [r4, #0]
 80098dc:	2c00      	cmp	r4, #0
 80098de:	d1f5      	bne.n	80098cc <_fwalk_reent+0xc>
 80098e0:	0038      	movs	r0, r7
 80098e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80098e4:	89ab      	ldrh	r3, [r5, #12]
 80098e6:	2b01      	cmp	r3, #1
 80098e8:	d908      	bls.n	80098fc <_fwalk_reent+0x3c>
 80098ea:	220e      	movs	r2, #14
 80098ec:	5eab      	ldrsh	r3, [r5, r2]
 80098ee:	3301      	adds	r3, #1
 80098f0:	d004      	beq.n	80098fc <_fwalk_reent+0x3c>
 80098f2:	0029      	movs	r1, r5
 80098f4:	0030      	movs	r0, r6
 80098f6:	9b01      	ldr	r3, [sp, #4]
 80098f8:	4798      	blx	r3
 80098fa:	4307      	orrs	r7, r0
 80098fc:	3568      	adds	r5, #104	; 0x68
 80098fe:	e7e8      	b.n	80098d2 <_fwalk_reent+0x12>

08009900 <rshift>:
 8009900:	0002      	movs	r2, r0
 8009902:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009904:	6907      	ldr	r7, [r0, #16]
 8009906:	3214      	adds	r2, #20
 8009908:	0013      	movs	r3, r2
 800990a:	b085      	sub	sp, #20
 800990c:	114e      	asrs	r6, r1, #5
 800990e:	42b7      	cmp	r7, r6
 8009910:	dd31      	ble.n	8009976 <rshift+0x76>
 8009912:	00b3      	lsls	r3, r6, #2
 8009914:	18d3      	adds	r3, r2, r3
 8009916:	251f      	movs	r5, #31
 8009918:	9301      	str	r3, [sp, #4]
 800991a:	000b      	movs	r3, r1
 800991c:	00bc      	lsls	r4, r7, #2
 800991e:	402b      	ands	r3, r5
 8009920:	1914      	adds	r4, r2, r4
 8009922:	9302      	str	r3, [sp, #8]
 8009924:	4229      	tst	r1, r5
 8009926:	d10c      	bne.n	8009942 <rshift+0x42>
 8009928:	0015      	movs	r5, r2
 800992a:	9901      	ldr	r1, [sp, #4]
 800992c:	428c      	cmp	r4, r1
 800992e:	d838      	bhi.n	80099a2 <rshift+0xa2>
 8009930:	9901      	ldr	r1, [sp, #4]
 8009932:	2300      	movs	r3, #0
 8009934:	3903      	subs	r1, #3
 8009936:	428c      	cmp	r4, r1
 8009938:	d301      	bcc.n	800993e <rshift+0x3e>
 800993a:	1bbb      	subs	r3, r7, r6
 800993c:	009b      	lsls	r3, r3, #2
 800993e:	18d3      	adds	r3, r2, r3
 8009940:	e019      	b.n	8009976 <rshift+0x76>
 8009942:	2120      	movs	r1, #32
 8009944:	9b02      	ldr	r3, [sp, #8]
 8009946:	9d01      	ldr	r5, [sp, #4]
 8009948:	1acb      	subs	r3, r1, r3
 800994a:	9303      	str	r3, [sp, #12]
 800994c:	cd02      	ldmia	r5!, {r1}
 800994e:	9b02      	ldr	r3, [sp, #8]
 8009950:	4694      	mov	ip, r2
 8009952:	40d9      	lsrs	r1, r3
 8009954:	9100      	str	r1, [sp, #0]
 8009956:	42ac      	cmp	r4, r5
 8009958:	d816      	bhi.n	8009988 <rshift+0x88>
 800995a:	9d01      	ldr	r5, [sp, #4]
 800995c:	2300      	movs	r3, #0
 800995e:	3501      	adds	r5, #1
 8009960:	42ac      	cmp	r4, r5
 8009962:	d302      	bcc.n	800996a <rshift+0x6a>
 8009964:	1bbb      	subs	r3, r7, r6
 8009966:	009b      	lsls	r3, r3, #2
 8009968:	3b04      	subs	r3, #4
 800996a:	9900      	ldr	r1, [sp, #0]
 800996c:	18d3      	adds	r3, r2, r3
 800996e:	6019      	str	r1, [r3, #0]
 8009970:	2900      	cmp	r1, #0
 8009972:	d000      	beq.n	8009976 <rshift+0x76>
 8009974:	3304      	adds	r3, #4
 8009976:	1a99      	subs	r1, r3, r2
 8009978:	1089      	asrs	r1, r1, #2
 800997a:	6101      	str	r1, [r0, #16]
 800997c:	4293      	cmp	r3, r2
 800997e:	d101      	bne.n	8009984 <rshift+0x84>
 8009980:	2300      	movs	r3, #0
 8009982:	6143      	str	r3, [r0, #20]
 8009984:	b005      	add	sp, #20
 8009986:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009988:	682b      	ldr	r3, [r5, #0]
 800998a:	9903      	ldr	r1, [sp, #12]
 800998c:	408b      	lsls	r3, r1
 800998e:	9900      	ldr	r1, [sp, #0]
 8009990:	4319      	orrs	r1, r3
 8009992:	4663      	mov	r3, ip
 8009994:	c302      	stmia	r3!, {r1}
 8009996:	469c      	mov	ip, r3
 8009998:	cd02      	ldmia	r5!, {r1}
 800999a:	9b02      	ldr	r3, [sp, #8]
 800999c:	40d9      	lsrs	r1, r3
 800999e:	9100      	str	r1, [sp, #0]
 80099a0:	e7d9      	b.n	8009956 <rshift+0x56>
 80099a2:	c908      	ldmia	r1!, {r3}
 80099a4:	c508      	stmia	r5!, {r3}
 80099a6:	e7c1      	b.n	800992c <rshift+0x2c>

080099a8 <__hexdig_fun>:
 80099a8:	0002      	movs	r2, r0
 80099aa:	3a30      	subs	r2, #48	; 0x30
 80099ac:	0003      	movs	r3, r0
 80099ae:	2a09      	cmp	r2, #9
 80099b0:	d802      	bhi.n	80099b8 <__hexdig_fun+0x10>
 80099b2:	3b20      	subs	r3, #32
 80099b4:	b2d8      	uxtb	r0, r3
 80099b6:	4770      	bx	lr
 80099b8:	0002      	movs	r2, r0
 80099ba:	3a61      	subs	r2, #97	; 0x61
 80099bc:	2a05      	cmp	r2, #5
 80099be:	d801      	bhi.n	80099c4 <__hexdig_fun+0x1c>
 80099c0:	3b47      	subs	r3, #71	; 0x47
 80099c2:	e7f7      	b.n	80099b4 <__hexdig_fun+0xc>
 80099c4:	001a      	movs	r2, r3
 80099c6:	3a41      	subs	r2, #65	; 0x41
 80099c8:	2000      	movs	r0, #0
 80099ca:	2a05      	cmp	r2, #5
 80099cc:	d8f3      	bhi.n	80099b6 <__hexdig_fun+0xe>
 80099ce:	3b27      	subs	r3, #39	; 0x27
 80099d0:	e7f0      	b.n	80099b4 <__hexdig_fun+0xc>
	...

080099d4 <__gethex>:
 80099d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099d6:	b08d      	sub	sp, #52	; 0x34
 80099d8:	930a      	str	r3, [sp, #40]	; 0x28
 80099da:	4bbd      	ldr	r3, [pc, #756]	; (8009cd0 <__gethex+0x2fc>)
 80099dc:	9005      	str	r0, [sp, #20]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	9109      	str	r1, [sp, #36]	; 0x24
 80099e2:	0018      	movs	r0, r3
 80099e4:	9202      	str	r2, [sp, #8]
 80099e6:	9307      	str	r3, [sp, #28]
 80099e8:	f7f6 fb8c 	bl	8000104 <strlen>
 80099ec:	2202      	movs	r2, #2
 80099ee:	9b07      	ldr	r3, [sp, #28]
 80099f0:	4252      	negs	r2, r2
 80099f2:	181b      	adds	r3, r3, r0
 80099f4:	3b01      	subs	r3, #1
 80099f6:	781b      	ldrb	r3, [r3, #0]
 80099f8:	9003      	str	r0, [sp, #12]
 80099fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80099fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099fe:	6819      	ldr	r1, [r3, #0]
 8009a00:	1c8b      	adds	r3, r1, #2
 8009a02:	1a52      	subs	r2, r2, r1
 8009a04:	18d1      	adds	r1, r2, r3
 8009a06:	9301      	str	r3, [sp, #4]
 8009a08:	9108      	str	r1, [sp, #32]
 8009a0a:	9901      	ldr	r1, [sp, #4]
 8009a0c:	3301      	adds	r3, #1
 8009a0e:	7808      	ldrb	r0, [r1, #0]
 8009a10:	2830      	cmp	r0, #48	; 0x30
 8009a12:	d0f7      	beq.n	8009a04 <__gethex+0x30>
 8009a14:	f7ff ffc8 	bl	80099a8 <__hexdig_fun>
 8009a18:	1e04      	subs	r4, r0, #0
 8009a1a:	d13e      	bne.n	8009a9a <__gethex+0xc6>
 8009a1c:	9a03      	ldr	r2, [sp, #12]
 8009a1e:	9907      	ldr	r1, [sp, #28]
 8009a20:	9801      	ldr	r0, [sp, #4]
 8009a22:	f001 fbdf 	bl	800b1e4 <strncmp>
 8009a26:	1e07      	subs	r7, r0, #0
 8009a28:	d000      	beq.n	8009a2c <__gethex+0x58>
 8009a2a:	e06f      	b.n	8009b0c <__gethex+0x138>
 8009a2c:	9b01      	ldr	r3, [sp, #4]
 8009a2e:	9a03      	ldr	r2, [sp, #12]
 8009a30:	5c98      	ldrb	r0, [r3, r2]
 8009a32:	189d      	adds	r5, r3, r2
 8009a34:	f7ff ffb8 	bl	80099a8 <__hexdig_fun>
 8009a38:	2301      	movs	r3, #1
 8009a3a:	9304      	str	r3, [sp, #16]
 8009a3c:	2800      	cmp	r0, #0
 8009a3e:	d034      	beq.n	8009aaa <__gethex+0xd6>
 8009a40:	9501      	str	r5, [sp, #4]
 8009a42:	9b01      	ldr	r3, [sp, #4]
 8009a44:	7818      	ldrb	r0, [r3, #0]
 8009a46:	2830      	cmp	r0, #48	; 0x30
 8009a48:	d009      	beq.n	8009a5e <__gethex+0x8a>
 8009a4a:	f7ff ffad 	bl	80099a8 <__hexdig_fun>
 8009a4e:	4243      	negs	r3, r0
 8009a50:	4143      	adcs	r3, r0
 8009a52:	9304      	str	r3, [sp, #16]
 8009a54:	2301      	movs	r3, #1
 8009a56:	002c      	movs	r4, r5
 8009a58:	9308      	str	r3, [sp, #32]
 8009a5a:	9d01      	ldr	r5, [sp, #4]
 8009a5c:	e004      	b.n	8009a68 <__gethex+0x94>
 8009a5e:	9b01      	ldr	r3, [sp, #4]
 8009a60:	3301      	adds	r3, #1
 8009a62:	9301      	str	r3, [sp, #4]
 8009a64:	e7ed      	b.n	8009a42 <__gethex+0x6e>
 8009a66:	3501      	adds	r5, #1
 8009a68:	7828      	ldrb	r0, [r5, #0]
 8009a6a:	f7ff ff9d 	bl	80099a8 <__hexdig_fun>
 8009a6e:	1e07      	subs	r7, r0, #0
 8009a70:	d1f9      	bne.n	8009a66 <__gethex+0x92>
 8009a72:	0028      	movs	r0, r5
 8009a74:	9a03      	ldr	r2, [sp, #12]
 8009a76:	9907      	ldr	r1, [sp, #28]
 8009a78:	f001 fbb4 	bl	800b1e4 <strncmp>
 8009a7c:	2800      	cmp	r0, #0
 8009a7e:	d112      	bne.n	8009aa6 <__gethex+0xd2>
 8009a80:	2c00      	cmp	r4, #0
 8009a82:	d107      	bne.n	8009a94 <__gethex+0xc0>
 8009a84:	9b03      	ldr	r3, [sp, #12]
 8009a86:	18ed      	adds	r5, r5, r3
 8009a88:	002c      	movs	r4, r5
 8009a8a:	7828      	ldrb	r0, [r5, #0]
 8009a8c:	f7ff ff8c 	bl	80099a8 <__hexdig_fun>
 8009a90:	2800      	cmp	r0, #0
 8009a92:	d106      	bne.n	8009aa2 <__gethex+0xce>
 8009a94:	1b67      	subs	r7, r4, r5
 8009a96:	00bf      	lsls	r7, r7, #2
 8009a98:	e007      	b.n	8009aaa <__gethex+0xd6>
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	001c      	movs	r4, r3
 8009a9e:	9304      	str	r3, [sp, #16]
 8009aa0:	e7db      	b.n	8009a5a <__gethex+0x86>
 8009aa2:	3501      	adds	r5, #1
 8009aa4:	e7f1      	b.n	8009a8a <__gethex+0xb6>
 8009aa6:	2c00      	cmp	r4, #0
 8009aa8:	d1f4      	bne.n	8009a94 <__gethex+0xc0>
 8009aaa:	2220      	movs	r2, #32
 8009aac:	782b      	ldrb	r3, [r5, #0]
 8009aae:	002e      	movs	r6, r5
 8009ab0:	4393      	bics	r3, r2
 8009ab2:	2b50      	cmp	r3, #80	; 0x50
 8009ab4:	d11d      	bne.n	8009af2 <__gethex+0x11e>
 8009ab6:	786b      	ldrb	r3, [r5, #1]
 8009ab8:	2b2b      	cmp	r3, #43	; 0x2b
 8009aba:	d02c      	beq.n	8009b16 <__gethex+0x142>
 8009abc:	2b2d      	cmp	r3, #45	; 0x2d
 8009abe:	d02e      	beq.n	8009b1e <__gethex+0x14a>
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	1c6e      	adds	r6, r5, #1
 8009ac4:	9306      	str	r3, [sp, #24]
 8009ac6:	7830      	ldrb	r0, [r6, #0]
 8009ac8:	f7ff ff6e 	bl	80099a8 <__hexdig_fun>
 8009acc:	1e43      	subs	r3, r0, #1
 8009ace:	b2db      	uxtb	r3, r3
 8009ad0:	2b18      	cmp	r3, #24
 8009ad2:	d82b      	bhi.n	8009b2c <__gethex+0x158>
 8009ad4:	3810      	subs	r0, #16
 8009ad6:	0004      	movs	r4, r0
 8009ad8:	7870      	ldrb	r0, [r6, #1]
 8009ada:	f7ff ff65 	bl	80099a8 <__hexdig_fun>
 8009ade:	1e43      	subs	r3, r0, #1
 8009ae0:	b2db      	uxtb	r3, r3
 8009ae2:	3601      	adds	r6, #1
 8009ae4:	2b18      	cmp	r3, #24
 8009ae6:	d91c      	bls.n	8009b22 <__gethex+0x14e>
 8009ae8:	9b06      	ldr	r3, [sp, #24]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d000      	beq.n	8009af0 <__gethex+0x11c>
 8009aee:	4264      	negs	r4, r4
 8009af0:	193f      	adds	r7, r7, r4
 8009af2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009af4:	601e      	str	r6, [r3, #0]
 8009af6:	9b04      	ldr	r3, [sp, #16]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d019      	beq.n	8009b30 <__gethex+0x15c>
 8009afc:	2600      	movs	r6, #0
 8009afe:	9b08      	ldr	r3, [sp, #32]
 8009b00:	42b3      	cmp	r3, r6
 8009b02:	d100      	bne.n	8009b06 <__gethex+0x132>
 8009b04:	3606      	adds	r6, #6
 8009b06:	0030      	movs	r0, r6
 8009b08:	b00d      	add	sp, #52	; 0x34
 8009b0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b0c:	2301      	movs	r3, #1
 8009b0e:	0027      	movs	r7, r4
 8009b10:	9d01      	ldr	r5, [sp, #4]
 8009b12:	9304      	str	r3, [sp, #16]
 8009b14:	e7c9      	b.n	8009aaa <__gethex+0xd6>
 8009b16:	2300      	movs	r3, #0
 8009b18:	9306      	str	r3, [sp, #24]
 8009b1a:	1cae      	adds	r6, r5, #2
 8009b1c:	e7d3      	b.n	8009ac6 <__gethex+0xf2>
 8009b1e:	2301      	movs	r3, #1
 8009b20:	e7fa      	b.n	8009b18 <__gethex+0x144>
 8009b22:	230a      	movs	r3, #10
 8009b24:	435c      	muls	r4, r3
 8009b26:	1824      	adds	r4, r4, r0
 8009b28:	3c10      	subs	r4, #16
 8009b2a:	e7d5      	b.n	8009ad8 <__gethex+0x104>
 8009b2c:	002e      	movs	r6, r5
 8009b2e:	e7e0      	b.n	8009af2 <__gethex+0x11e>
 8009b30:	9b01      	ldr	r3, [sp, #4]
 8009b32:	9904      	ldr	r1, [sp, #16]
 8009b34:	1aeb      	subs	r3, r5, r3
 8009b36:	3b01      	subs	r3, #1
 8009b38:	2b07      	cmp	r3, #7
 8009b3a:	dc0a      	bgt.n	8009b52 <__gethex+0x17e>
 8009b3c:	9805      	ldr	r0, [sp, #20]
 8009b3e:	f000 faf3 	bl	800a128 <_Balloc>
 8009b42:	1e04      	subs	r4, r0, #0
 8009b44:	d108      	bne.n	8009b58 <__gethex+0x184>
 8009b46:	0002      	movs	r2, r0
 8009b48:	21de      	movs	r1, #222	; 0xde
 8009b4a:	4b62      	ldr	r3, [pc, #392]	; (8009cd4 <__gethex+0x300>)
 8009b4c:	4862      	ldr	r0, [pc, #392]	; (8009cd8 <__gethex+0x304>)
 8009b4e:	f001 fb7b 	bl	800b248 <__assert_func>
 8009b52:	3101      	adds	r1, #1
 8009b54:	105b      	asrs	r3, r3, #1
 8009b56:	e7ef      	b.n	8009b38 <__gethex+0x164>
 8009b58:	0003      	movs	r3, r0
 8009b5a:	3314      	adds	r3, #20
 8009b5c:	9304      	str	r3, [sp, #16]
 8009b5e:	9309      	str	r3, [sp, #36]	; 0x24
 8009b60:	2300      	movs	r3, #0
 8009b62:	001e      	movs	r6, r3
 8009b64:	9306      	str	r3, [sp, #24]
 8009b66:	9b01      	ldr	r3, [sp, #4]
 8009b68:	42ab      	cmp	r3, r5
 8009b6a:	d340      	bcc.n	8009bee <__gethex+0x21a>
 8009b6c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009b6e:	9b04      	ldr	r3, [sp, #16]
 8009b70:	c540      	stmia	r5!, {r6}
 8009b72:	1aed      	subs	r5, r5, r3
 8009b74:	10ad      	asrs	r5, r5, #2
 8009b76:	0030      	movs	r0, r6
 8009b78:	6125      	str	r5, [r4, #16]
 8009b7a:	f000 fbcd 	bl	800a318 <__hi0bits>
 8009b7e:	9b02      	ldr	r3, [sp, #8]
 8009b80:	016d      	lsls	r5, r5, #5
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	1a2e      	subs	r6, r5, r0
 8009b86:	9301      	str	r3, [sp, #4]
 8009b88:	429e      	cmp	r6, r3
 8009b8a:	dd5a      	ble.n	8009c42 <__gethex+0x26e>
 8009b8c:	1af6      	subs	r6, r6, r3
 8009b8e:	0031      	movs	r1, r6
 8009b90:	0020      	movs	r0, r4
 8009b92:	f000 ff70 	bl	800aa76 <__any_on>
 8009b96:	1e05      	subs	r5, r0, #0
 8009b98:	d016      	beq.n	8009bc8 <__gethex+0x1f4>
 8009b9a:	2501      	movs	r5, #1
 8009b9c:	211f      	movs	r1, #31
 8009b9e:	0028      	movs	r0, r5
 8009ba0:	1e73      	subs	r3, r6, #1
 8009ba2:	4019      	ands	r1, r3
 8009ba4:	4088      	lsls	r0, r1
 8009ba6:	0001      	movs	r1, r0
 8009ba8:	115a      	asrs	r2, r3, #5
 8009baa:	9804      	ldr	r0, [sp, #16]
 8009bac:	0092      	lsls	r2, r2, #2
 8009bae:	5812      	ldr	r2, [r2, r0]
 8009bb0:	420a      	tst	r2, r1
 8009bb2:	d009      	beq.n	8009bc8 <__gethex+0x1f4>
 8009bb4:	42ab      	cmp	r3, r5
 8009bb6:	dd06      	ble.n	8009bc6 <__gethex+0x1f2>
 8009bb8:	0020      	movs	r0, r4
 8009bba:	1eb1      	subs	r1, r6, #2
 8009bbc:	f000 ff5b 	bl	800aa76 <__any_on>
 8009bc0:	3502      	adds	r5, #2
 8009bc2:	2800      	cmp	r0, #0
 8009bc4:	d100      	bne.n	8009bc8 <__gethex+0x1f4>
 8009bc6:	2502      	movs	r5, #2
 8009bc8:	0031      	movs	r1, r6
 8009bca:	0020      	movs	r0, r4
 8009bcc:	f7ff fe98 	bl	8009900 <rshift>
 8009bd0:	19bf      	adds	r7, r7, r6
 8009bd2:	9b02      	ldr	r3, [sp, #8]
 8009bd4:	689b      	ldr	r3, [r3, #8]
 8009bd6:	9303      	str	r3, [sp, #12]
 8009bd8:	42bb      	cmp	r3, r7
 8009bda:	da42      	bge.n	8009c62 <__gethex+0x28e>
 8009bdc:	0021      	movs	r1, r4
 8009bde:	9805      	ldr	r0, [sp, #20]
 8009be0:	f000 fae6 	bl	800a1b0 <_Bfree>
 8009be4:	2300      	movs	r3, #0
 8009be6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009be8:	26a3      	movs	r6, #163	; 0xa3
 8009bea:	6013      	str	r3, [r2, #0]
 8009bec:	e78b      	b.n	8009b06 <__gethex+0x132>
 8009bee:	1e6b      	subs	r3, r5, #1
 8009bf0:	9308      	str	r3, [sp, #32]
 8009bf2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009bf4:	781b      	ldrb	r3, [r3, #0]
 8009bf6:	4293      	cmp	r3, r2
 8009bf8:	d014      	beq.n	8009c24 <__gethex+0x250>
 8009bfa:	9b06      	ldr	r3, [sp, #24]
 8009bfc:	2b20      	cmp	r3, #32
 8009bfe:	d104      	bne.n	8009c0a <__gethex+0x236>
 8009c00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c02:	c340      	stmia	r3!, {r6}
 8009c04:	2600      	movs	r6, #0
 8009c06:	9309      	str	r3, [sp, #36]	; 0x24
 8009c08:	9606      	str	r6, [sp, #24]
 8009c0a:	9b08      	ldr	r3, [sp, #32]
 8009c0c:	7818      	ldrb	r0, [r3, #0]
 8009c0e:	f7ff fecb 	bl	80099a8 <__hexdig_fun>
 8009c12:	230f      	movs	r3, #15
 8009c14:	4018      	ands	r0, r3
 8009c16:	9b06      	ldr	r3, [sp, #24]
 8009c18:	9d08      	ldr	r5, [sp, #32]
 8009c1a:	4098      	lsls	r0, r3
 8009c1c:	3304      	adds	r3, #4
 8009c1e:	4306      	orrs	r6, r0
 8009c20:	9306      	str	r3, [sp, #24]
 8009c22:	e7a0      	b.n	8009b66 <__gethex+0x192>
 8009c24:	2301      	movs	r3, #1
 8009c26:	9a03      	ldr	r2, [sp, #12]
 8009c28:	1a9d      	subs	r5, r3, r2
 8009c2a:	9b08      	ldr	r3, [sp, #32]
 8009c2c:	195d      	adds	r5, r3, r5
 8009c2e:	9b01      	ldr	r3, [sp, #4]
 8009c30:	429d      	cmp	r5, r3
 8009c32:	d3e2      	bcc.n	8009bfa <__gethex+0x226>
 8009c34:	0028      	movs	r0, r5
 8009c36:	9907      	ldr	r1, [sp, #28]
 8009c38:	f001 fad4 	bl	800b1e4 <strncmp>
 8009c3c:	2800      	cmp	r0, #0
 8009c3e:	d1dc      	bne.n	8009bfa <__gethex+0x226>
 8009c40:	e791      	b.n	8009b66 <__gethex+0x192>
 8009c42:	9b01      	ldr	r3, [sp, #4]
 8009c44:	2500      	movs	r5, #0
 8009c46:	429e      	cmp	r6, r3
 8009c48:	dac3      	bge.n	8009bd2 <__gethex+0x1fe>
 8009c4a:	1b9e      	subs	r6, r3, r6
 8009c4c:	0021      	movs	r1, r4
 8009c4e:	0032      	movs	r2, r6
 8009c50:	9805      	ldr	r0, [sp, #20]
 8009c52:	f000 fccb 	bl	800a5ec <__lshift>
 8009c56:	0003      	movs	r3, r0
 8009c58:	3314      	adds	r3, #20
 8009c5a:	0004      	movs	r4, r0
 8009c5c:	1bbf      	subs	r7, r7, r6
 8009c5e:	9304      	str	r3, [sp, #16]
 8009c60:	e7b7      	b.n	8009bd2 <__gethex+0x1fe>
 8009c62:	9b02      	ldr	r3, [sp, #8]
 8009c64:	685e      	ldr	r6, [r3, #4]
 8009c66:	42be      	cmp	r6, r7
 8009c68:	dd71      	ble.n	8009d4e <__gethex+0x37a>
 8009c6a:	9b01      	ldr	r3, [sp, #4]
 8009c6c:	1bf6      	subs	r6, r6, r7
 8009c6e:	42b3      	cmp	r3, r6
 8009c70:	dc38      	bgt.n	8009ce4 <__gethex+0x310>
 8009c72:	9b02      	ldr	r3, [sp, #8]
 8009c74:	68db      	ldr	r3, [r3, #12]
 8009c76:	2b02      	cmp	r3, #2
 8009c78:	d026      	beq.n	8009cc8 <__gethex+0x2f4>
 8009c7a:	2b03      	cmp	r3, #3
 8009c7c:	d02e      	beq.n	8009cdc <__gethex+0x308>
 8009c7e:	2b01      	cmp	r3, #1
 8009c80:	d119      	bne.n	8009cb6 <__gethex+0x2e2>
 8009c82:	9b01      	ldr	r3, [sp, #4]
 8009c84:	42b3      	cmp	r3, r6
 8009c86:	d116      	bne.n	8009cb6 <__gethex+0x2e2>
 8009c88:	2b01      	cmp	r3, #1
 8009c8a:	d10d      	bne.n	8009ca8 <__gethex+0x2d4>
 8009c8c:	9b02      	ldr	r3, [sp, #8]
 8009c8e:	2662      	movs	r6, #98	; 0x62
 8009c90:	685b      	ldr	r3, [r3, #4]
 8009c92:	9301      	str	r3, [sp, #4]
 8009c94:	9a01      	ldr	r2, [sp, #4]
 8009c96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c98:	601a      	str	r2, [r3, #0]
 8009c9a:	2301      	movs	r3, #1
 8009c9c:	9a04      	ldr	r2, [sp, #16]
 8009c9e:	6123      	str	r3, [r4, #16]
 8009ca0:	6013      	str	r3, [r2, #0]
 8009ca2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009ca4:	601c      	str	r4, [r3, #0]
 8009ca6:	e72e      	b.n	8009b06 <__gethex+0x132>
 8009ca8:	9901      	ldr	r1, [sp, #4]
 8009caa:	0020      	movs	r0, r4
 8009cac:	3901      	subs	r1, #1
 8009cae:	f000 fee2 	bl	800aa76 <__any_on>
 8009cb2:	2800      	cmp	r0, #0
 8009cb4:	d1ea      	bne.n	8009c8c <__gethex+0x2b8>
 8009cb6:	0021      	movs	r1, r4
 8009cb8:	9805      	ldr	r0, [sp, #20]
 8009cba:	f000 fa79 	bl	800a1b0 <_Bfree>
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009cc2:	2650      	movs	r6, #80	; 0x50
 8009cc4:	6013      	str	r3, [r2, #0]
 8009cc6:	e71e      	b.n	8009b06 <__gethex+0x132>
 8009cc8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d1f3      	bne.n	8009cb6 <__gethex+0x2e2>
 8009cce:	e7dd      	b.n	8009c8c <__gethex+0x2b8>
 8009cd0:	0800c65c 	.word	0x0800c65c
 8009cd4:	0800c57c 	.word	0x0800c57c
 8009cd8:	0800c5f0 	.word	0x0800c5f0
 8009cdc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d1d4      	bne.n	8009c8c <__gethex+0x2b8>
 8009ce2:	e7e8      	b.n	8009cb6 <__gethex+0x2e2>
 8009ce4:	1e77      	subs	r7, r6, #1
 8009ce6:	2d00      	cmp	r5, #0
 8009ce8:	d12f      	bne.n	8009d4a <__gethex+0x376>
 8009cea:	2f00      	cmp	r7, #0
 8009cec:	d004      	beq.n	8009cf8 <__gethex+0x324>
 8009cee:	0039      	movs	r1, r7
 8009cf0:	0020      	movs	r0, r4
 8009cf2:	f000 fec0 	bl	800aa76 <__any_on>
 8009cf6:	0005      	movs	r5, r0
 8009cf8:	231f      	movs	r3, #31
 8009cfa:	117a      	asrs	r2, r7, #5
 8009cfc:	401f      	ands	r7, r3
 8009cfe:	3b1e      	subs	r3, #30
 8009d00:	40bb      	lsls	r3, r7
 8009d02:	9904      	ldr	r1, [sp, #16]
 8009d04:	0092      	lsls	r2, r2, #2
 8009d06:	5852      	ldr	r2, [r2, r1]
 8009d08:	421a      	tst	r2, r3
 8009d0a:	d001      	beq.n	8009d10 <__gethex+0x33c>
 8009d0c:	2302      	movs	r3, #2
 8009d0e:	431d      	orrs	r5, r3
 8009d10:	9b01      	ldr	r3, [sp, #4]
 8009d12:	0031      	movs	r1, r6
 8009d14:	1b9b      	subs	r3, r3, r6
 8009d16:	2602      	movs	r6, #2
 8009d18:	0020      	movs	r0, r4
 8009d1a:	9301      	str	r3, [sp, #4]
 8009d1c:	f7ff fdf0 	bl	8009900 <rshift>
 8009d20:	9b02      	ldr	r3, [sp, #8]
 8009d22:	685f      	ldr	r7, [r3, #4]
 8009d24:	2d00      	cmp	r5, #0
 8009d26:	d041      	beq.n	8009dac <__gethex+0x3d8>
 8009d28:	9b02      	ldr	r3, [sp, #8]
 8009d2a:	68db      	ldr	r3, [r3, #12]
 8009d2c:	2b02      	cmp	r3, #2
 8009d2e:	d010      	beq.n	8009d52 <__gethex+0x37e>
 8009d30:	2b03      	cmp	r3, #3
 8009d32:	d012      	beq.n	8009d5a <__gethex+0x386>
 8009d34:	2b01      	cmp	r3, #1
 8009d36:	d106      	bne.n	8009d46 <__gethex+0x372>
 8009d38:	07aa      	lsls	r2, r5, #30
 8009d3a:	d504      	bpl.n	8009d46 <__gethex+0x372>
 8009d3c:	9a04      	ldr	r2, [sp, #16]
 8009d3e:	6810      	ldr	r0, [r2, #0]
 8009d40:	4305      	orrs	r5, r0
 8009d42:	421d      	tst	r5, r3
 8009d44:	d10c      	bne.n	8009d60 <__gethex+0x38c>
 8009d46:	2310      	movs	r3, #16
 8009d48:	e02f      	b.n	8009daa <__gethex+0x3d6>
 8009d4a:	2501      	movs	r5, #1
 8009d4c:	e7d4      	b.n	8009cf8 <__gethex+0x324>
 8009d4e:	2601      	movs	r6, #1
 8009d50:	e7e8      	b.n	8009d24 <__gethex+0x350>
 8009d52:	2301      	movs	r3, #1
 8009d54:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009d56:	1a9b      	subs	r3, r3, r2
 8009d58:	9313      	str	r3, [sp, #76]	; 0x4c
 8009d5a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d0f2      	beq.n	8009d46 <__gethex+0x372>
 8009d60:	6923      	ldr	r3, [r4, #16]
 8009d62:	2000      	movs	r0, #0
 8009d64:	9303      	str	r3, [sp, #12]
 8009d66:	009b      	lsls	r3, r3, #2
 8009d68:	9304      	str	r3, [sp, #16]
 8009d6a:	0023      	movs	r3, r4
 8009d6c:	9a04      	ldr	r2, [sp, #16]
 8009d6e:	3314      	adds	r3, #20
 8009d70:	1899      	adds	r1, r3, r2
 8009d72:	681a      	ldr	r2, [r3, #0]
 8009d74:	1c55      	adds	r5, r2, #1
 8009d76:	d01e      	beq.n	8009db6 <__gethex+0x3e2>
 8009d78:	3201      	adds	r2, #1
 8009d7a:	601a      	str	r2, [r3, #0]
 8009d7c:	0023      	movs	r3, r4
 8009d7e:	3314      	adds	r3, #20
 8009d80:	2e02      	cmp	r6, #2
 8009d82:	d140      	bne.n	8009e06 <__gethex+0x432>
 8009d84:	9a02      	ldr	r2, [sp, #8]
 8009d86:	9901      	ldr	r1, [sp, #4]
 8009d88:	6812      	ldr	r2, [r2, #0]
 8009d8a:	3a01      	subs	r2, #1
 8009d8c:	428a      	cmp	r2, r1
 8009d8e:	d10b      	bne.n	8009da8 <__gethex+0x3d4>
 8009d90:	114a      	asrs	r2, r1, #5
 8009d92:	211f      	movs	r1, #31
 8009d94:	9801      	ldr	r0, [sp, #4]
 8009d96:	0092      	lsls	r2, r2, #2
 8009d98:	4001      	ands	r1, r0
 8009d9a:	2001      	movs	r0, #1
 8009d9c:	0005      	movs	r5, r0
 8009d9e:	408d      	lsls	r5, r1
 8009da0:	58d3      	ldr	r3, [r2, r3]
 8009da2:	422b      	tst	r3, r5
 8009da4:	d000      	beq.n	8009da8 <__gethex+0x3d4>
 8009da6:	2601      	movs	r6, #1
 8009da8:	2320      	movs	r3, #32
 8009daa:	431e      	orrs	r6, r3
 8009dac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009dae:	601c      	str	r4, [r3, #0]
 8009db0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009db2:	601f      	str	r7, [r3, #0]
 8009db4:	e6a7      	b.n	8009b06 <__gethex+0x132>
 8009db6:	c301      	stmia	r3!, {r0}
 8009db8:	4299      	cmp	r1, r3
 8009dba:	d8da      	bhi.n	8009d72 <__gethex+0x39e>
 8009dbc:	9b03      	ldr	r3, [sp, #12]
 8009dbe:	68a2      	ldr	r2, [r4, #8]
 8009dc0:	4293      	cmp	r3, r2
 8009dc2:	db17      	blt.n	8009df4 <__gethex+0x420>
 8009dc4:	6863      	ldr	r3, [r4, #4]
 8009dc6:	9805      	ldr	r0, [sp, #20]
 8009dc8:	1c59      	adds	r1, r3, #1
 8009dca:	f000 f9ad 	bl	800a128 <_Balloc>
 8009dce:	1e05      	subs	r5, r0, #0
 8009dd0:	d103      	bne.n	8009dda <__gethex+0x406>
 8009dd2:	0002      	movs	r2, r0
 8009dd4:	2184      	movs	r1, #132	; 0x84
 8009dd6:	4b1c      	ldr	r3, [pc, #112]	; (8009e48 <__gethex+0x474>)
 8009dd8:	e6b8      	b.n	8009b4c <__gethex+0x178>
 8009dda:	0021      	movs	r1, r4
 8009ddc:	6923      	ldr	r3, [r4, #16]
 8009dde:	310c      	adds	r1, #12
 8009de0:	1c9a      	adds	r2, r3, #2
 8009de2:	0092      	lsls	r2, r2, #2
 8009de4:	300c      	adds	r0, #12
 8009de6:	f7fc fd57 	bl	8006898 <memcpy>
 8009dea:	0021      	movs	r1, r4
 8009dec:	9805      	ldr	r0, [sp, #20]
 8009dee:	f000 f9df 	bl	800a1b0 <_Bfree>
 8009df2:	002c      	movs	r4, r5
 8009df4:	6923      	ldr	r3, [r4, #16]
 8009df6:	1c5a      	adds	r2, r3, #1
 8009df8:	6122      	str	r2, [r4, #16]
 8009dfa:	2201      	movs	r2, #1
 8009dfc:	3304      	adds	r3, #4
 8009dfe:	009b      	lsls	r3, r3, #2
 8009e00:	18e3      	adds	r3, r4, r3
 8009e02:	605a      	str	r2, [r3, #4]
 8009e04:	e7ba      	b.n	8009d7c <__gethex+0x3a8>
 8009e06:	6922      	ldr	r2, [r4, #16]
 8009e08:	9903      	ldr	r1, [sp, #12]
 8009e0a:	428a      	cmp	r2, r1
 8009e0c:	dd09      	ble.n	8009e22 <__gethex+0x44e>
 8009e0e:	2101      	movs	r1, #1
 8009e10:	0020      	movs	r0, r4
 8009e12:	f7ff fd75 	bl	8009900 <rshift>
 8009e16:	9b02      	ldr	r3, [sp, #8]
 8009e18:	3701      	adds	r7, #1
 8009e1a:	689b      	ldr	r3, [r3, #8]
 8009e1c:	42bb      	cmp	r3, r7
 8009e1e:	dac2      	bge.n	8009da6 <__gethex+0x3d2>
 8009e20:	e6dc      	b.n	8009bdc <__gethex+0x208>
 8009e22:	221f      	movs	r2, #31
 8009e24:	9d01      	ldr	r5, [sp, #4]
 8009e26:	9901      	ldr	r1, [sp, #4]
 8009e28:	2601      	movs	r6, #1
 8009e2a:	4015      	ands	r5, r2
 8009e2c:	4211      	tst	r1, r2
 8009e2e:	d0bb      	beq.n	8009da8 <__gethex+0x3d4>
 8009e30:	9a04      	ldr	r2, [sp, #16]
 8009e32:	189b      	adds	r3, r3, r2
 8009e34:	3b04      	subs	r3, #4
 8009e36:	6818      	ldr	r0, [r3, #0]
 8009e38:	f000 fa6e 	bl	800a318 <__hi0bits>
 8009e3c:	2320      	movs	r3, #32
 8009e3e:	1b5d      	subs	r5, r3, r5
 8009e40:	42a8      	cmp	r0, r5
 8009e42:	dbe4      	blt.n	8009e0e <__gethex+0x43a>
 8009e44:	e7b0      	b.n	8009da8 <__gethex+0x3d4>
 8009e46:	46c0      	nop			; (mov r8, r8)
 8009e48:	0800c57c 	.word	0x0800c57c

08009e4c <L_shift>:
 8009e4c:	2308      	movs	r3, #8
 8009e4e:	b570      	push	{r4, r5, r6, lr}
 8009e50:	2520      	movs	r5, #32
 8009e52:	1a9a      	subs	r2, r3, r2
 8009e54:	0092      	lsls	r2, r2, #2
 8009e56:	1aad      	subs	r5, r5, r2
 8009e58:	6843      	ldr	r3, [r0, #4]
 8009e5a:	6806      	ldr	r6, [r0, #0]
 8009e5c:	001c      	movs	r4, r3
 8009e5e:	40ac      	lsls	r4, r5
 8009e60:	40d3      	lsrs	r3, r2
 8009e62:	4334      	orrs	r4, r6
 8009e64:	6004      	str	r4, [r0, #0]
 8009e66:	6043      	str	r3, [r0, #4]
 8009e68:	3004      	adds	r0, #4
 8009e6a:	4288      	cmp	r0, r1
 8009e6c:	d3f4      	bcc.n	8009e58 <L_shift+0xc>
 8009e6e:	bd70      	pop	{r4, r5, r6, pc}

08009e70 <__match>:
 8009e70:	b530      	push	{r4, r5, lr}
 8009e72:	6803      	ldr	r3, [r0, #0]
 8009e74:	780c      	ldrb	r4, [r1, #0]
 8009e76:	3301      	adds	r3, #1
 8009e78:	2c00      	cmp	r4, #0
 8009e7a:	d102      	bne.n	8009e82 <__match+0x12>
 8009e7c:	6003      	str	r3, [r0, #0]
 8009e7e:	2001      	movs	r0, #1
 8009e80:	bd30      	pop	{r4, r5, pc}
 8009e82:	781a      	ldrb	r2, [r3, #0]
 8009e84:	0015      	movs	r5, r2
 8009e86:	3d41      	subs	r5, #65	; 0x41
 8009e88:	2d19      	cmp	r5, #25
 8009e8a:	d800      	bhi.n	8009e8e <__match+0x1e>
 8009e8c:	3220      	adds	r2, #32
 8009e8e:	3101      	adds	r1, #1
 8009e90:	42a2      	cmp	r2, r4
 8009e92:	d0ef      	beq.n	8009e74 <__match+0x4>
 8009e94:	2000      	movs	r0, #0
 8009e96:	e7f3      	b.n	8009e80 <__match+0x10>

08009e98 <__hexnan>:
 8009e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e9a:	680b      	ldr	r3, [r1, #0]
 8009e9c:	b08b      	sub	sp, #44	; 0x2c
 8009e9e:	115c      	asrs	r4, r3, #5
 8009ea0:	00a4      	lsls	r4, r4, #2
 8009ea2:	9201      	str	r2, [sp, #4]
 8009ea4:	1912      	adds	r2, r2, r4
 8009ea6:	0019      	movs	r1, r3
 8009ea8:	9202      	str	r2, [sp, #8]
 8009eaa:	221f      	movs	r2, #31
 8009eac:	4011      	ands	r1, r2
 8009eae:	9008      	str	r0, [sp, #32]
 8009eb0:	9106      	str	r1, [sp, #24]
 8009eb2:	4213      	tst	r3, r2
 8009eb4:	d002      	beq.n	8009ebc <__hexnan+0x24>
 8009eb6:	9b02      	ldr	r3, [sp, #8]
 8009eb8:	3304      	adds	r3, #4
 8009eba:	9302      	str	r3, [sp, #8]
 8009ebc:	9b02      	ldr	r3, [sp, #8]
 8009ebe:	2500      	movs	r5, #0
 8009ec0:	1f1e      	subs	r6, r3, #4
 8009ec2:	0037      	movs	r7, r6
 8009ec4:	0034      	movs	r4, r6
 8009ec6:	9b08      	ldr	r3, [sp, #32]
 8009ec8:	6035      	str	r5, [r6, #0]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	9507      	str	r5, [sp, #28]
 8009ece:	9305      	str	r3, [sp, #20]
 8009ed0:	9503      	str	r5, [sp, #12]
 8009ed2:	9b05      	ldr	r3, [sp, #20]
 8009ed4:	3301      	adds	r3, #1
 8009ed6:	9309      	str	r3, [sp, #36]	; 0x24
 8009ed8:	9b05      	ldr	r3, [sp, #20]
 8009eda:	785b      	ldrb	r3, [r3, #1]
 8009edc:	9304      	str	r3, [sp, #16]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d028      	beq.n	8009f34 <__hexnan+0x9c>
 8009ee2:	9804      	ldr	r0, [sp, #16]
 8009ee4:	f7ff fd60 	bl	80099a8 <__hexdig_fun>
 8009ee8:	2800      	cmp	r0, #0
 8009eea:	d154      	bne.n	8009f96 <__hexnan+0xfe>
 8009eec:	9b04      	ldr	r3, [sp, #16]
 8009eee:	2b20      	cmp	r3, #32
 8009ef0:	d819      	bhi.n	8009f26 <__hexnan+0x8e>
 8009ef2:	9b03      	ldr	r3, [sp, #12]
 8009ef4:	9a07      	ldr	r2, [sp, #28]
 8009ef6:	4293      	cmp	r3, r2
 8009ef8:	dd12      	ble.n	8009f20 <__hexnan+0x88>
 8009efa:	42bc      	cmp	r4, r7
 8009efc:	d206      	bcs.n	8009f0c <__hexnan+0x74>
 8009efe:	2d07      	cmp	r5, #7
 8009f00:	dc04      	bgt.n	8009f0c <__hexnan+0x74>
 8009f02:	002a      	movs	r2, r5
 8009f04:	0039      	movs	r1, r7
 8009f06:	0020      	movs	r0, r4
 8009f08:	f7ff ffa0 	bl	8009e4c <L_shift>
 8009f0c:	9b01      	ldr	r3, [sp, #4]
 8009f0e:	2508      	movs	r5, #8
 8009f10:	429c      	cmp	r4, r3
 8009f12:	d905      	bls.n	8009f20 <__hexnan+0x88>
 8009f14:	1f27      	subs	r7, r4, #4
 8009f16:	2500      	movs	r5, #0
 8009f18:	003c      	movs	r4, r7
 8009f1a:	9b03      	ldr	r3, [sp, #12]
 8009f1c:	603d      	str	r5, [r7, #0]
 8009f1e:	9307      	str	r3, [sp, #28]
 8009f20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f22:	9305      	str	r3, [sp, #20]
 8009f24:	e7d5      	b.n	8009ed2 <__hexnan+0x3a>
 8009f26:	9b04      	ldr	r3, [sp, #16]
 8009f28:	2b29      	cmp	r3, #41	; 0x29
 8009f2a:	d158      	bne.n	8009fde <__hexnan+0x146>
 8009f2c:	9b05      	ldr	r3, [sp, #20]
 8009f2e:	9a08      	ldr	r2, [sp, #32]
 8009f30:	3302      	adds	r3, #2
 8009f32:	6013      	str	r3, [r2, #0]
 8009f34:	9b03      	ldr	r3, [sp, #12]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d051      	beq.n	8009fde <__hexnan+0x146>
 8009f3a:	42bc      	cmp	r4, r7
 8009f3c:	d206      	bcs.n	8009f4c <__hexnan+0xb4>
 8009f3e:	2d07      	cmp	r5, #7
 8009f40:	dc04      	bgt.n	8009f4c <__hexnan+0xb4>
 8009f42:	002a      	movs	r2, r5
 8009f44:	0039      	movs	r1, r7
 8009f46:	0020      	movs	r0, r4
 8009f48:	f7ff ff80 	bl	8009e4c <L_shift>
 8009f4c:	9b01      	ldr	r3, [sp, #4]
 8009f4e:	429c      	cmp	r4, r3
 8009f50:	d935      	bls.n	8009fbe <__hexnan+0x126>
 8009f52:	001a      	movs	r2, r3
 8009f54:	0023      	movs	r3, r4
 8009f56:	cb02      	ldmia	r3!, {r1}
 8009f58:	c202      	stmia	r2!, {r1}
 8009f5a:	429e      	cmp	r6, r3
 8009f5c:	d2fb      	bcs.n	8009f56 <__hexnan+0xbe>
 8009f5e:	9b02      	ldr	r3, [sp, #8]
 8009f60:	1c61      	adds	r1, r4, #1
 8009f62:	1eda      	subs	r2, r3, #3
 8009f64:	2304      	movs	r3, #4
 8009f66:	4291      	cmp	r1, r2
 8009f68:	d805      	bhi.n	8009f76 <__hexnan+0xde>
 8009f6a:	9b02      	ldr	r3, [sp, #8]
 8009f6c:	3b04      	subs	r3, #4
 8009f6e:	1b1c      	subs	r4, r3, r4
 8009f70:	08a4      	lsrs	r4, r4, #2
 8009f72:	3401      	adds	r4, #1
 8009f74:	00a3      	lsls	r3, r4, #2
 8009f76:	9a01      	ldr	r2, [sp, #4]
 8009f78:	18d4      	adds	r4, r2, r3
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	c408      	stmia	r4!, {r3}
 8009f7e:	42a6      	cmp	r6, r4
 8009f80:	d2fc      	bcs.n	8009f7c <__hexnan+0xe4>
 8009f82:	6833      	ldr	r3, [r6, #0]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d104      	bne.n	8009f92 <__hexnan+0xfa>
 8009f88:	9b01      	ldr	r3, [sp, #4]
 8009f8a:	429e      	cmp	r6, r3
 8009f8c:	d125      	bne.n	8009fda <__hexnan+0x142>
 8009f8e:	2301      	movs	r3, #1
 8009f90:	6033      	str	r3, [r6, #0]
 8009f92:	2005      	movs	r0, #5
 8009f94:	e024      	b.n	8009fe0 <__hexnan+0x148>
 8009f96:	9b03      	ldr	r3, [sp, #12]
 8009f98:	3501      	adds	r5, #1
 8009f9a:	3301      	adds	r3, #1
 8009f9c:	9303      	str	r3, [sp, #12]
 8009f9e:	2d08      	cmp	r5, #8
 8009fa0:	dd06      	ble.n	8009fb0 <__hexnan+0x118>
 8009fa2:	9b01      	ldr	r3, [sp, #4]
 8009fa4:	429c      	cmp	r4, r3
 8009fa6:	d9bb      	bls.n	8009f20 <__hexnan+0x88>
 8009fa8:	2300      	movs	r3, #0
 8009faa:	2501      	movs	r5, #1
 8009fac:	3c04      	subs	r4, #4
 8009fae:	6023      	str	r3, [r4, #0]
 8009fb0:	220f      	movs	r2, #15
 8009fb2:	6823      	ldr	r3, [r4, #0]
 8009fb4:	4010      	ands	r0, r2
 8009fb6:	011b      	lsls	r3, r3, #4
 8009fb8:	4318      	orrs	r0, r3
 8009fba:	6020      	str	r0, [r4, #0]
 8009fbc:	e7b0      	b.n	8009f20 <__hexnan+0x88>
 8009fbe:	9b06      	ldr	r3, [sp, #24]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d0de      	beq.n	8009f82 <__hexnan+0xea>
 8009fc4:	2220      	movs	r2, #32
 8009fc6:	1ad2      	subs	r2, r2, r3
 8009fc8:	2301      	movs	r3, #1
 8009fca:	425b      	negs	r3, r3
 8009fcc:	40d3      	lsrs	r3, r2
 8009fce:	9c02      	ldr	r4, [sp, #8]
 8009fd0:	3c04      	subs	r4, #4
 8009fd2:	6822      	ldr	r2, [r4, #0]
 8009fd4:	4013      	ands	r3, r2
 8009fd6:	6023      	str	r3, [r4, #0]
 8009fd8:	e7d3      	b.n	8009f82 <__hexnan+0xea>
 8009fda:	3e04      	subs	r6, #4
 8009fdc:	e7d1      	b.n	8009f82 <__hexnan+0xea>
 8009fde:	2004      	movs	r0, #4
 8009fe0:	b00b      	add	sp, #44	; 0x2c
 8009fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009fe4 <_localeconv_r>:
 8009fe4:	4800      	ldr	r0, [pc, #0]	; (8009fe8 <_localeconv_r+0x4>)
 8009fe6:	4770      	bx	lr
 8009fe8:	20000178 	.word	0x20000178

08009fec <__retarget_lock_init_recursive>:
 8009fec:	4770      	bx	lr

08009fee <__retarget_lock_acquire_recursive>:
 8009fee:	4770      	bx	lr

08009ff0 <__retarget_lock_release_recursive>:
 8009ff0:	4770      	bx	lr
	...

08009ff4 <__swhatbuf_r>:
 8009ff4:	b570      	push	{r4, r5, r6, lr}
 8009ff6:	000e      	movs	r6, r1
 8009ff8:	001d      	movs	r5, r3
 8009ffa:	230e      	movs	r3, #14
 8009ffc:	5ec9      	ldrsh	r1, [r1, r3]
 8009ffe:	0014      	movs	r4, r2
 800a000:	b096      	sub	sp, #88	; 0x58
 800a002:	2900      	cmp	r1, #0
 800a004:	da07      	bge.n	800a016 <__swhatbuf_r+0x22>
 800a006:	2300      	movs	r3, #0
 800a008:	602b      	str	r3, [r5, #0]
 800a00a:	89b3      	ldrh	r3, [r6, #12]
 800a00c:	061b      	lsls	r3, r3, #24
 800a00e:	d411      	bmi.n	800a034 <__swhatbuf_r+0x40>
 800a010:	2380      	movs	r3, #128	; 0x80
 800a012:	00db      	lsls	r3, r3, #3
 800a014:	e00f      	b.n	800a036 <__swhatbuf_r+0x42>
 800a016:	466a      	mov	r2, sp
 800a018:	f001 f956 	bl	800b2c8 <_fstat_r>
 800a01c:	2800      	cmp	r0, #0
 800a01e:	dbf2      	blt.n	800a006 <__swhatbuf_r+0x12>
 800a020:	23f0      	movs	r3, #240	; 0xf0
 800a022:	9901      	ldr	r1, [sp, #4]
 800a024:	021b      	lsls	r3, r3, #8
 800a026:	4019      	ands	r1, r3
 800a028:	4b05      	ldr	r3, [pc, #20]	; (800a040 <__swhatbuf_r+0x4c>)
 800a02a:	18c9      	adds	r1, r1, r3
 800a02c:	424b      	negs	r3, r1
 800a02e:	4159      	adcs	r1, r3
 800a030:	6029      	str	r1, [r5, #0]
 800a032:	e7ed      	b.n	800a010 <__swhatbuf_r+0x1c>
 800a034:	2340      	movs	r3, #64	; 0x40
 800a036:	2000      	movs	r0, #0
 800a038:	6023      	str	r3, [r4, #0]
 800a03a:	b016      	add	sp, #88	; 0x58
 800a03c:	bd70      	pop	{r4, r5, r6, pc}
 800a03e:	46c0      	nop			; (mov r8, r8)
 800a040:	ffffe000 	.word	0xffffe000

0800a044 <__smakebuf_r>:
 800a044:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a046:	2602      	movs	r6, #2
 800a048:	898b      	ldrh	r3, [r1, #12]
 800a04a:	0005      	movs	r5, r0
 800a04c:	000c      	movs	r4, r1
 800a04e:	4233      	tst	r3, r6
 800a050:	d006      	beq.n	800a060 <__smakebuf_r+0x1c>
 800a052:	0023      	movs	r3, r4
 800a054:	3347      	adds	r3, #71	; 0x47
 800a056:	6023      	str	r3, [r4, #0]
 800a058:	6123      	str	r3, [r4, #16]
 800a05a:	2301      	movs	r3, #1
 800a05c:	6163      	str	r3, [r4, #20]
 800a05e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800a060:	466a      	mov	r2, sp
 800a062:	ab01      	add	r3, sp, #4
 800a064:	f7ff ffc6 	bl	8009ff4 <__swhatbuf_r>
 800a068:	9900      	ldr	r1, [sp, #0]
 800a06a:	0007      	movs	r7, r0
 800a06c:	0028      	movs	r0, r5
 800a06e:	f7fc fc6f 	bl	8006950 <_malloc_r>
 800a072:	2800      	cmp	r0, #0
 800a074:	d108      	bne.n	800a088 <__smakebuf_r+0x44>
 800a076:	220c      	movs	r2, #12
 800a078:	5ea3      	ldrsh	r3, [r4, r2]
 800a07a:	059a      	lsls	r2, r3, #22
 800a07c:	d4ef      	bmi.n	800a05e <__smakebuf_r+0x1a>
 800a07e:	2203      	movs	r2, #3
 800a080:	4393      	bics	r3, r2
 800a082:	431e      	orrs	r6, r3
 800a084:	81a6      	strh	r6, [r4, #12]
 800a086:	e7e4      	b.n	800a052 <__smakebuf_r+0xe>
 800a088:	4b0f      	ldr	r3, [pc, #60]	; (800a0c8 <__smakebuf_r+0x84>)
 800a08a:	62ab      	str	r3, [r5, #40]	; 0x28
 800a08c:	2380      	movs	r3, #128	; 0x80
 800a08e:	89a2      	ldrh	r2, [r4, #12]
 800a090:	6020      	str	r0, [r4, #0]
 800a092:	4313      	orrs	r3, r2
 800a094:	81a3      	strh	r3, [r4, #12]
 800a096:	9b00      	ldr	r3, [sp, #0]
 800a098:	6120      	str	r0, [r4, #16]
 800a09a:	6163      	str	r3, [r4, #20]
 800a09c:	9b01      	ldr	r3, [sp, #4]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d00d      	beq.n	800a0be <__smakebuf_r+0x7a>
 800a0a2:	0028      	movs	r0, r5
 800a0a4:	230e      	movs	r3, #14
 800a0a6:	5ee1      	ldrsh	r1, [r4, r3]
 800a0a8:	f001 f920 	bl	800b2ec <_isatty_r>
 800a0ac:	2800      	cmp	r0, #0
 800a0ae:	d006      	beq.n	800a0be <__smakebuf_r+0x7a>
 800a0b0:	2203      	movs	r2, #3
 800a0b2:	89a3      	ldrh	r3, [r4, #12]
 800a0b4:	4393      	bics	r3, r2
 800a0b6:	001a      	movs	r2, r3
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	4313      	orrs	r3, r2
 800a0bc:	81a3      	strh	r3, [r4, #12]
 800a0be:	89a0      	ldrh	r0, [r4, #12]
 800a0c0:	4307      	orrs	r7, r0
 800a0c2:	81a7      	strh	r7, [r4, #12]
 800a0c4:	e7cb      	b.n	800a05e <__smakebuf_r+0x1a>
 800a0c6:	46c0      	nop			; (mov r8, r8)
 800a0c8:	08009745 	.word	0x08009745

0800a0cc <__ascii_mbtowc>:
 800a0cc:	b082      	sub	sp, #8
 800a0ce:	2900      	cmp	r1, #0
 800a0d0:	d100      	bne.n	800a0d4 <__ascii_mbtowc+0x8>
 800a0d2:	a901      	add	r1, sp, #4
 800a0d4:	1e10      	subs	r0, r2, #0
 800a0d6:	d006      	beq.n	800a0e6 <__ascii_mbtowc+0x1a>
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d006      	beq.n	800a0ea <__ascii_mbtowc+0x1e>
 800a0dc:	7813      	ldrb	r3, [r2, #0]
 800a0de:	600b      	str	r3, [r1, #0]
 800a0e0:	7810      	ldrb	r0, [r2, #0]
 800a0e2:	1e43      	subs	r3, r0, #1
 800a0e4:	4198      	sbcs	r0, r3
 800a0e6:	b002      	add	sp, #8
 800a0e8:	4770      	bx	lr
 800a0ea:	2002      	movs	r0, #2
 800a0ec:	4240      	negs	r0, r0
 800a0ee:	e7fa      	b.n	800a0e6 <__ascii_mbtowc+0x1a>

0800a0f0 <memchr>:
 800a0f0:	b2c9      	uxtb	r1, r1
 800a0f2:	1882      	adds	r2, r0, r2
 800a0f4:	4290      	cmp	r0, r2
 800a0f6:	d101      	bne.n	800a0fc <memchr+0xc>
 800a0f8:	2000      	movs	r0, #0
 800a0fa:	4770      	bx	lr
 800a0fc:	7803      	ldrb	r3, [r0, #0]
 800a0fe:	428b      	cmp	r3, r1
 800a100:	d0fb      	beq.n	800a0fa <memchr+0xa>
 800a102:	3001      	adds	r0, #1
 800a104:	e7f6      	b.n	800a0f4 <memchr+0x4>
	...

0800a108 <__malloc_lock>:
 800a108:	b510      	push	{r4, lr}
 800a10a:	4802      	ldr	r0, [pc, #8]	; (800a114 <__malloc_lock+0xc>)
 800a10c:	f7ff ff6f 	bl	8009fee <__retarget_lock_acquire_recursive>
 800a110:	bd10      	pop	{r4, pc}
 800a112:	46c0      	nop			; (mov r8, r8)
 800a114:	200003f0 	.word	0x200003f0

0800a118 <__malloc_unlock>:
 800a118:	b510      	push	{r4, lr}
 800a11a:	4802      	ldr	r0, [pc, #8]	; (800a124 <__malloc_unlock+0xc>)
 800a11c:	f7ff ff68 	bl	8009ff0 <__retarget_lock_release_recursive>
 800a120:	bd10      	pop	{r4, pc}
 800a122:	46c0      	nop			; (mov r8, r8)
 800a124:	200003f0 	.word	0x200003f0

0800a128 <_Balloc>:
 800a128:	b570      	push	{r4, r5, r6, lr}
 800a12a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a12c:	0006      	movs	r6, r0
 800a12e:	000c      	movs	r4, r1
 800a130:	2d00      	cmp	r5, #0
 800a132:	d10e      	bne.n	800a152 <_Balloc+0x2a>
 800a134:	2010      	movs	r0, #16
 800a136:	f7fc fb8d 	bl	8006854 <malloc>
 800a13a:	1e02      	subs	r2, r0, #0
 800a13c:	6270      	str	r0, [r6, #36]	; 0x24
 800a13e:	d104      	bne.n	800a14a <_Balloc+0x22>
 800a140:	2166      	movs	r1, #102	; 0x66
 800a142:	4b19      	ldr	r3, [pc, #100]	; (800a1a8 <_Balloc+0x80>)
 800a144:	4819      	ldr	r0, [pc, #100]	; (800a1ac <_Balloc+0x84>)
 800a146:	f001 f87f 	bl	800b248 <__assert_func>
 800a14a:	6045      	str	r5, [r0, #4]
 800a14c:	6085      	str	r5, [r0, #8]
 800a14e:	6005      	str	r5, [r0, #0]
 800a150:	60c5      	str	r5, [r0, #12]
 800a152:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800a154:	68eb      	ldr	r3, [r5, #12]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d013      	beq.n	800a182 <_Balloc+0x5a>
 800a15a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a15c:	00a2      	lsls	r2, r4, #2
 800a15e:	68db      	ldr	r3, [r3, #12]
 800a160:	189b      	adds	r3, r3, r2
 800a162:	6818      	ldr	r0, [r3, #0]
 800a164:	2800      	cmp	r0, #0
 800a166:	d118      	bne.n	800a19a <_Balloc+0x72>
 800a168:	2101      	movs	r1, #1
 800a16a:	000d      	movs	r5, r1
 800a16c:	40a5      	lsls	r5, r4
 800a16e:	1d6a      	adds	r2, r5, #5
 800a170:	0030      	movs	r0, r6
 800a172:	0092      	lsls	r2, r2, #2
 800a174:	f000 fca2 	bl	800aabc <_calloc_r>
 800a178:	2800      	cmp	r0, #0
 800a17a:	d00c      	beq.n	800a196 <_Balloc+0x6e>
 800a17c:	6044      	str	r4, [r0, #4]
 800a17e:	6085      	str	r5, [r0, #8]
 800a180:	e00d      	b.n	800a19e <_Balloc+0x76>
 800a182:	2221      	movs	r2, #33	; 0x21
 800a184:	2104      	movs	r1, #4
 800a186:	0030      	movs	r0, r6
 800a188:	f000 fc98 	bl	800aabc <_calloc_r>
 800a18c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a18e:	60e8      	str	r0, [r5, #12]
 800a190:	68db      	ldr	r3, [r3, #12]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d1e1      	bne.n	800a15a <_Balloc+0x32>
 800a196:	2000      	movs	r0, #0
 800a198:	bd70      	pop	{r4, r5, r6, pc}
 800a19a:	6802      	ldr	r2, [r0, #0]
 800a19c:	601a      	str	r2, [r3, #0]
 800a19e:	2300      	movs	r3, #0
 800a1a0:	6103      	str	r3, [r0, #16]
 800a1a2:	60c3      	str	r3, [r0, #12]
 800a1a4:	e7f8      	b.n	800a198 <_Balloc+0x70>
 800a1a6:	46c0      	nop			; (mov r8, r8)
 800a1a8:	0800c506 	.word	0x0800c506
 800a1ac:	0800c670 	.word	0x0800c670

0800a1b0 <_Bfree>:
 800a1b0:	b570      	push	{r4, r5, r6, lr}
 800a1b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a1b4:	0005      	movs	r5, r0
 800a1b6:	000c      	movs	r4, r1
 800a1b8:	2e00      	cmp	r6, #0
 800a1ba:	d10e      	bne.n	800a1da <_Bfree+0x2a>
 800a1bc:	2010      	movs	r0, #16
 800a1be:	f7fc fb49 	bl	8006854 <malloc>
 800a1c2:	1e02      	subs	r2, r0, #0
 800a1c4:	6268      	str	r0, [r5, #36]	; 0x24
 800a1c6:	d104      	bne.n	800a1d2 <_Bfree+0x22>
 800a1c8:	218a      	movs	r1, #138	; 0x8a
 800a1ca:	4b09      	ldr	r3, [pc, #36]	; (800a1f0 <_Bfree+0x40>)
 800a1cc:	4809      	ldr	r0, [pc, #36]	; (800a1f4 <_Bfree+0x44>)
 800a1ce:	f001 f83b 	bl	800b248 <__assert_func>
 800a1d2:	6046      	str	r6, [r0, #4]
 800a1d4:	6086      	str	r6, [r0, #8]
 800a1d6:	6006      	str	r6, [r0, #0]
 800a1d8:	60c6      	str	r6, [r0, #12]
 800a1da:	2c00      	cmp	r4, #0
 800a1dc:	d007      	beq.n	800a1ee <_Bfree+0x3e>
 800a1de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a1e0:	6862      	ldr	r2, [r4, #4]
 800a1e2:	68db      	ldr	r3, [r3, #12]
 800a1e4:	0092      	lsls	r2, r2, #2
 800a1e6:	189b      	adds	r3, r3, r2
 800a1e8:	681a      	ldr	r2, [r3, #0]
 800a1ea:	6022      	str	r2, [r4, #0]
 800a1ec:	601c      	str	r4, [r3, #0]
 800a1ee:	bd70      	pop	{r4, r5, r6, pc}
 800a1f0:	0800c506 	.word	0x0800c506
 800a1f4:	0800c670 	.word	0x0800c670

0800a1f8 <__multadd>:
 800a1f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a1fa:	000e      	movs	r6, r1
 800a1fc:	9001      	str	r0, [sp, #4]
 800a1fe:	000c      	movs	r4, r1
 800a200:	001d      	movs	r5, r3
 800a202:	2000      	movs	r0, #0
 800a204:	690f      	ldr	r7, [r1, #16]
 800a206:	3614      	adds	r6, #20
 800a208:	6833      	ldr	r3, [r6, #0]
 800a20a:	3001      	adds	r0, #1
 800a20c:	b299      	uxth	r1, r3
 800a20e:	4351      	muls	r1, r2
 800a210:	0c1b      	lsrs	r3, r3, #16
 800a212:	4353      	muls	r3, r2
 800a214:	1949      	adds	r1, r1, r5
 800a216:	0c0d      	lsrs	r5, r1, #16
 800a218:	195b      	adds	r3, r3, r5
 800a21a:	0c1d      	lsrs	r5, r3, #16
 800a21c:	b289      	uxth	r1, r1
 800a21e:	041b      	lsls	r3, r3, #16
 800a220:	185b      	adds	r3, r3, r1
 800a222:	c608      	stmia	r6!, {r3}
 800a224:	4287      	cmp	r7, r0
 800a226:	dcef      	bgt.n	800a208 <__multadd+0x10>
 800a228:	2d00      	cmp	r5, #0
 800a22a:	d022      	beq.n	800a272 <__multadd+0x7a>
 800a22c:	68a3      	ldr	r3, [r4, #8]
 800a22e:	42bb      	cmp	r3, r7
 800a230:	dc19      	bgt.n	800a266 <__multadd+0x6e>
 800a232:	6863      	ldr	r3, [r4, #4]
 800a234:	9801      	ldr	r0, [sp, #4]
 800a236:	1c59      	adds	r1, r3, #1
 800a238:	f7ff ff76 	bl	800a128 <_Balloc>
 800a23c:	1e06      	subs	r6, r0, #0
 800a23e:	d105      	bne.n	800a24c <__multadd+0x54>
 800a240:	0002      	movs	r2, r0
 800a242:	21b5      	movs	r1, #181	; 0xb5
 800a244:	4b0c      	ldr	r3, [pc, #48]	; (800a278 <__multadd+0x80>)
 800a246:	480d      	ldr	r0, [pc, #52]	; (800a27c <__multadd+0x84>)
 800a248:	f000 fffe 	bl	800b248 <__assert_func>
 800a24c:	0021      	movs	r1, r4
 800a24e:	6923      	ldr	r3, [r4, #16]
 800a250:	310c      	adds	r1, #12
 800a252:	1c9a      	adds	r2, r3, #2
 800a254:	0092      	lsls	r2, r2, #2
 800a256:	300c      	adds	r0, #12
 800a258:	f7fc fb1e 	bl	8006898 <memcpy>
 800a25c:	0021      	movs	r1, r4
 800a25e:	9801      	ldr	r0, [sp, #4]
 800a260:	f7ff ffa6 	bl	800a1b0 <_Bfree>
 800a264:	0034      	movs	r4, r6
 800a266:	1d3b      	adds	r3, r7, #4
 800a268:	009b      	lsls	r3, r3, #2
 800a26a:	18e3      	adds	r3, r4, r3
 800a26c:	605d      	str	r5, [r3, #4]
 800a26e:	1c7b      	adds	r3, r7, #1
 800a270:	6123      	str	r3, [r4, #16]
 800a272:	0020      	movs	r0, r4
 800a274:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a276:	46c0      	nop			; (mov r8, r8)
 800a278:	0800c57c 	.word	0x0800c57c
 800a27c:	0800c670 	.word	0x0800c670

0800a280 <__s2b>:
 800a280:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a282:	0006      	movs	r6, r0
 800a284:	0018      	movs	r0, r3
 800a286:	000c      	movs	r4, r1
 800a288:	3008      	adds	r0, #8
 800a28a:	2109      	movs	r1, #9
 800a28c:	9301      	str	r3, [sp, #4]
 800a28e:	0015      	movs	r5, r2
 800a290:	f7f5 ffde 	bl	8000250 <__divsi3>
 800a294:	2301      	movs	r3, #1
 800a296:	2100      	movs	r1, #0
 800a298:	4283      	cmp	r3, r0
 800a29a:	db0a      	blt.n	800a2b2 <__s2b+0x32>
 800a29c:	0030      	movs	r0, r6
 800a29e:	f7ff ff43 	bl	800a128 <_Balloc>
 800a2a2:	1e01      	subs	r1, r0, #0
 800a2a4:	d108      	bne.n	800a2b8 <__s2b+0x38>
 800a2a6:	0002      	movs	r2, r0
 800a2a8:	4b19      	ldr	r3, [pc, #100]	; (800a310 <__s2b+0x90>)
 800a2aa:	481a      	ldr	r0, [pc, #104]	; (800a314 <__s2b+0x94>)
 800a2ac:	31ce      	adds	r1, #206	; 0xce
 800a2ae:	f000 ffcb 	bl	800b248 <__assert_func>
 800a2b2:	005b      	lsls	r3, r3, #1
 800a2b4:	3101      	adds	r1, #1
 800a2b6:	e7ef      	b.n	800a298 <__s2b+0x18>
 800a2b8:	9b08      	ldr	r3, [sp, #32]
 800a2ba:	6143      	str	r3, [r0, #20]
 800a2bc:	2301      	movs	r3, #1
 800a2be:	6103      	str	r3, [r0, #16]
 800a2c0:	2d09      	cmp	r5, #9
 800a2c2:	dd18      	ble.n	800a2f6 <__s2b+0x76>
 800a2c4:	0023      	movs	r3, r4
 800a2c6:	3309      	adds	r3, #9
 800a2c8:	001f      	movs	r7, r3
 800a2ca:	9300      	str	r3, [sp, #0]
 800a2cc:	1964      	adds	r4, r4, r5
 800a2ce:	783b      	ldrb	r3, [r7, #0]
 800a2d0:	220a      	movs	r2, #10
 800a2d2:	0030      	movs	r0, r6
 800a2d4:	3b30      	subs	r3, #48	; 0x30
 800a2d6:	f7ff ff8f 	bl	800a1f8 <__multadd>
 800a2da:	3701      	adds	r7, #1
 800a2dc:	0001      	movs	r1, r0
 800a2de:	42a7      	cmp	r7, r4
 800a2e0:	d1f5      	bne.n	800a2ce <__s2b+0x4e>
 800a2e2:	002c      	movs	r4, r5
 800a2e4:	9b00      	ldr	r3, [sp, #0]
 800a2e6:	3c08      	subs	r4, #8
 800a2e8:	191c      	adds	r4, r3, r4
 800a2ea:	002f      	movs	r7, r5
 800a2ec:	9b01      	ldr	r3, [sp, #4]
 800a2ee:	429f      	cmp	r7, r3
 800a2f0:	db04      	blt.n	800a2fc <__s2b+0x7c>
 800a2f2:	0008      	movs	r0, r1
 800a2f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a2f6:	2509      	movs	r5, #9
 800a2f8:	340a      	adds	r4, #10
 800a2fa:	e7f6      	b.n	800a2ea <__s2b+0x6a>
 800a2fc:	1b63      	subs	r3, r4, r5
 800a2fe:	5ddb      	ldrb	r3, [r3, r7]
 800a300:	220a      	movs	r2, #10
 800a302:	0030      	movs	r0, r6
 800a304:	3b30      	subs	r3, #48	; 0x30
 800a306:	f7ff ff77 	bl	800a1f8 <__multadd>
 800a30a:	3701      	adds	r7, #1
 800a30c:	0001      	movs	r1, r0
 800a30e:	e7ed      	b.n	800a2ec <__s2b+0x6c>
 800a310:	0800c57c 	.word	0x0800c57c
 800a314:	0800c670 	.word	0x0800c670

0800a318 <__hi0bits>:
 800a318:	0003      	movs	r3, r0
 800a31a:	0c02      	lsrs	r2, r0, #16
 800a31c:	2000      	movs	r0, #0
 800a31e:	4282      	cmp	r2, r0
 800a320:	d101      	bne.n	800a326 <__hi0bits+0xe>
 800a322:	041b      	lsls	r3, r3, #16
 800a324:	3010      	adds	r0, #16
 800a326:	0e1a      	lsrs	r2, r3, #24
 800a328:	d101      	bne.n	800a32e <__hi0bits+0x16>
 800a32a:	3008      	adds	r0, #8
 800a32c:	021b      	lsls	r3, r3, #8
 800a32e:	0f1a      	lsrs	r2, r3, #28
 800a330:	d101      	bne.n	800a336 <__hi0bits+0x1e>
 800a332:	3004      	adds	r0, #4
 800a334:	011b      	lsls	r3, r3, #4
 800a336:	0f9a      	lsrs	r2, r3, #30
 800a338:	d101      	bne.n	800a33e <__hi0bits+0x26>
 800a33a:	3002      	adds	r0, #2
 800a33c:	009b      	lsls	r3, r3, #2
 800a33e:	2b00      	cmp	r3, #0
 800a340:	db03      	blt.n	800a34a <__hi0bits+0x32>
 800a342:	3001      	adds	r0, #1
 800a344:	005b      	lsls	r3, r3, #1
 800a346:	d400      	bmi.n	800a34a <__hi0bits+0x32>
 800a348:	2020      	movs	r0, #32
 800a34a:	4770      	bx	lr

0800a34c <__lo0bits>:
 800a34c:	6803      	ldr	r3, [r0, #0]
 800a34e:	0002      	movs	r2, r0
 800a350:	2107      	movs	r1, #7
 800a352:	0018      	movs	r0, r3
 800a354:	4008      	ands	r0, r1
 800a356:	420b      	tst	r3, r1
 800a358:	d00d      	beq.n	800a376 <__lo0bits+0x2a>
 800a35a:	3906      	subs	r1, #6
 800a35c:	2000      	movs	r0, #0
 800a35e:	420b      	tst	r3, r1
 800a360:	d105      	bne.n	800a36e <__lo0bits+0x22>
 800a362:	3002      	adds	r0, #2
 800a364:	4203      	tst	r3, r0
 800a366:	d003      	beq.n	800a370 <__lo0bits+0x24>
 800a368:	40cb      	lsrs	r3, r1
 800a36a:	0008      	movs	r0, r1
 800a36c:	6013      	str	r3, [r2, #0]
 800a36e:	4770      	bx	lr
 800a370:	089b      	lsrs	r3, r3, #2
 800a372:	6013      	str	r3, [r2, #0]
 800a374:	e7fb      	b.n	800a36e <__lo0bits+0x22>
 800a376:	b299      	uxth	r1, r3
 800a378:	2900      	cmp	r1, #0
 800a37a:	d101      	bne.n	800a380 <__lo0bits+0x34>
 800a37c:	2010      	movs	r0, #16
 800a37e:	0c1b      	lsrs	r3, r3, #16
 800a380:	b2d9      	uxtb	r1, r3
 800a382:	2900      	cmp	r1, #0
 800a384:	d101      	bne.n	800a38a <__lo0bits+0x3e>
 800a386:	3008      	adds	r0, #8
 800a388:	0a1b      	lsrs	r3, r3, #8
 800a38a:	0719      	lsls	r1, r3, #28
 800a38c:	d101      	bne.n	800a392 <__lo0bits+0x46>
 800a38e:	3004      	adds	r0, #4
 800a390:	091b      	lsrs	r3, r3, #4
 800a392:	0799      	lsls	r1, r3, #30
 800a394:	d101      	bne.n	800a39a <__lo0bits+0x4e>
 800a396:	3002      	adds	r0, #2
 800a398:	089b      	lsrs	r3, r3, #2
 800a39a:	07d9      	lsls	r1, r3, #31
 800a39c:	d4e9      	bmi.n	800a372 <__lo0bits+0x26>
 800a39e:	3001      	adds	r0, #1
 800a3a0:	085b      	lsrs	r3, r3, #1
 800a3a2:	d1e6      	bne.n	800a372 <__lo0bits+0x26>
 800a3a4:	2020      	movs	r0, #32
 800a3a6:	e7e2      	b.n	800a36e <__lo0bits+0x22>

0800a3a8 <__i2b>:
 800a3a8:	b510      	push	{r4, lr}
 800a3aa:	000c      	movs	r4, r1
 800a3ac:	2101      	movs	r1, #1
 800a3ae:	f7ff febb 	bl	800a128 <_Balloc>
 800a3b2:	2800      	cmp	r0, #0
 800a3b4:	d106      	bne.n	800a3c4 <__i2b+0x1c>
 800a3b6:	21a0      	movs	r1, #160	; 0xa0
 800a3b8:	0002      	movs	r2, r0
 800a3ba:	4b04      	ldr	r3, [pc, #16]	; (800a3cc <__i2b+0x24>)
 800a3bc:	4804      	ldr	r0, [pc, #16]	; (800a3d0 <__i2b+0x28>)
 800a3be:	0049      	lsls	r1, r1, #1
 800a3c0:	f000 ff42 	bl	800b248 <__assert_func>
 800a3c4:	2301      	movs	r3, #1
 800a3c6:	6144      	str	r4, [r0, #20]
 800a3c8:	6103      	str	r3, [r0, #16]
 800a3ca:	bd10      	pop	{r4, pc}
 800a3cc:	0800c57c 	.word	0x0800c57c
 800a3d0:	0800c670 	.word	0x0800c670

0800a3d4 <__multiply>:
 800a3d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a3d6:	690b      	ldr	r3, [r1, #16]
 800a3d8:	0014      	movs	r4, r2
 800a3da:	6912      	ldr	r2, [r2, #16]
 800a3dc:	000d      	movs	r5, r1
 800a3de:	b089      	sub	sp, #36	; 0x24
 800a3e0:	4293      	cmp	r3, r2
 800a3e2:	da01      	bge.n	800a3e8 <__multiply+0x14>
 800a3e4:	0025      	movs	r5, r4
 800a3e6:	000c      	movs	r4, r1
 800a3e8:	692f      	ldr	r7, [r5, #16]
 800a3ea:	6926      	ldr	r6, [r4, #16]
 800a3ec:	6869      	ldr	r1, [r5, #4]
 800a3ee:	19bb      	adds	r3, r7, r6
 800a3f0:	9302      	str	r3, [sp, #8]
 800a3f2:	68ab      	ldr	r3, [r5, #8]
 800a3f4:	19ba      	adds	r2, r7, r6
 800a3f6:	4293      	cmp	r3, r2
 800a3f8:	da00      	bge.n	800a3fc <__multiply+0x28>
 800a3fa:	3101      	adds	r1, #1
 800a3fc:	f7ff fe94 	bl	800a128 <_Balloc>
 800a400:	9001      	str	r0, [sp, #4]
 800a402:	2800      	cmp	r0, #0
 800a404:	d106      	bne.n	800a414 <__multiply+0x40>
 800a406:	215e      	movs	r1, #94	; 0x5e
 800a408:	0002      	movs	r2, r0
 800a40a:	4b48      	ldr	r3, [pc, #288]	; (800a52c <__multiply+0x158>)
 800a40c:	4848      	ldr	r0, [pc, #288]	; (800a530 <__multiply+0x15c>)
 800a40e:	31ff      	adds	r1, #255	; 0xff
 800a410:	f000 ff1a 	bl	800b248 <__assert_func>
 800a414:	9b01      	ldr	r3, [sp, #4]
 800a416:	2200      	movs	r2, #0
 800a418:	3314      	adds	r3, #20
 800a41a:	469c      	mov	ip, r3
 800a41c:	19bb      	adds	r3, r7, r6
 800a41e:	009b      	lsls	r3, r3, #2
 800a420:	4463      	add	r3, ip
 800a422:	9303      	str	r3, [sp, #12]
 800a424:	4663      	mov	r3, ip
 800a426:	9903      	ldr	r1, [sp, #12]
 800a428:	428b      	cmp	r3, r1
 800a42a:	d32c      	bcc.n	800a486 <__multiply+0xb2>
 800a42c:	002b      	movs	r3, r5
 800a42e:	0022      	movs	r2, r4
 800a430:	3314      	adds	r3, #20
 800a432:	00bf      	lsls	r7, r7, #2
 800a434:	3214      	adds	r2, #20
 800a436:	9306      	str	r3, [sp, #24]
 800a438:	00b6      	lsls	r6, r6, #2
 800a43a:	19db      	adds	r3, r3, r7
 800a43c:	9304      	str	r3, [sp, #16]
 800a43e:	1993      	adds	r3, r2, r6
 800a440:	9307      	str	r3, [sp, #28]
 800a442:	2304      	movs	r3, #4
 800a444:	9305      	str	r3, [sp, #20]
 800a446:	002b      	movs	r3, r5
 800a448:	9904      	ldr	r1, [sp, #16]
 800a44a:	3315      	adds	r3, #21
 800a44c:	9200      	str	r2, [sp, #0]
 800a44e:	4299      	cmp	r1, r3
 800a450:	d305      	bcc.n	800a45e <__multiply+0x8a>
 800a452:	1b4b      	subs	r3, r1, r5
 800a454:	3b15      	subs	r3, #21
 800a456:	089b      	lsrs	r3, r3, #2
 800a458:	3301      	adds	r3, #1
 800a45a:	009b      	lsls	r3, r3, #2
 800a45c:	9305      	str	r3, [sp, #20]
 800a45e:	9b07      	ldr	r3, [sp, #28]
 800a460:	9a00      	ldr	r2, [sp, #0]
 800a462:	429a      	cmp	r2, r3
 800a464:	d311      	bcc.n	800a48a <__multiply+0xb6>
 800a466:	9b02      	ldr	r3, [sp, #8]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	dd06      	ble.n	800a47a <__multiply+0xa6>
 800a46c:	9b03      	ldr	r3, [sp, #12]
 800a46e:	3b04      	subs	r3, #4
 800a470:	9303      	str	r3, [sp, #12]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	9300      	str	r3, [sp, #0]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d054      	beq.n	800a524 <__multiply+0x150>
 800a47a:	9b01      	ldr	r3, [sp, #4]
 800a47c:	9a02      	ldr	r2, [sp, #8]
 800a47e:	0018      	movs	r0, r3
 800a480:	611a      	str	r2, [r3, #16]
 800a482:	b009      	add	sp, #36	; 0x24
 800a484:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a486:	c304      	stmia	r3!, {r2}
 800a488:	e7cd      	b.n	800a426 <__multiply+0x52>
 800a48a:	9b00      	ldr	r3, [sp, #0]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	b298      	uxth	r0, r3
 800a490:	2800      	cmp	r0, #0
 800a492:	d01c      	beq.n	800a4ce <__multiply+0xfa>
 800a494:	4667      	mov	r7, ip
 800a496:	2400      	movs	r4, #0
 800a498:	9e06      	ldr	r6, [sp, #24]
 800a49a:	ce02      	ldmia	r6!, {r1}
 800a49c:	683a      	ldr	r2, [r7, #0]
 800a49e:	b28b      	uxth	r3, r1
 800a4a0:	4343      	muls	r3, r0
 800a4a2:	0c09      	lsrs	r1, r1, #16
 800a4a4:	4341      	muls	r1, r0
 800a4a6:	b292      	uxth	r2, r2
 800a4a8:	189b      	adds	r3, r3, r2
 800a4aa:	191b      	adds	r3, r3, r4
 800a4ac:	000c      	movs	r4, r1
 800a4ae:	683a      	ldr	r2, [r7, #0]
 800a4b0:	0c11      	lsrs	r1, r2, #16
 800a4b2:	1861      	adds	r1, r4, r1
 800a4b4:	0c1c      	lsrs	r4, r3, #16
 800a4b6:	1909      	adds	r1, r1, r4
 800a4b8:	0c0c      	lsrs	r4, r1, #16
 800a4ba:	b29b      	uxth	r3, r3
 800a4bc:	0409      	lsls	r1, r1, #16
 800a4be:	430b      	orrs	r3, r1
 800a4c0:	c708      	stmia	r7!, {r3}
 800a4c2:	9b04      	ldr	r3, [sp, #16]
 800a4c4:	42b3      	cmp	r3, r6
 800a4c6:	d8e8      	bhi.n	800a49a <__multiply+0xc6>
 800a4c8:	4663      	mov	r3, ip
 800a4ca:	9a05      	ldr	r2, [sp, #20]
 800a4cc:	509c      	str	r4, [r3, r2]
 800a4ce:	9b00      	ldr	r3, [sp, #0]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	0c1e      	lsrs	r6, r3, #16
 800a4d4:	d020      	beq.n	800a518 <__multiply+0x144>
 800a4d6:	4663      	mov	r3, ip
 800a4d8:	002c      	movs	r4, r5
 800a4da:	4660      	mov	r0, ip
 800a4dc:	2700      	movs	r7, #0
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	3414      	adds	r4, #20
 800a4e2:	6822      	ldr	r2, [r4, #0]
 800a4e4:	b29b      	uxth	r3, r3
 800a4e6:	b291      	uxth	r1, r2
 800a4e8:	4371      	muls	r1, r6
 800a4ea:	6802      	ldr	r2, [r0, #0]
 800a4ec:	0c12      	lsrs	r2, r2, #16
 800a4ee:	1889      	adds	r1, r1, r2
 800a4f0:	19cf      	adds	r7, r1, r7
 800a4f2:	0439      	lsls	r1, r7, #16
 800a4f4:	430b      	orrs	r3, r1
 800a4f6:	6003      	str	r3, [r0, #0]
 800a4f8:	cc02      	ldmia	r4!, {r1}
 800a4fa:	6843      	ldr	r3, [r0, #4]
 800a4fc:	0c09      	lsrs	r1, r1, #16
 800a4fe:	4371      	muls	r1, r6
 800a500:	b29b      	uxth	r3, r3
 800a502:	0c3f      	lsrs	r7, r7, #16
 800a504:	18cb      	adds	r3, r1, r3
 800a506:	9a04      	ldr	r2, [sp, #16]
 800a508:	19db      	adds	r3, r3, r7
 800a50a:	0c1f      	lsrs	r7, r3, #16
 800a50c:	3004      	adds	r0, #4
 800a50e:	42a2      	cmp	r2, r4
 800a510:	d8e7      	bhi.n	800a4e2 <__multiply+0x10e>
 800a512:	4662      	mov	r2, ip
 800a514:	9905      	ldr	r1, [sp, #20]
 800a516:	5053      	str	r3, [r2, r1]
 800a518:	9b00      	ldr	r3, [sp, #0]
 800a51a:	3304      	adds	r3, #4
 800a51c:	9300      	str	r3, [sp, #0]
 800a51e:	2304      	movs	r3, #4
 800a520:	449c      	add	ip, r3
 800a522:	e79c      	b.n	800a45e <__multiply+0x8a>
 800a524:	9b02      	ldr	r3, [sp, #8]
 800a526:	3b01      	subs	r3, #1
 800a528:	9302      	str	r3, [sp, #8]
 800a52a:	e79c      	b.n	800a466 <__multiply+0x92>
 800a52c:	0800c57c 	.word	0x0800c57c
 800a530:	0800c670 	.word	0x0800c670

0800a534 <__pow5mult>:
 800a534:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a536:	2303      	movs	r3, #3
 800a538:	0015      	movs	r5, r2
 800a53a:	0007      	movs	r7, r0
 800a53c:	000e      	movs	r6, r1
 800a53e:	401a      	ands	r2, r3
 800a540:	421d      	tst	r5, r3
 800a542:	d008      	beq.n	800a556 <__pow5mult+0x22>
 800a544:	4925      	ldr	r1, [pc, #148]	; (800a5dc <__pow5mult+0xa8>)
 800a546:	3a01      	subs	r2, #1
 800a548:	0092      	lsls	r2, r2, #2
 800a54a:	5852      	ldr	r2, [r2, r1]
 800a54c:	2300      	movs	r3, #0
 800a54e:	0031      	movs	r1, r6
 800a550:	f7ff fe52 	bl	800a1f8 <__multadd>
 800a554:	0006      	movs	r6, r0
 800a556:	10ad      	asrs	r5, r5, #2
 800a558:	d03d      	beq.n	800a5d6 <__pow5mult+0xa2>
 800a55a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800a55c:	2c00      	cmp	r4, #0
 800a55e:	d10f      	bne.n	800a580 <__pow5mult+0x4c>
 800a560:	2010      	movs	r0, #16
 800a562:	f7fc f977 	bl	8006854 <malloc>
 800a566:	1e02      	subs	r2, r0, #0
 800a568:	6278      	str	r0, [r7, #36]	; 0x24
 800a56a:	d105      	bne.n	800a578 <__pow5mult+0x44>
 800a56c:	21d7      	movs	r1, #215	; 0xd7
 800a56e:	4b1c      	ldr	r3, [pc, #112]	; (800a5e0 <__pow5mult+0xac>)
 800a570:	481c      	ldr	r0, [pc, #112]	; (800a5e4 <__pow5mult+0xb0>)
 800a572:	0049      	lsls	r1, r1, #1
 800a574:	f000 fe68 	bl	800b248 <__assert_func>
 800a578:	6044      	str	r4, [r0, #4]
 800a57a:	6084      	str	r4, [r0, #8]
 800a57c:	6004      	str	r4, [r0, #0]
 800a57e:	60c4      	str	r4, [r0, #12]
 800a580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a582:	689c      	ldr	r4, [r3, #8]
 800a584:	9301      	str	r3, [sp, #4]
 800a586:	2c00      	cmp	r4, #0
 800a588:	d108      	bne.n	800a59c <__pow5mult+0x68>
 800a58a:	0038      	movs	r0, r7
 800a58c:	4916      	ldr	r1, [pc, #88]	; (800a5e8 <__pow5mult+0xb4>)
 800a58e:	f7ff ff0b 	bl	800a3a8 <__i2b>
 800a592:	9b01      	ldr	r3, [sp, #4]
 800a594:	0004      	movs	r4, r0
 800a596:	6098      	str	r0, [r3, #8]
 800a598:	2300      	movs	r3, #0
 800a59a:	6003      	str	r3, [r0, #0]
 800a59c:	2301      	movs	r3, #1
 800a59e:	421d      	tst	r5, r3
 800a5a0:	d00a      	beq.n	800a5b8 <__pow5mult+0x84>
 800a5a2:	0031      	movs	r1, r6
 800a5a4:	0022      	movs	r2, r4
 800a5a6:	0038      	movs	r0, r7
 800a5a8:	f7ff ff14 	bl	800a3d4 <__multiply>
 800a5ac:	0031      	movs	r1, r6
 800a5ae:	9001      	str	r0, [sp, #4]
 800a5b0:	0038      	movs	r0, r7
 800a5b2:	f7ff fdfd 	bl	800a1b0 <_Bfree>
 800a5b6:	9e01      	ldr	r6, [sp, #4]
 800a5b8:	106d      	asrs	r5, r5, #1
 800a5ba:	d00c      	beq.n	800a5d6 <__pow5mult+0xa2>
 800a5bc:	6820      	ldr	r0, [r4, #0]
 800a5be:	2800      	cmp	r0, #0
 800a5c0:	d107      	bne.n	800a5d2 <__pow5mult+0x9e>
 800a5c2:	0022      	movs	r2, r4
 800a5c4:	0021      	movs	r1, r4
 800a5c6:	0038      	movs	r0, r7
 800a5c8:	f7ff ff04 	bl	800a3d4 <__multiply>
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	6020      	str	r0, [r4, #0]
 800a5d0:	6003      	str	r3, [r0, #0]
 800a5d2:	0004      	movs	r4, r0
 800a5d4:	e7e2      	b.n	800a59c <__pow5mult+0x68>
 800a5d6:	0030      	movs	r0, r6
 800a5d8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a5da:	46c0      	nop			; (mov r8, r8)
 800a5dc:	0800c7c0 	.word	0x0800c7c0
 800a5e0:	0800c506 	.word	0x0800c506
 800a5e4:	0800c670 	.word	0x0800c670
 800a5e8:	00000271 	.word	0x00000271

0800a5ec <__lshift>:
 800a5ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a5ee:	000c      	movs	r4, r1
 800a5f0:	0017      	movs	r7, r2
 800a5f2:	6923      	ldr	r3, [r4, #16]
 800a5f4:	1155      	asrs	r5, r2, #5
 800a5f6:	b087      	sub	sp, #28
 800a5f8:	18eb      	adds	r3, r5, r3
 800a5fa:	9302      	str	r3, [sp, #8]
 800a5fc:	3301      	adds	r3, #1
 800a5fe:	9301      	str	r3, [sp, #4]
 800a600:	6849      	ldr	r1, [r1, #4]
 800a602:	68a3      	ldr	r3, [r4, #8]
 800a604:	9004      	str	r0, [sp, #16]
 800a606:	9a01      	ldr	r2, [sp, #4]
 800a608:	4293      	cmp	r3, r2
 800a60a:	db11      	blt.n	800a630 <__lshift+0x44>
 800a60c:	9804      	ldr	r0, [sp, #16]
 800a60e:	f7ff fd8b 	bl	800a128 <_Balloc>
 800a612:	0002      	movs	r2, r0
 800a614:	2300      	movs	r3, #0
 800a616:	3214      	adds	r2, #20
 800a618:	0006      	movs	r6, r0
 800a61a:	0011      	movs	r1, r2
 800a61c:	9203      	str	r2, [sp, #12]
 800a61e:	4298      	cmp	r0, r3
 800a620:	d10d      	bne.n	800a63e <__lshift+0x52>
 800a622:	21da      	movs	r1, #218	; 0xda
 800a624:	0002      	movs	r2, r0
 800a626:	4b27      	ldr	r3, [pc, #156]	; (800a6c4 <__lshift+0xd8>)
 800a628:	4827      	ldr	r0, [pc, #156]	; (800a6c8 <__lshift+0xdc>)
 800a62a:	31ff      	adds	r1, #255	; 0xff
 800a62c:	f000 fe0c 	bl	800b248 <__assert_func>
 800a630:	3101      	adds	r1, #1
 800a632:	005b      	lsls	r3, r3, #1
 800a634:	e7e7      	b.n	800a606 <__lshift+0x1a>
 800a636:	2200      	movs	r2, #0
 800a638:	0098      	lsls	r0, r3, #2
 800a63a:	500a      	str	r2, [r1, r0]
 800a63c:	3301      	adds	r3, #1
 800a63e:	42ab      	cmp	r3, r5
 800a640:	dbf9      	blt.n	800a636 <__lshift+0x4a>
 800a642:	43eb      	mvns	r3, r5
 800a644:	17db      	asrs	r3, r3, #31
 800a646:	401d      	ands	r5, r3
 800a648:	9b03      	ldr	r3, [sp, #12]
 800a64a:	00ad      	lsls	r5, r5, #2
 800a64c:	211f      	movs	r1, #31
 800a64e:	0038      	movs	r0, r7
 800a650:	195d      	adds	r5, r3, r5
 800a652:	0023      	movs	r3, r4
 800a654:	6922      	ldr	r2, [r4, #16]
 800a656:	3314      	adds	r3, #20
 800a658:	0092      	lsls	r2, r2, #2
 800a65a:	4008      	ands	r0, r1
 800a65c:	4684      	mov	ip, r0
 800a65e:	189a      	adds	r2, r3, r2
 800a660:	420f      	tst	r7, r1
 800a662:	d02a      	beq.n	800a6ba <__lshift+0xce>
 800a664:	3101      	adds	r1, #1
 800a666:	1a09      	subs	r1, r1, r0
 800a668:	9105      	str	r1, [sp, #20]
 800a66a:	2100      	movs	r1, #0
 800a66c:	9503      	str	r5, [sp, #12]
 800a66e:	4667      	mov	r7, ip
 800a670:	6818      	ldr	r0, [r3, #0]
 800a672:	40b8      	lsls	r0, r7
 800a674:	4301      	orrs	r1, r0
 800a676:	9803      	ldr	r0, [sp, #12]
 800a678:	c002      	stmia	r0!, {r1}
 800a67a:	cb02      	ldmia	r3!, {r1}
 800a67c:	9003      	str	r0, [sp, #12]
 800a67e:	9805      	ldr	r0, [sp, #20]
 800a680:	40c1      	lsrs	r1, r0
 800a682:	429a      	cmp	r2, r3
 800a684:	d8f3      	bhi.n	800a66e <__lshift+0x82>
 800a686:	0020      	movs	r0, r4
 800a688:	3015      	adds	r0, #21
 800a68a:	2304      	movs	r3, #4
 800a68c:	4282      	cmp	r2, r0
 800a68e:	d304      	bcc.n	800a69a <__lshift+0xae>
 800a690:	1b13      	subs	r3, r2, r4
 800a692:	3b15      	subs	r3, #21
 800a694:	089b      	lsrs	r3, r3, #2
 800a696:	3301      	adds	r3, #1
 800a698:	009b      	lsls	r3, r3, #2
 800a69a:	50e9      	str	r1, [r5, r3]
 800a69c:	2900      	cmp	r1, #0
 800a69e:	d002      	beq.n	800a6a6 <__lshift+0xba>
 800a6a0:	9b02      	ldr	r3, [sp, #8]
 800a6a2:	3302      	adds	r3, #2
 800a6a4:	9301      	str	r3, [sp, #4]
 800a6a6:	9b01      	ldr	r3, [sp, #4]
 800a6a8:	9804      	ldr	r0, [sp, #16]
 800a6aa:	3b01      	subs	r3, #1
 800a6ac:	0021      	movs	r1, r4
 800a6ae:	6133      	str	r3, [r6, #16]
 800a6b0:	f7ff fd7e 	bl	800a1b0 <_Bfree>
 800a6b4:	0030      	movs	r0, r6
 800a6b6:	b007      	add	sp, #28
 800a6b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6ba:	cb02      	ldmia	r3!, {r1}
 800a6bc:	c502      	stmia	r5!, {r1}
 800a6be:	429a      	cmp	r2, r3
 800a6c0:	d8fb      	bhi.n	800a6ba <__lshift+0xce>
 800a6c2:	e7f0      	b.n	800a6a6 <__lshift+0xba>
 800a6c4:	0800c57c 	.word	0x0800c57c
 800a6c8:	0800c670 	.word	0x0800c670

0800a6cc <__mcmp>:
 800a6cc:	6902      	ldr	r2, [r0, #16]
 800a6ce:	690b      	ldr	r3, [r1, #16]
 800a6d0:	b530      	push	{r4, r5, lr}
 800a6d2:	0004      	movs	r4, r0
 800a6d4:	1ad0      	subs	r0, r2, r3
 800a6d6:	429a      	cmp	r2, r3
 800a6d8:	d10d      	bne.n	800a6f6 <__mcmp+0x2a>
 800a6da:	009b      	lsls	r3, r3, #2
 800a6dc:	3414      	adds	r4, #20
 800a6de:	3114      	adds	r1, #20
 800a6e0:	18e2      	adds	r2, r4, r3
 800a6e2:	18c9      	adds	r1, r1, r3
 800a6e4:	3a04      	subs	r2, #4
 800a6e6:	3904      	subs	r1, #4
 800a6e8:	6815      	ldr	r5, [r2, #0]
 800a6ea:	680b      	ldr	r3, [r1, #0]
 800a6ec:	429d      	cmp	r5, r3
 800a6ee:	d003      	beq.n	800a6f8 <__mcmp+0x2c>
 800a6f0:	2001      	movs	r0, #1
 800a6f2:	429d      	cmp	r5, r3
 800a6f4:	d303      	bcc.n	800a6fe <__mcmp+0x32>
 800a6f6:	bd30      	pop	{r4, r5, pc}
 800a6f8:	4294      	cmp	r4, r2
 800a6fa:	d3f3      	bcc.n	800a6e4 <__mcmp+0x18>
 800a6fc:	e7fb      	b.n	800a6f6 <__mcmp+0x2a>
 800a6fe:	4240      	negs	r0, r0
 800a700:	e7f9      	b.n	800a6f6 <__mcmp+0x2a>
	...

0800a704 <__mdiff>:
 800a704:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a706:	000e      	movs	r6, r1
 800a708:	0007      	movs	r7, r0
 800a70a:	0011      	movs	r1, r2
 800a70c:	0030      	movs	r0, r6
 800a70e:	b087      	sub	sp, #28
 800a710:	0014      	movs	r4, r2
 800a712:	f7ff ffdb 	bl	800a6cc <__mcmp>
 800a716:	1e05      	subs	r5, r0, #0
 800a718:	d110      	bne.n	800a73c <__mdiff+0x38>
 800a71a:	0001      	movs	r1, r0
 800a71c:	0038      	movs	r0, r7
 800a71e:	f7ff fd03 	bl	800a128 <_Balloc>
 800a722:	1e02      	subs	r2, r0, #0
 800a724:	d104      	bne.n	800a730 <__mdiff+0x2c>
 800a726:	4b40      	ldr	r3, [pc, #256]	; (800a828 <__mdiff+0x124>)
 800a728:	4940      	ldr	r1, [pc, #256]	; (800a82c <__mdiff+0x128>)
 800a72a:	4841      	ldr	r0, [pc, #260]	; (800a830 <__mdiff+0x12c>)
 800a72c:	f000 fd8c 	bl	800b248 <__assert_func>
 800a730:	2301      	movs	r3, #1
 800a732:	6145      	str	r5, [r0, #20]
 800a734:	6103      	str	r3, [r0, #16]
 800a736:	0010      	movs	r0, r2
 800a738:	b007      	add	sp, #28
 800a73a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a73c:	2301      	movs	r3, #1
 800a73e:	9301      	str	r3, [sp, #4]
 800a740:	2800      	cmp	r0, #0
 800a742:	db04      	blt.n	800a74e <__mdiff+0x4a>
 800a744:	0023      	movs	r3, r4
 800a746:	0034      	movs	r4, r6
 800a748:	001e      	movs	r6, r3
 800a74a:	2300      	movs	r3, #0
 800a74c:	9301      	str	r3, [sp, #4]
 800a74e:	0038      	movs	r0, r7
 800a750:	6861      	ldr	r1, [r4, #4]
 800a752:	f7ff fce9 	bl	800a128 <_Balloc>
 800a756:	1e02      	subs	r2, r0, #0
 800a758:	d103      	bne.n	800a762 <__mdiff+0x5e>
 800a75a:	2190      	movs	r1, #144	; 0x90
 800a75c:	4b32      	ldr	r3, [pc, #200]	; (800a828 <__mdiff+0x124>)
 800a75e:	0089      	lsls	r1, r1, #2
 800a760:	e7e3      	b.n	800a72a <__mdiff+0x26>
 800a762:	9b01      	ldr	r3, [sp, #4]
 800a764:	2700      	movs	r7, #0
 800a766:	60c3      	str	r3, [r0, #12]
 800a768:	6920      	ldr	r0, [r4, #16]
 800a76a:	3414      	adds	r4, #20
 800a76c:	9401      	str	r4, [sp, #4]
 800a76e:	9b01      	ldr	r3, [sp, #4]
 800a770:	0084      	lsls	r4, r0, #2
 800a772:	191b      	adds	r3, r3, r4
 800a774:	0034      	movs	r4, r6
 800a776:	9302      	str	r3, [sp, #8]
 800a778:	6933      	ldr	r3, [r6, #16]
 800a77a:	3414      	adds	r4, #20
 800a77c:	0099      	lsls	r1, r3, #2
 800a77e:	1863      	adds	r3, r4, r1
 800a780:	9303      	str	r3, [sp, #12]
 800a782:	0013      	movs	r3, r2
 800a784:	3314      	adds	r3, #20
 800a786:	469c      	mov	ip, r3
 800a788:	9305      	str	r3, [sp, #20]
 800a78a:	9b01      	ldr	r3, [sp, #4]
 800a78c:	9304      	str	r3, [sp, #16]
 800a78e:	9b04      	ldr	r3, [sp, #16]
 800a790:	cc02      	ldmia	r4!, {r1}
 800a792:	cb20      	ldmia	r3!, {r5}
 800a794:	9304      	str	r3, [sp, #16]
 800a796:	b2ab      	uxth	r3, r5
 800a798:	19df      	adds	r7, r3, r7
 800a79a:	b28b      	uxth	r3, r1
 800a79c:	1afb      	subs	r3, r7, r3
 800a79e:	0c2d      	lsrs	r5, r5, #16
 800a7a0:	0c09      	lsrs	r1, r1, #16
 800a7a2:	1a69      	subs	r1, r5, r1
 800a7a4:	141d      	asrs	r5, r3, #16
 800a7a6:	1949      	adds	r1, r1, r5
 800a7a8:	140f      	asrs	r7, r1, #16
 800a7aa:	b29b      	uxth	r3, r3
 800a7ac:	0409      	lsls	r1, r1, #16
 800a7ae:	430b      	orrs	r3, r1
 800a7b0:	4661      	mov	r1, ip
 800a7b2:	c108      	stmia	r1!, {r3}
 800a7b4:	9b03      	ldr	r3, [sp, #12]
 800a7b6:	468c      	mov	ip, r1
 800a7b8:	42a3      	cmp	r3, r4
 800a7ba:	d8e8      	bhi.n	800a78e <__mdiff+0x8a>
 800a7bc:	0031      	movs	r1, r6
 800a7be:	9c03      	ldr	r4, [sp, #12]
 800a7c0:	3115      	adds	r1, #21
 800a7c2:	2304      	movs	r3, #4
 800a7c4:	428c      	cmp	r4, r1
 800a7c6:	d304      	bcc.n	800a7d2 <__mdiff+0xce>
 800a7c8:	1ba3      	subs	r3, r4, r6
 800a7ca:	3b15      	subs	r3, #21
 800a7cc:	089b      	lsrs	r3, r3, #2
 800a7ce:	3301      	adds	r3, #1
 800a7d0:	009b      	lsls	r3, r3, #2
 800a7d2:	9901      	ldr	r1, [sp, #4]
 800a7d4:	18cc      	adds	r4, r1, r3
 800a7d6:	9905      	ldr	r1, [sp, #20]
 800a7d8:	0026      	movs	r6, r4
 800a7da:	18cb      	adds	r3, r1, r3
 800a7dc:	469c      	mov	ip, r3
 800a7de:	9902      	ldr	r1, [sp, #8]
 800a7e0:	428e      	cmp	r6, r1
 800a7e2:	d310      	bcc.n	800a806 <__mdiff+0x102>
 800a7e4:	9e02      	ldr	r6, [sp, #8]
 800a7e6:	1ee5      	subs	r5, r4, #3
 800a7e8:	2100      	movs	r1, #0
 800a7ea:	42ae      	cmp	r6, r5
 800a7ec:	d304      	bcc.n	800a7f8 <__mdiff+0xf4>
 800a7ee:	0031      	movs	r1, r6
 800a7f0:	3103      	adds	r1, #3
 800a7f2:	1b09      	subs	r1, r1, r4
 800a7f4:	0889      	lsrs	r1, r1, #2
 800a7f6:	0089      	lsls	r1, r1, #2
 800a7f8:	185b      	adds	r3, r3, r1
 800a7fa:	3b04      	subs	r3, #4
 800a7fc:	6819      	ldr	r1, [r3, #0]
 800a7fe:	2900      	cmp	r1, #0
 800a800:	d00f      	beq.n	800a822 <__mdiff+0x11e>
 800a802:	6110      	str	r0, [r2, #16]
 800a804:	e797      	b.n	800a736 <__mdiff+0x32>
 800a806:	ce02      	ldmia	r6!, {r1}
 800a808:	b28d      	uxth	r5, r1
 800a80a:	19ed      	adds	r5, r5, r7
 800a80c:	0c0f      	lsrs	r7, r1, #16
 800a80e:	1429      	asrs	r1, r5, #16
 800a810:	1879      	adds	r1, r7, r1
 800a812:	140f      	asrs	r7, r1, #16
 800a814:	b2ad      	uxth	r5, r5
 800a816:	0409      	lsls	r1, r1, #16
 800a818:	430d      	orrs	r5, r1
 800a81a:	4661      	mov	r1, ip
 800a81c:	c120      	stmia	r1!, {r5}
 800a81e:	468c      	mov	ip, r1
 800a820:	e7dd      	b.n	800a7de <__mdiff+0xda>
 800a822:	3801      	subs	r0, #1
 800a824:	e7e9      	b.n	800a7fa <__mdiff+0xf6>
 800a826:	46c0      	nop			; (mov r8, r8)
 800a828:	0800c57c 	.word	0x0800c57c
 800a82c:	00000232 	.word	0x00000232
 800a830:	0800c670 	.word	0x0800c670

0800a834 <__ulp>:
 800a834:	4b0f      	ldr	r3, [pc, #60]	; (800a874 <__ulp+0x40>)
 800a836:	4019      	ands	r1, r3
 800a838:	4b0f      	ldr	r3, [pc, #60]	; (800a878 <__ulp+0x44>)
 800a83a:	18c9      	adds	r1, r1, r3
 800a83c:	2900      	cmp	r1, #0
 800a83e:	dd04      	ble.n	800a84a <__ulp+0x16>
 800a840:	2200      	movs	r2, #0
 800a842:	000b      	movs	r3, r1
 800a844:	0010      	movs	r0, r2
 800a846:	0019      	movs	r1, r3
 800a848:	4770      	bx	lr
 800a84a:	4249      	negs	r1, r1
 800a84c:	2200      	movs	r2, #0
 800a84e:	2300      	movs	r3, #0
 800a850:	1509      	asrs	r1, r1, #20
 800a852:	2913      	cmp	r1, #19
 800a854:	dc04      	bgt.n	800a860 <__ulp+0x2c>
 800a856:	2080      	movs	r0, #128	; 0x80
 800a858:	0300      	lsls	r0, r0, #12
 800a85a:	4108      	asrs	r0, r1
 800a85c:	0003      	movs	r3, r0
 800a85e:	e7f1      	b.n	800a844 <__ulp+0x10>
 800a860:	3914      	subs	r1, #20
 800a862:	2001      	movs	r0, #1
 800a864:	291e      	cmp	r1, #30
 800a866:	dc02      	bgt.n	800a86e <__ulp+0x3a>
 800a868:	2080      	movs	r0, #128	; 0x80
 800a86a:	0600      	lsls	r0, r0, #24
 800a86c:	40c8      	lsrs	r0, r1
 800a86e:	0002      	movs	r2, r0
 800a870:	e7e8      	b.n	800a844 <__ulp+0x10>
 800a872:	46c0      	nop			; (mov r8, r8)
 800a874:	7ff00000 	.word	0x7ff00000
 800a878:	fcc00000 	.word	0xfcc00000

0800a87c <__b2d>:
 800a87c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a87e:	0006      	movs	r6, r0
 800a880:	6903      	ldr	r3, [r0, #16]
 800a882:	3614      	adds	r6, #20
 800a884:	009b      	lsls	r3, r3, #2
 800a886:	18f3      	adds	r3, r6, r3
 800a888:	1f1d      	subs	r5, r3, #4
 800a88a:	682c      	ldr	r4, [r5, #0]
 800a88c:	000f      	movs	r7, r1
 800a88e:	0020      	movs	r0, r4
 800a890:	9301      	str	r3, [sp, #4]
 800a892:	f7ff fd41 	bl	800a318 <__hi0bits>
 800a896:	2320      	movs	r3, #32
 800a898:	1a1b      	subs	r3, r3, r0
 800a89a:	491f      	ldr	r1, [pc, #124]	; (800a918 <__b2d+0x9c>)
 800a89c:	603b      	str	r3, [r7, #0]
 800a89e:	280a      	cmp	r0, #10
 800a8a0:	dc16      	bgt.n	800a8d0 <__b2d+0x54>
 800a8a2:	230b      	movs	r3, #11
 800a8a4:	0027      	movs	r7, r4
 800a8a6:	1a1b      	subs	r3, r3, r0
 800a8a8:	40df      	lsrs	r7, r3
 800a8aa:	4339      	orrs	r1, r7
 800a8ac:	469c      	mov	ip, r3
 800a8ae:	000b      	movs	r3, r1
 800a8b0:	2100      	movs	r1, #0
 800a8b2:	42ae      	cmp	r6, r5
 800a8b4:	d202      	bcs.n	800a8bc <__b2d+0x40>
 800a8b6:	9901      	ldr	r1, [sp, #4]
 800a8b8:	3908      	subs	r1, #8
 800a8ba:	6809      	ldr	r1, [r1, #0]
 800a8bc:	3015      	adds	r0, #21
 800a8be:	4084      	lsls	r4, r0
 800a8c0:	4660      	mov	r0, ip
 800a8c2:	40c1      	lsrs	r1, r0
 800a8c4:	430c      	orrs	r4, r1
 800a8c6:	0022      	movs	r2, r4
 800a8c8:	0010      	movs	r0, r2
 800a8ca:	0019      	movs	r1, r3
 800a8cc:	b003      	add	sp, #12
 800a8ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a8d0:	2700      	movs	r7, #0
 800a8d2:	42ae      	cmp	r6, r5
 800a8d4:	d202      	bcs.n	800a8dc <__b2d+0x60>
 800a8d6:	9d01      	ldr	r5, [sp, #4]
 800a8d8:	3d08      	subs	r5, #8
 800a8da:	682f      	ldr	r7, [r5, #0]
 800a8dc:	230b      	movs	r3, #11
 800a8de:	425b      	negs	r3, r3
 800a8e0:	469c      	mov	ip, r3
 800a8e2:	4484      	add	ip, r0
 800a8e4:	280b      	cmp	r0, #11
 800a8e6:	d013      	beq.n	800a910 <__b2d+0x94>
 800a8e8:	4663      	mov	r3, ip
 800a8ea:	2020      	movs	r0, #32
 800a8ec:	409c      	lsls	r4, r3
 800a8ee:	1ac0      	subs	r0, r0, r3
 800a8f0:	003b      	movs	r3, r7
 800a8f2:	40c3      	lsrs	r3, r0
 800a8f4:	431c      	orrs	r4, r3
 800a8f6:	4321      	orrs	r1, r4
 800a8f8:	000b      	movs	r3, r1
 800a8fa:	2100      	movs	r1, #0
 800a8fc:	42b5      	cmp	r5, r6
 800a8fe:	d901      	bls.n	800a904 <__b2d+0x88>
 800a900:	3d04      	subs	r5, #4
 800a902:	6829      	ldr	r1, [r5, #0]
 800a904:	4664      	mov	r4, ip
 800a906:	40c1      	lsrs	r1, r0
 800a908:	40a7      	lsls	r7, r4
 800a90a:	430f      	orrs	r7, r1
 800a90c:	003a      	movs	r2, r7
 800a90e:	e7db      	b.n	800a8c8 <__b2d+0x4c>
 800a910:	4321      	orrs	r1, r4
 800a912:	000b      	movs	r3, r1
 800a914:	e7fa      	b.n	800a90c <__b2d+0x90>
 800a916:	46c0      	nop			; (mov r8, r8)
 800a918:	3ff00000 	.word	0x3ff00000

0800a91c <__d2b>:
 800a91c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a91e:	2101      	movs	r1, #1
 800a920:	0014      	movs	r4, r2
 800a922:	001e      	movs	r6, r3
 800a924:	9f08      	ldr	r7, [sp, #32]
 800a926:	f7ff fbff 	bl	800a128 <_Balloc>
 800a92a:	1e05      	subs	r5, r0, #0
 800a92c:	d105      	bne.n	800a93a <__d2b+0x1e>
 800a92e:	0002      	movs	r2, r0
 800a930:	4b26      	ldr	r3, [pc, #152]	; (800a9cc <__d2b+0xb0>)
 800a932:	4927      	ldr	r1, [pc, #156]	; (800a9d0 <__d2b+0xb4>)
 800a934:	4827      	ldr	r0, [pc, #156]	; (800a9d4 <__d2b+0xb8>)
 800a936:	f000 fc87 	bl	800b248 <__assert_func>
 800a93a:	0333      	lsls	r3, r6, #12
 800a93c:	0076      	lsls	r6, r6, #1
 800a93e:	0b1b      	lsrs	r3, r3, #12
 800a940:	0d76      	lsrs	r6, r6, #21
 800a942:	d124      	bne.n	800a98e <__d2b+0x72>
 800a944:	9301      	str	r3, [sp, #4]
 800a946:	2c00      	cmp	r4, #0
 800a948:	d027      	beq.n	800a99a <__d2b+0x7e>
 800a94a:	4668      	mov	r0, sp
 800a94c:	9400      	str	r4, [sp, #0]
 800a94e:	f7ff fcfd 	bl	800a34c <__lo0bits>
 800a952:	9c00      	ldr	r4, [sp, #0]
 800a954:	2800      	cmp	r0, #0
 800a956:	d01e      	beq.n	800a996 <__d2b+0x7a>
 800a958:	9b01      	ldr	r3, [sp, #4]
 800a95a:	2120      	movs	r1, #32
 800a95c:	001a      	movs	r2, r3
 800a95e:	1a09      	subs	r1, r1, r0
 800a960:	408a      	lsls	r2, r1
 800a962:	40c3      	lsrs	r3, r0
 800a964:	4322      	orrs	r2, r4
 800a966:	616a      	str	r2, [r5, #20]
 800a968:	9301      	str	r3, [sp, #4]
 800a96a:	9c01      	ldr	r4, [sp, #4]
 800a96c:	61ac      	str	r4, [r5, #24]
 800a96e:	1e63      	subs	r3, r4, #1
 800a970:	419c      	sbcs	r4, r3
 800a972:	3401      	adds	r4, #1
 800a974:	612c      	str	r4, [r5, #16]
 800a976:	2e00      	cmp	r6, #0
 800a978:	d018      	beq.n	800a9ac <__d2b+0x90>
 800a97a:	4b17      	ldr	r3, [pc, #92]	; (800a9d8 <__d2b+0xbc>)
 800a97c:	18f6      	adds	r6, r6, r3
 800a97e:	2335      	movs	r3, #53	; 0x35
 800a980:	1836      	adds	r6, r6, r0
 800a982:	1a18      	subs	r0, r3, r0
 800a984:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a986:	603e      	str	r6, [r7, #0]
 800a988:	6018      	str	r0, [r3, #0]
 800a98a:	0028      	movs	r0, r5
 800a98c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a98e:	2280      	movs	r2, #128	; 0x80
 800a990:	0352      	lsls	r2, r2, #13
 800a992:	4313      	orrs	r3, r2
 800a994:	e7d6      	b.n	800a944 <__d2b+0x28>
 800a996:	616c      	str	r4, [r5, #20]
 800a998:	e7e7      	b.n	800a96a <__d2b+0x4e>
 800a99a:	a801      	add	r0, sp, #4
 800a99c:	f7ff fcd6 	bl	800a34c <__lo0bits>
 800a9a0:	2401      	movs	r4, #1
 800a9a2:	9b01      	ldr	r3, [sp, #4]
 800a9a4:	612c      	str	r4, [r5, #16]
 800a9a6:	616b      	str	r3, [r5, #20]
 800a9a8:	3020      	adds	r0, #32
 800a9aa:	e7e4      	b.n	800a976 <__d2b+0x5a>
 800a9ac:	4b0b      	ldr	r3, [pc, #44]	; (800a9dc <__d2b+0xc0>)
 800a9ae:	18c0      	adds	r0, r0, r3
 800a9b0:	4b0b      	ldr	r3, [pc, #44]	; (800a9e0 <__d2b+0xc4>)
 800a9b2:	6038      	str	r0, [r7, #0]
 800a9b4:	18e3      	adds	r3, r4, r3
 800a9b6:	009b      	lsls	r3, r3, #2
 800a9b8:	18eb      	adds	r3, r5, r3
 800a9ba:	6958      	ldr	r0, [r3, #20]
 800a9bc:	f7ff fcac 	bl	800a318 <__hi0bits>
 800a9c0:	0164      	lsls	r4, r4, #5
 800a9c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9c4:	1a24      	subs	r4, r4, r0
 800a9c6:	601c      	str	r4, [r3, #0]
 800a9c8:	e7df      	b.n	800a98a <__d2b+0x6e>
 800a9ca:	46c0      	nop			; (mov r8, r8)
 800a9cc:	0800c57c 	.word	0x0800c57c
 800a9d0:	0000030a 	.word	0x0000030a
 800a9d4:	0800c670 	.word	0x0800c670
 800a9d8:	fffffbcd 	.word	0xfffffbcd
 800a9dc:	fffffbce 	.word	0xfffffbce
 800a9e0:	3fffffff 	.word	0x3fffffff

0800a9e4 <__ratio>:
 800a9e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a9e6:	b085      	sub	sp, #20
 800a9e8:	000d      	movs	r5, r1
 800a9ea:	a902      	add	r1, sp, #8
 800a9ec:	0004      	movs	r4, r0
 800a9ee:	f7ff ff45 	bl	800a87c <__b2d>
 800a9f2:	9000      	str	r0, [sp, #0]
 800a9f4:	9101      	str	r1, [sp, #4]
 800a9f6:	9e00      	ldr	r6, [sp, #0]
 800a9f8:	9f01      	ldr	r7, [sp, #4]
 800a9fa:	0028      	movs	r0, r5
 800a9fc:	a903      	add	r1, sp, #12
 800a9fe:	f7ff ff3d 	bl	800a87c <__b2d>
 800aa02:	6924      	ldr	r4, [r4, #16]
 800aa04:	692d      	ldr	r5, [r5, #16]
 800aa06:	0002      	movs	r2, r0
 800aa08:	1b65      	subs	r5, r4, r5
 800aa0a:	016c      	lsls	r4, r5, #5
 800aa0c:	46a4      	mov	ip, r4
 800aa0e:	9d03      	ldr	r5, [sp, #12]
 800aa10:	9c02      	ldr	r4, [sp, #8]
 800aa12:	000b      	movs	r3, r1
 800aa14:	1b64      	subs	r4, r4, r5
 800aa16:	4464      	add	r4, ip
 800aa18:	0525      	lsls	r5, r4, #20
 800aa1a:	2c00      	cmp	r4, #0
 800aa1c:	dd07      	ble.n	800aa2e <__ratio+0x4a>
 800aa1e:	9901      	ldr	r1, [sp, #4]
 800aa20:	186f      	adds	r7, r5, r1
 800aa22:	0030      	movs	r0, r6
 800aa24:	0039      	movs	r1, r7
 800aa26:	f7f7 f853 	bl	8001ad0 <__aeabi_ddiv>
 800aa2a:	b005      	add	sp, #20
 800aa2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa2e:	1b4b      	subs	r3, r1, r5
 800aa30:	e7f7      	b.n	800aa22 <__ratio+0x3e>

0800aa32 <__copybits>:
 800aa32:	b570      	push	{r4, r5, r6, lr}
 800aa34:	0015      	movs	r5, r2
 800aa36:	6913      	ldr	r3, [r2, #16]
 800aa38:	3514      	adds	r5, #20
 800aa3a:	009c      	lsls	r4, r3, #2
 800aa3c:	0006      	movs	r6, r0
 800aa3e:	002b      	movs	r3, r5
 800aa40:	3901      	subs	r1, #1
 800aa42:	1149      	asrs	r1, r1, #5
 800aa44:	3101      	adds	r1, #1
 800aa46:	0089      	lsls	r1, r1, #2
 800aa48:	1841      	adds	r1, r0, r1
 800aa4a:	192c      	adds	r4, r5, r4
 800aa4c:	429c      	cmp	r4, r3
 800aa4e:	d80d      	bhi.n	800aa6c <__copybits+0x3a>
 800aa50:	0015      	movs	r5, r2
 800aa52:	3511      	adds	r5, #17
 800aa54:	2300      	movs	r3, #0
 800aa56:	42a5      	cmp	r5, r4
 800aa58:	d803      	bhi.n	800aa62 <__copybits+0x30>
 800aa5a:	1aa3      	subs	r3, r4, r2
 800aa5c:	3b11      	subs	r3, #17
 800aa5e:	089b      	lsrs	r3, r3, #2
 800aa60:	009b      	lsls	r3, r3, #2
 800aa62:	18c0      	adds	r0, r0, r3
 800aa64:	2300      	movs	r3, #0
 800aa66:	4281      	cmp	r1, r0
 800aa68:	d803      	bhi.n	800aa72 <__copybits+0x40>
 800aa6a:	bd70      	pop	{r4, r5, r6, pc}
 800aa6c:	cb20      	ldmia	r3!, {r5}
 800aa6e:	c620      	stmia	r6!, {r5}
 800aa70:	e7ec      	b.n	800aa4c <__copybits+0x1a>
 800aa72:	c008      	stmia	r0!, {r3}
 800aa74:	e7f7      	b.n	800aa66 <__copybits+0x34>

0800aa76 <__any_on>:
 800aa76:	0002      	movs	r2, r0
 800aa78:	6900      	ldr	r0, [r0, #16]
 800aa7a:	b510      	push	{r4, lr}
 800aa7c:	3214      	adds	r2, #20
 800aa7e:	114b      	asrs	r3, r1, #5
 800aa80:	4298      	cmp	r0, r3
 800aa82:	db13      	blt.n	800aaac <__any_on+0x36>
 800aa84:	dd0c      	ble.n	800aaa0 <__any_on+0x2a>
 800aa86:	241f      	movs	r4, #31
 800aa88:	0008      	movs	r0, r1
 800aa8a:	4020      	ands	r0, r4
 800aa8c:	4221      	tst	r1, r4
 800aa8e:	d007      	beq.n	800aaa0 <__any_on+0x2a>
 800aa90:	0099      	lsls	r1, r3, #2
 800aa92:	588c      	ldr	r4, [r1, r2]
 800aa94:	0021      	movs	r1, r4
 800aa96:	40c1      	lsrs	r1, r0
 800aa98:	4081      	lsls	r1, r0
 800aa9a:	2001      	movs	r0, #1
 800aa9c:	428c      	cmp	r4, r1
 800aa9e:	d104      	bne.n	800aaaa <__any_on+0x34>
 800aaa0:	009b      	lsls	r3, r3, #2
 800aaa2:	18d3      	adds	r3, r2, r3
 800aaa4:	4293      	cmp	r3, r2
 800aaa6:	d803      	bhi.n	800aab0 <__any_on+0x3a>
 800aaa8:	2000      	movs	r0, #0
 800aaaa:	bd10      	pop	{r4, pc}
 800aaac:	0003      	movs	r3, r0
 800aaae:	e7f7      	b.n	800aaa0 <__any_on+0x2a>
 800aab0:	3b04      	subs	r3, #4
 800aab2:	6819      	ldr	r1, [r3, #0]
 800aab4:	2900      	cmp	r1, #0
 800aab6:	d0f5      	beq.n	800aaa4 <__any_on+0x2e>
 800aab8:	2001      	movs	r0, #1
 800aaba:	e7f6      	b.n	800aaaa <__any_on+0x34>

0800aabc <_calloc_r>:
 800aabc:	434a      	muls	r2, r1
 800aabe:	b570      	push	{r4, r5, r6, lr}
 800aac0:	0011      	movs	r1, r2
 800aac2:	0015      	movs	r5, r2
 800aac4:	f7fb ff44 	bl	8006950 <_malloc_r>
 800aac8:	1e04      	subs	r4, r0, #0
 800aaca:	d003      	beq.n	800aad4 <_calloc_r+0x18>
 800aacc:	002a      	movs	r2, r5
 800aace:	2100      	movs	r1, #0
 800aad0:	f7fb feeb 	bl	80068aa <memset>
 800aad4:	0020      	movs	r0, r4
 800aad6:	bd70      	pop	{r4, r5, r6, pc}

0800aad8 <_realloc_r>:
 800aad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aada:	0007      	movs	r7, r0
 800aadc:	000d      	movs	r5, r1
 800aade:	0016      	movs	r6, r2
 800aae0:	2900      	cmp	r1, #0
 800aae2:	d105      	bne.n	800aaf0 <_realloc_r+0x18>
 800aae4:	0011      	movs	r1, r2
 800aae6:	f7fb ff33 	bl	8006950 <_malloc_r>
 800aaea:	0004      	movs	r4, r0
 800aaec:	0020      	movs	r0, r4
 800aaee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aaf0:	2a00      	cmp	r2, #0
 800aaf2:	d103      	bne.n	800aafc <_realloc_r+0x24>
 800aaf4:	f7fb fee2 	bl	80068bc <_free_r>
 800aaf8:	0034      	movs	r4, r6
 800aafa:	e7f7      	b.n	800aaec <_realloc_r+0x14>
 800aafc:	f000 fc2f 	bl	800b35e <_malloc_usable_size_r>
 800ab00:	002c      	movs	r4, r5
 800ab02:	42b0      	cmp	r0, r6
 800ab04:	d2f2      	bcs.n	800aaec <_realloc_r+0x14>
 800ab06:	0031      	movs	r1, r6
 800ab08:	0038      	movs	r0, r7
 800ab0a:	f7fb ff21 	bl	8006950 <_malloc_r>
 800ab0e:	1e04      	subs	r4, r0, #0
 800ab10:	d0ec      	beq.n	800aaec <_realloc_r+0x14>
 800ab12:	0029      	movs	r1, r5
 800ab14:	0032      	movs	r2, r6
 800ab16:	f7fb febf 	bl	8006898 <memcpy>
 800ab1a:	0029      	movs	r1, r5
 800ab1c:	0038      	movs	r0, r7
 800ab1e:	f7fb fecd 	bl	80068bc <_free_r>
 800ab22:	e7e3      	b.n	800aaec <_realloc_r+0x14>

0800ab24 <__ssputs_r>:
 800ab24:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab26:	688e      	ldr	r6, [r1, #8]
 800ab28:	b085      	sub	sp, #20
 800ab2a:	0007      	movs	r7, r0
 800ab2c:	000c      	movs	r4, r1
 800ab2e:	9203      	str	r2, [sp, #12]
 800ab30:	9301      	str	r3, [sp, #4]
 800ab32:	429e      	cmp	r6, r3
 800ab34:	d83c      	bhi.n	800abb0 <__ssputs_r+0x8c>
 800ab36:	2390      	movs	r3, #144	; 0x90
 800ab38:	898a      	ldrh	r2, [r1, #12]
 800ab3a:	00db      	lsls	r3, r3, #3
 800ab3c:	421a      	tst	r2, r3
 800ab3e:	d034      	beq.n	800abaa <__ssputs_r+0x86>
 800ab40:	2503      	movs	r5, #3
 800ab42:	6909      	ldr	r1, [r1, #16]
 800ab44:	6823      	ldr	r3, [r4, #0]
 800ab46:	1a5b      	subs	r3, r3, r1
 800ab48:	9302      	str	r3, [sp, #8]
 800ab4a:	6963      	ldr	r3, [r4, #20]
 800ab4c:	9802      	ldr	r0, [sp, #8]
 800ab4e:	435d      	muls	r5, r3
 800ab50:	0feb      	lsrs	r3, r5, #31
 800ab52:	195d      	adds	r5, r3, r5
 800ab54:	9b01      	ldr	r3, [sp, #4]
 800ab56:	106d      	asrs	r5, r5, #1
 800ab58:	3301      	adds	r3, #1
 800ab5a:	181b      	adds	r3, r3, r0
 800ab5c:	42ab      	cmp	r3, r5
 800ab5e:	d900      	bls.n	800ab62 <__ssputs_r+0x3e>
 800ab60:	001d      	movs	r5, r3
 800ab62:	0553      	lsls	r3, r2, #21
 800ab64:	d532      	bpl.n	800abcc <__ssputs_r+0xa8>
 800ab66:	0029      	movs	r1, r5
 800ab68:	0038      	movs	r0, r7
 800ab6a:	f7fb fef1 	bl	8006950 <_malloc_r>
 800ab6e:	1e06      	subs	r6, r0, #0
 800ab70:	d109      	bne.n	800ab86 <__ssputs_r+0x62>
 800ab72:	230c      	movs	r3, #12
 800ab74:	603b      	str	r3, [r7, #0]
 800ab76:	2340      	movs	r3, #64	; 0x40
 800ab78:	2001      	movs	r0, #1
 800ab7a:	89a2      	ldrh	r2, [r4, #12]
 800ab7c:	4240      	negs	r0, r0
 800ab7e:	4313      	orrs	r3, r2
 800ab80:	81a3      	strh	r3, [r4, #12]
 800ab82:	b005      	add	sp, #20
 800ab84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab86:	9a02      	ldr	r2, [sp, #8]
 800ab88:	6921      	ldr	r1, [r4, #16]
 800ab8a:	f7fb fe85 	bl	8006898 <memcpy>
 800ab8e:	89a3      	ldrh	r3, [r4, #12]
 800ab90:	4a14      	ldr	r2, [pc, #80]	; (800abe4 <__ssputs_r+0xc0>)
 800ab92:	401a      	ands	r2, r3
 800ab94:	2380      	movs	r3, #128	; 0x80
 800ab96:	4313      	orrs	r3, r2
 800ab98:	81a3      	strh	r3, [r4, #12]
 800ab9a:	9b02      	ldr	r3, [sp, #8]
 800ab9c:	6126      	str	r6, [r4, #16]
 800ab9e:	18f6      	adds	r6, r6, r3
 800aba0:	6026      	str	r6, [r4, #0]
 800aba2:	6165      	str	r5, [r4, #20]
 800aba4:	9e01      	ldr	r6, [sp, #4]
 800aba6:	1aed      	subs	r5, r5, r3
 800aba8:	60a5      	str	r5, [r4, #8]
 800abaa:	9b01      	ldr	r3, [sp, #4]
 800abac:	429e      	cmp	r6, r3
 800abae:	d900      	bls.n	800abb2 <__ssputs_r+0x8e>
 800abb0:	9e01      	ldr	r6, [sp, #4]
 800abb2:	0032      	movs	r2, r6
 800abb4:	9903      	ldr	r1, [sp, #12]
 800abb6:	6820      	ldr	r0, [r4, #0]
 800abb8:	f000 fbbe 	bl	800b338 <memmove>
 800abbc:	68a3      	ldr	r3, [r4, #8]
 800abbe:	2000      	movs	r0, #0
 800abc0:	1b9b      	subs	r3, r3, r6
 800abc2:	60a3      	str	r3, [r4, #8]
 800abc4:	6823      	ldr	r3, [r4, #0]
 800abc6:	199e      	adds	r6, r3, r6
 800abc8:	6026      	str	r6, [r4, #0]
 800abca:	e7da      	b.n	800ab82 <__ssputs_r+0x5e>
 800abcc:	002a      	movs	r2, r5
 800abce:	0038      	movs	r0, r7
 800abd0:	f7ff ff82 	bl	800aad8 <_realloc_r>
 800abd4:	1e06      	subs	r6, r0, #0
 800abd6:	d1e0      	bne.n	800ab9a <__ssputs_r+0x76>
 800abd8:	0038      	movs	r0, r7
 800abda:	6921      	ldr	r1, [r4, #16]
 800abdc:	f7fb fe6e 	bl	80068bc <_free_r>
 800abe0:	e7c7      	b.n	800ab72 <__ssputs_r+0x4e>
 800abe2:	46c0      	nop			; (mov r8, r8)
 800abe4:	fffffb7f 	.word	0xfffffb7f

0800abe8 <_svfiprintf_r>:
 800abe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abea:	b0a1      	sub	sp, #132	; 0x84
 800abec:	9003      	str	r0, [sp, #12]
 800abee:	001d      	movs	r5, r3
 800abf0:	898b      	ldrh	r3, [r1, #12]
 800abf2:	000f      	movs	r7, r1
 800abf4:	0016      	movs	r6, r2
 800abf6:	061b      	lsls	r3, r3, #24
 800abf8:	d511      	bpl.n	800ac1e <_svfiprintf_r+0x36>
 800abfa:	690b      	ldr	r3, [r1, #16]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d10e      	bne.n	800ac1e <_svfiprintf_r+0x36>
 800ac00:	2140      	movs	r1, #64	; 0x40
 800ac02:	f7fb fea5 	bl	8006950 <_malloc_r>
 800ac06:	6038      	str	r0, [r7, #0]
 800ac08:	6138      	str	r0, [r7, #16]
 800ac0a:	2800      	cmp	r0, #0
 800ac0c:	d105      	bne.n	800ac1a <_svfiprintf_r+0x32>
 800ac0e:	230c      	movs	r3, #12
 800ac10:	9a03      	ldr	r2, [sp, #12]
 800ac12:	3801      	subs	r0, #1
 800ac14:	6013      	str	r3, [r2, #0]
 800ac16:	b021      	add	sp, #132	; 0x84
 800ac18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac1a:	2340      	movs	r3, #64	; 0x40
 800ac1c:	617b      	str	r3, [r7, #20]
 800ac1e:	2300      	movs	r3, #0
 800ac20:	ac08      	add	r4, sp, #32
 800ac22:	6163      	str	r3, [r4, #20]
 800ac24:	3320      	adds	r3, #32
 800ac26:	7663      	strb	r3, [r4, #25]
 800ac28:	3310      	adds	r3, #16
 800ac2a:	76a3      	strb	r3, [r4, #26]
 800ac2c:	9507      	str	r5, [sp, #28]
 800ac2e:	0035      	movs	r5, r6
 800ac30:	782b      	ldrb	r3, [r5, #0]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d001      	beq.n	800ac3a <_svfiprintf_r+0x52>
 800ac36:	2b25      	cmp	r3, #37	; 0x25
 800ac38:	d147      	bne.n	800acca <_svfiprintf_r+0xe2>
 800ac3a:	1bab      	subs	r3, r5, r6
 800ac3c:	9305      	str	r3, [sp, #20]
 800ac3e:	42b5      	cmp	r5, r6
 800ac40:	d00c      	beq.n	800ac5c <_svfiprintf_r+0x74>
 800ac42:	0032      	movs	r2, r6
 800ac44:	0039      	movs	r1, r7
 800ac46:	9803      	ldr	r0, [sp, #12]
 800ac48:	f7ff ff6c 	bl	800ab24 <__ssputs_r>
 800ac4c:	1c43      	adds	r3, r0, #1
 800ac4e:	d100      	bne.n	800ac52 <_svfiprintf_r+0x6a>
 800ac50:	e0ae      	b.n	800adb0 <_svfiprintf_r+0x1c8>
 800ac52:	6962      	ldr	r2, [r4, #20]
 800ac54:	9b05      	ldr	r3, [sp, #20]
 800ac56:	4694      	mov	ip, r2
 800ac58:	4463      	add	r3, ip
 800ac5a:	6163      	str	r3, [r4, #20]
 800ac5c:	782b      	ldrb	r3, [r5, #0]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d100      	bne.n	800ac64 <_svfiprintf_r+0x7c>
 800ac62:	e0a5      	b.n	800adb0 <_svfiprintf_r+0x1c8>
 800ac64:	2201      	movs	r2, #1
 800ac66:	2300      	movs	r3, #0
 800ac68:	4252      	negs	r2, r2
 800ac6a:	6062      	str	r2, [r4, #4]
 800ac6c:	a904      	add	r1, sp, #16
 800ac6e:	3254      	adds	r2, #84	; 0x54
 800ac70:	1852      	adds	r2, r2, r1
 800ac72:	1c6e      	adds	r6, r5, #1
 800ac74:	6023      	str	r3, [r4, #0]
 800ac76:	60e3      	str	r3, [r4, #12]
 800ac78:	60a3      	str	r3, [r4, #8]
 800ac7a:	7013      	strb	r3, [r2, #0]
 800ac7c:	65a3      	str	r3, [r4, #88]	; 0x58
 800ac7e:	2205      	movs	r2, #5
 800ac80:	7831      	ldrb	r1, [r6, #0]
 800ac82:	4854      	ldr	r0, [pc, #336]	; (800add4 <_svfiprintf_r+0x1ec>)
 800ac84:	f7ff fa34 	bl	800a0f0 <memchr>
 800ac88:	1c75      	adds	r5, r6, #1
 800ac8a:	2800      	cmp	r0, #0
 800ac8c:	d11f      	bne.n	800acce <_svfiprintf_r+0xe6>
 800ac8e:	6822      	ldr	r2, [r4, #0]
 800ac90:	06d3      	lsls	r3, r2, #27
 800ac92:	d504      	bpl.n	800ac9e <_svfiprintf_r+0xb6>
 800ac94:	2353      	movs	r3, #83	; 0x53
 800ac96:	a904      	add	r1, sp, #16
 800ac98:	185b      	adds	r3, r3, r1
 800ac9a:	2120      	movs	r1, #32
 800ac9c:	7019      	strb	r1, [r3, #0]
 800ac9e:	0713      	lsls	r3, r2, #28
 800aca0:	d504      	bpl.n	800acac <_svfiprintf_r+0xc4>
 800aca2:	2353      	movs	r3, #83	; 0x53
 800aca4:	a904      	add	r1, sp, #16
 800aca6:	185b      	adds	r3, r3, r1
 800aca8:	212b      	movs	r1, #43	; 0x2b
 800acaa:	7019      	strb	r1, [r3, #0]
 800acac:	7833      	ldrb	r3, [r6, #0]
 800acae:	2b2a      	cmp	r3, #42	; 0x2a
 800acb0:	d016      	beq.n	800ace0 <_svfiprintf_r+0xf8>
 800acb2:	0035      	movs	r5, r6
 800acb4:	2100      	movs	r1, #0
 800acb6:	200a      	movs	r0, #10
 800acb8:	68e3      	ldr	r3, [r4, #12]
 800acba:	782a      	ldrb	r2, [r5, #0]
 800acbc:	1c6e      	adds	r6, r5, #1
 800acbe:	3a30      	subs	r2, #48	; 0x30
 800acc0:	2a09      	cmp	r2, #9
 800acc2:	d94e      	bls.n	800ad62 <_svfiprintf_r+0x17a>
 800acc4:	2900      	cmp	r1, #0
 800acc6:	d111      	bne.n	800acec <_svfiprintf_r+0x104>
 800acc8:	e017      	b.n	800acfa <_svfiprintf_r+0x112>
 800acca:	3501      	adds	r5, #1
 800accc:	e7b0      	b.n	800ac30 <_svfiprintf_r+0x48>
 800acce:	4b41      	ldr	r3, [pc, #260]	; (800add4 <_svfiprintf_r+0x1ec>)
 800acd0:	6822      	ldr	r2, [r4, #0]
 800acd2:	1ac0      	subs	r0, r0, r3
 800acd4:	2301      	movs	r3, #1
 800acd6:	4083      	lsls	r3, r0
 800acd8:	4313      	orrs	r3, r2
 800acda:	002e      	movs	r6, r5
 800acdc:	6023      	str	r3, [r4, #0]
 800acde:	e7ce      	b.n	800ac7e <_svfiprintf_r+0x96>
 800ace0:	9b07      	ldr	r3, [sp, #28]
 800ace2:	1d19      	adds	r1, r3, #4
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	9107      	str	r1, [sp, #28]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	db01      	blt.n	800acf0 <_svfiprintf_r+0x108>
 800acec:	930b      	str	r3, [sp, #44]	; 0x2c
 800acee:	e004      	b.n	800acfa <_svfiprintf_r+0x112>
 800acf0:	425b      	negs	r3, r3
 800acf2:	60e3      	str	r3, [r4, #12]
 800acf4:	2302      	movs	r3, #2
 800acf6:	4313      	orrs	r3, r2
 800acf8:	6023      	str	r3, [r4, #0]
 800acfa:	782b      	ldrb	r3, [r5, #0]
 800acfc:	2b2e      	cmp	r3, #46	; 0x2e
 800acfe:	d10a      	bne.n	800ad16 <_svfiprintf_r+0x12e>
 800ad00:	786b      	ldrb	r3, [r5, #1]
 800ad02:	2b2a      	cmp	r3, #42	; 0x2a
 800ad04:	d135      	bne.n	800ad72 <_svfiprintf_r+0x18a>
 800ad06:	9b07      	ldr	r3, [sp, #28]
 800ad08:	3502      	adds	r5, #2
 800ad0a:	1d1a      	adds	r2, r3, #4
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	9207      	str	r2, [sp, #28]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	db2b      	blt.n	800ad6c <_svfiprintf_r+0x184>
 800ad14:	9309      	str	r3, [sp, #36]	; 0x24
 800ad16:	4e30      	ldr	r6, [pc, #192]	; (800add8 <_svfiprintf_r+0x1f0>)
 800ad18:	2203      	movs	r2, #3
 800ad1a:	0030      	movs	r0, r6
 800ad1c:	7829      	ldrb	r1, [r5, #0]
 800ad1e:	f7ff f9e7 	bl	800a0f0 <memchr>
 800ad22:	2800      	cmp	r0, #0
 800ad24:	d006      	beq.n	800ad34 <_svfiprintf_r+0x14c>
 800ad26:	2340      	movs	r3, #64	; 0x40
 800ad28:	1b80      	subs	r0, r0, r6
 800ad2a:	4083      	lsls	r3, r0
 800ad2c:	6822      	ldr	r2, [r4, #0]
 800ad2e:	3501      	adds	r5, #1
 800ad30:	4313      	orrs	r3, r2
 800ad32:	6023      	str	r3, [r4, #0]
 800ad34:	7829      	ldrb	r1, [r5, #0]
 800ad36:	2206      	movs	r2, #6
 800ad38:	4828      	ldr	r0, [pc, #160]	; (800addc <_svfiprintf_r+0x1f4>)
 800ad3a:	1c6e      	adds	r6, r5, #1
 800ad3c:	7621      	strb	r1, [r4, #24]
 800ad3e:	f7ff f9d7 	bl	800a0f0 <memchr>
 800ad42:	2800      	cmp	r0, #0
 800ad44:	d03c      	beq.n	800adc0 <_svfiprintf_r+0x1d8>
 800ad46:	4b26      	ldr	r3, [pc, #152]	; (800ade0 <_svfiprintf_r+0x1f8>)
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d125      	bne.n	800ad98 <_svfiprintf_r+0x1b0>
 800ad4c:	2207      	movs	r2, #7
 800ad4e:	9b07      	ldr	r3, [sp, #28]
 800ad50:	3307      	adds	r3, #7
 800ad52:	4393      	bics	r3, r2
 800ad54:	3308      	adds	r3, #8
 800ad56:	9307      	str	r3, [sp, #28]
 800ad58:	6963      	ldr	r3, [r4, #20]
 800ad5a:	9a04      	ldr	r2, [sp, #16]
 800ad5c:	189b      	adds	r3, r3, r2
 800ad5e:	6163      	str	r3, [r4, #20]
 800ad60:	e765      	b.n	800ac2e <_svfiprintf_r+0x46>
 800ad62:	4343      	muls	r3, r0
 800ad64:	0035      	movs	r5, r6
 800ad66:	2101      	movs	r1, #1
 800ad68:	189b      	adds	r3, r3, r2
 800ad6a:	e7a6      	b.n	800acba <_svfiprintf_r+0xd2>
 800ad6c:	2301      	movs	r3, #1
 800ad6e:	425b      	negs	r3, r3
 800ad70:	e7d0      	b.n	800ad14 <_svfiprintf_r+0x12c>
 800ad72:	2300      	movs	r3, #0
 800ad74:	200a      	movs	r0, #10
 800ad76:	001a      	movs	r2, r3
 800ad78:	3501      	adds	r5, #1
 800ad7a:	6063      	str	r3, [r4, #4]
 800ad7c:	7829      	ldrb	r1, [r5, #0]
 800ad7e:	1c6e      	adds	r6, r5, #1
 800ad80:	3930      	subs	r1, #48	; 0x30
 800ad82:	2909      	cmp	r1, #9
 800ad84:	d903      	bls.n	800ad8e <_svfiprintf_r+0x1a6>
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d0c5      	beq.n	800ad16 <_svfiprintf_r+0x12e>
 800ad8a:	9209      	str	r2, [sp, #36]	; 0x24
 800ad8c:	e7c3      	b.n	800ad16 <_svfiprintf_r+0x12e>
 800ad8e:	4342      	muls	r2, r0
 800ad90:	0035      	movs	r5, r6
 800ad92:	2301      	movs	r3, #1
 800ad94:	1852      	adds	r2, r2, r1
 800ad96:	e7f1      	b.n	800ad7c <_svfiprintf_r+0x194>
 800ad98:	ab07      	add	r3, sp, #28
 800ad9a:	9300      	str	r3, [sp, #0]
 800ad9c:	003a      	movs	r2, r7
 800ad9e:	0021      	movs	r1, r4
 800ada0:	4b10      	ldr	r3, [pc, #64]	; (800ade4 <_svfiprintf_r+0x1fc>)
 800ada2:	9803      	ldr	r0, [sp, #12]
 800ada4:	f7fb fedc 	bl	8006b60 <_printf_float>
 800ada8:	9004      	str	r0, [sp, #16]
 800adaa:	9b04      	ldr	r3, [sp, #16]
 800adac:	3301      	adds	r3, #1
 800adae:	d1d3      	bne.n	800ad58 <_svfiprintf_r+0x170>
 800adb0:	89bb      	ldrh	r3, [r7, #12]
 800adb2:	980d      	ldr	r0, [sp, #52]	; 0x34
 800adb4:	065b      	lsls	r3, r3, #25
 800adb6:	d400      	bmi.n	800adba <_svfiprintf_r+0x1d2>
 800adb8:	e72d      	b.n	800ac16 <_svfiprintf_r+0x2e>
 800adba:	2001      	movs	r0, #1
 800adbc:	4240      	negs	r0, r0
 800adbe:	e72a      	b.n	800ac16 <_svfiprintf_r+0x2e>
 800adc0:	ab07      	add	r3, sp, #28
 800adc2:	9300      	str	r3, [sp, #0]
 800adc4:	003a      	movs	r2, r7
 800adc6:	0021      	movs	r1, r4
 800adc8:	4b06      	ldr	r3, [pc, #24]	; (800ade4 <_svfiprintf_r+0x1fc>)
 800adca:	9803      	ldr	r0, [sp, #12]
 800adcc:	f7fc f986 	bl	80070dc <_printf_i>
 800add0:	e7ea      	b.n	800ada8 <_svfiprintf_r+0x1c0>
 800add2:	46c0      	nop			; (mov r8, r8)
 800add4:	0800c7cc 	.word	0x0800c7cc
 800add8:	0800c7d2 	.word	0x0800c7d2
 800addc:	0800c7d6 	.word	0x0800c7d6
 800ade0:	08006b61 	.word	0x08006b61
 800ade4:	0800ab25 	.word	0x0800ab25

0800ade8 <__sfputc_r>:
 800ade8:	6893      	ldr	r3, [r2, #8]
 800adea:	b510      	push	{r4, lr}
 800adec:	3b01      	subs	r3, #1
 800adee:	6093      	str	r3, [r2, #8]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	da04      	bge.n	800adfe <__sfputc_r+0x16>
 800adf4:	6994      	ldr	r4, [r2, #24]
 800adf6:	42a3      	cmp	r3, r4
 800adf8:	db07      	blt.n	800ae0a <__sfputc_r+0x22>
 800adfa:	290a      	cmp	r1, #10
 800adfc:	d005      	beq.n	800ae0a <__sfputc_r+0x22>
 800adfe:	6813      	ldr	r3, [r2, #0]
 800ae00:	1c58      	adds	r0, r3, #1
 800ae02:	6010      	str	r0, [r2, #0]
 800ae04:	7019      	strb	r1, [r3, #0]
 800ae06:	0008      	movs	r0, r1
 800ae08:	bd10      	pop	{r4, pc}
 800ae0a:	f7fd fc33 	bl	8008674 <__swbuf_r>
 800ae0e:	0001      	movs	r1, r0
 800ae10:	e7f9      	b.n	800ae06 <__sfputc_r+0x1e>

0800ae12 <__sfputs_r>:
 800ae12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae14:	0006      	movs	r6, r0
 800ae16:	000f      	movs	r7, r1
 800ae18:	0014      	movs	r4, r2
 800ae1a:	18d5      	adds	r5, r2, r3
 800ae1c:	42ac      	cmp	r4, r5
 800ae1e:	d101      	bne.n	800ae24 <__sfputs_r+0x12>
 800ae20:	2000      	movs	r0, #0
 800ae22:	e007      	b.n	800ae34 <__sfputs_r+0x22>
 800ae24:	7821      	ldrb	r1, [r4, #0]
 800ae26:	003a      	movs	r2, r7
 800ae28:	0030      	movs	r0, r6
 800ae2a:	f7ff ffdd 	bl	800ade8 <__sfputc_r>
 800ae2e:	3401      	adds	r4, #1
 800ae30:	1c43      	adds	r3, r0, #1
 800ae32:	d1f3      	bne.n	800ae1c <__sfputs_r+0xa>
 800ae34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ae38 <_vfiprintf_r>:
 800ae38:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae3a:	b0a1      	sub	sp, #132	; 0x84
 800ae3c:	0006      	movs	r6, r0
 800ae3e:	000c      	movs	r4, r1
 800ae40:	001f      	movs	r7, r3
 800ae42:	9203      	str	r2, [sp, #12]
 800ae44:	2800      	cmp	r0, #0
 800ae46:	d004      	beq.n	800ae52 <_vfiprintf_r+0x1a>
 800ae48:	6983      	ldr	r3, [r0, #24]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d101      	bne.n	800ae52 <_vfiprintf_r+0x1a>
 800ae4e:	f7fe fcb7 	bl	80097c0 <__sinit>
 800ae52:	4b8e      	ldr	r3, [pc, #568]	; (800b08c <_vfiprintf_r+0x254>)
 800ae54:	429c      	cmp	r4, r3
 800ae56:	d11c      	bne.n	800ae92 <_vfiprintf_r+0x5a>
 800ae58:	6874      	ldr	r4, [r6, #4]
 800ae5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ae5c:	07db      	lsls	r3, r3, #31
 800ae5e:	d405      	bmi.n	800ae6c <_vfiprintf_r+0x34>
 800ae60:	89a3      	ldrh	r3, [r4, #12]
 800ae62:	059b      	lsls	r3, r3, #22
 800ae64:	d402      	bmi.n	800ae6c <_vfiprintf_r+0x34>
 800ae66:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae68:	f7ff f8c1 	bl	8009fee <__retarget_lock_acquire_recursive>
 800ae6c:	89a3      	ldrh	r3, [r4, #12]
 800ae6e:	071b      	lsls	r3, r3, #28
 800ae70:	d502      	bpl.n	800ae78 <_vfiprintf_r+0x40>
 800ae72:	6923      	ldr	r3, [r4, #16]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d11d      	bne.n	800aeb4 <_vfiprintf_r+0x7c>
 800ae78:	0021      	movs	r1, r4
 800ae7a:	0030      	movs	r0, r6
 800ae7c:	f7fd fc50 	bl	8008720 <__swsetup_r>
 800ae80:	2800      	cmp	r0, #0
 800ae82:	d017      	beq.n	800aeb4 <_vfiprintf_r+0x7c>
 800ae84:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ae86:	07db      	lsls	r3, r3, #31
 800ae88:	d50d      	bpl.n	800aea6 <_vfiprintf_r+0x6e>
 800ae8a:	2001      	movs	r0, #1
 800ae8c:	4240      	negs	r0, r0
 800ae8e:	b021      	add	sp, #132	; 0x84
 800ae90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae92:	4b7f      	ldr	r3, [pc, #508]	; (800b090 <_vfiprintf_r+0x258>)
 800ae94:	429c      	cmp	r4, r3
 800ae96:	d101      	bne.n	800ae9c <_vfiprintf_r+0x64>
 800ae98:	68b4      	ldr	r4, [r6, #8]
 800ae9a:	e7de      	b.n	800ae5a <_vfiprintf_r+0x22>
 800ae9c:	4b7d      	ldr	r3, [pc, #500]	; (800b094 <_vfiprintf_r+0x25c>)
 800ae9e:	429c      	cmp	r4, r3
 800aea0:	d1db      	bne.n	800ae5a <_vfiprintf_r+0x22>
 800aea2:	68f4      	ldr	r4, [r6, #12]
 800aea4:	e7d9      	b.n	800ae5a <_vfiprintf_r+0x22>
 800aea6:	89a3      	ldrh	r3, [r4, #12]
 800aea8:	059b      	lsls	r3, r3, #22
 800aeaa:	d4ee      	bmi.n	800ae8a <_vfiprintf_r+0x52>
 800aeac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aeae:	f7ff f89f 	bl	8009ff0 <__retarget_lock_release_recursive>
 800aeb2:	e7ea      	b.n	800ae8a <_vfiprintf_r+0x52>
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	ad08      	add	r5, sp, #32
 800aeb8:	616b      	str	r3, [r5, #20]
 800aeba:	3320      	adds	r3, #32
 800aebc:	766b      	strb	r3, [r5, #25]
 800aebe:	3310      	adds	r3, #16
 800aec0:	76ab      	strb	r3, [r5, #26]
 800aec2:	9707      	str	r7, [sp, #28]
 800aec4:	9f03      	ldr	r7, [sp, #12]
 800aec6:	783b      	ldrb	r3, [r7, #0]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d001      	beq.n	800aed0 <_vfiprintf_r+0x98>
 800aecc:	2b25      	cmp	r3, #37	; 0x25
 800aece:	d14e      	bne.n	800af6e <_vfiprintf_r+0x136>
 800aed0:	9b03      	ldr	r3, [sp, #12]
 800aed2:	1afb      	subs	r3, r7, r3
 800aed4:	9305      	str	r3, [sp, #20]
 800aed6:	9b03      	ldr	r3, [sp, #12]
 800aed8:	429f      	cmp	r7, r3
 800aeda:	d00d      	beq.n	800aef8 <_vfiprintf_r+0xc0>
 800aedc:	9b05      	ldr	r3, [sp, #20]
 800aede:	0021      	movs	r1, r4
 800aee0:	0030      	movs	r0, r6
 800aee2:	9a03      	ldr	r2, [sp, #12]
 800aee4:	f7ff ff95 	bl	800ae12 <__sfputs_r>
 800aee8:	1c43      	adds	r3, r0, #1
 800aeea:	d100      	bne.n	800aeee <_vfiprintf_r+0xb6>
 800aeec:	e0b5      	b.n	800b05a <_vfiprintf_r+0x222>
 800aeee:	696a      	ldr	r2, [r5, #20]
 800aef0:	9b05      	ldr	r3, [sp, #20]
 800aef2:	4694      	mov	ip, r2
 800aef4:	4463      	add	r3, ip
 800aef6:	616b      	str	r3, [r5, #20]
 800aef8:	783b      	ldrb	r3, [r7, #0]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d100      	bne.n	800af00 <_vfiprintf_r+0xc8>
 800aefe:	e0ac      	b.n	800b05a <_vfiprintf_r+0x222>
 800af00:	2201      	movs	r2, #1
 800af02:	1c7b      	adds	r3, r7, #1
 800af04:	9303      	str	r3, [sp, #12]
 800af06:	2300      	movs	r3, #0
 800af08:	4252      	negs	r2, r2
 800af0a:	606a      	str	r2, [r5, #4]
 800af0c:	a904      	add	r1, sp, #16
 800af0e:	3254      	adds	r2, #84	; 0x54
 800af10:	1852      	adds	r2, r2, r1
 800af12:	602b      	str	r3, [r5, #0]
 800af14:	60eb      	str	r3, [r5, #12]
 800af16:	60ab      	str	r3, [r5, #8]
 800af18:	7013      	strb	r3, [r2, #0]
 800af1a:	65ab      	str	r3, [r5, #88]	; 0x58
 800af1c:	9b03      	ldr	r3, [sp, #12]
 800af1e:	2205      	movs	r2, #5
 800af20:	7819      	ldrb	r1, [r3, #0]
 800af22:	485d      	ldr	r0, [pc, #372]	; (800b098 <_vfiprintf_r+0x260>)
 800af24:	f7ff f8e4 	bl	800a0f0 <memchr>
 800af28:	9b03      	ldr	r3, [sp, #12]
 800af2a:	1c5f      	adds	r7, r3, #1
 800af2c:	2800      	cmp	r0, #0
 800af2e:	d120      	bne.n	800af72 <_vfiprintf_r+0x13a>
 800af30:	682a      	ldr	r2, [r5, #0]
 800af32:	06d3      	lsls	r3, r2, #27
 800af34:	d504      	bpl.n	800af40 <_vfiprintf_r+0x108>
 800af36:	2353      	movs	r3, #83	; 0x53
 800af38:	a904      	add	r1, sp, #16
 800af3a:	185b      	adds	r3, r3, r1
 800af3c:	2120      	movs	r1, #32
 800af3e:	7019      	strb	r1, [r3, #0]
 800af40:	0713      	lsls	r3, r2, #28
 800af42:	d504      	bpl.n	800af4e <_vfiprintf_r+0x116>
 800af44:	2353      	movs	r3, #83	; 0x53
 800af46:	a904      	add	r1, sp, #16
 800af48:	185b      	adds	r3, r3, r1
 800af4a:	212b      	movs	r1, #43	; 0x2b
 800af4c:	7019      	strb	r1, [r3, #0]
 800af4e:	9b03      	ldr	r3, [sp, #12]
 800af50:	781b      	ldrb	r3, [r3, #0]
 800af52:	2b2a      	cmp	r3, #42	; 0x2a
 800af54:	d016      	beq.n	800af84 <_vfiprintf_r+0x14c>
 800af56:	2100      	movs	r1, #0
 800af58:	68eb      	ldr	r3, [r5, #12]
 800af5a:	9f03      	ldr	r7, [sp, #12]
 800af5c:	783a      	ldrb	r2, [r7, #0]
 800af5e:	1c78      	adds	r0, r7, #1
 800af60:	3a30      	subs	r2, #48	; 0x30
 800af62:	4684      	mov	ip, r0
 800af64:	2a09      	cmp	r2, #9
 800af66:	d94f      	bls.n	800b008 <_vfiprintf_r+0x1d0>
 800af68:	2900      	cmp	r1, #0
 800af6a:	d111      	bne.n	800af90 <_vfiprintf_r+0x158>
 800af6c:	e017      	b.n	800af9e <_vfiprintf_r+0x166>
 800af6e:	3701      	adds	r7, #1
 800af70:	e7a9      	b.n	800aec6 <_vfiprintf_r+0x8e>
 800af72:	4b49      	ldr	r3, [pc, #292]	; (800b098 <_vfiprintf_r+0x260>)
 800af74:	682a      	ldr	r2, [r5, #0]
 800af76:	1ac0      	subs	r0, r0, r3
 800af78:	2301      	movs	r3, #1
 800af7a:	4083      	lsls	r3, r0
 800af7c:	4313      	orrs	r3, r2
 800af7e:	602b      	str	r3, [r5, #0]
 800af80:	9703      	str	r7, [sp, #12]
 800af82:	e7cb      	b.n	800af1c <_vfiprintf_r+0xe4>
 800af84:	9b07      	ldr	r3, [sp, #28]
 800af86:	1d19      	adds	r1, r3, #4
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	9107      	str	r1, [sp, #28]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	db01      	blt.n	800af94 <_vfiprintf_r+0x15c>
 800af90:	930b      	str	r3, [sp, #44]	; 0x2c
 800af92:	e004      	b.n	800af9e <_vfiprintf_r+0x166>
 800af94:	425b      	negs	r3, r3
 800af96:	60eb      	str	r3, [r5, #12]
 800af98:	2302      	movs	r3, #2
 800af9a:	4313      	orrs	r3, r2
 800af9c:	602b      	str	r3, [r5, #0]
 800af9e:	783b      	ldrb	r3, [r7, #0]
 800afa0:	2b2e      	cmp	r3, #46	; 0x2e
 800afa2:	d10a      	bne.n	800afba <_vfiprintf_r+0x182>
 800afa4:	787b      	ldrb	r3, [r7, #1]
 800afa6:	2b2a      	cmp	r3, #42	; 0x2a
 800afa8:	d137      	bne.n	800b01a <_vfiprintf_r+0x1e2>
 800afaa:	9b07      	ldr	r3, [sp, #28]
 800afac:	3702      	adds	r7, #2
 800afae:	1d1a      	adds	r2, r3, #4
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	9207      	str	r2, [sp, #28]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	db2d      	blt.n	800b014 <_vfiprintf_r+0x1dc>
 800afb8:	9309      	str	r3, [sp, #36]	; 0x24
 800afba:	2203      	movs	r2, #3
 800afbc:	7839      	ldrb	r1, [r7, #0]
 800afbe:	4837      	ldr	r0, [pc, #220]	; (800b09c <_vfiprintf_r+0x264>)
 800afc0:	f7ff f896 	bl	800a0f0 <memchr>
 800afc4:	2800      	cmp	r0, #0
 800afc6:	d007      	beq.n	800afd8 <_vfiprintf_r+0x1a0>
 800afc8:	4b34      	ldr	r3, [pc, #208]	; (800b09c <_vfiprintf_r+0x264>)
 800afca:	682a      	ldr	r2, [r5, #0]
 800afcc:	1ac0      	subs	r0, r0, r3
 800afce:	2340      	movs	r3, #64	; 0x40
 800afd0:	4083      	lsls	r3, r0
 800afd2:	4313      	orrs	r3, r2
 800afd4:	3701      	adds	r7, #1
 800afd6:	602b      	str	r3, [r5, #0]
 800afd8:	7839      	ldrb	r1, [r7, #0]
 800afda:	1c7b      	adds	r3, r7, #1
 800afdc:	2206      	movs	r2, #6
 800afde:	4830      	ldr	r0, [pc, #192]	; (800b0a0 <_vfiprintf_r+0x268>)
 800afe0:	9303      	str	r3, [sp, #12]
 800afe2:	7629      	strb	r1, [r5, #24]
 800afe4:	f7ff f884 	bl	800a0f0 <memchr>
 800afe8:	2800      	cmp	r0, #0
 800afea:	d045      	beq.n	800b078 <_vfiprintf_r+0x240>
 800afec:	4b2d      	ldr	r3, [pc, #180]	; (800b0a4 <_vfiprintf_r+0x26c>)
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d127      	bne.n	800b042 <_vfiprintf_r+0x20a>
 800aff2:	2207      	movs	r2, #7
 800aff4:	9b07      	ldr	r3, [sp, #28]
 800aff6:	3307      	adds	r3, #7
 800aff8:	4393      	bics	r3, r2
 800affa:	3308      	adds	r3, #8
 800affc:	9307      	str	r3, [sp, #28]
 800affe:	696b      	ldr	r3, [r5, #20]
 800b000:	9a04      	ldr	r2, [sp, #16]
 800b002:	189b      	adds	r3, r3, r2
 800b004:	616b      	str	r3, [r5, #20]
 800b006:	e75d      	b.n	800aec4 <_vfiprintf_r+0x8c>
 800b008:	210a      	movs	r1, #10
 800b00a:	434b      	muls	r3, r1
 800b00c:	4667      	mov	r7, ip
 800b00e:	189b      	adds	r3, r3, r2
 800b010:	3909      	subs	r1, #9
 800b012:	e7a3      	b.n	800af5c <_vfiprintf_r+0x124>
 800b014:	2301      	movs	r3, #1
 800b016:	425b      	negs	r3, r3
 800b018:	e7ce      	b.n	800afb8 <_vfiprintf_r+0x180>
 800b01a:	2300      	movs	r3, #0
 800b01c:	001a      	movs	r2, r3
 800b01e:	3701      	adds	r7, #1
 800b020:	606b      	str	r3, [r5, #4]
 800b022:	7839      	ldrb	r1, [r7, #0]
 800b024:	1c78      	adds	r0, r7, #1
 800b026:	3930      	subs	r1, #48	; 0x30
 800b028:	4684      	mov	ip, r0
 800b02a:	2909      	cmp	r1, #9
 800b02c:	d903      	bls.n	800b036 <_vfiprintf_r+0x1fe>
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d0c3      	beq.n	800afba <_vfiprintf_r+0x182>
 800b032:	9209      	str	r2, [sp, #36]	; 0x24
 800b034:	e7c1      	b.n	800afba <_vfiprintf_r+0x182>
 800b036:	230a      	movs	r3, #10
 800b038:	435a      	muls	r2, r3
 800b03a:	4667      	mov	r7, ip
 800b03c:	1852      	adds	r2, r2, r1
 800b03e:	3b09      	subs	r3, #9
 800b040:	e7ef      	b.n	800b022 <_vfiprintf_r+0x1ea>
 800b042:	ab07      	add	r3, sp, #28
 800b044:	9300      	str	r3, [sp, #0]
 800b046:	0022      	movs	r2, r4
 800b048:	0029      	movs	r1, r5
 800b04a:	0030      	movs	r0, r6
 800b04c:	4b16      	ldr	r3, [pc, #88]	; (800b0a8 <_vfiprintf_r+0x270>)
 800b04e:	f7fb fd87 	bl	8006b60 <_printf_float>
 800b052:	9004      	str	r0, [sp, #16]
 800b054:	9b04      	ldr	r3, [sp, #16]
 800b056:	3301      	adds	r3, #1
 800b058:	d1d1      	bne.n	800affe <_vfiprintf_r+0x1c6>
 800b05a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b05c:	07db      	lsls	r3, r3, #31
 800b05e:	d405      	bmi.n	800b06c <_vfiprintf_r+0x234>
 800b060:	89a3      	ldrh	r3, [r4, #12]
 800b062:	059b      	lsls	r3, r3, #22
 800b064:	d402      	bmi.n	800b06c <_vfiprintf_r+0x234>
 800b066:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b068:	f7fe ffc2 	bl	8009ff0 <__retarget_lock_release_recursive>
 800b06c:	89a3      	ldrh	r3, [r4, #12]
 800b06e:	065b      	lsls	r3, r3, #25
 800b070:	d500      	bpl.n	800b074 <_vfiprintf_r+0x23c>
 800b072:	e70a      	b.n	800ae8a <_vfiprintf_r+0x52>
 800b074:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b076:	e70a      	b.n	800ae8e <_vfiprintf_r+0x56>
 800b078:	ab07      	add	r3, sp, #28
 800b07a:	9300      	str	r3, [sp, #0]
 800b07c:	0022      	movs	r2, r4
 800b07e:	0029      	movs	r1, r5
 800b080:	0030      	movs	r0, r6
 800b082:	4b09      	ldr	r3, [pc, #36]	; (800b0a8 <_vfiprintf_r+0x270>)
 800b084:	f7fc f82a 	bl	80070dc <_printf_i>
 800b088:	e7e3      	b.n	800b052 <_vfiprintf_r+0x21a>
 800b08a:	46c0      	nop			; (mov r8, r8)
 800b08c:	0800c5b0 	.word	0x0800c5b0
 800b090:	0800c5d0 	.word	0x0800c5d0
 800b094:	0800c590 	.word	0x0800c590
 800b098:	0800c7cc 	.word	0x0800c7cc
 800b09c:	0800c7d2 	.word	0x0800c7d2
 800b0a0:	0800c7d6 	.word	0x0800c7d6
 800b0a4:	08006b61 	.word	0x08006b61
 800b0a8:	0800ae13 	.word	0x0800ae13

0800b0ac <_putc_r>:
 800b0ac:	b570      	push	{r4, r5, r6, lr}
 800b0ae:	0006      	movs	r6, r0
 800b0b0:	000d      	movs	r5, r1
 800b0b2:	0014      	movs	r4, r2
 800b0b4:	2800      	cmp	r0, #0
 800b0b6:	d004      	beq.n	800b0c2 <_putc_r+0x16>
 800b0b8:	6983      	ldr	r3, [r0, #24]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d101      	bne.n	800b0c2 <_putc_r+0x16>
 800b0be:	f7fe fb7f 	bl	80097c0 <__sinit>
 800b0c2:	4b1c      	ldr	r3, [pc, #112]	; (800b134 <_putc_r+0x88>)
 800b0c4:	429c      	cmp	r4, r3
 800b0c6:	d124      	bne.n	800b112 <_putc_r+0x66>
 800b0c8:	6874      	ldr	r4, [r6, #4]
 800b0ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b0cc:	07db      	lsls	r3, r3, #31
 800b0ce:	d405      	bmi.n	800b0dc <_putc_r+0x30>
 800b0d0:	89a3      	ldrh	r3, [r4, #12]
 800b0d2:	059b      	lsls	r3, r3, #22
 800b0d4:	d402      	bmi.n	800b0dc <_putc_r+0x30>
 800b0d6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b0d8:	f7fe ff89 	bl	8009fee <__retarget_lock_acquire_recursive>
 800b0dc:	68a3      	ldr	r3, [r4, #8]
 800b0de:	3b01      	subs	r3, #1
 800b0e0:	60a3      	str	r3, [r4, #8]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	da05      	bge.n	800b0f2 <_putc_r+0x46>
 800b0e6:	69a2      	ldr	r2, [r4, #24]
 800b0e8:	4293      	cmp	r3, r2
 800b0ea:	db1c      	blt.n	800b126 <_putc_r+0x7a>
 800b0ec:	b2eb      	uxtb	r3, r5
 800b0ee:	2b0a      	cmp	r3, #10
 800b0f0:	d019      	beq.n	800b126 <_putc_r+0x7a>
 800b0f2:	6823      	ldr	r3, [r4, #0]
 800b0f4:	1c5a      	adds	r2, r3, #1
 800b0f6:	6022      	str	r2, [r4, #0]
 800b0f8:	701d      	strb	r5, [r3, #0]
 800b0fa:	b2ed      	uxtb	r5, r5
 800b0fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b0fe:	07db      	lsls	r3, r3, #31
 800b100:	d405      	bmi.n	800b10e <_putc_r+0x62>
 800b102:	89a3      	ldrh	r3, [r4, #12]
 800b104:	059b      	lsls	r3, r3, #22
 800b106:	d402      	bmi.n	800b10e <_putc_r+0x62>
 800b108:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b10a:	f7fe ff71 	bl	8009ff0 <__retarget_lock_release_recursive>
 800b10e:	0028      	movs	r0, r5
 800b110:	bd70      	pop	{r4, r5, r6, pc}
 800b112:	4b09      	ldr	r3, [pc, #36]	; (800b138 <_putc_r+0x8c>)
 800b114:	429c      	cmp	r4, r3
 800b116:	d101      	bne.n	800b11c <_putc_r+0x70>
 800b118:	68b4      	ldr	r4, [r6, #8]
 800b11a:	e7d6      	b.n	800b0ca <_putc_r+0x1e>
 800b11c:	4b07      	ldr	r3, [pc, #28]	; (800b13c <_putc_r+0x90>)
 800b11e:	429c      	cmp	r4, r3
 800b120:	d1d3      	bne.n	800b0ca <_putc_r+0x1e>
 800b122:	68f4      	ldr	r4, [r6, #12]
 800b124:	e7d1      	b.n	800b0ca <_putc_r+0x1e>
 800b126:	0029      	movs	r1, r5
 800b128:	0022      	movs	r2, r4
 800b12a:	0030      	movs	r0, r6
 800b12c:	f7fd faa2 	bl	8008674 <__swbuf_r>
 800b130:	0005      	movs	r5, r0
 800b132:	e7e3      	b.n	800b0fc <_putc_r+0x50>
 800b134:	0800c5b0 	.word	0x0800c5b0
 800b138:	0800c5d0 	.word	0x0800c5d0
 800b13c:	0800c590 	.word	0x0800c590

0800b140 <nan>:
 800b140:	2000      	movs	r0, #0
 800b142:	4901      	ldr	r1, [pc, #4]	; (800b148 <nan+0x8>)
 800b144:	4770      	bx	lr
 800b146:	46c0      	nop			; (mov r8, r8)
 800b148:	7ff80000 	.word	0x7ff80000

0800b14c <__sread>:
 800b14c:	b570      	push	{r4, r5, r6, lr}
 800b14e:	000c      	movs	r4, r1
 800b150:	250e      	movs	r5, #14
 800b152:	5f49      	ldrsh	r1, [r1, r5]
 800b154:	f000 f90c 	bl	800b370 <_read_r>
 800b158:	2800      	cmp	r0, #0
 800b15a:	db03      	blt.n	800b164 <__sread+0x18>
 800b15c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800b15e:	181b      	adds	r3, r3, r0
 800b160:	6563      	str	r3, [r4, #84]	; 0x54
 800b162:	bd70      	pop	{r4, r5, r6, pc}
 800b164:	89a3      	ldrh	r3, [r4, #12]
 800b166:	4a02      	ldr	r2, [pc, #8]	; (800b170 <__sread+0x24>)
 800b168:	4013      	ands	r3, r2
 800b16a:	81a3      	strh	r3, [r4, #12]
 800b16c:	e7f9      	b.n	800b162 <__sread+0x16>
 800b16e:	46c0      	nop			; (mov r8, r8)
 800b170:	ffffefff 	.word	0xffffefff

0800b174 <__swrite>:
 800b174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b176:	001f      	movs	r7, r3
 800b178:	898b      	ldrh	r3, [r1, #12]
 800b17a:	0005      	movs	r5, r0
 800b17c:	000c      	movs	r4, r1
 800b17e:	0016      	movs	r6, r2
 800b180:	05db      	lsls	r3, r3, #23
 800b182:	d505      	bpl.n	800b190 <__swrite+0x1c>
 800b184:	230e      	movs	r3, #14
 800b186:	5ec9      	ldrsh	r1, [r1, r3]
 800b188:	2200      	movs	r2, #0
 800b18a:	2302      	movs	r3, #2
 800b18c:	f000 f8c0 	bl	800b310 <_lseek_r>
 800b190:	89a3      	ldrh	r3, [r4, #12]
 800b192:	4a05      	ldr	r2, [pc, #20]	; (800b1a8 <__swrite+0x34>)
 800b194:	0028      	movs	r0, r5
 800b196:	4013      	ands	r3, r2
 800b198:	81a3      	strh	r3, [r4, #12]
 800b19a:	0032      	movs	r2, r6
 800b19c:	230e      	movs	r3, #14
 800b19e:	5ee1      	ldrsh	r1, [r4, r3]
 800b1a0:	003b      	movs	r3, r7
 800b1a2:	f000 f83d 	bl	800b220 <_write_r>
 800b1a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b1a8:	ffffefff 	.word	0xffffefff

0800b1ac <__sseek>:
 800b1ac:	b570      	push	{r4, r5, r6, lr}
 800b1ae:	000c      	movs	r4, r1
 800b1b0:	250e      	movs	r5, #14
 800b1b2:	5f49      	ldrsh	r1, [r1, r5]
 800b1b4:	f000 f8ac 	bl	800b310 <_lseek_r>
 800b1b8:	89a3      	ldrh	r3, [r4, #12]
 800b1ba:	1c42      	adds	r2, r0, #1
 800b1bc:	d103      	bne.n	800b1c6 <__sseek+0x1a>
 800b1be:	4a05      	ldr	r2, [pc, #20]	; (800b1d4 <__sseek+0x28>)
 800b1c0:	4013      	ands	r3, r2
 800b1c2:	81a3      	strh	r3, [r4, #12]
 800b1c4:	bd70      	pop	{r4, r5, r6, pc}
 800b1c6:	2280      	movs	r2, #128	; 0x80
 800b1c8:	0152      	lsls	r2, r2, #5
 800b1ca:	4313      	orrs	r3, r2
 800b1cc:	81a3      	strh	r3, [r4, #12]
 800b1ce:	6560      	str	r0, [r4, #84]	; 0x54
 800b1d0:	e7f8      	b.n	800b1c4 <__sseek+0x18>
 800b1d2:	46c0      	nop			; (mov r8, r8)
 800b1d4:	ffffefff 	.word	0xffffefff

0800b1d8 <__sclose>:
 800b1d8:	b510      	push	{r4, lr}
 800b1da:	230e      	movs	r3, #14
 800b1dc:	5ec9      	ldrsh	r1, [r1, r3]
 800b1de:	f000 f851 	bl	800b284 <_close_r>
 800b1e2:	bd10      	pop	{r4, pc}

0800b1e4 <strncmp>:
 800b1e4:	b530      	push	{r4, r5, lr}
 800b1e6:	0005      	movs	r5, r0
 800b1e8:	1e10      	subs	r0, r2, #0
 800b1ea:	d00b      	beq.n	800b204 <strncmp+0x20>
 800b1ec:	2400      	movs	r4, #0
 800b1ee:	3a01      	subs	r2, #1
 800b1f0:	5d2b      	ldrb	r3, [r5, r4]
 800b1f2:	5d08      	ldrb	r0, [r1, r4]
 800b1f4:	4283      	cmp	r3, r0
 800b1f6:	d104      	bne.n	800b202 <strncmp+0x1e>
 800b1f8:	4294      	cmp	r4, r2
 800b1fa:	d002      	beq.n	800b202 <strncmp+0x1e>
 800b1fc:	3401      	adds	r4, #1
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d1f6      	bne.n	800b1f0 <strncmp+0xc>
 800b202:	1a18      	subs	r0, r3, r0
 800b204:	bd30      	pop	{r4, r5, pc}

0800b206 <__ascii_wctomb>:
 800b206:	0003      	movs	r3, r0
 800b208:	1e08      	subs	r0, r1, #0
 800b20a:	d005      	beq.n	800b218 <__ascii_wctomb+0x12>
 800b20c:	2aff      	cmp	r2, #255	; 0xff
 800b20e:	d904      	bls.n	800b21a <__ascii_wctomb+0x14>
 800b210:	228a      	movs	r2, #138	; 0x8a
 800b212:	2001      	movs	r0, #1
 800b214:	601a      	str	r2, [r3, #0]
 800b216:	4240      	negs	r0, r0
 800b218:	4770      	bx	lr
 800b21a:	2001      	movs	r0, #1
 800b21c:	700a      	strb	r2, [r1, #0]
 800b21e:	e7fb      	b.n	800b218 <__ascii_wctomb+0x12>

0800b220 <_write_r>:
 800b220:	b570      	push	{r4, r5, r6, lr}
 800b222:	0004      	movs	r4, r0
 800b224:	0008      	movs	r0, r1
 800b226:	0011      	movs	r1, r2
 800b228:	001a      	movs	r2, r3
 800b22a:	2300      	movs	r3, #0
 800b22c:	4d05      	ldr	r5, [pc, #20]	; (800b244 <_write_r+0x24>)
 800b22e:	602b      	str	r3, [r5, #0]
 800b230:	f7f8 fb52 	bl	80038d8 <_write>
 800b234:	1c43      	adds	r3, r0, #1
 800b236:	d103      	bne.n	800b240 <_write_r+0x20>
 800b238:	682b      	ldr	r3, [r5, #0]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d000      	beq.n	800b240 <_write_r+0x20>
 800b23e:	6023      	str	r3, [r4, #0]
 800b240:	bd70      	pop	{r4, r5, r6, pc}
 800b242:	46c0      	nop			; (mov r8, r8)
 800b244:	200003f8 	.word	0x200003f8

0800b248 <__assert_func>:
 800b248:	b530      	push	{r4, r5, lr}
 800b24a:	0014      	movs	r4, r2
 800b24c:	001a      	movs	r2, r3
 800b24e:	4b09      	ldr	r3, [pc, #36]	; (800b274 <__assert_func+0x2c>)
 800b250:	0005      	movs	r5, r0
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	b085      	sub	sp, #20
 800b256:	68d8      	ldr	r0, [r3, #12]
 800b258:	4b07      	ldr	r3, [pc, #28]	; (800b278 <__assert_func+0x30>)
 800b25a:	2c00      	cmp	r4, #0
 800b25c:	d101      	bne.n	800b262 <__assert_func+0x1a>
 800b25e:	4b07      	ldr	r3, [pc, #28]	; (800b27c <__assert_func+0x34>)
 800b260:	001c      	movs	r4, r3
 800b262:	9301      	str	r3, [sp, #4]
 800b264:	9100      	str	r1, [sp, #0]
 800b266:	002b      	movs	r3, r5
 800b268:	4905      	ldr	r1, [pc, #20]	; (800b280 <__assert_func+0x38>)
 800b26a:	9402      	str	r4, [sp, #8]
 800b26c:	f000 f81c 	bl	800b2a8 <fiprintf>
 800b270:	f000 f892 	bl	800b398 <abort>
 800b274:	20000020 	.word	0x20000020
 800b278:	0800c7dd 	.word	0x0800c7dd
 800b27c:	0800c818 	.word	0x0800c818
 800b280:	0800c7ea 	.word	0x0800c7ea

0800b284 <_close_r>:
 800b284:	2300      	movs	r3, #0
 800b286:	b570      	push	{r4, r5, r6, lr}
 800b288:	4d06      	ldr	r5, [pc, #24]	; (800b2a4 <_close_r+0x20>)
 800b28a:	0004      	movs	r4, r0
 800b28c:	0008      	movs	r0, r1
 800b28e:	602b      	str	r3, [r5, #0]
 800b290:	f7f8 fb30 	bl	80038f4 <_close>
 800b294:	1c43      	adds	r3, r0, #1
 800b296:	d103      	bne.n	800b2a0 <_close_r+0x1c>
 800b298:	682b      	ldr	r3, [r5, #0]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d000      	beq.n	800b2a0 <_close_r+0x1c>
 800b29e:	6023      	str	r3, [r4, #0]
 800b2a0:	bd70      	pop	{r4, r5, r6, pc}
 800b2a2:	46c0      	nop			; (mov r8, r8)
 800b2a4:	200003f8 	.word	0x200003f8

0800b2a8 <fiprintf>:
 800b2a8:	b40e      	push	{r1, r2, r3}
 800b2aa:	b503      	push	{r0, r1, lr}
 800b2ac:	0001      	movs	r1, r0
 800b2ae:	ab03      	add	r3, sp, #12
 800b2b0:	4804      	ldr	r0, [pc, #16]	; (800b2c4 <fiprintf+0x1c>)
 800b2b2:	cb04      	ldmia	r3!, {r2}
 800b2b4:	6800      	ldr	r0, [r0, #0]
 800b2b6:	9301      	str	r3, [sp, #4]
 800b2b8:	f7ff fdbe 	bl	800ae38 <_vfiprintf_r>
 800b2bc:	b002      	add	sp, #8
 800b2be:	bc08      	pop	{r3}
 800b2c0:	b003      	add	sp, #12
 800b2c2:	4718      	bx	r3
 800b2c4:	20000020 	.word	0x20000020

0800b2c8 <_fstat_r>:
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	b570      	push	{r4, r5, r6, lr}
 800b2cc:	4d06      	ldr	r5, [pc, #24]	; (800b2e8 <_fstat_r+0x20>)
 800b2ce:	0004      	movs	r4, r0
 800b2d0:	0008      	movs	r0, r1
 800b2d2:	0011      	movs	r1, r2
 800b2d4:	602b      	str	r3, [r5, #0]
 800b2d6:	f7f8 fb11 	bl	80038fc <_fstat>
 800b2da:	1c43      	adds	r3, r0, #1
 800b2dc:	d103      	bne.n	800b2e6 <_fstat_r+0x1e>
 800b2de:	682b      	ldr	r3, [r5, #0]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d000      	beq.n	800b2e6 <_fstat_r+0x1e>
 800b2e4:	6023      	str	r3, [r4, #0]
 800b2e6:	bd70      	pop	{r4, r5, r6, pc}
 800b2e8:	200003f8 	.word	0x200003f8

0800b2ec <_isatty_r>:
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	b570      	push	{r4, r5, r6, lr}
 800b2f0:	4d06      	ldr	r5, [pc, #24]	; (800b30c <_isatty_r+0x20>)
 800b2f2:	0004      	movs	r4, r0
 800b2f4:	0008      	movs	r0, r1
 800b2f6:	602b      	str	r3, [r5, #0]
 800b2f8:	f7f8 fb06 	bl	8003908 <_isatty>
 800b2fc:	1c43      	adds	r3, r0, #1
 800b2fe:	d103      	bne.n	800b308 <_isatty_r+0x1c>
 800b300:	682b      	ldr	r3, [r5, #0]
 800b302:	2b00      	cmp	r3, #0
 800b304:	d000      	beq.n	800b308 <_isatty_r+0x1c>
 800b306:	6023      	str	r3, [r4, #0]
 800b308:	bd70      	pop	{r4, r5, r6, pc}
 800b30a:	46c0      	nop			; (mov r8, r8)
 800b30c:	200003f8 	.word	0x200003f8

0800b310 <_lseek_r>:
 800b310:	b570      	push	{r4, r5, r6, lr}
 800b312:	0004      	movs	r4, r0
 800b314:	0008      	movs	r0, r1
 800b316:	0011      	movs	r1, r2
 800b318:	001a      	movs	r2, r3
 800b31a:	2300      	movs	r3, #0
 800b31c:	4d05      	ldr	r5, [pc, #20]	; (800b334 <_lseek_r+0x24>)
 800b31e:	602b      	str	r3, [r5, #0]
 800b320:	f7f8 faf4 	bl	800390c <_lseek>
 800b324:	1c43      	adds	r3, r0, #1
 800b326:	d103      	bne.n	800b330 <_lseek_r+0x20>
 800b328:	682b      	ldr	r3, [r5, #0]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d000      	beq.n	800b330 <_lseek_r+0x20>
 800b32e:	6023      	str	r3, [r4, #0]
 800b330:	bd70      	pop	{r4, r5, r6, pc}
 800b332:	46c0      	nop			; (mov r8, r8)
 800b334:	200003f8 	.word	0x200003f8

0800b338 <memmove>:
 800b338:	b510      	push	{r4, lr}
 800b33a:	4288      	cmp	r0, r1
 800b33c:	d902      	bls.n	800b344 <memmove+0xc>
 800b33e:	188b      	adds	r3, r1, r2
 800b340:	4298      	cmp	r0, r3
 800b342:	d303      	bcc.n	800b34c <memmove+0x14>
 800b344:	2300      	movs	r3, #0
 800b346:	e007      	b.n	800b358 <memmove+0x20>
 800b348:	5c8b      	ldrb	r3, [r1, r2]
 800b34a:	5483      	strb	r3, [r0, r2]
 800b34c:	3a01      	subs	r2, #1
 800b34e:	d2fb      	bcs.n	800b348 <memmove+0x10>
 800b350:	bd10      	pop	{r4, pc}
 800b352:	5ccc      	ldrb	r4, [r1, r3]
 800b354:	54c4      	strb	r4, [r0, r3]
 800b356:	3301      	adds	r3, #1
 800b358:	429a      	cmp	r2, r3
 800b35a:	d1fa      	bne.n	800b352 <memmove+0x1a>
 800b35c:	e7f8      	b.n	800b350 <memmove+0x18>

0800b35e <_malloc_usable_size_r>:
 800b35e:	1f0b      	subs	r3, r1, #4
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	1f18      	subs	r0, r3, #4
 800b364:	2b00      	cmp	r3, #0
 800b366:	da01      	bge.n	800b36c <_malloc_usable_size_r+0xe>
 800b368:	580b      	ldr	r3, [r1, r0]
 800b36a:	18c0      	adds	r0, r0, r3
 800b36c:	4770      	bx	lr
	...

0800b370 <_read_r>:
 800b370:	b570      	push	{r4, r5, r6, lr}
 800b372:	0004      	movs	r4, r0
 800b374:	0008      	movs	r0, r1
 800b376:	0011      	movs	r1, r2
 800b378:	001a      	movs	r2, r3
 800b37a:	2300      	movs	r3, #0
 800b37c:	4d05      	ldr	r5, [pc, #20]	; (800b394 <_read_r+0x24>)
 800b37e:	602b      	str	r3, [r5, #0]
 800b380:	f7f8 fa9c 	bl	80038bc <_read>
 800b384:	1c43      	adds	r3, r0, #1
 800b386:	d103      	bne.n	800b390 <_read_r+0x20>
 800b388:	682b      	ldr	r3, [r5, #0]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d000      	beq.n	800b390 <_read_r+0x20>
 800b38e:	6023      	str	r3, [r4, #0]
 800b390:	bd70      	pop	{r4, r5, r6, pc}
 800b392:	46c0      	nop			; (mov r8, r8)
 800b394:	200003f8 	.word	0x200003f8

0800b398 <abort>:
 800b398:	2006      	movs	r0, #6
 800b39a:	b510      	push	{r4, lr}
 800b39c:	f000 f82e 	bl	800b3fc <raise>
 800b3a0:	2001      	movs	r0, #1
 800b3a2:	f7f8 fa85 	bl	80038b0 <_exit>

0800b3a6 <_raise_r>:
 800b3a6:	b570      	push	{r4, r5, r6, lr}
 800b3a8:	0004      	movs	r4, r0
 800b3aa:	000d      	movs	r5, r1
 800b3ac:	291f      	cmp	r1, #31
 800b3ae:	d904      	bls.n	800b3ba <_raise_r+0x14>
 800b3b0:	2316      	movs	r3, #22
 800b3b2:	6003      	str	r3, [r0, #0]
 800b3b4:	2001      	movs	r0, #1
 800b3b6:	4240      	negs	r0, r0
 800b3b8:	bd70      	pop	{r4, r5, r6, pc}
 800b3ba:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d004      	beq.n	800b3ca <_raise_r+0x24>
 800b3c0:	008a      	lsls	r2, r1, #2
 800b3c2:	189b      	adds	r3, r3, r2
 800b3c4:	681a      	ldr	r2, [r3, #0]
 800b3c6:	2a00      	cmp	r2, #0
 800b3c8:	d108      	bne.n	800b3dc <_raise_r+0x36>
 800b3ca:	0020      	movs	r0, r4
 800b3cc:	f000 f832 	bl	800b434 <_getpid_r>
 800b3d0:	002a      	movs	r2, r5
 800b3d2:	0001      	movs	r1, r0
 800b3d4:	0020      	movs	r0, r4
 800b3d6:	f000 f81b 	bl	800b410 <_kill_r>
 800b3da:	e7ed      	b.n	800b3b8 <_raise_r+0x12>
 800b3dc:	2000      	movs	r0, #0
 800b3de:	2a01      	cmp	r2, #1
 800b3e0:	d0ea      	beq.n	800b3b8 <_raise_r+0x12>
 800b3e2:	1c51      	adds	r1, r2, #1
 800b3e4:	d103      	bne.n	800b3ee <_raise_r+0x48>
 800b3e6:	2316      	movs	r3, #22
 800b3e8:	3001      	adds	r0, #1
 800b3ea:	6023      	str	r3, [r4, #0]
 800b3ec:	e7e4      	b.n	800b3b8 <_raise_r+0x12>
 800b3ee:	2400      	movs	r4, #0
 800b3f0:	0028      	movs	r0, r5
 800b3f2:	601c      	str	r4, [r3, #0]
 800b3f4:	4790      	blx	r2
 800b3f6:	0020      	movs	r0, r4
 800b3f8:	e7de      	b.n	800b3b8 <_raise_r+0x12>
	...

0800b3fc <raise>:
 800b3fc:	b510      	push	{r4, lr}
 800b3fe:	4b03      	ldr	r3, [pc, #12]	; (800b40c <raise+0x10>)
 800b400:	0001      	movs	r1, r0
 800b402:	6818      	ldr	r0, [r3, #0]
 800b404:	f7ff ffcf 	bl	800b3a6 <_raise_r>
 800b408:	bd10      	pop	{r4, pc}
 800b40a:	46c0      	nop			; (mov r8, r8)
 800b40c:	20000020 	.word	0x20000020

0800b410 <_kill_r>:
 800b410:	2300      	movs	r3, #0
 800b412:	b570      	push	{r4, r5, r6, lr}
 800b414:	4d06      	ldr	r5, [pc, #24]	; (800b430 <_kill_r+0x20>)
 800b416:	0004      	movs	r4, r0
 800b418:	0008      	movs	r0, r1
 800b41a:	0011      	movs	r1, r2
 800b41c:	602b      	str	r3, [r5, #0]
 800b41e:	f7f8 fa3f 	bl	80038a0 <_kill>
 800b422:	1c43      	adds	r3, r0, #1
 800b424:	d103      	bne.n	800b42e <_kill_r+0x1e>
 800b426:	682b      	ldr	r3, [r5, #0]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d000      	beq.n	800b42e <_kill_r+0x1e>
 800b42c:	6023      	str	r3, [r4, #0]
 800b42e:	bd70      	pop	{r4, r5, r6, pc}
 800b430:	200003f8 	.word	0x200003f8

0800b434 <_getpid_r>:
 800b434:	b510      	push	{r4, lr}
 800b436:	f7f8 fa31 	bl	800389c <_getpid>
 800b43a:	bd10      	pop	{r4, pc}

0800b43c <_init>:
 800b43c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b43e:	46c0      	nop			; (mov r8, r8)
 800b440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b442:	bc08      	pop	{r3}
 800b444:	469e      	mov	lr, r3
 800b446:	4770      	bx	lr

0800b448 <_fini>:
 800b448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b44a:	46c0      	nop			; (mov r8, r8)
 800b44c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b44e:	bc08      	pop	{r3}
 800b450:	469e      	mov	lr, r3
 800b452:	4770      	bx	lr
